/*!
 *
 * Bryntum Gantt 5.5.0
 *
 * Copyright(c) 2023 Bryntum AB
 * https://bryntum.com/contact
 * https://bryntum.com/license
 *
 */
type AnyConstructor<A = any> = new (...input: any[]) => A

/**
 * Http methods used by the AjaxStore in restful mode.
 */
type HttpMethods = any & {
    create: 'POST'|'PUT'
    read: 'GET'|'POST'
    update: 'PATCH'|'POST'|'PUT'
    delete: 'DELETE'|'POST'
}

/**
 * Object describing a duration.
 */
type DurationConfig = any & {
    /**
     * The magnitude of the duration
     */
    magnitude: number
    /**
     * The unit of the duration
     */
    unit: string
}

/**
 * Defines the properties of a relation between two stores.
 * Used as the values of a Model's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-relations-static">relations</a> definition.
 * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It will
 * point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id matching the
 * players `teamId` field. The team record in turn, will have a field called `players` which is a collection of all
 * players in the team.
 * ```javascript
 * class Player extends Model {
 *     static relations = {
 *         team : {
 *             foreignKey            : 'teamId',
 *             foreignStore          : 'teamStore',
 *             relatedCollectionName : 'players'
 *         }
 *     }
 * }
 * ```
 * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-relations-static">relations</a> for a more extensive example.
 */
type RelationConfig = any & {
    /**
     * Name of a field on this model which holds the foreign key value.
     */
    foreignKey: string
    /**
     * Name of a property on the model's first store, which holds the
     * foreign store. Or the actual store instance
     */
    foreignStore: string|Store
    /**
     * Optionally, name of a property that will be added to the records of the
     * foreign store, which will hold all records from the model's store related to it.
     */
    relatedCollectionName?: string
}

/**
 * An immutable object representing a store grouper.
 */
type Grouper = any & {
    /**
     * Field name
     */
    field: string
    /**
     * `true` to group ascending, `false` to group descending
     */
    ascending?: boolean
}

/**
 * Format returned by Store#findByField().
 */
type StoreSearchResult = any & {
    /**
     * Index of the record in the store
     */
    index: number
    /**
     * The record
     */
    data: Model
}

/**
 * An immutable object representing a store sorter.
 */
type Sorter = any & {
    /**
     * Field name
     */
    field: string
    /**
     * A custom sorting function
     */
    fn?: Function
    /**
     * `true` to sort ascending, `false` to sort descending
     */
    ascending?: boolean
}

/**
 * Options available when supplying a config object to the `syncDataOnLoad` config.
 */
type SyncDataOnLoadOptions = any & {
    /**
     * How to handle values for missing fields, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad">syncDataOnLoad</a>
     */
    keepMissingValues?: boolean
    /**
     * Threshold above which events are batched, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-syncDataOnLoad">syncDataOnLoad</a>
     */
    threshold?: string|number
}

/**
 * Configuration options available when defining a delayable function.
 */
type DelayableConfig = any & {
    /**
     * Type of delay to use. `raf` is short for `requestAnimationFrame`,
     * 'idle' for `requestIdleCallback` (not supported in Safari)
     */
    type: 'buffer'|'raf'|'idle'|'throttle'
    /**
     * Number of milliseconds to wait before (buffer) or after (throttle) calling the underlying
     * method. A value of 0 is equivalent to setting `immediate: true`.
     */
    delay?: number
    /**
     * Set to `true` to call immediately (effectively disabling the buffer/throttle)
     */
    immediate?: boolean
    /**
     * Set to `true` to cancel any pending animation frame requests and
     * schedule a new one on each call.
     */
    cancelOutstanding?: boolean
}

type BryntumListenerConfig = Record<string, Function|boolean|object|object[]|number|string> & {
    /**
     * The `this` reference for all listeners. May be overridden if a handler is specified in object form.
     */
    thisObj?: object
    /**
     * Specify as `true` to remove the listener as soon as it is invoked.
     */
    once?: boolean
    /**
     * The listener only waits for a specified time before
     * being removed. The value may be a number or an object containing an expiry handler.
     */
    expires?: number|object
    /**
     * An array of arguments to be passed to the handler before the event object.
     */
    args?: object[]
    /**
     * The priority for all listeners; higher priority listeners are called before lower.
     */
    prio?: number
    /**
     * A buffer time in milliseconds to wait after last event trigger to call the handler, to reduce the amount of handler calls for frequent events.
     */
    buffer?: number
    /**
     * A millisecond timeout value to throttle event triggering. With it specified a handler
     * will be called once immediately and then all following calls during the timeout period will be grouped together into one call once per throttle period.
     */
    throttle?: number
}

/**
 * An object that describes the actions that should trigger a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs">refreshWbs</a> to
 * update WBS values. Objects of this type are passed to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#config-wbsMode">wbsMode</a> when the simpler
 * values of `'auto'` or (the default) `'manual'` are not desired.
 * The value `'auto'` is equivalent to all properties of this object being `true`.
 * The value `'manual'` is equivalent to all properties of this object being `false`.
 */
type WbsMode = any & {
    /**
     * Set this property to `true` to refresh WBS values when nodes are added.
     */
    add?: boolean
    /**
     * Set this property to `true` to refresh WBS values when nodes are removed.
     */
    remove?: boolean
    /**
     * Set this property to `true` to refresh WBS values when nodes are sorted.
     */
    sort?: boolean
}

/**
 * Options for the `convertEmptyParentToLeaf` static property.
 */
type ConvertEmptyParentToLeafOptions = any & {
    /**
     * `true` to convert empty parent tasks to leaf tasks on load
     */
    onLoad: boolean
    /**
     * `true` to convert parent tasks that become empty after removing a child to leaf tasks
     */
    onRemove: boolean
}

type EffectiveDirection = any & {
    /**
     * The type of the direction value.
     */
    kind: 'own'|'enforced'|'inherited'
    /**
     * The actual direction. Depending on the `kind` value, it might be
     * a user-provided value (`own`), or value, enforced by the predecessor/successor (`enforced`), or value inherited
     * from the parent task (or project).
     */
    direction: 'Forward'|'Backward'
    /**
     * The task which forces the current direction
     */
    enforcedBy: TaskModel
    /**
     * The task from which the current direction is inherited
     */
    inheritedFrom: TaskModel
}

type CrudManagerStoreDescriptor = any & {
    /**
     * Unique store identifier. Store related requests/responses will be sent under this name.
     */
    storeId: string
    /**
     * The store itself.
     */
    store: Store
    /**
     * Set this if the store model has a predefined field to keep phantom record identifier.
     */
    phantomIdField?: string
    /**
     * id field name, if it's not specified then class will try to get it from store model.
     */
    idField?: string
    /**
     * Set to true to write all fields from modified records
     */
    writeAllFields?: boolean
}

/**
 * Predefined named colors (actual color might vary by theme):
 * <div class="b-colorbox b-inline b-sch-red"></div>red,
 * <div class="b-colorbox b-inline b-sch-pink"></div>pink,
 * <div class="b-colorbox b-inline b-sch-purple"></div>purple,
 * <div class="b-colorbox b-inline b-sch-magenta"></div>magenta,
 * <div class="b-colorbox b-inline b-sch-violet"></div>violet,
 * <div class="b-colorbox b-inline b-sch-indigo"></div>indigo,
 * <div class="b-colorbox b-inline b-sch-blue"></div>blue,
 * <div class="b-colorbox b-inline b-sch-cyan"></div>cyan,
 * <div class="b-colorbox b-inline b-sch-teal"></div>teal,
 * <div class="b-colorbox b-inline b-sch-green"></div>green,
 * <div class="b-colorbox b-inline b-sch-gantt-green"></div>gantt-green
 * <div class="b-colorbox b-inline b-sch-lime"></div>lime,
 * <div class="b-colorbox b-inline b-sch-yellow"></div>yellow,
 * <div class="b-colorbox b-inline b-sch-orange"></div>orange,
 * <div class="b-colorbox b-inline b-sch-deep-orange"></div>deep-orange
 * <div class="b-colorbox b-inline b-sch-gray"></div>gray
 * <div class="b-colorbox b-inline b-sch-light-gray"></div>light-gray
 */
type EventColor = 'red'|'pink'|'purple'|'magenta'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'gantt-green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'light-gray'|string|null & {
}

/**
 * An object representing a certain time interval.
 */
type TickInfo = any & {
    /**
     * The interval start date
     */
    startDate: Date
    /**
     * The interval end date
     */
    endDate: Date
}

/**
 * An object containing info on the resource allocation in a certain time interval.
 * The object is used when rendering interval bars and tooltips so it additionally provides a `rectConfig` property
 * which contains a configuration object for the `rect` SVG-element representing the interval bar.
 */
type ResourceAllocationInterval = any & {
    /**
     * Resource model
     */
    resource: SchedulerProResourceModel
    /**
     * Set of ongoing assignments for the interval
     */
    assignments: Set<any>
    /**
     * Individual ongoing assignments allocation indexed by assignments
     */
    assignmentIntervals: Map<any, any>
    /**
     * Resource effort in the interval (in milliseconds)
     */
    effort: number
    /**
     * `true` if the interval contains a fact of the resource overallocation
     */
    isOverallocated: boolean
    /**
     * `true` if the resource is underallocated in the interval
     */
    isUnderallocated: boolean
    /**
     * Maximum possible resource effort in the interval (in milliseconds)
     */
    maxEffort: number
    /**
     * The time interval
     */
    tick: TickInfo
    /**
     * Resource allocation in percents
     */
    units: number
    /**
     * Indicates if the interval is in the middle of the event timespan.
     */
    inEventTimeSpan: boolean
}

/**
 * An object containing info on the assignment effort in a certain time interval.
 * The object is used when rendering interval bars and tooltips so it additionally provides a `rectConfig` property
 * which contains a configuration object for the`rect` SVG-element representing the interval bar.
 */
type AssignmentAllocationInterval = any & {
    /**
     * The assignment which allocation is displayed.
     */
    assignment: SchedulerProAssignmentModel
    /**
     * Amount of work performed by the assigned resource in the interval
     */
    effort: number
    /**
     * The interval of time the allocation is collected for
     */
    tick: TickInfo
    /**
     * Assignment <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-units">units</a> value
     */
    units: number
    /**
     * The rectangle DOM configuration object
     */
    rectConfig: object
    /**
     * Indicates if the interval is in the middle of the event timespan.
     */
    inEventTimeSpan: boolean
}

/**
 * Resource allocation information.
 */
type ResourceAllocation = any & {
    /**
     * Resource model.
     */
    resource: SchedulerProResourceModel
    /**
     * The allocation report this instance is part of.
     */
    owner: ResourceAllocationInfo
    /**
     * The resource allocation data collected.
     */
    total: ResourceAllocationInterval[]
    /**
     * A `Map` keyed by <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModel</a> containing the
     * resource allocation collected for individual assignments.
     */
    byAssignments: Map<any, any>
}

/**
 * Class implementing <em>resource allocation report</em> - data representing the provided `resource`
 * utilization in the provided period of time.
 * The data is grouped by the provided time intervals (`ticks`).
 */
type ResourceAllocationInfo = any & {
    /**
     * Resource model.
     */
    resource: SchedulerProResourceModel
    /**
     * The collected allocation info.
     */
    allocation: ResourceAllocation
    /**
     * A calendar specifying intervals to group the collected
     * allocation by. <strong>Working</strong> time intervals of the calendars will be used for grouping.
     * This also specifies the time period to collect allocation for.
     * So the first interval `startDate` is treated as the period start and the last interval `endDate` is the period end.
     */
    ticks: SchedulerProCalendarModel
    /**
     * `true` indicates inactive events allocation is included
     * and `false` - it's skipped.
     */
    includeInactiveEvents: boolean
}

/**
 * Base class for all configurable classes.
 * Subclasses do not have to implement a constructor with its restriction of having to call super()
 * before there is a `this` reference. Subclasses instead implement a `construct` method which is
 * called by the `Base` constructor. This may call its `super` implementation at any time.
 * The `Base` constructor applies all configs to properties of the new instance. The instance
 * will have been c...
 */
export abstract class Base {
    /**
     * Returns a <em>copy</em> of the full configuration which was used to configure this object.
     */
    readonly config: object
    /**
     * This property is set to `true` before the `constructor` returns.
     */
    readonly isConstructing: boolean
    /**
     * This property is set to `true` by <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy">destroy</a> after destruction.
     * It is also one of the few properties that remains on the object after returning from `destroy()`. This property
     * is often checked in code paths that may encounter a destroyed object (like some event handlers) or in the
     * destruction path during cleanup.
     */
    readonly isDestroyed: boolean
    /**
     * This property is set to `true` on entry to the <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy">destroy</a> method. It remains on the objects after
     * returning from `destroy()`. If <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroyed">isDestroyed</a> is `true`, this property will also be `true`, so
     * there is no need to test for both (for example, `comp.isDestroying || comp.isDestroyed`).
     */
    readonly isDestroying: boolean
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
    /**
     * Destroys the provided objects by calling their <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy">destroy</a> method.
     * Skips empty values or objects that are already destroyed.
     * ```javascript
     * Base.destroy(myButton, toolbar1, helloWorldMessageBox);
     * ```
     */
    static destroy(...args: object[]): void;
    /**
     * Registers this class type with its Factory
     */
    static initClass(): void;
    /**
     * Checks if an obj is of type using object's $$name property and doing string comparison of the property with the
     * type parameter.
     */
    static isOfTypeName(type: string): boolean;
    /**
     * Applies one or more `mixins` to this class and returns the produced class constructor.
     * For example, instead of writing this:
     * ```javascript
     *  class A extends Delayable(Events(Localizable(Base))) {
     *      // ...
     *  }
     * ```
     * Using this method, one would write this:
     * ```javascript
     *  class A extends Base.mixin(Localizable, Events, Delayable) {
     *      // ...
     *  }
     * ```
     * If one of the mixins specified has already been mixed into the class, it will be ignored and not mixed in a
     * second time.
     */
    static mixin(...mixins: Function[]): Function;
    /**
     * Provides a way of calling callbacks which may have been specified as the <em>name</em> of a function
     * and optionally adds scope resolution.
     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`
     * then the function is resolved in this object. This is useful when configuring listeners
     * at the class level.
     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried
     * using the `owner` property until an object with the named function is present, then the
     * named function is called upon that object.
     * If a named function is not found, an error is thrown. If the function should be only called when present,
     * and may not be present, add a `?` as a suffix.
     */
    callback(fn: string|Function, thisObject: object, args: object[]): void;
    /**
     * Base implementation applies configuration.
     * Subclasses need only implement this if they have to initialize instance specific
     * properties required by the class. Often a `construct` method is
     * unnecessary. All initialization of incoming configuration properties can be
     * done in a `set propName` implementation.
     */
    construct(...args: object[]): void;
    /**
     * Destroys this object.
     * <div class="advanced-section">
     * This is primarily accomplished by calling <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-doDestroy">doDestroy</a>, however, prior to
     * calling `doDestroy`, <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroying">isDestroying</a> is set to `true`. After <a href="#Core/Base#function-doDestroy">doDestroy</a> returns,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroyed">isDestroyed</a> is set to `true`.
     * Do not override this method in subclasses. To provide class-specific cleanup, implement <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-doDestroy">doDestroy</a>
     * instead.
     * </div>
     */
    destroy(): void;
    /**
     * Removes all event listeners that were registered with the given `name`.
     */
    detachListeners(name: string|Symbol): void;
    /**
     * Classes implement this method to provide custom cleanup logic before calling `super.doDestroy()`. The general
     * pattern is as follows:
     * ```javascript
     *  class Foo extends Base {
     *      doDestroy() {
     *          // perform custom cleanup
     * 
     *          super.doDestroy();
     *      }
     *  }
     * ```
     * This method is called by <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy">destroy</a> which also prevents multiple calls from reaching `doDestroy`.
     * Prior to calling `doDestroy`, <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroying">isDestroying</a> is set to `true`. Upon return, the object is fully
     * destructed and <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#property-isDestroyed">isDestroyed</a> is set to `true`.
     * Do not call this method directly. Instead call <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-destroy">destroy</a>.
     */
    doDestroy(): void;
    /**
     * Experimental helper function, extracts the currently used configs and wraps them as an app, downloading the
     * resulting JS file.
     * This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.
     */
    downloadTestCase(): void;
    /**
     * Provides a way of locating callbacks which may have been specified as the <em>name</em> of a function
     * and optionally adds scope resolution.
     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`
     * then the function is resolved in this object. This is useful when configuring listeners
     * at the class level.
     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried
     * using the `owner` property until an object with the named function is present, then the
     * named function is called upon that object.
     */
    resolveCallback(handler: string|Function, thisObj: object, enforceCallability?: boolean): object;
    /**
     * Sets configuration options this object with all the properties passed in the parameter object.
     * Timing is taken care of. If the setter of one config is called first, and references
     * the value of another config which has not yet been set, that config will be set just
     * in time, and the <em>new</em> value will be used.
     */
    setConfig(config: object): void;
}

type AjaxStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * Store that uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch">Fetch API</a> to read data
 * from a remote server, and optionally sends synchronization requests to the server containing information about
 * locally created, modified and deleted records.
 * <h2>Create</h2>
 * Posts array of JSON data for newly added records to <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-createUrl">createUrl</a>, expects response containing an array
 * of JSON objects in same order with i...
 */
export class AjaxStore extends Store {
    /**
     * Yields the complete dataset size. If the store is <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a> this is the value
     * returned in the last loaded data block in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property. Otherwise it is
     * the number of records in the store's underlying storage collection.
     */
    readonly allCount: number
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Returns true if the Store is currently committing
     */
    readonly isCommitting: boolean
    /**
     * Returns a truthy value if the Store is currently loading.
     * A load operation is initiated by a load call, but the network request is not sent until
     * after a delay until the next event loop because of allowing all operations which may
     * request a load to coalesce into one call.
     * If the loading request is in this waiting state, the value will be `1`,
     * If the network request is in flight, the value will be `2`
     */
    readonly isLoading: boolean|number
    /**
     * Yields true if this Store is loaded page by page. This yields `true` if either of the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> of <a href="#Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a> configs are set.
     */
    readonly isPaged: boolean
    /**
     * <strong>If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>, yields the highest page number in the dataset as calculated
     * from the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a>
     * returned in the last page data block loaded.
     */
    readonly lastPage: number
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AjaxStoreConfig>);
    /**
     * Commits all changes (added, modified and removed) using corresponding urls (<a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-createUrl">createUrl</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-updateUrl">updateUrl</a> and <a href="#Core/data/AjaxStore#config-deleteUrl">deleteUrl</a>)
     */
    commit(): Promise<any>;
    /**
     * A provided function which creates an array of values for the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-filterParamName">filterParamName</a> to pass
     * any filters to the server upon load.
     * By default, this creates a JSON string containing the following properties:
     * ```javascript
     *    [{
     *        field         : &lt;theFieldName>
     *        operator      : May be: `'='`, `'!='`, `'>'`, `'>='`, `'&lt;'`, `'&lt;='`, `'*'`, `'startsWith'`, `'endsWith'`
     *        value         : The value to compare
     *        caseSensitive : true for case sensitive comparisons
     *    }]
     * ```
     */
    encodeFilterParams(filters: CollectionFilter[]): void;
    /**
     * A provided function which creates an array of values for the {#config-sortParamName} to pass
     * any sorters to the server upon load.
     * By default, this creates a JSON string containing the following properties:
     * ```javascript
     *    [{
     *        field     : &lt;theFieldName>
     *        ascending : true/false
     *    }]
     * ```
     */
    encodeSorterParams(sorters: Sorter[]): void;
    /**
     * Load data from the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>.
     */
    load(params?: object): Promise<any>;
    /**
     * Loads children into specified parent record. Parent records id is sent as a param (param name configured with
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a>.
     */
    loadChildren(parentRecord: Model): Promise<any>;
    /**
     * Loads a page of data from the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>.
     */
    loadPage(page: number, params: object): Promise<any>;
    /**
     * If this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, and is not already at the <a href="#Core/data/AjaxStore#property-lastPage">lastPage</a>
     * then this will load the next page of data.
     */
    nextPage(): Promise<any>;
    /**
     * If this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, and is not already at the first page
     * then this will load the previous page of data.
     */
    previousPage(): Promise<any>;
}

/**
 * Class which represents a duration object. A duration consists of a `magnitude` and a `unit`.
 * ```javascript
 * {
 *    unit      : String,
 *    magnitude : Number
 * }
 * ```
 * Valid values are:
 * 
 * * &quot;millisecond&quot; - Milliseconds
 * * &quot;second&quot; - Seconds
 * * &quot;minute&quot; - Minutes
 * * &quot;hour&quot; - Hours
 * * &quot;day&quot; - Days
 * * &quot;week&quot; - Weeks
 * * &qu...
 */
export class Duration {
    /**
     * Get/Set numeric magnitude `value`.
     */
    magnitude: number
    /**
     * The `milliseconds` property is a read only property which returns the number of milliseconds in this Duration
     */
    readonly milliseconds: number
    /**
     * Get/Set duration unit to use with the current magnitude value.
     * Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     */
    unit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * Returns truthy value if this Duration equals the passed value.
     */
    isEqual(value: Duration): boolean;
}

type ModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
}

/**
 * A Model is the definition of a record which can be added to (or loaded into) a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a>. It defines
 * which fields the data contains and exposes an interface to access and manipulate that data. The Model data is
 * populated through simple a JSON object.
 * By default, a Model stores a shallow copy of its raw json, but for records in stores configured with
 * `useRawData: true` it stores the supplied json object as is.
 * <h2>Defining fields</h2>
 * A Model...
 */
export class Model implements ModelLinkClass, TreeNodeClass, ModelStmClass {
    /**
     * An array containing all the <em>defined</em> fields for this Model class. This will include all superclass's
     * defined fields.
     */
    static readonly allFields: DataField[]
    /**
     * Flag checked from Store when loading data that determines if fields found in first records should be exposed in
     * same way as predefined fields.
     * *Note that we for all but the most basic use cases recommend explicitly defining the fields.
     * Having them auto exposed can lead to unexpected behavior, if the first record is not complete (fields missing,
     * null etc).
     * *
     */
    static autoExposeFields: boolean
    /**
     * The name of the data field which holds children of this Model when used in a tree structure
     * ```javascript
     * MyModel.childrenField = 'kids';
     * const parent = new MyModel({
     *     name : 'Dad',
     *     kids : [
     *         { name : 'Daughter' },
     *         { name : 'Son' }
     *     ]
     * });
     * ```
     */
    static childrenField: string
    /**
     * This static configuration option allows you to control whether an empty parent task should be converted into a
     * leaf. Enable/disable it for a whole class:
     * ```javascript
     * Model.convertEmptyParentToLeaf = false;
     * ```
     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object
     * with the following Boolean properties to customize the behaviour:
     * ```javascript
     * Model.convertEmptyParentToLeaf = {
     *     onLoad   : false,
     *     onRemove : true
     * }
     * ```
     */
    static convertEmptyParentToLeaf: boolean|{ onLoad: boolean, onRemove: boolean }
    /**
     * Template static getter which is supposed to be overridden to define default field values for the Model class.
     * Overrides `defaultValue` config specified by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-fields-static">fields</a> getter.
     * Returns a named object where key is a field name and value is a default value for the field.
     * NOTE: This is a legacy way of defining default values, we recommend using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-fields-static">fields</a> moving
     * forward.
     * ```javascript
     * class Person extends Model {
     *     static get fields() {
     *         return [
     *             { name : 'username', defaultValue : 'New person' }
     *         ];
     *     }
     * }
     * 
     * class Bot extends Person {
     *     static get defaults() {
     *         return {
     *             username : 'Bot' // default value of 'username' field is overridden
     *         };
     *     }
     * }
     * ```
     */
    static defaults: object
    /**
     * An object containing all the <em>defined</em> fields for this Model class. This will include all superclass's
     * defined fields through its prototype chain. So be aware that `Object.keys` and `Object.entries` will only
     * access this class's defined fields.
     */
    static readonly fieldMap: Record<string, DataField>
    /**
     * Array of defined fields for this model class. Subclasses add new fields by implementing this static
     * getter:
     * ```javascript
     * // Model defining two fields
     * class Person extends Model {
     *     static get fields() {
     *         return [
     *             { name : 'username', defaultValue : 'New person' },
     *             { name : 'birthdate', type : 'date' }
     *         ];
     *     }
     * }
     * 
     * // Subclass overriding one of the fields
     * class Bot extends Person {
     *     static get fields() {
     *         return [
     *             // Default value of 'username' field is overridden, any other setting from the parents
     *             // definition is preserved
     *             { name : 'username', defaultValue : 'Bot' }
     *         ];
     *     }
     * }
     * ```
     * Fields in a subclass are merged with those from the parent class, making it easy to override mappings,
     * formats etc.
     */
    static readonly fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The data source for the id field which provides the ID of instances of this Model.
     */
    static idField: string
    /**
     * Override in a subclass of Model to define relations to records in other stores.
     * Always defined on the &quot;one&quot; side, not the &quot;many&quot; side.
     * Expects an object where keys are relation names and values are <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#typedef-RelationConfig">relation configs</a>.
     * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It
     * will point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id
     * matching the players `teamId` field. The team record in turn, will have a field called `players` which is a
     * collection of all players in the team.
     * ```javascript
     * class Player extends Model {
     *     static relations = {
     *         // Define a relation between a player and a team
     *         team : {
     *             foreignKey            : 'teamId',
     *             foreignStore          : 'teamStore',
     *             relatedCollectionName : 'players'
     *         }
     *     }
     * }
     * 
     * const teamStore = new Store({
     *     data : [
     *         { id : 1, name : 'Brynas' },
     *         { id : 2, name : 'Leksand' }
     *     ]
     * });
     * 
     * const playerStore = new Store({
     *     modelClass : Player,
     *     // Matches foreignStore, allowing records of playerStore to find the related store
     *     teamStore,
     *     data       : [
     *         // teamId is specified as foreignKey, will be used to match the team
     *         { id : 1, name : 'Nicklas Backstrom', teamId : 1  },
     *         { id : 2, name : 'Elias Lindholm',   teamId : 1  },
     *         { id : 3, name : 'Filip Forsberg',  teamId : 2  }
     *     ],
     * }
     * 
     * playerStore.first.team.name // > Brynas
     * playerStore.last.team.name // > Leksand
     * teamStore.first.players // > [nick, elias]
     * teamStore.last.players // > [filip]
     * ```
     * To access the related record from the many side, use dot notation for the field name. For example in a Grid
     * column:
     * ```javascript
     * const grid = new Grid({
     *    store : playerStore,
     *    columns : [
     *        { field : 'name', text : 'Name' },
     *        { field : 'team.name', text : 'Team' }
     *    ]
     * });
     * ```
     */
    static relations: Record<string, RelationConfig>
    /**
     * Retrieve all children, not including filtered out nodes (by traversing sub nodes)
     */
    allChildren: Model[]
    /**
     * Same as <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-allFields-static">allFields</a>.
     */
    readonly allFields: DataField[]
    /**
     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at
     * level 1 and so on.
     */
    readonly childLevel: number
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Count all children (including sub-children) for a node (in its `firstStore´)
     */
    descendantCount: number
    /**
     * Start expanded or not (only valid for tree data)
     */
    readonly expanded: boolean
    /**
     * Same as <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-fieldMap-static">fieldMap</a>.
     */
    readonly fieldMap: Record<string, DataField>
    /**
     * Get the names of all fields in data.
     */
    readonly fieldNames: string[]
    /**
     * Convenience getter to get field definitions from class.
     */
    readonly fields: DataField[]
    /**
     * Get the first child of this node
     */
    readonly firstChild: Model
    /**
     * Get the first store that this model is assigned to.
     */
    readonly firstStore: Store
    /**
     * When called on a group header row returns list of records in that group. Returns `undefined` otherwise.
     */
    readonly groupChildren: Model[]|undefined
    /**
     * Checks if record has a generated id.
     * New records are assigned a generated id based on a UUID (starting with `_generated`), which is intended to be
     * temporary and should be replaced by the backend on commit.
     */
    hasGeneratedId: boolean
    /**
     * Are other records linked to this record?
     */
    readonly hasLinks: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.
     */
    internalId: number
    /**
     * True if this Model is currently batching its changes.
     */
    readonly isBatchUpdating: boolean
    /**
     * True if this models changes are currently being committed.
     */
    isCommitting: boolean
    /**
     * Set this property to `true` when adding a record on a conditional basis, that is, it is yet
     * to be confirmed as an addition.
     * When this is set, the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isPersistable">isPersistable</a> value of the record is <strong>false</strong>, and upon being
     * added to a Store it will <em>not</em> be eligible to be synced with the server as an added record.
     * Subsequently, <em>clearing</em> this property means this record will become persistable and eligible
     * for syncing as an added record.
     */
    isCreating: boolean
    /**
     * Returns true for a group header record
     */
    readonly isGroupHeader: boolean
    /**
     * Is a leaf node in a tree structure?
     */
    readonly isLeaf: boolean
    /**
     * Is this record linked to another record?
     */
    readonly isLinked: boolean
    /**
     * Returns true for parent nodes with children loaded (there might still be no children)
     */
    readonly isLoaded: boolean
    /**
     * True if this model has any uncommitted changes.
     */
    readonly isModified: boolean
    /**
     * Is a parent node in a tree structure?
     */
    readonly isParent: boolean
    /**
     * This yields `true` if this record is eligible for syncing with the server.
     * It can yield `false` if the record is in the middle of a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isBatchUpdating">batched update</a>,
     * or if it is a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">tentative record</a> yet to be confirmed as a new addition.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if the record is new and has not been persisted (and received a proper id).
     */
    readonly isPhantom: boolean
    /**
     * Returns `true` if this node is the root of the tree
     */
    readonly isRoot: boolean
    /**
     * Check if record has valid data. Default implementation returns true, override in your model to do actual validation.
     */
    isValid: boolean
    /**
     * Get the records data as a json string.
     * ```javascript
     * const record = new Model({
     *     title    : 'Hello',
     *     children : [
     *         ...
     *     ]
     * });
     * 
     * const jsonString = record.json;
     * 
     * //jsonString:
     * '{&quot;title&quot;:&quot;Hello&quot;,&quot;children&quot;:[...]}'
     * ```
     */
    json: string
    /**
     * Get the last child of this node
     */
    readonly lastChild: Model
    /**
     * Get a map of the modified fields in form of an object. The field´s <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-dataSource">dataSource</a>
     * is used as the property name in the returned object. The record´s id is always included.
     */
    readonly modificationData: object
    /**
     * Get a map of the modified data fields along with any <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> fields,
     * in form of an object. The field´s <em>dataSource</em> is used as the property name in the returned object.
     * Used internally by AjaxStore / CrudManager when sending updates.
     */
    readonly modificationDataToWrite: object
    /**
     * Get a map of the modified fields in form of an object. The field <em>names</em> are used as the property names
     * in the returned object.
     */
    readonly modifications: object
    /**
     * Get the next sibling of this node
     */
    readonly nextSibling: Model
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    readonly orderedParentIndex: number
    /**
     * This is a read-only property providing access to the parent node.
     */
    readonly parent: Model
    /**
     * Reading this property returns the id of the parent node, if this record is a child of a node.
     * Setting this property appends this record to the record with the passed id <strong>in the same store that this record
     * is already in</strong>.
     * Note that setting this property is <strong>only valid if this record is already part of a tree store</strong>.
     * This is not intended for general use. This is for when a server responds to a record mutation and the server
     * decides to move a record to a new parent. If a `parentId` property is passed in the response data for a record,
     * that record will be moved.
     */
    parentId: number|string|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    readonly parentIndex: number
    /**
     * Get the previous sibling of this node
     */
    readonly previousSibling: Model
    /**
     * Returns count of all preceding sibling nodes (including their children).
     */
    previousSiblingsTotalCount: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Reference to STM manager, if used
     */
    stm: CoreStateTrackingManager
    /**
     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)
     */
    visibleDescendantCount: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ModelConfig>, store?: Store, meta?: object);
    /**
     * Add a field definition in addition to those predefined in `fields`.
     */
    static addField(fieldDef: string|Partial<ModelFieldConfig>): void;
    /**
     * Gets the id of specified model or model data object, or the value if passed string/number.
     */
    static asId(model: Model|string|number): string|number;
    /**
     * Get the definition for a field by name. Caches results.
     */
    static getFieldDefinition(fieldName: string): DataField;
    /**
     * Processes input to a field, converting to expected type.
     */
    static processField(fieldName: string, value: any): any;
    /**
     * Remove a field definition by name.
     */
    static removeField(fieldName: string): void;
    /**
     * This method returns `true` if this record has all expanded ancestors and is therefore
     * eligible for inclusion in a UI.
     */
    ancestorsExpanded(store?: Store): boolean;
    /**
     * Append a child record(s) to any current children.
     */
    appendChild(childRecord: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model|Model[]|null;
    /**
     * Begin a batch, which stores changes and commits them when the batch ends.
     * Prevents events from being fired during batch.
     * ```javascript
     * record.beginBatch();
     * record.name = 'Mr Smith';
     * record.team = 'Golden Knights';
     * record.endBatch();
     * ```
     * Please note that you can also set multiple fields in a single call using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">set</a>, which in many
     * cases can replace using a batch:
     * ```javascript
     * record.set({
     *   name : 'Mr Smith',
     *   team : 'Golden Knights'
     * });
     * ```
     */
    beginBatch(): void;
    /**
     * Bubbles up from this node, calling the specified function with each node.
     */
    bubble(fn: Function, skipSelf?: boolean): void;
    /**
     * Bubbles up from this node, calling the specified function with each node,
     * while the function returns true.
     */
    bubbleWhile(fn: Function, skipSelf?: boolean): boolean;
    /**
     * Cancels current batch operation. Any changes during the batch are discarded.
     */
    cancelBatch(): void;
    /**
     * Clear stored changes, used on commit. Does not revert changes.
     */
    clearChanges(includeDescendants?: boolean): void;
    /**
     * Removes all child nodes from this node.
     */
    clearChildren(silent?: boolean): Model[];
    /**
     * Checks if this model contains another model as one of it's descendants
     */
    contains(childOrId: Model|string|number, skipSelf?: boolean): boolean;
    /**
     * Converts a leaf node to a parent node, assigning an empty array as its children
     */
    convertToParent(silent?: boolean): void;
    /**
     * Makes a copy of this model, assigning the specified id or a generated id and also allowing you to pass field values to
     * the created copy.
     * ```javascript
     * const record = new Model({ name : 'Super model', hairColor : 'Brown' });
     * const clone = record.copy({ name : 'Super model clone' });
     * ```
     */
    copy(newId?: number|string|object, deep?: boolean): Model;
    /**
     * End a batch, triggering events if data has changed.
     */
    endBatch(silent?: boolean): void;
    /**
     * Compares this Model instance to the passed instance. If they are of the same type, and all fields
     * (except, obviously, `id`) are equal, this returns `true`.
     */
    equals(other: Model): boolean;
    /**
     * Generates an id for a new record (a phantom id), based on a UUID (starting with `_generated`).
     * Generated ids are intended to be temporary and should be replaced by the backend on commit.
     */
    generateId(): string;
    /**
     * Get value for specified field name. You can also use the generated getters if loading through a Store.
     * If model is currently in batch operation this will return updated batch values which are not applied to Model
     * until endBatch() is called.
     */
    get(fieldName: string): any;
    /**
     * Returns raw data from the encapsulated data object for the passed field name
     */
    getData(fieldName: string): any;
    /**
     * Get the data source used by specified field. Returns the fieldName if no data source specified.
     */
    getDataSource(fieldName: string): string;
    /**
     * Count visible (expanded)/all children for this node, optionally specifying for which store.
     */
    getDescendantCount(onlyVisible?: boolean, store?: Store): number;
    /**
     * Convenience function to get the definition for a field from class.
     */
    getFieldDefinition(fieldName: string): DataField;
    /**
     * Returns `true` if this Model currently has outstanding batched changes for the specified field name.
     */
    hasBatchedChange(fieldName: string): boolean;
    /**
     * Insert a child record(s) before an existing child record.
     */
    insertChild(childRecord: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], before?: Model, silent?: boolean): Model|Model[]|null;
    /**
     * Used by stores to assess the record's collapsed/expanded state in that store.
     */
    isExpanded(store: Store): boolean;
    /**
     * Returns true if this model has uncommitted changes for the provided field.
     */
    isFieldModified(fieldName: string): boolean;
    /**
     * Creates a proxy record (using native Proxy) linked to this record (the original). The proxy records shares most
     * data with the original, except for its `id` (which is always generated), and ordering fields such as
     * `parentIndex` and `parentId` etc.
     * Any change to the proxy record will be reflected on the original, and vice versa. A proxy record is not meant to
     * be persisted, only the original record should be persisted. Thus, proxy records are not added to stores change
     * tracking (added, modified and removed records).
     * Removing the original record removes all proxies.
     * Creating a proxy record allows a Store to seemingly contain the record multiple times, something that is
     * otherwise not possible. It also allows a record to be used in both a tree store and in a flat store.
     * *Note that not all UI features support linked records*
     */
    link(): typeof Proxy;
    /**
     * Removes this record from all stores (and in a tree structure, also from its parent if it has one).
     */
    remove(silent?: boolean): void;
    /**
     * Remove a child record. Only direct children of this node can be removed, others are ignored.
     */
    removeChild(childRecords: Model|Model[], isMove?: boolean, silent?: boolean): Model[];
    /**
     * Replaces all child nodes with the new node set.
     */
    replaceChildren(childRecords: Model|Model[]): Model[];
    /**
     * Reverts changes in this back to their original values.
     */
    revertChanges(): void;
    /**
     * Set value for the specified field. You can also use the generated setters if loading through a Store.
     * Setting a single field, supplying name and value:
     * ```javascript
     * record.set('name', 'Clark');
     * ```
     * Setting multiple fields, supplying an object:
     * ```javascript
     * record.set({
     *     name : 'Clark',
     *     city : 'Metropolis'
     * });
     * ```
     */
    set(field: string|object, value?: any, silent?: boolean): void;
    /**
     * Used by `JSON.stringify()` to correctly convert this record to json.
     * In most cases no point in calling it directly.
     * ```javascript
     * // This will call `toJSON()`
     * const json = JSON.stringify(record);
     * ```
     * If called manually, the resulting object is a clone of `record.data` + the data of any children:
     * ```javascript
     * const record = new Model({
     *     title    : 'Hello',
     *     children : [
     *         ...
     *     ]
     * });
     * 
     * const jsonObject = record.toJSON();
     * 
     * // jsonObject:
     * {
     *     title : 'Hello',
     *     children : [
     *         ...
     *     ]
     * }
     * ```
     */
    toJSON(): object;
    /**
     * Represent the record as a string, by default as a JSON string. Tries to use an abbreviated version of the
     * object's data, using id + name/title/text/label/description. If no such field exists, the full data is used.
     * ```javascript
     * const record = new Model({ id : 1, name : 'Steve Rogers', alias : 'Captain America' });
     * console.log(record.toString()); // logs { &quot;id&quot; : 1, &quot;name&quot; : &quot;Steve Rogers&quot; }
     * ```
     */
    toString(): string;
    /**
     * Traverses all child nodes recursively calling the passed function
     * on a target node <strong>before</strong> iterating the child nodes.
     */
    traverse(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean, useOrderedTree?: boolean }|boolean): void;
    /**
     * Traverses all child nodes recursively calling the passed function
     * on child nodes of a target <strong>before</strong> calling it on the node.
     */
    traverseBefore(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean }|boolean): void;
    /**
     * Traverses child nodes recursively while fn returns true
     */
    traverseWhile(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean }|boolean): boolean;
}

type StoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * The Store represents a data container which holds flat data or tree structures. An item in the Store is often called
 * a ´record´ and it is simply an instance of the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (or any subclass thereof).
 * Typically you load data into a store to display it in a Grid or a ComboBox. The Store is the backing data component
 * for any component that is showing data in a list style UI.
 * <h2>Data format</h2>
 * Data is store in a JSON array the Store offers an API to ed...
 */
export class Store extends Base implements EventsClass, StoreFilterClass, StoreChangesClass, StoreCRUDClass, StoreSumClass, StoreSearchClass, StoreSortClass, StoreGroupClass, StoreChainedClass, StoreStateClass, StoreRelationClass, StoreTreeClass, StoreStmClass, StoreSyncClass {
    /**
     * A special `Symbol` signalizing treeify method that the current record grouping should be stopped.
     * ```javascript
     * const newRoot = workerStore.treeify([
     *     // group workers by company
     *     worker => {
     *         // if the worker is unemployed we don't put it in a group
     *         // we just show such record on the root level
     *         if (!worker.company) {
     *             return Store.StopBranch
     *         }
     * 
     *         return worker.company;
     *     ]
     * ]);
     * ```
     */
    static StopBranch: Symbol
    /**
     * Get all registered stores
     */
    static stores: Store[]
    /**
     * Returns the complete dataset size regardless of tree node collapsing or filtering
     */
    readonly allCount: number
    /**
     * Returns all records (ignoring any filters) from the store.
     */
    readonly allRecords: Model[]
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Setting autoCommit to true automatically commits changes to records.
     */
    autoCommit: boolean
    /**
     * Get uncommitted changes as an object of added/modified/removed arrays of records.
     * ```javascript
     * // Format:
     * {
     *      added: [], // array of Core.data.Model
     *      modified: [], // array of Core.data.Model
     *      removed: [] // array of Core.data.Model
     * }
     * ```
     */
    readonly changes: { added: Model[], modified: Model[], removed: Model[] }
    /**
     * Record count, including records added for group headers etc.
     */
    readonly count: number
    /**
     * Sets data in the store.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * Called on initialization if data is in config otherwise call it yourself after ajax call etc. Can also be used to
     * get the raw original data.
     * ```javascript
     * store.data = [
     *     { id : 1, name : 'Linda', city : 'NY' },
     *     { id : 2, name : 'Olivia', city : 'Paris' },
     *     ...
     * ];
     * ```
     */
    data: object[]
    /**
     * Currently applied filters. A collection of <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> instances.
     */
    readonly filters: Collection
    /**
     * Get the first record in the store.
     */
    readonly first: Model
    /**
     * Pretty printed version of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-json">json</a>
     */
    readonly formattedJSON: string
    /**
     * Currently used groupers.
     * To set groupers when remote sorting is enabled by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-sortParamName">sortParamName</a> you should
     * use <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreGroup#function-setGroupers">setGroupers</a> instead to be able to wait for the operation to finish.
     */
    groupers: Grouper[]
    /**
     * Store's unique identifier.
     */
    readonly id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Is this a chained store?
     */
    readonly isChained: boolean
    /**
     * Check if store is filtered
     */
    readonly isFiltered: boolean
    /**
     * Is store currently grouped?
     */
    readonly isGrouped: boolean
    /**
     * Is store sorted?
     */
    readonly isSorted: boolean
    /**
     * True if this Store is configured to handle tree data (with `tree : true`) or if this is a
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-makeChained">chained store</a> and the master store is a tree store.
     */
    readonly isTree: boolean
    /**
     * Retrieve or set the data of all records as a JSON string
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Superman' },
     *         { id : 2, name : 'Batman' }
     *     ]
     * });
     * 
     * const jsonString = store.json;
     * 
     * //jsonString:
     * '[{&quot;id&quot;:1,&quot;name&quot;:&quot;Superman&quot;},{&quot;id&quot;:2,&quot;name&quot;:&quot;Batman&quot;}]
     * ```
     */
    json: string
    /**
     * Get the last record in the store.
     */
    readonly last: Model
    /**
     * Returns all leaf records in a tree store
     */
    leaves: Model[]
    /**
     * Class used to represent records. Defaults to class Model.
     */
    modelClass: typeof Model
    /**
     * Record count, for data records. Not including records added for group headers etc.
     */
    readonly originalCount: number
    /**
     * Returns all &quot;visible&quot; records.
     * <strong>Note:</strong> The returned value <strong>may not</strong> be mutated!
     */
    readonly records: Model[]
    /**
     * The invisible root node of this tree.
     */
    readonly rootNode: Model
    /**
     * Currently applied sorters
     */
    readonly sorters: Sorter[]
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
    /**
     * Get a store from the store map by id.
     */
    static getStore(id: string|number|object[]): Store;
    /**
     * Add records to store.
     */
    add(records: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model[];
    /**
     * Adds a single filter to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#config-filters">filters</a> collection. By default, filters are reevaluated
     * and a Store change event fired.
     * If the `silent` parameter is passed as `true`, multiple filters can be added without causing data changes.
     * When the filters are as required, call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-filter">filter</a> with no parameters
     * to apply the filters to the store.
     */
    addFilter(newFilter: Partial<CollectionFilterConfig>|Function, silent?: boolean): Promise<CollectionFilter>;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Add a sorting level (a sorter).
     */
    addSorter(field: string|Sorter[]|Sorter|Function, ascending?: boolean): Promise<any|null>;
    /**
     * Applies changes from another store to this store. Useful if cloning records in one store to display in a
     * grid in a popup etc. to reflect back changes.
     */
    applyChangesFromStore(otherStore: Store): void;
    /**
     * Applies a set of changes (presumable from a backend) expressed as an object matching the format outputted by the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-changes">changes</a> property: `{ added : [], modified/updated : [], removed : [] }`
     * `added` is expected to be an array of raw data objects consumable by the stores model class for records to add to
     * the store (see example snippet below).
     * `modified` (or `updated` for compatibility with Schedulers CrudManager) is expected to have the same format as
     * `added`, but should always include the `id` of the record to update.
     * Records that have been created locally and gets assigned a proper id by the backend are expected to also pass a
     * `phantomId` field (name of the field is configurable using the `phantomIdField` arg, more info on phantom ids
     * below), to match it with the current id of a local record (`id` will contain the new id).
     * Note that it is also possible to pass this `phantomId` -&gt; `id` mapping in the `added` array. When encountering a
     * record in that array that already exists in the local store, it will be treated the same was as a record in the
     * `modified` array.
     * `removed` is expected to be an array of objects with the `{ id : xx }` shape. Any matches on an id in the store
     * will be removed, those and any non matches will also be cleared from the change tracking of the store.
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     * As an example, consider a store with the following initial state and some operations performed on it:
     * ```javascript
     * // Load some data into the store
     * store.data = [
     *     { id : 1, name : 'Minerva' },
     *     { id : 2, name : 'Mars' },
     *     { id : 3, name : 'Jupiter' }
     * ];
     * // Add a new record. It gets assigned a generated id,
     * // for example 'generated56'
     * store.add({ name : 'Artemis' });
     * // Remove Jupiter
     * store.remove(3);
     * ```
     * After syncing those operations to a custom backend (however you chose to solve it in your application) we might
     * get the following response (see &quot;Transforming a response to the correct format&quot; below if your backend responds
     * in another format):
     * ```javascript
     * const serverResponse = {
     *     added : [
     *         // Added by the backend, will be added locally
     *         { id : 5, name : 'Demeter' }
     *     ],
     * 
     *     updated : [
     *         // Will change the name of Minerva -> Athena
     *         { id : 1, name : 'Athena' },
     *         // Will set proper id 4 for Artemis
     *         { $PhantomId : 'generated56', id : 4 }
     *     ],
     * 
     *     removed : [
     *         // Confirmed remove of Jupiter
     *         { id : 3 },
     *         // Removed by the backend, Mars will be removed locally
     *         { id : 2 }
     *     ]
     * };
     * ```
     * If that response is then passed to this function:
     * ```javascript
     * store.applyChangeSet(serverResponse);
     * ```
     * The end result will be the following data in the store:
     * ```javascript
     * [
     *     { id : 1, name : 'Athena' }, // Changed name
     *     { id : 4, name : 'Artemis' }, // Got a proper id
     *     { id : 5, name : 'Demeter' } // Added by the backend
     * ]
     * ```
     * <h3>Phantom ids</h3>
     * When a record is created locally, it is always assigned a generated id. That id is called a phantom id (note that
     * it is assigned to the normal id field). When passing the new record to the backend, the id is sent with it. When
     * the backend inserts the record into the database, it (normally) gets a proper id assigned. That id then needs to
     * be passed back in the response, to update the local record with the correct id. Making sure that future updates
     * match the correct row in the database.
     * For example a newly created record should be passed similar to this to the backend (pseudo format, up to the
     * application/backend to decide):
     * ```json
     * {
     *     &quot;added&quot; : {
     *         &quot;id&quot; : &quot;generated79&quot;,
     *         &quot;name&quot; : &quot;Hercules&quot;,
     *         ...
     *     }
     * }
     * ```
     * For the backend response to be applicable for this function, it should then respond with:
     * ```json
     * {
     *     &quot;updated&quot; : {
     *         {
     *             &quot;$PhantomId&quot; : &quot;generated79&quot;,
     *             &quot;id&quot; : 465
     *         }
     *     }
     * }
     * ```
     * (Or, as stated above, it can also be passed in the &quot;added&quot; array. Which ever suits your backend best).
     * This function will then change the id of the local record using the phantom id `generated79` to `465`.
     * <h3>Transforming a response to the correct format</h3>
     * This function optionally accepts a `transformFn`, a function that will be called with the `changes`. It is
     * expected to return a changeset in the format described above (`{ added : [], updated : [], removed : [] }`),
     * which then will be used to apply the changes.
     * Consider the following &quot;non standard&quot; (made up) changeset:
     * ```javascript
     * const changes = {
     *     // Database ids for records previously added locally
     *     assignedIds : {
     *         'phantom1' : 10,
     *         'phantom2' : 15
     *     },
     *     // Ids records removed by the backend
     *     removed : [11, 27],
     *     // Modified records, keyed by id
     *     altered : {
     *         12 : { name : 'Changed' }
     *     },
     *     // New records, keyed by id
     *     inserted : {
     *         20  : { name : 'New' }
     *     }
     * }
     * ```
     * Since it does not match the expected format it has to be transformed:
     * ```javascript
     * store.applyChangeset(changes, ({ assignedIds, inserted, altered, removed }) => ({
     *    // Convert inserted to [{ id : 20, name : 'New' }]
     *    added : Object.entries(inserted).map(([id, data] => ({ id, ...data }),
     *    updated : [
     *        // Convert assignedIds to [{ $PhantomId : 'phantom1', id : 10 }, ...]
     *       ...Object.entries(assignedIds).map(([phantomId, id])) => ({ $PhantomId : phantomId, id }),
     *       // Convert altered to [{ id : 12, name : 'Changed' }]
     *       ...Object.entries(modified).map(([id, data] => ({ id, ...data })
     *    ],
     *    // Convert removed to [{ id : 11 }, ...]
     *    removed : removed.map(id => ({ id }))
     * }));
     * ```
     * The transform function above would output:
     * ```javascript
     * {
     *     added : [
     *         {  id : 20, name : 'New' }
     *     ],
     *     updated : [
     *         { $PhantomId : 'phantom1', id : 10 },
     *         { $PhantomId : 'phantom2', id : 15 },
     *         {  id : 12, name : 'Changed' }
     *     ],
     *     removed : [
     *        { id : 11 },
     *        { id : 12 }
     *     ]
     * }
     * ```
     * And that format can then be applied.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Returns the average value for the specified field. Defaults to look through all records in store
     */
    average(field: string, records: Model[]): number;
    /**
     * Stops this store from firing events until <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-endBatch">endBatch</a> is called. Multiple calls to `beginBatch`
     * stack up, and will require an equal number of `endBatch` calls to resume events.
     * Upon call of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-endBatch">endBatch</a>, a <a href="#Core/data/Store#event-refresh">refresh</a> event is triggered to allow UIs to
     * update themselves based upon the new state of the store.
     * This is extremely useful when making a large number of changes to a store. It is important not to trigger
     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this
     * store are only updated once at the end of the updates.
     */
    beginBatch(): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-makeChained">makeChained</a>
     */
    chain(chainedFilterFn?: Function, chainedFields?: string[], config?: Partial<StoreConfig>): Store;
    /**
     * Removes all filters from the store.
     */
    clearFilters(): Promise<any|null>;
    /**
     * Removes all groupers, turning store grouping off.
     */
    clearGroupers(): Promise<any|null>;
    /**
     * Removes all sorters, turning store sorting off.
     */
    clearSorters(): Promise<any|null>;
    /**
     * Commits changes, per default only returns changes and resets tracking.
     */
    commit(silent?: boolean): object;
    /**
     * Creates a model instance, used internally when data is set/added. Override this in a subclass to do your own custom
     * conversion from data to record.
     */
    createRecord(data: object, skipExpose?: boolean): void;
    /**
     * Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.
     */
    createSorterFn(sorters: Sorter[]): Function;
    /**
     * Ends event suspension started by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-beginBatch">beginBatch</a>. Multiple calls to <a href="#Core/data/Store#function-beginBatch">beginBatch</a>
     * stack up, and will require an equal number of `endBatch` calls to resume events.
     * Upon call of `endBatch`, a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-refresh">refresh</a> event with `action: batch` is triggered to allow UIs to update
     * themselves based upon the new state of the store.
     * This is extremely useful when making a large number of changes to a store. It is important not to trigger
     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this
     * store are only updated once at the end of the updates.
     */
    endBatch(): void;
    /**
     * Equivalent to Array.every(). Returns `true` if every call of the provided function
     * on each record yields a truthy value.
     */
    every(fn: Function, thisObj?: object, ignoreFilters?: boolean): any[];
    /**
     * Updates records available in a chained store by filtering the master store records using
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#config-chainedFilterFn">chainedFilterFn</a>
     */
    fillFromMaster(): void;
    /**
     * Filters the store by <strong>adding</strong> the specified filter(s) to the existing filters collection applied to this Store.
     * If a filter has an <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-id">id</a> specified,
     * or a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> specified,
     * it will search for corresponding filter(s) in the existing filters first and replace it with a new filter.
     * <strong>It will not remove other filters applied to the store!</strong>
     * To <strong>add</strong> a new filter:
     * ```javascript
     * // Filter using simple object
     * store.filter({
     *     property : 'age',
     *     operator : '>',
     *     value    : 90
     * });
     * 
     * // Filter using function
     * store.filter(r => r.age &lt; 90);
     * 
     * // Filter using a named filter as a function
     * store.filter({
     *     id : 'my-filter',
     *     filterBy : record => record.score > 10
     * });
     * ```
     * To <strong>remove</strong> a specific filter, but keep other filters applied
     * ```javascript
     * // Remove by filter `id` or `property`. Filter `id` defaults to the `property` name.
     * store.removeFilter('age');
     * store.removeFilter('my-filter');
     * ```
     * To <strong>replace</strong> all existing filters with a new filter
     * ```javascript
     * // Remove all filters and filter using simple object
     * store.filter({
     *     filters : {
     *         property : 'age',
     *         operator : '&lt;',
     *         value    : 90
     *     },
     *     replace : true
     * });
     * 
     * // Remove all filters and filter using function
     * store.filter({
     *     filters : r => r.age > 90,
     *     replace : true
     * });
     * 
     * // Remove all filters and filter using a named filter as a function
     * store.filter({
     *     filters : {
     *         id : 'my-filter',
     *         filterBy : record => record.score > 10
     *     },
     *     replace : true
     * });
     * ```
     * Basically filters replacing is an equivalent of having two sequenced calls:
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-clearFilters">clearFilters</a> and <a href="#Core/data/mixin/StoreFilter#function-filter">filter</a>.
     * Call without arguments to reapply filters.
     * ```javascript
     * // Re-filter the store
     * store.filter();
     * ```
     */
    filter(newFilters: { replace?: boolean, silent?: boolean, filters?: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]|Function }|Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]|Function): Promise<any|null>;
    /**
     * <em>Adds</em> a function used to filter the store. Alias for calling `filter(fn)`. Return `true` from the function to
     * include record in filtered set
     * ```javascript
     * store.filterBy(record => record.age > 25 && record.name.startsWith('A'));
     * ```
     */
    filterBy(fn: Function): Promise<any|null>;
    /**
     * Finds the first record for which the specified function returns true
     */
    find(fn: Function, searchAllRecords?: boolean): Model;
    /**
     * Find occurrences of the specified `value` in the specified `field` on all records in the store
     */
    findByField(field: string, value: any, distinct?: boolean, searchAllRecords?: boolean): StoreSearchResult[];
    /**
     * Finds the first record for which the specified field has the specified value
     */
    findRecord(fieldName: string, value: any, searchAllRecords?: boolean): Model;
    /**
     * Equivalent to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">Array.flatMap()</a>.
     * Creates a new array by spreading the results of calling a provided function on every record
     */
    flatMap(fn: Function, thisObj?: object): any[];
    /**
     * Iterates over all normal records in store. Omits group header and footer records if this store is grouped.
     */
    forEach(fn: Function, thisObj?: object, options?: { includeFilteredOutRecords?: boolean, includeCollapsedGroupRecords?: boolean }|boolean): void;
    /**
     * Get the record at the specified index
     */
    getAt(index: number): Model;
    /**
     * Get a record by id. Find the record even if filtered out, part of collapsed group or collapsed node
     */
    getById(id: Model|string|number): Model;
    /**
     * Get a record by internalId.
     */
    getByInternalId(internalId: number): Model;
    /**
     * Returns the children of the passed branch node which this store owns. By default, this
     * is the entire `children` array.
     * <strong>If this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#property-isChained">isChained</a></strong>, then
     * this returns only the subset of children which are filtered into this store by the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#config-chainedFilterFn">chainedFilterFn</a>.
     */
    getChildren(parent: Model): Model[];
    /**
     * Number of records in the store
     */
    getCount(countProcessed?: boolean): number;
    /**
     * Returns an array of distinct values for the specified field.
     * ```javascript
     * store.getDistinctValues('age'); // Returns an array of the unique age values
     * ```
     */
    getDistinctValues(field: string, searchAllRecords?: boolean): any[];
    /**
     * Returns all records in the group with specified groupValue.
     */
    getGroupRecords(groupValue: any): Model[];
    /**
     * Get all group titles.
     */
    getGroupTitles(): string[];
    /**
     * Finds the next record.
     */
    getNext(recordOrId: Model|string|number, wrap?: boolean, skipSpecialRows?: boolean): Model;
    /**
     * Finds the previous record.
     */
    getPrev(recordOrId: Model|string|number, wrap?: boolean, skipSpecialRows?: boolean): Model;
    /**
     * Creates an array of records from this store from the `start` to the `end' - 1
     */
    getRange(start?: number, end?: number): Model[];
    /**
     * Counts how many times the specified value appears in the store
     */
    getValueCount(field: string, value: any): number;
    /**
     * Group records, either by replacing current sorters or by adding to them.
     * A grouper can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).
     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores
     * normal sorting routine. Grouped store <strong>must</strong> always be sorted by the same field.
     * ```javascript
     * // simple grouper
     * store.group('city');
     * 
     * // grouper as object, descending order
     * store.group({ field : 'city', ascending : false });
     * 
     * // using custom sorting function
     * store.group({
     *     field : 'city',
     *     fn : (recordA, recordB) => {
     *         // apply custom logic, for example:
     *         return recordA.city.length &lt; recordB.city.length ? -1 : 1;
     *     }
     * });
     * ```
     */
    group(field: string|object, ascending?: boolean, add?: boolean, performSort?: boolean, silent?: boolean): Promise<any|null>;
    /**
     * Returns sum by adding value of specified field for records in the group with the specified groupValue.
     */
    groupSum(groupValue: any, field: string): number;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Checks if the specified record is contained in the store
     */
    includes(recordOrId: Model|string|number): boolean;
    /**
     * Increase the indentation level of one or more nodes in the tree
     */
    indent(nodes: Model|Model[]): Promise<void>;
    /**
     * Returns the index of the specified record/id, or `-1` if not found.
     */
    indexOf(recordOrId: Model|string|number, visibleRecords?: boolean, allExceptFilteredOutRecords?: boolean): number;
    /**
     * Insert records into the store.
     */
    insert(index: number, records: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model[];
    /**
     * Checks if a record is available, in the sense that it is not filtered out,
     * hidden in a collapsed group or in a collapsed node.
     */
    isAvailable(recordOrId: Model|string|number): boolean;
    /**
     * Check if a record belongs to a certain group (only for the first grouping level)
     */
    isRecordInGroup(record: Model, groupValue: any): boolean;
    /**
     * Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,
     * either use AjaxStore which implements it, create your own subclass with an implementation or listen for
     * `toggleNode` and insert records when you have them available.
     */
    loadChildren(parentRecord: Model): Promise<any>;
    /**
     * Creates a chained store, a new Store instance that contains a subset of the records from current store.
     * Which records is determined by a filtering function, which is reapplied when data in the base store changes.
     * ```javascript
     * const oldies = store.makeChained(record => record.age > 50);
     * // or use a simple query
     * const ages = store.makeChained(() => store.allRecords.distinct('age')));
     * ```
     * If this store is a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreTree#property-isTree">tree</a> store, then the resulting chained store
     * will be a tree store sharing the same root node, but only child nodes which pass the `chainedFilterFn` will be
     * considered when iterating the tree through the methods such as
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-traverse">traverse</a> or <a href="#Core/data/Store#function-forEach">forEach</a>.
     */
    makeChained(chainedFilterFn?: Function, chainedFields?: string[], config?: Partial<StoreConfig>): Store;
    /**
     * Equivalent to Array.map(). Creates a new array with the results of calling a provided function on every record
     */
    map(fn: Function, thisObj?: object): any[];
    /**
     * Returns max value for the specified field, can be used with Date or Number values. Defaults to look through all records in store
     */
    max(field: string, records: Model[]): number|Date;
    /**
     * Returns min value for the specified field, can be used with Date or Number values. Defaults to look through all records in store
     */
    min(field: string, records: Model[]): number|Date;
    /**
     * Moves a record, or block of records to another location.
     */
    move(records: Model|Model[], beforeRecord: Model): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Responds to mutations of the underlying storage Collection
     */
    onDataChange(event: object): void;
    /**
     * Decrease the indentation level of one or more nodes in the tree
     */
    outdent(nodes: Model|Model[]): Promise<void>;
    /**
     * Searches the Store records using the passed function.
     */
    query(fn: Function, searchAllRecords?: boolean): Model[];
    /**
     * Equivalent to Array.reduce(). Applies a function against an accumulator and each record (from left to right) to
     * reduce it to a single value.
     */
    reduce(fn: Function, initialValue: any, thisObj?: object): any;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes a record from this store. Fires a single <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a> event passing the removed records.
     */
    remove(records: string|string[]|number|number[]|Model|Model[], silent?: boolean): Model[];
    /**
     * Removes all records from the store.
     */
    removeAll(silent?: boolean): boolean;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes the passed filter, or the filter by the passed ID from the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#config-filters">filters</a> collection.
     * By default, filters are reevaluated and a Store change event fired.
     * If the `silent` parameter is passed as `true`, multiple filters can be removed without causing data changes.
     * When the filters are as required, call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-filter">filter</a> with no parameters
     * to apply the filters to the store.
     * ```javascript
     * // Only view top priority events
     * myEventStore.filter({
     *     id       : 'priorityFilter',
     *     property : 'priority',
     *     value    : 1,
     *     operator : '='
     * });
     * 
     * // That individual filter can be removed like this
     * myEventStore.removeFilter('priorityFilter');
     * 
     * // Add named filter as a function
     * store.filter({
     *     id : 'my filter',
     *     filterBy : record => record.score > 10
     * });
     * 
     * // Remove named filter function
     * store.removeFilter('my filter');
     * ```
     */
    removeFilter(idOrInstance: string|CollectionFilter, silent?: boolean): Promise<any|CollectionFilter>;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Remove a sorting level (a sorter)
     */
    removeSorter(field: string|Function): Promise<any|null>;
    /**
     * Resumes automatic commits upon store changes. Will trigger commit if the internal counter is 0.
     */
    resumeAutoCommit(): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in the store (adds removed records back, and removes newly added records).
     */
    revertChanges(): void;
    /**
     * Find all hits matching the specified input
     */
    search(text: string, fields: string[], formatters?: Function[], searchAllRecords?: boolean): StoreSearchResult[];
    /**
     * Set groupers.
     */
    setGroupers(groupers: Grouper[]): Promise<any|null>;
    /**
     * Returns true if the supplied function returns true for any record in the store
     */
    some(fn: Function, searchAllRecords?: boolean): boolean;
    /**
     * Sort records, either by replacing current sorters or by adding to them.
     * A sorter can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).
     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores
     * normal sorting routine.
     * ```javascript
     * // single sorter
     * store.sort('age');
     * 
     * // single sorter as object, descending order
     * store.sort({ field : 'age', ascending : false });
     * 
     * // multiple sorters
     * store.sort(['age', 'name']);
     * 
     * // using custom sorting function
     * store.sort((recordA, recordB) => {
     *     // apply custom logic, for example:
     *     return recordA.name.length &lt; recordB.name.length ? -1 : 1;
     * });
     * 
     * // using locale specific sort (slow)
     * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    sort(field: string|Sorter[]|Sorter|Function, ascending?: boolean, add?: boolean, silent?: boolean): Promise<any|null>;
    /**
     * Returns sum calculated by adding value of specified field for specified records. Defaults to using all records
     * in store
     */
    sum(field: string, records: Model[]): number;
    /**
     * Suspends automatic commits upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoCommit(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Retrieve the data of all (unfiltered) records as an array of JSON objects.
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Superman' },
     *         { id : 2, name : 'Batman' }
     *     ]
     * });
     * 
     * const jsonArray = store.toJSON();
     * 
     * //jsonArray:
     * [{id:1,name:&quot;Superman&quot;},{id:2,name:&quot;Batman&quot;}]
     * ```
     */
    toJSON(): object[];
    /**
     * Collapse an expanded record or expand a collapsed. Optionally forcing a certain state.
     */
    toggleCollapse(idOrRecord: string|number|Model, collapse?: boolean): Promise<void>;
    /**
     * Traverse all tree nodes (only applicable for Tree Store)
     */
    traverse(fn: Function, topNode?: Model, skipTopNode?: boolean, options?: { includeFilteredOutRecords?: boolean, includeCollapsedGroupRecords?: boolean, useOrderedTree?: boolean }|boolean): void;
    /**
     * Traverse all tree nodes while the passed `fn` returns true
     */
    traverseWhile(fn: Function, topNode?: Model, skipTopNode?: boolean, options?: { includeFilteredOutRecords?: boolean, includeCollapsedGroupRecords?: boolean }): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

/**
 * This class holds a WBS (Work Breakdown Structure) value (e.g., '1.2.1'). This class ensures that such values compare
 * correctly, for example, that '1.2' is less than '1.10' (which do not compare that way as simple text).
 */
export class Wbs {
    /**
     * The WBS value
     */
    readonly value: string
    /**
     * Compares two WBS values, returning 0 if equal, -1 if `lhs` is less than `rhs, or 1 if `lhs`is greater than`rhs`.
     */
    static compare(lhs: string|Wbs, rhs: string|Wbs): number;
    /**
     * Returns a `Wbs` instance given a `value`. If the `value` is already a `Wbs` object, it is returned. Otherwise,
     * a new `Wbs` is created. If `value` is `null` or `undefined`, that value is returned.
     */
    static from(value: string|number|Wbs): Wbs;
    /**
     * Appends a sub-level WBS value to this WBS code and returns a `Wbs` instance for it.
     */
    append(value: string|number): Wbs;
    /**
     * Returns truthy value if this Wbs equals the passed value.
     */
    isEqual(value: string|Wbs): boolean;
    /**
     * Compares this WBS value with a specified pattern, returning `true` if they match. If the `pattern` is simply a
     * sequence of digits and decimal points (e.g., &quot;1.2&quot;), it is a match if it is a substring of this WBS code (e.g.,
     * &quot;3.1.2.4&quot;). If the `pattern` starts with `*` (e.g., &quot;*.1.2&quot;), it is a match if this WBS code ends with the text
     * following the `*` (e.g., &quot;4.3.1.2&quot;). If the `pattern` ends with `*`, it is a match if this WBS code starts with
     * the text up to the `*`.
     * Some examples:
     * ```javascript
     *  console.log(Wbs.from('1.2.3.4').match('2.3'));
     *  > true
     *  console.log(Wbs.from('1.2.3.4').match('*.4'));
     *  > true
     *  console.log(Wbs.from('1.2.3.4').match('1.2.*'));
     *  > true
     * 
     *  console.log(Wbs.from('1.2.3.4').match('2.4'));
     *  > false
     *  console.log(Wbs.from('1.2.3.4').match('*.3'));
     *  > false
     *  console.log(Wbs.from('1.2.3.4').match('2.*'));
     *  > false
     * ```
     */
    match(pattern: string): boolean;
}

type DataFieldConfig = {
    /**
     * Setting to `true` will ensure this field is included in any update/insert request payload
     * when a Store / Project / CrudManager performs a request.
     */
    alwaysWrite: boolean
    /**
     * A column config object for a column to display this field in a grid. For simple, atomic
     * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional
     * and the appropriate column type can be inferred.
     * This also provides default values for column configuration if a configured column definition
     * for a grid lacks a property.
     * For complex fields, such as identifiers which link to other records, a more capable
     * column type may be specified, for example a `type : `number'` field may be configured
     * with
     * ```javascript
     * column : 'percent'
     * ```
     * or
     * ```javascript
     * column : {
     *     type : 'percent',
     *     width : 100
     * }
     * ```
     * if it represents a percentage vaue and needs appropriate rendering and editing.
     */
    column: string|object
    /**
     * A function that compares two values and returns a value &lt; 0 if the first is less than the second, or 0
     * if the values are equal, or a value &gt; 0 if the first is greater than the second.
     */
    compare: Function
    /**
     * The property in a record's data object that contains the field's value.
     * Defaults to the field's `name`.
     */
    dataSource: string
    /**
     * The default value to assign to this field in a record if no value is provided.
     */
    defaultValue: any
    /**
     * By default, defined <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> fields may be used to create a grid column
     * suitable for diplaying that field in a grid cell. Some fields may not be suitable for
     * features which automatically generate columns for view. These fields are created using
     * `internal : true`. Some examples are the `expanded` and `rowHeight` fields which are used
     * internally.
     */
    internal: boolean
    /**
     * The label text for a form item generated for this field. This is also used to create
     * a column header for a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-column">column</a> for this field.
     */
    label: string
    /**
     * The name of the field.
     */
    name: string
    /**
     * The value to return from <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#function-print">print</a> for a `null` or `undefined` value.
     */
    nullText: string
    /**
     * The value to replace `null` when the field is not `nullable`.
     */
    nullValue: any
    /**
     * Setting to `false` indicates that `null` is not a valid value.
     */
    nullable: boolean
    /**
     * Set to `false` to exclude this field when saving records to a server.
     */
    persist: boolean
    /**
     * Set to `true` for the field's set accessor to ignore attempts to set this field.
     */
    readOnly: boolean
}

/**
 * This is the base class for Model field classes. A field class defines how to handle the data for a particular type
 * of field. Many of these behaviors can be configured on individual field instances.
 */
export class DataField extends Base {
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
    /**
     * This method transforms a data value into the desired form for storage in the record's data object.
     * ```javascript
     * export default class Task extends TaskModel {
     *    static get fields() {
     *        return [
     *            {
     *                name    : 'status',
     *                convert : (value, data) => {
     *                    if (value >= 100) {
     *                        return 'done';
     *                    }
     *                    else if (value > 0) {
     *                        return 'started';
     *                    }
     *                }
     *            }
     *        ];
     *    }
     * }
     * ```
     */
    convert(value: any, data: object): any;
    /**
     * Compares two values for this field and returns `true` if they are equal, and `false` if not.
     */
    isEqual(first: any, second: any): boolean;
    /**
     * Returns the given field value as a `String`. If `value` is `null` or `undefined`, the value specified by
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-nullText">nullText</a> is returned.
     */
    print(value: any): string;
    /**
     * Returns the given, non-null field value as a `String`.
     */
    printValue(value: any): string;
    /**
     * This method transforms a data value into the desired form for transmitting to a server.
     */
    serialize(value: any, record: Model): any;
}

export class ModelLinkClass {
    /**
     * Are other records linked to this record?
     */
    readonly hasLinks: boolean
    /**
     * Is this record linked to another record?
     */
    readonly isLinked: boolean
    /**
     * Creates a proxy record (using native Proxy) linked to this record (the original). The proxy records shares most
     * data with the original, except for its `id` (which is always generated), and ordering fields such as
     * `parentIndex` and `parentId` etc.
     * Any change to the proxy record will be reflected on the original, and vice versa. A proxy record is not meant to
     * be persisted, only the original record should be persisted. Thus, proxy records are not added to stores change
     * tracking (added, modified and removed records).
     * Removing the original record removes all proxies.
     * Creating a proxy record allows a Store to seemingly contain the record multiple times, something that is
     * otherwise not possible. It also allows a record to be used in both a tree store and in a flat store.
     * *Note that not all UI features support linked records*
     */
    link(): typeof Proxy;
}

export const ModelLink : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ModelLinkClass>

type StoreCRUDClassConfig = {
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
}

export class StoreCRUDClass {
    /**
     * Setting autoCommit to true automatically commits changes to records.
     */
    autoCommit: boolean
    /**
     * Get uncommitted changes as an object of added/modified/removed arrays of records.
     * ```javascript
     * // Format:
     * {
     *      added: [], // array of Core.data.Model
     *      modified: [], // array of Core.data.Model
     *      removed: [] // array of Core.data.Model
     * }
     * ```
     */
    readonly changes: { added: Model[], modified: Model[], removed: Model[] }
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreCRUDClassConfig>);
    /**
     * Add records to store.
     */
    add(records: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model[];
    /**
     * Commits changes, per default only returns changes and resets tracking.
     */
    commit(silent?: boolean): object;
    /**
     * Insert records into the store.
     */
    insert(index: number, records: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model[];
    /**
     * Moves a record, or block of records to another location.
     */
    move(records: Model|Model[], beforeRecord: Model): void;
    /**
     * Removes a record from this store. Fires a single <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a> event passing the removed records.
     */
    remove(records: string|string[]|number|number[]|Model|Model[], silent?: boolean): Model[];
    /**
     * Removes all records from the store.
     */
    removeAll(silent?: boolean): boolean;
    /**
     * Resumes automatic commits upon store changes. Will trigger commit if the internal counter is 0.
     */
    resumeAutoCommit(): void;
    /**
     * Reverts all changes in the store (adds removed records back, and removes newly added records).
     */
    revertChanges(): void;
    /**
     * Suspends automatic commits upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoCommit(): void;
}

export const StoreCRUD : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreCRUDClass>

type StoreChainedClassConfig = {
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
}

export class StoreChainedClass {
    /**
     * Is this a chained store?
     */
    readonly isChained: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreChainedClassConfig>);
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-makeChained">makeChained</a>
     */
    chain(chainedFilterFn?: Function, chainedFields?: string[], config?: Partial<StoreConfig>): Store;
    /**
     * Updates records available in a chained store by filtering the master store records using
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#config-chainedFilterFn">chainedFilterFn</a>
     */
    fillFromMaster(): void;
    /**
     * Creates a chained store, a new Store instance that contains a subset of the records from current store.
     * Which records is determined by a filtering function, which is reapplied when data in the base store changes.
     * ```javascript
     * const oldies = store.makeChained(record => record.age > 50);
     * // or use a simple query
     * const ages = store.makeChained(() => store.allRecords.distinct('age')));
     * ```
     * If this store is a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreTree#property-isTree">tree</a> store, then the resulting chained store
     * will be a tree store sharing the same root node, but only child nodes which pass the `chainedFilterFn` will be
     * considered when iterating the tree through the methods such as
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-traverse">traverse</a> or <a href="#Core/data/Store#function-forEach">forEach</a>.
     */
    makeChained(chainedFilterFn?: Function, chainedFields?: string[], config?: Partial<StoreConfig>): Store;
}

export const StoreChained : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreChainedClass>

type StoreChangesClassConfig = {
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
}

export class StoreChangesClass {
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreChangesClassConfig>);
    /**
     * Applies changes from another store to this store. Useful if cloning records in one store to display in a
     * grid in a popup etc. to reflect back changes.
     */
    applyChangesFromStore(otherStore: Store): void;
    /**
     * Applies a set of changes (presumable from a backend) expressed as an object matching the format outputted by the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-changes">changes</a> property: `{ added : [], modified/updated : [], removed : [] }`
     * `added` is expected to be an array of raw data objects consumable by the stores model class for records to add to
     * the store (see example snippet below).
     * `modified` (or `updated` for compatibility with Schedulers CrudManager) is expected to have the same format as
     * `added`, but should always include the `id` of the record to update.
     * Records that have been created locally and gets assigned a proper id by the backend are expected to also pass a
     * `phantomId` field (name of the field is configurable using the `phantomIdField` arg, more info on phantom ids
     * below), to match it with the current id of a local record (`id` will contain the new id).
     * Note that it is also possible to pass this `phantomId` -&gt; `id` mapping in the `added` array. When encountering a
     * record in that array that already exists in the local store, it will be treated the same was as a record in the
     * `modified` array.
     * `removed` is expected to be an array of objects with the `{ id : xx }` shape. Any matches on an id in the store
     * will be removed, those and any non matches will also be cleared from the change tracking of the store.
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     * As an example, consider a store with the following initial state and some operations performed on it:
     * ```javascript
     * // Load some data into the store
     * store.data = [
     *     { id : 1, name : 'Minerva' },
     *     { id : 2, name : 'Mars' },
     *     { id : 3, name : 'Jupiter' }
     * ];
     * // Add a new record. It gets assigned a generated id,
     * // for example 'generated56'
     * store.add({ name : 'Artemis' });
     * // Remove Jupiter
     * store.remove(3);
     * ```
     * After syncing those operations to a custom backend (however you chose to solve it in your application) we might
     * get the following response (see &quot;Transforming a response to the correct format&quot; below if your backend responds
     * in another format):
     * ```javascript
     * const serverResponse = {
     *     added : [
     *         // Added by the backend, will be added locally
     *         { id : 5, name : 'Demeter' }
     *     ],
     * 
     *     updated : [
     *         // Will change the name of Minerva -> Athena
     *         { id : 1, name : 'Athena' },
     *         // Will set proper id 4 for Artemis
     *         { $PhantomId : 'generated56', id : 4 }
     *     ],
     * 
     *     removed : [
     *         // Confirmed remove of Jupiter
     *         { id : 3 },
     *         // Removed by the backend, Mars will be removed locally
     *         { id : 2 }
     *     ]
     * };
     * ```
     * If that response is then passed to this function:
     * ```javascript
     * store.applyChangeSet(serverResponse);
     * ```
     * The end result will be the following data in the store:
     * ```javascript
     * [
     *     { id : 1, name : 'Athena' }, // Changed name
     *     { id : 4, name : 'Artemis' }, // Got a proper id
     *     { id : 5, name : 'Demeter' } // Added by the backend
     * ]
     * ```
     * <h3>Phantom ids</h3>
     * When a record is created locally, it is always assigned a generated id. That id is called a phantom id (note that
     * it is assigned to the normal id field). When passing the new record to the backend, the id is sent with it. When
     * the backend inserts the record into the database, it (normally) gets a proper id assigned. That id then needs to
     * be passed back in the response, to update the local record with the correct id. Making sure that future updates
     * match the correct row in the database.
     * For example a newly created record should be passed similar to this to the backend (pseudo format, up to the
     * application/backend to decide):
     * ```json
     * {
     *     &quot;added&quot; : {
     *         &quot;id&quot; : &quot;generated79&quot;,
     *         &quot;name&quot; : &quot;Hercules&quot;,
     *         ...
     *     }
     * }
     * ```
     * For the backend response to be applicable for this function, it should then respond with:
     * ```json
     * {
     *     &quot;updated&quot; : {
     *         {
     *             &quot;$PhantomId&quot; : &quot;generated79&quot;,
     *             &quot;id&quot; : 465
     *         }
     *     }
     * }
     * ```
     * (Or, as stated above, it can also be passed in the &quot;added&quot; array. Which ever suits your backend best).
     * This function will then change the id of the local record using the phantom id `generated79` to `465`.
     * <h3>Transforming a response to the correct format</h3>
     * This function optionally accepts a `transformFn`, a function that will be called with the `changes`. It is
     * expected to return a changeset in the format described above (`{ added : [], updated : [], removed : [] }`),
     * which then will be used to apply the changes.
     * Consider the following &quot;non standard&quot; (made up) changeset:
     * ```javascript
     * const changes = {
     *     // Database ids for records previously added locally
     *     assignedIds : {
     *         'phantom1' : 10,
     *         'phantom2' : 15
     *     },
     *     // Ids records removed by the backend
     *     removed : [11, 27],
     *     // Modified records, keyed by id
     *     altered : {
     *         12 : { name : 'Changed' }
     *     },
     *     // New records, keyed by id
     *     inserted : {
     *         20  : { name : 'New' }
     *     }
     * }
     * ```
     * Since it does not match the expected format it has to be transformed:
     * ```javascript
     * store.applyChangeset(changes, ({ assignedIds, inserted, altered, removed }) => ({
     *    // Convert inserted to [{ id : 20, name : 'New' }]
     *    added : Object.entries(inserted).map(([id, data] => ({ id, ...data }),
     *    updated : [
     *        // Convert assignedIds to [{ $PhantomId : 'phantom1', id : 10 }, ...]
     *       ...Object.entries(assignedIds).map(([phantomId, id])) => ({ $PhantomId : phantomId, id }),
     *       // Convert altered to [{ id : 12, name : 'Changed' }]
     *       ...Object.entries(modified).map(([id, data] => ({ id, ...data })
     *    ],
     *    // Convert removed to [{ id : 11 }, ...]
     *    removed : removed.map(id => ({ id }))
     * }));
     * ```
     * The transform function above would output:
     * ```javascript
     * {
     *     added : [
     *         {  id : 20, name : 'New' }
     *     ],
     *     updated : [
     *         { $PhantomId : 'phantom1', id : 10 },
     *         { $PhantomId : 'phantom2', id : 15 },
     *         {  id : 12, name : 'Changed' }
     *     ],
     *     removed : [
     *        { id : 11 },
     *        { id : 12 }
     *     ]
     * }
     * ```
     * And that format can then be applied.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
}

export const StoreChanges : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreChangesClass>

type StoreFilterClassConfig = {
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
}

export class StoreFilterClass {
    /**
     * Currently applied filters. A collection of <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> instances.
     */
    readonly filters: Collection
    /**
     * Check if store is filtered
     */
    readonly isFiltered: boolean
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreFilterClassConfig>);
    /**
     * Adds a single filter to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#config-filters">filters</a> collection. By default, filters are reevaluated
     * and a Store change event fired.
     * If the `silent` parameter is passed as `true`, multiple filters can be added without causing data changes.
     * When the filters are as required, call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-filter">filter</a> with no parameters
     * to apply the filters to the store.
     */
    addFilter(newFilter: Partial<CollectionFilterConfig>|Function, silent?: boolean): Promise<CollectionFilter>;
    /**
     * Removes all filters from the store.
     */
    clearFilters(): Promise<any|null>;
    /**
     * Filters the store by <strong>adding</strong> the specified filter(s) to the existing filters collection applied to this Store.
     * If a filter has an <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-id">id</a> specified,
     * or a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> specified,
     * it will search for corresponding filter(s) in the existing filters first and replace it with a new filter.
     * <strong>It will not remove other filters applied to the store!</strong>
     * To <strong>add</strong> a new filter:
     * ```javascript
     * // Filter using simple object
     * store.filter({
     *     property : 'age',
     *     operator : '>',
     *     value    : 90
     * });
     * 
     * // Filter using function
     * store.filter(r => r.age &lt; 90);
     * 
     * // Filter using a named filter as a function
     * store.filter({
     *     id : 'my-filter',
     *     filterBy : record => record.score > 10
     * });
     * ```
     * To <strong>remove</strong> a specific filter, but keep other filters applied
     * ```javascript
     * // Remove by filter `id` or `property`. Filter `id` defaults to the `property` name.
     * store.removeFilter('age');
     * store.removeFilter('my-filter');
     * ```
     * To <strong>replace</strong> all existing filters with a new filter
     * ```javascript
     * // Remove all filters and filter using simple object
     * store.filter({
     *     filters : {
     *         property : 'age',
     *         operator : '&lt;',
     *         value    : 90
     *     },
     *     replace : true
     * });
     * 
     * // Remove all filters and filter using function
     * store.filter({
     *     filters : r => r.age > 90,
     *     replace : true
     * });
     * 
     * // Remove all filters and filter using a named filter as a function
     * store.filter({
     *     filters : {
     *         id : 'my-filter',
     *         filterBy : record => record.score > 10
     *     },
     *     replace : true
     * });
     * ```
     * Basically filters replacing is an equivalent of having two sequenced calls:
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-clearFilters">clearFilters</a> and <a href="#Core/data/mixin/StoreFilter#function-filter">filter</a>.
     * Call without arguments to reapply filters.
     * ```javascript
     * // Re-filter the store
     * store.filter();
     * ```
     */
    filter(newFilters: { replace?: boolean, silent?: boolean, filters?: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]|Function }|Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]|Function): Promise<any|null>;
    /**
     * <em>Adds</em> a function used to filter the store. Alias for calling `filter(fn)`. Return `true` from the function to
     * include record in filtered set
     * ```javascript
     * store.filterBy(record => record.age > 25 && record.name.startsWith('A'));
     * ```
     */
    filterBy(fn: Function): Promise<any|null>;
    /**
     * Removes the passed filter, or the filter by the passed ID from the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#config-filters">filters</a> collection.
     * By default, filters are reevaluated and a Store change event fired.
     * If the `silent` parameter is passed as `true`, multiple filters can be removed without causing data changes.
     * When the filters are as required, call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreFilter#function-filter">filter</a> with no parameters
     * to apply the filters to the store.
     * ```javascript
     * // Only view top priority events
     * myEventStore.filter({
     *     id       : 'priorityFilter',
     *     property : 'priority',
     *     value    : 1,
     *     operator : '='
     * });
     * 
     * // That individual filter can be removed like this
     * myEventStore.removeFilter('priorityFilter');
     * 
     * // Add named filter as a function
     * store.filter({
     *     id : 'my filter',
     *     filterBy : record => record.score > 10
     * });
     * 
     * // Remove named filter function
     * store.removeFilter('my filter');
     * ```
     */
    removeFilter(idOrInstance: string|CollectionFilter, silent?: boolean): Promise<any|CollectionFilter>;
}

export const StoreFilter : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreFilterClass>

type StoreGroupClassConfig = {
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
}

export class StoreGroupClass {
    /**
     * Currently used groupers.
     * To set groupers when remote sorting is enabled by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-sortParamName">sortParamName</a> you should
     * use <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreGroup#function-setGroupers">setGroupers</a> instead to be able to wait for the operation to finish.
     */
    groupers: Grouper[]
    /**
     * Is store currently grouped?
     */
    readonly isGrouped: boolean
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreGroupClassConfig>);
    /**
     * Removes all groupers, turning store grouping off.
     */
    clearGroupers(): Promise<any|null>;
    /**
     * Returns all records in the group with specified groupValue.
     */
    getGroupRecords(groupValue: any): Model[];
    /**
     * Get all group titles.
     */
    getGroupTitles(): string[];
    /**
     * Group records, either by replacing current sorters or by adding to them.
     * A grouper can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).
     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores
     * normal sorting routine. Grouped store <strong>must</strong> always be sorted by the same field.
     * ```javascript
     * // simple grouper
     * store.group('city');
     * 
     * // grouper as object, descending order
     * store.group({ field : 'city', ascending : false });
     * 
     * // using custom sorting function
     * store.group({
     *     field : 'city',
     *     fn : (recordA, recordB) => {
     *         // apply custom logic, for example:
     *         return recordA.city.length &lt; recordB.city.length ? -1 : 1;
     *     }
     * });
     * ```
     */
    group(field: string|object, ascending?: boolean, add?: boolean, performSort?: boolean, silent?: boolean): Promise<any|null>;
    /**
     * Check if a record belongs to a certain group (only for the first grouping level)
     */
    isRecordInGroup(record: Model, groupValue: any): boolean;
    /**
     * Set groupers.
     */
    setGroupers(groupers: Grouper[]): Promise<any|null>;
}

export const StoreGroup : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreGroupClass>

export class StoreRelationClass {
}

export const StoreRelation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreRelationClass>

export class StoreSearchClass {
    /**
     * Finds the first record for which the specified function returns true
     */
    find(fn: Function, searchAllRecords?: boolean): Model;
    /**
     * Find occurrences of the specified `value` in the specified `field` on all records in the store
     */
    findByField(field: string, value: any, distinct?: boolean, searchAllRecords?: boolean): StoreSearchResult[];
    /**
     * Finds the first record for which the specified field has the specified value
     */
    findRecord(fieldName: string, value: any, searchAllRecords?: boolean): Model;
    /**
     * Searches the Store records using the passed function.
     */
    query(fn: Function, searchAllRecords?: boolean): Model[];
    /**
     * Find all hits matching the specified input
     */
    search(text: string, fields: string[], formatters?: Function[], searchAllRecords?: boolean): StoreSearchResult[];
    /**
     * Returns true if the supplied function returns true for any record in the store
     */
    some(fn: Function, searchAllRecords?: boolean): boolean;
}

export const StoreSearch : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreSearchClass>

type StoreSortClassConfig = {
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
}

export class StoreSortClass {
    /**
     * Is store sorted?
     */
    readonly isSorted: boolean
    /**
     * Currently applied sorters
     */
    readonly sorters: Sorter[]
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreSortClassConfig>);
    /**
     * Add a sorting level (a sorter).
     */
    addSorter(field: string|Sorter[]|Sorter|Function, ascending?: boolean): Promise<any|null>;
    /**
     * Removes all sorters, turning store sorting off.
     */
    clearSorters(): Promise<any|null>;
    /**
     * Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.
     */
    createSorterFn(sorters: Sorter[]): Function;
    /**
     * Remove a sorting level (a sorter)
     */
    removeSorter(field: string|Function): Promise<any|null>;
    /**
     * Sort records, either by replacing current sorters or by adding to them.
     * A sorter can specify a <strong><em>custom sorting function</em></strong> which will be called with arguments (recordA, recordB).
     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores
     * normal sorting routine.
     * ```javascript
     * // single sorter
     * store.sort('age');
     * 
     * // single sorter as object, descending order
     * store.sort({ field : 'age', ascending : false });
     * 
     * // multiple sorters
     * store.sort(['age', 'name']);
     * 
     * // using custom sorting function
     * store.sort((recordA, recordB) => {
     *     // apply custom logic, for example:
     *     return recordA.name.length &lt; recordB.name.length ? -1 : 1;
     * });
     * 
     * // using locale specific sort (slow)
     * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    sort(field: string|Sorter[]|Sorter|Function, ascending?: boolean, add?: boolean, silent?: boolean): Promise<any|null>;
}

export const StoreSort : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreSortClass>

export class StoreStateClass {
}

export const StoreState : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreStateClass>

export class StoreSumClass {
    /**
     * Returns the average value for the specified field. Defaults to look through all records in store
     */
    average(field: string, records: Model[]): number;
    /**
     * Returns sum by adding value of specified field for records in the group with the specified groupValue.
     */
    groupSum(groupValue: any, field: string): number;
    /**
     * Returns max value for the specified field, can be used with Date or Number values. Defaults to look through all records in store
     */
    max(field: string, records: Model[]): number|Date;
    /**
     * Returns min value for the specified field, can be used with Date or Number values. Defaults to look through all records in store
     */
    min(field: string, records: Model[]): number|Date;
    /**
     * Returns sum calculated by adding value of specified field for specified records. Defaults to using all records
     * in store
     */
    sum(field: string, records: Model[]): number;
}

export const StoreSum : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreSumClass>

type StoreSyncClassConfig = {
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
}

export class StoreSyncClass {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreSyncClassConfig>);
}

export const StoreSync : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreSyncClass>

type StoreTreeClassConfig = {
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
}

export class StoreTreeClass {
    /**
     * A special `Symbol` signalizing treeify method that the current record grouping should be stopped.
     * ```javascript
     * const newRoot = workerStore.treeify([
     *     // group workers by company
     *     worker => {
     *         // if the worker is unemployed we don't put it in a group
     *         // we just show such record on the root level
     *         if (!worker.company) {
     *             return Store.StopBranch
     *         }
     * 
     *         return worker.company;
     *     ]
     * ]);
     * ```
     */
    static StopBranch: Symbol
    /**
     * True if this Store is configured to handle tree data (with `tree : true`) or if this is a
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-makeChained">chained store</a> and the master store is a tree store.
     */
    readonly isTree: boolean
    /**
     * Returns all leaf records in a tree store
     */
    leaves: Model[]
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreTreeClassConfig>);
    /**
     * Returns the children of the passed branch node which this store owns. By default, this
     * is the entire `children` array.
     * <strong>If this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#property-isChained">isChained</a></strong>, then
     * this returns only the subset of children which are filtered into this store by the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreChained#config-chainedFilterFn">chainedFilterFn</a>.
     */
    getChildren(parent: Model): Model[];
    /**
     * Increase the indentation level of one or more nodes in the tree
     */
    indent(nodes: Model|Model[]): Promise<void>;
    /**
     * Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,
     * either use AjaxStore which implements it, create your own subclass with an implementation or listen for
     * `toggleNode` and insert records when you have them available.
     */
    loadChildren(parentRecord: Model): Promise<any>;
    /**
     * Decrease the indentation level of one or more nodes in the tree
     */
    outdent(nodes: Model|Model[]): Promise<void>;
    /**
     * Collapse an expanded record or expand a collapsed. Optionally forcing a certain state.
     */
    toggleCollapse(idOrRecord: string|number|Model, collapse?: boolean): Promise<void>;
}

export const StoreTree : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreTreeClass>

type TreeNodeClassConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
}

export class TreeNodeClass {
    /**
     * This static configuration option allows you to control whether an empty parent task should be converted into a
     * leaf. Enable/disable it for a whole class:
     * ```javascript
     * Model.convertEmptyParentToLeaf = false;
     * ```
     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object
     * with the following Boolean properties to customize the behaviour:
     * ```javascript
     * Model.convertEmptyParentToLeaf = {
     *     onLoad   : false,
     *     onRemove : true
     * }
     * ```
     */
    static convertEmptyParentToLeaf: boolean|{ onLoad: boolean, onRemove: boolean }
    /**
     * Retrieve all children, not including filtered out nodes (by traversing sub nodes)
     */
    allChildren: Model[]
    /**
     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at
     * level 1 and so on.
     */
    readonly childLevel: number
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Count all children (including sub-children) for a node (in its `firstStore´)
     */
    descendantCount: number
    /**
     * Get the first child of this node
     */
    readonly firstChild: Model
    /**
     * Is a leaf node in a tree structure?
     */
    readonly isLeaf: boolean
    /**
     * Returns true for parent nodes with children loaded (there might still be no children)
     */
    readonly isLoaded: boolean
    /**
     * Is a parent node in a tree structure?
     */
    readonly isParent: boolean
    /**
     * Returns `true` if this node is the root of the tree
     */
    readonly isRoot: boolean
    /**
     * Get the last child of this node
     */
    readonly lastChild: Model
    /**
     * Get the next sibling of this node
     */
    readonly nextSibling: Model
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    readonly orderedParentIndex: number
    /**
     * This is a read-only property providing access to the parent node.
     */
    readonly parent: Model
    /**
     * Reading this property returns the id of the parent node, if this record is a child of a node.
     * Setting this property appends this record to the record with the passed id <strong>in the same store that this record
     * is already in</strong>.
     * Note that setting this property is <strong>only valid if this record is already part of a tree store</strong>.
     * This is not intended for general use. This is for when a server responds to a record mutation and the server
     * decides to move a record to a new parent. If a `parentId` property is passed in the response data for a record,
     * that record will be moved.
     */
    parentId: number|string|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    readonly parentIndex: number
    /**
     * Get the previous sibling of this node
     */
    readonly previousSibling: Model
    /**
     * Returns count of all preceding sibling nodes (including their children).
     */
    previousSiblingsTotalCount: number
    /**
     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)
     */
    visibleDescendantCount: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TreeNodeClassConfig>);
    /**
     * This method returns `true` if this record has all expanded ancestors and is therefore
     * eligible for inclusion in a UI.
     */
    ancestorsExpanded(store?: Store): boolean;
    /**
     * Append a child record(s) to any current children.
     */
    appendChild(childRecord: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], silent?: boolean): Model|Model[]|null;
    /**
     * Bubbles up from this node, calling the specified function with each node.
     */
    bubble(fn: Function, skipSelf?: boolean): void;
    /**
     * Bubbles up from this node, calling the specified function with each node,
     * while the function returns true.
     */
    bubbleWhile(fn: Function, skipSelf?: boolean): boolean;
    /**
     * Removes all child nodes from this node.
     */
    clearChildren(silent?: boolean): Model[];
    /**
     * Checks if this model contains another model as one of it's descendants
     */
    contains(childOrId: Model|string|number, skipSelf?: boolean): boolean;
    /**
     * Converts a leaf node to a parent node, assigning an empty array as its children
     */
    convertToParent(silent?: boolean): void;
    /**
     * Count visible (expanded)/all children for this node, optionally specifying for which store.
     */
    getDescendantCount(onlyVisible?: boolean, store?: Store): number;
    /**
     * Insert a child record(s) before an existing child record.
     */
    insertChild(childRecord: Model|Model[]|object|object[]|Partial<ModelConfig>|Partial<ModelConfig>[], before?: Model, silent?: boolean): Model|Model[]|null;
    /**
     * Used by stores to assess the record's collapsed/expanded state in that store.
     */
    isExpanded(store: Store): boolean;
    /**
     * Remove a child record. Only direct children of this node can be removed, others are ignored.
     */
    removeChild(childRecords: Model|Model[], isMove?: boolean, silent?: boolean): Model[];
    /**
     * Replaces all child nodes with the new node set.
     */
    replaceChildren(childRecords: Model|Model[]): Model[];
    /**
     * Traverses all child nodes recursively calling the passed function
     * on a target node <strong>before</strong> iterating the child nodes.
     */
    traverse(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean, useOrderedTree?: boolean }|boolean): void;
    /**
     * Traverses all child nodes recursively calling the passed function
     * on child nodes of a target <strong>before</strong> calling it on the node.
     */
    traverseBefore(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean }|boolean): void;
    /**
     * Traverses child nodes recursively while fn returns true
     */
    traverseWhile(fn: Function, skipSelf?: boolean, options?: { includeFilteredOutRecords?: boolean }|boolean): boolean;
}

export const TreeNode : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & TreeNodeClass>

type CoreStateTrackingManagerConfig = {
    /**
     * Whether to start transaction recording automatically in case the Manager is enabled.
     * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.
     * records any changes in its monitored stores. The transaction lasts for <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#config-autoRecordTransactionStopTimeout">autoRecordTransactionStopTimeout</a> and
     * afterwards creates one undo/redo step, including all changes in the stores during that period of time.
     * In non auto recording mode you have to call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#function-startTransaction">startTransaction</a> / <a href="#Core/data/stm/StateTrackingManager#function-stopTransaction">stopTransaction</a> to start and end
     * a transaction.
     */
    autoRecord: boolean
    /**
     * The transaction duration (in ms) for the auto recording mode <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#config-autoRecord">autoRecord</a>
     */
    autoRecordTransactionStopTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Default manager disabled state
     */
    disabled: boolean
    /**
     * Function to create a transaction title if none is provided.
     * The function receives a transaction and should return a title.
     */
    getTransactionTitle: Function
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the disabled state of the STM changes
     */
    onDisabled: Function|string
    /**
     * Fired upon state undo/redo queue reset.
     */
    onQueueReset: Function|string
    /**
     * Fired upon state recording operation starts.
     */
    onRecordingStart: Function|string
    /**
     * Fired upon state recording operation stops.
     */
    onRecordingStop: Function|string
    /**
     * Fired upon state restoration operation starts.
     */
    onRestoringStart: Function|string
    /**
     * Fired upon state restoration operation stops.
     */
    onRestoringStop: Function|string
}

/**
 * Tracks the state of every store registered via <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#function-addStore">addStore</a>. It is <a href="#Core/data/stm/StateTrackingManager#config-disabled">disabled</a> by default
 * so remember to call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#function-enable">enable</a> when your stores are registered and initial dataset is loaded.
 * Use <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#function-undo">undo</a> / <a href="#Core/data/stm/StateTrackingManager#func...
 */
export class CoreStateTrackingManager extends Base implements EventsClass {
    /**
     * Gets/sets manager auto record option
     */
    autoRecord: boolean
    /**
     * Checks if the manager can redo.
     */
    canRedo: boolean
    /**
     * Checks if the manager can undo.
     */
    canUndo: boolean
    /**
     * Get/set manager disabled state
     */
    disabled: boolean
    /**
     * Checks manager ready state
     */
    readonly isReady: boolean
    /**
     * Checks manager recording state
     */
    readonly isRecording: boolean
    /**
     * Gets manager restoring state.
     */
    readonly isRestoring: boolean
    /**
     * Gets current undo/redo queue length
     */
    length: number
    /**
     * Gets current undo/redo queue position
     */
    position: number
    /**
     * Gets titles of all recorded undo/redo transactions
     */
    readonly queue: string[]
    /**
     * Gets current state of the manager
     */
    state: StateBase
    /**
     * Gets all the stores registered in STM
     */
    stores: Store[]
    /**
     * Gets currently recording STM transaction.
     */
    readonly transaction: Transaction
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the disabled state of the STM changes
     */
    onDisabled: Function|string
    /**
     * Fired upon state undo/redo queue reset.
     */
    onQueueReset: Function|string
    /**
     * Fired upon state recording operation starts.
     */
    onRecordingStart: Function|string
    /**
     * Fired upon state recording operation stops.
     */
    onRecordingStop: Function|string
    /**
     * Fired upon state restoration operation starts.
     */
    onRestoringStart: Function|string
    /**
     * Fired upon state restoration operation stops.
     */
    onRestoringStop: Function|string
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the manager
     */
    addStore(store: Store): void;
    /**
     * Disables manager
     */
    disable(): void;
    /**
     * Enables manager
     */
    enable(): void;
    /**
     * Calls `fn` for each store registered in STM.
     */
    forEachStore(fn: Function): void;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Checks if a store has been added to the manager
     */
    hasStore(store: Store): boolean;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Redoes current undo/redo transaction.
     */
    redo(steps?: number): Promise<any>;
    /**
     * Redoes all transactions.
     */
    redoAll(): Promise<any>;
    /**
     * Rejects currently recorded transaction.
     */
    rejectTransaction(): void;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the manager
     */
    removeStore(store: Store): void;
    /**
     * Resets undo/redo queue.
     */
    resetQueue(): void;
    /**
     * Resets redo queue.
     */
    resetRedoQueue(): void;
    /**
     * Resets undo queue.
     */
    resetUndoQueue(): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Starts undo/redo recording transaction.
     */
    startTransaction(title?: string): void;
    /**
     * Stops undo/redo recording transaction
     */
    stopTransaction(title?: string): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
    /**
     * Undoes current undo/redo transaction.
     */
    undo(steps?: number): Promise<any>;
    /**
     * Undoes all transactions.
     */
    undoAll(): Promise<any>;
}

type TransactionConfig = {
    /**
     * Transaction title
     */
    title: string
}

/**
 * STM transaction class, holds list of actions constituting a transaction.
 * A transaction can be undone and redone. Upon undo all the actions being held
 * are undone in reverse order. Upon redo all the actions being held are redone
 * in forward order.
 */
export class Transaction {
    /**
     * Gets transaction's actions queue length
     */
    length: number
    /**
     * Gets transaction's actions queue
     */
    queue: ActionBase[]
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TransactionConfig>);
    /**
     * Adds an action to the transaction.
     */
    addAction(action: ActionBase|object): void;
    /**
     * Redoes actions held
     */
    redo(): void;
    /**
     * Undoes actions held
     */
    undo(): void;
}

/**
 * Base class for STM actions.
 */
export abstract class ActionBase {
    /**
     * Gets the type of the action (stringified class name).
     */
    readonly type: string
    /**
     * Redoes an action
     */
    redo(): void;
    /**
     * Undoes an action
     */
    undo(): void;
}

export class ModelStmClass {
    /**
     * Reference to STM manager, if used
     */
    stm: CoreStateTrackingManager
}

export const ModelStm : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ModelStmClass>

type StoreStmClassConfig = {
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
}

export class StoreStmClass {
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<StoreStmClassConfig>);
}

export const StoreStm : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & StoreStmClass>

/**
 * Abstract class for STM states
 * Every on* method should return a state for the STM which it should switch to
 * or throw an exception that this call at this state is illegal.
 * Interface of this class mirrors interface of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager">StateTrackingManager</a>.
 */
export abstract class StateBase {
}

/**
 * Empty class for Node.js compatibility
 */
export class DomClassList {
}

export class DelayableClass {
}

export const Delayable : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DelayableClass>

type EventsClassConfig = {
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
}

export class EventsClass {
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventsClassConfig>);
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const Events : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventsClass>

type CollectionConfig = {
    /**
     * Automatically apply filters on item add.
     */
    autoFilter: boolean
    /**
     * Automatically apply sorters on item add.
     */
    autoSort: boolean
    /**
     * Specify the names or index configs of properties which are to be indexed for fast lookup.
     * Index configs use the format `{ property : string, unique : boolean }`. Unique indices stores one index
     * per entry, non-unique stores a `Set`. If left out, `unique` defaults to `true`
     */
    extraKeys: string[]|object[]
    /**
     * Specify the name of the property of added objects which provides the lookup key
     */
    idProperty: string
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter">Sorter</a>, or Sorter config object, or
     * an array of these, to use to sort this Collection.
     */
    sorters: Partial<CollectionSorterConfig>[]
    /**
     * Fired when items are added, replace or removed
     */
    onChange: Function|string
    /**
     * Fired when a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-splice">splice</a> operation is requested but the operation
     * is a no-op and has caused no change to this Collection's dataset. The splice
     * method's parameters are passed for reference.
     */
    onNoChange: Function|string
}

/**
 * A class which encapsulates a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-get">keyed</a>,
 * <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-addFilter">filterable</a>, <a href="#Core/util/Collection#function-addSorter">sortable</a>
 * collection of objects. Entries may not be atomic data types such as `string` or `number`.
 * The entries are keyed by their `id` which is determined by interrogating the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#config-idProperty">idProperty</a>.
 * T...
 */
export class Collection {
    /**
     * The set of all values of this Collection regardless of filters applied.
     */
    readonly allValues: object[]
    /**
     * The number of items in this collection. Note that this honours filtering.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-totalCount">totalCount</a>;
     */
    readonly count: number
    /**
     * A filter function which encapsulates the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">Filters</a>
     * for this Collection.
     */
    readonly filterFunction: Function
    /**
     * The Collection of <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">Filters</a> for this Collection.
     */
    readonly filters: Collection
    /**
     * A counter which is incremented whenever the Collection is mutated in a meaningful way.
     * If a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-splice">splice</a> call results in no net replacement, removal or addition,
     * then the `generation` will not be incremented.
     */
    readonly generation: number
    /**
     * The property name used to extract item `id`s from added objects.
     */
    idProperty: string
    /**
     * A flag which is `true` if this Collection has active <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-filters">filters</a>.
     */
    readonly isFiltered: boolean
    /**
     * A flag which is `true` if this Collection has active <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-sorters">sorters</a>.
     */
    readonly isSorted: boolean
    /**
     * A sorter function which encapsulates the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter">Sorters</a>
     * for this Collection.
     */
    readonly sortFunction: Function
    /**
     * The Collection of <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter">Sorters</a> for this Collection.
     */
    sorters: Collection
    /**
     * The number of items in this collection regardless of filtering.
     */
    readonly totalCount: number
    /**
     * The set of values of this Collection. If this Collection <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-isFiltered">isFiltered</a>,
     * this yields the filtered data set.
     * Setting this property replaces the data set.
     */
    values: object[]
    /**
     * Fired when items are added, replace or removed
     */
    onChange: Function|string
    /**
     * Fired when a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-splice">splice</a> operation is requested but the operation
     * is a no-op and has caused no change to this Collection's dataset. The splice
     * method's parameters are passed for reference.
     */
    onNoChange: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CollectionConfig>);
    /**
     * Adds items to this Collection. Multiple new items may be passed.
     * By default, new items are appended to the existing values.
     * Any <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-sorters">sorters</a> <a href="#Core/util/Collection#property-sorters">sorters</a> present are re-run.
     * Any <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-filters">filters</a> <a href="#Core/util/Collection#property-filters">filters</a> present are re-run.
     * <em>Note that if application functionality requires add and remove, the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-splice">splice</a> operation is preferred as it performs both
     * operations in an atomic manner</em>
     */
    add(...items: object[]): void;
    /**
     * Adds a Filter to the Collection of Filters which are operating on this Collection.
     * A Filter may be an specified as an instantiated <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a>, or a config object for a CollectionFilter of the form
     * ```javascript
     * {
     *     property : 'age',
     *     operator : '&gt;=',
     *     value    : 21
     * }
     * ```
     * Note that by default, a Filter <em>replaces</em> a Filter with the same `property` to make
     * it easy to change existing Filters. A Filter's `id` is its `property` by default. You
     * can avoid this and add multiple Filters for one property by configuring Filters with `id`s.
     * A Filter may also be specified as a function which filters candidate objects eg:
     * ```javascript
     * candidate =&gt; candidate.customerDetails.age &gt;= 21
     * ```
     */
    addFilter(filter: Partial<CollectionFilterConfig>|CollectionFilter): CollectionFilter;
    /**
     * Adds a Sorter to the Collection of Sorters which are operating on this Collection.
     * A Sorter may be specified as an instantiated <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter">CollectionSorter</a>, or a config object for a
     * CollectionSorter of the form
     * ```javascript
     * {
     *     property  : 'age',
     *     direction : 'desc'
     * }
     * ```
     * Note that by default, a Sorter <em>replaces</em> a Sorter with the same `property` to make
     * it easy to change existing Sorters. A Sorter's `id` is its `property` by default. You
     * can avoid this and add multiple Sorters for one property by configuring Sorters with `id`s.
     * A Sorter may also be specified as a function which compares two objects eg:
     * ```javascript
     * (lhs, rhs) =&gt; lhs.customerDetails.age - rhs.customerDetails.age
     * ```
     */
    addSorter(sorter: Partial<CollectionSorterConfig>): CollectionSorter;
    /**
     * Change the id of an existing member by mutating its <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#config-idProperty">idProperty</a>.
     */
    changeId(item: string|number|object, newId: string|number): void;
    /**
     * Clears this collection.
     */
    clear(): void;
    /**
     * Compares the content of this Collection with the content of the passed Collection or
     * with the passed array. Order insensitive. This returns `true` if the two objects passed
     * contain the same set of items.
     */
    equals(other: Collection|any[], map?: Function): boolean;
    /**
     * Returns the first item in this Collection which elicits a <em>truthy</em> return value from the passed function.
     */
    find(fn: Function, ignoreFilters?: boolean): object;
    /**
     * Return the index of the item with the specified key having the specified value.
     * By default, filtering is taken into account and this returns the index in the filtered dataset if present. To
     * bypass this, pass the third parameter as `true`.
     * Only useful for indices configured with `unique: true`.
     */
    findIndex(propertyName: string, value: any, ignoreFilters?: boolean): number;
    /**
     * Return the item with the specified key having the specified value.
     * By default, filtering is taken into account. To bypass this, pass the third parameter as `true`.
     * For indices configured with `unique: false`, a Set of items will be returned.
     */
    findItem(propertyName: string, value: any, ignoreFilters?: boolean): object|Set<any>;
    /**
     * Executes the passed function for each item in this Collection, passing in the item,
     * ths index, and the full item array.
     */
    forEach(fn: Function, ignoreFilters?: boolean): void;
    /**
     * Returns the item with the passed `id`. By default, filtered are honoured, and
     * if the item with the requested `id` is filtered out, nothing will be returned.
     * To return the item even if it has been filtered out, pass the second parameter as `true`.
     */
    get(id: any, ignoreFilters?: boolean): object;
    /**
     * Returns the item with passed property name equal to the passed value. By default,
     * filtered are honoured, and if the item with the requested `id` is filtered out,
     * nothing will be returned.
     * To return the item even if it has been filtered out, pass the third parameter as `true`.
     */
    getBy(propertyName: string, value: any, ignoreFilters?: boolean): object;
    /**
     * Returns `true` if this Collection includes an item with the same `id` as the passed item.
     * By default, filtering is honoured, so if the item in question has been added,
     * but is currently filtered out of visibility, `false` will be returned.
     * To query inclusion in the master, unfiltered dataset, pass the second parameter as `true`;
     */
    includes(item: object|string|number, ignoreFilters?: boolean): boolean;
    /**
     * Returns the index of the item with the same `id` as the passed item.
     * By default, filtering is honoured, so if the item in question has been added, but is currently filtered out of
     * visibility, `-1` will be returned.
     * To find the index in the master, unfiltered dataset, pass the second parameter as `true`;
     */
    indexOf(item: object|string|number, ignoreFilters?: boolean): number;
    /**
     * Extracts ths content of this Collection into an array based upon the passed
     * value extraction function.
     */
    map(fn: Function, ignoreFilters?: boolean): object[];
    /**
     * This method ensures that every item in this Collection is replaced by the matched by
     * `id` item in the other Collection.
     * By default, any items in this Collection which are <strong>not</strong> in the other Collection are removed.
     * If the second parameter is passed as `false`, then items which are not in the other
     * Collection are not removed.
     * This can be used for example when updating a selected record Collection when a new
     * Store or new store dataset arrives. The selected Collection must reference the latest
     * versions of the selected record `id`s
     */
    match(other: Collection): void;
    /**
     * Moves an individual item, or a block of items to another location.
     */
    move(items: object|object[], beforeItem?: object): number;
    /**
     * Removes items from this Collection. Multiple items may be passed.
     * Any <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-sorters">sorters</a> <a href="#Core/util/Collection#property-sorters">sorters</a> present are re-run.
     * Any <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#property-filters">filters</a> <a href="#Core/util/Collection#property-filters">filters</a> present are re-run.
     * <em>Note that if application functionality requires add and remove, the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection#function-splice">splice</a> operation is preferred as it performs both
     * operations in an atomic manner</em>
     */
    remove(...items: object[]): void;
    /**
     * The core data set mutation method. Removes and adds at the same time. Analogous
     * to the `Array` `splice` method.
     * Note that if items that are specified for removal are also in the `toAdd` array,
     * then those items are <em>not</em> removed then appended. They remain in the same position
     * relative to all remaining items.
     */
    splice(index?: number, toRemove?: object[]|number, ...toAdd: object[]): void;
}

type CollectionFilterConfig = {
    /**
     * Configure as `false` to have string comparisons case insensitive.
     */
    caseSensitive: boolean
    /**
     * A function which accepts a value extracted from a candidate object using the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> name, and
     * returns the value which the filter should use to compare against its <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-value">value</a>.
     */
    convert: Function
    /**
     * When `true`, the filter will not be applied.
     */
    disabled: boolean
    /**
     * May be used in place of the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a>, <a href="#Core/util/CollectionFilter#config-value">value</a> and <a href="#Core/util/CollectionFilter#config-property">property</a> configs. A function which
     * accepts a candidate object and returns `true` or `false`
     */
    filterBy: Function
    /**
     * The `id` of this Filter for when used by a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a> Collection.
     * By default the `id` is the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> value.
     */
    id: string
    /**
     * Setting the `internal` config on a filter means that it is a fixed part of your store's operation.
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-clearFilters">clearFilters</a> does not remove `internal` filters. If you add an
     * `internal` filter, you must explicitly remove it if it is no longer required.
     * Grid features which offer column-based filtering do <em>not</em> ingest existing store filters on
     * their data field if the filter is `internal`
     */
    internal: boolean
    /**
     * The operator to use when comparing a candidate object's <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> with this CollectionFilter's <a href="#Core/util/CollectionFilter#config-value">value</a>.
     * May be:
     * `'='`, `'!='`, `'&gt;'`, `'&gt;='`, `'&lt;'`, `'&lt;='`, `'*'`,
     * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,
     * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`, `'sameDay'`,
     * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,
     * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',
     * `'isTrue'`, `'isFalse'`
     */
    operator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'sameDay'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'
    /**
     * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-value">value</a>.
     */
    property: string
    /**
     * The value against which to compare the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> of candidate objects.
     */
    value: any
}

/**
 * A class which encapsulates a single filter operation which may be applied to any object to decide whether to
 * include or exclude it from a set.
 * A CollectionFilter generally has at least three main properties:
 * 
 * * `property` - The name of a property in candidate objects from which to extract the value to test
 * * `value` - The value which  this filter uses to test against.
 * * `operator` - The comparison operator, eg: `'='` o...
 */
export class CollectionFilter {
    /**
     * May be used in place of the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a>, <a href="#Core/util/CollectionFilter#config-value">value</a> and <a href="#Core/util/CollectionFilter#config-property">property</a> configs. A function which
     * accepts a candidate object and returns `true` or `false`
     */
    filterBy: Function
    /**
     * The operator to use when comparing a candidate object's <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> with this CollectionFilter's <a href="#Core/util/CollectionFilter#config-value">value</a>.
     * May be:
     * `'='`, `'!='`, `'&gt;'`, `'&gt;='`, `'&lt;'`, `'&lt;='`, `'*'`,
     * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,
     * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`,
     * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,
     * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',
     * `'isTrue'`, `'isFalse'`
     */
    operator: '='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'
    /**
     * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-value">value</a>.
     */
    property: string
    /**
     * The value against which to compare the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter#config-property">property</a> of candidate objects.
     */
    value: any
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CollectionFilterConfig>);
}

type CollectionSorterConfig = {
    /**
     * When using <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter#config-property">property</a>, this may be specified as a function which takes the raw
     * property value and returns the value to actually sort by.
     */
    convert: Function
    /**
     * The direction to sort in, `'ASC'` or `'DESC'`
     */
    direction: 'ASC'|'DESC'
    /**
     * The `id` of this Sorter for when used by a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a> Collection.
     * By default the `id` is the <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter#config-property">property</a> value.
     */
    id: string
    /**
     * The name of a property of collection objects which yields the value to sort by.
     */
    property: string
    /**
     * A function which takes the place of using <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionSorter#config-property">property</a> and <a href="#Core/util/CollectionSorter#config-direction">direction</a>.
     * The function is passed two objects from the collection to compare and must return the comparison result.
     */
    sortFn: Function
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting performance. For more info on `localeCompare()`, see
     * <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * ```javascript
     * collection.addSorter({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
}

/**
 * A class which encapsulates a single sorter operation which may be applied to a <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a> to
 * order its elements in a specific way.
 * A CollectionSorter generally has two properties:
 * 
 * * `property` - The name of a property in collection objects by which to sort
 * * `direction` - The sort direction, `'ASC'` or `'DESC'`.
 * 
 * It may also be configured with just a <a href="#Core/util/Collec...
 */
export class CollectionSorter {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CollectionSorterConfig>);
}

type AssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing a collection of assignments between tasks in the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">TaskStore</a> and resources
 * in the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore">ResourceStore</a>.
 * ```javascript
 * const assignmentStore = new AssignmentStore({
 *     data : [
 *         { &quot;id&quot; : 1, &quot;event&quot; : 11,  &quot;resource&quot; : 1 },
 *         { &quot;id&quot; : 2, &quot;event&quot; : 12,  &quot;resource&quot; : 1 },
 *     ]
 * })
 * ```...
 */
export class AssignmentStore extends SchedulerProAssignmentStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AssignmentStoreConfig>);
}

type CalendarManagerStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the
 * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel">CalendarModel</a> class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * Please refer to the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/guides/basics/calendars.md">calendars guide</a> for details
 */
export class CalendarManagerStore extends SchedulerProCalendarManagerStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CalendarManagerStoreConfig>);
}

type DependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing a collection of dependencies between tasks in the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">TaskStore</a>.
 * Contains a collection of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">DependencyModel</a> records.
 * ```javascript
 * const dependencyStore = new DependencyStore({
 *     data : [
 *         {
 *             &quot;id&quot;       : 1,
 *             &quot;fromTask&quot; : 11,
 *             &quot;toTask&quot;   : 15,
 *             &quot;lag&quot;      : 2
 *       ...
 */
export class DependencyStore extends SchedulerProDependencyStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<DependencyStoreConfig>);
}

type ResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing the collection of the resources - <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">ResourceModel</a> records.
 * ```javascript
 * const resourceStore = new ResourceStore({
 *     data : [
 *         { &quot;id&quot; : 1, &quot;name&quot; : &quot;John Doe&quot; },
 *         { &quot;id&quot; : 2, &quot;name&quot; : &quot;Jane Doe&quot; }
 *     ]
 * })
 * ```
 */
export class ResourceStore extends SchedulerProResourceStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ResourceStoreConfig>);
}

type TaskStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Always return changes in increasing WBS order.
     */
    forceWbsOrderForChanges: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * Controls behavior of the outdent logic regarding siblings. By default, outdent will move child to be
     * its parent's sibling and will move all previous siblings to the outdented node's children. Visually, node
     * will remain in place just changing the level. When set to `true` only node with its subtree will be
     * outdented, siblings will not change parent. Visually, node will be moved as last child of the new parent.
     */
    outdentIgnoringSiblings: boolean
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Specifies which tree to use to calculate WBS. Ordered tree is unsortable and unfilterable, it
     * always holds complete tree hierarchy. By default, it uses sortable and filterable tree.
     */
    useOrderedTreeForWbs: boolean
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Set to `'auto'` to automatically update <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-wbsValue">wbsValue</a> as records in the
     * store are manipulated (e.g., when the user performs drag-and-drop reordering).
     * In manual mode, the WBS value is initialized as the store loads and only altered implicitly by the
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#function-indent">indent</a> and <a href="#Gantt/data/TaskStore#function-outdent">outdent</a> methods. The WBS values are otherwise updated only
     * by an explicit call to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs">refreshWbs</a>.
     * This can also be a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore#typedef-WbsMode">WbsMode</a> object that indicates what operations
     * should automatically <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs">refresh</a> WBS values.
     * The operations that trigger WBS refresh can be enabled explicitly in this object, for example:
     * ```javascript
     *  wbsMode : {
     *      add : true,
     *      remove : true
     *  }
     * ```
     * The above is an opt-in list that enable auto WBS refresh for node add and remove operations (these two
     * operations are associated with dragging to reorder items). No other operation will trigger WBS refresh.
     * At present, this leaves out only the `sort` operation, but if new auto-refreshing operations were added
     * in future releases, those would also not be included.
     * Alternatively, this object can be an opt-out specification if all values are falsy:
     * ```javascript
     *  wbsMode : {
     *      sort : false
     *  }
     * ```
     * The above two examples are (currently) equivalent in outcome. The choice between opt-in or opt-out form
     * is a matter of convenience as well as future-proofing preference.
     * The value `'auto'` is equivalent to all properties being `true`.
     * The value `'manual'` (the default) is equivalent to all properties being `false`.
     */
    wbsMode: string|WbsMode
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing the tree of tasks in the Gantt project. An individual task is represented as an instance of the
 * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a> class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * ```javascript
 * const taskStore = new TaskStore({
 *     data : [
 *         {
 *             &quot;id&quot;           : 1000,
 *             &quot;name&quot;      ...
 */
export class TaskStore extends AjaxStore implements GetEventsMixinClass {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TaskStoreConfig>);
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * By default, for any date, this includes any event which <em>intersects</em> that date.
     * To only include events that are fully contained <em>within</em> the date range, pass the `allowPartial`
     * option as `false`.
     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If
     * that is not required, pass the `includeOccurrences` option as `false`. <strong>Note that if `includeOccurrences` is
     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs
     * to be generated and returned.</strong>
     * Example:
     * ```javascript
     *  visibleEvents = eventStore.getEvents({
     *      resourceRecord : myResource,
     *      startDate      : scheduler.timeAxis.startDate,
     *      endDate        : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEvents(options: { date?: Date, startDate: Date, endDate?: Date, resourceRecord?: SchedulerResourceModel, filter?: Function, ignoreFilters?: boolean, includeOccurrences?: boolean, allowPartial?: boolean, startOnly?: boolean, onlyAssigned?: boolean, dateMap?: boolean|Map<any, any> }): SchedulerEventModel[]|Map<any, any>;
    /**
     * Increase the indentation level of one or more tasks in the tree
     */
    indent(nodes: TaskModel|TaskModel[]): Promise<any>;
    /**
     * Checks if a date range is allocated or not for a given resource.
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Decrease the indentation level of one or more tasks in the tree
     */
    outdent(nodes: TaskModel|TaskModel[]): Promise<any>;
    /**
     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.
     */
    setBaseline(index: number): void;
}

type WbsFieldConfig = {
    /**
     * Setting to `true` will ensure this field is included in any update/insert request payload
     * when a Store / Project / CrudManager performs a request.
     */
    alwaysWrite: boolean
    /**
     * A column config object for a column to display this field in a grid. For simple, atomic
     * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional
     * and the appropriate column type can be inferred.
     * This also provides default values for column configuration if a configured column definition
     * for a grid lacks a property.
     * For complex fields, such as identifiers which link to other records, a more capable
     * column type may be specified, for example a `type : `number'` field may be configured
     * with
     * ```javascript
     * column : 'percent'
     * ```
     * or
     * ```javascript
     * column : {
     *     type : 'percent',
     *     width : 100
     * }
     * ```
     * if it represents a percentage vaue and needs appropriate rendering and editing.
     */
    column: string|object
    /**
     * A function that compares two values and returns a value &lt; 0 if the first is less than the second, or 0
     * if the values are equal, or a value &gt; 0 if the first is greater than the second.
     */
    compare: Function
    /**
     * The property in a record's data object that contains the field's value.
     * Defaults to the field's `name`.
     */
    dataSource: string
    /**
     * The default value to assign to this field in a record if no value is provided.
     */
    defaultValue: any
    /**
     * By default, defined <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> fields may be used to create a grid column
     * suitable for diplaying that field in a grid cell. Some fields may not be suitable for
     * features which automatically generate columns for view. These fields are created using
     * `internal : true`. Some examples are the `expanded` and `rowHeight` fields which are used
     * internally.
     */
    internal: boolean
    /**
     * The label text for a form item generated for this field. This is also used to create
     * a column header for a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-column">column</a> for this field.
     */
    label: string
    /**
     * The name of the field.
     */
    name: string
    /**
     * The value to return from <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#function-print">print</a> for a `null` or `undefined` value.
     */
    nullText: string
    /**
     * The value to replace `null` when the field is not `nullable`.
     */
    nullValue: any
    /**
     * Setting to `false` indicates that `null` is not a valid value.
     */
    nullable: boolean
    /**
     * Set to `false` to exclude this field when saving records to a server.
     */
    persist: boolean
    /**
     * Set to `true` for the field's set accessor to ignore attempts to set this field.
     */
    readOnly: boolean
}

/**
 * This class is used for a WBS (Work Breakdown Structure) field. These fields hold a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs">Wbs</a>
 * object for their value.
 */
export class WbsField extends DataField {
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
}

type AssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Note that after load it will be populated with the actual event.
     */
    event: string|number|TaskModel
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Note that after load it will be populated with the actual resource.
     */
    resource: string|number|ResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * The numeric, percent-like value, indicating what is the &quot;contribution level&quot;
     * of the resource availability to the task.
     * Number 100, means that the assigned resource spends 100% of its working time to the task.
     * Number 50 means that the resource spends only half of its available time for the assigned task.
     */
    units: number
}

/**
 * This class represent a single assignment of a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">resource</a> to a
 * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">task</a> in your gantt chart.
 */
export class AssignmentModel extends SchedulerProAssignmentModel {
    /**
     * Id for event to assign. Note that after load it will be populated with the actual event.
     */
    event: string|number|TaskModel
    /**
     * Id for resource to assign to. Note that after load it will be populated with the actual resource.
     */
    resource: string|number|ResourceModel
    /**
     * The numeric, percent-like value, indicating what is the &quot;contribution level&quot;
     * of the resource availability to the task.
     * Number 100, means that the assigned resource spends 100% of its working time to the task.
     * Number 50 means that the resource spends only half of its available time for the assigned task.
     */
    units: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AssignmentModelConfig>);
}

type BaselineConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * The owning Task of the Baseline
     */
    task: TaskModel
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

/**
 * This class represents a baseline of a Task.
 * Records based on this model are initially created when tasks are loaded into the TaskStore. If dates (startDate and
 * endDate) are left out, the task's dates will be used. If dates are `null`, dates will be empty and the baseline bar
 * won't be displayed in the UI.
 */
export class Baseline extends TimeSpan {
    /**
     * Baseline duration variance in the task's duration unit.
     */
    durationVariance: Duration
    /**
     * Baseline end variance in the task's duration unit.
     */
    endVariance: Duration
    /**
     * Baseline start variance in the task's duration unit.
     */
    startVariance: Duration
    /**
     * The owning Task of the Baseline
     */
    task: TaskModel
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<BaselineConfig>);
    /**
     * Converts this baseline to a milestone (start date will match the end date).
     */
    convertToMilestone(): Promise<void>;
    /**
     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).
     */
    convertToRegular(): Promise<void>;
}

type CalendarIntervalModelConfig = {
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    iconCls: string
    /**
     * The &quot;is working&quot; flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
}

/**
 * This class represents a calendar interval in the Gantt calendar.
 * Every interval can be either recurrent (regularly repeating in time) or static.
 * Please refer to the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/guides/basics/calendars.md">calendars guide</a> for details
 */
export class CalendarIntervalModel extends SchedulerProCalendarIntervalModel {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CalendarIntervalModelConfig>);
}

type CalendarModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Start expanded or not
     */
    expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * If using the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a> config, you can set this to `true` to
     * <em>not</em> convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">Intervals</a> collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to a store containing the intervals. When
     * serializing it will be converted back to an array.
     */
    intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The flag, indicating, whether the &quot;unspecified&quot; time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
}

/**
 * This class represents a calendar in the Gantt project. It contains a collection of the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">CalendarIntervalModel</a>.
 * Every interval can be either recurrent (regularly repeating in time) or static.
 * Please refer to the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/guides/basics/calendars.md">calendars guide</a> for details
 */
export class CalendarModel extends SchedulerProCalendarModel {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<CalendarModelConfig>);
}

type DependencyModelConfig = {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-from">from</a> instead.
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * The origin task of this dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#field-from">from</a> instead.
     */
    fromTask: string|number|TaskModel
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;ms&quot; (milliseconds)
     * * &quot;s&quot; (seconds)
     * * &quot;m&quot; (minutes)
     * * &quot;h&quot; (hours)
     * * &quot;d&quot; (days)
     * * &quot;w&quot; (weeks)
     * * &quot;M&quot; (months)
     * * &quot;y&quot; (years)
     * 
     * This field is readonly after creation, to change `lagUnit` use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#function-setLag">setLag()</a>.
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-to">to</a> instead.
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * The destination task of this dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#field-to">to</a> instead.
     */
    toTask: string|number|TaskModel
    /**
     * Dependency type, see static property <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static">Type</a>
     */
    type: number
}

/**
 * This class represents a single dependency between the tasks in your Gantt project.
 * <h2>Subclassing the Dependency class</h2>
 * The name of any field in data can be customized in the subclass, see the example below.
 * ```javascript
 * class MyDependencyModel extends DependencyModel {
 *   static get fields() {
 *     return [
 *       { name: 'to', dataSource : 'targetId' },
 *       { name: 'from', dataSource : 'sourceId' }
 *     ];
 *   }
 * }
 * ```
 */
export class DependencyModel extends SchedulerProDependencyModel {
    /**
     * The origin task of this dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#field-from">from</a> instead.
     */
    fromTask: string|number|TaskModel
    /**
     * The destination task of this dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel#field-to">to</a> instead.
     */
    toTask: string|number|TaskModel
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<DependencyModelConfig>);
}

type ProjectModelConfig = {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event &quot;attached&quot; to this date, according to the user intention.
     * Depending on your use case, you might want to disable this behaviour.
     */
    addConstraintOnDateSet: boolean
    /**
     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is
     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic
     * is not involved.
     * If <strong>true</strong>, it will add/remove one hour when calculating duration from start/end dates. For example:
     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is a task:
     * ```javascript
     * {
     *     startDate    : '2020-10-20',
     *     duration     : 10,
     *     durationUnit : 'day'
     * }
     * ```
     * It will end on 2020-10-29 23:00. Because of the DST transition Sunday is actually 25 hours long and when the
     * Gantt project calculates the end date it converts days to hours multiplying by 24. If you're setting duration
     * and want task to end on the end of the day you should manually correct for DST, like so:
     * ```javascript
     * {
     *     startDate    : '2020-10-20',
     *     duration     : 10 * 24 + 1,
     *     durationUnit : 'hour'
     * },
     * ```
     * If task has start and end dates it will correct for DST twice:
     * ```javascript
     * {
     *     startDate    : '2020-10-20',
     *     endDate      : '2020-10-30'
     * }
     * ```
     * This task will end on 2020-10-29 22:00 which is a known quirk.
     * If <strong>false</strong>, the Gantt project will not add DST correction which fixes the quirk mentioned above and such task
     * will end on 2020-10-30 exactly, having hours duration of 10 days * 24 hours + 1 hour.
     * Also, for this task days duration will be a floating point number due to extra (or missing) hour:
     * ```javascript
     * task.getDuration('day')  // 10.041666666666666
     * task.getDuration('hour') // 241
     * ```
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a>
     * property of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore">assignmentStore</a>
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore">AssignmentStore</a> instance or a config object.
     */
    assignmentStore: AssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore">AssignmentStore</a>
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore">assignmentStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModels</a> or its configuration objects.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore">assignmentStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModels</a> or configuration objects.
     */
    assignmentsData: Partial<AssignmentModelConfig>[]|AssignmentModel[]
    /**
     * `true` to enable automatic <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-percentDone">% done</a> calculation for summary
     * tasks, `false` to disable it.
     */
    autoCalculatePercentDoneForParentTasks: boolean
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|CalendarModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore">CalendarManagerStore</a> instance or a config object.
     */
    calendarManagerStore: CalendarManagerStore|Partial<CalendarManagerStoreConfig>
    /**
     * The constructor to create a calendar store instance with. Should be a class, subclassing the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore">CalendarManagerStore</a>
     */
    calendarManagerStoreClass: typeof CalendarManagerStore
    /**
     * The constructor of the calendar model class, to be used in the project. Will be set as the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a>
     * property of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a>
     */
    calendarModelClass: typeof CalendarModel
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a>. Should be a
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel">CalendarModel</a> array or its configuration objects.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel">CalendarModels</a> or configuration objects.
     */
    calendarsData: Partial<CalendarModelConfig>[]|CalendarModel[]
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per month
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `1 month` the system understands that it
     * actually means `30 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per week
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `2 weeks` the system understands that it
     * actually means `14 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerWeek: number
    /**
     * Enables early rendering in Gantt, by postponing calculations to after the first refresh.
     * Requires task data loaded in Gantt to be pre-normalized to function as intended, since it will be used to
     * render tasks before engine has normalized the data. Given un-normalized data tasks will snap into place
     * when calculations are finished.
     * The Gantt chart will be read-only until the initial calculations are finished.
     */
    delayCalculation: boolean
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore">dependencyStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">DependencyModels</a> or its configuration objects.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * 
     * * `ToEvent` - successor calendar will be used (default);
     * * `FromEvent` - predecessor calendar will be used;
     * * `Project` - the project calendar will be used.
     * 
     */
    dependenciesCalendar: string
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore">dependencyStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">DependencyModels</a> or configuration objects.
     */
    dependenciesData: Partial<DependencyModelConfig>[]|DependencyModel[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a>
     * property of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore">dependencyStore</a>
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore">DependencyStore</a> instance or a config object.
     */
    dependencyStore: DependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore">DependencyStore</a>
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * The scheduling direction of the project tasks.
     * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,
     * `Backward` - to As-Late-As-Possible (ALAP).
     * *When using backward scheduling on the project, you should either make
     * both start and end date fields persistent on all tasks, or make both start and end date fields on
     * the project persistent. This is because for initial calculation, Gantt will need to have the project's
     * end date upfront, before performing calculations.*
     * To set the scheduling direction of the individual tasks, use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction">direction</a>
     * field of the TaskModel.
     */
    direction: 'Forward'|'Backward'
    /**
     * Set to `true` to enable calculation progress notifications.
     * When enabled, the project fires <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#event-progress">progress</a> events and the Gantt chart load mask reacts by showing a progress bar for the Engine calculations.
     * <strong>Note</strong>: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow the UI to redraw.
     */
    enableProgressNotifications: boolean
    /**
     * Configuration of the JSON encoder used by the <em>Crud Manager</em>.
     */
    encoder: { requestData?: object }
    /**
     * End date of the project in the ISO 8601 format.
     * The value is calculated as the latest date among all tasks.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">TaskStore</a> instance or a config object.
     */
    eventStore: TaskStore|object|Partial<TaskStoreConfig>
    /**
     * Alias to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-tasksData">tasksData</a>.
     */
    eventsData: Partial<TaskModelConfig>[]|TaskModel[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per day
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `5 days` the system understands that it
     * actually means `120 hours` and schedules accordingly.
     */
    hoursPerDay: number
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo
     * local changes.
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Whether to include &quot;As soon as possible&quot; and &quot;As late as possible&quot; in the list of the constraints,
     * for compatibility with the MS Project. Enabled by default.
     * Note, that when enabling this option, you can not have a regular constraint on the task and ASAP/ALAP flag
     * in the same time.
     * See also docs of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction">direction</a> field.
     */
    includeAsapAlapAsConstraints: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Maximum range the project calendars can iterate.
     * The value is defined in milliseconds and by default equals `5 years` roughly.
     * ```javascript
     * new Gantt({
     *     project : {
     *         // adjust calendar iteration limit to 10 years roughly:
     *         // 10 years expressed in ms
     *         maxCalendarRange : 10 * 365 * 24 * 3600000,
     *         ...
     *     }
     * });
     * ```
     */
    maxCalendarRange: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * Set to `true` to reset the undo/redo queues of the internal <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager">StateTrackingManager</a>
     * after the Project has loaded. Defaults to `false`
     */
    resetUndoRedoQueuesAfterLoad: boolean
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a>
     * property of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore">resourceStore</a>
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore">ResourceStore</a> instance or a config object.
     */
    resourceStore: ResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore">ResourceStore</a>
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore">resourceStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">ResourceModels</a> or its configuration objects.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore">resourceStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">ResourceModels</a> or configuration objects.
     */
    resourcesData: Partial<ResourceModelConfig>[]|ResourceModel[]
    /**
     * Silences propagations caused by the project loading.
     * Applying the loaded data to the project occurs in two basic stages:
     * 
     * * Data gets into the engine graph which triggers changes propagation
     * * The changes caused by the propagation get written to related stores
     * 
     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes
     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.
     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.
     * By default the system treats the data as consistent so this option is `true`.
     * ```javascript
     * new Gantt({
     *     project : {
     *         // We want scheduling engine to recalculate the data properly
     *         // so then we could save it back to the server
     *         silenceInitialCommit : false,
     *         ...
     *     }
     *     ...
     * })
     * ```
     */
    silenceInitialCommit: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the
     * project to start no earlier than it.
     * If this date is not provided, it will be calculated as the earliest date among all tasks.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a>
     * property of the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-eventStore">eventStore</a>
     */
    taskModelClass: typeof TaskModel
    /**
     * An alias for the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-eventStore">eventStore</a>.
     */
    taskStore: TaskStore|Partial<TaskStoreConfig>
    /**
     * The constructor to create an task store instance with. Should be a class, subclassing the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">TaskStore</a>
     */
    taskStoreClass: typeof TaskStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore">taskStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModels</a> or its configuration objects.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore">taskStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModels</a> or configuration objects.
     */
    tasksData: Partial<TaskModelConfig>[]|TaskModel[]
    /**
     * Store that holds time ranges (using the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a> model or subclass thereof) for
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/TimeRanges">TimeRanges</a> feature. A store will be automatically created if none is specified.
     */
    timeRangeStore: Partial<StoreConfig>|Store
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore">timeRangeStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> or its configuration objects.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore">timeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> or configuration objects.
     */
    timeRangesData: Partial<TimeSpanConfig>[]|TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.
     * ```javascript
     * transport : {
     *     load : {
     *         url       : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName : 'data',
     *         // pass extra HTTP request parameter
     *         params    : {
     *             foo : 'bar'
     *         }
     *     },
     *     sync : {
     *         url     : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers : {
     *             'Content-Type' : 'application/json'
     *         }
     *     }
     * }
     * ```
     * Since the class uses Fetch API you can use
     * any its <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request interface</a> options:
     * ```javascript
     * transport : {
     *     load : {
     *         url         : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName   : 'data',
     *         // pass few Fetch API options
     *         method      : 'GET',
     *         credentials : 'include',
     *         cache       : 'no-cache'
     *     },
     *     sync : {
     *         url         : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers     : {
     *             'Content-Type' : 'application/json'
     *         },
     *         credentials : 'include'
     *     }
     * }
     * ```
     * An object where you can set the following possible properties:
     */
    transport: { load?: object, sync?: object }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the Engine detects a computation cycle.
     */
    onCycle: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * gantt.project.on({
     *     dataReady({ records }) {
     *         console.log('Calculations finished');
     *         for (const record of records) {
     *             console.log(`Modified #${record.id}: ${JSON.stringify(record.modifications)}`);
     *         }
     *         // Output:
     *         // Modified #12: {&quot;endDate&quot;:null,&quot;duration&quot;:7200000,&quot;id&quot;:12}
     *         // Modified #1: {&quot;percentDone&quot;:49.99998611112847,&quot;id&quot;:1}
     *         // Modified #1000: {&quot;percentDone&quot;:49.99965834045124,&quot;id&quot;:1000}
     *     }
     * });
     * 
     * gantt.project.taskStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished', etc.
     * ```
     */
    onDataReady: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes usage impossible.
     */
    onEmptyCalendar: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fired during the Engine calculation if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-enableProgressNotifications">enableProgressNotifications</a> config is `true`
     */
    onProgress: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     */
    onSchedulingConflict: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

/**
 * This class represents a global project of your Project plan or Gantt - a central place for all data.
 * It holds and links the stores usually used by Gantt:
 * 
 * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">TaskStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore">ResourceStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore">AssignmentStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore">DependencyStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore">CalendarManagerStore</a></li...
 */
export class ProjectModel extends Model implements ProjectCrudManagerClass, ProjectChangeHandlerMixinClass, EventsClass, ProjectModelTimeZoneMixinClass {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event &quot;attached&quot; to this date, according to the user intention.
     * Depending on your use case, you might want to disable this behaviour.
     */
    addConstraintOnDateSet: boolean
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/AssignmentStore">store</a> holding the assignment information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModel</a>
     */
    assignmentStore: AssignmentStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-assignmentStore">assignmentStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * `true` to enable automatic <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-percentDone">% done</a> calculation for summary
     * tasks, `false` to disable it.
     */
    autoCalculatePercentDoneForParentTasks: boolean
    /**
     * The project calendar.
     */
    calendar: CalendarModel
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/CalendarManagerStore">store</a> holding the calendar information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel">CalendarModel</a>
     */
    calendarManagerStore: CalendarManagerStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a> data.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/CalendarModel">CalendarModel</a> array but also accepts an array of its configuration
     * objects as input.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * Returns an array of critical paths.
     * Each <em>critical path</em> is an array of critical path nodes.
     * Each <em>critical path node</em> is an object which contains <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-critical">critical task</a>
     * and <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">dependency</a> leading to the next critical path node.
     * Dependency is missing if it is the last critical path node in the critical path.
     * To highlight critical paths, enable <a href="https://bryntum.com/products/gantt/docs/api/Gantt/feature/CriticalPaths">CriticalPaths</a> feature.
     * ```javascript
     * // This is an example of critical paths structure
     * [
     *      // First path
     *      [
     *          {
     *              event : Gantt.model.TaskModel
     *              dependency : Gantt.model.DependencyModel
     *          },
     *          {
     *              event : Gantt.model.TaskModel
     *          }
     *      ],
     *      // Second path
     *      [
     *          {
     *              event : Gantt.model.TaskModel
     *          }
     *      ]
     *      // and so on....
     * ]
     * ```
     * For more details on the <em>critical path method</em> theory please check
     * <a href="https://en.wikipedia.org/wiki/Critical_path_method">this article</a>.
     */
    criticalPaths: any[]
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per month
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `1 month` the system understands that it
     * actually means `30 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per week
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `2 weeks` the system understands that it
     * actually means `14 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerWeek: number
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-dependencyStore">dependencyStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">DependencyModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * 
     * * `ToEvent` - successor calendar will be used (default);
     * * `FromEvent` - predecessor calendar will be used;
     * * `Project` - the project calendar will be used.
     * 
     */
    dependenciesCalendar: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/DependencyStore">store</a> holding the dependency information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/DependencyModel">DependencyModel</a>
     */
    dependencyStore: DependencyStore
    /**
     * The scheduling direction of the project tasks.
     * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,
     * `Backward` - to As-Late-As-Possible (ALAP).
     * *When using backward scheduling on the project, you should either make
     * both start and end date fields persistent on all tasks, or make both start and end date fields on
     * the project persistent. This is because for initial calculation, Gantt will need to have the project's
     * end date upfront, before performing calculations.*
     * To set the scheduling direction of the individual tasks, use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction">direction</a>
     * field of the TaskModel.
     */
    direction: 'Forward'|'Backward'
    /**
     * Enables/disables the calculation progress notifications.
     */
    enableProgressNotifications: boolean
    /**
     * End date of the project in the ISO 8601 format.
     * The value is calculated as the latest date among all tasks.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/TaskStore">store</a> holding the task information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>
     */
    eventStore: TaskStore
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per day
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `5 days` the system understands that it
     * actually means `120 hours` and schedules accordingly.
     */
    hoursPerDay: number
    /**
     * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo
     * local changes.
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * Get or set data of project stores. The returned data is identical to what
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-toJSON">toJSON</a> returns:
     * ```javascript
     * 
     * const data = scheduler.project.inlineData;
     * 
     * // data:
     * {
     *     eventsData : [...],
     *     resourcesData : [...],
     *     dependenciesData : [...],
     *     assignmentsData : [...]
     * }
     * 
     * 
     * // Plug it back in later
     * scheduler.project.inlineData = data;
     * ```
     */
    inlineData: object
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Get or set project data (records from its stores) as a JSON string.
     * Get a JSON string:
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData       : [...],
     *     resourcesData    : [...],
     *     assignmentsData  : [...],
     *     dependenciesData : [...]
     * });
     * 
     * const jsonString = project.json;
     * 
     * // jsonString:
     * '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     * Set a JSON string (to populate the project stores):
     * ```javascript
     * project.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     */
    json: string
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/ResourceStore">store</a> holding the resources that can be assigned to the tasks in the
     * task store.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">ResourceModel</a>
     */
    resourceStore: ResourceStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-resourceStore">resourceStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ResourceModel">ResourceModels</a> but also accepts an array
     * of its configuration objects as input.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the
     * project to start no earlier than it.
     * If this date is not provided, it will be calculated as the earliest date among all tasks.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * State tracking manager instance the project relies on
     */
    stm: CoreStateTrackingManager
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * An alias for the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-eventStore">eventStore</a>.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModel</a>
     */
    taskStore: TaskStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-taskStore">taskStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel">TaskModels</a> but also accepts an array of
     * its configuration objects as input.
     */
    tasks: TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">store</a> containing time ranges to be visualized.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a>
     */
    timeRangeStore: Store
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#property-timeRangeStore">timeRangeStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> but also accepts an
     * array of its configuration objects as input.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the Engine detects a computation cycle.
     */
    onCycle: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * gantt.project.on({
     *     dataReady({ records }) {
     *         console.log('Calculations finished');
     *         for (const record of records) {
     *             console.log(`Modified #${record.id}: ${JSON.stringify(record.modifications)}`);
     *         }
     *         // Output:
     *         // Modified #12: {&quot;endDate&quot;:null,&quot;duration&quot;:7200000,&quot;id&quot;:12}
     *         // Modified #1: {&quot;percentDone&quot;:49.99998611112847,&quot;id&quot;:1}
     *         // Modified #1000: {&quot;percentDone&quot;:49.99965834045124,&quot;id&quot;:1000}
     *     }
     * });
     * 
     * gantt.project.taskStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished', etc.
     * ```
     */
    onDataReady: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes usage impossible.
     */
    onEmptyCalendar: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fired during the Engine calculation if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-enableProgressNotifications">enableProgressNotifications</a> config is `true`
     */
    onProgress: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     */
    onSchedulingConflict: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * Usage:
     * ```javascript
     * // Collect changes from first project
     * const { changes } = projectA;
     * 
     * // Apply changes to second project
     * await projectB.applyProjectChanges(changes);
     * ```
     * *
     * This method will apply changes from the incoming object and accept all current project changes. Before
     * applying changes make sure you've processed current project changes in order not to lose them.
     * *
     */
    applyProjectChanges(changes: object): Promise<any>;
    /**
     * Cancels a sent request.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     * By calling this function, the commit happens right away. And by awaiting it you are sure that project
     * calculations are finished and that references between records are up to date.
     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.
     * ```javascript
     * // Move a task in time
     * taskStore.first.shift(1);
     * 
     * // Trigger calculations directly and wait for them to finish
     * const result = await project.commitAsync();
     * 
     * if (result.rejectedWith) {
     *     // there was a conflict during the scheduling
     * }
     * ```
     */
    commitAsync(): Promise<void>;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.
     */
    encode(requestData: object): string;
    /**
     * Returns a calendar of the project. If task has never been assigned a calendar a project's calendar will be returned.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Accepts a &quot;data package&quot; consisting of data for the projects stores, which is then loaded into the stores.
     * The package can hold data for EventStore, AssignmentStore, ResourceStore, DependencyStore and Calendar Manager.
     * It uses the same format as when creating a project with inline data:
     * ```javascript
     * await project.loadInlineData({
     *     eventsData       : [...],
     *     resourcesData    : [...],
     *     assignmentsData  : [...],
     *     dependenciesData : [...],
     *     calendarsData    : [...]
     * });
     * ```
     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you
     * can be sure that project calculations are finished.
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Causes the scheduling engine to re-evaluate the task data and all associated data and constraints
     * and apply necessary changes.
     */
    propagate(): Promise<void>;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Resume <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate">propagation</a>. If propagation is resumed (calls may be nested
     * which increments a suspension counter), then if a call to propagate was made during suspension,
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate">propagate</a> is executed.
     */
    resumePropagate(trigger?: boolean): Promise<void>;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a <em>Crud Manager</em> request to the server.
     */
    sendRequest(request: { type: 'load'|'sync', url: string, data: string, params: object, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Overrides the project owned store identifiers calculation and launches rescheduling.
     */
    setCalculations(calculations: object): Promise<any>;
    /**
     * Sets the calendar of the project. Will cause the schedule to be updated - returns a `Promise`
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Suspend <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate">propagation</a> processing. When propagation is suspended,
     * calls to <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-propagate">propagate</a> do not proceed, instead a propagate call is deferred
     * until a matching <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#function-resumePropagate">resumePropagate</a> is called.
     */
    suspendPropagate(): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.
     * Used by JSON.stringify to correctly convert this record to json.
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData       : [...],
     *     resourcesData    : [...],
     *     assignmentsData  : [...],
     *     dependenciesData : [...]
     * });
     * 
     * const json = project.toJSON();
     * 
     * // json:
     * {
     *     eventsData : [...],
     *     resourcesData : [...],
     *     dependenciesData : [...],
     *     assignmentsData : [...]
     * }
     * ```
     * Output can be consumed by `loadInlineData()`:
     * ```javascript
     * const json = project.toJSON();
     * 
     * // Plug it back in later
     * project.loadInlineData(json);
     * ```
     */
    toJSON(): object;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

type ResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: SchedulerProCalendarModel|string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a <a href="https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn">TreeColumn</a>.
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Used by the default implementation of <a href="https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight">getRowHeight</a> to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the <a href="https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href">href</a> field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represents a single resource in your Gantt project.
 * If you want to add or change some fields, describing resources - subclass this class:
 * ```javascript
 * class MyResourceModel extends ResourceModel {
 * 
 *   static get fields() {
 *     return [
 *       { name: 'company', type: 'string' }
 *     ]
 *   }
 * }
 * ```
 * See also: <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModel</a>
 */
export class ResourceModel extends SchedulerProResourceModel {
    /**
     * Get associated tasks
     */
    readonly events: EventModel[]
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ResourceModelConfig>);
}

type TaskModelConfig = {
    /**
     * A set of resources assigned to this task
     */
    assigned: Set<any>
    /**
     * The getter will yield a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a> of <a href="#Gantt/model/Baseline">Baseline</a>s.
     * When constructing a task the baselines will be constructed from an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline">Baseline</a> data objects.
     * When serializing, it will yield an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline">Baseline</a> data objects.
     */
    baselines: Partial<BaselineConfig>[]|Store
    /**
     * The calendar, assigned to the task. Allows you to set the time when task can be performed.
     */
    calendar: CalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field
     * for leaf tasks.
     * Note, if the task store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * An encapsulation of the CSS classes to be added to the rendered event element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string
    /**
     * Field defining the constraint boundary date or `null` if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType">constraintType</a> is `null`.
     */
    constraintDate: string|Date|null
    /**
     * Field storing the task constraint alias or `null` if not constraint set.
     * Valid values are:
     * 
     * * &quot;finishnoearlierthan&quot;
     * * &quot;finishnolaterthan&quot;
     * * &quot;mustfinishon&quot;
     * * &quot;muststarton&quot;
     * * &quot;startnoearlierthan&quot;
     * * &quot;startnolaterthan&quot;
     * 
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * A calculated field indicating if the task is <em>critical</em>.
     * A task considered <em>critical</em> if its delaying causes the project delay.
     * The field value is calculated based on <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack">totalSlack</a> field value.
     * ```javascript
     * if (task.critical) {
     *     Toast.show(`The ${task.name} is critical!`);
     * }
     * ```
     */
    critical: boolean
    /**
     * A deadline date for this task. Does not affect scheduling logic.
     * Note that the field always returns a `Date`.
     */
    deadlineDate: string|Date
    /**
     * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),
     * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks &quot;sticks&quot; to the project's start date,
     * and ALAP tasks - to the project's end date.
     * If not specified (which is the default), direction is inherited from the parent task (and from the project for top-level tasks).
     * By default, the project model has forward scheduling mode.
     * <strong>Note</strong> The ALAP-scheduled task in the ASAP-scheduled project will turn all of its successors into ALAP-scheduled tasks,
     * even if their scheduling direction is specified explicitly by the user as ASAP. We can say that ALAP-scheduling
     * is propagated down through the successors chain. This propagation, however, will stop in the following cases:
     * 
     * * If a successor is manually scheduled
     * * If a successor has a &quot;Must start/finish on&quot; constraint
     * * If a dependency to successor is inactive
     * 
     * Similarly, the ASAP-scheduled task in the ALAP-scheduled project will turn all of its predecessors into ASAP-scheduled tasks
     * (also regardless of the user-provided value).
     * When such propagation is in action, the value of this field is ignored and the UI will disable controls for it.
     * To determine the actual scheduling direction of the task (which might be different from the user-provided value),
     * one can use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effectiveDirection">effectiveDirection</a> field.
     * <strong>Note</strong> For the purposes of compatibility with MS Project and to ease the migration process for users,
     * by default, scheduling direction can be set using the &quot;Constraint type&quot; field on the &quot;Advanced&quot;
     * tab of the task editor. The forward scheduling is specified in it as &quot;As soon as possible&quot; option and backward -
     * &quot;As late as possible&quot;. One can also disable the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-includeAsapAlapAsConstraints">includeAsapAlapAsConstraints</a>
     * config to render a separate &quot;Scheduling direction&quot; field.
     */
    direction: 'Forward'|'Backward'
    /**
     * Specify false to prevent the event from being dragged (if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag">TaskDrag</a> feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the task duration (the number of units).
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    duration: number
    /**
     * The unit part of the task duration, defaults to &quot;day&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-setDuration">setDuration</a> call.
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A calculated field storing the <em>early end date</em> of the task.
     * The <em>early end date</em> is the earliest possible date the task can finish.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early end date matches the
     * project start date plus the task duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    earlyEndDate: Date
    /**
     * A calculated field storing the <em>early start date</em> of the task.
     * The <em>early start date</em> is the earliest possible date the task can start.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early start date matches the
     * project start date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    earlyStartDate: Date
    /**
     * The effective calendar used by the task.
     * Returns the task own <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar">calendar</a> if provided or the project <a href="#Gantt/model/ProjectModel#field-calendar">calendar</a>.
     */
    effectiveCalendar: CalendarModel
    /**
     * The calculated effective scheduling direction of this event. See the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction">direction</a> field for details.
     */
    effectiveDirection: EffectiveDirection
    /**
     * The numeric part of the task effort (the number of units). The effort of the &quot;parent&quot; tasks will be automatically set to the sum
     * of efforts of their &quot;child&quot; tasks
     * UI fields representing this data field are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    effort: number
    /**
     * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.
     * If it is `true`, then <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort</a> is kept intact, and duration is updated. If it is `false` -
     * vice-versa.
     */
    effortDriven: boolean
    /**
     * The unit part of the task's effort, defaults to &quot;h&quot; (hours). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-setEffort">setEffort</a> call.
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * End date of the task in ISO 8601 format
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example
     * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as
     * `style.color` to the bar.
     * If no color is specified, any color defined in Gantt's <a href="https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-eventColor">eventColor</a>
     * config will apply instead.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     * Using named colors:
     * ```javascript
     * const gantt = new Gantt({
     *     project {
     *         tasksData : [
     *             { id : 1, name : 'Important task', eventColor : 'red' }
     *         ]
     *     }
     * });
     * ```
     * Will result in:
     * ```html
     * &lt;div class=&quot;b-gantt-task-wrap b-sch-color-red&quot;>
     * ```
     * Using non-named colors:
     * ```javascript
     * const gantt = new Gantt({
     *     project {
     *         tasksData : [
     *             { id : 1, name : 'Important task', eventColor : '#ff0000' }
     *         ]
     *     }
     * });
     * ```
     * Will result in:
     * ```html
     * &lt;div class=&quot;b-gantt-task-wrap&quot; style=&quot;color: #ff0000&quot;>
     * ```
     */
    eventColor: EventColor
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the task row
     */
    iconCls: string
    /**
     * Unique identifier of task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the task.
     * By default the field value is `false` resulting in that the task performs only when
     * its own <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar">calendar</a> and some of the assigned
     * resource calendars allow that.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * A calculated field storing the <em>late end date</em> of the task.
     * The <em>late end date</em> is the latest possible date the task can finish.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late end date matches the project end date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    lateEndDate: Date
    /**
     * A calculated field storing the <em>late start date</em> of the task.
     * The <em>late start date</em> is the latest possible date the task can start.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late start date matches the project end date
     * minus the task duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    lateStartDate: Date
    /**
     * When set to `true`, the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate">startDate</a> of the task will not be changed by any of its incoming
     * dependencies or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Name of the task
     */
    name: string
    /**
     * A freetext note about the task.
     */
    note: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     * UI fields representing this data field are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    percentDone: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Specify false to prevent the task from being resized (if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize">TaskResize</a> feature is
     * used). You can also specify 'start' or 'end' to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Set this to true to roll up a task to its closest parent
     */
    rollup: boolean
    /**
     * This field defines the scheduling mode for the task. Based on this field some fields of the task
     * will be &quot;fixed&quot; (should be provided by the user) and some - computed.
     * Possible values are:
     * 
     * * 
     * `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on
     * information about its start/end dates, task own calendar (project calendar if there's no one) and
     * calendars of the assigned resources.
     * 
     * * 
     * `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed
     * dynamically, based on the assigned resources information. Typical example of such task is - meeting.
     * Meetings typically have pre-defined start and end dates and the more people are participating in the
     * meeting, the more effort is spent on the task. When duration of such task increases, its effort is
     * increased too (and vice-versa). Note: fixed start and end dates here doesn't mean that a user can't
     * update them via GUI, the only field which won't be editable in GUI is the
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort field</a>, it will be calculated according to duration and resources assigned to
     * the task.
     * 
     * * 
     * `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be
     * assigned to this task, the less the duration will be. The typical example will be a &quot;paint the walls&quot;
     * task - several painters will complete it faster.
     * 
     * * 
     * `FixedUnits` mode means, that the assignment level of all assigned resources will be kept as provided
     * by the user, and either <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort</a> or duration of the task is recalculated, based on the
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effortDriven">effortDriven</a> flag.
     * 
     * 
     */
    schedulingMode: 'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'
    /**
     * Segments of the task that appear when the task gets <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-splitToSegments">splitToSegments</a>.
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * A calculated field storing unit for the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack">totalSlack</a> value.
     */
    slackUnit: string
    /**
     * Start date of the task in ISO 8601 format
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * CSS class specifying an icon to apply to the task bar
     */
    taskIconCls: string
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
    /**
     * A calculated field storing the <em>total slack</em> (or <em>total float</em>) of the task.
     * The <em>total slack</em> is the amount of working time the task can be delayed without causing a delay
     * to the project end.
     * The value is expressed in <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-slackUnit">slackUnit</a> units.
     * ```javascript
     * // let output slack info to the console
     * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)
     * ```
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    totalSlack: number
    /**
     * This field is automatically set to `true` when the task is &quot;unscheduled&quot; - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such task is not rendered,
     * and does not affect the schedule of its successors.
     * To schedule the task back, enter one of the missing values, so that there's enough information
     * to calculate start date, end date and duration.
     * Note, that setting this field manually does nothing. This field should be persisted, but not updated
     * manually.
     */
    unscheduled: boolean
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs">WBS</a> for this task record. This field is automatically calculated and
     * maintained by the store. This calculation can be refreshed by calling <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs">refreshWbs</a>.
     * To get string representation of the WBS value (e.g. '2.1.3'), use <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs#property-value">value</a>
     * property.
     */
    wbsValue: Wbs|string
}

/**
 * This class represents a task in your Gantt project. Extend it to add your own custom task fields and methods.
 * <h2>Subclassing the TaskModel class</h2>
 * To subclass the TaskModel and add extra <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-fields-static">fields</a> and API methods, please see
 * the snippet below.
 * ```javascript
 * class MyTaskModel extends TaskModel {
 *   static get fields() {
 *       return [
 *           { name: 'importantDate', type: 'date' }
 *       ...
 */
export class TaskModel extends TimeSpan implements PartOfProjectClass, PercentDoneMixinClass {
    /**
     * This static configuration option allows you to control whether an empty parent task should be converted into a
     * leaf. Enable/disable it for a whole class:
     * ```javascript
     * TaskModel.convertEmptyParentToLeaf = false;
     * ```
     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object
     * with the following Boolean properties to customize the behaviour:
     * 
     * * `onLoad` - Apply the transformation on load to any parents without children (`children : []`)
     * * `onRemove` - Apply the transformation when all children have been removed from a parent
     * 
     * ```javascript
     * TaskModel.convertEmptyParentToLeaf = {
     *     onLoad   : false,
     *     onRemove : true
     * }
     * ```
     */
    static convertEmptyParentToLeaf: boolean|ConvertEmptyParentToLeafOptions
    /**
     * Returns all dependencies of this task (both incoming and outgoing)
     */
    allDependencies: DependencyModel[]
    /**
     * A set of resources assigned to this task
     */
    readonly assigned: Set<any>
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * An array of the assignments, related to this task
     */
    readonly assignments: AssignmentModel[]
    /**
     * The getter will yield a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a> of <a href="#Gantt/model/Baseline">Baseline</a>s.
     * When constructing a task the baselines will be constructed from an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline">Baseline</a> data objects.
     * When serializing, it will yield an array of <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/Baseline">Baseline</a> data objects.
     */
    baselines: Partial<BaselineConfig>[]|Store
    /**
     * The calendar, assigned to the task. Allows you to set the time when task can be performed.
     */
    calendar: CalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field
     * for leaf tasks.
     * Note, if the task store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|TaskModel[]|Partial<TaskModelConfig>[]
    /**
     * An encapsulation of the CSS classes to be added to the rendered event element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string
    /**
     * Field defining the constraint boundary date or `null` if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-constraintType">constraintType</a> is `null`.
     */
    constraintDate: string|Date|null
    /**
     * Field storing the task constraint alias or `null` if not constraint set.
     * Valid values are:
     * 
     * * &quot;finishnoearlierthan&quot;
     * * &quot;finishnolaterthan&quot;
     * * &quot;mustfinishon&quot;
     * * &quot;muststarton&quot;
     * * &quot;startnoearlierthan&quot;
     * * &quot;startnolaterthan&quot;
     * 
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * A calculated field indicating if the task is <em>critical</em>.
     * A task considered <em>critical</em> if its delaying causes the project delay.
     * The field value is calculated based on <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack">totalSlack</a> field value.
     * ```javascript
     * if (task.critical) {
     *     Toast.show(`The ${task.name} is critical!`);
     * }
     * ```
     */
    readonly critical: boolean
    /**
     * A deadline date for this task. Does not affect scheduling logic.
     * Note that the field always returns a `Date`.
     */
    deadlineDate: string|Date
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * The scheduling direction of this event. The `Forward` direction corresponds to the as-soon-as-possible scheduling (ASAP),
     * `Backward` - to as-late-as-possible (ALAP). The ASAP tasks &quot;sticks&quot; to the project's start date,
     * and ALAP tasks - to the project's end date.
     * If not specified (which is the default), direction is inherited from the parent task (and from the project for top-level tasks).
     * By default, the project model has forward scheduling mode.
     * <strong>Note</strong> The ALAP-scheduled task in the ASAP-scheduled project will turn all of its successors into ALAP-scheduled tasks,
     * even if their scheduling direction is specified explicitly by the user as ASAP. We can say that ALAP-scheduling
     * is propagated down through the successors chain. This propagation, however, will stop in the following cases:
     * 
     * * If a successor is manually scheduled
     * * If a successor has a &quot;Must start/finish on&quot; constraint
     * * If a dependency to successor is inactive
     * 
     * Similarly, the ASAP-scheduled task in the ALAP-scheduled project will turn all of its predecessors into ASAP-scheduled tasks
     * (also regardless of the user-provided value).
     * When such propagation is in action, the value of this field is ignored and the UI will disable controls for it.
     * To determine the actual scheduling direction of the task (which might be different from the user-provided value),
     * one can use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effectiveDirection">effectiveDirection</a> field.
     * <strong>Note</strong> For the purposes of compatibility with MS Project and to ease the migration process for users,
     * by default, scheduling direction can be set using the &quot;Constraint type&quot; field on the &quot;Advanced&quot;
     * tab of the task editor. The forward scheduling is specified in it as &quot;As soon as possible&quot; option and backward -
     * &quot;As late as possible&quot;. One can also disable the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-includeAsapAlapAsConstraints">includeAsapAlapAsConstraints</a>
     * config to render a separate &quot;Scheduling direction&quot; field.
     */
    direction: 'Forward'|'Backward'
    /**
     * Specify false to prevent the event from being dragged (if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskDrag">TaskDrag</a> feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the task duration (the number of units).
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    duration: number
    /**
     * The unit part of the task duration, defaults to &quot;day&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-setDuration">setDuration</a> call.
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A calculated field storing the <em>early end date</em> of the task.
     * The <em>early end date</em> is the earliest possible date the task can finish.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early end date matches the
     * project start date plus the task duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    readonly earlyEndDate: Date
    /**
     * A calculated field storing the <em>early start date</em> of the task.
     * The <em>early start date</em> is the earliest possible date the task can start.
     * This value is calculated based on the earliest dates of the task predecessors and the task own
     * constraints. If the task has no predecessors nor other constraints, its early start date matches the
     * project start date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    readonly earlyStartDate: Date
    /**
     * The effective calendar used by the task.
     * Returns the task own <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar">calendar</a> if provided or the project <a href="#Gantt/model/ProjectModel#field-calendar">calendar</a>.
     */
    readonly effectiveCalendar: CalendarModel
    /**
     * The calculated effective scheduling direction of this event. See the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-direction">direction</a> field for details.
     */
    effectiveDirection: EffectiveDirection
    /**
     * The numeric part of the task effort (the number of units). The effort of the &quot;parent&quot; tasks will be automatically set to the sum
     * of efforts of their &quot;child&quot; tasks
     * UI fields representing this data field are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    effort: number
    /**
     * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.
     * If it is `true`, then <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort</a> is kept intact, and duration is updated. If it is `false` -
     * vice-versa.
     */
    effortDriven: boolean
    /**
     * The unit part of the task's effort, defaults to &quot;h&quot; (hours). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-setEffort">setEffort</a> call.
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * End date of the task in ISO 8601 format
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Changes task's background color. Named colors are applied as a `b-sch-color-{color}` (for example
     * `b-sch-color-red`) CSS class to the task's bar. Colors specified as hex, `rgb()` etc. are applied as
     * `style.color` to the bar.
     * If no color is specified, any color defined in Gantt's <a href="https://bryntum.com/products/gantt/docs/api/Gantt/view/GanttBase#config-eventColor">eventColor</a>
     * config will apply instead.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     * Using named colors:
     * ```javascript
     * const gantt = new Gantt({
     *     project {
     *         tasksData : [
     *             { id : 1, name : 'Important task', eventColor : 'red' }
     *         ]
     *     }
     * });
     * ```
     * Will result in:
     * ```html
     * &lt;div class=&quot;b-gantt-task-wrap b-sch-color-red&quot;>
     * ```
     * Using non-named colors:
     * ```javascript
     * const gantt = new Gantt({
     *     project {
     *         tasksData : [
     *             { id : 1, name : 'Important task', eventColor : '#ff0000' }
     *         ]
     *     }
     * });
     * ```
     * Will result in:
     * ```html
     * &lt;div class=&quot;b-gantt-task-wrap&quot; style=&quot;color: #ff0000&quot;>
     * ```
     */
    eventColor: EventColor
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * The event first segment or null if the event is not segmented.
     */
    firstSegment: EventSegmentModel
    /**
     * Property which encapsulates the effort's magnitude and units.
     * UI fields representing this property are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    fullEffort: Duration
    /**
     * CSS class specifying an icon to apply to the task row
     */
    iconCls: string
    /**
     * Unique identifier of task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the task.
     * By default the field value is `false` resulting in that the task performs only when
     * its own <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-calendar">calendar</a> and some of the assigned
     * resource calendars allow that.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * A `Set&lt;Gantt.model.DependencyModel&gt;` of the incoming dependencies for this task
     */
    readonly incomingDeps: Set<any>
    /**
     * Indicates if the task is complete (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Indicates if the task is in progress (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Indicates if the task is started (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero).
     */
    isStarted: boolean
    /**
     * The event last segment or null if the event is not segmented.
     */
    lastSegment: EventSegmentModel
    /**
     * A calculated field storing the <em>late end date</em> of the task.
     * The <em>late end date</em> is the latest possible date the task can finish.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late end date matches the project end date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    readonly lateEndDate: Date
    /**
     * A calculated field storing the <em>late start date</em> of the task.
     * The <em>late start date</em> is the latest possible date the task can start.
     * This value is calculated based on the latest dates of the task successors and the task own constraints.
     * If the task has no successors nor other constraints, its late start date matches the project end date
     * minus the task duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    readonly lateStartDate: Date
    /**
     * When set to `true`, the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-startDate">startDate</a> of the task will not be changed by any of its incoming
     * dependencies or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Name of the task
     */
    name: string
    /**
     * A freetext note about the task.
     */
    note: string
    /**
     * A `Set&lt;Gantt.model.DependencyModel&gt;` of the outgoing dependencies for this task
     */
    readonly outgoingDeps: Set<any>
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Returns all predecessor tasks of a task
     */
    predecessorTasks: TaskModel[]
    /**
     * Returns all predecessor dependencies of this task
     */
    readonly predecessors: DependencyModel[]
    /**
     * Returns count of all sibling nodes (including their children).
     */
    previousSiblingsTotalCount: number
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify false to prevent the task from being resized (if <a href="https://bryntum.com/products/gantt/docs/api/Gantt/feature/TaskResize">TaskResize</a> feature is
     * used). You can also specify 'start' or 'end' to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: ResourceModel[]
    /**
     * Set this to true to roll up a task to its closest parent
     */
    rollup: boolean
    /**
     * This field defines the scheduling mode for the task. Based on this field some fields of the task
     * will be &quot;fixed&quot; (should be provided by the user) and some - computed.
     * Possible values are:
     * 
     * * 
     * `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on
     * information about its start/end dates, task own calendar (project calendar if there's no one) and
     * calendars of the assigned resources.
     * 
     * * 
     * `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed
     * dynamically, based on the assigned resources information. Typical example of such task is - meeting.
     * Meetings typically have pre-defined start and end dates and the more people are participating in the
     * meeting, the more effort is spent on the task. When duration of such task increases, its effort is
     * increased too (and vice-versa). Note: fixed start and end dates here doesn't mean that a user can't
     * update them via GUI, the only field which won't be editable in GUI is the
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort field</a>, it will be calculated according to duration and resources assigned to
     * the task.
     * 
     * * 
     * `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be
     * assigned to this task, the less the duration will be. The typical example will be a &quot;paint the walls&quot;
     * task - several painters will complete it faster.
     * 
     * * 
     * `FixedUnits` mode means, that the assignment level of all assigned resources will be kept as provided
     * by the user, and either <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort</a> or duration of the task is recalculated, based on the
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effortDriven">effortDriven</a> flag.
     * 
     * 
     */
    schedulingMode: 'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'
    /**
     * Segments of the task that appear when the task gets <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-splitToSegments">splitToSegments</a>.
     */
    segments: EventSegmentModel[]
    /**
     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the
     * total dataset, regardless of its nesting level and collapse/expand state of any parent tasks. The root node has a
     * sequential number equal to 0.
     * For example, in the following tree data sample sequential numbers are specified in the comments:
     * ```javascript
     * root : {
     *     children : [
     *         {   // 1
     *             leaf : true
     *         },
     *         {       // 2
     *             children : [
     *                 {   // 3
     *                     children : [
     *                         {   // 4
     *                             leaf : true
     *                         },
     *                         {   // 5
     *                             leaf : true
     *                         }
     *                     ]
     *                 }]
     *         },
     *         {   // 6
     *             leaf : true
     *         }
     *     ]
     * }
     * ```
     * If we collapse parent tasks, sequential number of collapsed tasks won't change.
     */
    sequenceNumber: number
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * A calculated field storing unit for the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-totalSlack">totalSlack</a> value.
     */
    slackUnit: string
    /**
     * Start date of the task in ISO 8601 format
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * Returns all successor tasks of a task
     */
    readonly successorTasks: TaskModel[]
    /**
     * Returns all successor dependencies of this task
     */
    readonly successors: DependencyModel[]
    /**
     * CSS class specifying an icon to apply to the task bar
     */
    taskIconCls: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * A calculated field storing the <em>total slack</em> (or <em>total float</em>) of the task.
     * The <em>total slack</em> is the amount of working time the task can be delayed without causing a delay
     * to the project end.
     * The value is expressed in <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-slackUnit">slackUnit</a> units.
     * ```javascript
     * // let output slack info to the console
     * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)
     * ```
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-isEditable">isEditable</a> for details.
     */
    readonly totalSlack: number
    /**
     * This field is automatically set to `true` when the task is &quot;unscheduled&quot; - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such task is not rendered,
     * and does not affect the schedule of its successors.
     * To schedule the task back, enter one of the missing values, so that there's enough information
     * to calculate start date, end date and duration.
     * Note, that setting this field manually does nothing. This field should be persisted, but not updated
     * manually.
     */
    readonly unscheduled: boolean
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs">WBS</a> for this task record. This field is automatically calculated and
     * maintained by the store. This calculation can be refreshed by calling <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#function-refreshWbs">refreshWbs</a>.
     * To get string representation of the WBS value (e.g. '2.1.3'), use <a href="https://bryntum.com/products/gantt/docs/api/Gantt/data/Wbs#property-value">value</a>
     * property.
     */
    readonly wbsValue: Wbs|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TaskModelConfig>);
    /**
     * This method assigns a resource to this task.
     * Will cause the schedule to be updated - returns a `Promise`
     */
    assign(resource: ResourceModel, units?: number): Promise<void>;
    /**
     * Propagates changes to the dependent tasks. For example:
     * ```javascript
     * // double a task duration
     * task.duration *= 2;
     * // call commitAsync() to do further recalculations caused by the duration change
     * task.commitAsync().then(() => console.log('Schedule updated'));
     * ```
     */
    commitAsync(): Promise<void>;
    /**
     * Converts this task to a milestone (start date will match the end date).
     */
    convertToMilestone(): Promise<void>;
    /**
     * Converts the milestone task to a regular task with a duration of 1 (keeping current <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-durationUnit">durationUnit</a>).
     */
    convertToRegular(): Promise<void>;
    /**
     * If given resource is assigned to this task, returns a <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/AssignmentModel">AssignmentModel</a> record.
     * Otherwise returns `null`
     */
    getAssignmentFor(resource: ResourceModel): AssignmentModel|null;
    /**
     * Returns the task calendar.
     */
    getCalendar(): CalendarModel;
    /**
     * Returns the event <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-ignoreResourceCalendar">ignoreResourceCalendar</a> field value.
     */
    getIgnoreResourceCalendar(): boolean;
    /**
     * Defines if the given task field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default, the method defines:
     * 
     * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-earlyStartDate">earlyStartDate</a>, <a href="#Gantt/model/TaskModel#field-earlyEndDate">earlyEndDate</a>, <a href="#Gantt/model/TaskModel#field-lateStartDate">lateStartDate</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-lateEndDate">lateEndDate</a>, <a href="#Gantt/model/TaskModel#field-totalSlack">totalSlack</a> as not editable;
     * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-effort">effort</a>, <a href="#Gantt/model/TaskModel#property-fullEffort">fullEffort</a>, <a href="#Gantt/model/TaskModel#field-percentDone">percentDone</a> as not editable for summary
     * tasks;
     * * <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-endDate">endDate</a>, <a href="#Gantt/model/TaskModel#field-duration">duration</a> and <a href="#Gantt/model/TaskModel#field-fullDuration">fullDuration</a> fields
     * as not editable for summary tasks except the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-manuallyScheduled">manually scheduled</a> ones.
     * 
     */
    isEditable(fieldName: string): boolean;
    /**
     * Merges the task segments.
     * The method merges two provided task segments (and all the segment between them if any).
     */
    mergeSegments(segment1?: EventSegmentModel, segment2?: EventSegmentModel): Promise<any>;
    /**
     * Refreshes the <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-wbsValue">wbsValue</a> of this record and its children. This is rarely needed but may be required
     * after a complex series of filtering, inserting, or removing nodes. In particular, removing nodes does create a
     * gap in `wbsValue` values that may be undesirable.
     */
    refreshWbs(options?: { deep?: boolean, silent?: boolean, useOrderedTree?: boolean }, index?: number): void;
    /**
     * Applies the start/end dates from the task to the corresponding baseline.
     * ```javascript
     * const task = new TaskModel({
     *      name: 'New task',
     *      startDate: '2019-01-14',
     *      endDate: '2019-01-17',
     *      duration: 3,
     *      baselines: [
     *          // Baseline version 1
     *          {
     *              startDate: '2019-01-13',
     *              endDate: '2019-01-16'
     *          },
     *          // Baseline version 2
     *          {
     *              startDate: '2019-01-14',
     *              endDate: '2019-01-17'
     *          },
     *          // Baseline version 3
     *          {
     *              startDate: '2019-01-15',
     *              endDate: '2019-01-18'
     *          }
     *      ]
     * });
     * 
     * // Apply the task's start/end dates to the baseline version 3
     * task.setBaseline(3);
     * ```
     */
    setBaseline(version: number): void;
    /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     */
    setCalendar(calendar: CalendarModel): Promise<void>;
    /**
     * Sets the constraint type and (optionally) constraining date to the task.
     */
    setConstraint(constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null, constraintDate?: Date): Promise<void>;
    /**
     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     */
    setDuration(duration: number, unit?: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): Promise<void>;
    /**
     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`
     */
    setEffort(effort: number, unit?: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): Promise<void>;
    /**
     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`
     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.
     */
    setEndDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Sets the task <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-ignoreResourceCalendar">ignoreResourceCalendar</a> field value and triggers rescheduling.
     */
    setIgnoreResourceCalendar(ignore: boolean): Promise<void>;
    /**
     * Either activates or deactivates the task depending on the passed value.
     * Will cause the schedule to be updated - returns a `Promise`
     */
    setInactive(inactive: boolean): Promise<void>;
    /**
     * Sets <a href="https://bryntum.com/products/gantt/docs/api/Gantt/model/TaskModel#field-segments">segments</a> field value.
     */
    setSegments(segments: EventSegmentModel[]): Promise<any>;
    /**
     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`
     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.
     */
    setStartDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Splits the task to segments.
     */
    splitToSegments(from: Date, lag?: number, lagUnit?: string): Promise<any>;
    /**
     * This method unassigns a resource from this task.
     * Will cause the schedule to be updated - returns a `Promise`
     */
    unassign(resource: ResourceModel): Promise<void>;
}

type GridRowModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a <a href="https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn">TreeColumn</a>.
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Used by the default implementation of <a href="https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight">getRowHeight</a> to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the <a href="https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href">href</a> field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * Model extended with some fields related to grid rendering. Used as default model type in the grids store if nothing
 * else is specified.
 * Using this model is optional. If you use a custom model instead and need the functionality of any of the fields
 * below, you just have to remember to add fields with the same name to your model.
 */
export class GridRowModel extends Model {
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * A link to use for this record when rendered into a <a href="https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn">TreeColumn</a>.
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Used by the default implementation of <a href="https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight">getRowHeight</a> to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the <a href="https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href">href</a> field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<GridRowModelConfig>, store?: Store, meta?: object);
}

type AbstractCrudManagerConfig = {
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.
     * Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided as in instance, using its `storeId` or as an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManager#typedef-CrudManagerStoreDescriptor">CrudManagerStoreDescriptor</a>
     * object.
     */
    stores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

/**
 * This is an abstract class serving as the base for the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/CrudManager">CrudManager</a> class.
 * It implements basic mechanisms to organize batch communication with a server.
 * Yet it does not contain methods related to <em>data transfer</em> nor <em>encoding</em>.
 * These methods are to be provided in sub-classes by consuming the appropriate mixins.
 * For example, this is how the class can be used to implement an JSON encoding system:
 * <pre class="prettyprint source lan...
 */
export abstract class AbstractCrudManager extends Base implements AbstractCrudManagerMixinClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Get or set data of CrudManager stores. The returned data is identical to what
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManager#function-toJSON">toJSON</a> returns:
     * ```javascript
     * 
     * const data = scheduler.crudManager.inlineData;
     * 
     * // data:
     * {
     *     eventsData : [...],
     *     resourcesData : [...],
     *     dependenciesData : [...],
     *     assignmentsData : [...],
     *     timeRangesData : [...],
     *     resourceTimeRangesData : [...],
     *     ... other stores data
     * }
     * 
     * 
     * // Plug it back in later
     * scheduler.crudManager.inlineData = data;
     * ```
     */
    inlineData: object
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isLoading: boolean
    /**
     * Get or set data of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManager#property-crudStores">crudStores</a> as a JSON string.
     * Get a JSON string:
     * ```javascript
     * 
     * const jsonString = scheduler.crudManager.json;
     * 
     * // returned jsonString:
     * '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * 
     * // object representation of the returned jsonString:
     * {
     *     resourcesData    : [...],
     *     eventsData       : [...],
     *     assignmentsData  : [...],
     *     dependenciesData : [...],
     *     timeRangesData   : [...],
     *     // data from other stores
     * }
     * ```
     * Set a JSON string (to populate the CrudManager stores):
     * ```javascript
     * scheduler.crudManager.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     */
    json: string
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated after each
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly revision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    stores: CrudManagerStoreDescriptor[]
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels request to the server.
     */
    abstract cancelRequest(promise: Promise<any>, reject: Function): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes response from the server.
     */
    abstract decode(response: string): object;
    /**
     * Encodes request to the server.
     */
    abstract encode(request: object): string;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends request to the server.
     */
    abstract sendRequest(request: { type: 'load'|'sync', data: string, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.
     * Used by JSON.stringify to correctly convert this CrudManager to json.
     * The returned data is identical to what <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManager#property-inlineData">inlineData</a> contains.
     * ```javascript
     * 
     * const json = scheduler.crudManager.toJSON();
     * 
     * // json:
     * {
     *     eventsData : [...],
     *     resourcesData : [...],
     *     dependenciesData : [...],
     *     assignmentsData : [...],
     *     timeRangesData : [...],
     *     resourceTimeRangesData : [...],
     *     // ... other stores data
     * }
     * ```
     * Output can be consumed by `inlineData`.
     * ```javascript
     * const json = scheduler.crudManager.toJSON();
     * 
     * // Plug it back in later
     * scheduler.crudManager.inlineData = json;
     * ```
     */
    toJSON(): object;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

type AbstractCrudManagerMixinClassConfig = {
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

export abstract class AbstractCrudManagerMixinClass implements DelayableClass, EventsClass, AbstractCrudManagerValidationClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AbstractCrudManagerMixinClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels request to the server.
     */
    abstract cancelRequest(promise: Promise<any>, reject: Function): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes response from the server.
     */
    abstract decode(response: string): object;
    /**
     * Encodes request to the server.
     */
    abstract encode(request: object): string;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends request to the server.
     */
    abstract sendRequest(request: { type: 'load'|'sync', data: string, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const AbstractCrudManagerMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AbstractCrudManagerMixinClass>

type JsonEncoderClassConfig = {
    /**
     * Configuration of the JSON encoder used by the <em>Crud Manager</em>.
     */
    encoder: { requestData?: object }
}

export class JsonEncoderClass {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<JsonEncoderClassConfig>);
    /**
     * Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.
     */
    encode(requestData: object): string;
}

export const JsonEncoder : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & JsonEncoderClass>

type AbstractCrudManagerValidationClassConfig = {
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
}

export class AbstractCrudManagerValidationClass {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AbstractCrudManagerValidationClassConfig>);
}

export const AbstractCrudManagerValidation : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AbstractCrudManagerValidationClass>

type AjaxTransportClassConfig = {
    /**
     * Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.
     * ```javascript
     * transport : {
     *     load : {
     *         url       : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName : 'data',
     *         // pass extra HTTP request parameter
     *         params    : {
     *             foo : 'bar'
     *         }
     *     },
     *     sync : {
     *         url     : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers : {
     *             'Content-Type' : 'application/json'
     *         }
     *     }
     * }
     * ```
     * Since the class uses Fetch API you can use
     * any its <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request interface</a> options:
     * ```javascript
     * transport : {
     *     load : {
     *         url         : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName   : 'data',
     *         // pass few Fetch API options
     *         method      : 'GET',
     *         credentials : 'include',
     *         cache       : 'no-cache'
     *     },
     *     sync : {
     *         url         : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers     : {
     *             'Content-Type' : 'application/json'
     *         },
     *         credentials : 'include'
     *     }
     * }
     * ```
     * An object where you can set the following possible properties:
     */
    transport: { load?: object, sync?: object }
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
}

export abstract class AjaxTransportClass {
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AjaxTransportClassConfig>);
    /**
     * Cancels a sent request.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Sends a <em>Crud Manager</em> request to the server.
     */
    sendRequest(request: { type: 'load'|'sync', url: string, data: string, params: object, success: Function, failure: Function, thisObj: object }): Promise<any>;
}

export const AjaxTransport : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AjaxTransportClass>

type SchedulerAssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store representing a collection of assignments between events in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a> and resources
 * in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">ResourceStore</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/AssignmentModel">AssignmentModel</a>.
 * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,
 * ResourceStore and DependencyStore). The project also han...
 */
export class SchedulerAssignmentStore extends AjaxStore implements AssignmentStoreMixinClass, SchedulerPartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerAssignmentStore
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId }];
     * // assignmentStore.first.event is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId  }];
     * await assignmentStore.project.commitAsync();
     * // assignmentStore.first.event is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerDependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: SchedulerEventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerAssignmentStoreConfig>);
    /**
     * Add assignments to the store.
     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * // assignment.event is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * await assignmentStore.project.commitAsync();
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): SchedulerAssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<SchedulerAssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     */
    assignEventToResource(event: TimeSpan, resources: SchedulerResourceModel|SchedulerResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     */
    getAssignmentForEventAndResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: TimeSpan): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel): SchedulerAssignmentModel[];
    /**
     * Returns all events assigned to a resource
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel): SchedulerResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     */
    mapAssignmentsForEvent(event: SchedulerEventModel, fn?: Function, filterFn?: Function): SchedulerEventModel[]|any[];
    /**
     * Maps over resource assignments.
     */
    mapAssignmentsForResource(resource: SchedulerResourceModel|number|string, fn?: Function, filterFn?: Function): SchedulerResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: SchedulerResourceModel|string|number): SchedulerAssignmentModel|SchedulerAssignmentModel[];
}

type SchedulerDependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store representing a collection of dependencies between events in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyModel">DependencyModel</a>.
 * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,
 * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records
 * for the records in the ...
 */
export class SchedulerDependencyStore extends AjaxStore implements SchedulerPartOfProjectClass, DependencyStoreMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerAssignmentStore
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * // dependencyStore.first.fromEvent is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * await dependencyStore.project.commitAsync();
     * // dependencyStore.first.fromEvent is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerDependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: SchedulerEventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerDependencyStoreConfig>);
    /**
     * Add dependencies to the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * // dependency.fromEvent is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * await dependencyStore.project.commitAsync();
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): SchedulerDependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<SchedulerDependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     */
    getEventDependencies(event: SchedulerEventModel): SchedulerDependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     */
    getEventsLinkingDependency(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate">isValidDependencyToCreate</a>.
     */
    isValidDependency(dependencyOrFromId: SchedulerDependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

type SchedulerEventStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records
     */
    modelClass: typeof EventModel
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * 
     * * presence of an assignment store (i.e. multi-assignment)
     * * presence of `resourceId` in the event store data (i.e. single assignment mode)
     * 
     */
    singleAssignment: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store holding all the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">events</a> to be rendered into a <a href="#Scheduler/view/Scheduler">Scheduler</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
 * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,
 * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in
 * the st...
 */
export class SchedulerEventStore extends AjaxStore implements SchedulerPartOfProjectClass, EventStoreMixinClass, RecurringEventsMixinClass, GetEventsMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerAssignmentStore
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * // eventStore.first.endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * await eventStore.project.commitAsync();
     * // eventStore.first.endDate is calculated
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    data: Partial<EventModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerDependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: SchedulerEventStore
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerEventStoreConfig>);
    /**
     * Add events to the store.
     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * // endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * await eventStore.project.commitAsync();
     * // endDate is calculated
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    add(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): SchedulerEventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    addAsync(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<SchedulerEventModel[]>;
    /**
     * Appends a new record to the store
     */
    append(record: SchedulerEventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     */
    assignEventToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * 
     * * event : the event record
     * * startDate : the event start date
     * * endDate : the event end date
     * 
     * Returning false cancels the iteration.
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: SchedulerEventModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * Example:
     * ```javascript
     *  eventCounts = eventStore.getEventCounts({
     *      startDate : scheduler.timeAxis.startDate,
     *      endDate   : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEventCounts(options: { startDate: Date, endDate?: Date }): void;
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * By default, for any date, this includes any event which <em>intersects</em> that date.
     * To only include events that are fully contained <em>within</em> the date range, pass the `allowPartial`
     * option as `false`.
     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If
     * that is not required, pass the `includeOccurrences` option as `false`. <strong>Note that if `includeOccurrences` is
     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs
     * to be generated and returned.</strong>
     * Example:
     * ```javascript
     *  visibleEvents = eventStore.getEvents({
     *      resourceRecord : myResource,
     *      startDate      : scheduler.timeAxis.startDate,
     *      endDate        : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEvents(options: { date?: Date, startDate: Date, endDate?: Date, resourceRecord?: SchedulerResourceModel, filter?: Function, ignoreFilters?: boolean, includeOccurrences?: boolean, allowPartial?: boolean, startOnly?: boolean, onlyAssigned?: boolean, dateMap?: boolean|Map<any, any> }): SchedulerEventModel[]|Map<any, any>;
    /**
     * Returns all events assigned to a resource.
     * <em>NOTE:</em> this does not include occurrences of recurring events. Use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> API to include occurrences of recurring events.
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): SchedulerEventModel[];
    /**
     * Returns all the recurring events.
     * **An alias for ** <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/RecurringTimeSpansMixin#function-getRecurringTimeSpans">getRecurringTimeSpans</a> method.
     */
    getRecurringEvents(): SchedulerEventModel[];
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel|string|number): SchedulerResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     */
    isEventPersistable(event: SchedulerEventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassignEventFromResourceToResource(event: SchedulerEventModel, oldResource: SchedulerResourceModel|SchedulerResourceModel[], newResource: SchedulerResourceModel|SchedulerResourceModel[]): void;
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: SchedulerEventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     */
    unassignEventFromResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): void;
}

type SchedulerResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store holding all the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">resources</a> to be rendered into a
 * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler">Scheduler</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">ResourceModel</a>.
 * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,
 * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records...
 */
export class SchedulerResourceStore extends AjaxStore implements SchedulerPartOfProjectClass, ResourceStoreMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerAssignmentStore
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * resourceStore.data = [{ id }];
     * // resourceStore.first.events is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * resourceStore.data = [{ id }];
     * await resourceStore.project.commitAsync();
     * // resourceStore.first.events is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerDependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: SchedulerEventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerResourceStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerResourceStoreConfig>);
    /**
     * Add resources to the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * // resource.events is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * await resourceStore.project.commitAsync();
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): SchedulerResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<SchedulerResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     */
    getAvailableResources(startDate: Date, endDate: Date): SchedulerResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

type ResourceTimeRangeStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * This store should be linked to a ResourceStore to link the time ranges to resources
     */
    resourceStore: SchedulerResourceStore
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing a collection of resource time ranges.
 * Contains a collection of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a> records.
 * The class is used by the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/ResourceTimeRanges">ResourceTimeRanges</a> feature.
 * <h2>Recurring ranges support</h2>
 * By default, the class doesn't support recurrence. In order to add its support
 * please use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/RecurringTimeSpansMixin">RecurringTimeSpansMixin</a> mixin
 * (t...
 */
export class ResourceTimeRangeStore extends AjaxStore {
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ResourceTimeRangeStoreConfig>);
    /**
     * Get resource time ranges intersecting the specified date range for a resource.
     * The result is sorted by `startDate`.
     */
    getRanges(options: { resourceRecord: SchedulerResourceModel, startDate: Date, endDate: Date }): ResourceTimeRangeModel[];
}

export class AssignmentStoreMixinClass {
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId }];
     * // assignmentStore.first.event is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId  }];
     * await assignmentStore.project.commitAsync();
     * // assignmentStore.first.event is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Add assignments to the store.
     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * // assignment.event is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * await assignmentStore.project.commitAsync();
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): SchedulerAssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<SchedulerAssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     */
    assignEventToResource(event: TimeSpan, resources: SchedulerResourceModel|SchedulerResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     */
    getAssignmentForEventAndResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: TimeSpan): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel): SchedulerAssignmentModel[];
    /**
     * Returns all events assigned to a resource
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel): SchedulerResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     */
    mapAssignmentsForEvent(event: SchedulerEventModel, fn?: Function, filterFn?: Function): SchedulerEventModel[]|any[];
    /**
     * Maps over resource assignments.
     */
    mapAssignmentsForResource(resource: SchedulerResourceModel|number|string, fn?: Function, filterFn?: Function): SchedulerResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: SchedulerResourceModel|string|number): SchedulerAssignmentModel|SchedulerAssignmentModel[];
}

export const AssignmentStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AssignmentStoreMixinClass>

export class DependencyStoreMixinClass {
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * // dependencyStore.first.fromEvent is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * await dependencyStore.project.commitAsync();
     * // dependencyStore.first.fromEvent is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Add dependencies to the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * // dependency.fromEvent is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * await dependencyStore.project.commitAsync();
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): SchedulerDependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<SchedulerDependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     */
    getEventDependencies(event: SchedulerEventModel): SchedulerDependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     */
    getEventsLinkingDependency(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate">isValidDependencyToCreate</a>.
     */
    isValidDependency(dependencyOrFromId: SchedulerDependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

export const DependencyStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & DependencyStoreMixinClass>

type EventStoreMixinClassConfig = {
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * 
     * * presence of an assignment store (i.e. multi-assignment)
     * * presence of `resourceId` in the event store data (i.e. single assignment mode)
     * 
     */
    singleAssignment: boolean
}

export class EventStoreMixinClass {
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * // eventStore.first.endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * await eventStore.project.commitAsync();
     * // eventStore.first.endDate is calculated
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    data: Partial<EventModelConfig>[]
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventStoreMixinClassConfig>);
    /**
     * Add events to the store.
     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * // endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * await eventStore.project.commitAsync();
     * // endDate is calculated
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    add(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): SchedulerEventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    addAsync(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<SchedulerEventModel[]>;
    /**
     * Appends a new record to the store
     */
    append(record: SchedulerEventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     */
    assignEventToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * 
     * * event : the event record
     * * startDate : the event start date
     * * endDate : the event end date
     * 
     * Returning false cancels the iteration.
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: SchedulerEventModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * Example:
     * ```javascript
     *  eventCounts = eventStore.getEventCounts({
     *      startDate : scheduler.timeAxis.startDate,
     *      endDate   : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEventCounts(options: { startDate: Date, endDate?: Date }): void;
    /**
     * Returns all events assigned to a resource.
     * <em>NOTE:</em> this does not include occurrences of recurring events. Use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> API to include occurrences of recurring events.
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): SchedulerEventModel[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel|string|number): SchedulerResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     */
    isEventPersistable(event: SchedulerEventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassignEventFromResourceToResource(event: SchedulerEventModel, oldResource: SchedulerResourceModel|SchedulerResourceModel[], newResource: SchedulerResourceModel|SchedulerResourceModel[]): void;
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: SchedulerEventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     */
    unassignEventFromResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): void;
}

export const EventStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventStoreMixinClass>

type GetEventsMixinClassConfig = {
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
}

export class GetEventsMixinClass {
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * By default, for any date, this includes any event which <em>intersects</em> that date.
     * To only include events that are fully contained <em>within</em> the date range, pass the `allowPartial`
     * option as `false`.
     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If
     * that is not required, pass the `includeOccurrences` option as `false`. <strong>Note that if `includeOccurrences` is
     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs
     * to be generated and returned.</strong>
     * Example:
     * ```javascript
     *  visibleEvents = eventStore.getEvents({
     *      resourceRecord : myResource,
     *      startDate      : scheduler.timeAxis.startDate,
     *      endDate        : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEvents(options: { date?: Date, startDate: Date, endDate?: Date, resourceRecord?: SchedulerResourceModel, filter?: Function, ignoreFilters?: boolean, includeOccurrences?: boolean, allowPartial?: boolean, startOnly?: boolean, onlyAssigned?: boolean, dateMap?: boolean|Map<any, any> }): SchedulerEventModel[]|Map<any, any>;
}

export const GetEventsMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & GetEventsMixinClass>

export class SchedulerPartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerAssignmentStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerDependencyStore
    /**
     * Returns the event store of the project this entity belongs to.
     */
    readonly eventStore: SchedulerEventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerResourceStore
}

export const SchedulerPartOfProject : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & SchedulerPartOfProjectClass>

type SchedulerProjectCrudManagerClassConfig = {
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Configuration of the JSON encoder used by the <em>Crud Manager</em>.
     */
    encoder: { requestData?: object }
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.
     * ```javascript
     * transport : {
     *     load : {
     *         url       : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName : 'data',
     *         // pass extra HTTP request parameter
     *         params    : {
     *             foo : 'bar'
     *         }
     *     },
     *     sync : {
     *         url     : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers : {
     *             'Content-Type' : 'application/json'
     *         }
     *     }
     * }
     * ```
     * Since the class uses Fetch API you can use
     * any its <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request interface</a> options:
     * ```javascript
     * transport : {
     *     load : {
     *         url         : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName   : 'data',
     *         // pass few Fetch API options
     *         method      : 'GET',
     *         credentials : 'include',
     *         cache       : 'no-cache'
     *     },
     *     sync : {
     *         url         : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers     : {
     *             'Content-Type' : 'application/json'
     *         },
     *         credentials : 'include'
     *     }
     * }
     * ```
     * An object where you can set the following possible properties:
     */
    transport: { load?: object, sync?: object }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

export class SchedulerProjectCrudManagerClass implements AbstractCrudManagerMixinClass, AjaxTransportClass, JsonEncoderClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProjectCrudManagerClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a <em>Crud Manager</em> request to the server.
     */
    sendRequest(request: { type: 'load'|'sync', url: string, data: string, params: object, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const SchedulerProjectCrudManager : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & SchedulerProjectCrudManagerClass>

export class RecurringEventsMixinClass extends RecurringTimeSpansMixinClass {
    /**
     * Returns all the recurring events.
     * **An alias for ** <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/RecurringTimeSpansMixin#function-getRecurringTimeSpans">getRecurringTimeSpans</a> method.
     */
    getRecurringEvents(): SchedulerEventModel[];
}

export const RecurringEventsMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & RecurringEventsMixinClass>

export class RecurringTimeSpansMixinClass {
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
}

export const RecurringTimeSpansMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & RecurringTimeSpansMixinClass>

export class ResourceStoreMixinClass {
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * resourceStore.data = [{ id }];
     * // resourceStore.first.events is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * resourceStore.data = [{ id }];
     * await resourceStore.project.commitAsync();
     * // resourceStore.first.events is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Add resources to the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * // resource.events is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * await resourceStore.project.commitAsync();
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): SchedulerResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<SchedulerResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     */
    getAvailableResources(startDate: Date, endDate: Date): SchedulerResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

export const ResourceStoreMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ResourceStoreMixinClass>

type SchedulerAssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|SchedulerEventModel
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|SchedulerResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
}

/**
 * This model represents a single assignment of a resource to an event in the scheduler, usually added to a
 * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/AssignmentStore">AssignmentStore</a>.
 * It is a subclass of the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> class. Please refer to the documentation for that class to become
 * familiar with the base interface of this class.
 * <h2>Fields and references</h2>
 * An Assignment has the following fields:
 * 
 * * `id` - The id of the assignment
 * * <cod...
 */
export class SchedulerAssignmentModel extends Model implements AssignmentModelMixinClass {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|SchedulerEventModel
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|SchedulerResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerAssignmentModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): SchedulerResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * assignment.set('resourceId', 2);
     * // assignment.resource is not yet resolved
     * 
     * await assignment.setAsync('resourceId', 2);
     * // assignment.resource is resolved
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

type DependencyBaseModelConfig = {
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-from">from</a> instead.
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;ms&quot; (milliseconds)
     * * &quot;s&quot; (seconds)
     * * &quot;m&quot; (minutes)
     * * &quot;h&quot; (hours)
     * * &quot;d&quot; (days)
     * * &quot;w&quot; (weeks)
     * * &quot;M&quot; (months)
     * * &quot;y&quot; (years)
     * 
     * This field is readonly after creation, to change `lagUnit` use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#function-setLag">setLag()</a>.
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-to">to</a> instead.
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static">Type</a>
     */
    type: number
}

/**
 * Base class used for both Scheduler and Gantt. Not intended to be used directly
 */
export class DependencyBaseModel extends Model {
    /**
     * An enumerable object, containing names for the dependency types integer constants.
     * 
     * * 0 StartToStart
     * * 1 StartToEnd
     * * 2 EndToStart
     * * 3 EndToEnd
     * 
     */
    static readonly Type: object
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-from">from</a> instead.
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:
     */
    fullLag: Duration
    /**
     * Alias to dependency type, but when set resets <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-fromSide">fromSide</a> &amp; <a href="#Scheduler/model/DependencyBaseModel#field-toSide">toSide</a> to null as well.
     */
    hardType: number
    /**
     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')
     */
    readonly isPersistable: boolean
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;ms&quot; (milliseconds)
     * * &quot;s&quot; (seconds)
     * * &quot;m&quot; (minutes)
     * * &quot;h&quot; (hours)
     * * &quot;d&quot; (days)
     * * &quot;w&quot; (weeks)
     * * &quot;M&quot; (months)
     * * &quot;y&quot; (years)
     * 
     * This field is readonly after creation, to change `lagUnit` use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#function-setLag">setLag()</a>.
     */
    readonly lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-to">to</a> instead.
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static">Type</a>
     */
    type: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<DependencyBaseModelConfig>, store?: Store, meta?: object);
    /**
     * Returns dependency hard type, see <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-hardType">hardType</a>.
     */
    getHardType(): number;
    /**
     * Applies given CSS class to dependency, the value doesn't persist
     */
    highlight(cls: string): void;
    /**
     * Checks if the given CSS class is applied to dependency.
     */
    isHighlightedWith(cls: string): boolean;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * *
     * ```javascript
     * dependency.set('from', 2);
     * // dependency.fromEvent is not yet up to date
     * 
     * await dependency.setAsync('from', 2);
     * // dependency.fromEvent is up to date
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Sets dependency <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-type">type</a> and resets <a href="#Scheduler/model/DependencyBaseModel#field-fromSide">fromSide</a> and <a href="#Scheduler/model/DependencyBaseModel#field-toSide">toSide</a> to null.
     */
    setHardType(type: number): void;
    /**
     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation
     */
    setLag(lag: number|string|object, lagUnit?: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'): void;
    /**
     * Removes given CSS class from dependency if applied, the value doesn't persist
     */
    unhighlight(cls: string): void;
}

type SchedulerDependencyModelConfig = {
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-from">from</a> instead.
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;ms&quot; (milliseconds)
     * * &quot;s&quot; (seconds)
     * * &quot;m&quot; (minutes)
     * * &quot;h&quot; (hours)
     * * &quot;d&quot; (days)
     * * &quot;w&quot; (weeks)
     * * &quot;M&quot; (months)
     * * &quot;y&quot; (years)
     * 
     * This field is readonly after creation, to change `lagUnit` use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#function-setLag">setLag()</a>.
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-to">to</a> instead.
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static">Type</a>
     */
    type: number
}

/**
 * This model represents a dependency between two events, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/DependencyStore">DependencyStore</a>.
 * It is a subclass of the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel">DependencyBaseModel</a> class, which in its turn subclasses
 * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Please refer to documentation of those classes to become familiar with the base interface of
 * this class.
 * <h2>Fields and references</h2>
 * A Dependency has a few predefined fields,...
 */
export class SchedulerDependencyModel extends DependencyBaseModel {
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerDependencyModelConfig>, store?: Store, meta?: object);
}

type SchedulerEventModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * The array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">resources</a> which are assigned to this event.
     */
    resources: string|number
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

/**
 * This class represent a single event in your schedule, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a>.
 * It is a subclass of the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a>, which is in turn subclass of <a href="#Core/data/Model">Model</a>.
 * Please refer to documentation of that class to become familiar with the base interface of the event.
 * <h2>Async date calculations</h2>
 * A record created from an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a> is n...
 */
export class SchedulerEventModel extends TimeSpan implements RecurringTimeSpanClass, EventModelMixinClass {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     * This is essentially used by the Calendar package to determine if an event should
     * go into the all day zone of a DayView.
     */
    readonly isInterDay: boolean
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * If this event is an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">occurrence</a> of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel">RecurrenceModel</a>
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     * Note that the field always returns a `Date`.
     * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its
     * duration (with reservation for other scheduling logic affecting the duration). If you want to change the
     * `startDate` and `duration`, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#function-setStartDate">setStartDate</a> instead (passing
     * `false` as the second argument).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerEventModelConfig>);
    /**
     * Assigns this event to the specified resource.
     * <em>Note:</em> The event must be part of an EventStore for this to work. If the EventStore uses single assignment
     * (loaded using resourceId) existing assignments will always be removed.
     */
    assign(resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): void;
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Does this recurring event have an exception on the passed date.
     */
    hasException(date: Date): boolean;
    /**
     * Returns true if this event is assigned to a certain resource.
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default, the method defines <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-endDate">endDate</a>, <a href="#Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and <a href="#Scheduler/model/mixin/EventModelMixin#field-fullDuration">fullDuration</a>
     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as
     * editable.
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Override of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>'s method. If an <a href="#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">isOccurrence</a>
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * eventRecord.set('duration', 4);
     * // eventRecord.endDate is not yet calculated
     * 
     * await eventRecord.setAsync('duration', 4);
     * // eventRecord.endDate is calculated
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
    /**
     * Shift the dates for the date range by the passed amount and unit
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     */
    unassign(resource?: SchedulerResourceModel|string|number): void;
}

type SchedulerProjectModelConfig = {
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#Scheduler/model/ProjectModel#property-assignmentStore">assignmentStore</a>
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/AssignmentStore">AssignmentStore</a> instance or a config object.
     */
    assignmentStore: SchedulerAssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/AssignmentStore">AssignmentStore</a>
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-assignmentStore">assignmentStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/AssignmentModel">AssignmentModels</a> or its configuration objects.
     */
    assignments: SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-assignmentStore">assignmentStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/AssignmentModel">AssignmentModels</a> or its configuration
     * objects.
     */
    assignmentsData: SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-dependencyStore">dependencyStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyModel">DependencyModels</a> or its configuration objects.
     */
    dependencies: SchedulerDependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-dependencyStore">dependencyStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyModel">DependencyModels</a> or its configuration
     * objects.
     */
    dependenciesData: SchedulerDependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#Scheduler/model/ProjectModel#property-dependencyStore">dependencyStore</a>
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/DependencyStore">DependencyStore</a> instance or a config object.
     */
    dependencyStore: SchedulerDependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/DependencyStore">DependencyStore</a>
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#Scheduler/model/ProjectModel#property-eventStore">eventStore</a>
     */
    eventModelClass: typeof EventModel
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a> instance or a config object.
     */
    eventStore: SchedulerEventStore|Partial<EventStoreConfig>
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a>
     */
    eventStoreClass: typeof EventStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-eventStore">eventStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModels</a> or its configuration objects.
     */
    events: SchedulerEventModel[]|Partial<EventModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-eventStore">eventStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModels</a> or its configuration objects.
     */
    eventsData: SchedulerEventModel[]|Partial<EventModelConfig>[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ```javascript
     * const project = new ProjectModel({
     *     json : '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * }
     * ```
     */
    json: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#Scheduler/model/ProjectModel#property-resourceStore">resourceStore</a>
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">ResourceStore</a> instance or a config object.
     */
    resourceStore: SchedulerResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">ResourceStore</a>
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a> instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a>
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-resourceTimeRangeStore">resourceTimeRangeStore</a>. Should be an array
     * of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModels</a> or its configuration objects.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore">resourceTimeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a> or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-resourceStore">resourceStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">ResourceModels</a> or its configuration objects.
     */
    resources: SchedulerResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-resourceStore">resourceStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">ResourceModels</a> or its configuration objects.
     */
    resourcesData: SchedulerResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * Silences propagations caused by the project loading.
     * Applying the loaded data to the project occurs in two basic stages:
     * 
     * * Data gets into the engine graph which triggers changes propagation
     * * The changes caused by the propagation get written to related stores
     * 
     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes
     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.
     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.
     * By default the system treats the data as consistent so this option is `true`.
     * ```javascript
     * new Scheduler({
     *     project : {
     *         // We want scheduling engine to recalculate the data properly
     *         // so then we could save it back to the server
     *         silenceInitialCommit : false
     *     }
     *     ...
     * })
     * ```
     */
    silenceInitialCommit: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a> instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a>
     */
    timeRangeStoreClass: typeof Store
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-timeRangeStore">timeRangeStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> or its configuration objects.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore">timeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a> or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * scheduler.project.on({
     *     dataReady() {
     *        console.log('Calculations finished');
     *     }
     * });
     * 
     * scheduler.eventStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished'
     * ```
     */
    onDataReady: Function|string
}

/**
 * This class represents a global project of your Scheduler - a central place for all data.
 * It holds and links the stores usually used by Scheduler:
 * 
 * * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">EventStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">ResourceStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/AssignmentStore">AssignmentStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/DependencyStore">DependencyStore</a>
 * * <a href="#Scheduler/model/ProjectModel#config-timeRangeStore"...
 */
export class SchedulerProjectModel extends Model implements ProjectModelMixinClass {
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/AssignmentStore">store</a> holding the assignments information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/AssignmentModel">AssignmentModel</a>
     */
    assignmentStore: SchedulerAssignmentStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-assignmentStore">assignmentStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/AssignmentModel">AssignmentModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]|SchedulerAssignmentModel[]
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-dependencyStore">dependencyStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyModel">DependencyModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]|SchedulerDependencyModel[]
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/DependencyStore">store</a> holding the dependencies information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyModel">DependencyModel</a>
     */
    dependencyStore: SchedulerDependencyStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/EventStore">store</a> holding the events information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>
     */
    eventStore: SchedulerEventStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-eventStore">eventStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModels</a> but also accepts an array of
     * its configuration objects as input.
     */
    events: EventModel[]|Partial<EventModelConfig>[]|SchedulerEventModel[]
    /**
     * Get or set data of project stores. The returned data is identical to what
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#function-toJSON">toJSON</a> returns:
     * ```javascript
     * 
     * const data = scheduler.project.inlineData;
     * 
     * // data:
     * {
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     dependenciesData       : [...],
     *     assignmentsData        : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * }
     * 
     * 
     * // Plug it back in later
     * scheduler.project.inlineData = data;
     * ```
     */
    inlineData: object
    /**
     * Get or set project data (records from its stores) as a JSON string.
     * Get a JSON string:
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * 
     * const jsonString = project.json;
     * 
     * // jsonString:
     * '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     * Set a JSON string (to populate the project stores):
     * ```javascript
     * project.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     */
    json: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">store</a> holding the resources that can be assigned to the events in the event store.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">ResourceModel</a>
     */
    resourceStore: SchedulerResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">store</a> holding the resource time ranges information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a>
     */
    resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-resourceTimeRangeStore">resourceTimeRangeStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModels</a> but
     * also accepts an array of its configuration objects as input.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-resourceStore">resourceStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">ResourceModels</a> but also accepts an array
     * of its configuration objects as input.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]|SchedulerResourceModel[]
    /**
     * State tracking manager instance the project relies on
     */
    stm: CoreStateTrackingManager
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">store</a> holding the time ranges information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a>
     */
    timeRangeStore: Store
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#property-timeRangeStore">timeRangeStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> but also accepts an
     * array of its configuration objects as input.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * scheduler.project.on({
     *     dataReady() {
     *        console.log('Calculations finished');
     *     }
     * });
     * 
     * scheduler.eventStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished'
     * ```
     */
    onDataReady: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProjectModelConfig>, store?: Store, meta?: object);
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     * By calling this function, the commit happens right away. And by awaiting it you are sure that project
     * calculations are finished and that references between records are up to date.
     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.
     * ```javascript
     * // Move an event in time
     * eventStore.first.shift(1);
     * 
     * // Trigger calculations directly and wait for them to finish
     * const result = await project.commitAsync();
     * 
     * if (result.rejectedWith) {
     *     // there was a conflict during the scheduling
     * }
     * ```
     */
    commitAsync(): Promise<void>;
    /**
     * Accepts a &quot;data package&quot; consisting of data for the projects stores, which is then loaded into the stores.
     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,
     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline
     * data:
     * ```javascript
     * await project.loadInlineData({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * ```
     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you
     * can be sure that project calculations are finished.
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.
     * Used by JSON.stringify to correctly convert this record to json.
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * 
     * const json = project.toJSON();
     * 
     * // json:
     * {
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     dependenciesData       : [...],
     *     assignmentsData        : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * }
     * ```
     * Output can be consumed by `loadInlineData()`:
     * ```javascript
     * const json = project.toJSON();
     * 
     * // Plug it back in later
     * project.loadInlineData(json);
     * ```
     */
    toJSON(): object;
}

type RecurrenceModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Specifies the number of occurrences after which the recurrence ends.
     * The value includes the associated timespan itself so values less than 2 make no sense.
     * The field is optional, the recurrence as well can be stopped using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-endDate">endDate</a> field value.
     */
    count: number
    /**
     * Specifies days of the week on which the timespan should occur.
     * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`
     * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.
     * Each value can also be preceded by a positive (+n) or negative (-n) integer.
     * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.
     * <strong>Not applicable</strong> for daily <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    days: string[]
    /**
     * End date of the recurrence. Specifies when the recurrence ends.
     * The value is optional, the recurrence can as well be stopped using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-count">count</a> field value.
     */
    endDate: Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     */
    frequency: 'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Field defines how often the recurrence repeats.
     * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.
     */
    interval: number
    /**
     * Specifies days of the month on which the timespan should occur.
     * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).
     * <strong>Applicable only</strong> for monthly <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    monthDays: number[]
    /**
     * Specifies months of the year on which the timespan should occur.
     * An array of integer values (1 - 12).
     * <strong>Applicable only</strong> for yearly <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    months: number[]
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The positions to include in the recurrence. The values operate on a set of recurrence instances <strong>in one interval</strong> of the recurrence rule.
     * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).
     * <strong>Not applicable</strong> for daily <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    positions: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
}

/**
 * This class represents a timespan recurrence settings.
 * It is a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> class.
 * Please refer to the documentation for that class to become familiar with the base interface of this class.
 * The data source for these fields can be customized by subclassing this class.
 */
export class RecurrenceModel extends Model {
    /**
     * Specifies the number of occurrences after which the recurrence ends.
     * The value includes the associated timespan itself so values less than 2 make no sense.
     * The field is optional, the recurrence as well can be stopped using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-endDate">endDate</a> field value.
     */
    count: number
    /**
     * Specifies days of the week on which the timespan should occur.
     * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`
     * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.
     * Each value can also be preceded by a positive (+n) or negative (-n) integer.
     * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.
     * <strong>Not applicable</strong> for daily <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    days: string[]
    /**
     * End date of the recurrence. Specifies when the recurrence ends.
     * The value is optional, the recurrence can as well be stopped using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-count">count</a> field value.
     */
    endDate: Date
    /**
     * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.
     */
    frequency: 'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'
    /**
     * Field defines how often the recurrence repeats.
     * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.
     */
    interval: number
    /**
     * Indicates that this is a `RecurrenceModel` class instance
     * (allows to avoid using `instanceof`).
     */
    readonly isRecurrenceModel: boolean
    /**
     * Specifies days of the month on which the timespan should occur.
     * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).
     * <strong>Applicable only</strong> for monthly <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    monthDays: number[]
    /**
     * Specifies months of the year on which the timespan should occur.
     * An array of integer values (1 - 12).
     * <strong>Applicable only</strong> for yearly <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    months: number[]
    /**
     * The positions to include in the recurrence. The values operate on a set of recurrence instances <strong>in one interval</strong> of the recurrence rule.
     * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).
     * <strong>Not applicable</strong> for daily <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel#field-frequency">frequency</a>.
     */
    positions: number
    /**
     * The recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a> described format
     * (&quot;RRULE&quot; expression).
     */
    rule: string
    /**
     * The timespan this recurrence is associated with.
     */
    timeSpan: TimeSpan
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<RecurrenceModelConfig>, store?: Store, meta?: object);
}

type SchedulerResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a <a href="https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn">TreeColumn</a>.
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Used by the default implementation of <a href="https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight">getRowHeight</a> to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the <a href="https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href">href</a> field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represent a single Resource in scheduler, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceStore">ResourceStore</a>.
 * It is a subclass of  <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Please refer to the documentation for that class to become familiar
 * with the base interface of the resource.
 * <h2>Fields and references</h2>
 * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing
 * your resources then you should subclas...
 */
export class SchedulerResourceModel extends GridRowModel implements ResourceModelMixinClass {
    /**
     * Returns all assignments for the resource
     */
    assignments: SchedulerAssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Get associated events
     */
    readonly events: SchedulerEventModel[]
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     * This value is used in horizontal mode to determine row height. When stacking, it is used as input for
     * calculating the actual row height:
     * ```javascript
     * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)
     * ```
     * When packing or overlapping, it is used as the actual row height.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerResourceModelConfig>, store?: Store, meta?: object);
    /**
     * Returns an array of events, associated with this resource
     */
    // @deprecated
    getEvents(): SchedulerEventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * This does not matter much on the resource itself, but is of importance when manipulating its references:
     * ```javascript
     * assignment.set('resourceId', 2);
     * // resource.assignments is not yet up to date
     * 
     * await assignment.setAsync('resourceId', 2);
     * // resource.assignments is up to date
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

type ResourceTimeRangeModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Id of the resource this time range is associated with
     */
    resourceId: string|number
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * Controls this time ranges primary color, defaults to using current themes default time range color.
     */
    timeRangeColor: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

/**
 * This class represent a single resource time range in your schedule.
 * To style the rendered elements, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-cls">cls</a> or <a href="#Scheduler/model/ResourceTimeRangeModel#field-timeRangeColor">timeRangeColor</a> field.
 * The class is used by the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/ResourceTimeRanges">ResourceTimeRanges</a> feature.
 * <h2>Recurring ranges support</h2>
 * You can also make ranges recurring by adding a `recurrenceRule` to the range data....
 */
export class ResourceTimeRangeModel extends TimeSpan {
    /**
     * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned
     * to `resourceId`. The relation also lets you access all time ranges on a resource through
     * `ResourceModel#timeRanges`.
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this time range is associated with
     */
    resourceId: string|number
    /**
     * Controls this time ranges primary color, defaults to using current themes default time range color.
     */
    timeRangeColor: string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ResourceTimeRangeModelConfig>);
}

type TimeSpanConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

/**
 * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.
 * It's a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>.
 * Please refer to documentation of those classes to become familiar with the base interface of this class.
 * A TimeSpan has the following fields:
 * 
 * * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">startDate</a>    - start date of the task in the ISO 8601 format
 * * <a href="#Scheduler/mo...
 */
export class TimeSpan extends Model implements TimeZonedDatesMixinClass {
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.
     */
    readonly dates: Date[]
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * Returns the duration of this Event in milliseconds.
     */
    readonly durationMS: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Returns the event store this event is part of, if any.
     */
    readonly eventStore: SchedulerEventStore|EventStore
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Returns true if record is a milestone.
     */
    readonly isMilestone: boolean
    /**
     * Checks if the range record has both start and end dates set and start &lt;= end
     */
    isScheduled: boolean
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
    /**
     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.
     */
    wbsCode: string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TimeSpanConfig>, store?: Store, meta?: object);
    /**
     * Triggers a download of this time span in ICS format (for import in Outlook etc.)
     * ```javascript
     * timeSpan.downloadAsICS({
     *      LOCATION : timeSpan.location
     *  });
     * ```
     */
    exportToICS(icsEventConfig?: Record<string, string>): void;
    /**
     * Iterates over the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#property-dates">dates</a>
     */
    forEachDate(func: Function, thisObj: object): void;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default the method defines all the event fields as editable.
     */
    isEditable(fieldName: string): boolean;
    /**
     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is
     * readonly after creation
     */
    setDuration(duration: number, durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): void;
    /**
     * Sets the range end date
     */
    setEndDate(date: Date, keepDuration?: boolean): void;
    /**
     * Sets the range start date
     */
    setStartDate(date: Date, keepDuration?: boolean): void;
    /**
     * Sets the event start and end dates
     */
    setStartEndDate(start: Date, end: Date, silent?: boolean): void;
    /**
     * Shift the dates for the date range by the passed amount and unit
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): void;
    /**
     * Splits this event into two pieces at the desired position.
     */
    split(splitPoint?: number|string): TimeSpan;
}

type AssignmentModelMixinClassConfig = {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
}

export class AssignmentModelMixinClass {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<AssignmentModelMixinClassConfig>);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): SchedulerResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * assignment.set('resourceId', 2);
     * // assignment.resource is not yet resolved
     * 
     * await assignment.setAsync('resourceId', 2);
     * // assignment.resource is resolved
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

export const AssignmentModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & AssignmentModelMixinClass>

type EventModelMixinClassConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * The array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">resources</a> which are assigned to this event.
     */
    resources: string|number
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     * Note that the field always returns a `Date`.
     * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its
     * duration (with reservation for other scheduling logic affecting the duration). If you want to change the
     * `startDate` and `duration`, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#function-setStartDate">setStartDate</a> instead (passing
     * `false` as the second argument).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
}

export class EventModelMixinClass {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     * This is essentially used by the Calendar package to determine if an event should
     * go into the all day zone of a DayView.
     */
    readonly isInterDay: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     * Note that the field always returns a `Date`.
     * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its
     * duration (with reservation for other scheduling logic affecting the duration). If you want to change the
     * `startDate` and `duration`, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#function-setStartDate">setStartDate</a> instead (passing
     * `false` as the second argument).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventModelMixinClassConfig>);
    /**
     * Assigns this event to the specified resource.
     * <em>Note:</em> The event must be part of an EventStore for this to work. If the EventStore uses single assignment
     * (loaded using resourceId) existing assignments will always be removed.
     */
    assign(resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): void;
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Returns true if this event is assigned to a certain resource.
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default, the method defines <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-endDate">endDate</a>, <a href="#Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and <a href="#Scheduler/model/mixin/EventModelMixin#field-fullDuration">fullDuration</a>
     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as
     * editable.
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * eventRecord.set('duration', 4);
     * // eventRecord.endDate is not yet calculated
     * 
     * await eventRecord.setAsync('duration', 4);
     * // eventRecord.endDate is calculated
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     */
    unassign(resource?: SchedulerResourceModel|string|number): void;
}

export const EventModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & EventModelMixinClass>

type ProjectModelMixinClassConfig = {
    /**
     * Project data as a JSON string, used to populate its stores.
     * ```javascript
     * const project = new ProjectModel({
     *     json : '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * }
     * ```
     */
    json: string
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a> instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a>
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore">resourceTimeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a> or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a> instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a>
     */
    timeRangeStoreClass: typeof Store
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore">timeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a> or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
}

export class ProjectModelMixinClass implements ProjectModelTimeZoneMixinClass {
    /**
     * Get or set data of project stores. The returned data is identical to what
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#function-toJSON">toJSON</a> returns:
     * ```javascript
     * 
     * const data = scheduler.project.inlineData;
     * 
     * // data:
     * {
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     dependenciesData       : [...],
     *     assignmentsData        : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * }
     * 
     * 
     * // Plug it back in later
     * scheduler.project.inlineData = data;
     * ```
     */
    inlineData: object
    /**
     * Get or set project data (records from its stores) as a JSON string.
     * Get a JSON string:
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * 
     * const jsonString = project.json;
     * 
     * // jsonString:
     * '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     * Set a JSON string (to populate the project stores):
     * ```javascript
     * project.json = '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * ```
     */
    json: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">store</a> holding the resource time ranges information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a>
     */
    resourceTimeRangeStore: ResourceTimeRangeStore
    /**
     * State tracking manager instance the project relies on
     */
    stm: CoreStateTrackingManager
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">store</a> holding the time ranges information.
     * See also <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a>
     */
    timeRangeStore: Store
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ProjectModelMixinClassConfig>);
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     * By calling this function, the commit happens right away. And by awaiting it you are sure that project
     * calculations are finished and that references between records are up to date.
     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.
     * ```javascript
     * // Move an event in time
     * eventStore.first.shift(1);
     * 
     * // Trigger calculations directly and wait for them to finish
     * const result = await project.commitAsync();
     * 
     * if (result.rejectedWith) {
     *     // there was a conflict during the scheduling
     * }
     * ```
     */
    commitAsync(): Promise<void>;
    /**
     * Accepts a &quot;data package&quot; consisting of data for the projects stores, which is then loaded into the stores.
     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,
     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline
     * data:
     * ```javascript
     * await project.loadInlineData({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * ```
     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you
     * can be sure that project calculations are finished.
     */
    loadInlineData(dataPackage: object): Promise<void>;
    /**
     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.
     * Used by JSON.stringify to correctly convert this record to json.
     * ```javascript
     * const project = new ProjectModel({
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     assignmentsData        : [...],
     *     dependenciesData       : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * });
     * 
     * const json = project.toJSON();
     * 
     * // json:
     * {
     *     eventsData             : [...],
     *     resourcesData          : [...],
     *     dependenciesData       : [...],
     *     assignmentsData        : [...],
     *     resourceTimeRangesData : [...],
     *     timeRangesData         : [...]
     * }
     * ```
     * Output can be consumed by `loadInlineData()`:
     * ```javascript
     * const json = project.toJSON();
     * 
     * // Plug it back in later
     * project.loadInlineData(json);
     * ```
     */
    toJSON(): object;
}

export const ProjectModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectModelMixinClass>

type ProjectModelTimeZoneMixinClassConfig = {
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
}

export class ProjectModelTimeZoneMixinClass {
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ProjectModelTimeZoneMixinClassConfig>);
}

export const ProjectModelTimeZoneMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectModelTimeZoneMixinClass>

type RecurringTimeSpanClassConfig = {
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
}

export class RecurringTimeSpanClass {
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * If this event is an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">occurrence</a> of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel">RecurrenceModel</a>
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<RecurringTimeSpanClassConfig>);
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Does this recurring event have an exception on the passed date.
     */
    hasException(date: Date): boolean;
    /**
     * Override of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>'s method. If an <a href="#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">isOccurrence</a>
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
}

export const RecurringTimeSpan : <T extends AnyConstructor<TimeSpan>>(base : T) => AnyConstructor<InstanceType<T> & RecurringTimeSpanClass>

type ResourceModelMixinClassConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     * This value is used in horizontal mode to determine row height. When stacking, it is used as input for
     * calculating the actual row height:
     * ```javascript
     * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)
     * ```
     * When packing or overlapping, it is used as the actual row height.
     */
    rowHeight: number
}

export class ResourceModelMixinClass {
    /**
     * Returns all assignments for the resource
     */
    assignments: SchedulerAssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     * This value is used in horizontal mode to determine row height. When stacking, it is used as input for
     * calculating the actual row height:
     * ```javascript
     * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)
     * ```
     * When packing or overlapping, it is used as the actual row height.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ResourceModelMixinClassConfig>);
    /**
     * Returns an array of events, associated with this resource
     */
    // @deprecated
    getEvents(): SchedulerEventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * This does not matter much on the resource itself, but is of importance when manipulating its references:
     * ```javascript
     * assignment.set('resourceId', 2);
     * // resource.assignments is not yet up to date
     * 
     * await assignment.setAsync('resourceId', 2);
     * // resource.assignments is up to date
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

export const ResourceModelMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ResourceModelMixinClass>

type TimeZonedDatesMixinClassConfig = {
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

export class TimeZonedDatesMixinClass {
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<TimeZonedDatesMixinClassConfig>);
}

export const TimeZonedDatesMixin : <T extends AnyConstructor<TimeSpan>>(base : T) => AnyConstructor<InstanceType<T> & TimeZonedDatesMixinClass>

type SchedulerProAssignmentStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store representing a collection of assignments between events in the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> and resources
 * in the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/ResourceStore">ResourceStore</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModel</a>.
 * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,
 * ResourceStore and DependencyStore). The project...
 */
export class SchedulerProAssignmentStore extends AjaxStore implements PartOfProjectClass, AssignmentStoreMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.
     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId }];
     * // assignmentStore.first.event is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * assignmentStore.data = [{ eventId, resourceId  }];
     * await assignmentStore.project.commitAsync();
     * // assignmentStore.first.event is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    data: Partial<AssignmentModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProAssignmentStoreConfig>);
    /**
     * Add assignments to the store.
     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * // assignment.event is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [assignment] = assignmentStore.add({ eventId, resourceId });
     * await assignmentStore.project.commitAsync();
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): SchedulerAssignmentModel[];
    /**
     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added assignments.
     * ```javascript
     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });
     * // assignment.event is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerAssignmentModel|SchedulerAssignmentModel[]|Partial<AssignmentModelConfig>|Partial<AssignmentModelConfig>[], silent?: boolean): Promise<SchedulerAssignmentModel[]>;
    /**
     * Creates and adds assignment record(s) for a given event and resource(s).
     */
    assignEventToResource(event: TimeSpan, resources: SchedulerResourceModel|SchedulerResourceModel[], assignmentSetupFn?: Function, removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Returns an assignment record for a given event and resource
     */
    getAssignmentForEventAndResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: TimeSpan): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel): SchedulerAssignmentModel[];
    /**
     * Returns all events assigned to a resource
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel): SchedulerResourceModel[];
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);
     * // assignmentStore.first.event is available
     * ```
     */
    loadDataAsync(data: Partial<AssignmentModelConfig>[]): Promise<void>;
    /**
     * Maps over event assignments.
     */
    mapAssignmentsForEvent(event: SchedulerEventModel, fn?: Function, filterFn?: Function): SchedulerEventModel[]|any[];
    /**
     * Maps over resource assignments.
     */
    mapAssignmentsForResource(resource: SchedulerResourceModel|number|string, fn?: Function, filterFn?: Function): SchedulerResourceModel[]|any[];
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: TimeSpan): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|any): void;
    /**
     * Removes assignment record for a given event and resource.
     */
    unassignEventFromResource(event: TimeSpan|string|number, resources?: SchedulerResourceModel|string|number): SchedulerAssignmentModel|SchedulerAssignmentModel[];
}

type SchedulerProCalendarManagerStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A class representing the tree of calendars in the SchedulerPro chart. An individual calendar is represented as an instance of the
 * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarModel">CalendarModel</a> class. The store expects the data loaded to be hierarchical. Each parent node should
 * contain its children in a property called 'children'.
 * Please refer to the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/guides/basics/calendars.md">calendars guide</a> for details
 */
export class SchedulerProCalendarManagerStore extends AjaxStore implements PartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProCalendarManagerStoreConfig>);
}

type SchedulerProDependencyStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store representing a collection of dependencies between events in the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/DependencyModel">DependencyModel</a>.
 * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,
 * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records
 * for the records i...
 */
export class SchedulerProDependencyStore extends AjaxStore implements PartOfProjectClass, DependencyStoreMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * // dependencyStore.first.fromEvent is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * dependencyStore.data = [{ from, to }];
     * await dependencyStore.project.commitAsync();
     * // dependencyStore.first.fromEvent is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    data: Partial<DependencyModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProDependencyStoreConfig>);
    /**
     * Add dependencies to the store.
     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * // dependency.fromEvent is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [dependency] = dependencyStore.add({ from, to });
     * await dependencyStore.project.commitAsync();
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): SchedulerDependencyModel[];
    /**
     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added dependencies.
     * ```javascript
     * const [dependency] = await dependencyStore.addAsync({ from, to });
     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerDependencyModel|SchedulerDependencyModel[]|Partial<DependencyModelConfig>|Partial<DependencyModelConfig>[], silent?: boolean): Promise<SchedulerDependencyModel[]>;
    /**
     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st
     * task to 2nd) or backward (from 2nd to 1st).
     */
    getDependencyForSourceAndTargetEvents(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies for a certain event (both incoming and outgoing)
     */
    getEventDependencies(event: SchedulerEventModel): SchedulerDependencyModel[];
    /**
     * Returns a dependency model instance linking given events if such dependency exists in the store.
     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).
     */
    getEventsLinkingDependency(sourceEvent: SchedulerEventModel|string, targetEvent: SchedulerEventModel|string): SchedulerDependencyModel;
    /**
     * Returns all dependencies highlighted with the given CSS class
     */
    getHighlightedDependencies(cls: string): DependencyBaseModel[];
    /**
     * Validation method used to validate a dependency. Override and return `true` to indicate that an
     * existing dependency between two tasks is valid. For a new dependency being created please see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/DependencyStoreMixin#function-isValidDependencyToCreate">isValidDependencyToCreate</a>.
     */
    isValidDependency(dependencyOrFromId: SchedulerDependencyModel|TimeSpan|number|string, toId?: TimeSpan|number|string, type?: number): Promise<boolean>;
    /**
     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that
     * a new dependency is valid to be created.
     */
    isValidDependencyToCreate(fromId: TimeSpan|number|string, toId: TimeSpan|number|string, type: number): boolean;
    /**
     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await dependencyStore.loadDataAsync([{ from, to }]);
     * // dependencyStore.first.fromEvent is available
     * ```
     */
    loadDataAsync(data: Partial<DependencyModelConfig>[]): Promise<void>;
}

type EventStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * Configure with `true` to also remove the event when removing the last assignment from the linked
     * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.
     */
    removeUnassignedEvent: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.
     * If not provided, the mode will be inferred from
     * 
     * * presence of an assignment store (i.e. multi-assignment)
     * * presence of `resourceId` in the event store data (i.e. single assignment mode)
     * 
     */
    singleAssignment: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store holding all the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel">events</a> to be rendered into a <a href="#SchedulerPro/view/SchedulerPro">Scheduler Pro</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel">EventModel</a>.
 * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,
 * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the r...
 */
export class EventStore extends AjaxStore implements PartOfProjectClass, GetEventsMixinClass, EventStoreMixinClass, RecurringEventsMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.
     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * // eventStore.first.endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.data = [{ startDate, duration }];
     * await eventStore.project.commitAsync();
     * // eventStore.first.endDate is calculated
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    data: Partial<EventModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Class used to represent records. Defaults to class EventModel.
     */
    modelClass: typeof EventModel
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired when a range of events is requested from the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> method.
     * *
     * This event fires <span style="font-weight:bold">every time</span> a range of events is
     * requested from the store.
     * *
     * An application may have one of two levels of interest in events being read from a store.<br>
     * 
     * * To be notified when <span style="font-weight:bold">any</span> event block is requested regardless of what the
     * date range is.
     * * To be notified when a <span style="font-weight:bold">new date range</span> is requested.
     * 
     * This event allows both types of application to be written. The `changed` property is
     * set if a different date range is requested.
     * ```javascript
     * new Scheduler({
     *     eventStore : {
     *         listeners : {
     *             loadDateRange({ new : { startDate, endDate }, changed }) {
     *                 // Load new data if user is requesting a different time window.
     *                 if (changed) {
     *                     fetch(...);
     *                 }
     *             }
     *         }
     *     },
     *     ...
     * });
     * ```
     */
    onLoadDateRange: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventStoreConfig>);
    /**
     * Add events to the store.
     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation
     * engine. Thus they cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * // endDate is not yet calculated
     * ```
     * To guarantee data is in a calculated state, wait for calculations for finish:
     * ```javascript
     * eventStore.add({ startDate, duration });
     * await eventStore.project.commitAsync();
     * // endDate is calculated
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    add(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): SchedulerEventModel[];
    /**
     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on
     * the added events.
     * ```javascript
     * await eventStore.addAsync({ startDate, duration });
     * // endDate is calculated
     * ```
     */
    addAsync(records: SchedulerEventModel|SchedulerEventModel[]|Partial<EventModelConfig>|Partial<EventModelConfig>[], silent?: boolean): Promise<SchedulerEventModel[]>;
    /**
     * Appends a new record to the store
     */
    append(record: SchedulerEventModel): void;
    /**
     * Creates and adds assignment record for a given event and a resource.
     */
    assignEventToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): SchedulerAssignmentModel[];
    /**
     * Calls the supplied iterator function once for every scheduled event, providing these arguments
     * 
     * * event : the event record
     * * startDate : the event start date
     * * endDate : the event end date
     * 
     * Returning false cancels the iteration.
     */
    forEachScheduledEvent(fn: Function, thisObj?: object): void;
    /**
     * Returns all assignments for a given event.
     */
    getAssignmentsForEvent(event: SchedulerEventModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns all assignments for a given resource.
     */
    getAssignmentsForResource(resource: SchedulerResourceModel|string|number): SchedulerAssignmentModel[];
    /**
     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days
     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.
     * Example:
     * ```javascript
     *  eventCounts = eventStore.getEventCounts({
     *      startDate : scheduler.timeAxis.startDate,
     *      endDate   : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEventCounts(options: { startDate: Date, endDate?: Date }): void;
    /**
     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.
     * By default, for any date, this includes any event which <em>intersects</em> that date.
     * To only include events that are fully contained <em>within</em> the date range, pass the `allowPartial`
     * option as `false`.
     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If
     * that is not required, pass the `includeOccurrences` option as `false`. <strong>Note that if `includeOccurrences` is
     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs
     * to be generated and returned.</strong>
     * Example:
     * ```javascript
     *  visibleEvents = eventStore.getEvents({
     *      resourceRecord : myResource,
     *      startDate      : scheduler.timeAxis.startDate,
     *      endDate        : scheduler.timeAxis.endDate
     *  });
     * ```
     */
    getEvents(options: { date?: Date, startDate: Date, endDate?: Date, resourceRecord?: SchedulerResourceModel, filter?: Function, ignoreFilters?: boolean, includeOccurrences?: boolean, allowPartial?: boolean, startOnly?: boolean, onlyAssigned?: boolean, dateMap?: boolean|Map<any, any> }): SchedulerEventModel[]|Map<any, any>;
    /**
     * Returns all events assigned to a resource.
     * <em>NOTE:</em> this does not include occurrences of recurring events. Use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/GetEventsMixin#function-getEvents">getEvents</a> API to include occurrences of recurring events.
     */
    getEventsForResource(resource: SchedulerResourceModel|string|number): SchedulerEventModel[];
    /**
     * Returns all the recurring events.
     * **An alias for ** <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/mixin/RecurringTimeSpansMixin#function-getRecurringTimeSpans">getRecurringTimeSpans</a> method.
     */
    getRecurringEvents(): SchedulerEventModel[];
    /**
     * Returns all the recurring timespans.
     */
    getRecurringTimeSpans(): TimeSpan[];
    /**
     * Returns all resources assigned to an event.
     */
    getResourcesForEvent(event: SchedulerEventModel|string|number): SchedulerResourceModel[];
    /**
     * Returns an object defining the earliest start date and the latest end date of all the events in the store.
     */
    getTotalTimeSpan(): object;
    /**
     * Checks if a date range is allocated or not for a given resource.
     */
    isDateRangeAvailable(start: Date, end: Date, excludeEvent: SchedulerEventModel|null, resource: SchedulerResourceModel): boolean;
    /**
     * Checks whether an event is assigned to a resource.
     */
    isEventAssignedToResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you
     * need custom logic.
     */
    isEventPersistable(event: SchedulerEventModel): boolean;
    /**
     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await eventStore.loadDataAsync([{ startDate, duration }]);
     * // eventStore.first.endDate is calculated
     * ```
     */
    loadDataAsync(data: Partial<EventModelConfig>[]): Promise<void>;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassignEventFromResourceToResource(event: SchedulerEventModel, oldResource: SchedulerResourceModel|SchedulerResourceModel[], newResource: SchedulerResourceModel|SchedulerResourceModel[]): void;
    /**
     * Removes all assignments for given event
     */
    removeAssignmentsForEvent(event: SchedulerEventModel|string|number): void;
    /**
     * Removes all assignments for given resource
     */
    removeAssignmentsForResource(resource: SchedulerResourceModel|string|number): void;
    /**
     * Removes assignment record for a given event and a resource.
     */
    unassignEventFromResource(event: SchedulerEventModel|string|number, resource: SchedulerResourceModel|string|number): void;
}

type SchedulerProResourceStoreConfig = {
    /**
     * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a
     * backend.
     * By default Store allows loading records without ids, in which case a generated id will be assigned.
     */
    allowNoId: boolean
    /**
     * Specifies target to filter and sort after applying changeset:
     * 
     * * `'changes'` - apply sort and filter to changeset only (see more below)
     * * `'none'` - do not apply sort and filter
     * 
     * <h3>`changes` behavior</h3>
     * If the store has filters in effect when the changeset is applied, the following rules will determine how the
     * filtered values are affected:
     * 
     * * Among added records, only those that match the filter will be included in the filtered set
     * * Among updated records, those that did not previously match the filter but now do will be added to the filtered set,
     * and those that did match but no longer do will also remain in the filtered set. This means that new records may
     * appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are
     * re-applied.
     * 
     */
    applyChangesetFilterSortTarget: 'changes'|'none'
    /**
     * Commit changes automatically
     */
    autoCommit: boolean
    /**
     * True to initiate a load when the store is instantiated
     */
    autoLoad: boolean
    /**
     * Automatically detect from set data if used as tree store or flat store
     */
    autoTree: boolean
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Array of field names that should trigger filtering of chained store when the fields are updated.
     */
    chainedFields: string[]
    /**
     * Function used to filter records in the masterStore into a chained store. If not provided,
     * all records from the masterStore will be included in the chained store.
     */
    chainedFilterFn: Function
    /**
     * Url to post newly created records to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    createUrl: string
    /**
     * Raw data to load initially.
     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">model</a> or in the <a href="#Core/data/Store#config-fields">fields</a> config).
     * ```javascript
     * const store = new Store({
     *     data : [
     *         { id : 1, name : 'Linda', city : 'NY' },
     *         { id : 2, name : 'Olivia', city : 'Paris' },
     *         ...
     *     ]
     * });
     * ```
     */
    data: object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Url for deleting records.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true
     * }
     * ```
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    deleteUrl: string
    /**
     * Method names calls to which should be relayed to master store.
     */
    doRelayToMaster: string[]
    /**
     * Method names calls to which shouldn't be relayed to master store.
     */
    dontRelayToMaster: string
    /**
     * If true, collapsed records in original tree will be excluded from the chained store.
     */
    excludeCollapsedRecords: boolean
    /**
     * An object containing the Fetch options to pass to each server request issued by this store. Use this to
     * control if credentials are sent and other options, read more at
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options">MDN</a>.
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    fetchOptions : {
     *        credentials : 'omit',
     *        redirect    : 'error'
     *    }
     * });
     * ```
     */
    fetchOptions: object
    /**
     * An array of field definitions used to create a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> (modelClass) subclass. Optional.
     * If the Model already has fields defined, these fields will extend those.
     * ```javascript
     * const store = new Store({
     *     fields : ['name', 'city', 'company'],
     *     data   : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> for more info on defining fields, changing data source and mapping fields to
     * nested objects.
     * Note that pre-created record instances supplied to the store are kept as is and thus these fields will
     * not apply to them.
     */
    fields: (string|Partial<ModelFieldConfig>|DataField)[]
    /**
     * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a
     * filtered response is required.
     * <strong>Note:</strong> When this is set, filters must be defined using a field name, an operator and a value
     * to compare, <strong>not</strong> a comparison function.
     */
    filterParamName: string
    /**
     * Specify one or more <a href="https://bryntum.com/products/gantt/docs/api/Core/util/CollectionFilter">CollectionFilter</a> config objects to apply initially.
     * For example:
     * ```javascript
     *  // Configure the store to filter in clients over the age of 30
     *  new Store({
     *      ...,
     *      filters : [{
     *          property : 'age',
     *          value    : 30,
     *          operator : '>'
     *      }],
     *      ...
     *  })
     * ```
     * or:
     * ```javascript
     *  // Configure the store to filter based on a complex operation
     *  new Store({
     *      ...,
     *      filters : [{
     *          filterBy(record) {
     *              // Return true or false for filtering in or out
     *              return shouldClientBeVisible(record);
     *          }
     *      }],
     *      ...
     *  })
     * ```
     */
    filters: Partial<CollectionFilterConfig>|Partial<CollectionFilterConfig>[]
    /**
     * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default
     * behavior and this flag will be removed.
     */
    fireRemoveEventForMoveAction: boolean
    /**
     * Initial groupers, specify to have store grouped automatically after initially setting data
     */
    groupers: Grouper[]
    /**
     * A string keyed object containing the HTTP headers to add to each server request issued by this store.
     * `AjaxStore` uses the Fetch API under the hood, read more about headers on
     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers">MDN</a>
     * Example usage:
     * ```javascript
     * const store = new AjaxStore({
     *    headers : {
     *        Authorization : 'auth-contents-goes-here'
     *    }
     * });
     * ```
     */
    headers: Record<string, string>
    /**
     * The HTTP methods to use for CRUD requests when <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-useRestfulMethods">useRestfulMethods</a> is enabled.
     * ```javascript
     * new AjaxStore({
     *    useRestfulMethods : true,
     *    httpMethods : {
     *        create : 'POST',
     *        read   : 'POST',
     *        update : 'PATCH',
     *        delete : 'DELETE'
     *    }
     * });
     * 
     * ```
     */
    httpMethods: HttpMethods
    /**
     * Store's unique identifier. When set the store is added to a store map accessible through
     * `Store.getStore(id)`.
     */
    id: string|number
    /**
     * Set to `false` to not record transaction during `applyChangeset` call
     */
    ignoreRemoteChangesInSTM: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Master store that a chained store gets its records from.
     */
    masterStore: Store
    /**
     * Class used to represent records in the store, should be a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Only
     * applies when supplying data to the store (load, add), any supplied record instances are kept as is.
     * ```javascript
     * class MyModel extends Model {
     *     static get fields() {
     *         return [
     *             'name',
     *             'city',
     *             'company'
     *         ]
     *     }
     * }
     * 
     * const store = new Store({
     *     modelClass : MyModel,
     *     data : [
     *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },
     *         ...
     *     ]
     * });
     * ```
     */
    modelClass: typeof Model
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>one based</strong> page number
     * required.
     */
    pageParamName: string
    /**
     * When paging of data is requested by setting <em>either</em> the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageParamName">pageParamName</a> <em>or</em> the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-pageStartParamName">pageStartParamName</a>, this is the value to send in the <a href="#Core/data/AjaxStore#config-pageSizeParamName">pageSizeParamName</a>.
     */
    pageSize: number
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageSizeParamName: string
    /**
     * The name of the HTTP parameter to use when requesting pages of data using the <strong>zero based</strong> index of the
     * required page's starting record.
     */
    pageStartParamName: string
    /**
     * An object containing key/value pairs that are passed on the request query string.
     */
    params: object
    /**
     * The name of the HTTP parameter passed to this Store's <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a> to indicate the node `id`
     * to load when loading child nodes on demand if the node being expanded was created with data containing
     * `children: true`.
     */
    parentIdParamName: string
    /**
     * Url to read data from.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * If the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, the total dataset size must be returned in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-responseTotalProperty">responseTotalProperty</a> property:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }],
     *     &quot;total&quot;: 65535
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    readUrl: string
    /**
     * Specify true to reapply filters when a record is added to the store.
     */
    reapplyFilterOnAdd: boolean
    /**
     * Specify true to reapply filters when a record is updated in the store.
     */
    reapplyFilterOnUpdate: boolean
    /**
     * Specify true to sort this store after records are added.
     */
    reapplySortersOnAdd: boolean
    /**
     * The property name in JSON responses from the server that contains the data for the records
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     */
    responseDataProperty: string
    /**
     * The optional property name in JSON responses from the server that contains a boolean
     * success/fail status.
     * ```json
     * {
     *   &quot;responseMeta&quot; : {
     *   {
     *     &quot;success&quot; : true,
     *     &quot;count&quot; : 100
     *   },
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ]
     * }
     * ```
     * The store would be configured with:
     * ```javascript
     *  {
     *      ...
     *      successDataProperty : 'responseMeta.success',
     *      responseTotalProperty : 'responseMeta.count'
     *      ...
     *  }
     * 
     * ```
     */
    responseSuccessProperty: string
    /**
     * The property name in JSON responses from the server that contains the dataset total size
     * <strong>when this store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a></strong>
     * ```json
     * {
     *   &quot;success&quot; : true,
     *   // The property name used here should match that of 'responseDataProperty'
     *   &quot;data&quot; : [
     *     ...
     *   ],
     *   // The property name used here should match that of 'responseTotalProperty'
     *   &quot;total&quot; : 65535
     * }
     * ```
     */
    responseTotalProperty: string
    /**
     * Set this flag to true if you are filtering remote using restful URLs (e.g.
     * https://nominatim.openstreetmap.org/search/paris?format=json)
     * <strong>Note:</strong> When this is set, the filter string is appended to the readUrl.
     */
    restfulFilter: boolean
    /**
     * Specify `true` to send payloads as form data, `false` to send as regular JSON.
     */
    sendAsFormData: boolean
    /**
     * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a
     * sorted response is required.
     * <strong>Note:</strong> When this is set, sorters must be defined using a field name and an ascending flag,
     * <strong>not</strong> a sort function.
     */
    sortParamName: string
    /**
     * Initial sorters, format is [{ field: 'name', ascending: false }, ...]
     */
    sorters: Sorter[]|string[]
    /**
     * To have all groups <strong>initially loaded</strong> start collapsed, configure this as `true`.
     * Note that this only affects the initial load of the store. Subsequent reloads maintain
     * current group state where possible.
     */
    startGroupsCollapsed: boolean
    /**
     * Reference to STM manager
     */
    stm: CoreStateTrackingManager
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/util/Collection">Collection</a>, or Collection config object
     * to use to contain this Store's constituent records.
     */
    storage: Collection|Partial<CollectionConfig>
    /**
     * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.
     * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset
     * with a new one, creating all new records:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first !== first;
     * ```
     * When configured with `true` the new dataset is instead synced against the old, figuring out what was
     * added, removed and updated:
     * ```javascript
     * store.data = [ { id : 1, name : 'Saitama' } ];
     * 
     * const first = store.first;
     * 
     * store.data = [ { id : 1, name : 'One-Punch man' } ];
     * 
     * // store.first === first;
     * ```
     * After the sync, any configured sorters, groupers and filters will be reapplied.
     * <h4>Threshold</h4>
     * The sync operation has a configurable threshold, above which the operation will be treated as a
     * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events
     * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,
     * supply a config object with a `threshold` property instead of `true`:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         threshold : '20%'
     *     }
     * });
     * ```
     * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a
     * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold
     * is used.
     * <h4>Missing fields</h4>
     * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed
     * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object
     * it will reset any unspecified field back to their default values:
     * ```javascript
     * const store = new Store({
     *     syncDataOnLoad : {
     *         keepMissingValues : false
     *     }
     * });
     * ```
     * Considering the following sync operation:
     * ```javascript
     * // Existing data
     * { id : 1, name : 'Saitama', powerLevel : 100 }
     * // Sync data
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * The result would by default (or when explicitly configured with `true`)  be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man', powerLevel : 100 }
     * ```
     * If configured with `keepMissingValues : false` it would instead be:
     * ```javascript
     * { id : 1, name : 'One-Punch Man' }
     * ```
     * *Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when
     * it is populated from the main store (the main store can use the setting)*
     */
    syncDataOnLoad: boolean|SyncDataOnLoadOptions
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format
     * expected for tree data.
     * Example input format:
     * ```javascript
     * [
     *   { id : 1, name : 'Parent' },
     *   { id : 2, name : 'Child', parentId : 1 }
     * ]
     * ```
     * Will be transformed into:
     * ```javascript
     * [
     *   {
     *     id       : 1,
     *     name     : 'Parent',
     *     children : [
     *       { id : 2, name : 'Child', parentId : 1 }
     *     ]
     *   }
     * ]
     * ```
     */
    transformFlatData: boolean
    /**
     * `true` to act as a tree store.
     */
    tree: boolean
    /**
     * Url to post record modifications to.
     * The response must be in the form:
     * ```javascript
     * {
     *     &quot;success&quot;: true,
     *     &quot;data&quot;: [{
     *         &quot;id&quot;: 0, &quot;name&quot;: &quot;General Motors&quot;
     *     }, {
     *         &quot;id&quot;: 1, &quot;name&quot;: &quot;Apple&quot;
     *     }]
     * }
     * ```
     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the
     * server.
     * If the server encountered an error, the packet would look like this:
     * ```javascript
     * {
     *     &quot;success&quot;: false,
     *     &quot;message&quot;: &quot;Some kind of database error&quot;
     * }
     * ```
     * And that packet would be available in the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#event-exception">exception</a> handler in the `response` property of the
     * event.
     * The `success` property may be omitted, it defaults to `true`.
     */
    updateUrl: string
    /**
     * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,
     * a locale string or a locale config to enable.
     * Enabling this has big negative impact on sorting
     * performance. For more info on `localeCompare()`, see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">MDN</a>.
     * Examples:
     * ```javascript
     * const store = new Store({
     *     // Swedish sorting
     *     useLocaleSort : 'sv-SE'
     * });
     * 
     * const store = new Store({
     *     // Swedish sorting with custom casing order
     *     useLocaleSort : {
     *         locale    : 'sv-SE',
     *         caseFirst : 'upper'
     *     }
     * });
     * ```
     * Can also be configured on a per-sorter basis:
     * ```javascript
     * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });
     * ```
     */
    useLocaleSort: boolean|string|object
    /**
     * Retools the loaded data objects instead of making shallow copies of them. This increases performance but
     * pollutes the incoming data and does not allow remapping of fields (dataSource).
     * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an
     * object with the params described below or `true` which equals `disableDuplicateIdCheck` and
     * `disableTypeConversion`.
     * ```javascript
     * // No duplicate id checking, no type conversions
     * new Store({ useRawData : true });
     * 
     * new Store({
     *   // No type conversions only
     *   useRawData : {
     *     disableTypeConversion : true
     *   }
     * });
     * ```
     */
    useRawData: boolean|object
    /**
     * Set to ´true´ to use restful <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-httpMethods">httpMethods</a>
     */
    useRestfulMethods: boolean
    /**
     * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.
     * Set this to `false` to disable the check and give a very minor performance boost.
     */
    verifyNoGeneratedIds: boolean
    /**
     * Specify `true` to send all model fields when committing modified records (as opposed to just the
     * modified fields)
     */
    writeAllFields: boolean
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired when a temporary record with the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a> property set
     * has been confirmed as a part of this store by having its <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#property-isCreating">isCreating</a>
     * property cleared.
     */
    onAddConfirmed: Function|string
    /**
     * Fired after any remote request has finished whether successfully or unsuccessfully.
     */
    onAfterRequest: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before loading starts. Allows altering parameters and is cancelable
     */
    onBeforeLoad: Function|string
    /**
     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable
     */
    onBeforeLoadChildren: Function|string
    /**
     * When the store <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#property-isPaged">is paged</a>, this is fired before loading a page and is cancelable
     */
    onBeforeLoadPage: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before any remote request is initiated.
     */
    onBeforeRequest: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fired before record is modified in this store.
     * Modification may be vetoed by returning `false` from a handler.
     */
    onBeforeUpdate: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Data in the store was changed. This is a catch-all event which is fired for all changes
     * which take place to the store's data.
     * This includes mutation of individual records, adding and removal of records, as well as
     * setting a new data payload using the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#property-data">data</a> property, sorting, filtering,
     * and calling <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple
     * listeners to the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-update">update</a>, <a href="#Core/data/mixin/StoreCRUD#event-add">add</a>,
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-remove">remove</a>, <a href="#Core/data/Store#event-refresh">refresh</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#event-removeAll">removeAll</a> events.
     * A more complex databound widget such as a grid may use the more granular events to perform less
     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the
     * `action` property.
     */
    onChange: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fired after committing added records
     */
    onCommitAdded: Function|string
    /**
     * Fired after committing modified records
     */
    onCommitModified: Function|string
    /**
     * Fired after committing removed records
     */
    onCommitRemoved: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid
     * response.
     * Note that when a <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#function-commit">commit</a> fails, more than one exception event will be triggered. The individual
     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit
     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are
     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of
     * the event must be examined.
     */
    onException: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired when the id of a record has changed
     */
    onIdChange: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired on successful load
     */
    onLoad: Function|string
    /**
     * Fired on successful load of remote child nodes for a tree node.
     */
    onLoadChildren: Function|string
    /**
     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the
     * event may still be mutated at this stage.
     */
    onLoadChildrenStart: Function|string
    /**
     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be
     * mutated at this stage.
     */
    onLoadStart: Function|string
    /**
     * Fired when a block of records has been moved within this Store
     */
    onMove: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Data in the store has completely changed, such as by a filter, or sort or load operation.
     */
    onRefresh: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired when the root node is set
     */
    onRootChange: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Fired when a record is modified
     */
    onUpdate: Function|string
}

/**
 * A store holding all the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ResourceModel">resources</a> to be rendered into a
 * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/SchedulerPro">Scheduler Pro</a>.
 * This store only accepts a model class inheriting from <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ResourceModel">ResourceModel</a>.
 * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,
 * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to...
 */
export class SchedulerProResourceStore extends AjaxStore implements PartOfProjectClass, ResourceStoreMixinClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus
     * they cannot be directly accessed after assigning the new dataset.
     * For example:
     * ```javascript
     * resourceStore.data = [{ id }];
     * // resourceStore.first.events is not yet available
     * ```
     * To guarantee references are available, wait for calculations for finish:
     * ```javascript
     * resourceStore.data = [{ id }];
     * await resourceStore.project.commitAsync();
     * // resourceStore.first.events is available
     * ```
     * Alternatively use `loadDataAsync()` instead:
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    data: Partial<ResourceModelConfig>[]
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the
     * event. If it was inserted, event contains `index`
     */
    onAdd: Function|string
    /**
     * Fired before records are added to this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-add">add</a> or <a href="#Core/data/mixin/StoreCRUD#function-insert">insert</a>. In a tree
     * store, also fired by <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-appendChild">appendChild</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-insertChild">insertChild</a>. The add or insert may be vetoed by returning `false`
     * from a handler.
     */
    onBeforeAdd: Function|string
    /**
     * Fired before committing changes. Return false from handler to abort commit
     */
    onBeforeCommit: Function|string
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.
     */
    onBeforeIndent: Function|string
    /**
     * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.
     */
    onBeforeOutdent: Function|string
    /**
     * Fired before records are removed from this store by the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/StoreCRUD#function-remove">remove</a> or <a href="#Core/data/mixin/StoreCRUD#function-removeAll">removeAll</a>.
     * Also fired when removing a child record in a tree store using <a href="https://bryntum.com/products/gantt/docs/api/Core/data/mixin/TreeNode#function-removeChild">removeChild</a>.
     * The remove may be vetoed by returning `false` from a handler.
     */
    onBeforeRemove: Function|string
    /**
     * Fired before sorting
     */
    onBeforeSort: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired after committing changes
     */
    onCommit: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired after applying filters to the store
     */
    onFilter: Function|string
    /**
     * Fired when grouping changes
     */
    onGroup: Function|string
    /**
     * Fired after tasks in the tree are indented
     */
    onIndent: Function|string
    /**
     * Fired after tasks in the tree are outdented
     */
    onOutdent: Function|string
    /**
     * Fired when one or more records are removed
     */
    onRemove: Function|string
    /**
     * Fired after removing all records
     */
    onRemoveAll: Function|string
    /**
     * Fired after sorting
     */
    onSort: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProResourceStoreConfig>);
    /**
     * Add resources to the store.
     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they
     * cannot be directly accessed after using this function.
     * For example:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * // resource.events is not yet available
     * ```
     * To guarantee references are set up, wait for calculations for finish:
     * ```javascript
     * const [resource] = resourceStore.add({ id });
     * await resourceStore.project.commitAsync();
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     * Alternatively use `addAsync()` instead:
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    add(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): SchedulerResourceModel[];
    /**
     * Add resources to the store and triggers calculations directly after. Await this function to have up to date
     * references on the added resources.
     * ```javascript
     * const [resource] = await resourceStore.addAsync({ id });
     * // resource.events is available (assuming EventStore is loaded and so on)
     * ```
     */
    addAsync(records: SchedulerResourceModel|SchedulerResourceModel[]|Partial<ResourceModelConfig>|Partial<ResourceModelConfig>[], silent?: boolean): Promise<SchedulerResourceModel[]>;
    /**
     * Returns all resources that have no events assigned during the specified time range.
     */
    getAvailableResources(startDate: Date, endDate: Date): SchedulerResourceModel[];
    /**
     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally
     * fetched data into the store.
     * ```javascript
     * await resourceStore.loadDataAsync([{ id }]);
     * // resourceStore.first.events is available
     * ```
     */
    loadDataAsync(data: Partial<ResourceModelConfig>[]): Promise<void>;
}

type PartOfProjectClassConfig = {
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
}

export class PartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<PartOfProjectClassConfig>);
}

export const PartOfProject : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & PartOfProjectClass>

type ProjectCrudManagerClassConfig = {
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * Configuration of the JSON encoder used by the <em>Crud Manager</em>.
     */
    encoder: { requestData?: object }
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.
     * ```javascript
     * transport : {
     *     load : {
     *         url       : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName : 'data',
     *         // pass extra HTTP request parameter
     *         params    : {
     *             foo : 'bar'
     *         }
     *     },
     *     sync : {
     *         url     : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers : {
     *             'Content-Type' : 'application/json'
     *         }
     *     }
     * }
     * ```
     * Since the class uses Fetch API you can use
     * any its <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request interface</a> options:
     * ```javascript
     * transport : {
     *     load : {
     *         url         : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName   : 'data',
     *         // pass few Fetch API options
     *         method      : 'GET',
     *         credentials : 'include',
     *         cache       : 'no-cache'
     *     },
     *     sync : {
     *         url         : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers     : {
     *             'Content-Type' : 'application/json'
     *         },
     *         credentials : 'include'
     *     }
     * }
     * ```
     * An object where you can set the following possible properties:
     */
    transport: { load?: object, sync?: object }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

export class ProjectCrudManagerClass implements SchedulerProjectCrudManagerClass {
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<ProjectCrudManagerClassConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Cancels a sent request.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a <em>Crud Manager</em> request to the server.
     */
    sendRequest(request: { type: 'load'|'sync', url: string, data: string, params: object, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

export const ProjectCrudManager : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectCrudManagerClass>

type StateTrackingManagerConfig = {
    /**
     * Whether to start transaction recording automatically in case the Manager is enabled.
     * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.
     * records any changes in its monitored stores. The transaction lasts for <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#config-autoRecordTransactionStopTimeout">autoRecordTransactionStopTimeout</a> and
     * afterwards creates one undo/redo step, including all changes in the stores during that period of time.
     * In non auto recording mode you have to call <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#function-startTransaction">startTransaction</a> / <a href="#Core/data/stm/StateTrackingManager#function-stopTransaction">stopTransaction</a> to start and end
     * a transaction.
     */
    autoRecord: boolean
    /**
     * The transaction duration (in ms) for the auto recording mode <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager#config-autoRecord">autoRecord</a>
     */
    autoRecordTransactionStopTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Default manager disabled state
     */
    disabled: boolean
    /**
     * Function to create a transaction title if none is provided.
     * The function receives a transaction and should return a title.
     */
    getTransactionTitle: Function
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the disabled state of the STM changes
     */
    onDisabled: Function|string
    /**
     * Fired upon state undo/redo queue reset.
     */
    onQueueReset: Function|string
    /**
     * Fired upon state recording operation starts.
     */
    onRecordingStart: Function|string
    /**
     * Fired upon state recording operation stops.
     */
    onRecordingStop: Function|string
    /**
     * Fired upon state restoration operation starts.
     */
    onRestoringStart: Function|string
    /**
     * Fired upon state restoration operation stops.
     */
    onRestoringStop: Function|string
}

/**
 * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager">StateTrackingManager</a> subclass that's aware of the Scheduler Pro data structure specifics,
 * namely supports tracking of event segment changes.
 * There is normally no need to deal with this class manually since it's instantiated automatically by the project
 * and can be reached like this:
 * ```javascript
 * project.stm
 * ```
 * <h2>Tracking store changes</h2>
 * Tracks the state of every store regist...
 */
export class StateTrackingManager extends CoreStateTrackingManager {
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Base constructor, passes arguments to <a href="https://bryntum.com/products/gantt/docs/api/Core/Base#function-construct">construct</a>.
     */
    constructor(...args: object[]);
}

type SchedulerProAssignmentModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|Model
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|SchedulerProResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * A numeric, percent-like value, indicating the &quot;contribution level&quot;
     * of the resource availability to the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * Number 100 means that the assigned <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-resource">resource</a> spends all its working time
     * on the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * And number 50 means that the resource spends only half of its available time
     * on the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * Setting the value to 0 will unassign the resource (and remove the assignment)
     */
    units: number
}

/**
 * This class represent a single assignment of a resource to an event in Scheduler Pro. It has a lot in common with
 * Schedulers AssignmentModel, they are separate models but they share much functionality using the
 * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/AssignmentModelMixin">AssignmentModelMixin</a> mixin.
 * It is a subclass of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a> class. Please refer to the documentation for that class to become
 * familiar with the base interface of this class.
 * <h2>Fields and refe...
 */
export class SchedulerProAssignmentModel extends Model implements AssignmentModelMixinClass {
    /**
     * Specify `false` to opt out of drawing dependencies from/to this assignment
     */
    drawDependencies: boolean
    /**
     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after
     * load it will be populated with the actual event and not its id. This field is not persistable.
     */
    event: string|number|EventModel|Model
    /**
     * Id for the event to assign
     */
    eventId: string|number
    /**
     * Convenience property to get the name of the associated event.
     */
    readonly eventName: string
    /**
     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')
     */
    isPersistable: boolean
    /**
     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after
     * load it will be populated with the actual resource and not its id. This field is not persistable.
     */
    resource: string|number|SchedulerProResourceModel
    /**
     * Id for the resource to assign to
     */
    resourceId: string|number
    /**
     * Convenience property to get the name of the associated resource.
     */
    readonly resourceName: string
    /**
     * A numeric, percent-like value, indicating the &quot;contribution level&quot;
     * of the resource availability to the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * Number 100 means that the assigned <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-resource">resource</a> spends all its working time
     * on the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * And number 50 means that the resource spends only half of its available time
     * on the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-event">event</a>.
     * Setting the value to 0 will unassign the resource (and remove the assignment)
     */
    units: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProAssignmentModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource associated with this assignment.
     */
    getResource(): SchedulerResourceModel;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * assignment.set('resourceId', 2);
     * // assignment.resource is not yet resolved
     * 
     * await assignment.setAsync('resourceId', 2);
     * // assignment.resource is resolved
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Returns a textual representation of this assignment (e.g. Mike 50%).
     */
    toString(): string;
}

type SchedulerProCalendarIntervalModelConfig = {
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    iconCls: string
    /**
     * The &quot;is working&quot; flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
}

/**
 * This is a documentation-only class, representing an interval in the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarModel">calendar</a>
 * Please refer to the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/guides/basics/calendars.md">calendars guide</a> for details
 */
export class SchedulerProCalendarIntervalModel {
    /**
     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    cls: string
    /**
     * The end date of the fixed (not recurrent) time interval.
     */
    endDate: Date
    /**
     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.
     * *Note that only non working intervals are visible.*
     */
    iconCls: string
    /**
     * The &quot;is working&quot; flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,
     * denoting non-working intervals.
     */
    isWorking: boolean
    /**
     * The end date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentEndDate: string
    /**
     * The start date of the recurrent time interval. Should be specified as any expression, recognized
     * by the excellent <a href="http://bunkat.github.io/later/">later</a> library.
     */
    recurrentStartDate: string
    /**
     * The start date of the fixed (not recurrent) time interval.
     */
    startDate: Date
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProCalendarIntervalModelConfig>);
    /**
     * Returns an internal representation of the recurrent end date from the `later` library.
     */
    getEndDateSchedule(): object;
    /**
     * Returns an internal representation of the recurrent start date from the `later` library.
     */
    getStartDateSchedule(): object;
    /**
     * Whether this interval is recurrent (both `recurrentStartDate` and `recurrentEndDate` are present and parsed correctly
     * by the `later` library).
     */
    isRecurrent(): boolean;
    /**
     * Whether this interval is static - both `startDate` and `endDate` are present.
     */
    isStatic(): boolean;
}

type SchedulerProCalendarModelConfig = {
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Start expanded or not
     */
    expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * If using the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a> config, you can set this to `true` to
     * <em>not</em> convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">Intervals</a> collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to a store containing the intervals. When
     * serializing it will be converted back to an array.
     */
    intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The flag, indicating, whether the &quot;unspecified&quot; time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
}

/**
 * This class represents a calendar in the Scheduler Pro project. It contains a collection of the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">CalendarIntervalModel</a>.
 * Every interval can be either recurrent (regularly repeating in time) or static. These intervals can be visualized
 * by the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/ResourceNonWorkingTime">ResourceNonWorkingTime</a> or <a href="#Scheduler/feature/NonWorkingTime">NonWorkingTime</a> features.
 * Please refer to the <a href="#Schedul...
 */
export class SchedulerProCalendarModel extends Model implements PartOfProjectClass {
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * A CSS class to add to calendar interval elements rendered in the UI.
     */
    cls: string
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Start expanded or not
     */
    readonly expanded: boolean
    /**
     * A CSS class defining an icon to show in non-working time elements rendered in the UI.
     */
    iconCls: string
    /**
     * If using the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a> config, you can set this to `true` to
     * <em>not</em> convert this calendar to the specified time zone.
     */
    ignoreTimeZone: boolean
    /**
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">Intervals</a> collection of the calendar. Accepts an array
     * as its input, which behind the scenes will be converted to a store containing the intervals. When
     * serializing it will be converted back to an array.
     */
    intervals: CalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]|Store
    /**
     * The calendar name.
     */
    name: string
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * The flag, indicating, whether the &quot;unspecified&quot; time (time that does not belong to any interval
     * is working (`true`) or not (`false`).
     */
    unspecifiedTimeIsWorking: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProCalendarModelConfig>, store?: Store, meta?: object);
    /**
     * This method adds a single <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">CalendarIntervalModel</a> to the internal collection of the
     * calendar
     */
    addInterval(interval: SchedulerProCalendarIntervalModel|Partial<CalendarIntervalModelConfig>): SchedulerProCalendarIntervalModel[];
    /**
     * This method adds an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarIntervalModel">CalendarIntervalModel</a> to the internal collection of the
     * calendar
     */
    addIntervals(intervals: SchedulerProCalendarIntervalModel[]|Partial<CalendarIntervalModelConfig>[]): SchedulerProCalendarIntervalModel[];
    /**
     * Calculate the working time duration for specific interval, in milliseconds.
     */
    calculateDurationMs(startDate: Date, endDate: Date): number;
    /**
     * Calculates the end date of the time interval which starts at `startDate` and has `durationMs` working time
     * duration (in milliseconds).
     */
    calculateEndDate(startDate: Date, durationMs: number): Date;
    /**
     * Calculates the start date of the time interval which ends at `endDate` and has `durationMs` working time
     * duration (in milliseconds).
     */
    calculateStartDate(endDate: Date, durationMs: number): Date;
    /**
     * This method removes all intervals from the internal collection of the calendar
     */
    clearIntervals(silent?: boolean): void;
    /**
     * Returns non-working time ranges between the provided dates.
     */
    getNonWorkingTimeRanges(startDate: Date, endDate: Date): {name: string, startDate: Date, endDate: Date}[];
    /**
     * Returns working time ranges between the provided dates.
     */
    getWorkingTimeRanges(startDate: Date, endDate: Date): {name: string, startDate: Date, endDate: Date}[];
    /**
     * Checks if there is a working time interval in the provided time range
     */
    isWorkingTime(startDate: Date, endDate: Date): boolean;
    /**
     * Returns the earliest point at which a working period of time starts, following the given date.
     * Can be the date itself, if it occurs during working time.
     */
    skipNonWorkingTime(date: Date, isForward?: boolean): Date;
}

type SchedulerProDependencyModelConfig = {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Bidirectional, drawn with arrows in both directions
     */
    bidirectional: boolean
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class to apply to lines drawn for the dependency
     */
    cls: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * From event, id of source event
     */
    from: string|number
    /**
     * Gets/sets the source event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-from">from</a> instead.
     */
    fromEvent: string|number|SchedulerEventModel
    /**
     * Start side on source (top, left, bottom, right)
     */
    fromSide: 'top'|'left'|'bottom'|'right'
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * The magnitude of this dependency's lag (the number of units).
     */
    lag: number
    /**
     * The units of this dependency's lag, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;ms&quot; (milliseconds)
     * * &quot;s&quot; (seconds)
     * * &quot;m&quot; (minutes)
     * * &quot;h&quot; (hours)
     * * &quot;d&quot; (days)
     * * &quot;w&quot; (weeks)
     * * &quot;M&quot; (months)
     * * &quot;y&quot; (years)
     * 
     * This field is readonly after creation, to change `lagUnit` use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#function-setLag">setLag()</a>.
     */
    lagUnit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * To event, id of target event
     */
    to: string|number
    /**
     * Gets/sets the target event of the dependency.
     * Accepts multiple formats but always returns an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/EventModel">EventModel</a>.
     * <strong>NOTE:</strong> This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you
     * need to remap, consider using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#field-to">to</a> instead.
     */
    toEvent: string|number|SchedulerEventModel
    /**
     * End side on target (top, left, bottom, right)
     */
    toSide: 'top'|'left'|'bottom'|'right'
    /**
     * Dependency type, see static property <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel#property-Type-static">Type</a>
     */
    type: number
}

/**
 * This model represents a dependency between two events, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/DependencyStore">DependencyStore</a>.
 * It is a subclass of the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/DependencyBaseModel">DependencyBaseModel</a> class, which in its turn subclasses
 * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Please refer to documentation of those classes to become familiar with the base interface of
 * this class.
 * <h2>Fields and references</h2>
 * A Dependency has a few predefined fiel...
 */
export class SchedulerProDependencyModel extends DependencyBaseModel implements PartOfProjectClass {
    /**
     * Set to `false` to ignore this dependency in scheduling
     */
    active: boolean
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * The calendar of the dependency used to take `lag` duration into account.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProDependencyModelConfig>, store?: Store, meta?: object);
}

type EventModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     * All entities are by default assigned to the project calendar, provided as the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-calendar">calendar</a> option.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * Field defining the constraint boundary date, if applicable.
     */
    constraintDate: Date
    /**
     * Field storing the event constraint alias or NULL if not constraint set.
     * Valid values are:
     * 
     * * &quot;finishnoearlierthan&quot;
     * * &quot;finishnolaterthan&quot;
     * * &quot;mustfinishon&quot;
     * * &quot;muststarton&quot;
     * * &quot;startnoearlierthan&quot;
     * * &quot;startnolaterthan&quot;
     * 
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * A calculated field storing the <em>early end date</em> of the event.
     * The <em>early end date</em> is the earliest possible date the event can finish.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    earlyEndDate: Date
    /**
     * A calculated field storing the <em>early start date</em> of the event.
     * The <em>early start date</em> is the earliest possible date the event can start.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early start date matches the project start date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    earlyStartDate: Date
    /**
     * The numeric part of the event effort (the number of units).
     */
    effort: number
    /**
     * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling
     * mode.
     * If it is `true`, then <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-effort">effort</a> is kept intact when new duration is provided and
     * assignment <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-units">units</a> is updated.
     * If it is `false`, then assignment <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-units">units</a> is kept
     * intact when new duration is provided and <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-effort">effort</a> is updated.
     */
    effortDriven: boolean
    /**
     * The unit part of the event effort, defaults to &quot;h&quot; (hours). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-setEffort">setEffort</a> call.
     */
    effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the event.
     * By default the field value is `false` resulting in that the event performs only when
     * its own <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-calendar">calendar</a> and some of the assigned
     * resource calendars allow that.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked events and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies
     * or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * Note about the event
     */
    note: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     * UI fields representing this data field are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    percentDone: number
    /**
     * Buffer time after event end. Specified in a human-friendly form as accepted by
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-parseDuration-static">parseDuration</a>:
     * ```javascript
     * // Create event model with a 1 hour buffer time after the event end
     * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })
     * ```
     * Used by the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/EventBuffer">EventBuffer</a> feature.
     */
    postamble: string
    /**
     * Buffer time before event start. Specified in a human-friendly form as accepted by
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-parseDuration-static">parseDuration</a>:
     * ```javascript
     * // Create event model with a 30 minutes buffer time before the event start
     * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })
     * ```
     * Used by the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/EventBuffer">EventBuffer</a> feature.
     */
    preamble: string|Duration
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * The array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">resources</a> which are assigned to this event.
     */
    resources: string|number
    /**
     * This field defines the event scheduling mode. Based on this field some fields of the event
     * will be &quot;fixed&quot; (should be provided by the user) and some - computed.
     * Possible values are:
     * 
     * * 
     * `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on
     * information about its start/end dates, event own calendar (project calendar if there's no one) and
     * calendars of the assigned resources.
     * 
     * * 
     * `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed
     * dynamically, based on the assigned resources information. When duration of such event increases,
     * its effort is increased too. The mode tends to preserve user provided duration so changing effort
     * results adjusting assignment units and vise-versa assignment changes adjusts effort.
     * 
     * 
     */
    schedulingMode: 'Normal'|'FixedDuration'
    /**
     * Segments of the event that appear when the event gets <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-splitToSegments">splitToSegments</a>.
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary events
     * except the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-manuallyScheduled">manually scheduled</a> events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
    /**
     * This field is automatically set to `true` when the event is &quot;unscheduled&quot; - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such event is not rendered,
     * and does not affect the schedule of its successors.
     * To schedule the event back, enter one of the missing values, so that there's enough information
     * to calculate start date, end date and duration.
     * Note, that setting this field manually does nothing. This field should be persisted, but not updated
     * manually.
     */
    unscheduled: boolean
}

/**
 * This class represent a single event in your schedule, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a>.
 * It is a subclass of the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a>, which is in turn subclass of <a href="#Core/data/Model">Model</a>.
 * Please refer to documentation of that class to become familiar with the base interface of the event.
 * <h2>Async date calculations</h2>
 * A record created from an `EventModel` is normally part of an <code>E...
 */
export class EventModel extends TimeSpan implements RecurringTimeSpanClass, EventModelMixinClass, PercentDoneMixinClass, PartOfProjectClass {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     * All entities are by default assigned to the project calendar, provided as the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-calendar">calendar</a> option.
     */
    calendar: SchedulerProCalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Field defining the constraint boundary date, if applicable.
     */
    constraintDate: Date
    /**
     * Field storing the event constraint alias or NULL if not constraint set.
     * Valid values are:
     * 
     * * &quot;finishnoearlierthan&quot;
     * * &quot;finishnolaterthan&quot;
     * * &quot;mustfinishon&quot;
     * * &quot;muststarton&quot;
     * * &quot;startnoearlierthan&quot;
     * * &quot;startnolaterthan&quot;
     * 
     */
    constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    duration: number
    /**
     * A calculated field storing the <em>early end date</em> of the event.
     * The <em>early end date</em> is the earliest possible date the event can finish.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    readonly earlyEndDate: Date
    /**
     * A calculated field storing the <em>early start date</em> of the event.
     * The <em>early start date</em> is the earliest possible date the event can start.
     * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.
     * If the event has no predecessors nor other constraints, its early start date matches the project start date.
     * UI fields representing this data field are naturally disabled since the field is readonly.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    readonly earlyStartDate: Date
    /**
     * The event effective calendar. Returns the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-calendar">project calendar</a> if the event has no own
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-calendar">calendar</a> provided.
     */
    effectiveCalendar: SchedulerProCalendarModel
    /**
     * The numeric part of the event effort (the number of units).
     */
    effort: number
    /**
     * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling
     * mode.
     * If it is `true`, then <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-effort">effort</a> is kept intact when new duration is provided and
     * assignment <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-units">units</a> is updated.
     * If it is `false`, then assignment <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel#field-units">units</a> is kept
     * intact when new duration is provided and <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-effort">effort</a> is updated.
     */
    effortDriven: boolean
    /**
     * The unit part of the event effort, defaults to &quot;h&quot; (hours). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change it use the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-setEffort">setEffort</a> call.
     */
    readonly effortUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * A string (either a single date or multiple dates separated by comma) or an array of strings containing
     * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating
     * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations
     * won't create another copy of this occurrence again.
     * ```javascript
     * {
     *     id: 7,
     *     startDate: '2021-10-12T14:00:00',
     *     endDate: '2021-10-12T15:00:00',
     *     name: 'Lunch',
     *     resourceId: 'hotel',
     *     recurrenceRule: 'FREQ=DAILY;COUNT=5',
     *     exceptionDates: ['2021-10-14']
     * }
     * ```
     * Use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#function-addExceptionDate">addExceptionDate</a> method to add an individual entry to the dates array:
     * ```javascript
     * // Break the link between the occurrence and its base.
     * // This also adds the occurrence date as an exception date
     * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.
     * occurrence.recurringTimeSpan = null;
     * 
     * // now the occurrence is an individual record that can be changed & persisted freely
     * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));
     * ```
     * <strong>Note:</strong> The dates in this field get automatically removed when the event changes its <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-startDate">start date</a>.
     */
    exceptionDates: string|string[]
    /**
     * The event first segment or null if the event is not segmented.
     */
    firstSegment: EventSegmentModel
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * Property which encapsulates the effort's magnitude and units.
     * UI fields representing this property are disabled for summary events.
     * See <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-isEditable">isEditable</a> for details.
     */
    fullEffort: Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * When set to `true` the calendars of the assigned resources
     * are not taken into account when scheduling the event.
     * By default the field value is `false` resulting in that the event performs only when
     * its own <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-calendar">calendar</a> and some of the assigned
     * resource calendars allow that.
     */
    ignoreResourceCalendar: boolean
    /**
     * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't
     * affect linked events and affect its assigned resources allocation).
     */
    inactive: boolean
    /**
     * Indicates if the task is complete (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Indicates if the task is in progress (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     * This is essentially used by the Calendar package to determine if an event should
     * go into the all day zone of a DayView.
     */
    readonly isInterDay: boolean
    /**
     * Indicates if the timespan is an occurrence of another recurring timespan.
     */
    readonly isOccurrence: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Indicates if the timespan is recurring.
     */
    readonly isRecurring: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Indicates if the task is started (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero).
     */
    isStarted: boolean
    /**
     * The event last segment or null if the event is not segmented.
     */
    lastSegment: EventSegmentModel
    /**
     * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies
     * or constraints.
     */
    manuallyScheduled: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * Note about the event
     */
    note: string
    /**
     * If this event is an <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">occurrence</a> of a recurring event, then this
     * property yields its zero-based occurrence index in the sequence.
     */
    readonly occurrenceIndex: number
    /**
     * Returns event end date adjusted by <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-postamble">postamble</a> (end date + duration).
     */
    readonly outerEndDate: Date
    /**
     * Returns event start date adjusted by <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-preamble">preamble</a> (start date - duration).
     */
    readonly outerStartDate: Date
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Buffer time after event end. Specified in a human-friendly form as accepted by
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-parseDuration-static">parseDuration</a>:
     * ```javascript
     * // Create event model with a 1 hour buffer time after the event end
     * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })
     * ```
     * Used by the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/EventBuffer">EventBuffer</a> feature.
     */
    postamble: string
    /**
     * Buffer time before event start. Specified in a human-friendly form as accepted by
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#function-parseDuration-static">parseDuration</a>:
     * ```javascript
     * // Create event model with a 30 minutes buffer time before the event start
     * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })
     * ```
     * Used by the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/feature/EventBuffer">EventBuffer</a> feature.
     */
    preamble: string|Duration
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * The recurrence model used for the timespan.
     */
    recurrence: RecurrenceModel
    /**
     * Name of the class representing the recurrence model, defaults to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/RecurrenceModel">RecurrenceModel</a>
     */
    recurrenceModel: string
    /**
     * The timespan recurrence rule. A string in <a href="https://tools.ietf.org/html/rfc5545#section-3.3.10">RFC-5545</a>
     * described format (&quot;RRULE&quot; expression).
     */
    recurrenceRule: string
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * This field defines the event scheduling mode. Based on this field some fields of the event
     * will be &quot;fixed&quot; (should be provided by the user) and some - computed.
     * Possible values are:
     * 
     * * 
     * `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on
     * information about its start/end dates, event own calendar (project calendar if there's no one) and
     * calendars of the assigned resources.
     * 
     * * 
     * `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed
     * dynamically, based on the assigned resources information. When duration of such event increases,
     * its effort is increased too. The mode tends to preserve user provided duration so changing effort
     * results adjusting assignment units and vise-versa assignment changes adjusts effort.
     * 
     * 
     */
    schedulingMode: 'Normal'|'FixedDuration'
    /**
     * Segments of the event that appear when the event gets <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#function-splitToSegments">splitToSegments</a>.
     */
    segments: EventSegmentModel[]
    /**
     * Set this to true if this task should be shown in the Timeline widget
     */
    showInTimeline: boolean
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     * Note that the field always returns a `Date`.
     * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its
     * duration (with reservation for other scheduling logic affecting the duration). If you want to change the
     * `startDate` and `duration`, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#function-setStartDate">setStartDate</a> instead (passing
     * `false` as the second argument).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Returns `true` if this timespan supports recurring.
     */
    supportsRecurring: boolean
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * This field is automatically set to `true` when the event is &quot;unscheduled&quot; - user has provided an empty
     * string in one of the UI editors for start date, end date or duration. Such event is not rendered,
     * and does not affect the schedule of its successors.
     * To schedule the event back, enter one of the missing values, so that there's enough information
     * to calculate start date, end date and duration.
     * Note, that setting this field manually does nothing. This field should be persisted, but not updated
     * manually.
     */
    readonly unscheduled: boolean
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventModelConfig>, store?: Store, meta?: object);
    /**
     * Assigns this event to the specified resource.
     * <em>Note:</em> The event must be part of an EventStore for this to work. If the EventStore uses single assignment
     * (loaded using resourceId) existing assignments will always be removed.
     */
    assign(resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): void;
    /**
     * If given resource is assigned to this event, returns a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModel</a> record.
     * Otherwise returns `null`
     */
    getAssignmentFor(resource: SchedulerProResourceModel): SchedulerProAssignmentModel|null;
    /**
     * Returns the event calendar.
     */
    getCalendar(): SchedulerProCalendarModel;
    /**
     * Returns the event <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-ignoreResourceCalendar">ignoreResourceCalendar</a> field value.
     */
    getIgnoreResourceCalendar(): boolean;
    /**
     * Returns the occurrences of this event over the specified time range. If the first
     * occurrence is in the time range `*this*` record is included in that position.
     */
    getOccurrencesForDateRange(startDate: Date, endDate?: Date): TimeSpan[];
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Does this recurring event have an exception on the passed date.
     */
    hasException(date: Date): boolean;
    /**
     * Returns true if this event is assigned to a certain resource.
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default, the method defines <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-endDate">endDate</a>, <a href="#Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and <a href="#Scheduler/model/mixin/EventModelMixin#field-fullDuration">fullDuration</a>
     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as
     * editable.
     */
    isEditable(fieldName: string): boolean;
    /**
     * Merges the event segments.
     * The method merges two provided event segments (and all the segment between them if any).
     */
    mergeSegments(segment1?: EventSegmentModel, segment2?: EventSegmentModel): Promise<any>;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Override of <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>'s method. If an <a href="#Scheduler/model/mixin/RecurringTimeSpan#property-isOccurrence">isOccurrence</a>
     * is passed, it is detached from its parent recurring event. If it still has a recurrence
     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence
     * an exception is added at the occurrence date.
     */
    remove(): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * eventRecord.set('duration', 4);
     * // eventRecord.endDate is not yet calculated
     * 
     * await eventRecord.setAsync('duration', 4);
     * // eventRecord.endDate is calculated
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`
     */
    setCalendar(calendar: SchedulerProCalendarModel): Promise<void>;
    /**
     * Sets the constraint type and (optionally) constraining date to the event.
     */
    setConstraint(constraintType: 'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null, constraintDate?: Date): Promise<void>;
    /**
     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`
     */
    setDuration(duration: number, unit?: string): Promise<void>;
    /**
     * Updates the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-effort">effort</a> (and optionally <a href="#SchedulerPro/model/EventModel#field-effortUnit">unit</a>) of the event.
     * Will cause the schedule to be updated - returns a `Promise`
     */
    setEffort(effort: number, unit?: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'): Promise<void>;
    /**
     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`
     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.
     */
    setEndDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Sets the event <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-ignoreResourceCalendar">ignoreResourceCalendar</a> field value and triggers rescheduling.
     */
    setIgnoreResourceCalendar(ignore: boolean): Promise<void>;
    /**
     * Either activates or deactivates the task depending on the passed value.
     * Will cause the schedule to be updated - returns a `Promise`
     */
    setInactive(inactive: boolean): Promise<void>;
    /**
     * Sets a recurrence for the timespan with a given frequency, interval, and end.
     */
    setRecurrence(recurrence: Partial<RecurrenceModelConfig>|string|RecurrenceModel, interval?: number, recurrenceEnd?: number|Date): void;
    /**
     * Sets <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel#field-segments">segments</a> field value.
     */
    setSegments(segments: EventSegmentModel[]): Promise<any>;
    /**
     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`
     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.
     */
    setStartDate(date: Date, keepDuration?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Splits the event into segments.
     */
    splitToSegments(from: Date, lag?: number, lagUnit?: string): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     */
    unassign(resource?: SchedulerResourceModel|string|number): void;
}

type EventSegmentModelConfig = {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * An encapsulation of the CSS classes to add to the rendered time span element.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a>, but may still be treated as a string. For
     * granular control of adding and removing individual classes, it is recommended to use the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/util/DomClassList">DomClassList</a> API.
     */
    cls: DomClassList|string|string[]|object
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     */
    duration: number
    /**
     * The unit part of the TimeSpan duration, defaults to &quot;d&quot; (days). Valid values are:
     * 
     * * &quot;millisecond&quot; - Milliseconds
     * * &quot;second&quot; - Seconds
     * * &quot;minute&quot; - Minutes
     * * &quot;hour&quot; - Hours
     * * &quot;day&quot; - Days
     * * &quot;week&quot; - Weeks
     * * &quot;month&quot; - Months
     * * &quot;quarter&quot; - Quarters
     * * &quot;year&quot;- Years
     * 
     * This field is readonly after creation, to change durationUnit use #setDuration().
     */
    durationUnit: 'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-duration">duration</a> and <a href="#Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * CSS class specifying an icon to apply to the rendered time span element.
     * <strong>Note</strong>: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease
     * performance because feature will refer to the DOM to get exact size of the element.
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The name of the time span (or Event / Task)
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * The array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceModel">resources</a> which are assigned to this event.
     */
    resources: string|number
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * Note that the field always returns a `Date`.
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * A CSS style string (applied to `style.cssText`) or object (applied to `style`)
     * ```javascript
     * record.style = 'color: red;font-weight: 800';
     * ```
     */
    style: string
    /**
     * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.
     * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for
     * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be
     * converted to the configured timezone.
     * For more information about timezone conversion, se <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ProjectModel#config-timeZone">timeZone</a>.
     * This field will not <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> by default.
     */
    timeZone: string|number
}

/**
 * This class represents an individual segment of a split event.
 */
export class EventSegmentModel extends TimeSpan implements EventModelMixinClass, PercentDoneMixinClass {
    /**
     * A field marking event as all day(s) spanning event.
     * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.
     */
    allDay: boolean
    /**
     * Returns all assignments for the event. Event must be part of the store for this method to work.
     */
    readonly assignments: SchedulerAssignmentModel[]
    /**
     * Specify false to prevent the event from being dragged (if EventDrag feature is used)
     */
    draggable: boolean
    /**
     * The numeric part of the timespan's duration (the number of units).
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    duration: number
    /**
     * The end date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a> for details.
     * Note that the field always returns a `Date`.
     */
    endDate: string|Date
    /**
     * The event this segment belongs to.
     */
    readonly event: EventModel
    /**
     * Controls the primary color of the event. For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor|string|null
    /**
     * Controls this events appearance, see Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for
     * available options.
     */
    eventStyle: 'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null
    /**
     * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,
     * setting it will update the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#field-durationUnit">durationUnit</a> fields.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     */
    fullDuration: Partial<DurationConfig>|Duration
    /**
     * The unique identifier of a task (mandatory)
     */
    id: string|number
    /**
     * Indicates if the task is complete (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Returns true if event can be drag and dropped
     */
    isDraggable: boolean
    /**
     * Indicates if the task is in progress (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Flag which indicates that this event is an interday event. This means that it spans
     * an entire day or multiple days.
     * This is essentially used by the Calendar package to determine if an event should
     * go into the all day zone of a DayView.
     */
    readonly isInterDay: boolean
    /**
     * Returns false if the event is not persistable. By default it always is, override this getter if you need
     * custom logic.
     */
    readonly isPersistable: boolean
    /**
     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can
     * be resized.
     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.
     */
    readonly isResizable: boolean|string
    /**
     * Indicates if the task is started (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero).
     */
    isStarted: boolean
    /**
     * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.
     */
    milestoneWidth: number
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Returns all predecessor dependencies of this event
     */
    readonly predecessors: DependencyBaseModel[]
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also
     * specify `'start'` or `'end'` to only allow resizing in one direction
     */
    resizable: boolean|string
    /**
     * Returns the first assigned resource, or assigns a resource
     */
    resource: SchedulerResourceModel
    /**
     * Id of the resource this event is associated with (only usable for single assignments). We recommend
     * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`
     * will have an assignment in AssignmentStore generated.
     */
    resourceId: string|number
    /**
     * Ids of the resources this event is associated with (can be used for for multiple assignments).
     * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.
     * It only applies if is configured with `perist: true`.
     * ```javascript
     *   class CustomEventModel extends EventModel {
     *       static get $name() {
     *           return 'CustomEventModel';
     *       }
     * 
     *       static get fields() {
     *           return [
     *               { name : 'resourceIds', persist : true }
     *           ];
     *       }
     *   };
     * 
     *   const
     *       resources   = [
     *           { id : 'r1', name : 'Celia' },
     *           { id : 'r2', name : 'Lee' },
     *           { id : 'r3', name : 'Macy' },
     *           { id : 'r4', name : 'Madison' }
     *       ],
     *       events      = [
     *           {
     *               id          : 1,
     *               resourceIds : ['r1', 'r2']
     *               ...
     *           },
     *           {
     *               id          : 2,
     *               resourceIds : ['r3', 'r4']
     *               ...
     *           }
     *       ];
     * 
     *   const scheduler = new Scheduler({
     *       ...
     *       eventStore : {
     *           modelClass : CustomEventModel,
     *           data       : events
     *       },
     *       ...
     *   });
     * ```
     */
    resourceIds: string[]|number[]
    /**
     * Returns all resources assigned to an event.
     */
    readonly resources: SchedulerResourceModel[]
    /**
     * The start date of a time span (or Event / Task).
     * Uses <a href="https://bryntum.com/products/gantt/docs/api/Core/helper/DateHelper#property-defaultFormat-static">DateHelper.defaultFormat</a> to convert a
     * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and
     * change the dateFormat for this field.
     * UI fields representing this data field are disabled for summary tasks. See <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#function-isEditable">isEditable</a>
     * for details.
     * Note that the field always returns a `Date`.
     * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its
     * duration (with reservation for other scheduling logic affecting the duration). If you want to change the
     * `startDate` and `duration`, use <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan#function-setStartDate">setStartDate</a> instead (passing
     * `false` as the second argument).
     */
    startDate: string|Date
    /**
     * Set this field to `false` to opt out of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/feature/StickyEvents">sticky event content</a>
     * (keeping event text in view while scrolling).
     */
    stickyContents: boolean
    /**
     * Returns all successor dependencies of this event
     */
    readonly successors: DependencyBaseModel[]
    /**
     * Alias for `event`, to better match naming in Gantt.
     */
    readonly task: EventModel
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<EventSegmentModelConfig>, store?: Store, meta?: object);
    /**
     * Assigns this event to the specified resource.
     * <em>Note:</em> The event must be part of an EventStore for this to work. If the EventStore uses single assignment
     * (loaded using resourceId) existing assignments will always be removed.
     */
    assign(resource: SchedulerResourceModel|string|number|SchedulerResourceModel[]|string[]|number[], removeExistingAssignments?: boolean): void;
    /**
     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource
     * with specified id.
     */
    getResource(resourceId?: string): SchedulerResourceModel;
    /**
     * Returns true if this event is assigned to a certain resource.
     */
    isAssignedTo(resource: SchedulerResourceModel|string|number): boolean;
    /**
     * Defines if the given event field should be manually editable in UI.
     * You can override this method to provide your own logic.
     * By default, the method defines <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-endDate">endDate</a>, <a href="#Scheduler/model/mixin/EventModelMixin#field-duration">duration</a> and <a href="#Scheduler/model/mixin/EventModelMixin#field-fullDuration">fullDuration</a>
     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as
     * editable.
     */
    isEditable(fieldName: string): boolean;
    /**
     * Reassigns an event from an old resource to a new resource
     */
    reassign(oldResourceId: SchedulerResourceModel|string|number, newResourceId: SchedulerResourceModel|string|number): void;
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * ```javascript
     * eventRecord.set('duration', 4);
     * // eventRecord.endDate is not yet calculated
     * 
     * await eventRecord.setAsync('duration', 4);
     * // eventRecord.endDate is calculated
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Shift the dates for the date range by the passed amount and unit
     */
    shift(unit: 'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y', amount: number): Promise<any>;
    /**
     * Unassigns this event from the specified resource
     */
    unassign(resource?: SchedulerResourceModel|string|number): void;
}

type SchedulerProProjectModelConfig = {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event &quot;attached&quot; to this date, according to the user intention.
     * Depending on your use case, you might want to disable this behaviour.
     */
    addConstraintOnDateSet: boolean
    /**
     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is
     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic
     * is not involved.
     * If <strong>true</strong>, it will add/remove one hour when calculating end date. For example:
     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:
     * ```javascript
     * {
     *     startDate    : '2020-10-20',
     *     duration     : 10 * 24 + 1,
     *     durationUnit : 'hour'
     * }
     * ```
     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST
     * transition the SchedulerPro project will add one more hour when calculating the end date.
     * Also this may occur when day with DST transition is working but there are non-working intervals between that day
     * and event end date.
     * ```javascript
     * {
     *     calendar         : 1,
     *     calendarsData    : [
     *         {
     *             id           : 1,
     *             startDate    : '2020-10-26',
     *             endDate      : '2020-10-27',
     *             isWorking    : false
     *         }
     *     ],
     *     eventsData       : [
     *         {
     *             id           : 1,
     *             startDate    : '2020-10-20',
     *             endDate      : '2020-10-30'
     *         },
     *         {
     *             id           : 2,
     *             startDate    : '2020-10-20',
     *             duration     : 10 * 24 + 1,
     *             durationUnit : 'hour'
     *         }
     *     ]
     * }
     * ```
     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.
     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.
     * If <strong>false</strong>, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.
     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated
     * to 2020-10-30.
     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:
     * ```javascript
     * eventStore.getById(1).getDuration('day')  // 10.041666666666666
     * eventStore.getById(1).getDuration('hour') // 241
     * ```
     */
    adjustDurationToDST: boolean
    /**
     * The constructor of the assignment model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#SchedulerPro/model/ProjectModel#property-assignmentStore">assignmentStore</a>
     */
    assignmentModelClass: typeof AssignmentModel
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/AssignmentStore">AssignmentStore</a> instance or a config object.
     */
    assignmentStore: SchedulerProAssignmentStore|Partial<AssignmentStoreConfig>
    /**
     * The constructor to create an assignment store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/AssignmentStore">AssignmentStore</a>
     */
    assignmentStoreClass: typeof AssignmentStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore">assignmentStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModels</a> or its configuration objects.
     */
    assignments: SchedulerProAssignmentModel[]|Partial<AssignmentModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore">assignmentStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModels</a> or its configuration
     * objects.
     */
    assignmentsData: SchedulerProAssignmentModel[]
    /**
     * Specify `true` to automatically call <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> method on the next frame after creation.
     * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to
     * register its stores before loading starts.
     */
    autoLoad: boolean
    /**
     * `true` to automatically persist store changes after edits are made in any of the stores monitored.
     * Please note that sync request will not be invoked immediately but only after
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSyncTimeout">autoSyncTimeout</a> interval.
     */
    autoSync: boolean
    /**
     * The timeout in milliseconds to wait before persisting changes to the server.
     * Used when <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> is set to `true`.
     */
    autoSyncTimeout: number
    /**
     * An object where property names with a truthy value indicate which events should bubble up the ownership
     * hierarchy when triggered.
     * ```javascript
     * const container = new Container({
     *     items : [
     *        { type : 'text', bubbleEvents : { change : true }}
     *     ],
     * 
     *     listeners : {
     *         change() {
     *             // Will catch change event from the text field
     *         }
     *     }
     * });
     * ```
     */
    bubbleEvents: object
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|SchedulerProCalendarModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/CalendarManagerStore">CalendarManagerStore</a> instance or a config object.
     */
    calendarManagerStore: SchedulerProCalendarManagerStore|Partial<CalendarManagerStoreConfig>
    /**
     * The constructor to create a calendar store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/CalendarManagerStore">CalendarManagerStore</a>
     */
    calendarManagerStoreClass: typeof CalendarManagerStore
    /**
     * The constructor of the calendar model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a>
     */
    calendarModelClass: typeof CalendarModel
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-eventStore">eventStore</a>. Should be a <a href="#SchedulerPro/model/CalendarModel">CalendarModel</a>
     * array or its configuration objects.
     */
    calendars: SchedulerProCalendarModel[]|Partial<CalendarModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarModel">CalendarModel</a> or it's configuration objects.
     */
    calendarsData: SchedulerProCalendarModel[]
    /**
     * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.
     * ```javascript
     * const container = new Container({
     *     callOnFunctions : true
     * 
     *     onHide() {
     *          // Do something when the 'hide' event is fired
     *     }
     * });
     * ```
     */
    callOnFunctions: boolean
    /**
     * Sets the list of stores controlled by the CRUD manager.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load`
     * and `sync` requests. Learn more in the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     * Store can be provided by itself, its storeId or as a <em>store descriptor</em>.
     */
    crudStores: Store[]|string[]|CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per month
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `1 month` the system understands that it
     * actually means `30 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per week
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `2 weeks` the system understands that it
     * actually means `14 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerWeek: number
    /**
     * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.
     * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render
     * before engine has normalized the data. Given un-normalized data events will snap into place when
     * calculations are finished.
     * The Gantt chart will be read-only until the initial calculations are finished.
     */
    delayCalculation: boolean
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore">dependencyStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/DependencyModel">DependencyModels</a> or its configuration objects.
     */
    dependencies: SchedulerProDependencyModel[]|Partial<DependencyModelConfig>[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * 
     * * `ToEvent` - successor calendar will be used (default);
     * * `FromEvent` - predecessor calendar will be used;
     * * `Project` - the project calendar will be used.
     * 
     */
    dependenciesCalendar: 'ToEvent'|'FromEvent'|'Project'
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore">dependencyStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/DependencyModel">DependencyModels</a> or its configuration
     * objects.
     */
    dependenciesData: SchedulerProDependencyModel[]
    /**
     * The constructor of the dependency model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#SchedulerPro/model/ProjectModel#property-dependencyStore">dependencyStore</a>
     */
    dependencyModelClass: typeof DependencyModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/DependencyStore">DependencyStore</a> instance or a config object.
     */
    dependencyStore: SchedulerProDependencyStore|Partial<DependencyStoreConfig>
    /**
     * The constructor to create a dependency store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/DependencyStore">DependencyStore</a>
     */
    dependencyStoreClass: typeof DependencyStore
    /**
     * Set to `true` to enable calculation progress notifications.
     * When enabled the project fires <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#event-progress">progress</a> event.
     * <strong>Note</strong>: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.
     */
    enableProgressNotifications: boolean
    /**
     * Configuration of the JSON encoder used by the <em>Crud Manager</em>.
     */
    encoder: { requestData?: object }
    /**
     * The constructor of the event model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#SchedulerPro/model/ProjectModel#property-eventStore">eventStore</a>
     */
    eventModelClass: typeof EventModel
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    eventStore: EventStore|Partial<EventStoreConfig>
    /**
     * The constructor to create an event store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a>
     */
    eventStoreClass: typeof EventStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-eventStore">eventStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel">EventModels</a> or its configuration objects.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-eventStore">eventStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel">EventModels</a> or its configuration objects.
     */
    eventsData: EventModel[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per day
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `5 days` the system understands that it
     * actually means `120 hours` and schedules accordingly.
     */
    hoursPerDay: number
    /**
     * Project data as a JSON string, used to populate its stores.
     * ```javascript
     * const project = new ProjectModel({
     *     json : '{&quot;eventsData&quot;:[...],&quot;resourcesData&quot;:[...],...}'
     * }
     * ```
     */
    json: string
    /**
     * The listener set for this object.
     * An object whose property names are the names of events to handle, or options which modifiy
     * <strong>how</strong> the handlers are called.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a> for details about the options.
     * Listeners can be specified in target class config and they will be merged with any listeners specified in
     * the instantiation config. Class listeners will be fired first:
     * ```javascript
     * class MyStore extends Store({
     *     static get configurable() {
     *         return {
     *             listeners : {
     *                 myCustomEvent() {
     *                 },
     *                 load : {
     *                     prio : 10000,
     *                     fn() { // this load listener handles things first }
     *                 }
     *             }
     *         }
     *     }
     * });
     * 
     * let store = new MyStore({
     *   listeners: {
     *     load: () => { // This load listener runs after the class's },
     *     ...
     *   }
     * });
     * ```
     * <h3>Handlers as function name</h3>
     * Object event handlers may be specified as a function <strong>name</strong>. If a string is specified, it is the name
     * of the function in the `thisObj` object.
     * If the string begins with `up.`, this object's ownership hierarchy
     * (if present) is scanned for an object which implements that function name:
     * ```javascript
     * new Popup({
     *     tbar : {
     *         items : {
     *             myCombo : {
     *                 type      : 'combo',
     *                 editable  : false,
     *                 label     : 'Type',
     *                 listeners : {
     *                     // Look in owner chain for this function name
     *                     change : 'up.onFilterChange'
     *                 },
     *                 items     : [
     *                     'Event',
     *                     'Task',
     *                     'Appointment'
     *                 ]
     *             }
     *         }
     *     },
     *     items : {
     *         ...
     *     },
     *     onFilterChange({ value }) {
     *         // Handle event type selection here
     *     }
     * });
     * ```
     */
    listeners: object
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Maximum range the project calendars can iterate.
     * The value is defined in milliseconds and by default equals `5 years` roughly.
     * ```javascript
     * new SchedulerPro({
     *     project : {
     *         // adjust calendar iteration limit to 10 years roughly:
     *         // 10 years expressed in ms
     *         maxCalendarRange : 10 * 365 * 24 * 3600000,
     *         ...
     *     }
     * });
     * ```
     */
    maxCalendarRange: number
    /**
     * Field name to be used to transfer a phantom record identifier.
     */
    phantomIdField: string
    /**
     * Field name to be used to transfer a phantom parent record identifier.
     */
    phantomParentIdField: string
    /**
     * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them
     * to the server.
     */
    resetIdsBeforeSync: boolean
    /**
     * Set to `true` to reset the undo/redo queues of the internal <a href="https://bryntum.com/products/gantt/docs/api/Core/data/stm/StateTrackingManager">StateTrackingManager</a>
     * after the Project has loaded. Defaults to `false`
     */
    resetUndoRedoQueuesAfterLoad: boolean
    /**
     * Class implementing resource allocation report used by
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/ResourceHistogram">resource histogram</a> and
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/view/ResourceUtilization">resource utilization</a> views
     * for collecting resource allocation.
     */
    resourceAllocationInfoClass: ResourceAllocationInfo
    /**
     * The constructor of the resource model class, to be used in the project. Will be set as the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#config-modelClass">modelClass</a> property of the <a href="#SchedulerPro/model/ProjectModel#property-resourceStore">resourceStore</a>
     */
    resourceModelClass: typeof ResourceModel
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/ResourceStore">ResourceStore</a> instance or a config object.
     */
    resourceStore: SchedulerProResourceStore|Partial<ResourceStoreConfig>
    /**
     * The constructor to create a resource store instance with. Should be a class, subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/ResourceStore">ResourceStore</a>
     */
    resourceStoreClass: typeof ResourceStore
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a> instance or a config object.
     */
    resourceTimeRangeStore: ResourceTimeRangeStore|Partial<ResourceTimeRangeStoreConfig>
    /**
     * The constructor to create a resource time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/data/ResourceTimeRangeStore">ResourceTimeRangeStore</a>
     */
    resourceTimeRangeStoreClass: typeof ResourceTimeRangeStore
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-resourceTimeRangeStore">resourceTimeRangeStore</a>. Should be an array
     * of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModels</a> or its configuration objects.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-resourceTimeRangeStore">resourceTimeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModel</a> or it's
     * configuration objects.
     */
    resourceTimeRangesData: ResourceTimeRangeModel[]
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore">resourceStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ResourceModel">ResourceModels</a> or its configuration objects.
     */
    resources: SchedulerProResourceModel[]|Partial<ResourceModelConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore">resourceStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ResourceModel">ResourceModels</a> or its configuration objects.
     */
    resourcesData: SchedulerProResourceModel[]
    /**
     * Silences propagations caused by the project loading.
     * Applying the loaded data to the project occurs in two basic stages:
     * 
     * * Data gets into the engine graph which triggers changes propagation
     * * The changes caused by the propagation get written to related stores
     * 
     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes
     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.
     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.
     * By default the system treats the data as consistent so this option is `true`.
     * ```javascript
     * new SchedulerPro{
     *     project : {
     *         // We want scheduling engine to recalculate the data properly
     *         // so then we could save it back to the server
     *         silenceInitialCommit : false,
     *         ...
     *     }
     *     ...
     * })
     * ```
     */
    silenceInitialCommit: boolean
    /**
     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,
     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts
     * and ends on the non-working time. For such cases you can disable this option.
     * Default value is `true`
     * IMPORTANT: Setting this option to `false` also forcefully sets the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-skipNonWorkingTimeWhenSchedulingManually">skipNonWorkingTimeWhenSchedulingManually</a> option
     * to `false`.
     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.
     */
    skipNonWorkingTimeInDurationWhenSchedulingManually: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * When `true` treats parsed responses without `success` property as successful.
     * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.
     */
    skipSuccessProperty: boolean
    /**
     * Configuration options to provide to the STM manager
     */
    stm: Partial<StateTrackingManagerConfig>|CoreStateTrackingManager
    /**
     * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a
     * store to use it by id. Store identifier is used as a container name holding corresponding store data
     * while transferring them to/from the server. By default, `storeId` property is used. And in case a
     * container identifier has to differ this config can be used:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // store id is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON, so we create a new property &quot;storeIdForCrud&quot;
     *         id             : 'meow',
     *         storeIdForCrud : 'cats'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores           : ['meow'],
     *     // crud manager will get store identifier from &quot;storeIdForCrud&quot; property
     *     storeIdProperty  : 'storeIdForCrud'
     * });
     * ```
     * The `storeIdProperty` property can also be specified directly on a store:
     * ```javascript
     * class CatStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;meow&quot; but for sending/receiving store data
     *         // we want to have &quot;cats&quot; container in JSON
     *         id              : 'meow',
     *         // so we create a new property &quot;storeIdForCrud&quot;..
     *         storeIdForCrud  : 'cats',
     *         // and point CrudManager to use it as the store identifier source
     *         storeIdProperty  : 'storeIdForCrud'
     *     }
     * });
     * 
     * class DogStore extends Store {
     *     static configurable = {
     *         // storeId is &quot;dogs&quot; and it will be used as a container name for the store data
     *         storeId : 'dogs',
     *         // id is set to get a store by identifier
     *         id      : 'dogs'
     *     }
     * });
     * 
     * // create an instance to use a store by id
     * new CatStore();
     * new DogStore();
     * 
     * class MyCrudManager extends CrudManager {
     *     ...
     *     crudStores : ['meow', 'dogs']
     * });
     * ```
     */
    storeIdProperty: string
    /**
     * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the
     * <em>sync</em> response. In this case response should include only server side changes.
     * <strong>Please note that added records should still be mentioned in response to provide real identifier
     * instead of the phantom one.</strong>
     */
    supportShortSyncResponse: boolean
    /**
     * An array of store identifiers sets an alternative sync responses apply order.
     * By default, the order in which sync responses are applied to the stores is the same as they
     * registered in. But in case of some tricky dependencies between stores this order can be changed:
     * ```javascript
     * class MyCrudManager extends CrudManager {
     *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')
     *     crudStores : ['store1', 'store2', 'store3'],
     *     // but we apply changes from server to them in an opposite order
     *     syncApplySequence : ['store3', 'store2', 'store1']
     * });
     * ```
     */
    syncApplySequence: string[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * An <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a> instance or a config object.
     */
    taskStore: EventStore|Partial<EventStoreConfig>
    /**
     * A <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a> instance or a config object.
     */
    timeRangeStore: Store|Partial<StoreConfig>
    /**
     * The constructor to create a time range store instance with. Should be a class subclassing the
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store">Store</a>
     */
    timeRangeStoreClass: typeof Store
    /**
     * Data use to fill the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-timeRangeStore">timeRangeStore</a>. Should be an array of
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> or its configuration objects.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * The initial data, to fill the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/ProjectModelMixin#property-timeRangeStore">timeRangeStore</a> with.
     * Should be an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpan</a> or its configuration objects.
     */
    timeRangesData: TimeSpan[]
    /**
     * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will
     * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the
     * displayed timeline's headers as well at the start and end date of it.
     * There is currently no built-in time zone support in JavaScript which means that the converted dates
     * technically still are in the local system time zone, but adjusted to match the configured time zone.
     * <h3>DST</h3>
     * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that
     * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and
     * off.
     * <em>For example:</em>
     * 
     * * The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).
     * * The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5
     * when DST).
     * * The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when
     * `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as
     * `2022-03-27T03:00` instead.
     * 
     * If a UTC offset is provided, there is no DST support at all.
     * <h3>Editing</h3>
     * If creating new records or editing existing record dates, the dates will be interpreted as in the selected
     * time zone.
     * <h3>Saving</h3>
     * When saving or syncing data, the dates will be restored to local system time and converted to JSON
     * ISO formatted.
     */
    timeZone: string|number
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * When `true` forces the CRUD manager to process responses depending on their `type` attribute.
     * So `load` request may be responded with `sync` response for example.
     * Can be used for smart server logic allowing the server to decide when it's better to respond with a
     * complete data set (`load` response) or it's enough to return just a delta (`sync` response).
     */
    trackResponseType: boolean
    /**
     * Configuration of the AJAX requests used by <em>Crud Manager</em> to communicate with a server-side.
     * ```javascript
     * transport : {
     *     load : {
     *         url       : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName : 'data',
     *         // pass extra HTTP request parameter
     *         params    : {
     *             foo : 'bar'
     *         }
     *     },
     *     sync : {
     *         url     : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers : {
     *             'Content-Type' : 'application/json'
     *         }
     *     }
     * }
     * ```
     * Since the class uses Fetch API you can use
     * any its <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request interface</a> options:
     * ```javascript
     * transport : {
     *     load : {
     *         url         : 'http://mycool-server.com/load.php',
     *         // HTTP request parameter used to pass serialized &quot;load&quot;-requests
     *         paramName   : 'data',
     *         // pass few Fetch API options
     *         method      : 'GET',
     *         credentials : 'include',
     *         cache       : 'no-cache'
     *     },
     *     sync : {
     *         url         : 'http://mycool-server.com/sync.php',
     *         // specify Content-Type for requests
     *         headers     : {
     *             'Content-Type' : 'application/json'
     *         },
     *         credentials : 'include'
     *     }
     * }
     * ```
     * An object where you can set the following possible properties:
     */
    transport: { load?: object, sync?: object }
    /**
     * This config validates the response structure for requests made by the Crud Manager.
     * When `true`, the Crud Manager checks every parsed response structure for errors
     * and if the response format is invalid, a warning is logged to the browser console.
     * The config is intended to help developers implementing backend integration.
     */
    validateResponse: boolean
    /**
     * `true` to write all fields from the record to the server.
     * If set to `false` it will only send the fields that were modified.
     * Note that any fields that have <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-persist">persist</a> set to `false` will
     * still be ignored and fields having <a href="https://bryntum.com/products/gantt/docs/api/Core/data/field/DataField#config-alwaysWrite">alwaysWrite</a> set to `true`
     * will always be included.
     */
    writeAllFields: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the Engine detects a computation cycle.
     */
    onCycle: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * scheduler.project.on({
     *     dataReady() {
     *        console.log('Calculations finished');
     *     }
     * });
     * 
     * scheduler.eventStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished'
     * ```
     */
    onDataReady: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes the calendar usage impossible.
     */
    onEmptyCalendar: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fired during the Engine calculation if <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#config-enableProgressNotifications">enableProgressNotifications</a> config is `true`
     */
    onProgress: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     */
    onSchedulingConflict: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
}

/**
 * Scheduler Pro Project model class - a central place for all data.
 * It holds and links the stores usually used by Scheduler Pro:
 * 
 * * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">EventStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/ResourceStore">ResourceStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/AssignmentStore">AssignmentStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/DependencyStore">DependencyStore</a>
 * * <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/CalendarManagerStore">CalendarManagerSto...
 */
export class SchedulerProProjectModel extends ProjectModelMixinClass implements EventsClass, PartOfProjectClass, ProjectCrudManagerClass, ProjectChangeHandlerMixinClass {
    /**
     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding
     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to
     * keep the event &quot;attached&quot; to this date, according to the user intention.
     * Depending on your use case, you might want to disable this behaviour.
     */
    addConstraintOnDateSet: boolean
    /**
     * Returns the assignment store of the project this entity belongs to.
     */
    readonly assignmentStore: SchedulerProAssignmentStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-assignmentStore">assignmentStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/AssignmentModel">AssignmentModels</a> but also accepts
     * an array of its configuration objects as input.
     */
    assignments: AssignmentModel[]|Partial<AssignmentModelConfig>[]|SchedulerProAssignmentModel[]
    /**
     * The project calendar.
     */
    calendar: string|Partial<CalendarModelConfig>|SchedulerProCalendarModel
    /**
     * Returns the calendar manager store of the project this entity belongs to.
     */
    readonly calendarManagerStore: SchedulerProCalendarManagerStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-calendarManagerStore">calendarManagerStore</a> data.
     * Always returns a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/CalendarModel">CalendarModel</a> array but also accepts an array of
     * its configuration objects as input.
     */
    calendars: CalendarModel[]|Partial<CalendarModelConfig>[]|SchedulerProCalendarModel[]
    /**
     * Returns current changes as an object consisting of added/modified/removed arrays of records for every
     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:
     * ```javascript
     * {
     *     resources : {
     *         added    : [{ name : 'New guy' }],
     *         modified : [{ id : 2, name : 'Mike' }],
     *         removed  : [{ id : 3 }]
     *     },
     *     events : {
     *         modified : [{  id : 12, name : 'Cool task' }]
     *     },
     *     ...
     * }
     * ```
     */
    readonly changes: object
    /**
     * The server revision stamp.
     * The <em>revision stamp</em> is a number which should be incremented after each server-side change.
     * This property reflects the current version of the data retrieved from the server and gets updated
     * after each <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> and <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> call.
     */
    readonly crudRevision: number
    /**
     * A list of registered stores whose server communication will be collected into a single batch.
     * Each store is represented by a <em>store descriptor</em>.
     */
    crudStores: CrudManagerStoreDescriptor[]
    /**
     * The number of days per month.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per month
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `1 month` the system understands that it
     * actually means `30 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerMonth: number
    /**
     * The number of days per week.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per week
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `2 weeks` the system understands that it
     * actually means `14 days` (which is then converted to <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-hoursPerDay">hours</a>) and
     * schedules accordingly.
     */
    daysPerWeek: number
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-dependencyStore">dependencyStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/DependencyModel">DependencyModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    dependencies: DependencyModel[]|Partial<DependencyModelConfig>[]|SchedulerProDependencyModel[]
    /**
     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).
     * Possible values are:
     * 
     * * `ToEvent` - successor calendar will be used (default);
     * * `FromEvent` - predecessor calendar will be used;
     * * `Project` - the project calendar will be used.
     * 
     */
    dependenciesCalendar: 'ToEvent'|'FromEvent'|'Project'
    /**
     * Returns the dependency store of the project this entity belongs to.
     */
    readonly dependencyStore: SchedulerProDependencyStore
    /**
     * Enables/disables the calculation progress notifications.
     */
    enableProgressNotifications: boolean
    /**
     * Returns the task store of the project this entity belongs to.
     */
    readonly eventStore: EventStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-eventStore">eventStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/EventModel">EventModels</a> but also accepts an array of
     * its configuration objects as input.
     */
    events: EventModel[]|Partial<EventModelConfig>[]
    /**
     * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local
     * changes. Useful in a polling scenario, to keep client up to date with the backend.
     */
    forceSync: boolean
    /**
     * The number of hours per day.
     * <strong>Please note:</strong> the value <strong>does not define</strong> the amount of <strong>working</strong> time per day
     * for that purpose one should use calendars.
     * The value is used when converting the duration from one unit to another.
     * So when user enters a duration of, for example, `5 days` the system understands that it
     * actually means `120 hours` and schedules accordingly.
     */
    hoursPerDay: number
    /**
     * Returns true if the crud manager is currently loading data
     */
    readonly isCrudManagerLoading: boolean
    /**
     * Returns true if the crud manager is currently syncing data
     */
    readonly isCrudManagerSyncing: boolean
    /**
     * Convenience shortcut to set only the url to load from, when you do not need to supply any other config
     * options in the `load` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     loadUrl : 'read.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'read.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.load.url`.
     */
    loadUrl: string
    /**
     * Returns the project this entity belongs to.
     */
    readonly project: SchedulerProProjectModel
    /**
     * Returns the resource store of the project this entity belongs to.
     */
    readonly resourceStore: SchedulerProResourceStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-resourceTimeRangeStore">resourceTimeRangeStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/ResourceTimeRangeModel">ResourceTimeRangeModels</a> but
     * also accepts an array of its configuration objects as input.
     */
    resourceTimeRanges: ResourceTimeRangeModel[]|Partial<ResourceTimeRangeModelConfig>[]
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-resourceStore">resourceStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ResourceModel">ResourceModels</a> but also accepts an
     * array of its configuration objects as input.
     */
    resources: ResourceModel[]|Partial<ResourceModelConfig>[]|SchedulerProResourceModel[]
    /**
     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,
     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts
     * and ends on the non-working time. For such cases you can disable this option.
     * Default value is `true`
     * IMPORTANT: Setting this option to `false` also forcefully sets the <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#field-skipNonWorkingTimeWhenSchedulingManually">skipNonWorkingTimeWhenSchedulingManually</a> option
     * to `false`.
     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.
     */
    skipNonWorkingTimeInDurationWhenSchedulingManually: boolean
    /**
     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates
     * to skip non working time.
     */
    skipNonWorkingTimeWhenSchedulingManually: boolean
    /**
     * An array of stores presenting an alternative sync responses apply order.
     * Each store is represented by a <em>store descriptor</em>.
     */
    syncApplySequence: CrudManagerStoreDescriptor[]
    /**
     * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config
     * options in the `sync` section of the `transport` config.
     * Using `loadUrl`:
     * ```javascript
     * {
     *     syncUrl : 'sync.php
     * }
     * ```
     * Equals the following `transport` config:
     * ```javascript
     * {
     *     transport : {
     *         load : {
     *             url : 'sync.php'
     *         }
     *     }
     * }
     * ```
     * When read at runtime, it will return the value from `transport.sync.url`.
     */
    syncUrl: string
    /**
     * The <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/EventStore">store</a> holding data on events.
     */
    readonly taskStore: EventStore
    /**
     * Get/set <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#property-timeRangeStore">timeRangeStore</a> data.
     * Always returns an array of <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/TimeSpan">TimeSpans</a> but also accepts an
     * array of its configuration objects as input.
     */
    timeRanges: TimeSpan[]|Partial<TimeSpanConfig>[]
    /**
     * If `true`, project <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/mixin/ProjectCrudManager#property-changes">changes</a> API will also report project model changes: start/end date,
     * calendar, effort, duration, etc.
     */
    trackProjectModelChanges: boolean
    /**
     * Fires before an object is destroyed.
     */
    onBeforeDestroy: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> is sent. Return `false` to cancel load request.
     */
    onBeforeLoad: Function|string
    /**
     * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeLoadApply: Function|string
    /**
     * Fires before server response gets applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeResponseApply: Function|string
    /**
     * Fires before a request is sent to the server.
     * ```javascript
     * crudManager.on('beforeSend', function ({ params, type }) {
     *     // let's set &quot;sync&quot; request parameters
     *     if (type == 'sync') {
     *         // dynamically depending on &quot;flag&quot; value
     *         if (flag) {
     *             params.foo = 'bar';
     *         }
     *         else {
     *             params.foo = 'smth';
     *         }
     *     }
     * });
     * ```
     */
    onBeforeSend: Function|string
    /**
     * Fires before <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> is sent. Return `false` to cancel sync request.
     * ```javascript
     * crudManager.on('beforesync', function() {
     *     // cannot persist changes before at least one record is added
     *     // to the `someStore` store
     *     if (!someStore.getCount()) return false;
     * });
     * ```
     */
    onBeforeSync: Function|string
    /**
     * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.
     * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.
     */
    onBeforeSyncApply: Function|string
    /**
     * Fires when any other event is fired from the object.
     * <strong>Note</strong>: `catchAll` is fired for both public and private events. Please rely on the public events only.
     */
    onCatchAll: Function|string
    /**
     * Fired when data in any of the projects stores changes.
     * Basically a relayed version of each stores own change event, decorated with which store it originates from.
     * See the <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#event-change">store change event</a> documentation for more information.
     */
    onChange: Function|string
    /**
     * Fired when the Engine detects a computation cycle.
     */
    onCycle: Function|string
    /**
     * Fired when the engine has finished its calculations and the results has been written back to the records.
     * ```javascript
     * scheduler.project.on({
     *     dataReady() {
     *        console.log('Calculations finished');
     *     }
     * });
     * 
     * scheduler.eventStore.first.duration = 10;
     * 
     * // At some point a bit later it will log 'Calculations finished'
     * ```
     */
    onDataReady: Function|string
    /**
     * Fires when an object is destroyed.
     */
    onDestroy: Function|string
    /**
     * Fired when the Engine detects a calendar misconfiguration when the calendar does
     * not provide any working periods of time which makes the calendar usage impossible.
     */
    onEmptyCalendar: Function|string
    /**
     * Fires when data in any of the registered data stores is changed.
     * ```javascript
     *     crudManager.on('hasChanges', function (crud) {
     *         // enable persist changes button when some store gets changed
     *         saveButton.enable();
     *     });
     * ```
     */
    onHasChanges: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> completion after data gets loaded to the stores.
     */
    onLoad: Function|string
    /**
     * Fired after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeLoad">beforeLoad</a>
     * listener or due to incomplete prior load request.
     */
    onLoadCanceled: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load request</a> fails.
     */
    onLoadFail: Function|string
    /**
     * Fires when registered stores get into state when they don't have any
     * not persisted change. This happens after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-load">load</a> or <a href="#Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync</a> request
     * completion. Or this may happen after a record update which turns its fields back to their original state.
     * ```javascript
     * crudManager.on('nochanges', function (crud) {
     *     // disable persist changes button when there is no changes
     *     saveButton.disable();
     * });
     * ```
     */
    onNoChanges: Function|string
    /**
     * Fired during the Engine calculation if <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/ProjectModel#config-enableProgressNotifications">enableProgressNotifications</a> config is `true`
     */
    onProgress: Function|string
    /**
     * Fires on successful request completion after data gets applied to the stores.
     */
    onRequestDone: Function|string
    /**
     * Fires when a request fails.
     */
    onRequestFail: Function|string
    /**
     * Fired when the Engine detects a scheduling conflict.
     */
    onSchedulingConflict: Function|string
    /**
     * Fires on successful <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> completion.
     */
    onSync: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was canceled by some <a href="#Scheduler/crud/AbstractCrudManagerMixin#event-beforeSync">beforeSync</a> listener.
     */
    onSyncCanceled: Function|string
    /**
     * Fires after <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> was delayed due to incomplete previous one.
     */
    onSyncDelayed: Function|string
    /**
     * Fires when a <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-sync">sync request</a> fails.
     */
    onSyncFail: Function|string
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProProjectModelConfig>);
    /**
     * Accepts all changes in all stores, resets the modification tracking:
     * 
     * * Clears change tracking for all records
     * * Clears added
     * * Clears modified
     * * Clears removed
     * Leaves the store in an &quot;unmodified&quot; state.
     * 
     */
    acceptChanges(): void;
    /**
     * Adds a store to the collection.
     * ```javascript
     * // append stores to the end of collection
     * crudManager.addCrudStore([
     *     store1,
     *     // storeId
     *     'bar',
     *     // store descriptor
     *     {
     *         storeId : 'foo',
     *         store   : store3
     *     },
     *     {
     *         storeId         : 'bar',
     *         store           : store4,
     *         // to write all fields of modified records
     *         writeAllFields  : true
     *     }
     * ]);
     * ```
     * <strong>Note:</strong> Order in which stores are kept in the collection is very essential sometimes.
     * Exactly in this order the loaded data will be put into each store.
     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`
     * requests. Learn more in the <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/guides/data/crud_manager.md#loading-data">Working with data</a> guide.
     */
    addCrudStore(store: Store|string|CrudManagerStoreDescriptor|Store[]|string[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.addListener({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.addListener('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    addListener(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Adds a store to the alternative sync responses apply sequence.
     * By default, the order in which sync responses are applied to the stores is the same as they registered in.
     * But this order can be changes either on construction step using <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-syncApplySequence">syncApplySequence</a> option
     * or by calling this method.
     * <strong>Please note</strong>, that if the sequence was not initialized before this method call then
     * you will have to do it yourself like this for example:
     * ```javascript
     * // alternative sequence was not set for this crud manager
     * // so let's fill it with existing stores keeping the same order
     * crudManager.addStoreToApplySequence(crudManager.crudStores);
     * 
     * // and now we can add our new store
     * 
     * // we will load its data last
     * crudManager.addCrudStore(someNewStore);
     * // but changes to it will be applied first
     * crudManager.addStoreToApplySequence(someNewStore, 0);
     * ```
     * add registered stores to the sequence along with the store(s) you want to add
     */
    addStoreToApplySequence(store: Store|CrudManagerStoreDescriptor|Store[]|CrudManagerStoreDescriptor[], position?: number, fromStore?: string|Store|CrudManagerStoreDescriptor): void;
    /**
     * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended
     * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.
     * Example of a changeset:
     * ```javascript
     * project.applyChangeset({
     *     events : {
     *         added : [
     *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }
     *         ],
     *         updated : [
     *             { id : 5, name : 'Changed' }
     *         ],
     *         removed : [
     *             { id : 1 }
     *         ]
     *     },
     *     resources : { ... },
     *     ...
     * });
     * ```
     * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.
     * See <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-applyChangeset">applyChangeset</a> for more details.
     */
    applyChangeset(changes: object, transformFn?: Function, phantomIdField?: string): void;
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * Usage:
     * ```javascript
     * // Collect changes from first project
     * const { changes } = projectA;
     * 
     * // Apply changes to second project
     * await projectB.applyProjectChanges(changes);
     * ```
     * *
     * This method will apply changes from the incoming object and accept all current project changes. Before
     * applying changes make sure you've processed current project changes in order not to lose them.
     * *
     */
    applyProjectChanges(changes: object): Promise<any>;
    /**
     * Cancels a sent request.
     */
    cancelRequest(requestPromise: Promise<any>): void;
    /**
     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the
     * underlying graph based calculation engine. The engine performs it calculations async.
     * By calling this function, the commit happens right away. And by awaiting it you are sure that project
     * calculations are finished and that references between records are up to date.
     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.
     * ```javascript
     * // Move an event in time
     * eventStore.first.shift(1);
     * 
     * // Trigger calculations directly and wait for them to finish
     * const result = await project.commitAsync();
     * 
     * if (result.rejectedWith) {
     *     // there was a conflict during the scheduling
     * }
     * ```
     */
    commitAsync(): Promise<void>;
    /**
     * Returns `true` if any of registered stores (or some particular store) has non persisted changes.
     * ```javascript
     * // if we have any unsaved changes
     * if (crudManager.crudStoreHasChanges()) {
     *     // persist them
     *     crudManager.sync();
     * // otherwise
     * } else {
     *     alert(&quot;There are no unsaved changes...&quot;);
     * }
     * ```
     */
    crudStoreHasChanges(storeId?: string|Store): boolean;
    /**
     * Decodes (parses) a <em>JSON</em> response string to an object. If parsing fails, it returns null.
     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the <em>Crud Manager</em>.
     */
    decode(responseText: string): object;
    /**
     * Encodes a request object to <em>JSON</em> encoded string. If encoding fails (due to circular structure), it returns null.
     * Supposed to be overridden in case data provided by the <em>Crud Manager</em> has to be transformed into format requested by server.
     */
    encode(requestData: object): string;
    /**
     * Returns a registered store.
     */
    getCrudStore(storeId: string): Store;
    /**
     * Returns a registered store descriptor.
     */
    getStoreDescriptor(storeId: string|Store): CrudManagerStoreDescriptor;
    /**
     * Check if any listener is registered for the specified eventName
     */
    hasListener(eventName: string): boolean;
    /**
     * Loads data to the stores registered in the crud manager. For example:
     * ```javascript
     * crudManager.load(
     *     // here are request parameters
     *     {
     *         store1 : { append : true, page : 3, smth : 'foo' },
     *         store2 : { page : 2, bar : '!!!' }
     *     }
     * ).then(
     *     () => alert('OMG! It works!'),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest">cancelRequest</a>.
     */
    load(options?: { request?: object }|string): Promise<any>;
    /**
     * Loads data to the Crud Manager
     */
    loadCrudManagerData(response: object, options?: object): void;
    /**
     * Alias for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>. Adds an event listener. This method accepts parameters in the following format:
     * ```javascript
     *  myObject.on({
     *      thisObj    : this,          // The this reference for the handlers
     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,
     *      otherevent : {
     *          fn      : 'handlerFnName',
     *          once    : true          // Just this handler is auto-removed on fire
     *      },
     *      yetanother  : {
     *          fn      : 'yetAnotherHandler',
     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler
     *      },
     *      prio        : 100           // Higher prio listeners are called before lower
     *  });
     * ```
     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.
     * When it is destroyed, those listeners are removed.
     * The `config` parameter allows supplying options for the listener(s), for available options see <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#typedef-BryntumListenerConfig">BryntumListenerConfig</a>.
     * A simpler signature may be used when only adding a listener for one event and no extra options
     * (such as `once` or `delay`) are required:
     * ```javascript
     * myObject.on('click', myController.handleClicks, myController);
     * ```
     * The args in this simple case are `eventName`, `handler` and `thisObj`
     */
    on(config: BryntumListenerConfig|string, thisObj?: object|Function, oldThisObj?: object): Function;
    /**
     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name
     * before relaying, for example add -&gt; storeAdd
     * ```javascript
     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:
     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.
     * store.relayAll(grid, 'store');
     * 
     * grid.on('storeLoad', () => console.log('Store loaded');
     * ```
     */
    relayAll(through: EventsClass, prefix: string, transformCase?: boolean): void;
    /**
     * Removes all listeners registered to this object by the application.
     */
    removeAllListeners(): void;
    /**
     * Removes a store from collection. If the store was registered in alternative sync sequence list
     * it will be removed from there as well.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeCrudStore(&quot;foo&quot;);
     * 
     * // remove store3
     * crudManager.removeCrudStore(store3);
     * ```
     */
    removeCrudStore(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Removes an event listener. Same API signature as <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-addListener">addListener</a>
     */
    removeListener(config: object|string, thisObj: object|Function, oldThisObj: object): void;
    /**
     * Removes a store from the alternative sync sequence.
     * ```javascript
     * // remove store having storeId equal to &quot;foo&quot;
     * crudManager.removeStoreFromApplySequence(&quot;foo&quot;);
     * ```
     */
    removeStoreFromApplySequence(store: CrudManagerStoreDescriptor|string|Store): void;
    /**
     * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.
     */
    resumeAutoSync(doSync?: boolean): void;
    /**
     * Resume event triggering after a call to <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-suspendEvents">suspendEvents()</a>. If any triggered events were queued they will be triggered.
     */
    resumeEvents(): boolean;
    /**
     * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted
     * records will be removed.
     */
    revertChanges(): void;
    /**
     * Sends a <em>Crud Manager</em> request to the server.
     */
    sendRequest(request: { type: 'load'|'sync', url: string, data: string, params: object, success: Function, failure: Function, thisObj: object }): Promise<any>;
    /**
     * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).
     */
    suspendAutoSync(): void;
    /**
     * Prevents events from being triggered until <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-resumeEvents">resumeEvents()</a> is called. Optionally queues events that are triggered while
     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.
     */
    suspendEvents(queue?: boolean): void;
    /**
     * Persists changes made on the registered stores to the server and/or receives changes made on the backend.
     * Usage:
     * ```javascript
     * // persist and run a callback on request completion
     * crud.sync().then(
     *     () => console.log(&quot;Changes saved...&quot;),
     *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)
     * );
     * ```
     * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it
     * until previous request completion.
     * In this case <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#event-syncDelayed">syncDelayed</a> event will be fired.
     * ** Note: ** Please take a look at <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-autoSync">autoSync</a> config. This option allows to persist changes
     * automatically after any data modification.
     * ** Note: ** By default a sync request is only sent if there are any local <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#property-changes">changes</a>. To
     * always send a request when calling this function, configure <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-forceSync">forceSync</a> as `true`.
     */
    sync(): Promise<any>;
    /**
     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener
     * makes function return false.
     */
    trigger(eventName: string, param?: {bubbles?: boolean, [key: string]: any}): Promise<boolean|any>;
    /**
     * Shorthand for <a href="https://bryntum.com/products/gantt/docs/api/Core/mixin/Events#function-removeListener">removeListener</a>
     */
    un(config: object|string, thisObj?: object|Function, oldThisObj?: object): void;
}

type SchedulerProResourceModelConfig = {
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: SchedulerProCalendarModel|string
    /**
     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf
     * tasks.
     * Note, if the tree store loads data from a remote origin, make sure <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-readUrl">readUrl</a>
     * is specified, and optionally <a href="https://bryntum.com/products/gantt/docs/api/Core/data/AjaxStore#config-parentIdParamName">parentIdParamName</a> is set, otherwise
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Store#function-loadChildren">loadChildren</a> has to be implemented.
     */
    children: boolean|object[]|Model[]|Partial<ModelConfig>[]
    /**
     * CSS class (or several classes divided by space) to append to row elements
     */
    cls: string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Start expanded or not (only valid for tree data)
     */
    expanded: boolean
    /**
     * A link to use for this record when rendered into a <a href="https://bryntum.com/products/gantt/docs/api/Grid/column/TreeColumn">TreeColumn</a>.
     */
    href: string
    /**
     * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)
     */
    iconCls: string
    /**
     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as
     * record.id. Will get a generated value if none is specified in records data.
     * *Note that generated ids are meant to be temporary (phantom ids), they should not be serialized
     * but instead replaced by the backend on commit*
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Get or set resource name
     */
    name: string
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's ordered children array.
     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering
     * have no effect on it.
     */
    orderedParentIndex: number
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which record id is the parent of the record.
     */
    parentId: string|number|null
    /**
     * This is a read-only field provided in server synchronization packets to specify
     * which position the node takes in the parent's children array.
     * This index is set on load and gets updated automatically after row reordering, sorting, etc.
     * To save the order, need to persist the field on the server and when data is fetched to be loaded,
     * need to sort by this field.
     */
    parentIndex: number
    /**
     * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing
     * features such as cell editing and event dragging.
     * Does not prevent altering the record programmatically, it can still be manipulated by application code.
     * For more info, see the &quot;Read-only records&quot; section above.
     */
    readOnly: boolean
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Used by the default implementation of <a href="https://bryntum.com/products/gantt/docs/api/Grid/view/GridBase#config-getRowHeight">getRowHeight</a> to determine row
     * height. Set it to use another height than the default for a the records row.
     */
    rowHeight: number
    /**
     * The target to use if this tree node provides a value for the <a href="https://bryntum.com/products/gantt/docs/api/Grid/data/GridRowModel#field-href">href</a> field.
     */
    target: '_self'|'_blank'|'_parent'|'_top'|null
}

/**
 * This class represent a single Resource in Scheduler Pro, usually added to a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/data/ResourceStore">ResourceStore</a>.
 * It is a subclass of  <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model">Model</a>. Please refer to the documentation for that class to become familiar
 * with the base interface of the resource.
 * <h2>Fields and references</h2>
 * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing
 * your resources then you should ...
 */
export class SchedulerProResourceModel extends GridRowModel implements ResourceModelMixinClass {
    /**
     * Returns all assignments for the resource
     */
    assignments: SchedulerAssignmentModel[]
    /**
     * Margin between stacked event bars for this resource, in px.
     */
    barMargin: number
    /**
     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.
     */
    calendar: SchedulerProCalendarModel|string
    /**
     * Base width of this resource, in px. If not set, the `columnWidth` specified in
     * the Scheduler's configured <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/Scheduler#config-resourceColumns">resourceColumns</a> is used.
     * This value is used in vertical mode to determine column width.
     */
    columnWidth: number
    /**
     * Controls the primary color used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventColor">eventColor config</a>. Also, see
     * Schedulers <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventColor">eventColor config</a>.
     * For available standard colors, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#typedef-EventColor">EventColor</a>.
     */
    eventColor: EventColor
    /**
     * Specify this to use a resource specific event layout in horizontal mode, see
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-eventLayout">eventLayout</a> for options.
     * When unset (the default) Schedulers setting is used.
     */
    eventLayout: 'stack'|'pack'|'mixed'|'none'
    /**
     * Controls the style used for events assigned to this resource. Can be overridden per event using
     * EventModels <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/model/mixin/EventModelMixin#field-eventStyle">eventStyle config</a>. See Schedulers
     * <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/TimelineEventRendering#config-eventStyle">eventStyle config</a> for available
     * options.
     */
    eventStyle: string
    /**
     * Get associated events
     */
    readonly events: EventModel[]
    /**
     * Unique identifier
     */
    id: string|number
    /**
     * Image name relative to <a href="https://bryntum.com/products/gantt/docs/api/Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath">resourceImagePath</a>,
     * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     * Set value to `false` to disable image display.
     */
    image: string|boolean
    /**
     * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image
     * for the resource.
     */
    imageUrl: string
    /**
     * Returns the initials (first letter of the first &amp; last space-separated word in the name) or an empty string
     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation
     */
    readonly initials: string
    /**
     * Returns `true` if the resource can be persisted.
     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered
     * persistable if its parent node is persistable.
     */
    readonly isPersistable: boolean
    /**
     * Get or set resource name
     */
    name: string
    /**
     * Margin from rows edge to topmost event bar for this resource, in px.
     */
    resourceMargin: number
    /**
     * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.
     * This value is used in horizontal mode to determine row height. When stacking, it is used as input for
     * calculating the actual row height:
     * ```javascript
     * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)
     * ```
     * When packing or overlapping, it is used as the actual row height.
     */
    rowHeight: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<SchedulerProResourceModelConfig>, store?: Store, meta?: object);
    /**
     * Returns the resource calendar.
     */
    getCalendar(): SchedulerProCalendarModel;
    /**
     * Returns an array of events, associated with this resource
     */
    // @deprecated
    getEvents(): SchedulerEventModel[];
    /**
     * Set value for the specified field(s), triggering engine calculations immediately. See
     * <a href="https://bryntum.com/products/gantt/docs/api/Core/data/Model#function-set">Model#set()</a> for arguments.
     * This does not matter much on the resource itself, but is of importance when manipulating its references:
     * ```javascript
     * assignment.set('resourceId', 2);
     * // resource.assignments is not yet up to date
     * 
     * await assignment.setAsync('resourceId', 2);
     * // resource.assignments is up to date
     * ```
     */
    setAsync(field: string|object, value: any, silent?: boolean): Promise<void>;
    /**
     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`
     */
    setCalendar(calendar: SchedulerProCalendarModel): Promise<void>;
    /**
     * Unassigns this Resource from all its Events
     */
    unassignAll(): void;
}

/**
 * An immutable, serializable object that describes an entity instance (for example, a single task).
 * ChangeLogEntity instances appear in change log entries to indicate which entity was affected by
 * a <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/changelog/ChangeLogAction">ChangeLogAction</a>.
 */
export class ChangeLogEntity {
    /**
     * The unique id of the entity instance, e.g. 'TaskModel-1'.
     */
    readonly id: string
    /**
     * A user-friendly name for the entity instance, e.g. 'My important task'.
     */
    readonly name: string
    /**
     * The name of the Model type of the entity, e.g. 'TaskModel'.
     */
    readonly type: string
}

type PercentDoneMixinClassConfig = {
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
}

export class PercentDoneMixinClass {
    /**
     * Indicates if the task is complete (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is 100% (or greater)).
     */
    isCompleted: boolean
    /**
     * Indicates if the task is in progress (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero and less than 100%).
     */
    isInProgress: boolean
    /**
     * Indicates if the task is started (its <a href="https://bryntum.com/products/gantt/docs/api/SchedulerPro/model/mixin/PercentDoneMixin#field-percentDone">percent completion</a> is greater than zero).
     */
    isStarted: boolean
    /**
     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)
     */
    percentDone: number
    /**
     * Human-friendly rounding. When task is completed &lt; 99%, it rounds the value. It floors value between 99 and 100, to not
     * show task as completed when it is for example 99.51% done.
     */
    renderedPercentDone: number
    /**
     * Constructs a new record from the supplied data config.
     */
    constructor(config?: Partial<PercentDoneMixinClassConfig>);
}

export const PercentDoneMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & PercentDoneMixinClass>

export class ProjectChangeHandlerMixinClass {
    /**
     * Allows to apply changes from one project to another. For method to produce correct results, projects should be
     * isomorphic - they should use same models and store configuration, also data in source and target projects
     * should be identical before changes to the source project are made and applied to the target project.
     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to
     * the target project before it is changed.
     * When changes are applied all changes are committed and project is recalculated, which means target project
     * won't have any local changes after.
     * Usage:
     * ```javascript
     * // Collect changes from first project
     * const { changes } = projectA;
     * 
     * // Apply changes to second project
     * await projectB.applyProjectChanges(changes);
     * ```
     * *
     * This method will apply changes from the incoming object and accept all current project changes. Before
     * applying changes make sure you've processed current project changes in order not to lose them.
     * *
     */
    applyProjectChanges(changes: object): Promise<any>;
}

export const ProjectChangeHandlerMixin : <T extends AnyConstructor<Base>>(base : T) => AnyConstructor<InstanceType<T> & ProjectChangeHandlerMixinClass>

type ContainerItemConfig = WbsFieldConfig;

type InputFieldConfig = WbsFieldConfig;

type ModelFieldConfig = DataFieldConfig;
