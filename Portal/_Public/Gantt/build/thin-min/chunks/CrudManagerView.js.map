{
  "version": 3,
  "sources": ["../../../../Engine/lib/Engine/vendor/later/later.js", "../../../../chronograph/src/collection/Iterator.js", "../../../../chronograph/src/class/Mixin.js", "../../../../Engine/lib/Engine/scheduling/Types.js", "../../../../Engine/lib/Engine/util/Constants.js", "../../../../Engine/lib/Engine/util/Types.js", "../../../../Engine/lib/Engine/calendar/CalendarCache.js", "../../../../Engine/lib/Engine/util/StripDuplicates.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheInterval.js", "../../../../Engine/lib/Engine/util/BinarySearch.js", "../../../../Engine/lib/Engine/calendar/SortedMap.js", "../../../../Engine/lib/Engine/calendar/IntervalCache.js", "../../../../Engine/lib/Engine/calendar/CalendarCacheSingle.js", "../../../../Engine/lib/Engine/quark/AbstractPartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/AbstractPartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalMixin.js", "../../../../Engine/lib/Engine/calendar/CalendarIntervalStore.js", "../../../../Engine/lib/Engine/calendar/UnspecifiedTimeIntervalModel.js", "../../../../Engine/lib/Engine/quark/CorePartOfProjectGenericMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractCalendarMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/mixin/CorePartOfProjectModelMixin.js", "../../../../Engine/lib/Engine/util/Functions.js", "../../../../Engine/lib/Engine/quark/store/AbstractAssignmentStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractDependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractEventStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/AbstractResourceStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreEventMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreResourceMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreAssignmentMixin.js", "../../../../Engine/lib/Engine/quark/store/mixin/CorePartOfProjectStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreAssignmentStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreCalendarMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreCalendarManagerStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreDependencyMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreDependencyStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasAssignmentsMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasDependenciesMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreEvent.js", "../../../../Engine/lib/Engine/quark/store/CoreEventStoreMixin.js", "../../../../Engine/lib/Engine/quark/store/CoreResourceStoreMixin.js", "../../../../Engine/lib/Engine/quark/model/AbstractProjectMixin.js", "../../../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/TimeZonedDatesMixin.js", "../../../../Scheduler/lib/Scheduler/model/TimeSpan.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ResourceStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/PartOfProject.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ResourceModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/ResourceModel.js", "../../../../Scheduler/lib/Scheduler/data/ResourceStore.js", "../../../../Scheduler/lib/Scheduler/data/mixin/EventStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/GetEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/EventDayIndex.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DayIndexMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/RecurringEventsMixin.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js", "../../../../Scheduler/lib/Scheduler/model/RecurrenceModel.js", "../../../../Scheduler/lib/Scheduler/model/mixin/RecurringTimeSpan.js", "../../../../Scheduler/lib/Scheduler/model/mixin/EventModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/EventModel.js", "../../../../Scheduler/lib/Scheduler/data/EventStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/AssignmentModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/AssignmentModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/AssignmentStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/AssignmentStore.js", "../../../../Scheduler/lib/Scheduler/model/DependencyBaseModel.js", "../../../../Scheduler/lib/Scheduler/model/DependencyModel.js", "../../../../Scheduler/lib/Scheduler/data/mixin/DependencyStoreMixin.js", "../../../../Scheduler/lib/Scheduler/data/DependencyStore.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManagerMixin.js", "../../../../Scheduler/lib/Scheduler/crud/transport/AjaxTransport.js", "../../../../Scheduler/lib/Scheduler/crud/encoder/JsonEncoder.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ProjectCrudManager.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelCommon.js", "../../../../Scheduler/lib/Scheduler/model/ResourceTimeRangeModel.js", "../../../../Scheduler/lib/Scheduler/data/ResourceTimeRangeStore.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectModelMixin.js", "../../../../Scheduler/lib/Scheduler/model/mixin/ProjectCurrentConfig.js", "../../../../Scheduler/lib/Scheduler/data/util/ModelPersistencyManager.js", "../../../../Scheduler/lib/Scheduler/model/ProjectModel.js", "../../../../Scheduler/lib/Scheduler/crud/mixin/CrudManagerView.js"],
  "sourcesContent": ["// @ts-nocheck\n\nconst diffSecond = (date, diff) => {\n    return new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds() + diff,\n        date.getMilliseconds()\n    );\n};\n\n/**\n * The code just copy/pasted from pre-built later.js file and made exported\n *\n * @private\n */\nexport const later = (function () {\n    \"use strict\";\n    var later = {\n        version: \"1.2.0\"\n    };\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n != n) {\n                    n = 0;\n                }\n                else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    if (!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, \"\");\n        };\n    }\n    later.array = {};\n    later.array.sort = function (arr, zeroIsLast) {\n        arr.sort(function (a, b) {\n            return +a - +b;\n        });\n        if (zeroIsLast && arr[0] === 0) {\n            arr.push(arr.shift());\n        }\n    };\n    later.array.next = function (val, values, extent) {\n        var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;\n        for (var i = values.length - 1; i > -1; --i) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {\n                nextIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[nextIdx];\n    };\n    later.array.nextInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next++;\n            if (next > max) {\n                next = min;\n            }\n            i++;\n            if (i === len) {\n                i = 0;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.array.prev = function (val, values, extent) {\n        var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;\n        for (var i = 0; i < len; i++) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {\n                prevIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[prevIdx];\n    };\n    later.array.prevInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next--;\n            if (next < min) {\n                next = max;\n            }\n            i--;\n            if (i === -1) {\n                i = len - 1;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.day = later.D = {\n        name: \"day\",\n        range: 86400,\n        val: function (d) {\n            return d.D || (d.D = later.date.getDate.call(d));\n        },\n        isValid: function (d, val) {\n            return later.D.val(d) === (val || later.D.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.DExtent)\n                return d.DExtent;\n            var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];\n            if (month === 2 && later.dy.extent(d)[1] === 366) {\n                max = max + 1;\n            }\n            return d.DExtent = [1, max];\n        },\n        start: function (d) {\n            return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        end: function (d) {\n            return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        next: function (d, val) {\n            val = val > later.D.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            val = val > DMax ? 1 : val || DMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), val);\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);\n        }\n    };\n    later.dayOfWeekCount = later.dc = {\n        name: \"day of week count\",\n        range: 604800,\n        val: function (d) {\n            return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;\n        },\n        extent: function (d) {\n            return d.dcExtent || (d.dcExtent = [1, Math.ceil(later.D.extent(d)[1] / 7)]);\n        },\n        start: function (d) {\n            return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));\n        },\n        end: function (d) {\n            return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.dc.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? 1 : val;\n            var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            if (next.getTime() <= d.getTime()) {\n                month = later.M.next(d, later.M.val(d) + 1);\n                return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? dcMax : val || dcMax;\n            return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));\n        }\n    };\n    later.dayOfWeek = later.dw = later.d = {\n        name: \"day of week\",\n        range: 86400,\n        val: function (d) {\n            return d.dw || (d.dw = later.date.getDay.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dw.val(d) === (val || 7);\n        },\n        extent: function () {\n            return [1, 7];\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > 7 ? 1 : val || 7;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));\n        },\n        prev: function (d, val) {\n            val = val > 7 ? 7 : val || 7;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));\n        }\n    };\n    later.dayOfYear = later.dy = {\n        name: \"day of year\",\n        range: 86400,\n        val: function (d) {\n            return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));\n        },\n        isValid: function (d, val) {\n            return later.dy.val(d) === (val || later.dy.extent(d)[1]);\n        },\n        extent: function (d) {\n            var year = later.Y.val(d);\n            return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > later.dy.extent(d)[1] ? 1 : val;\n            var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? 1 : val || dyMax;\n            return later.date.next(later.Y.val(year), later.M.val(year), val);\n        },\n        prev: function (d, val) {\n            var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? dyMax : val || dyMax;\n            return later.date.prev(later.Y.val(year), later.M.val(year), val);\n        }\n    };\n    later.hour = later.h = {\n        name: \"hour\",\n        range: 3600,\n        val: function (d) {\n            return d.h || (d.h = later.date.getHour.call(d));\n        },\n        isValid: function (d, val) {\n            return later.h.val(d) === val;\n        },\n        extent: function () {\n            return [0, 23];\n        },\n        start: function (d) {\n            return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        end: function (d) {\n            return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 23 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 23 ? 23 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);\n        }\n    };\n    later.minute = later.m = {\n        name: \"minute\",\n        range: 60,\n        val: function (d) {\n            return d.m || (d.m = later.date.getMin.call(d));\n        },\n        isValid: function (d, val) {\n            return later.m.val(d) === val;\n        },\n        extent: function (d) {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        end: function (d) {\n            return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        next: function (d, val) {\n            var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);\n        }\n    };\n    later.month = later.M = {\n        name: \"month\",\n        range: 2629740,\n        val: function (d) {\n            return d.M || (d.M = later.date.getMonth.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.M.val(d) === (val || 12);\n        },\n        extent: function () {\n            return [1, 12];\n        },\n        start: function (d) {\n            return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));\n        },\n        end: function (d) {\n            return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 12 ? 1 : val || 12;\n            return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);\n        },\n        prev: function (d, val) {\n            val = val > 12 ? 12 : val || 12;\n            return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);\n        }\n    };\n    later.second = later.s = {\n        name: \"second\",\n        range: 1,\n        val: function (d) {\n            return d.s || (d.s = later.date.getSec.call(d));\n        },\n        isValid: function (d, val) {\n            return later.s.val(d) === val;\n        },\n        extent: function () {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 7200) * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val, cache) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);\n        }\n    };\n    later.time = later.t = {\n        name: \"time\",\n        range: 1,\n        val: function (d) {\n            return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));\n        },\n        isValid: function (d, val) {\n            return later.t.val(d) === val;\n        },\n        extent: function () {\n            return [0, 86399];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            val = val > 86399 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);\n            if (!later.date.isUTC && next.getTime() < d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 86399 ? 86399 : val;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);\n        }\n    };\n    later.weekOfMonth = later.wm = {\n        name: \"week of month\",\n        range: 604800,\n        val: function (d) {\n            return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);\n        },\n        isValid: function (d, val) {\n            return later.wm.val(d) === (val || later.wm.extent(d)[1]);\n        },\n        extent: function (d) {\n            return d.wmExtent || (d.wmExtent = [1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7]);\n        },\n        start: function (d) {\n            return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));\n        },\n        end: function (d) {\n            return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.wm.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? 1 : val || wmMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? wmMax : val || wmMax;\n            return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));\n        }\n    };\n    later.weekOfYear = later.wy = {\n        name: \"week of year (ISO)\",\n        range: 604800,\n        val: function (d) {\n            if (d.wy)\n                return d.wy;\n            var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);\n            return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);\n        },\n        isValid: function (d, val) {\n            return later.wy.val(d) === (val || later.wy.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.wyExtent)\n                return d.wyExtent;\n            var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));\n            return d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52];\n        },\n        start: function (d) {\n            return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));\n        },\n        end: function (d) {\n            return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));\n        },\n        next: function (d, val) {\n            val = val > later.wy.extent(d)[1] ? 1 : val;\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);\n            val = val > wyMax ? 1 : val || wyMax;\n            return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));\n        },\n        prev: function (d, val) {\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);\n            val = val > wyMax ? wyMax : val || wyMax;\n            return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));\n        }\n    };\n    later.year = later.Y = {\n        name: \"year\",\n        range: 31556900,\n        val: function (d) {\n            return d.Y || (d.Y = later.date.getYear.call(d));\n        },\n        isValid: function (d, val) {\n            return later.Y.val(d) === val;\n        },\n        extent: function () {\n            return [1970, 2099];\n        },\n        start: function (d) {\n            return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));\n        },\n        end: function (d) {\n            return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));\n        },\n        next: function (d, val) {\n            return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;\n        }\n    };\n    later.fullDate = later.fd = {\n        name: \"full date\",\n        range: 1,\n        val: function (d) {\n            return d.fd || (d.fd = d.getTime());\n        },\n        isValid: function (d, val) {\n            return later.fd.val(d) === val;\n        },\n        extent: function () {\n            return [0, 3250368e7];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            return later.fd.val(d) < val ? new Date(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return later.fd.val(d) > val ? new Date(val) : later.NEVER;\n        }\n    };\n    later.modifier = {};\n    later.modifier.after = later.modifier.a = function (constraint, values) {\n        var value = values[0];\n        return {\n            name: \"after \" + constraint.name,\n            range: (constraint.extent(new Date())[1] - value) * constraint.range,\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) >= value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                if (val != value)\n                    val = constraint.extent(startDate)[0];\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[1] : value - 1;\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.modifier.before = later.modifier.b = function (constraint, values) {\n        var value = values[values.length - 1];\n        return {\n            name: \"before \" + constraint.name,\n            range: constraint.range * (value - 1),\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) < value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[0] : value;\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? value - 1 : constraint.extent(startDate)[1];\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.compile = function (schedDef) {\n        var constraints = [], constraintsLen = 0, tickConstraint;\n        for (var key in schedDef) {\n            var nameParts = key.split(\"_\"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];\n            constraints.push({\n                constraint: constraint,\n                vals: vals\n            });\n            constraintsLen++;\n        }\n        constraints.sort(function (a, b) {\n            var ra = a.constraint.range, rb = b.constraint.range;\n            return rb < ra ? -1 : rb > ra ? 1 : 0;\n        });\n        tickConstraint = constraints[constraintsLen - 1].constraint;\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return a.getTime() > b.getTime();\n            } : function (a, b) {\n                return b.getTime() > a.getTime();\n            };\n        }\n        return {\n            start: function (dir, startDate) {\n                var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;\n                while (maxAttempts-- && !done && next) {\n                    done = true;\n                    for (var i = 0; i < constraintsLen; i++) {\n                        var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);\n                        if (!constraint.isValid(next, newVal)) {\n                            next = constraint[dir](next, newVal);\n                            done = false;\n                            break;\n                        }\n                    }\n                }\n                if (next !== later.NEVER) {\n                    next = dir === \"next\" ? tickConstraint.start(next) : tickConstraint.end(next);\n                }\n                return next;\n            },\n            end: function (dir, startDate) {\n                var result, nextVal = later.array[dir + \"Invalid\"], compare = compareFn(dir);\n                for (var i = constraintsLen - 1; i >= 0; i--) {\n                    var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;\n                    if (newVal !== undefined) {\n                        next = constraint[dir](startDate, newVal);\n                        if (next && (!result || compare(result, next))) {\n                            result = next;\n                        }\n                    }\n                }\n                return result;\n            },\n            tick: function (dir, date) {\n                return new Date(dir === \"next\" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);\n            },\n            // PATCH\n            tickSafe: function (dir, date) {\n                return dir === \"next\"\n                    ? diffSecond(tickConstraint.end(date), 1)\n                    : diffSecond(tickConstraint.start(date), -1)\n                ;\n            },\n            // EOF PATCH\n            tickStart: function (date) {\n                return tickConstraint.start(date);\n            }\n        };\n    };\n    later.schedule = function (sched) {\n        if (!sched)\n            throw new Error(\"Missing schedule definition.\");\n        if (!sched.schedules)\n            throw new Error(\"Definition must include at least one schedule.\");\n        var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;\n        for (var i = 0; i < schedulesLen; i++) {\n            schedules.push(later.compile(sched.schedules[i]));\n        }\n        for (var j = 0; j < exceptionsLen; j++) {\n            exceptions.push(later.compile(sched.exceptions[j]));\n        }\n        function getInstances(dir, count, startDate, endDate, isRange) {\n            var compare = compareFn(dir), loopCount = count, maxAttempts = 1e6, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === \"next\", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;\n            startDate = startDate ? new Date(startDate) : new Date();\n            if (!startDate || !startDate.getTime())\n                throw new Error(\"Invalid start date.\");\n            setNextStarts(dir, schedules, schedStarts, startDate);\n            setRangeStarts(dir, exceptions, exceptStarts, startDate);\n            while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {\n                if (endDate && compare(next, endDate)) {\n                    break;\n                }\n                if (exceptionsLen) {\n                    updateRangeStarts(dir, exceptions, exceptStarts, next);\n                    if (end = calcRangeOverlap(dir, exceptStarts, next)) {\n                        updateNextStarts(dir, schedules, schedStarts, end);\n                        continue;\n                    }\n                }\n                if (isRange) {\n                    var maxEndDate = calcMaxEndDate(exceptStarts, compare);\n                    end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);\n                    var r = isForward ? [new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined] : [end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC))];\n                    if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {\n                        lastResult[rEnd] = r[rEnd];\n                        loopCount++;\n                    }\n                    else {\n                        lastResult = r;\n                        results.push(lastResult);\n                    }\n                    if (!end)\n                        break;\n                    updateNextStarts(dir, schedules, schedStarts, end);\n                }\n                else {\n                    results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));\n                    tickStarts(dir, schedules, schedStarts, next);\n                }\n                loopCount--;\n            }\n            for (var i = 0, len = results.length; i < len; i++) {\n                var result = results[i];\n                results[i] = Object.prototype.toString.call(result) === \"[object Array]\" ? [cleanDate(result[0]), cleanDate(result[1])] : cleanDate(result);\n            }\n            return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;\n        }\n        function cleanDate(d) {\n            if (d instanceof Date && !isNaN(d.valueOf())) {\n                return new Date(d);\n            }\n            return undefined;\n        }\n        function setNextStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                startsArr[i] = schedArr[i].start(dir, startDate);\n            }\n        }\n        function updateNextStarts(dir, schedArr, startsArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && !compare(startsArr[i], startDate)) {\n                    startsArr[i] = schedArr[i].start(dir, startDate);\n                }\n            }\n        }\n        function setRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var nextStart = schedArr[i].start(dir, startDate);\n                if (!nextStart) {\n                    rangesArr[i] = later.NEVER;\n                }\n                else {\n                    rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                }\n            }\n        }\n        function updateRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {\n                    var nextStart = schedArr[i].start(dir, startDate);\n                    if (!nextStart) {\n                        rangesArr[i] = later.NEVER;\n                    }\n                    else {\n                        rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                    }\n                }\n            }\n        }\n        function tickStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    // PATCH\n                    const newStart = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));\n\n                    // if the calculated `newStart` is the same as previous, this is probably\n                    // an endless loop caused by the DST shift (the browser won't halt because later.js\n                    // has a limit of 100000 iterations, but the calculated schedules will be all wrong)\n                    if (newStart !== later.NEVER && newStart.getTime() === startsArr[i].getTime()) {\n                        // in such case we use our own \"safe\" implementation of the \"tick\" method\n                        // which performs symbolic date manipulation\n                        // (instead of advancing on milliseconds since epoch timeaxis)\n                        // the former seems to be slower, that's why we only switch to it\n                        // in the case of infinite loop\n                        startsArr[i] = schedArr[i].start(dir, schedArr[i].tickSafe(dir, startDate));\n                    } else {\n                        startsArr[i] = newStart\n                    }\n                    // EOF PATCH\n                }\n            }\n        }\n        function getStart(schedArr, startsArr, startDate, minEndDate) {\n            var result;\n            for (var i = 0, len = startsArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    var start = schedArr[i].tickStart(startDate);\n                    if (minEndDate && start < minEndDate) {\n                        return minEndDate;\n                    }\n                    if (!result || start > result) {\n                        result = start;\n                    }\n                }\n            }\n            return result;\n        }\n        function calcRangeOverlap(dir, rangesArr, startDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = rangesArr.length; i < len; i++) {\n                var range = rangesArr[i];\n                if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {\n                    if (!result || compare(range[1], result)) {\n                        result = range[1];\n                    }\n                }\n            }\n            return result;\n        }\n        function calcMaxEndDate(exceptsArr, compare) {\n            var result;\n            for (var i = 0, len = exceptsArr.length; i < len; i++) {\n                if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {\n                    result = exceptsArr[i][0];\n                }\n            }\n            return result;\n        }\n        function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var start = startsArr[i];\n                if (start && start.getTime() === startDate.getTime()) {\n                    var end = schedArr[i].end(dir, start);\n                    if (maxEndDate && (!end || compare(end, maxEndDate))) {\n                        return maxEndDate;\n                    }\n                    if (!result || compare(end, result)) {\n                        result = end;\n                    }\n                }\n            }\n            return result;\n        }\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return !b || a.getTime() > b.getTime();\n            } : function (a, b) {\n                return !a || b.getTime() > a.getTime();\n            };\n        }\n        function findNext(arr, compare) {\n            var next = arr[0];\n            for (var i = 1, len = arr.length; i < len; i++) {\n                if (arr[i] && compare(next, arr[i])) {\n                    next = arr[i];\n                }\n            }\n            return next;\n        }\n        return {\n            isValid: function (d) {\n                return getInstances(\"next\", 1, d, d) !== later.NEVER;\n            },\n            next: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate);\n            },\n            prev: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate);\n            },\n            nextRange: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate, true);\n            },\n            prevRange: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate, true);\n            }\n        };\n    };\n    later.setTimeout = function (fn, sched) {\n        var s = later.schedule(sched), t;\n        if (fn) {\n            scheduleTimeout();\n        }\n        function scheduleTimeout() {\n            var now = Date.now(), next = s.next(2, now);\n            if (!next[0]) {\n                t = undefined;\n                return;\n            }\n            var diff = next[0].getTime() - now;\n            if (diff < 1e3) {\n                diff = next[1] ? next[1].getTime() - now : 1e3;\n            }\n            if (diff < 2147483647) {\n                t = setTimeout(fn, diff);\n            }\n            else {\n                t = setTimeout(scheduleTimeout, 2147483647);\n            }\n        }\n        return {\n            isDone: function () {\n                return !t;\n            },\n            clear: function () {\n                clearTimeout(t);\n            }\n        };\n    };\n    later.setInterval = function (fn, sched) {\n        if (!fn) {\n            return;\n        }\n        var t = later.setTimeout(scheduleTimeout, sched), done = t.isDone();\n        function scheduleTimeout() {\n            if (!done) {\n                fn();\n                t = later.setTimeout(scheduleTimeout, sched);\n            }\n        }\n        return {\n            isDone: function () {\n                return t.isDone();\n            },\n            clear: function () {\n                done = true;\n                t.clear();\n            }\n        };\n    };\n    later.date = {};\n    later.date.timezone = function (useLocalTime) {\n        later.date.build = useLocalTime ? function (Y, M, D, h, m, s) {\n            return new Date(Y, M, D, h, m, s);\n        } : function (Y, M, D, h, m, s) {\n            return new Date(Date.UTC(Y, M, D, h, m, s));\n        };\n        var get = useLocalTime ? \"get\" : \"getUTC\", d = Date.prototype;\n        later.date.getYear = d[get + \"FullYear\"];\n        later.date.getMonth = d[get + \"Month\"];\n        later.date.getDate = d[get + \"Date\"];\n        later.date.getDay = d[get + \"Day\"];\n        later.date.getHour = d[get + \"Hours\"];\n        later.date.getMin = d[get + \"Minutes\"];\n        later.date.getSec = d[get + \"Seconds\"];\n        later.date.isUTC = !useLocalTime;\n    };\n    later.date.UTC = function () {\n        later.date.timezone(false);\n    };\n    later.date.localTime = function () {\n        later.date.timezone(true);\n    };\n    later.date.UTC();\n    later.SEC = 1e3;\n    later.MIN = later.SEC * 60;\n    later.HOUR = later.MIN * 60;\n    later.DAY = later.HOUR * 24;\n    later.WEEK = later.DAY * 7;\n    later.DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    later.NEVER = 0;\n    later.date.next = function (Y, M, D, h, m, s) {\n        return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);\n    };\n    later.date.nextRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d), max = constraint.extent(d)[1];\n        return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);\n    };\n    later.date.prev = function (Y, M, D, h, m, s) {\n        var len = arguments.length;\n        M = len < 2 ? 11 : M - 1;\n        D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;\n        h = len < 4 ? 23 : h;\n        m = len < 5 ? 59 : m;\n        s = len < 6 ? 59 : s;\n        return later.date.build(Y, M, D, h, m, s);\n    };\n    later.date.prevRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d);\n        return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);\n    };\n    later.parse = {};\n    later.parse.cron = function (expr, hasSeconds) {\n        var NAMES = {\n            JAN: 1,\n            FEB: 2,\n            MAR: 3,\n            APR: 4,\n            MAY: 5,\n            JUN: 6,\n            JUL: 7,\n            AUG: 8,\n            SEP: 9,\n            OCT: 10,\n            NOV: 11,\n            DEC: 12,\n            SUN: 1,\n            MON: 2,\n            TUE: 3,\n            WED: 4,\n            THU: 5,\n            FRI: 6,\n            SAT: 7\n        };\n        var REPLACEMENTS = {\n            \"* * * * * *\": \"0/1 * * * * *\",\n            \"@YEARLY\": \"0 0 1 1 *\",\n            \"@ANNUALLY\": \"0 0 1 1 *\",\n            \"@MONTHLY\": \"0 0 1 * *\",\n            \"@WEEKLY\": \"0 0 * * 0\",\n            \"@DAILY\": \"0 0 * * *\",\n            \"@HOURLY\": \"0 * * * *\"\n        };\n        var FIELDS = {\n            s: [0, 0, 59],\n            m: [1, 0, 59],\n            h: [2, 0, 23],\n            D: [3, 1, 31],\n            M: [4, 1, 12],\n            Y: [6, 1970, 2099],\n            d: [5, 1, 7, 1]\n        };\n        function getValue(value, offset, max) {\n            return isNaN(value) ? NAMES[value] || null : Math.min(+value + (offset || 0), max || 9999);\n        }\n        function cloneSchedule(sched) {\n            var clone = {}, field;\n            for (field in sched) {\n                if (field !== \"dc\" && field !== \"d\") {\n                    clone[field] = sched[field].slice(0);\n                }\n            }\n            return clone;\n        }\n        function add(sched, name, min, max, inc) {\n            var i = min;\n            if (!sched[name]) {\n                sched[name] = [];\n            }\n            while (i <= max) {\n                if (sched[name].indexOf(i) < 0) {\n                    sched[name].push(i);\n                }\n                i += inc || 1;\n            }\n            sched[name].sort(function (a, b) {\n                return a - b;\n            });\n        }\n        function addHash(schedules, curSched, value, hash) {\n            if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {\n                schedules.push(cloneSchedule(curSched));\n                curSched = schedules[schedules.length - 1];\n            }\n            add(curSched, \"d\", value, value);\n            add(curSched, \"dc\", hash, hash);\n        }\n        function addWeekday(s, curSched, value) {\n            var except1 = {}, except2 = {};\n            if (value === 1) {\n                add(curSched, \"D\", 1, 3);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", 2, 2);\n                add(except1, \"d\", NAMES.TUE, NAMES.FRI);\n                add(except2, \"D\", 3, 3);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            else {\n                add(curSched, \"D\", value - 1, value + 1);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", value - 1, value - 1);\n                add(except1, \"d\", NAMES.MON, NAMES.THU);\n                add(except2, \"D\", value + 1, value + 1);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            s.exceptions.push(except1);\n            s.exceptions.push(except2);\n        }\n        function addRange(item, curSched, name, min, max, offset) {\n            var incSplit = item.split(\"/\"), inc = +incSplit[1], range = incSplit[0];\n            if (range !== \"*\" && range !== \"0\") {\n                var rangeSplit = range.split(\"-\");\n                min = getValue(rangeSplit[0], offset, max);\n                max = getValue(rangeSplit[1], offset, max) || max;\n            }\n            add(curSched, name, min, max, inc);\n        }\n        function parse(item, s, name, min, max, offset) {\n            var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];\n            if (item === \"L\") {\n                item = min - 1;\n            }\n            if ((value = getValue(item, offset, max)) !== null) {\n                add(curSched, name, value, value);\n            }\n            else if ((value = getValue(item.replace(\"W\", \"\"), offset, max)) !== null) {\n                addWeekday(s, curSched, value);\n            }\n            else if ((value = getValue(item.replace(\"L\", \"\"), offset, max)) !== null) {\n                addHash(schedules, curSched, value, min - 1);\n            }\n            else if ((split = item.split(\"#\")).length === 2) {\n                value = getValue(split[0], offset, max);\n                addHash(schedules, curSched, value, getValue(split[1]));\n            }\n            else {\n                addRange(item, curSched, name, min, max, offset);\n            }\n        }\n        function isHash(item) {\n            return item.indexOf(\"#\") > -1 || item.indexOf(\"L\") > 0;\n        }\n        function itemSorter(a, b) {\n            return isHash(a) && !isHash(b) ? 1 : a - b;\n        }\n        function parseExpr(expr) {\n            var schedule = {\n                schedules: [{}],\n                exceptions: []\n            }, components = expr.replace(/(\\s)+/g, \" \").split(\" \"), field, f, component, items;\n            for (field in FIELDS) {\n                f = FIELDS[field];\n                component = components[f[0]];\n                if (component && component !== \"*\" && component !== \"?\") {\n                    items = component.split(\",\").sort(itemSorter);\n                    var i, length = items.length;\n                    for (i = 0; i < length; i++) {\n                        parse(items[i], schedule, field, f[1], f[2], f[3]);\n                    }\n                }\n            }\n            return schedule;\n        }\n        function prepareExpr(expr) {\n            var prepared = expr.toUpperCase();\n            return REPLACEMENTS[prepared] || prepared;\n        }\n        var e = prepareExpr(expr);\n        return parseExpr(hasSeconds ? e : \"0 \" + e);\n    };\n    later.parse.recur = function () {\n        var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;\n        function add(name, min, max) {\n            name = modifier ? name + \"_\" + modifier : name;\n            if (!cur) {\n                curArr.push({});\n                cur = curArr[0];\n            }\n            if (!cur[name]) {\n                cur[name] = [];\n            }\n            curName = cur[name];\n            if (every) {\n                values = [];\n                for (i = min; i <= max; i += every) {\n                    values.push(i);\n                }\n                last = {\n                    n: name,\n                    x: every,\n                    c: curName.length,\n                    m: max\n                };\n            }\n            values = applyMin ? [min] : applyMax ? [max] : values;\n            var length = values.length;\n            for (i = 0; i < length; i += 1) {\n                var val = values[i];\n                if (curName.indexOf(val) < 0) {\n                    curName.push(val);\n                }\n            }\n            values = every = modifier = applyMin = applyMax = 0;\n        }\n        return {\n            schedules: schedules,\n            exceptions: exceptions,\n            on: function () {\n                values = arguments[0] instanceof Array ? arguments[0] : arguments;\n                return this;\n            },\n            every: function (x) {\n                every = x || 1;\n                return this;\n            },\n            after: function (x) {\n                modifier = \"a\";\n                values = [x];\n                return this;\n            },\n            before: function (x) {\n                modifier = \"b\";\n                values = [x];\n                return this;\n            },\n            first: function () {\n                applyMin = 1;\n                return this;\n            },\n            last: function () {\n                applyMax = 1;\n                return this;\n            },\n            time: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var split = values[i].split(\":\");\n                    if (split.length < 3)\n                        split.push(0);\n                    values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];\n                }\n                add(\"t\");\n                return this;\n            },\n            second: function () {\n                add(\"s\", 0, 59);\n                return this;\n            },\n            minute: function () {\n                add(\"m\", 0, 59);\n                return this;\n            },\n            hour: function () {\n                add(\"h\", 0, 23);\n                return this;\n            },\n            dayOfMonth: function () {\n                add(\"D\", 1, applyMax ? 0 : 31);\n                return this;\n            },\n            dayOfWeek: function () {\n                add(\"d\", 1, 7);\n                return this;\n            },\n            onWeekend: function () {\n                values = [1, 7];\n                return this.dayOfWeek();\n            },\n            onWeekday: function () {\n                values = [2, 3, 4, 5, 6];\n                return this.dayOfWeek();\n            },\n            dayOfWeekCount: function () {\n                add(\"dc\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            dayOfYear: function () {\n                add(\"dy\", 1, applyMax ? 0 : 366);\n                return this;\n            },\n            weekOfMonth: function () {\n                add(\"wm\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            weekOfYear: function () {\n                add(\"wy\", 1, applyMax ? 0 : 53);\n                return this;\n            },\n            month: function () {\n                add(\"M\", 1, 12);\n                return this;\n            },\n            year: function () {\n                add(\"Y\", 1970, 2450);\n                return this;\n            },\n            fullDate: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    values[i] = values[i].getTime();\n                }\n                add(\"fd\");\n                return this;\n            },\n            customModifier: function (id, vals) {\n                var custom = later.modifier[id];\n                if (!custom)\n                    throw new Error(\"Custom modifier \" + id + \" not recognized!\");\n                modifier = id;\n                values = arguments[1] instanceof Array ? arguments[1] : [arguments[1]];\n                return this;\n            },\n            customPeriod: function (id) {\n                var custom = later[id];\n                if (!custom)\n                    throw new Error(\"Custom time period \" + id + \" not recognized!\");\n                add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);\n                return this;\n            },\n            startingOn: function (start) {\n                return this.between(start, last.m);\n            },\n            between: function (start, end) {\n                cur[last.n] = cur[last.n].splice(0, last.c);\n                every = last.x;\n                add(last.n, start, end);\n                return this;\n            },\n            and: function () {\n                cur = curArr[curArr.push({}) - 1];\n                return this;\n            },\n            except: function () {\n                curArr = exceptions;\n                cur = null;\n                return this;\n            }\n        };\n    };\n    later.parse.text = function (str) {\n        var recur = later.parse.recur, pos = 0, input = \"\", error;\n        var TOKENTYPES = {\n            eof: /^$/,\n            fullDate: /^(\\d\\d\\d\\d-\\d\\d-\\d\\dt\\d\\d:\\d\\d:\\d\\d)\\b/,\n            rank: /^((\\d\\d\\d\\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\\b/,\n            time: /^((([0]?[1-9]|1[0-2]):[0-5]\\d(\\s)?(am|pm))|(([0]?\\d|1\\d|2[0-3]):[0-5]\\d))\\b/,\n            dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\\b/,\n            monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\\b/,\n            yearIndex: /^(\\d\\d\\d\\d)\\b/,\n            every: /^every\\b/,\n            after: /^after\\b/,\n            before: /^before\\b/,\n            second: /^(s|sec(ond)?(s)?)\\b/,\n            minute: /^(m|min(ute)?(s)?)\\b/,\n            hour: /^(h|hour(s)?)\\b/,\n            day: /^(day(s)?( of the month)?)\\b/,\n            dayInstance: /^day instance\\b/,\n            dayOfWeek: /^day(s)? of the week\\b/,\n            dayOfYear: /^day(s)? of the year\\b/,\n            weekOfYear: /^week(s)?( of the year)?\\b/,\n            weekOfMonth: /^week(s)? of the month\\b/,\n            weekday: /^weekday\\b/,\n            weekend: /^weekend\\b/,\n            month: /^month(s)?\\b/,\n            year: /^year(s)?\\b/,\n            between: /^between (the)?\\b/,\n            start: /^(start(ing)? (at|on( the)?)?)\\b/,\n            at: /^(at|@)\\b/,\n            and: /^(,|and\\b)/,\n            except: /^(except\\b)/,\n            also: /(also)\\b/,\n            first: /^(first)\\b/,\n            last: /^last\\b/,\n            \"in\": /^in\\b/,\n            of: /^of\\b/,\n            onthe: /^on the\\b/,\n            on: /^on\\b/,\n            through: /(-|^(to|through)\\b)/\n        };\n        var NAMES = {\n            jan: 1,\n            feb: 2,\n            mar: 3,\n            apr: 4,\n            may: 5,\n            jun: 6,\n            jul: 7,\n            aug: 8,\n            sep: 9,\n            oct: 10,\n            nov: 11,\n            dec: 12,\n            sun: 1,\n            mon: 2,\n            tue: 3,\n            wed: 4,\n            thu: 5,\n            fri: 6,\n            sat: 7,\n            \"1st\": 1,\n            fir: 1,\n            \"2nd\": 2,\n            sec: 2,\n            \"3rd\": 3,\n            thi: 3,\n            \"4th\": 4,\n            \"for\": 4\n        };\n        function t(start, end, text, type) {\n            return {\n                startPos: start,\n                endPos: end,\n                text: text,\n                type: type\n            };\n        }\n        function peek(expected) {\n            var scanTokens = expected instanceof Array ? expected : [expected], whiteSpace = /\\s+/, token, curInput, m, scanToken, start, len;\n            scanTokens.push(whiteSpace);\n            start = pos;\n            while (!token || token.type === whiteSpace) {\n                len = -1;\n                curInput = input.substring(start);\n                token = t(start, start, input.split(whiteSpace)[0]);\n                var i, length = scanTokens.length;\n                for (i = 0; i < length; i++) {\n                    scanToken = scanTokens[i];\n                    m = scanToken.exec(curInput);\n                    if (m && m.index === 0 && m[0].length > len) {\n                        len = m[0].length;\n                        token = t(start, start + len, curInput.substring(0, len), scanToken);\n                    }\n                }\n                if (token.type === whiteSpace) {\n                    start = token.endPos;\n                }\n            }\n            return token;\n        }\n        function scan(expectedToken) {\n            var token = peek(expectedToken);\n            pos = token.endPos;\n            return token;\n        }\n        function parseThroughExpr(tokenType) {\n            var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];\n            for (var i = start; i <= end; i++) {\n                nums.push(i);\n            }\n            return nums;\n        }\n        function parseRanges(tokenType) {\n            var nums = parseThroughExpr(tokenType);\n            while (checkAndParse(TOKENTYPES.and)) {\n                nums = nums.concat(parseThroughExpr(tokenType));\n            }\n            return nums;\n        }\n        function parseEvery(r) {\n            var num, period, start, end;\n            if (checkAndParse(TOKENTYPES.weekend)) {\n                r.on(NAMES.sun, NAMES.sat).dayOfWeek();\n            }\n            else if (checkAndParse(TOKENTYPES.weekday)) {\n                r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();\n            }\n            else {\n                num = parseTokenValue(TOKENTYPES.rank);\n                r.every(num);\n                period = parseTimePeriod(r);\n                if (checkAndParse(TOKENTYPES.start)) {\n                    num = parseTokenValue(TOKENTYPES.rank);\n                    r.startingOn(num);\n                    parseToken(period.type);\n                }\n                else if (checkAndParse(TOKENTYPES.between)) {\n                    start = parseTokenValue(TOKENTYPES.rank);\n                    if (checkAndParse(TOKENTYPES.and)) {\n                        end = parseTokenValue(TOKENTYPES.rank);\n                        r.between(start, end);\n                    }\n                }\n            }\n        }\n        function parseOnThe(r) {\n            if (checkAndParse(TOKENTYPES.first)) {\n                r.first();\n            }\n            else if (checkAndParse(TOKENTYPES.last)) {\n                r.last();\n            }\n            else {\n                r.on(parseRanges(TOKENTYPES.rank));\n            }\n            parseTimePeriod(r);\n        }\n        function parseScheduleExpr(str) {\n            pos = 0;\n            input = str;\n            error = -1;\n            var r = recur();\n            while (pos < input.length && error < 0) {\n                var token = parseToken([TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES[\"in\"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also]);\n                switch (token.type) {\n                    case TOKENTYPES.every:\n                        parseEvery(r);\n                        break;\n                    case TOKENTYPES.after:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.after(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.before:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.before(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.onthe:\n                        parseOnThe(r);\n                        break;\n                    case TOKENTYPES.on:\n                        r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();\n                        break;\n                    case TOKENTYPES.of:\n                        r.on(parseRanges(TOKENTYPES.monthName)).month();\n                        break;\n                    case TOKENTYPES[\"in\"]:\n                        r.on(parseRanges(TOKENTYPES.yearIndex)).year();\n                        break;\n                    case TOKENTYPES.at:\n                        r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        while (checkAndParse(TOKENTYPES.and)) {\n                            r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        }\n                        break;\n                    case TOKENTYPES.and:\n                        break;\n                    case TOKENTYPES.also:\n                        r.and();\n                        break;\n                    case TOKENTYPES.except:\n                        r.except();\n                        break;\n                    default:\n                        error = pos;\n                }\n            }\n            return {\n                schedules: r.schedules,\n                exceptions: r.exceptions,\n                error: error\n            };\n        }\n        function parseTimePeriod(r) {\n            var timePeriod = parseToken([TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear]);\n            switch (timePeriod.type) {\n                case TOKENTYPES.second:\n                    r.second();\n                    break;\n                case TOKENTYPES.minute:\n                    r.minute();\n                    break;\n                case TOKENTYPES.hour:\n                    r.hour();\n                    break;\n                case TOKENTYPES.dayOfYear:\n                    r.dayOfYear();\n                    break;\n                case TOKENTYPES.dayOfWeek:\n                    r.dayOfWeek();\n                    break;\n                case TOKENTYPES.dayInstance:\n                    r.dayOfWeekCount();\n                    break;\n                case TOKENTYPES.day:\n                    r.dayOfMonth();\n                    break;\n                case TOKENTYPES.weekOfMonth:\n                    r.weekOfMonth();\n                    break;\n                case TOKENTYPES.weekOfYear:\n                    r.weekOfYear();\n                    break;\n                case TOKENTYPES.month:\n                    r.month();\n                    break;\n                case TOKENTYPES.year:\n                    r.year();\n                    break;\n                default:\n                    error = pos;\n            }\n            return timePeriod;\n        }\n        function checkAndParse(tokenType) {\n            var found = peek(tokenType).type === tokenType;\n            if (found) {\n                scan(tokenType);\n            }\n            return found;\n        }\n        function parseToken(tokenType) {\n            var t = scan(tokenType);\n            if (t.type) {\n                t.text = convertString(t.text, tokenType);\n            }\n            else {\n                error = pos;\n            }\n            return t;\n        }\n        function parseTokenValue(tokenType) {\n            return parseToken(tokenType).text;\n        }\n        function convertString(str, tokenType) {\n            var output = str;\n            switch (tokenType) {\n                case TOKENTYPES.time:\n                    var parts = str.split(/(:|am|pm)/), hour = parts[3] === \"pm\" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();\n                    output = (hour.length === 1 ? \"0\" : \"\") + hour + \":\" + min;\n                    break;\n                case TOKENTYPES.rank:\n                    output = parseInt(/^\\d+/.exec(str)[0], 10);\n                    break;\n                case TOKENTYPES.monthName:\n                case TOKENTYPES.dayName:\n                    output = NAMES[str.substring(0, 3)];\n                    break;\n                case TOKENTYPES.fullDate:\n                    output = new Date(str.toUpperCase());\n                    break;\n                }\n            return output;\n        }\n        return parseScheduleExpr(str.toLowerCase());\n    };\n    return later;\n})();\n// Set the local time mode for \"later\" library\nlater.date.localTime();\nexport default later;\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * Given a single `Iterable`, returns an array of 2 iterables, mirroring the original one (which should not be used anymore).\n *\n * For example:\n *\n *     const gen = function* () { yield 1; yield 2; yield 3 }\n *\n *     const [ iterable1, iterable2 ] = split(gen())\n *     const [ iter1, iter2 ] = [\n *         iterable1[ Symbol.iterator ](),\n *         iterable2[ Symbol.iterator ]()\n *     ]\n *\n *     iter1.next() // 1\n *     iter2.next() // 1\n *     iter2.next() // 2\n *     iter2.next() // 3\n *     iter1.next() // 2\n *     iter1.next() // 3\n *     iter1.next() // done\n *     iter2.next() // done\n *\n * @param iterable\n */\nexport function split(iterable) {\n    const gen1Pending = [];\n    const gen2Pending = [];\n    let iterator;\n    const gen1 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen1Pending.length) {\n                yield* gen1Pending;\n                gen1Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen2Pending.push(value);\n            yield value;\n        }\n    };\n    const gen2 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen2Pending.length) {\n                yield* gen2Pending;\n                gen2Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen1Pending.push(value);\n            yield value;\n        }\n    };\n    return [gen1(), gen2()];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* inBatchesBySize(iterator, batchSize) {\n    if (batchSize < 0)\n        throw new Error(\"Batch size needs to a natural number\");\n    batchSize = batchSize | 0;\n    const runningBatch = [];\n    for (const el of iterator) {\n        if (runningBatch.length === batchSize) {\n            yield runningBatch;\n            runningBatch.length = 0;\n        }\n        runningBatch.push(el);\n    }\n    if (runningBatch.length > 0)\n        yield runningBatch;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* filter(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* drop(iterator, howMany) {\n    let i = 0;\n    for (const el of iterator) {\n        if (++i > howMany)\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function every(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (!func(el, i++))\n            return false;\n    }\n    return true;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function some(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return true;\n    }\n    return false;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* map(iterator, func) {\n    let i = 0;\n    for (const el of iterator)\n        yield func(el, i++);\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function reduce(iterator, func, initialAcc) {\n    let i = 0;\n    let acc = initialAcc;\n    for (const el of iterator) {\n        acc = func(acc, el, i++);\n    }\n    return acc;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnly(iterator) {\n    const seen = new Set();\n    for (const el of iterator) {\n        if (!seen.has(el)) {\n            seen.add(el);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnlyBy(iterator, func) {\n    const seen = new Set();\n    for (const el of iterator) {\n        const uniqueBy = func(el);\n        if (!seen.has(uniqueBy)) {\n            seen.add(uniqueBy);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* reverse(iterator) {\n    const all = Array.from(iterator);\n    for (let i = all.length - 1; i >= 0; i--)\n        yield all[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeWhile(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n        else\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilIncluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        yield el;\n        if (func(el, i++))\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilExcluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return;\n        yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concat(...iterators) {\n    for (let i = 0; i < iterators.length; i++)\n        yield* iterators[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concatIterable(iteratorsProducer) {\n    for (const iterator of iteratorsProducer)\n        yield* iterator;\n}\n//---------------------------------------------------------------------------------------------------------------------\n// just a chained syntax sugar class\n// note, that we either use a combination of `this.derive()` + this.iterable (which will clear the `this.iterable`)\n// or, use just `this` as iterable, which will also clear the iterator\n//\nexport class ChainedIteratorClass {\n    constructor(iterable) {\n        this.iterable = undefined;\n        if (!iterable)\n            throw new Error(\"Require an iterable instance for chaining\");\n        this.iterable = iterable;\n    }\n    derive(iterable) {\n        this.iterable = undefined;\n        return new ChainedIteratorClass(iterable);\n    }\n    copy() {\n        const [iter1, iter2] = split(this.iterable);\n        this.iterable = iter2;\n        return new ChainedIteratorClass(iter1);\n    }\n    split() {\n        const [iter1, iter2] = split(this.iterable);\n        return [new ChainedIteratorClass(iter1), this.derive(iter2)];\n    }\n    inBatchesBySize(batchSize) {\n        return this.derive(inBatchesBySize(this.iterable, batchSize));\n    }\n    filter(func) {\n        return this.derive(filter(this.iterable, func));\n    }\n    drop(howMany) {\n        return this.derive(drop(this.iterable, howMany));\n    }\n    map(func) {\n        return this.derive(map(this.iterable, func));\n    }\n    reduce(func, initialAcc) {\n        return reduce(this, func, initialAcc);\n    }\n    concat() {\n        //@ts-ignore\n        return this.derive(concatIterable(this.iterable));\n    }\n    uniqueOnly() {\n        return this.derive(uniqueOnly(this.iterable));\n    }\n    uniqueOnlyBy(func) {\n        return this.derive(uniqueOnlyBy(this.iterable, func));\n    }\n    every(func) {\n        return every(this, func);\n    }\n    some(func) {\n        return some(this, func);\n    }\n    takeWhile(func) {\n        return this.derive(takeWhile(this.iterable, func));\n    }\n    *[Symbol.iterator]() {\n        let iterable = this.iterable;\n        if (!iterable)\n            throw new Error(\"Chained iterator already exhausted or used to derive the new one\");\n        // practice shows, that cleaning up the iterable after yourself helps garbage collector a lot\n        this.iterable = undefined;\n        yield* iterable;\n        // yes, we really want to avoid memory leaks\n        iterable = undefined;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    sort(order) {\n        return Array.from(this).sort(order);\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap() {\n        //@ts-ignore\n        return new Map(this);\n    }\n    // toMap<K, V> () : T extends [ K, V ] ? Map<K, V> : never  {\n    //     return new Map<K, V>(this.iterable as (T extends [ K, V ] ? Iterable<T> : never)) as (T extends [ K, V ] ? Map<K, V> : never)\n    // }\n    flush() {\n        for (const element of this) { }\n    }\n    memoize() {\n        return new MemoizedIteratorClass(this);\n    }\n}\nexport const ChainedIterator = (iterator) => new ChainedIteratorClass(iterator);\nexport const CI = ChainedIterator;\n//---------------------------------------------------------------------------------------------------------------------\nexport class MemoizedIteratorClass extends ChainedIteratorClass {\n    constructor() {\n        super(...arguments);\n        this.elements = [];\n        this.$iterator = undefined;\n    }\n    set iterable(iterable) {\n        this.$iterable = iterable;\n    }\n    get iterable() {\n        return this;\n    }\n    derive(iterable) {\n        return new ChainedIteratorClass(iterable);\n    }\n    *[Symbol.iterator]() {\n        const elements = this.elements;\n        if (this.$iterable) {\n            if (!this.$iterator)\n                this.$iterator = this.$iterable[Symbol.iterator]();\n            let iterator = this.$iterator;\n            let alreadyConsumed = elements.length;\n            // yield the 1st batch \"efficiently\"\n            if (alreadyConsumed > 0)\n                yield* elements;\n            while (true) {\n                if (elements.length > alreadyConsumed) {\n                    // wonder if `yield* elements.slice(alreadyConsumed)` is more performant or not\n                    for (let i = alreadyConsumed; i < elements.length; i++)\n                        yield elements[i];\n                    alreadyConsumed = elements.length;\n                }\n                if (!iterator)\n                    break;\n                const { value, done } = iterator.next();\n                if (done) {\n                    iterator = this.$iterator = null;\n                    this.$iterable = null;\n                }\n                else {\n                    elements.push(value);\n                    alreadyConsumed++;\n                    yield value;\n                }\n            }\n        }\n        else {\n            yield* elements;\n        }\n    }\n}\nexport const MemoizedIterator = (iterator) => new MemoizedIteratorClass(iterator);\nexport const MI = MemoizedIterator;\n", "import { CI, MI } from \"../collection/Iterator.js\";\n//---------------------------------------------------------------------------------------------------------------------\nconst MixinInstanceOfProperty = Symbol('MixinIdentity');\nconst MixinStateProperty = Symbol('MixinStateProperty');\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinWalkDepthState {\n    constructor() {\n        this.baseEl = undefined;\n        this.sourceEl = undefined;\n        this.$elementsByTopoLevel = undefined;\n        this.$topoLevels = undefined;\n        this.linearizedByTopoLevelsSource = MI(this.linearizedByTopoLevels());\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        return me;\n    }\n    get topoLevels() {\n        if (this.$topoLevels !== undefined)\n            return this.$topoLevels;\n        return this.$topoLevels = this.buildTopoLevels();\n    }\n    buildTopoLevels() {\n        return Array.from(this.elementsByTopoLevel.keys()).sort((level1, level2) => level1 - level2);\n    }\n    get elementsByTopoLevel() {\n        if (this.$elementsByTopoLevel !== undefined)\n            return this.$elementsByTopoLevel;\n        return this.$elementsByTopoLevel = this.buildElementsByTopoLevel();\n    }\n    getOrCreateLevel(map, topoLevel) {\n        let elementsAtLevel = map.get(topoLevel);\n        if (!elementsAtLevel) {\n            elementsAtLevel = [];\n            map.set(topoLevel, elementsAtLevel);\n        }\n        return elementsAtLevel;\n    }\n    buildElementsByTopoLevel() {\n        let maxTopoLevel = 0;\n        const baseElements = this.baseEl ? CI(this.baseEl.walkDepthState.elementsByTopoLevel.values()).concat().toSet() : new Set();\n        const map = CI(this.sourceEl.requirements)\n            .map(mixin => mixin.walkDepthState.elementsByTopoLevel)\n            .concat()\n            .reduce((elementsByTopoLevel, [topoLevel, mixins]) => {\n            if (topoLevel > maxTopoLevel)\n                maxTopoLevel = topoLevel;\n            this.getOrCreateLevel(elementsByTopoLevel, topoLevel).push(mixins);\n            return elementsByTopoLevel;\n        }, new Map());\n        this.getOrCreateLevel(map, maxTopoLevel + 1).push([this.sourceEl]);\n        return CI(map).map(([level, elements]) => {\n            return [level, CI(elements).concat().uniqueOnly().filter(mixin => !baseElements.has(mixin)).sort((mixin1, mixin2) => mixin1.id - mixin2.id)];\n        }).toMap();\n    }\n    *linearizedByTopoLevels() {\n        yield* CI(this.topoLevels).map(level => this.elementsByTopoLevel.get(level)).concat();\n    }\n}\n// Note: 65535 mixins only, because of the hashing function implementation (String.fromCharCode)\nlet MIXIN_ID = 1;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport const identity = a => class extends a {\n};\n// export type IdentityMixin<Base extends object>         = < T extends AnyConstructor<Base>>(base : T) => T\n//\n// export const IdentityMixin             = <Base extends object>() : IdentityMixin<Base> => identity\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport class ZeroBaseClass {\n}\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinState {\n    constructor() {\n        this.id = MIXIN_ID++;\n        this.requirements = [];\n        this.baseClass = ZeroBaseClass;\n        this.identitySymbol = undefined;\n        this.mixinLambda = identity;\n        this.walkDepthState = undefined;\n        // private $hash               : MixinHash             = ''\n        this.$minimalClass = undefined;\n        this.name = '';\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        me.walkDepthState = MixinWalkDepthState.new({ sourceEl: me, baseEl: getMixinState(me.baseClass) });\n        //------------------\n        const mixinLambda = me.mixinLambda;\n        const symbol = me.identitySymbol = Symbol(mixinLambda.name);\n        const mixinLambdaWrapper = Object.assign(function (base) {\n            const extendedClass = mixinLambda(base);\n            extendedClass.prototype[symbol] = true;\n            return extendedClass;\n        }, {\n            [MixinInstanceOfProperty]: symbol,\n            [MixinStateProperty]: me\n        });\n        Object.defineProperty(mixinLambdaWrapper, Symbol.hasInstance, { value: isInstanceOfStatic });\n        me.mixinLambda = mixinLambdaWrapper;\n        return me;\n    }\n    get minimalClass() {\n        if (this.$minimalClass !== undefined)\n            return this.$minimalClass;\n        return this.$minimalClass = this.buildMinimalClass();\n    }\n    // get hash () : MixinHash {\n    //     if (this.$hash !== '') return this.$hash\n    //\n    //     return this.$hash = this.buildHash()\n    // }\n    // buildHash () : MixinHash {\n    //     return String.fromCharCode(...this.walkDepthState.linearizedByTopoLevelsSource.map(mixin => mixin.id))\n    // }\n    getBaseClassMixinId(baseClass) {\n        const constructor = this.constructor;\n        const mixinId = constructor.baseClassesIds.get(baseClass);\n        if (mixinId !== undefined)\n            return mixinId;\n        const newId = MIXIN_ID++;\n        constructor.baseClassesIds.set(baseClass, newId);\n        return newId;\n    }\n    buildMinimalClass() {\n        const self = this.constructor;\n        let baseCls = this.baseClass;\n        const minimalClassConstructor = this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => {\n            const { cls, hash } = acc;\n            const nextHash = hash + String.fromCharCode(mixin.id);\n            let wrapperCls = self.minimalClassesByLinearHash.get(nextHash);\n            if (!wrapperCls) {\n                wrapperCls = mixin.mixinLambda(cls);\n                mixin.name = wrapperCls.name;\n                self.minimalClassesByLinearHash.set(nextHash, wrapperCls);\n            }\n            acc.cls = wrapperCls;\n            acc.hash = nextHash;\n            return acc;\n        }, { cls: baseCls, hash: String.fromCharCode(this.getBaseClassMixinId(baseCls)) }).cls;\n        const minimalClass = Object.assign(minimalClassConstructor, {\n            [MixinInstanceOfProperty]: this.identitySymbol,\n            [MixinStateProperty]: this,\n            mix: this.mixinLambda,\n            derive: (base) => Mixin([minimalClass, base], base => class extends base {\n            }),\n            $: this,\n            toString: this.toString.bind(this)\n        });\n        Object.defineProperty(minimalClass, Symbol.hasInstance, { value: isInstanceOfStatic });\n        return minimalClass;\n    }\n    toString() {\n        return this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => `${mixin.name}(${acc})`, this.baseClass.name);\n    }\n}\nMixinState.minimalClassesByLinearHash = new Map();\nMixinState.baseClassesIds = new Map();\n//endregion type helpers\n//---------------------------------------------------------------------------------------------------------------------\nconst isMixinClass = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor.hasOwnProperty(MixinStateProperty);\n};\nconst getMixinState = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor[MixinStateProperty];\n};\n//---------------------------------------------------------------------------------------------------------------------\nconst mixin = (required, mixinLambda) => {\n    let baseClass;\n    if (required.length > 0) {\n        const lastRequirement = required[required.length - 1];\n        // absence of `[ MixinStateProperty ]` indicates its a regular class and not a mixin class\n        // avoid assigning ZeroBaseClass - it will be applied as default at the end\n        if (!isMixinClass(lastRequirement) && lastRequirement !== ZeroBaseClass)\n            baseClass = lastRequirement;\n    }\n    const requirements = [];\n    required.forEach((requirement, index) => {\n        const mixinState = requirement[MixinStateProperty];\n        if (mixinState !== undefined) {\n            const currentBaseClass = mixinState.baseClass;\n            // ignore ZeroBaseClass - since those are compatible with any other base class\n            if (currentBaseClass !== ZeroBaseClass) {\n                if (baseClass) {\n                    // already found a base class from requirements earlier\n                    if (baseClass !== currentBaseClass) {\n                        const currentIsSub = currentBaseClass.prototype.isPrototypeOf(baseClass.prototype);\n                        const currentIsSuper = baseClass.prototype.isPrototypeOf(currentBaseClass.prototype);\n                        if (!currentIsSub && !currentIsSuper)\n                            throw new Error(\"Base class mismatch\");\n                        baseClass = currentIsSuper ? currentBaseClass : baseClass;\n                    }\n                }\n                else\n                    // first base class from requirements\n                    baseClass = currentBaseClass;\n            }\n            requirements.push(mixinState);\n        }\n        else {\n            if (index !== required.length - 1)\n                throw new Error(\"Base class should be provided as the last element of the requirements array\");\n        }\n    });\n    //------------------\n    const mixinState = MixinState.new({\n        requirements,\n        mixinLambda: mixinLambda,\n        baseClass: baseClass || ZeroBaseClass\n    });\n    return mixinState.minimalClass;\n};\n//---------------------------------------------------------------------------------------------------------------------\n// this function works both with default mixin class and mixin application function\n// it supplied internally as [Symbol.hasInstance] for the default mixin class and mixin application function\nconst isInstanceOfStatic = function (instance) {\n    return Boolean(instance && instance[this[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is the `instanceof` analog for the classes created with [[Mixin]] helper. It also provides [typeguard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards).\n *\n * There's no strict need to use it, as the native `instanceof` is also supported for the mixins created with the [[Mixin]] helper and also provides\n * typeguarding.\n *\n * @param instance Any value, normally an instance of the mixin class\n * @param func The constructor function of the class, created with [[Mixin]]\n */\nexport const isInstanceOf = (instance, func) => {\n    return Boolean(instance && instance[func[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------\n/**\n * This function allows you to create mixin classes. Mixin classes solves the well-known problem with \"classical\" single-class inheritance,\n * in which class hierarchy must form a tree. When using mixins, class hierarchy becomes an arbitrary acyclic graph.\n *\n * Another view on mixins is that, if \"classical\" class is a point (a vertice of the graph), mixin class is an arrow between the points\n * (an edge in the graph, or rather, a description of the edge).\n *\n * Some background information about the mixin pattern can be found [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes)\n * and [here](https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know/).\n *\n * The pattern, being described here, is the evolution of the previous work, and main advantage is that it solves the compilation error\n * for circular references.\n *\n * Mixin definition. Requirements\n * ------------------------------\n *\n * The pattern looks like:\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *             method1 () : string {\n *                 return this.prop1\n *             }\n *             static static1 : number\n *         }\n *     ){}\n *\n * The core of the definition above is the mixin lambda - a function which receives a base class as its argument and returns a class,\n * extending the base class with additional properties.\n *\n * The example above creates a mixin `Mixin1` which has no requirements. Requirements are the other mixins,\n * which needs to be included in the base class of this mixin.\n *\n * There's also a special type of the requirement,\n * called \"base class requirement\". It is optional and can only appear as the last argument of the requirements\n * array. It does not have to be a mixin, created with the `Mixin` function, but can be any JS class. This requirement\n * specifies, that the base class of this mixin should be a subclass of the given class (or that class itself).\n *\n * The requirements of the mixin needs to be listed 3 times:\n * - as an array of constructor functions, in the 1st argument of the `Mixin` function\n * - as an instance type intersection, in the 1st type argument for the [[AnyConstructor]] type\n * - as an static type intersection, in the 2nd type argument for the [[AnyConstructor]] type\n *\n * For example, `Mixin2` requires `Mixin1`:\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *         }\n *     ){}\n *\n * And `Mixin3` requires both `Mixin1` and `Mixin2` (even that its redundant, since `Mixin2` already requires `Mixin1`,\n * but suppose we don't know the implementation details of the `Mixin2`):\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : AnyConstructor<Mixin1 & Mixin2, typeof Mixin1 & typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Now, `Mixin4` requires `Mixin3`, plus, it requires the base class to be `SomeBaseClass`:\n *\n *     class SomeBaseClass {}\n *\n *     class Mixin4 extends Mixin(\n *         [ Mixin3, SomeBaseClass ],\n *         (base : AnyConstructor<\n *             Mixin3 & SomeBaseClass, typeof Mixin3 & typeof SomeBaseClass\n *         >) =>\n *\n *         class Mixin4 extends base {\n *         }\n *     ){}\n *\n * As already briefly mentioned, the requirements are \"scanned\" deep and included only once. Also all minimal classes are cached -\n * for example the creation of the Mixin3 will reuse the minimal class of the Mixin2 instead of creating a new intermediate class.\n * This means that all edges of the mixin dependencies graph are created only once (up to the base class).\n *\n * Requirements can not form cycles - that will generate both compilation error and run-time stack overflow.\n *\n * The typing for the `Mixin` function will provide a compilation error, if the requirements don't match, e.g. some requirement is\n * listed in the array, but missed in the types. This protects you from trivial mistakes. However, the typing is done up to 10 requirements only.\n * If you need more than 10 requirements for the mixin, use the [[MixinAny]] function, which is an exact analog of `Mixin`, but without\n * this type-level protection for requirements mismatch.\n *\n * It is possible to simplify the type of the `base` argument a bit, by using the [[ClassUnion]] helper. However, it seems in certain edge cases\n * it may lead to compilation errors. If your scenarios are not so complex you should give it a try. Using the [[ClassUnion]] helper, the\n * `Mixin3` can be defined as:\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : ClassUnion<typeof Mixin1, typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Note, that due to this [issue](https://github.com/Microsoft/TypeScript/issues/7342), if you use decorators in your mixin class,\n * the declaration needs to be slightly more verbose (can not use compact notation for the arrow functions):\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 @decorator\n *                 prop2 : string\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * As you noticed, the repeating listing of the requirements is somewhat verbose. Suggestions how the pattern can be improved\n * are [very welcomed](mailto:nickolay8@gmail.com).\n *\n * Mixin instantiation. Mixin constructor. `instanceof`\n * --------------------------------\n *\n * You can instantiate any mixin class just by using its constructor:\n *\n *     const instance1 = new Mixin1()\n *     const instance2 = new Mixin2()\n *\n * As explained in details [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes), mixin constructor should accept variable number of arguments\n * with the `any` type. This is simply because the mixin is supposed to be applicable to any other base class, which may have its own type\n * of the constructor arguments.\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 prop2 : string\n *\n *                 constructor (...args: any[]) {\n *                     super(...args)\n *                     this.prop2 = ''\n *                 }\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * In other words, its not possible to provide any type-safety for mixin instantiation using regular class constructor.\n *\n * However, if we change the way we create class instances a little, we can get the type-safety back. For that,\n * we need to use a \"uniform\" class constructor - a constructor which has the same form for all classes. The [[Base]] class\n * provides such constructor as its static [[Base.new|new]] method. The usage of `Base` class is not required - you can use\n * any other base class.\n *\n * The `instanceof` operator works as expected for instances of the mixin classes. It also takes into account all the requirements.\n * For example:\n *\n *     const instance2 = new Mixin2()\n *\n *     const isMixin2 = instance2 instanceof Mixin2 // true\n *     const isMixin1 = instance2 instanceof Mixin1 // true, since Mixin2 requires Mixin1\n *\n * See also [[isInstanceOf]].\n *\n * \"Manual\" class derivation\n * --------------------------------\n *\n * You have defined a mixin using the `Mixin` function. Now you want to apply it to some base class to get the \"specific\" class to be able\n * to instantiate it. As described above - you don't have to, you can instantiate it directly.\n *\n * Sometimes however, you still want to derive the class \"manually\". For that, you can use static methods `mix` and `derive`, available\n * on all mixins.\n *\n * The `mix` method provides a direct access to the mixin lambda. It does not take requirements into account - that's the implementor's responsibility.\n * The `derive` method is something like \"accumulated\" mixin lambda - mixin lambda with all requirements.\n *\n * Both `mix` and `derive` provide the reasonably typed outcome.\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *         }\n *     ){}\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *             prop2        : string\n *         }\n *     ){}\n *\n *     const ManualMixin1 = Mixin1.mix(Object)\n *     const ManualMixin2 = Mixin2.mix(Mixin1.mix(Object))\n *\n *     const AnotherManualMixin1 = Mixin1.derive(Object)\n *     const AnotherManualMixin2 = Mixin2.derive(Object)\n *\n * Generics\n * --------\n *\n * Using generics with mixins is tricky because TypeScript does not have higher-kinded types and type inference for generics. Still some form\n * of generic arguments is possible, using the interface merging trick.\n *\n * Here's the pattern:\n *\n * ```ts\n * class Duplicator<Element> extends Mixin(\n *     [],\n *     (base : AnyConstructor) =>\n *\n *     class Duplicator extends base {\n *         Element                 : any\n *\n *         duplicate (value : this[ 'Element' ]) : this[ 'Element' ][] {\n *             return [ value, value ]\n *         }\n *     }\n * ){}\n *\n * interface Duplicator<Element> {\n *     Element : Element\n * }\n *\n * const dup = new Duplicator<boolean>()\n *\n * dup.duplicate('foo') // TS2345: Argument of type '\"foo\"' is not assignable to parameter of type 'boolean'.\n * ```\n *\n * In the example above, we've defined a generic argument `Element` for the outer mixin class, but in fact, that argument is not used anywhere in the\n * nested class definition in the mixin lambda. Instead, in the nested class, we define a property `Element`, which plays the role of the\n * generic argument.\n *\n * Mixin class methods then can refer to the generic type as `this[ 'Element' ]`.\n *\n * The generic arguments of the outer and nested classes are tied together in the additional interface declaration, which, by TypeScript rules\n * is merged together with the class definition. In this declaration, we specify that property `Element` has type of the `Element` generic argument.\n *\n * Limitations\n * ---------\n *\n * The most important limitation we found (which affect the old pattern as well) is the compilation error, which will be issued for\n * the private/protected methods, when compiling with declarations emitting (*.d.ts files generation).\n *\n * This is a [well-known problem](https://github.com/microsoft/TypeScript/issues/35822) in the TypeScript world – the *.d.ts files do not represent\n * the internal data structures of the TypeScript compiler well. Instead they use some simplified syntax, optimized for human editing.\n * This is why the compiler may generate false positives in the incremental compilation mode – it uses *.d.ts files internally.\n *\n * This can be a show-stopper for the people that use declaration files (usually for publishing). Keep in mind though, that you can always\n * publish actual TypeScript sources along with the generated JavaScript files, instead of publishing JavaScript + declarations files.\n *\n */\nexport const Mixin = mixin;\n/**\n * This is an exact analog of the [[Mixin]] function, but without type-level protection for requirements mismatch.\n * It supports unlimited number of requirements.\n */\nexport const MixinAny = mixin;\n", "/**\n * The enumeration for the time units\n */\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[\"Millisecond\"] = \"millisecond\";\n    TimeUnit[\"Second\"] = \"second\";\n    TimeUnit[\"Minute\"] = \"minute\";\n    TimeUnit[\"Hour\"] = \"hour\";\n    TimeUnit[\"Day\"] = \"day\";\n    TimeUnit[\"Week\"] = \"week\";\n    TimeUnit[\"Month\"] = \"month\";\n    TimeUnit[\"Quarter\"] = \"quarter\";\n    TimeUnit[\"Year\"] = \"year\";\n})(TimeUnit || (TimeUnit = {}));\n/**\n * The enumeration for the supported constraint types\n */\nexport var ConstraintType;\n(function (ConstraintType) {\n    /**\n     * \"Must start on\" constraint.\n     * Restricts an event to start on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustStartOn\"] = \"muststarton\";\n    /**\n     * \"Must finish on\" constraint.\n     * Restricts an event to finish on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustFinishOn\"] = \"mustfinishon\";\n    /**\n     * \"Start no earlier than\" constraint.\n     * Restricting an event to start on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"StartNoEarlierThan\"] = \"startnoearlierthan\";\n    /**\n     * \"Start no later than\" constraint.\n     * Restricting an event to start on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"StartNoLaterThan\"] = \"startnolaterthan\";\n    /**\n     * \"Finish no earlier than\" constraint.\n     * Restricting an event to finish on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"FinishNoEarlierThan\"] = \"finishnoearlierthan\";\n    /**\n     * \"Finish no later than\" constraint.\n     * Restricting an event to finish on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"FinishNoLaterThan\"] = \"finishnolaterthan\";\n    /**\n     * \"As soon as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's start date.\n     */\n    ConstraintType[\"AsSoonAsPossible\"] = \"assoonaspossible\";\n    /**\n     * \"As late as possible\" constraint.\n     * Note this is not a date constraint per se, but a flag, that indicates that a task \"gravitates\" (is \"stickying\")\n     * to the project's end date.\n     */\n    ConstraintType[\"AsLateAsPossible\"] = \"aslateaspossible\";\n})(ConstraintType || (ConstraintType = {}));\n/**\n * The enumeration for the supported scheduling modes\n */\nexport var SchedulingMode;\n(function (SchedulingMode) {\n    SchedulingMode[\"Normal\"] = \"Normal\";\n    SchedulingMode[\"FixedDuration\"] = \"FixedDuration\";\n    SchedulingMode[\"FixedEffort\"] = \"FixedEffort\";\n    SchedulingMode[\"FixedUnits\"] = \"FixedUnits\";\n})(SchedulingMode || (SchedulingMode = {}));\n/**\n * The enumeration for the dependency validation result\n */\nexport var DependencyValidationResult;\n(function (DependencyValidationResult) {\n    /**\n     * Dependency has no errors\n     */\n    DependencyValidationResult[DependencyValidationResult[\"NoError\"] = 0] = \"NoError\";\n    /**\n     * Indicates that the validated dependency builds a cycle\n     */\n    DependencyValidationResult[DependencyValidationResult[\"CyclicDependency\"] = 1] = \"CyclicDependency\";\n    /**\n     * Indicates that a dependency with the same predecessor and successor as validated one's already exists\n     */\n    DependencyValidationResult[DependencyValidationResult[\"DuplicatingDependency\"] = 2] = \"DuplicatingDependency\";\n})(DependencyValidationResult || (DependencyValidationResult = {}));\n/**\n * The enumeration for the supported dependency types\n */\nexport var DependencyType;\n(function (DependencyType) {\n    /**\n     * Start-to-Start (_SS_)\n     *\n     * With this dependency type, the succeeding event is delayed to start not earlier than the preceding event starts.\n     */\n    DependencyType[DependencyType[\"StartToStart\"] = 0] = \"StartToStart\";\n    /**\n     * Start-to-Finish (_SF_)\n     *\n     * The finish of the succeeding event is constrained by the start of the preceding event.\n     * So the successor cannot finish before the predecessor starts.\n     */\n    DependencyType[DependencyType[\"StartToEnd\"] = 1] = \"StartToEnd\";\n    /**\n     * Finish-to-Start (_FS_)\n     *\n     * This type of dependency, restricts the dependent event to not start earlier than the preceding event finishes.\n     */\n    DependencyType[DependencyType[\"EndToStart\"] = 2] = \"EndToStart\";\n    /**\n     * Finish-to-Finish (_FF_)\n     *\n     * The succeeding event cannot finish before the completion of the preceding event.\n     */\n    DependencyType[DependencyType[\"EndToEnd\"] = 3] = \"EndToEnd\";\n})(DependencyType || (DependencyType = {}));\n/**\n * The enumeration for the supported sources of the calendar for the dependency.\n */\nexport var DependenciesCalendar;\n(function (DependenciesCalendar) {\n    DependenciesCalendar[\"Project\"] = \"Project\";\n    DependenciesCalendar[\"FromEvent\"] = \"FromEvent\";\n    DependenciesCalendar[\"ToEvent\"] = \"ToEvent\";\n})(DependenciesCalendar || (DependenciesCalendar = {}));\n/**\n * Engine provides with different project types, the enumeration describes the types currently available\n */\nexport var ProjectType;\n(function (ProjectType) {\n    ProjectType[ProjectType[\"SchedulerBasic\"] = 1] = \"SchedulerBasic\";\n    ProjectType[ProjectType[\"SchedulerPro\"] = 2] = \"SchedulerPro\";\n    ProjectType[ProjectType[\"Gantt\"] = 3] = \"Gantt\";\n})(ProjectType || (ProjectType = {}));\n/**\n * The enumeration for the scheduling direction\n */\nexport var Direction;\n(function (Direction) {\n    /**\n     * Forward (or As Soon As Possible (ASAP)) scheduling.\n     */\n    Direction[\"Forward\"] = \"Forward\";\n    /**\n     * Backward (or As Late As Possible (ALAP)) scheduling.\n     */\n    Direction[\"Backward\"] = \"Backward\";\n    Direction[\"None\"] = \"None\";\n})(Direction || (Direction = {}));\nexport const isEqualEffectiveDirection = (a, b) => {\n    if (a && !b || !a && b)\n        return false;\n    if (!a && !b)\n        return true;\n    return (a.direction === b.direction)\n        && (a.kind === 'own' && b.kind === 'own'\n            || (a.kind === 'enforced' && b.kind === 'enforced' && a.enforcedBy === b.enforcedBy)\n            || (a.kind === 'inherited' && b.kind === 'inherited' && a.inheritedFrom === b.inheritedFrom));\n};\nexport var ConstraintIntervalSide;\n(function (ConstraintIntervalSide) {\n    ConstraintIntervalSide[\"Start\"] = \"Start\";\n    ConstraintIntervalSide[\"End\"] = \"End\";\n})(ConstraintIntervalSide || (ConstraintIntervalSide = {}));\n", "// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n/**\n * Minimal date representable with native Date class\n */\nexport const MIN_DATE = new Date(-8640000000000000);\n/**\n * Maximal date representable with native Date class\n */\nexport const MAX_DATE = new Date(8640000000000000);\nexport const isDateFinite = (date) => {\n    if (!date)\n        return false;\n    const time = date.getTime();\n    return time !== MIN_DATE.getTime() && time !== MAX_DATE.getTime();\n};\n", "/**\n * The date intervals in the scheduling engine are always inclusive on one end and opened on another.\n * The \"opened\" end is not considered to be a part of the interval.\n *\n * Depending from the scheduling direction (forward/backward) this property may need to be inverted.\n *\n * This enum specifies what edge of the interval is inclusive.\n */\nexport var EdgeInclusion;\n(function (EdgeInclusion) {\n    EdgeInclusion[EdgeInclusion[\"Left\"] = 0] = \"Left\";\n    EdgeInclusion[EdgeInclusion[\"Right\"] = 1] = \"Right\";\n})(EdgeInclusion || (EdgeInclusion = {}));\n", "import DateHelper from \"../../Core/helper/DateHelper.js\";\nimport { TimeUnit } from \"../scheduling/Types.js\";\nimport { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\n/**\n * The enum type for result of [[forEachAvailabilityInterval]].\n */\nexport var CalendarIteratorResult;\n(function (CalendarIteratorResult) {\n    /**\n     * Indicates the iteration has completed by iterating the whole given timespan or has reached the MAX_DATE or MIN_DATE.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"FullRangeIterated\"] = 0] = \"FullRangeIterated\";\n    /**\n     * Indicates the iteration has been stopped by returning `false` from the iterator.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"StoppedByIterator\"] = 1] = \"StoppedByIterator\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxCacheExtendCyclesReached\"] = 2] = \"MaxCacheExtendCyclesReached\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxRangeReached\"] = 3] = \"MaxRangeReached\";\n})(CalendarIteratorResult || (CalendarIteratorResult = {}));\n/**\n * Calendar cache.\n */\nexport class CalendarCache {\n    constructor(config) {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalsCachingChunkDuration = 30;\n        this.intervalsCachingChunkUnit = TimeUnit.Day;\n        this.maxCacheExtendCycles = 1000;\n        // max range for the iteration - 5 years\n        this.maxRange = 5 * 365 * 24 * 60 * 60 * 1000;\n        config && Object.assign(this, config);\n    }\n    includeWrappingRangeFrom(cache, startDate, endDate) {\n        cache.ensureCacheFilledForInterval(startDate, endDate);\n        this.intervalCache.includeWrappingRange(cache.intervalCache, startDate, endDate);\n    }\n    // after this method, we guarantee, that for every point between `startDate` and `endDate` (_inclusive_)\n    // we'll have a final representation of the cache, that is, we'll be able to get an interval to which this point belongs\n    // _both_ for forward and backward directions\n    ensureCacheFilledForInterval(startDate, endDate) {\n        const cacheFilledStartDateN = this.cacheFilledStartDate.getTime();\n        const cacheFilledEndDateN = this.cacheFilledEndDate.getTime();\n        if (cacheFilledStartDateN !== MAX_DATE.getTime()) {\n            const startDateN = startDate.getTime();\n            const endDateN = endDate.getTime();\n            if (cacheFilledStartDateN <= startDateN && endDateN <= cacheFilledEndDateN)\n                return;\n            // asked to cache an interval which is to the left from the cached area - extend to the right\n            if (endDateN <= cacheFilledStartDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else if (startDateN >= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN);\n            }\n            else if (cacheFilledStartDateN <= startDateN && startDateN <= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN + 1);\n            }\n            else if (cacheFilledStartDateN <= endDateN && endDateN <= cacheFilledEndDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate, new Date(cacheFilledStartDateN - 1));\n                this.ensureCacheFilledForInterval(new Date(cacheFilledEndDateN + 1), endDate);\n                return;\n            }\n        }\n        if (cacheFilledStartDateN === MAX_DATE.getTime() || startDate.getTime() < cacheFilledEndDateN) {\n            this.cacheFilledStartDate = startDate;\n        }\n        if (cacheFilledEndDateN === MIN_DATE.getTime() || cacheFilledEndDateN < endDate.getTime()) {\n            this.cacheFilledEndDate = endDate;\n        }\n        this.fillCache(startDate, endDate);\n    }\n    fillCache(_1 /* startDate */, _2 /* endDate */) {\n        throw new Error(\"Abstract method\");\n    }\n    clear() {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalCache.clear();\n    }\n    /**\n     * The core iterator method of the calendar cache.\n     *\n     * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n     * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n     * iterator function should return `false` at some point, to avoid infinite loops.\n     *\n     * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n     *\n     * Another recognized option is `maxRange`, which indicates the maximum timespan for this iterator (in milliseconds). When iterator\n     * exceeds this timespan, the iteration is stopped and [[CalendarIteratorResult.MaxRangeReached]] value is returned.\n     * Default value is 5 years.\n     *\n     * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n     * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n     * for this function. If iterator returns `false` (checked with `===`) the iteration stops.\n     *\n     * @param scope The scope (`this` value) to execute the iterator in.\n     */\n    forEachAvailabilityInterval(options, func, scope) {\n        scope = scope || this;\n        const startDate = options.startDate;\n        const endDate = options.endDate;\n        const startDateN = startDate && startDate.getTime();\n        const endDateN = endDate && endDate.getTime();\n        const maxRange = options.maxRange ?? this.maxRange;\n        // `isForward = true` by default\n        const isForward = options.isForward !== false;\n        if (isForward ? !startDate : !endDate) {\n            throw new Error(\"At least `startDate` or `endDate` is required, depending from the `isForward` option\");\n        }\n        const intervalCache = this.intervalCache;\n        let cacheCursorDate = isForward ? startDate : endDate;\n        let cursorDate = isForward ? startDate : endDate;\n        const rangeStart = cursorDate.getTime();\n        // this is generally an endless loop, but we artificially limit it to `maxCacheExtendCycles` iterations\n        // to avoid freezing in unforeseen edge cases\n        for (let cycle = 1; cycle < this.maxCacheExtendCycles; cycle++) {\n            if (isForward) {\n                this.ensureCacheFilledForInterval(cacheCursorDate, endDate || DateHelper.add(cacheCursorDate, this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit));\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate || DateHelper.add(cacheCursorDate, -this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit), cacheCursorDate);\n            }\n            let interval = intervalCache.getIntervalOf(cursorDate, isForward ? EdgeInclusion.Left : EdgeInclusion.Right);\n            while (interval) {\n                const intervalStartDate = interval.startDate;\n                const intervalEndDate = interval.endDate;\n                // out of requested range - all done\n                if ((isForward && endDateN && intervalStartDate.getTime() >= endDateN)\n                    ||\n                        (!isForward && startDateN && intervalEndDate.getTime() <= startDateN)) {\n                    return CalendarIteratorResult.FullRangeIterated;\n                }\n                if ((isForward && intervalStartDate.getTime() - rangeStart >= maxRange)\n                    ||\n                        (!isForward && rangeStart - intervalEndDate.getTime() >= maxRange)) {\n                    return CalendarIteratorResult.MaxRangeReached;\n                }\n                // we are out of cached area, need to extend the cache,\n                // using `>=, <=` here, because, as an edge case the cache can be filled exactly up to that interval\n                // and following interval will be infinity, which will trigger premature loop exit\n                // caused by the https://github.com/bryntum/support/issues/6406\n                if ((isForward && intervalStartDate.getTime() >= this.cacheFilledEndDate.getTime())\n                    ||\n                        (!isForward && intervalEndDate.getTime() <= this.cacheFilledStartDate.getTime())) {\n                    break;\n                }\n                // save the last processed point, from which we should start after cache will be extended\n                cursorDate = isForward ? intervalEndDate : intervalStartDate;\n                // adjust to start / end date limits in iterator\n                const countFrom = startDateN && intervalStartDate.getTime() < startDateN ? startDate : intervalStartDate;\n                const countTill = endDateN && intervalEndDate.getTime() > endDateN ? endDate : intervalEndDate;\n                if (func.call(scope, countFrom, countTill, interval.cacheInterval) === false) {\n                    // indicates premature exit if iterator returns `false`\n                    return CalendarIteratorResult.StoppedByIterator;\n                }\n                interval = isForward ? intervalCache.getNextInterval(interval) : intervalCache.getPrevInterval(interval);\n            }\n            if (isForward && cursorDate.getTime() === MAX_DATE.getTime() || !isForward && cursorDate.getTime() === MIN_DATE.getTime()) {\n                return CalendarIteratorResult.FullRangeIterated;\n            }\n            cacheCursorDate = isForward ? this.cacheFilledEndDate : this.cacheFilledStartDate;\n        }\n        return CalendarIteratorResult.MaxCacheExtendCyclesReached;\n    }\n}\n", "export const stripDuplicates = (array) => Array.from(new Set(array));\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\n/**\n * A class, that represent a cached set of availability intervals. One can use the [[getIsWorking]] method\n * to determine if this set intervals represents working time or non-working.\n */\nexport class CalendarCacheInterval {\n    constructor(config) {\n        this.intervals = [];\n        config && Object.assign(this, config);\n        if (!this.calendar)\n            throw new Error(\"Required attribute `calendar` is missing\");\n    }\n    includeInterval(interval) {\n        if (this.intervals.indexOf(interval) == -1) {\n            const copy = this.intervals.slice();\n            copy.push(interval);\n            return new CalendarCacheInterval({ intervals: copy, calendar: this.calendar });\n        }\n        else\n            return this;\n    }\n    combineWith(interval) {\n        return new CalendarCacheInterval({ intervals: this.intervals.concat(interval.intervals), calendar: this.calendar });\n    }\n    /**\n     * Returns the working status of this intervals set. It is determined as a working status\n     * of the most prioritized interval (intervals are prioritized from child to parent)\n     */\n    getIsWorking() {\n        if (this.isWorking != null)\n            return this.isWorking;\n        const intervals = this.intervals = this.normalizeIntervals(this.intervals);\n        // return the value of the interval with the highest priority\n        return this.isWorking = intervals[0].isWorking;\n    }\n    normalizeIntervals(intervals) {\n        const filtered = stripDuplicates(intervals);\n        // sort in decreasing order\n        filtered.sort((interval1, interval2) => interval2.getPriorityField() - interval1.getPriorityField());\n        return filtered;\n    }\n}\n", "// Generic binary search\nexport const binarySearch = (value, array, comparator = (a, b) => a - b) => {\n    let left = 0;\n    let right = array.length;\n    while (left < right) {\n        // | 0 to make it integer, faster according to: https://jsperf.com/or-vs-floor/2\n        const mid = (left + right) / 2 | 0;\n        const compare = comparator(value, array[mid]);\n        if (compare === 0)\n            return { found: true, index: mid };\n        else if (compare < 0)\n            right = mid;\n        else\n            left = mid + 1;\n    }\n    return { found: false, index: right };\n};\n", "import { binarySearch } from \"../util/BinarySearch.js\";\nexport var IndexPosition;\n(function (IndexPosition) {\n    IndexPosition[IndexPosition[\"Exact\"] = 0] = \"Exact\";\n    IndexPosition[IndexPosition[\"Next\"] = 1] = \"Next\";\n})(IndexPosition || (IndexPosition = {}));\n// <remove-on-release>\n// TODO: store keys and values in a single array of \"entries\"? less memory movement during insert/delete in theory\n// </remove-on-release>\nexport class SortedMap {\n    constructor(comparator) {\n        this.keys = [];\n        this.values = [];\n        this.comparator = comparator || ((a, b) => a - b);\n    }\n    set(key, value) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found) {\n            this.values[search.index] = value;\n        }\n        else {\n            this.keys.splice(search.index, 0, key);\n            this.values.splice(search.index, 0, value);\n        }\n        return search.index;\n    }\n    // you need to know what you are doing when using this method\n    insertAt(index, key, value) {\n        this.keys.splice(index, 0, key);\n        this.values.splice(index, 0, value);\n    }\n    setValueAt(index, value) {\n        this.values[index] = value;\n    }\n    get(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return search.found ? this.values[search.index] : undefined;\n    }\n    getEntryAt(index) {\n        return index < this.keys.length ? { key: this.keys[index], value: this.values[index] } : undefined;\n    }\n    getKeyAt(index) {\n        return this.keys[index];\n    }\n    getValueAt(index) {\n        return this.values[index];\n    }\n    delete(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found)\n            this.deleteAt(search.index);\n    }\n    size() {\n        return this.keys.length;\n    }\n    deleteAt(index) {\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n    }\n    indexOfKey(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return {\n            found: search.found ? IndexPosition.Exact : IndexPosition.Next,\n            index: search.index\n        };\n    }\n    map(func) {\n        const keys = this.keys;\n        const values = this.values;\n        const result = [];\n        for (let i = 0; i < keys.length; i++)\n            result.push(func(values[i], keys[i], i));\n        return result;\n    }\n    getAllEntries() {\n        return this.map((value, key) => { return { value, key }; });\n    }\n    clear() {\n        this.keys.length = 0;\n        this.values.length = 0;\n    }\n}\n", "import { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\nimport { IndexPosition, SortedMap } from \"./SortedMap.js\";\nexport class IntervalCache {\n    constructor(config) {\n        this.points = new SortedMap((a, b) => a.getTime() - b.getTime());\n        this.leftInfinityKey = MIN_DATE;\n        this.rightInfinityKey = MAX_DATE;\n        Object.assign(this, config);\n        if (this.emptyInterval === undefined || !this.combineIntervalsFn)\n            throw new Error(\"All of `emptyPoint`, `combineIntervalsFn` are required\");\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n    size() {\n        return this.points.size();\n    }\n    indexOf(date) {\n        return this.points.indexOfKey(date);\n    }\n    getDateAt(index) {\n        return this.points.getKeyAt(index);\n    }\n    getPointAt(index) {\n        return this.points.getValueAt(index);\n    }\n    getIntervalOf(date, edgeInclusion = EdgeInclusion.Left) {\n        // the `index` here is guaranteed to be > 0, because at index 0 there's a `emptyPoint`\n        let { found, index } = this.indexOf(date);\n        let startDateIndex;\n        if (edgeInclusion === EdgeInclusion.Left) {\n            startDateIndex = found === IndexPosition.Exact ? index : index - 1;\n        }\n        else {\n            startDateIndex = index - 1;\n        }\n        return this.getIntervalWithStartDateIndex(startDateIndex);\n    }\n    getPrevInterval(interval) {\n        if (interval.startDateIndex === 0)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex - 1);\n    }\n    getNextInterval(interval) {\n        if (interval.startDateIndex >= this.size() - 1)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex + 1);\n    }\n    getIntervalWithStartDateIndex(startDateIndex) {\n        return {\n            startDateIndex: startDateIndex,\n            startDate: this.getDateAt(startDateIndex),\n            endDate: startDateIndex + 1 < this.size() ? this.getDateAt(startDateIndex + 1) : this.rightInfinityKey,\n            cacheInterval: this.getPointAt(startDateIndex)\n        };\n    }\n    addInterval(startDate, endDate, extendInterval) {\n        const points = this.points;\n        // there is always \"leftInfinityKey\" empty point, so `index >= 0`\n        const { found, index } = points.indexOfKey(startDate);\n        let curIndex;\n        let lastUpdatedPoint;\n        if (found == IndexPosition.Exact) {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index));\n            points.setValueAt(index, inclusion);\n            curIndex = index + 1;\n        }\n        else {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index - 1));\n            points.insertAt(index, startDate, inclusion);\n            curIndex = index + 1;\n        }\n        while (curIndex < points.size()) {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() >= endDate.getTime())\n                break;\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(curIndex));\n            points.setValueAt(curIndex, inclusion);\n            curIndex++;\n        }\n        if (curIndex === points.size()) {\n            points.insertAt(points.size(), endDate, this.emptyInterval);\n        }\n        else {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() === endDate.getTime()) {\n                // we advanced till some point, which matches `endDate` config\n                // this point will setup a new label, no need to add an explicit end date point,\n                // we are done, do nothing\n            }\n            else {\n                points.insertAt(curIndex, endDate, lastUpdatedPoint);\n            }\n        }\n    }\n    includeWrappingRange(intervalCache, startDate, endDate) {\n        let interval = intervalCache.getIntervalOf(startDate);\n        while (interval) {\n            this.addInterval(interval.startDate, interval.endDate, existingInterval => this.combineIntervalsFn(existingInterval, interval.cacheInterval));\n            if (interval.endDate.getTime() > endDate.getTime())\n                break;\n            interval = intervalCache.getNextInterval(interval);\n        }\n    }\n    getSummary() {\n        return this.points.map((label, date) => { return { label, date }; });\n    }\n    clear() {\n        this.points.clear();\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n}\n", "import later from \"../vendor/later/later.js\";\nimport { CalendarCache } from \"./CalendarCache.js\";\nimport { CalendarCacheInterval } from \"./CalendarCacheInterval.js\";\nimport { IntervalCache } from \"./IntervalCache.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport TimeZoneHelper from \"../../Core/helper/TimeZoneHelper.js\";\nexport class CalendarCacheSingle extends CalendarCache {\n    constructor(config) {\n        super(config);\n        this.staticIntervalsCached = false;\n        if (!this.unspecifiedTimeInterval)\n            throw new Error(\"Required attribute `unspecifiedTimeInterval` is missing\");\n        this.intervalCache = new IntervalCache({\n            emptyInterval: new CalendarCacheInterval({\n                intervals: [this.unspecifiedTimeInterval],\n                calendar: this.calendar\n            }),\n            combineIntervalsFn: (interval1, interval2) => {\n                return interval1.combineWith(interval2);\n            }\n        });\n    }\n    fillCache(startDate, endDate) {\n        if (!this.staticIntervalsCached) {\n            this.cacheStaticIntervals();\n            this.staticIntervalsCached = true;\n        }\n        if (this.parentCache)\n            this.includeWrappingRangeFrom(this.parentCache, startDate, endDate);\n        const startDateN = startDate.getTime();\n        const endDateN = endDate.getTime();\n        const timeZone = this.calendar.ignoreTimeZone ? null : this.calendar.project?.timeZone;\n        if (startDateN > endDateN)\n            throw new Error(\"Invalid cache fill interval\");\n        this.forEachRecurrentInterval(interval => {\n            const startSchedule = interval.getStartDateSchedule();\n            const endSchedule = interval.getEndDateSchedule();\n            let wrappingStartDate = startSchedule.prev(1, startDate);\n            let wrappingEndDate;\n            if (endSchedule === 'EOD') {\n                const nextEndDate = startSchedule.next(1, endDate);\n                if (nextEndDate !== later.NEVER) {\n                    wrappingEndDate = DateHelper.getStartOfNextDay(nextEndDate, true);\n                }\n                else {\n                    wrappingEndDate = later.NEVER;\n                }\n            }\n            else {\n                wrappingEndDate = endSchedule.next(1, endDate);\n            }\n            // if the `startDate` is an occurrence in the interval's schedule, we need to advance one point prior\n            // this is to provide the backward-scheduling information for the `startDate` point\n            if (wrappingStartDate !== later.NEVER && wrappingStartDate.getTime() === startDateN) {\n                const wrappingStartDates = startSchedule.prev(2, startDate);\n                if (wrappingStartDates !== later.NEVER && wrappingStartDates.length === 2)\n                    wrappingStartDate = wrappingStartDates[1];\n            }\n            if (wrappingEndDate !== later.NEVER && wrappingEndDate.getTime() === endDateN) {\n                const wrappingEndDates = endSchedule.next(2, endDate);\n                if (wrappingEndDates !== later.NEVER && wrappingEndDates.length === 2)\n                    wrappingEndDate = wrappingEndDates[1];\n            }\n            const startDates = startSchedule.next(Infinity, wrappingStartDate !== later.NEVER ? wrappingStartDate : startDate, wrappingEndDate !== later.NEVER ? new Date(wrappingEndDate.getTime() - 1) : endDate);\n            // schedule is empty for the interval of interest, do nothing\n            if (startDates === later.NEVER)\n                return;\n            // at this point `startDates` is a non-empty array\n            const endDates = endSchedule === 'EOD' ? startDates.map(date => DateHelper.getStartOfNextDay(date, true)) : endSchedule.next(Infinity, new Date(startDates[0].getTime() + 1), wrappingEndDate !== later.NEVER ? wrappingEndDate : endDate);\n            if (endDates === later.NEVER)\n                return;\n            if (endDates.length > startDates.length) {\n                // safe to ignore \"extra\" end dates\n                endDates.length = startDates.length;\n            }\n            else if (endDates.length < startDates.length) {\n                // monkey patch\n                startDates.length = endDates.length;\n                // throw new Error(\"Recurrent interval inconsistency: \" + interval + \", caching startDate: \" + startDate + \", caching endDate: \" + endDate)\n            }\n            startDates.forEach((startDate, index) => {\n                let recStartDate = startDate;\n                let recEndDate = endDates[index];\n                // Adjust calendar intervals when changing time zone\n                if (timeZone != null) {\n                    recStartDate = TimeZoneHelper.toTimeZone(recStartDate, timeZone);\n                    recEndDate = TimeZoneHelper.toTimeZone(recEndDate, timeZone);\n                }\n                // if (recStartDate.getTime() > recEndDate.getTime())\n                //     throw new Error(\"Recurrent interval inconsistency: \" + interval + \", startDate: \" + startDate + \", endDate: \" + endDates[ index ])\n                this.intervalCache.addInterval(recStartDate, recEndDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n            });\n        });\n    }\n    clear() {\n        this.staticIntervalsCached = false;\n        super.clear();\n    }\n    cacheStaticIntervals() {\n        this.forEachStaticInterval(interval => {\n            const timeZone = this.calendar.project?.timeZone;\n            let { startDate, endDate } = interval;\n            // Adjust calendar intervals when changing time zone\n            if (timeZone != null) {\n                startDate = TimeZoneHelper.toTimeZone(startDate, timeZone);\n                endDate = TimeZoneHelper.toTimeZone(endDate, timeZone);\n            }\n            this.intervalCache.addInterval(startDate, endDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n        });\n    }\n    forEachStaticInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isStatic())\n                func(interval);\n        });\n    }\n    forEachRecurrentInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isRecurrent())\n                func(interval);\n        });\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class AbstractPartOfProjectGenericMixin extends Mixin([], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectGenericMixin extends base {\n        async commitAsync() {\n            return this.project.commitAsync();\n        }\n        set project(project) {\n            this.$project = project;\n        }\n        get project() {\n            return this.$project;\n        }\n        calculateProject() {\n            throw new Error(\"Implement me\");\n        }\n        /**\n         * The method to set the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        setProject(project) {\n            return this.project = project;\n        }\n        /**\n         * The method to get the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getProject() {\n            if (this.project)\n                return this.project;\n            return this.setProject(this.calculateProject());\n        }\n        /**\n         * Convenience method to get the instance of the assignment store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getAssignmentStore() {\n            const project = this.getProject();\n            return project?.assignmentStore;\n        }\n        /**\n         * Convenience method to get the instance of the dependency store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getDependencyStore() {\n            const project = this.getProject();\n            return project?.dependencyStore;\n        }\n        /**\n         * Convenience method to get the instance of the event store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getEventStore() {\n            const project = this.getProject();\n            return project?.eventStore;\n        }\n        /**\n         * Convenience method to get the instance of the resource store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getResourceStore() {\n            const project = this.getProject();\n            return project?.resourceStore;\n        }\n        /**\n         * Convenience method to get the instance of the calendar manager store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getCalendarManagerStore() {\n            const project = this.getProject();\n            return project?.calendarManagerStore;\n        }\n    }\n    return AbstractPartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\n/**\n * This an abstract mixin for every Store, that belongs to a project.\n *\n * The store with this mixin, supposes, that it will be \"joining\" the project, a reference to which is saved\n * and made available for all models.\n */\nexport class AbstractPartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isLoadingData = false;\n            this.disableHasLoadedDataToCommitFlag = false;\n        }\n        static get $name() {\n            return 'AbstractPartOfProjectStoreMixin';\n        }\n        //region Async event triggering\n        // NOTE: Tested in Scheduler (EventStore.t.js)\n        construct(config = {}) {\n            config.asyncEvents = {\n                add: true,\n                remove: true,\n                removeAll: true,\n                change: true,\n                refresh: true,\n                replace: true,\n                move: true,\n                update: true\n            };\n            return superProto.construct.call(this, config);\n        }\n        // Override for event triggering, to allow triggering events before and after some async operation.\n        // The \"before\" events are prefix, the \"after\" are not.\n        trigger(eventName, param) {\n            const me = this, { asyncEvents, project } = me, asyncEvent = asyncEvents?.[eventName], asyncAction = asyncEvent && (asyncEvent === true || asyncEvent[param.action]);\n            if (!asyncAction) {\n                // Trigger as usual\n                return superProto.trigger.call(me, eventName, param);\n            }\n            // Trigger prefixed before event\n            superProto.trigger.call(me, `${eventName}PreCommit`, { ...param });\n            // Event that did not invalidate engine, for example \"update\"\n            if (!project || project.isEngineReady() && !project.isWritingData) {\n                // Trigger \"original\" event\n                superProto.trigger.call(me, eventName, param);\n            }\n            else if (!me.eventsSuspended && project) {\n                // Instead of making n auto-destroying listeners (which takes enormous amount of time), we make a single\n                // one and queue all the events. When dataReady event is triggered we trigger those events\n                // https://github.com/bryntum/support/issues/3154\n                if (!project.dataReadyDetacher) {\n                    project.queuedDataReadyEvents = [];\n                    // Wait for commit without triggering one, otherwise we would affect commit scheduling\n                    project.dataReadyDetacher = project.ion({\n                        dataReady() {\n                            // Trigger \"original\" event\n                            this.queuedDataReadyEvents.forEach(([superProto, scope, eventName, param]) => {\n                                superProto.trigger.call(scope, eventName, param);\n                            });\n                            project.queuedDataReadyEvents = null;\n                            project.dataReadyDetacher();\n                            project.dataReadyDetacher = null;\n                        },\n                        once: true\n                    });\n                }\n                project.queuedDataReadyEvents.push([superProto, me, eventName, param]);\n            }\n            // No way of handling other return values in this scenario, won't work for preventable events\n            return true;\n        }\n        //endregion\n        calculateProject() {\n            // project is supposed to be provided for stores from outside\n            return this.project;\n        }\n        setStoreData(data) {\n            // Loading data sets hasLoadedDataToCommit flag.\n            // So we treat the 1st commit after data loading as the initial one\n            if (this.project && !(this.syncDataOnLoad || this.disableHasLoadedDataToCommitFlag)) {\n                this.project.hasLoadedDataToCommit = true;\n            }\n            this.isLoadingData = true;\n            superProto.setStoreData.call(this, data);\n            this.isLoadingData = false;\n            this.project?.trigger('storeRefresh', { store: this });\n        }\n        // Override to postpone auto commits to after project commit, makes sure records are unmodified after commit\n        async doAutoCommit() {\n            if (this.suspendCount <= 0 && this.project && !this.project.isEngineReady()) {\n                // <remove-on-release>\n                // TODO: Ask nick about this, I could not get mixin order correct for this to work\n                // </remove-on-release>\n                // @ts-ignore\n                await this.project.commitAsync();\n            }\n            superProto.doAutoCommit.call(this);\n        }\n        async addAsync(records, silent) {\n            const result = this.add(records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async insertAsync(index, records, silent) {\n            const result = this.insert(index, records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async loadDataAsync(data) {\n            this.data = data;\n            await this.project.commitAsync();\n        }\n        performFilter() {\n            if (this.project && (this.isLoadingData || this.rootNode?.isLoading)) {\n                // Reapply filters after calculations, in case filtering on some calculated field\n                this.project.commitAsync().then(() => this.filter());\n            }\n            return super.performFilter(...arguments);\n        }\n    }\n    return AbstractPartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../../store/mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/BetterMixin.js';\n/**\n * This an abstract mixin for every Model that belongs to a project.\n *\n * The model with this mixin, supposes that it will be \"joining\" a store that is already part of a project,\n * so that such model can take a reference to the project from it.\n *\n * It provides 2 template methods [[joinProject]] and [[leaveProject]], which can be overridden in other mixins.\n */\nexport class AbstractPartOfProjectModelMixin extends Mixin([AbstractPartOfProjectGenericMixin, Model], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectModelMixin extends base {\n        joinStore(store) {\n            let joinedProject = null;\n            // Joining a store that is not part of project (for example a chained store) should not affect engine\n            if (isInstanceOf(store, AbstractPartOfProjectStoreMixin)) {\n                const project = store.getProject();\n                if (project && !this.getProject()) {\n                    this.setProject(project);\n                    joinedProject = project;\n                }\n            }\n            superProto.joinStore.call(this, store);\n            // Join directly only if not repopulating the store, in which case we will be joined later after\n            // graph has been recreated\n            if (joinedProject && !joinedProject.isRepopulatingStores)\n                this.joinProject();\n        }\n        unjoinStore(store, isReplacing = false) {\n            superProto.unjoinStore.call(this, store, isReplacing);\n            const { project } = this;\n            const isLeavingProjectStore = (isInstanceOf(store, AbstractPartOfProjectStoreMixin))\n                && !store.isFillingFromMaster && project === (store.isChained && store.project ?\n                store.masterStore.project\n                : store.project);\n            // Leave project when unjoining from store, but do not bother if the project is being destroyed or if\n            // the dataset is being replaced, or if store is chained into other project\n            if (project && !project.isDestroying && !project.isRepopulatingStores && isLeavingProjectStore) {\n                this.leaveProject(isReplacing);\n                this.setProject(null);\n            }\n            // @ts-ignore\n            if (isLeavingProjectStore)\n                this.graph = null;\n        }\n        /**\n         * Template method, which is called when model is joining the project (through joining some store that\n         * has already joined the project)\n         */\n        joinProject() { }\n        /**\n         * Template method, which is called when model is leaving the project (through leaving some store usually)\n         */\n        leaveProject(isReplacing = false) { }\n        calculateProject() {\n            const store = this.stores.find(s => (isInstanceOf(s, AbstractPartOfProjectStoreMixin)) && !!s.getProject());\n            return store?.getProject();\n        }\n        async setAsync(fieldName, value, silent) {\n            const result = this.set(fieldName, value, silent);\n            await this.project?.commitAsync();\n            return result;\n        }\n        async getAsync(fieldName) {\n            await this.project?.commitAsync();\n            return this.get(fieldName);\n        }\n        get isStmRestoring() {\n            const project = this.getProject();\n            return project?.isRestoringData || project?.stm.isRestoring || false;\n        }\n    }\n    return AbstractPartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport later from \"../vendor/later/later.js\";\nimport { AbstractPartOfProjectModelMixin } from \"../quark/model/mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * This is a calendar interval mixin.\n *\n * Can be either a static time interval (if [[startDate]]/[[endDate]] are specified) or recurrent time interval\n * ([[recurrentStartDate]]/[[recurrentEndDate]]).\n *\n * By default it defines a non-working period ([[isWorking]] field has default value `false`),\n * but can also define an explicit working time, for example to override some previous period.\n *\n * You probably don't need to create instances of this mixin directly, instead you pass its configuration object to the [[AbstractCalendarMixin.addInterval]]\n */\nexport class CalendarIntervalMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalMixin extends base {\n        static get fields() {\n            return [\n                'name',\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                'recurrentStartDate',\n                'recurrentEndDate',\n                'cls',\n                'iconCls',\n                { name: 'isWorking', type: 'boolean', defaultValue: false },\n                { name: 'priority', type: 'number' }\n            ];\n        }\n        getCalendar() {\n            return this.stores[0].calendar;\n        }\n        resetPriority() {\n            this.priorityField = null;\n            this.getCalendar().getDepth();\n        }\n        // not just `getPriority` to avoid clash with auto-generated getter in the subclasses\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            // 0 - 10000 interval is reserved for \"unspecified time\" intervals\n            // then 10000 - 10100, 10100-10200, ... etc intervals are for the calendars at depth 0, 1, ... etc\n            let base = 10000 + this.getCalendar().getDepth() * 100;\n            let priority = this.priority;\n            if (priority == null) {\n                // recurrent intervals are considered \"base\" and have lower priority\n                // static intervals are considered special case overrides and have higher priority\n                priority = this.isRecurrent() ? 20 : 30;\n            }\n            // intervals from parent calendars will have lower priority\n            return this.priorityField = base + priority;\n        }\n        /**\n         * Whether this interval is recurrent (both [[recurrentStartDate]] and [[recurrentEndDate]] are present and parsed correctly\n         * by the `later` library)\n         */\n        isRecurrent() {\n            return Boolean(this.recurrentStartDate && this.recurrentEndDate && this.getStartDateSchedule() && this.getEndDateSchedule());\n        }\n        /**\n         * Whether this interval is static - both [[startDate]] and [[endDate]] are present.\n         */\n        isStatic() {\n            return Boolean(this.startDate && this.endDate);\n        }\n        /**\n         * Helper method to parse [[recurrentStartDate]] and [[recurrentEndDate]] field values.\n         * @param {Object|String} schedule Recurrence schedule\n         * @returns {Object} Processed schedule ready to be used by later.schedule() method.\n         * @private\n         */\n        parseDateSchedule(value) {\n            let schedule = value;\n            if (value && value !== Object(value)) {\n                schedule = later.parse.text(value);\n                if (schedule !== Object(schedule) || schedule.error >= 0) {\n                    // can be provided as JSON text\n                    try {\n                        schedule = JSON.parse(value);\n                    }\n                    catch (e) {\n                        return null;\n                    }\n                }\n            }\n            return schedule;\n        }\n        getStartDateSchedule() {\n            if (this.startDateSchedule)\n                return this.startDateSchedule;\n            const schedule = this.parseDateSchedule(this.recurrentStartDate);\n            return this.startDateSchedule = later.schedule(schedule);\n        }\n        getEndDateSchedule() {\n            if (this.endDateSchedule)\n                return this.endDateSchedule;\n            if (this.recurrentEndDate === 'EOD')\n                return 'EOD';\n            const schedule = this.parseDateSchedule(this.recurrentEndDate);\n            return this.endDateSchedule = later.schedule(schedule);\n        }\n    }\n    return CalendarIntervalMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../quark/store/mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a collection of [[CalendarIntervalMixin]] items. Its a dumb collection though, the \"real\" calendar\n * is a [[AbstractCalendarMixin]] model, which is part of the [[AbstractCalendarManagerStoreMixin]].\n */\nexport class CalendarIntervalStore extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalStore extends base {\n        constructor() {\n            super(...arguments);\n            this.disableHasLoadedDataToCommitFlag = true;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CalendarIntervalMixin\n            };\n        }\n    }\n    return CalendarIntervalStore;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\n// <remove-on-release>\n// TODO: if we would be doing just:\n//  export class UnspecifiedTimeIntervalModel extends CalendarIntervalMixin ...\n//  then an instance of the `CalendarIntervalMixin` `c` would : `c instanceof UnspecifiedTimeIntervalModel`,\n//  because it inherit the `hasInstance` symbol\n//  need to figure out how it can be handled\n// </remove-on-release>\n// Calendar interval model denoting unspecified interval\nexport class UnspecifiedTimeIntervalModel extends Mixin([CalendarIntervalMixin], (base) => {\n    const superProto = base.prototype;\n    class UnspecifiedTimeIntervalModel extends base {\n        // <remove-on-release>\n        // TODO: why it overrides the method, is it configured with calendar instance directly?\n        // </remove-on-release>\n        getCalendar() {\n            return this.calendar;\n        }\n        // NOTE: See parent class implementation for further comments\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            return this.priorityField = this.getCalendar().getDepth();\n        }\n    }\n    return UnspecifiedTimeIntervalModel;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"./AbstractPartOfProjectGenericMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a scheduler_core project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class CorePartOfProjectGenericMixin extends Mixin([AbstractPartOfProjectGenericMixin], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectGenericMixin extends base {\n        //region Store getters\n        get eventStore() {\n            return this.project?.eventStore;\n        }\n        get resourceStore() {\n            return this.project?.resourceStore;\n        }\n        get assignmentStore() {\n            return this.project?.assignmentStore;\n        }\n        get dependencyStore() {\n            return this.project?.dependencyStore;\n        }\n        get calendarManagerStore() {\n            return this.project?.calendarManagerStore;\n        }\n        //endregion\n        //region Entity getters\n        /**\n         * Convenience method to get the instance of event by its id.\n         */\n        getEventById(id) {\n            return this.eventStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of dependency by its id.\n         */\n        getDependencyById(id) {\n            return this.dependencyStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of resource by its id.\n         */\n        getResourceById(id) {\n            return this.resourceStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of assignment by its id.\n         */\n        getAssignmentById(id) {\n            return this.assignmentStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of calendar by its id.\n         */\n        getCalendarById(id) {\n            return this.calendarManagerStore?.getById(id);\n        }\n    }\n    return CorePartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalStore } from \"../../calendar/CalendarIntervalStore.js\";\nimport { CalendarIteratorResult } from \"../../calendar/CalendarCache.js\";\nimport { TimeUnit } from \"../../scheduling/Types.js\";\nimport { CalendarCacheSingle } from \"../../calendar/CalendarCacheSingle.js\";\nimport { UnspecifiedTimeIntervalModel } from \"../../calendar/UnspecifiedTimeIntervalModel.js\";\nimport DateHelper from \"../../../Core/helper/DateHelper.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * Calendar for project scheduling, mixed by CoreCalendarMixin and BaseCalendarMixin. It is used to mark certain time\n * intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class AbstractCalendarMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.version = 1;\n        }\n        // intervalStore            : CalendarIntervalStore\n        static get fields() {\n            return [\n                { name: 'version', type: 'number' },\n                'name',\n                { name: 'unspecifiedTimeIsWorking', type: 'boolean', defaultValue: true },\n                { name: 'intervals', type: 'store', subStore: true },\n                'cls',\n                'iconCls'\n            ];\n        }\n        get intervalStoreClass() {\n            return CalendarIntervalStore;\n        }\n        get intervalStore() {\n            // @ts-ignore\n            return this.meta.intervalsStore;\n        }\n        // Not a typo, name is generated from the fields name = intervals\n        initIntervalsStore(config) {\n            config.storeClass = this.intervalStoreClass;\n            // @ts-ignore\n            config.modelClass = this.getDefaultConfiguration().calendarIntervalModelClass || this.intervalStoreClass.defaultConfig.modelClass;\n            config.calendar = this;\n        }\n        // this method is called when the new value for the `intervals` field of this model is assigned\n        // the type of the `intervals` field is \"store\" that's why this magic\n        processIntervalsStoreData(intervals) {\n            this.bumpVersion();\n        }\n        isDefault() {\n            const project = this.getProject();\n            if (project) {\n                return this === project.defaultCalendar;\n            }\n            return false;\n        }\n        // <remove-on-release>\n        // TODO: move to Model?\n        // </remove-on-release>\n        getDepth() {\n            return this.childLevel + 1;\n        }\n        /**\n         * The core iterator method of the calendar.\n         *\n         * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n         * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n         * iterator function should return `false` at some point, to avoid infinite loops.\n         *\n         * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n         *\n         * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n         * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n         * for this function - [[CalendarCacheInterval|calendarCacheInterval]]. If iterator returns `false` (checked with `===`)\n         * the iteration stops.\n         *\n         * @param scope The scope (`this` value) to execute the iterator in.\n         */\n        forEachAvailabilityInterval(options, func, scope) {\n            const maxRange = this.getProject()?.maxCalendarRange;\n            if (maxRange) {\n                options = Object.assign({ maxRange }, options);\n            }\n            return this.calendarCache.forEachAvailabilityInterval(options, func, scope);\n        }\n        /**\n         * This method starts at the given `date` and moves forward or backward in time, depending on `isForward`.\n         * It stops moving as soon as it accumulates the `durationMs` milliseconds of working time and returns the date\n         * at which it has stopped and remaining duration - the [[AccumulateWorkingTimeResult]] object.\n         *\n         * Normally, the remaining duration will be 0, indicating the full `durationMs` has been accumulated.\n         * However, sometimes, calendar might not be able to accumulate enough working time due to various reasons,\n         * like if it does not contain enough working time - this case will be indicated with remaining duration bigger than 0.\n         *\n         * @param date\n         * @param durationMs\n         * @param isForward\n         */\n        accumulateWorkingTime(date, durationMs, isForward) {\n            // if duration is 0 - return the same date\n            if (durationMs === 0)\n                return { finalDate: new Date(date), remainingDurationInMs: 0 };\n            if (isNaN(durationMs))\n                throw new Error(\"Invalid duration\");\n            let finalDate = date;\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                let result = true;\n                if (calendarCacheInterval.getIsWorking()) {\n                    let diff = intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (durationMs <= diff) {\n                        if (adjustDurationToDST) {\n                            const dstDiff = isForward\n                                ? intervalStartDate.getTimezoneOffset() - (new Date(intervalStartDate.getTime() + durationMs)).getTimezoneOffset()\n                                : (new Date(intervalEndDate.getTime() - durationMs)).getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            durationMs -= dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward\n                            ? new Date(intervalStartDate.getTime() + durationMs)\n                            : new Date(intervalEndDate.getTime() - durationMs);\n                        durationMs = 0;\n                        result = false;\n                    }\n                    else {\n                        if (adjustDurationToDST) {\n                            const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            diff += dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward ? intervalEndDate : intervalStartDate;\n                        durationMs -= diff;\n                    }\n                }\n                return result;\n            });\n            return { finalDate: new Date(finalDate), remainingDurationInMs: durationMs };\n        }\n        /**\n         * Calculate the working time duration between the 2 dates, in milliseconds.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         * @param {Boolean} [allowNegative] Method ignores negative values by default, returning 0. Set to true to get\n         * negative duration.\n         */\n        calculateDurationMs(startDate, endDate, allowNegative = false) {\n            let duration = 0;\n            const multiplier = startDate.getTime() <= endDate.getTime() || !allowNegative ? 1 : -1;\n            if (multiplier < 0) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            const adjustDurationToDST = this.getProject().adjustDurationToDST;\n            this.forEachAvailabilityInterval({ startDate: startDate, endDate: endDate }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    duration += intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (adjustDurationToDST) {\n                        const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                        duration += dstDiff * 60 * 1000;\n                    }\n                }\n            });\n            return duration * multiplier;\n        }\n        /**\n         * Calculate the end date of the time interval which starts at `startDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param startDate\n         * @param durationMs\n         */\n        calculateEndDate(startDate, durationMs) {\n            // the method goes forward by default ..unless a negative duration provided\n            const isForward = durationMs >= 0;\n            const res = this.accumulateWorkingTime(startDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Calculate the start date of the time interval which ends at `endDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param endDate\n         * @param durationMs\n         */\n        calculateStartDate(endDate, durationMs) {\n            // the method goes backwards by default ..unless a negative duration provided\n            const isForward = durationMs <= 0;\n            const res = this.accumulateWorkingTime(endDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Returns the earliest point at which a working period of time starts, following the given date.\n         * Can be the date itself, if it comes on the working time.\n         *\n         * @param date The date after which to skip the non-working time.\n         * @param isForward Whether the \"following\" means forward in time or backward.\n         */\n        skipNonWorkingTime(date, isForward = true) {\n            let workingDate;\n            const res = this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    workingDate = isForward ? intervalStartDate : intervalEndDate;\n                    return false;\n                }\n            });\n            if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                return 'empty_calendar';\n            return workingDate ? new Date(workingDate) : new Date(date);\n        }\n        /**\n         * This method adds a single [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addInterval(interval) {\n            return this.addIntervals([interval]);\n        }\n        /**\n         * This method adds an array of [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.add(intervals);\n        }\n        /**\n         * This method removes a single [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeInterval(interval) {\n            return this.removeIntervals([interval]);\n        }\n        /**\n         * This method removes an array of [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.remove(intervals);\n        }\n        /**\n         * This method removes all intervals from the internal collection of the calendar\n         */\n        clearIntervals(silent) {\n            if (!silent) {\n                this.bumpVersion();\n            }\n            return this.intervalStore.removeAll(silent);\n        }\n        bumpVersion() {\n            this.clearCache();\n            this.version++;\n        }\n        get calendarCache() {\n            if (this.$calendarCache !== undefined)\n                return this.$calendarCache;\n            const unspecifiedTimeInterval = new UnspecifiedTimeIntervalModel({\n                isWorking: this.unspecifiedTimeIsWorking\n            });\n            unspecifiedTimeInterval.calendar = this;\n            return this.$calendarCache = new CalendarCacheSingle({\n                calendar: this,\n                unspecifiedTimeInterval: unspecifiedTimeInterval,\n                intervalStore: this.intervalStore,\n                parentCache: this.parent && !this.parent.isRoot ? this.parent.calendarCache : null\n            });\n        }\n        clearCache() {\n            // not strictly needed, we just help garbage collector\n            this.$calendarCache && this.$calendarCache.clear();\n            this.$calendarCache = undefined;\n        }\n        resetPriorityOfAllIntervals() {\n            this.traverse((calendar) => {\n                calendar.intervalStore.forEach((interval) => interval.resetPriority());\n            });\n        }\n        insertChild(child, before, silent) {\n            let res = superProto.insertChild.call(this, ...arguments);\n            if (!Array.isArray(res)) {\n                res = [res];\n            }\n            // invalidate cache of the child record, since now it should take parent into account\n            res.forEach((r) => {\n                r.bumpVersion();\n                r.resetPriorityOfAllIntervals();\n            });\n            return res;\n        }\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.intervalStore.setProject(this.getProject());\n        }\n        leaveProject() {\n            superProto.leaveProject.call(this);\n            this.intervalStore.setProject(null);\n            this.clearCache();\n        }\n        doDestroy() {\n            this.leaveProject();\n            this.intervalStore.destroy();\n            super.doDestroy();\n        }\n        isDayHoliday(day) {\n            const startDate = DateHelper.clearTime(day), endDate = DateHelper.getNext(day, TimeUnit.Day);\n            let hasWorkingTime = false;\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (_intervalStartDate, _intervalEndDate, calendarCacheInterval) => {\n                hasWorkingTime = calendarCacheInterval.getIsWorking();\n                return !hasWorkingTime;\n            });\n            return !hasWorkingTime;\n        }\n        // <remove-on-release>\n        // TODO: tests\n        // </remove-on-release>\n        getDailyHolidaysRanges(startDate, endDate) {\n            const result = [];\n            startDate = DateHelper.clearTime(startDate);\n            while (startDate < endDate) {\n                if (this.isDayHoliday(startDate)) {\n                    result.push({\n                        startDate,\n                        endDate: DateHelper.getStartOfNextDay(startDate, true, true)\n                    });\n                }\n                startDate = DateHelper.getNext(startDate, TimeUnit.Day);\n            }\n            return result;\n        }\n        /**\n         * Returns working time ranges between the provided dates.\n         * @param startDate Start of the period to get ranges from.\n         * @param endDate End of the period to get ranges from.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         */\n        getWorkingTimeRanges(startDate, endDate) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Returns non-working time ranges between the provided dates.\n         * @param startDate Start of the period to get ranges from.\n         * @param endDate End of the period to get ranges from.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         */\n        getNonWorkingTimeRanges(startDate, endDate) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (!calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        iconCls: entry.iconCls,\n                        cls: entry.cls,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Checks if there is a working time interval in the provided time range (or when just startDate is provided,\n         * checks if the date is contained inside a working time interval in this calendar)\n         * @param startDate\n         * @param [endDate]\n         * @param [fullyContained] Pass true to check if the range is fully covered by a single continuous working time block\n         */\n        isWorkingTime(startDate, endDate, fullyContained) {\n            if (fullyContained) {\n                let found;\n                const res = this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                    if (calendarCacheInterval.getIsWorking() && intervalStartDate <= startDate && intervalEndDate >= endDate) {\n                        found = true;\n                        return false;\n                    }\n                });\n                if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                    return false;\n                return found;\n            }\n            else {\n                // Can be Date | null | 'empty_calendar'\n                const workingTimeStart = this.skipNonWorkingTime(startDate);\n                return workingTimeStart && workingTimeStart !== 'empty_calendar' ? (endDate ? workingTimeStart < endDate : workingTimeStart.getTime() === startDate.getTime()) : false;\n            }\n        }\n    }\n    return CalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectModelMixin } from './mixin/AbstractPartOfProjectModelMixin.js';\n/**\n * This is a mixin enabling events to handle assignments. It is mixed by CoreHasAssignmentsMixin and\n * BaseHasAssignmentsMixin. It provides a collection of all assignments, which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class AbstractHasAssignmentsMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class HasAssignmentsMixin extends base {\n        /**\n         * If a given resource is assigned to this task, returns a [[BaseAssignmentMixin]] instance for it.\n         * Otherwise returns `null`\n         */\n        getAssignmentFor(resource) {\n            // Bucket `assigned` might not be set up yet when using delayed calculations\n            for (const assignment of this.assigned ?? []) {\n                if (assignment.resource === resource)\n                    return assignment;\n            }\n            return null;\n        }\n        isAssignedTo(resource) {\n            return Boolean(this.getAssignmentFor(resource));\n        }\n        /**\n         * A method which assigns a resource to the current event\n         */\n        async assign(resource) {\n            //<debug>\n            // Preconditions:\n            if (this.getAssignmentFor(resource))\n                throw new Error('Resource can\\'t be assigned twice to the same task');\n            //</debug>\n            const assignmentCls = this.project.assignmentStore.modelClass;\n            this.addAssignment(new assignmentCls({\n                event: this,\n                resource: resource\n            }));\n            return this.commitAsync();\n        }\n        /**\n         * A method which unassigns a resource from the current event\n         */\n        async unassign(resource) {\n            const assignment = this.getAssignmentFor(resource);\n            //<debug>\n            if (!assignment)\n                throw new Error(`Can't unassign resource \\`${resource}\\` from task \\`${this}\\` - resource is not assigned to the task!`);\n            //</debug>\n            this.removeAssignment(assignment);\n            return this.commitAsync();\n        }\n        leaveProject() {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // @ts-ignore\n            if (this.isInActiveTransaction && this.assigned) {\n                const eventStore = this.getEventStore();\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => eventStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this, ...arguments);\n        }\n        remove() {\n            if (this.parent) {\n                // need to get the event store in advance, because after removal the project reference will be cleared (all that is what provide\n                // references to all stores\n                const eventStore = this.getEventStore();\n                superProto.remove.call(this);\n                eventStore && eventStore.afterEventRemoval();\n            }\n            else {\n                return superProto.remove.call(this);\n            }\n        }\n        // template methods, overridden in scheduling modes mixins\n        // should probably be named something like \"onEventAssignmentAdded\"\n        // should be a listener for the `add` event of the assignment store instead\n        addAssignment(assignment) {\n            this.getProject().assignmentStore.add(assignment);\n            return assignment;\n        }\n        // should be a listener for the `remove` event of the assignment store instead\n        removeAssignment(assignment) {\n            this.getProject().assignmentStore.remove(assignment);\n            return assignment;\n        }\n    }\n    return HasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./AbstractPartOfProjectModelMixin.js\";\n/**\n * This a mixin for every Model that belongs to a scheduler_core project.\n *\n * It adds functions needed to calculate invalidated fields on project commit.\n */\nexport class CorePartOfProjectModelMixin extends Mixin([\n    AbstractPartOfProjectModelMixin,\n    CorePartOfProjectGenericMixin,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectModelMixin extends base {\n        constructor() {\n            super(...arguments);\n            // Flag set during calculation\n            this.$isCalculating = false;\n            // Proposed changes\n            this.$changed = {};\n            // Value before proposed change, for buckets that need to update data early\n            this.$beforeChange = {};\n        }\n        get isInActiveTransaction() {\n            return true;\n        }\n        // Invalidate record upon joining project, leads to a buffered commit\n        joinProject() {\n            this.invalidate();\n        }\n        // Trigger a buffered commit when leaving the project\n        leaveProject(isReplacing = false) {\n            superProto.leaveProject.call(this, isReplacing);\n            this.project?.bufferedCommitAsync();\n        }\n        /**\n         * Invalidates this record, queueing it for calculation on project commit.\n         */\n        invalidate() {\n            this.project?.invalidate(this);\n        }\n        /**\n         * Used to retrieve the proposed (before 'dataReady') or current (after 'dataReady') value for a field.\n         * If there is no proposed change, it is functionally equal to a normal `record.get()` call.\n         */\n        getCurrentOrProposed(fieldName) {\n            if (fieldName in this.$changed && this.$changed[fieldName] !== true) {\n                return this.$changed[fieldName];\n            }\n            return this.get(fieldName) ?? null;\n        }\n        /**\n         * Determines if the specified field has a value or not, value can be either current or proposed.\n         */\n        hasCurrentOrProposed(fieldName) {\n            return ((fieldName in this.$changed) && this.$changed[fieldName] != true) || this.get(fieldName) != null;\n        }\n        /**\n         * Propose changes, to be considered during calculation. Also invalidates the record.\n         */\n        propose(changes) {\n            // @ts-ignore\n            if (this.project || this.recurringTimeSpan?.project) {\n                const keys = Object.keys(changes);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this.$changed[key] = changes[key];\n                }\n                this.invalidate();\n            }\n            else {\n                // If no project, behave as a normal model would\n                this.set(changes);\n            }\n        }\n        /**\n         * Similar to propose, but with more options. Mostly used by buckets, since they need data to update early.\n         */\n        setChanged(field, value, invalidate = true, setData = false) {\n            const me = this;\n            me.$changed[field] = value;\n            // Buckets need to keep data up to date immediately\n            if (setData) {\n                if (!(field in me.$beforeChange)) {\n                    me.$beforeChange[field] = me.get(field);\n                }\n                me.setData(field, value);\n            }\n            invalidate && me.invalidate();\n        }\n        /**\n         * Hook called before project refresh, override and calculate required changes in subclasses\n         */\n        calculateInvalidated() { }\n        /**\n         * Called after project refresh, before dataReady. Announce updated data\n         */\n        finalizeInvalidated(silent = false) {\n            const me = this;\n            me.$isCalculating = true;\n            if (!silent) {\n                // First silently revert any data change (used by buckets), otherwise it won't be detected by `set()`\n                me.setData(me.$beforeChange);\n                // Then do a proper set\n                me.set(me.$changed);\n            }\n            else {\n                me.setData(me.$changed);\n            }\n            me.$changed = {};\n            me.$beforeChange = {};\n            me.$isCalculating = false;\n        }\n    }\n    return CorePartOfProjectModelMixin;\n}) {\n}\n", "import { CI } from \"../../ChronoGraph/collection/Iterator.js\";\nexport const isNotNumber = (value) => Number(value) !== value;\nexport const CIFromSetOrArrayOrValue = (value) => {\n    if (value instanceof Set || value instanceof Array)\n        return CI(value);\n    return CI([value]);\n};\nexport const delay = (value) => new Promise(resolve => setTimeout(resolve, value));\nexport const format = (format, ...values) => {\n    return format.replace(/{(\\d+)}/g, (match, number) => typeof values[number] !== 'undefined' ? values[number] : match);\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from \"../../util/Functions.js\";\n// Shared functionality for CoreAssignmentStore & ChronoAssignmentStore\nexport class AbstractAssignmentStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.allAssignmentsForRemoval = false;\n        }\n        remove(records, silent) {\n            this.assignmentsForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.assignmentsForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allAssignmentsForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allAssignmentsForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractAssignmentStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * Shared functionality for [[CoreCalendarManagerStoreMixin]] and [[ChronoCalendarManagerStoreMixin]]\n */\nexport class AbstractCalendarManagerStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractCalendarManagerStoreMixin extends base {\n        // special handling to destroy calendar models as part of destroying this store\n        doDestroy() {\n            const records = [];\n            // When chained, traverse can be called on destroyed nodes.\n            if (!this.rootNode?.isDestroyed) {\n                this.traverse(record => records.push(record));\n            }\n            super.doDestroy();\n            records.forEach(record => record.destroy());\n        }\n    }\n    return AbstractCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from '../../util/Functions.js';\n// Shared functionality for CoreDependencyStore & ChronoDependencyStore\nexport class AbstractDependencyStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        remove(records, silent) {\n            this.dependenciesForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.dependenciesForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allDependenciesForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allDependenciesForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreEventStore & ChronoEventStore\nexport class AbstractEventStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractEventStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            // <remove-on-release>\n            // TODO: It seems this property is no longer used\n            //  need to remove and probably do the same for `assignmentsForRemoval`\n            // </remove-on-release>\n            this.dependenciesForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterEventRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        onNodeRemoveChild(parent, children, index, flags) {\n            // @ts-ignore\n            const removed = superProto.onNodeRemoveChild.call(this, ...arguments);\n            this.afterEventRemoval();\n            return removed;\n        }\n        afterEventRemoval() {\n            const { assignmentsForRemoval, dependenciesForRemoval } = this;\n            // Can be called from `set data` during construction\n            if (!assignmentsForRemoval)\n                return;\n            // ORDER IS IMPORTANT!\n            // First remove assignments\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval && assignmentsForRemoval.size) {\n                const toRemove = [...assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                toRemove.length > 0 && assignmentStore.remove(toRemove);\n            }\n            assignmentsForRemoval.clear();\n            // Then remove dependencies\n            const dependencyStore = this.getDependencyStore();\n            if (dependencyStore && !dependencyStore.allDependenciesForRemoval && dependenciesForRemoval.size) {\n                const toRemove = [...dependenciesForRemoval].filter(dependency => !dependencyStore.dependenciesForRemoval.has(dependency));\n                toRemove.length > 0 && dependencyStore.remove(toRemove);\n            }\n            dependenciesForRemoval.clear();\n        }\n        processRecord(eventRecord, isDataset = false) {\n            if (!this.project?.isRepopulatingStores) {\n                const existingRecord = this.getById(eventRecord.id);\n                const isReplacing = existingRecord && existingRecord !== eventRecord;\n                //@ts-ignore\n                if (isReplacing && existingRecord.assigned) {\n                    // <remove-on-release>\n                    // TODO: Type\n                    // </remove-on-release>\n                    //@ts-ignore\n                    for (const assignment of existingRecord.assigned) {\n                        assignment.event = eventRecord;\n                    }\n                }\n            }\n            return eventRecord;\n        }\n    }\n    return AbstractEventStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreResourceStore & ChronoResourceStore\nexport class AbstractResourceStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractResourceStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterResourceRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        afterResourceRemoval() {\n            // <remove-on-release>\n            // TODO: Ask nick, have tried making it get correct type by changing AbstractProjectMixin. But no luck\n            // </remove-on-release>\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval) {\n                const assignmentsForRemoval = [...this.assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                assignmentsForRemoval.length > 0 && assignmentStore.remove(assignmentsForRemoval);\n            }\n            this.assignmentsForRemoval.clear();\n        }\n        processRecord(resourceRecord, isDataset = false) {\n            const existingRecord = this.getById(resourceRecord.id);\n            const isReplacing = existingRecord && existingRecord !== resourceRecord;\n            if (isReplacing) {\n                // <remove-on-release>\n                // TODO: There is no ResourceMixin at the lowest level, cannot type correctly without it\n                // </remove-on-release>\n                //@ts-ignore\n                for (const assignment of existingRecord.assigned || []) {\n                    assignment.resource = resourceRecord;\n                }\n            }\n            return resourceRecord;\n        }\n    }\n    return AbstractResourceStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\n/**\n * Core event entity mixin type.\n *\n * At this level event is only aware about its dates\n * The functionality, related to the assignments etc is provided in other mixins.\n */\nexport class CoreEventMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventMixin extends base {\n        constructor() {\n            super(...arguments);\n            this._startDate = null;\n            this._endDate = null;\n            this._duration = null;\n        }\n        // Proper engine defines these fields since they enter graph, thus we need them\n        static get fields() {\n            return [\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                { name: 'duration', type: 'number' },\n                { name: 'durationUnit', type: 'durationunit', defaultValue: 'day' }\n            ];\n        }\n        // Getters return current or proposed value\n        get startDate() { return this._startDate ?? this.get('startDate') ?? null; }\n        get endDate() { return this._endDate ?? this.get('endDate') ?? null; }\n        get duration() { return this._duration ?? this.get('duration') ?? null; }\n        // Route all setting through applyXX (setStartDate, startDate = , set('startDate'), batching)\n        set startDate(value) { this.proposeStartDate(value); }\n        set endDate(value) { this.proposeEndDate(value); }\n        set duration(value) { this.proposeDuration(value); }\n        //region Edge case normalization\n        inSet(field, value, silent, fromRelationUpdate, skipAccessors) {\n            const me = this;\n            // Catch \"normal\" set calls\n            if (me.project && !me.project.isWritingData && typeof field !== 'string' && !skipAccessors) {\n                // Flag fields as changed even if we are given a no-change value, to let calculations take decision on\n                // whether to keep duration or not\n                if ('startDate' in field && !('startDate' in me.$changed)) {\n                    me.$changed.startDate = true;\n                    me.invalidate();\n                }\n                if ('endDate' in field && !('endDate' in me.$changed)) {\n                    me.$changed.endDate = true;\n                    me.invalidate();\n                }\n            }\n            // @ts-ignore\n            return superProto.inSet.call(me, field, value, silent, fromRelationUpdate, skipAccessors);\n        }\n        //endregion\n        //region StartDate\n        getStartDate() {\n            return this.startDate;\n        }\n        proposeStartDate(startDate, keepDuration = !('endDate' in this.$changed)) {\n            if (this.inSetting || startDate?.getTime() !== this.startDate?.getTime()) {\n                this._startDate = startDate;\n                this.propose({ startDate, keepDuration });\n            }\n        }\n        async setStartDate(startDate, keepDuration = true) {\n            this.proposeStartDate(startDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region EndDate\n        getEndDate() {\n            return this.endDate;\n        }\n        proposeEndDate(endDate, keepDuration = false) {\n            if (this.inSetting || endDate?.getTime() !== this.endDate?.getTime()) {\n                this._endDate = endDate;\n                this.propose({ endDate, keepDuration });\n            }\n        }\n        async setEndDate(endDate, keepDuration = false) {\n            this.proposeEndDate(endDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region Duration\n        getDuration() {\n            return this.duration;\n        }\n        proposeDuration(duration, unit, keepStart = true) {\n            this._duration = duration;\n            this.propose({ duration, keepStart });\n            if (unit)\n                this.propose({ durationUnit: unit });\n        }\n        async setDuration(duration, unit, keepStart = true) {\n            this.proposeDuration(duration, unit, keepStart);\n            return this.project?.commitAsync();\n        }\n        getDurationUnit() {\n            return this.durationUnit;\n        }\n        //endregion\n        // When joining as part of inline data, store is available. If joining through load, it is passed\n        joinProject() {\n            const me = this;\n            const changed = me.$changed;\n            const startDate = me.getCurrentOrProposed('startDate');\n            const endDate = me.getCurrentOrProposed('endDate');\n            const duration = me.getCurrentOrProposed('duration');\n            // Initial values should be considered changed, to be normalized\n            if (startDate != null)\n                changed.startDate = me._startDate = startDate;\n            if (endDate != null)\n                changed.endDate = me._endDate = endDate;\n            if (duration != null)\n                changed.duration = me._duration = duration;\n            // Resolve assignments when event joins project after load\n            if (me.eventStore && !me.eventStore.isLoadingData) {\n                const unresolved = me.assignmentStore?.storage.findItem('event', null);\n                if (unresolved) {\n                    // To avoid n² iterations over raw assignments we cache them by raw eventId, which saves us\n                    // some iterations over the storage\n                    // https://github.com/bryntum/support/issues/3141\n                    const cachedAssignments = me.assignmentStore?.storage.findItem('eventId', me.id);\n                    if (cachedAssignments) {\n                        for (const assignment of cachedAssignments) {\n                            assignment.setChanged('event', me);\n                        }\n                    }\n                    else {\n                        for (const assignment of unresolved) {\n                            if (assignment.getCurrentOrProposed('event') === me.id) {\n                                assignment.setChanged('event', me);\n                            }\n                        }\n                    }\n                }\n            }\n            superProto.joinProject.call(me);\n        }\n        // Mimic how proper engine applies values\n        applyValue(useProp, key, value, skipAccessors, field) {\n            // @ts-ignore\n            if ((this.project || this.recurringTimeSpan?.project) && field) {\n                const { name } = field;\n                if (name === 'startDate' || name == 'duration' || name === 'endDate') {\n                    useProp = true;\n                    // Update cached value\n                    this['_' + name] = value;\n                }\n                if (skipAccessors) {\n                    useProp = false;\n                }\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessors, field);\n        }\n        // Catch changes from batches etc. In which case it is sometimes expected for data to be available directly\n        afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n            if (!this.$isCalculating && !skipAccessors) {\n                // In certain scenarios data is expected to be available of the bat, messy!\n                this.setData({\n                    startDate: this.getCurrentOrProposed('startDate'),\n                    endDate: this.getCurrentOrProposed('endDate'),\n                    duration: this.getCurrentOrProposed('duration'),\n                    durationUnit: this.getCurrentOrProposed('durationUnit')\n                });\n            }\n            superProto.afterChange.call(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        // Normalizes dates & duration\n        calculateInvalidated() {\n            const me = this;\n            const changed = me.$changed;\n            const changedStart = 'startDate' in changed;\n            const changedEnd = 'endDate' in changed;\n            const changedDuration = 'duration' in changed;\n            const { startDate, endDate, duration, keepDuration, keepStart } = changed;\n            let calculate = null;\n            // Only start changed\n            if (changedStart && !changedEnd && !changedDuration) {\n                // Also null end when nulling start (keeping duration)\n                if (startDate === null) {\n                    changed.endDate = null;\n                }\n                // Start after end without keeping duration -> move end to start\n                else if (me.hasCurrentOrProposed('endDate') && startDate > me.getCurrentOrProposed('endDate') && !keepDuration) {\n                    changed.endDate = startDate;\n                    changed.duration = 0;\n                }\n                // Start changed and we either have a duration that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('endDate'))) {\n                    calculate = 'endDate';\n                }\n                // Start change and we have an end already -> calculate duration\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only end changed\n            else if (!changedStart && changedEnd && !changedDuration) {\n                // Also null start when nulling end (keeping duration)\n                if (endDate === null) {\n                    changed.startDate = null;\n                }\n                // End before start without keeping duration -> move start to end\n                else if (me.hasCurrentOrProposed('startDate') && !keepDuration && endDate !== true && endDate < me.getCurrentOrProposed('startDate')) {\n                    changed.startDate = endDate;\n                    changed.duration = 0;\n                }\n                // End changed and we either have a duration that we want to keep or no start -> calculate start\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('startDate'))) {\n                    calculate = 'startDate';\n                }\n                // End changed and we have a start already -> calculate duration\n                else if (me.hasCurrentOrProposed('startDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only duration changed\n            else if (!changedStart && !changedEnd && changedDuration) {\n                // Also null end when nulling duration (keeping start)\n                if (duration === null) {\n                    changed.endDate = null;\n                }\n                // Duration changed and we either have a start that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('startDate') && (keepStart || !me.hasCurrentOrProposed('endDate'))) {\n                    if (keepStart && changed.duration < 0) {\n                        changed.duration = 0;\n                    }\n                    calculate = 'endDate';\n                }\n                // Duration changed and we have an end already -> calculate start\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'startDate';\n                }\n            }\n            // Start and end change, affect duration\n            else if (changedStart && changedEnd && !changedDuration) {\n                // Both nulled, null duration\n                if (startDate === null && endDate === null) {\n                    changed.duration = null;\n                }\n                // Other cases -> calculate duration\n                else {\n                    calculate = 'duration';\n                }\n            }\n            // Start and duration change -> calculate end\n            else if (changedStart && !changedEnd && changedDuration) {\n                calculate = 'endDate';\n            }\n            // End and duration changed -> calculate start\n            else if (!changedStart && changedEnd && changedDuration) {\n                calculate = 'startDate';\n            }\n            // All changed -> calculate whichever is null or by default end to be sure things add up\n            else if (changedStart && changedEnd && changedDuration) {\n                if (duration == null) {\n                    calculate = 'duration';\n                }\n                else if (startDate == null) {\n                    calculate = 'startDate';\n                }\n                else {\n                    calculate = 'endDate';\n                }\n            }\n            // Normalize if needed\n            const currentOrProposedStartDate = me.getCurrentOrProposed('startDate');\n            const currentOrProposedEndDate = me.getCurrentOrProposed('endDate');\n            const currentOrProposedDuration = me.getCurrentOrProposed('duration');\n            const currentOrProposedDurationUnit = me.getCurrentOrProposed('durationUnit');\n            let hourDuration, targetDuration;\n            switch (calculate) {\n                case 'startDate':\n                    changed.startDate = DateHelper.add(currentOrProposedEndDate, -currentOrProposedDuration, currentOrProposedDurationUnit);\n                    break;\n                case 'endDate':\n                    // convert proposed duration to hours to safely add over DST\n                    hourDuration = DateHelper.as('hour', currentOrProposedDuration, currentOrProposedDurationUnit);\n                    // convert calculated duration to task duration in task duration unit\n                    targetDuration = DateHelper.as(currentOrProposedDurationUnit, hourDuration, 'h');\n                    changed.endDate = DateHelper.add(currentOrProposedStartDate, targetDuration, currentOrProposedDurationUnit);\n                    break;\n                case 'duration':\n                    // convert proposed duration to hours to safely add over DST\n                    hourDuration = DateHelper.diff(currentOrProposedStartDate, currentOrProposedEndDate, 'h');\n                    // convert calculated duration to task duration in task duration unit\n                    changed.duration = DateHelper.as(currentOrProposedDurationUnit, hourDuration, 'h');\n                    break;\n            }\n            if ('startDate' in changed && changed.startDate !== true)\n                this._startDate = changed.startDate;\n            if ('endDate' in changed && changed.endDate !== true)\n                this._endDate = changed.endDate;\n            if ('duration' in changed && changed.duration !== true)\n                this._duration = changed.duration;\n            // Clean up flags, not intended to be actually set\n            if (changed.startDate === true)\n                delete changed.startDate;\n            if (changed.endDate === true)\n                delete changed.endDate;\n            delete changed.keepDuration;\n            delete changed.keepStart;\n        }\n    }\n    return CoreEventMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\n/**\n * Core resource model class.\n */\nexport class CoreResourceMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getResourcesAssignments(this);\n        }\n        joinProject() {\n            // Set up assignment -> resource mapping when joining store after assignment (skip during load)\n            // (note that there is no resourceStore yet when loading inline data, thus the first part of the condition)\n            if (this.resourceStore && !this.resourceStore.isLoadingData) {\n                this.assignmentStore?.query(a => a.get('resource') === this.id).forEach(unresolved => unresolved.setChanged('resource', this));\n            }\n            superProto.joinProject.call(this);\n        }\n        leaveProject(isReplacing = false) {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // when replacing a resource or reloading the store, the assignments should be left intact\n            if (this.assigned && !isReplacing && !this.resourceStore?.isLoadingData) {\n                const resourceStore = this.resourceStore;\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => resourceStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on a resource should update resourceId on its assignments\n            // (note that field might not exist, if user supplies data for undefined fields)\n            if (field?.name === 'id') {\n                this.assigned.forEach(assignment => {\n                    assignment.set('resourceId', value);\n                });\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n    }\n    return CoreResourceMixin;\n}) {\n}\n", "import { Mixin, isInstanceOf } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nfunction asId(recordOrId) {\n    return recordOrId?.isModel ? recordOrId.id : recordOrId;\n}\n/**\n * Core assignment model class. It just contains references to the [[CoreEventMixin|event]] and [[CoreResourceMixin|resource]] being assigned.\n */\nexport class CoreAssignmentMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentMixin extends base {\n        // Fields declared in the Model way, existing decorators all assume ChronoGraph is used\n        static get fields() {\n            return [\n                // isEqual required to properly detect changed resource / event\n                { name: 'resource', isEqual: (a, b) => a === b, persist: false },\n                { name: 'event', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            const { assignmentStore, eventStore, resourceStore, project } = this;\n            let update = false;\n            if (field === 'event') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : eventStore?.$master.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            if (field === 'resource') {\n                const resource = isInstanceOf(value, CoreResourceMixin) ? value : resourceStore?.$master.getById(value);\n                if (resource)\n                    update = true;\n                value = resource || value;\n            }\n            // Passing true as last arg, bucket expected to work before commit\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            // Update on resolve, if this is a single operation and record is part of project (might be standalone record)\n            if (assignmentStore && update && !project.isPerformingCommit && !assignmentStore.isLoadingData && !resourceStore?.isLoadingData && !assignmentStore.skipInvalidateIndices) {\n                assignmentStore.invalidateIndices();\n            }\n        }\n        // Resolve event and resource when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.setChanged('event', this.get('event'));\n            this.setChanged('resource', this.get('resource'));\n        }\n        // Resolved resource & event as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { event = this.event, resource = this.resource } = this.$changed;\n            if (event !== null && !(isInstanceOf(event, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(event);\n                if (resolved)\n                    this.setChanged('event', resolved, false);\n            }\n            if (resource !== null && !(isInstanceOf(resource, CoreResourceMixin))) {\n                const resolved = this.resourceStore?.getById(resource);\n                if (resolved)\n                    this.setChanged('resource', resolved, false);\n            }\n        }\n        // resourceId and eventId required to be available for new datasets\n        finalizeInvalidated(silent) {\n            const changed = this.$changed;\n            if ('resource' in changed) {\n                changed.resourceId = asId(changed.resource);\n            }\n            if ('event' in changed) {\n                changed.eventId = asId(changed.event);\n            }\n            superProto.finalizeInvalidated.call(this, silent);\n        }\n        //region Event\n        set event(event) {\n            this.setChanged('event', event);\n            this.setChanged('eventId', asId(event));\n        }\n        get event() {\n            const event = this.get('event');\n            // Engine returns null instead of id when unresolved\n            return event?.id != null ? event : null;\n        }\n        //endregion\n        //region Resource\n        set resource(resource) {\n            this.setChanged('resource', resource);\n            this.setChanged('resourceId', asId(resource));\n        }\n        get resource() {\n            const resource = this.get('resource');\n            // Engine returns null instead of id when unresolved\n            return resource?.id != null ? resource : null;\n        }\n    }\n    return CoreAssignmentMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a mixin for every Store, that belongs to a scheduler_core project.\n */\nexport class CorePartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectStoreMixin,\n    CorePartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectStoreMixin extends base {\n        setProject(project) {\n            const result = superProto.setProject.call(this, project);\n            if (project)\n                this.joinProject(project);\n            return result;\n        }\n        joinProject(project) { }\n        onCommitAsync() { }\n    }\n    return CorePartOfProjectStoreMixin;\n}) {\n}\n", "import { CoreAssignmentMixin } from \"../model/scheduler_core/CoreAssignmentMixin.js\";\nimport { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractAssignmentStoreMixin } from \"./AbstractAssignmentStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all assignments in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreAssignmentStoreMixin extends Mixin([AbstractAssignmentStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.skipInvalidateIndices = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreAssignmentMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'event', unique: false },\n                        { property: 'resource', unique: false },\n                        { property: 'eventId', unique: false }\n                    ]\n                }\n            };\n        }\n        set data(value) {\n            this.allAssignmentsForRemoval = true;\n            super.data = value;\n            this.allAssignmentsForRemoval = false;\n        }\n        getEventsAssignments(event) {\n            return this.storage.findItem('event', event, true) || emptySet;\n        }\n        getResourcesAssignments(resource) {\n            return this.storage.findItem('resource', resource.$original, true) || emptySet;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        afterLoadData() {\n            this.eventStore && this.linkAssignments(this.eventStore, 'event');\n            this.resourceStore && this.linkAssignments(this.resourceStore, 'resource');\n        }\n        // Link events/resources to assignments, called when those stores are populated or joined to project\n        linkAssignments(store, modelName) {\n            // If we are passed a chained store, the ultimate source of truth is the masterStore\n            store = store.masterStore || store;\n            const unresolved = this.count && this.storage.findItem(modelName, null, true);\n            if (unresolved) {\n                for (const assignment of unresolved) {\n                    const record = store.getById(assignment.getCurrentOrProposed(modelName));\n                    if (record)\n                        assignment.setChanged(modelName, record);\n                }\n                this.invalidateIndices();\n            }\n        }\n        // Unlink events/resources from assignments, called when those stores are cleared\n        unlinkAssignments(modelName) {\n            // Invalidate links to events/resources, need to link to new records so set it back to the id (might be resource or resourceId)\n            // As assignment.resource returns null if it's an id, need to check for that in data\n            this.forEach(assignment => assignment.setChanged(modelName, assignment[modelName]?.id ?? assignment?.getData(modelName) ?? assignment[modelName + 'Id']));\n            this.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreAssignmentStoreMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from '../mixin/CorePartOfProjectModelMixin.js';\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractCalendarMixin } from \"../AbstractCalendarMixin.js\";\n/**\n * The calendar for project scheduling, it is used to mark certain time intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class CoreCalendarMixin extends Mixin([AbstractCalendarMixin, CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarMixin extends base {\n    }\n    return CoreCalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from './mixin/CorePartOfProjectStoreMixin.js';\nimport { CoreCalendarMixin } from '../model/scheduler_core/CoreCalendarMixin.js';\nimport { AbstractCalendarManagerStoreMixin } from \"./AbstractCalendarManagerStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all calendars in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreCalendarManagerStoreMixin extends Mixin([AbstractCalendarManagerStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarManagerStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                tree: true,\n                modelClass: CoreCalendarMixin\n            };\n        }\n    }\n    return CoreCalendarManagerStoreMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/Mixin.js';\nexport class CoreDependencyMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyMixin extends base {\n        static get fields() {\n            return [\n                { name: 'fromEvent', isEqual: (a, b) => a === b, persist: false },\n                { name: 'toEvent', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            let update = false;\n            if (field === 'fromEvent' || field === 'toEvent') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : this.eventStore?.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            if (update && !this.project.isPerformingCommit && !this.dependencyStore?.isLoadingData) {\n                // <remove-on-release>\n                // TODO: Improve Collection indexing to handle smaller updates\n                // </remove-on-release>\n                this.dependencyStore?.invalidateIndices();\n            }\n        }\n        // Resolve events when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            // Initial values should be considered changed, to be normalized\n            // (needs to pass through setChanged for early normalization expected for buckets)\n            this.setChanged('fromEvent', this.get('fromEvent'));\n            this.setChanged('toEvent', this.get('toEvent'));\n        }\n        // Resolved events as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { fromEvent, toEvent } = this.$changed;\n            if (fromEvent !== null && !(isInstanceOf(fromEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(fromEvent);\n                if (resolved)\n                    this.$changed.fromEvent = resolved;\n            }\n            if (toEvent !== null && !(isInstanceOf(toEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(toEvent);\n                if (resolved)\n                    this.$changed.toEvent = resolved;\n            }\n        }\n        //region Events\n        // Not using \"propose\" mechanism from CoreEventMixin, because buckets are expected to be up to date right away\n        set fromEvent(fromEvent) {\n            this.setChanged('fromEvent', fromEvent);\n        }\n        get fromEvent() {\n            const fromEvent = this.get('fromEvent');\n            // Engine returns null instead of id when unresolved\n            return fromEvent?.id != null ? fromEvent : null;\n        }\n        set toEvent(toEvent) {\n            this.setChanged('toEvent', toEvent);\n        }\n        get toEvent() {\n            const toEvent = this.get('toEvent');\n            // Engine returns null instead of id when unresolved\n            return toEvent?.id != null ? toEvent : null;\n        }\n    }\n    return CoreDependencyMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreDependencyMixin } from \"../model/scheduler_core/CoreDependencyMixin.js\";\nimport { AbstractDependencyStoreMixin } from \"./AbstractDependencyStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all dependencies in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreDependencyStoreMixin extends Mixin([AbstractDependencyStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreDependencyMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'fromEvent', unique: false },\n                        { property: 'toEvent', unique: false }\n                    ]\n                }\n            };\n        }\n        getIncomingDepsForEvent(event) {\n            return this.storage.findItem('toEvent', event) || emptySet;\n        }\n        getOutgoingDepsForEvent(event) {\n            return this.storage.findItem('fromEvent', event) || emptySet;\n        }\n        set data(value) {\n            this.allDependenciesForRemoval = true;\n            super.data = value;\n            this.allDependenciesForRemoval = false;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nimport { AbstractHasAssignmentsMixin } from '../AbstractHasAssignmentsMixin.js';\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all assignments,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasAssignmentsMixin extends Mixin([CoreEventMixin, AbstractHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasAssignmentsMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getEventsAssignments(this) ?? this.$cachedAssignments;\n        }\n        leaveProject(isReplacing = false) {\n            // Expected to still be able to return assignments when removed from project\n            this.$cachedAssignments = this.assigned;\n            super.leaveProject(isReplacing);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on an event should update resourceId on its assignments\n            if (key === 'id') {\n                this.assigned?.forEach(assignment => assignment.set('eventId', value));\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n        copy(newId = null, deep = null) {\n            const copy = superProto.copy.call(this, newId, deep);\n            // If deep is everything but object - use default behavior, which is to invoke accessors\n            // If deep is an object, check if it has certain field disabled\n            if ((ObjectHelper.isObject(deep) && !deep.skipFieldIdentifiers) || !ObjectHelper.isObject(deep)) {\n                // Copy current assignments, used for occurrences\n                copy.$cachedAssignments = this.assigned;\n            }\n            return copy;\n        }\n    }\n    return CoreHasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all dependencies,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasDependenciesMixin extends Mixin([CoreEventMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasDependenciesMixin extends base {\n        get outgoingDeps() {\n            return this.project.dependencyStore.getOutgoingDepsForEvent(this);\n        }\n        get incomingDeps() {\n            return this.project.dependencyStore.getIncomingDepsForEvent(this);\n        }\n        leaveProject() {\n            const eventStore = this.eventStore;\n            // the buckets may be empty if a model is removed from the project immediately after adding\n            // (without propagation)\n            if (this.outgoingDeps) {\n                this.outgoingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            if (this.incomingDeps) {\n                this.incomingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            superProto.leaveProject.call(this);\n        }\n    }\n    return CoreHasDependenciesMixin;\n}) {\n}\n", "import { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { CoreEventMixin } from './CoreEventMixin.js';\nimport { CoreHasAssignmentsMixin } from \"./CoreHasAssignmentsMixin.js\";\nimport { CoreHasDependenciesMixin } from './CoreHasDependenciesMixin.js';\n/**\n * This is an event class, [[SchedulerCoreProjectMixin]] is working with.\n * It is constructed as [[CoreEventMixin]], enhanced with [[CoreHasAssignmentsMixin]] and [[CoreHasDependenciesMixin]]\n */\nexport class SchedulerCoreEvent extends Mixin([\n    CoreEventMixin,\n    CoreHasAssignmentsMixin,\n    CoreHasDependenciesMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreEvent extends base {\n    }\n    return SchedulerCoreEvent;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"../model/scheduler_core/SchedulerCoreEvent.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractEventStoreMixin } from \"./AbstractEventStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all events in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreEventStoreMixin extends Mixin([AbstractEventStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: SchedulerCoreEvent\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n        afterLoadData() {\n            this.afterEventRemoval();\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n    }\n    return CoreEventStoreMixin;\n}) {\n}\n// /**\n//  * The tree store version of [[EventStoreMixin]].\n//  */\n// export class EventTreeStoreMixin extends Mixin(\n//     [ EventStoreMixin ],\n//     (base : AnyConstructor<EventStoreMixin, typeof EventStoreMixin>) => {\n//\n//     const superProto : InstanceType<typeof base> = base.prototype\n//\n//\n//         class EventTreeStoreMixin extends base {\n//             rootNode            : SchedulerBasicProjectMixin\n//\n//             buildRootNode () : object {\n//                 return this.getProject() || {}\n//             }\n//\n//\n//             static get defaultConfig () : object {\n//                 return {\n//                     tree        : true\n//                 }\n//             }\n//         }\n//\n//         return EventTreeStoreMixin\n//     }){}\n//\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreResourceMixin } from \"../model/scheduler_core/CoreResourceMixin.js\";\nimport { AbstractResourceStoreMixin } from \"./AbstractResourceStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all resources in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreResourceStoreMixin extends Mixin([AbstractResourceStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: CoreResourceMixin\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        afterLoadData() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        clear(removing) {\n            superProto.clear.call(this, removing);\n            this.assignmentStore?.unlinkAssignments('resource');\n        }\n    }\n    return CoreResourceStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport Delayable from \"../../../Core/mixin/Delayable.js\";\nimport Events from \"../../../Core/mixin/Events.js\";\nimport Model from \"../../../Core/data/Model.js\";\nexport class EventsWrapper extends Mixin([], Events) {\n}\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is an abstract project, which just lists the available stores.\n *\n * The actual project classes are [[SchedulerCoreProjectMixin]], [[SchedulerBasicProjectMixin]],\n * [[SchedulerProProjectMixin]], [[GanttProjectMixin]].\n */\nexport class AbstractProjectMixin extends Mixin([\n    EventsWrapper,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            // <remove-on-release>\n            // TODO: this flag is set, when we are \"restoring\" the data from the rejected transaction and stm is disabled\n            //  this involves removing the records added in that transaction (and adding removed records back)\n            //  normally, stm is used for that, however, it might be disabled\n            // </remove-on-release>\n            this.isRestoringData = false;\n        }\n        get isRepopulatingStores() {\n            return false;\n        }\n        get isInitialCommit() {\n            return !this.isInitialCommitPerformed || this.hasLoadedDataToCommit;\n        }\n        construct(config = {}) {\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isInitialCommitPerformed   = false\n            //     this.isLoadingInlineData        = false\n            //     this.isWritingData              = false\n            //\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            this.isInitialCommitPerformed = false;\n            this.isLoadingInlineData = false;\n            this.isWritingData = false;\n            this.hasLoadedDataToCommit = false;\n            const silenceInitialCommit = ('silenceInitialCommit' in config) ? config.silenceInitialCommit : true;\n            const adjustDurationToDST = ('adjustDurationToDST' in config) ? config.adjustDurationToDST : false;\n            // 5 years roughly === 5 * 365 * 24 * 60 * 60 * 1000\n            this.maxCalendarRange = ('maxCalendarRange' in config) ? config.maxCalendarRange : 157680000000;\n            // delete configs otherwise super.construct() call treat them as fields and makes accessors for them\n            delete config.maxCalendarRange;\n            delete config.silenceInitialCommit;\n            delete config.adjustDurationToDST;\n            superProto.construct.call(this, config);\n            this.silenceInitialCommit = silenceInitialCommit;\n            this.adjustDurationToDST = adjustDurationToDST;\n        }\n        // Template method called when a stores dataset is replaced. Implemented in SchedulerBasicProjectMixin\n        repopulateStore(store) { }\n        // Template method called when replica should be repopulated. Implemented in SchedulerBasicProjectMixin\n        repopulateReplica() { }\n        deferUntilRepopulationIfNeeded(deferId, func, args) {\n            // no deferring at this level (happens in projects using engine)\n            func(...args);\n        }\n        // Template method called when a store is attached to the project\n        attachStore(store) { }\n        // Template method called when a store is detached to the project\n        detachStore(store) { }\n        async commitAsync() {\n            throw new Error(\"Abstract method called\");\n        }\n        // Different implementations for Core and Basic engines\n        isEngineReady() {\n            throw new Error(\"Abstract method called\");\n        }\n        getStm() {\n            throw new Error(\"Abstract method called\");\n        }\n    }\n    return AbstractProjectMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"./SchedulerCoreEvent.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport Delayable from \"../../../../Core/mixin/Delayable.js\";\nimport { CoreEventStoreMixin } from \"../../store/CoreEventStoreMixin.js\";\nimport { CoreAssignmentMixin } from \"./CoreAssignmentMixin.js\";\nimport { CoreAssignmentStoreMixin } from \"../../store/CoreAssignmentStoreMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nimport { CoreResourceStoreMixin } from \"../../store/CoreResourceStoreMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport { CoreDependencyStoreMixin } from \"../../store/CoreDependencyStoreMixin.js\";\nimport { CoreDependencyMixin } from \"./CoreDependencyMixin.js\";\nimport { CoreCalendarMixin } from './CoreCalendarMixin.js';\nimport { CoreCalendarManagerStoreMixin } from '../../store/CoreCalendarManagerStoreMixin.js';\nimport { delay } from \"../../../util/Functions.js\";\nimport StateTrackingManager from \"../../../../Core/data/stm/StateTrackingManager.js\";\nimport { AbstractProjectMixin } from \"../AbstractProjectMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is a project, implementing _basic scheduling_ as [[SchedulerBasicProjectMixin]] does.\n * Yet this class does not use _chronograph_ based engine.\n */\nexport class SchedulerCoreProjectMixin extends Mixin([\n    AbstractProjectMixin,\n    CorePartOfProjectGenericMixin,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreProjectMixin extends base {\n        static get configurable() {\n            return {\n                stm: {},\n                eventStore: {},\n                assignmentStore: {},\n                resourceStore: {},\n                dependencyStore: {},\n                calendarManagerStore: {},\n                eventModelClass: SchedulerCoreEvent,\n                assignmentModelClass: CoreAssignmentMixin,\n                resourceModelClass: CoreResourceMixin,\n                dependencyModelClass: CoreDependencyMixin,\n                calendarModelClass: CoreCalendarMixin,\n                eventStoreClass: CoreEventStoreMixin,\n                assignmentStoreClass: CoreAssignmentStoreMixin,\n                resourceStoreClass: CoreResourceStoreMixin,\n                dependencyStoreClass: CoreDependencyStoreMixin,\n                calendarManagerStoreClass: CoreCalendarManagerStoreMixin,\n                assignmentsData: null,\n                calendarsData: null,\n                dependenciesData: null,\n                eventsData: null,\n                resourcesData: null\n            };\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            const me = this;\n            // Cannot be created with declaration, because of how TS is compiled to JS. Ends up after `construct()`\n            me.$invalidated = new Set();\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isPerformingCommit   = false\n            //     this.silenceInitialCommit = true\n            //     this.ongoing              = Promise.resolve()\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            me.isPerformingCommit = false;\n            me.silenceInitialCommit = true;\n            me.ongoing = Promise.resolve();\n            if (config.eventStore && !config.assignmentStore) {\n                const eventStore = config.eventStore.masterStore || config.eventStore;\n                // If chained from a CrudManager, the assignment store might not be part of a project, and we might\n                // need to ingest it from the CrudManager\n                // @ts-ignore\n                const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n                // In this case we must ingest the assignment store from the eventStore\n                if (assignmentStore?.isAssignmentStore) {\n                    config.assignmentStore = assignmentStore;\n                    me.isSharingAssignmentStore = true;\n                }\n            }\n            superProto.construct.call(me, config);\n            // not part of the CalendarManagerStore intentionally, not persisted\n            me.defaultCalendar = new me.calendarManagerStore.modelClass({\n                unspecifiedTimeIsWorking: me.unspecifiedTimeIsWorking\n            });\n            me.defaultCalendar.project = me;\n            const { calendarsData, eventsData, dependenciesData, resourcesData, assignmentsData } = me;\n            const hasInlineData = Boolean(calendarsData || eventsData || dependenciesData || resourcesData || assignmentsData);\n            if (hasInlineData) {\n                me.loadInlineData({\n                    calendarsData,\n                    eventsData,\n                    dependenciesData,\n                    resourcesData,\n                    assignmentsData\n                });\n                delete me.calendarsData;\n                delete me.eventsData;\n                delete me.dependenciesData;\n                delete me.resourcesData;\n                delete me.assignmentsData;\n            }\n            else {\n                // Trigger initial commit\n                me.bufferedCommitAsync();\n            }\n        }\n        doDestroy() {\n            const me = this;\n            me.eventStore?.destroy();\n            me.dependencyStore?.destroy();\n            me.assignmentStore?.destroy();\n            me.resourceStore?.destroy();\n            me.calendarManagerStore?.destroy();\n            me.defaultCalendar.destroy();\n            me.stm?.destroy();\n            superProto.doDestroy.call(this);\n        }\n        /**\n         * This method loads the \"raw\" data into the project. The loading is basically happening by\n         * assigning the individual data entries to the `data` property of the corresponding store.\n         *\n         * @param data\n         */\n        async loadInlineData(data) {\n            const me = this;\n            me.isLoadingInlineData = true;\n            if (data.calendarsData) {\n                me.calendarManagerStore.data = data.calendarsData;\n            }\n            if (data.resourcesData) {\n                me.resourceStore.data = data.resourcesData;\n            }\n            if (data.assignmentsData) {\n                me.assignmentStore.data = data.assignmentsData;\n            }\n            if (data.eventsData) {\n                me.eventStore.data = data.eventsData;\n            }\n            if (data.tasksData) {\n                me.eventStore.data = data.tasksData;\n            }\n            if (data.dependenciesData) {\n                me.dependencyStore.data = data.dependenciesData;\n            }\n            await me.commitLoad();\n            me.isLoadingInlineData = false;\n            return;\n        }\n        //endregion\n        //region Join\n        async commitLoad() {\n            await this.commitAsync();\n            // Might have been destroyed during the async operation above\n            if (!this.isDestroyed)\n                this.trigger('load');\n        }\n        joinStoreRecords(store) {\n            const fn = (record) => {\n                record.setProject(this);\n                record.joinProject();\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(fn);\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        unJoinStoreRecords(store) {\n            const fn = (record) => {\n                record.leaveProject();\n                record.setProject(this);\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(node => {\n                    // do not unjoin/leave project for the root node, which is the project itself\n                    if (node !== store.rootNode)\n                        fn(node);\n                });\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        //endregion\n        //region EventStore\n        resolveStoreAndModelClass(name, config) {\n            // storeClass from supplied config or our properties\n            const storeClass = config?.storeClass || this[`${name}StoreClass`];\n            // modelClass from supplied config\n            let modelClass = config?.modelClass;\n            if (!modelClass) {\n                // or from storeClass.modelClass if customized\n                // @ts-ignore\n                if (this.getDefaultConfiguration()[`${name}ModelClass`] !== storeClass.getDefaultConfiguration().modelClass) {\n                    modelClass = storeClass.getDefaultConfiguration().modelClass;\n                }\n                // and if none of the above, use from our properties\n                else {\n                    modelClass = this[`${name}ModelClass`];\n                }\n            }\n            return { storeClass, modelClass };\n        }\n        setEventStore(eventStore) {\n            this.eventStore = eventStore;\n        }\n        changeEventStore(eventStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(eventStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('event', eventStore);\n                eventStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, eventStore));\n            }\n            else {\n                eventStore.project = me;\n                stm.addStore(eventStore);\n                me.joinStoreRecords(eventStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldEvent = assignment.event;\n                    if (oldEvent) {\n                        const newEvent = eventStore.getById(oldEvent.id);\n                        if (newEvent) {\n                            assignment.event = newEvent;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterEventRemoval();\n            }\n            eventStore.setProject(me);\n            return eventStore;\n        }\n        updateEventStore(eventStore, oldStore) {\n            this.attachStore(eventStore);\n            this.trigger('eventStoreChange', { store: eventStore });\n        }\n        //endregion\n        //region AssignmentStore\n        setAssignmentStore(assignmentStore) {\n            this.assignmentStore = assignmentStore;\n        }\n        changeAssignmentStore(assignmentStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n            }\n            if (!(assignmentStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('assignment', assignmentStore);\n                assignmentStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, assignmentStore));\n            }\n            else {\n                assignmentStore.project = me;\n                stm.addStore(assignmentStore);\n                me.joinStoreRecords(assignmentStore);\n            }\n            assignmentStore.setProject(me);\n            return assignmentStore;\n        }\n        updateAssignmentStore(assignmentStore, oldStore) {\n            this.attachStore(assignmentStore);\n            this.trigger('assignmentStoreChange', { store: assignmentStore });\n        }\n        //endregion\n        //region ResourceStore\n        setResourceStore(resourceStore) {\n            this.resourceStore = resourceStore;\n        }\n        changeResourceStore(resourceStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(resourceStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('resource', resourceStore);\n                resourceStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, resourceStore));\n            }\n            else {\n                resourceStore.project = me;\n                stm.addStore(resourceStore);\n                me.joinStoreRecords(resourceStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldResource = assignment.resource;\n                    if (oldResource) {\n                        const newResource = resourceStore.getById(oldResource.id);\n                        if (newResource) {\n                            assignment.resource = newResource;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterResourceRemoval();\n            }\n            resourceStore.setProject(me);\n            return resourceStore;\n        }\n        updateResourceStore(resourceStore, oldStore) {\n            this.attachStore(resourceStore);\n            this.trigger('resourceStoreChange', { store: resourceStore });\n        }\n        //endregion\n        //region DependencyStore\n        setDependencyStore(dependencyStore) {\n            this.dependencyStore = dependencyStore;\n        }\n        changeDependencyStore(dependencyStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(dependencyStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('dependency', dependencyStore);\n                dependencyStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, dependencyStore));\n            }\n            else {\n                dependencyStore.project = me;\n                me.stm.addStore(dependencyStore);\n                me.joinStoreRecords(dependencyStore);\n            }\n            return dependencyStore;\n        }\n        updateDependencyStore(dependencyStore, oldStore) {\n            this.attachStore(dependencyStore);\n            this.trigger('dependencyStoreChange', { store: dependencyStore });\n        }\n        //endregion\n        //region CalendarManagerStore\n        setCalendarManagerStore(calendarManagerStore) {\n            this.calendarManagerStore = calendarManagerStore;\n        }\n        changeCalendarManagerStore(calendarManagerStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(calendarManagerStore instanceof Store)) {\n                // @ts-ignore\n                const storeClass = calendarManagerStore?.storeClass || me.calendarManagerStoreClass;\n                // @ts-ignore\n                const modelClass = calendarManagerStore?.modelClass || storeClass.getDefaultConfiguration().modelClass || me.calendarModelClass;\n                calendarManagerStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, calendarManagerStore));\n            }\n            else {\n                me.stm.addStore(calendarManagerStore);\n            }\n            calendarManagerStore.setProject(me);\n            return calendarManagerStore;\n        }\n        updateCalendarManagerStore(calendarManagerStore, oldStore) {\n            this.attachStore(calendarManagerStore);\n            this.trigger('calendarManagerStoreChange', { store: calendarManagerStore });\n        }\n        //endregion\n        //region Calendar\n        get calendar() {\n            return this.$calendar || this.defaultCalendar;\n        }\n        set calendar(calendar) {\n            this.$calendar = calendar;\n        }\n        get effectiveCalendar() {\n            return this.calendar;\n        }\n        //endregion\n        //region Add records\n        async addEvent(event) {\n            this.eventStore.add(event);\n            return this.commitAsync();\n        }\n        async addAssignment(assignment) {\n            this.assignmentStore.add(assignment);\n            return this.commitAsync();\n        }\n        async addResource(resource) {\n            this.resourceStore.add(resource);\n            return this.commitAsync();\n        }\n        async addDependency(dependency) {\n            this.dependencyStore.add(dependency);\n            return this.commitAsync();\n        }\n        //endregion\n        //region Auto commit\n        // Buffer commitAsync using setTimeout. Not using `buffer` on purpose, for performance reasons and to better\n        // mimic how graph does it\n        bufferedCommitAsync() {\n            if (!this.hasPendingAutoCommit) {\n                this.setTimeout({\n                    fn: 'commitAsync',\n                    delay: 10\n                });\n            }\n        }\n        get hasPendingAutoCommit() {\n            return this.hasTimeout('commitAsync');\n        }\n        unScheduleAutoCommit() {\n            this.clearTimeout('commitAsync');\n        }\n        //endregion\n        //region Commit\n        async commitAsync() {\n            if (this.isPerformingCommit)\n                return this.ongoing;\n            return this.ongoing = this.doCommitAsync();\n        }\n        async doCommitAsync() {\n            const me = this;\n            me.isPerformingCommit = true;\n            // Cancel any outstanding commit\n            me.unScheduleAutoCommit();\n            await delay(0);\n            if (!me.isDestroyed) {\n                // Calculate all invalidated records, updates their data silently\n                for (const record of me.$invalidated) {\n                    record.calculateInvalidated();\n                }\n                const { isInitialCommit, silenceInitialCommit } = me;\n                // apply changes silently if this is initial commit and \"silenceInitialCommit\" option is enabled\n                const silenceCommit = isInitialCommit && silenceInitialCommit;\n                // Notify stores that care about commit (internal)\n                me.assignmentStore.onCommitAsync();\n                me.dependencyStore.onCommitAsync();\n                me.isInitialCommitPerformed = true;\n                me.hasLoadedDataToCommit = false;\n                me.isPerformingCommit = false;\n                const stores = [me.assignmentStore, me.dependencyStore, me.eventStore, me.resourceStore, me.calendarManagerStore];\n                stores.forEach(store => store.suspendAutoCommit?.());\n                me.isWritingData = true;\n                // \"Real\" project triggers refresh before data is written back to records\n                me.trigger('refresh', { isInitialCommit, isCalculated: true });\n                // If we are not announcing changes, take a cheaper path\n                if (silenceCommit) {\n                    for (const record of me.$invalidated) {\n                        record.finalizeInvalidated(true);\n                    }\n                }\n                else {\n                    // Two loops looks a bit weird, but needed since editing assignment might affect event etc.\n                    // And we do only want a single update in the end\n                    // 1. Start batches and perform all calculations\n                    for (const record of me.$invalidated) {\n                        record.beginBatch(true);\n                        record.finalizeInvalidated();\n                    }\n                    // 2. End batches, announcing changes (unless initial commit)\n                    for (const record of me.$invalidated) {\n                        record.endBatch(false, true);\n                    }\n                }\n                me.isWritingData = false;\n                me.$invalidated.clear();\n                // Mimic real projects events\n                me.trigger('dataReady');\n                stores.forEach(store => store.resumeAutoCommit?.());\n                // Chrono version triggers \"dataReady\" only if there were no commit rejection\n                // (in case of a rejection it triggers \"commitRejected\" event)\n                // but in both cases it triggers \"commitFinalized\" afterwards\n                me.trigger('commitFinalized');\n                return true;\n            }\n        }\n        async propagateAsync() {\n            return this.commitAsync();\n        }\n        // Called when a record invalidates itself, queues it for calculation\n        invalidate(record) {\n            this.$invalidated.add(record);\n            this.bufferedCommitAsync();\n        }\n        // this does not account for possible scheduling conflicts\n        async isValidDependency() {\n            return true;\n        }\n        //endregion\n        //region STM\n        getStm() {\n            return this.stm;\n        }\n        /**\n         * State tracking manager instance the project relies on\n         */\n        set stm(stm) {\n            stm = this.$stm = new StateTrackingManager(ObjectHelper.assign({\n                disabled: true\n            }, stm));\n            stm.ion({\n                // Propagate on undo/redo\n                restoringStop: async () => {\n                    // Disable STM meanwhile to not pick it up as a new STM transaction\n                    stm.disable();\n                    await this.commitAsync();\n                    if (!this.isDestroyed) {\n                        stm.enable();\n                        this.trigger('stateRestoringDone');\n                    }\n                }\n            });\n        }\n        get stm() {\n            return this.$stm;\n        }\n        //endregion\n        isEngineReady() {\n            return !this.hasPendingAutoCommit && !this.isPerformingCommit && this.isInitialCommitPerformed;\n        }\n    }\n    //region Config\n    SchedulerCoreProjectMixin.applyConfigs = true;\n    return SchedulerCoreProjectMixin;\n}) {\n}\n", "import TimeSpan from '../TimeSpan.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/model/mixin/TimeZonedDatesMixin\n */\n\nconst dateFieldsToConvert = {\n    startDate      : 1,\n    endDate        : 1,\n    constraintDate : 1,\n    deadlineDate   : 1\n};\n\n/**\n * This mixin class overrides default Model functionality to provide support for time zone converted dates\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class TimeZonedDatesMixin extends (Target || TimeSpan) {\n\n    static $name = 'TimeZonedDatesMixin';\n\n    static fields  = [\n        /**\n         * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.\n         *\n         * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for\n         * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be\n         * converted to the configured timezone.\n         *\n         * For more information about timezone conversion, se {@link Scheduler.model.ProjectModel#config-timeZone}.\n         *\n         * This field will not {@link Core.data.field.DataField#config-persist} by default.\n         *\n         * @field {String|Number} timeZone\n         * @category Advanced\n         */\n        {\n            name    : 'timeZone',\n            persist : false\n        }\n    ];\n\n    get timeZone() {\n        return this.getData('timeZone');\n    }\n\n    set timeZone(timeZone) {\n        this.setData('timeZone', timeZone);\n    }\n\n    setLocalDate(field, date) {\n        this.set(field, this.timeZone != null ? TimeZoneHelper.toTimeZone(date, this.timeZone) : date, true);\n        // Need to set data to fool engine that the dates havn't changed\n        this.data[field] = this[field];\n    }\n\n    getLocalDate(field) {\n        if (this.timeZone != null && this[field]) {\n            return TimeZoneHelper.fromTimeZone(this[field], this.timeZone);\n        }\n        return this[field];\n    }\n\n    applyChangeset(rawChanges) {\n        // When a sync response arrives from backend, the data will need to be converted to time zone before applied.\n        if (this.timeZone != null) {\n            for (const field in dateFieldsToConvert) {\n                if (rawChanges[field]) {\n                    this.setLocalDate(field, new Date(rawChanges[field]));\n                    delete rawChanges[field];\n                }\n            }\n        }\n        return super.applyChangeset(...arguments);\n    }\n\n    getFieldPersistentValue(field) {\n        if (this.timeZone != null) {\n            const fieldName = field?.field ?? field?.name ?? field;\n\n            // Used when saving/syncing. Returns local system dates\n            if (dateFieldsToConvert[fieldName]) {\n                return this.getLocalDate(fieldName);\n            }\n        }\n\n        return super.getFieldPersistentValue(field);\n    }\n\n    // Converts current record into a timeZone\n    convertToTimeZone(timeZone) {\n        const\n            me            = this,\n            metaModified  = { ...me.meta.modified },\n            convertFields = { ...dateFieldsToConvert };\n\n        // Do not convert start and end dates on task unless manually scheduled\n        if (me.isTask && !me.manuallyScheduled) {\n            delete convertFields.startDate;\n            delete convertFields.endDate;\n        }\n\n        // Collect values\n        for (const field in convertFields) {\n            // Only convert if field has value\n            if (me[field] != null) {\n                convertFields[field] = me[field];\n\n                // If already converted, restore to local system time zone\n                if (me.timeZone != null) {\n                    convertFields[field] = me.getLocalDate(field);\n\n                    // Restore value in meta modified as well\n                    if (metaModified[field]) {\n                        metaModified[field] = TimeZoneHelper.fromTimeZone(metaModified[field], me.timeZone);\n                    }\n                }\n            }\n            else {\n                delete convertFields[field];\n            }\n        }\n\n        // Change time zone\n        me.timeZone = timeZone;\n\n        // Set values\n        for (const field in convertFields) {\n            // Convert and set field date silently\n            me.setLocalDate(field, convertFields[field], false);\n            convertFields[field] = 1; // For clearing changes below\n\n            // Convert value in meta modified as well\n            if (me.timeZone != null && metaModified[field]) {\n                metaModified[field] = TimeZoneHelper.toTimeZone(metaModified[field], me.timeZone);\n            }\n        }\n\n        // Clear modification metadata\n        me.clearChanges(true, true, convertFields);\n\n        // If old modification metadata, restore them to record and store\n        if (!ObjectHelper.isEmpty(metaModified)) {\n            me.meta.modified = metaModified;\n            me.stores.forEach(store => store.modified.add(me));\n        }\n    }\n};\n", "import Model from '../../Core/data/Model.js';\nimport TimeZonedDatesMixin from './mixin/TimeZonedDatesMixin.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n\n/**\n * @module Scheduler/model/TimeSpan\n */\n\n/**\n * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.\n *\n * It's a subclass of {@link Core.data.Model}.\n * Please refer to documentation of those classes to become familiar with the base interface of this class.\n *\n * A TimeSpan has the following fields:\n *\n * - {@link #field-startDate}    - start date of the task in the ISO 8601 format\n * - {@link #field-endDate}      - end date of the task in the ISO 8601 format (not inclusive)\n * - {@link #field-duration}     - duration, time between start date and end date\n * - {@link #field-durationUnit} - unit used to express the duration\n * - {@link #field-name}         - an optional name of the range\n * - {@link #field-cls}          - an optional CSS class to be associated with the range.\n *\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details. To specify\n * another date format:\n *\n * ```javascript\n * class MyTimeSpan extends TimeSpan {\n *   static get fields() {\n *      { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }\n *   }\n * }\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/TimeZonedDatesMixin\n */\nexport default class TimeSpan extends Model.mixin(TimeZonedDatesMixin) {\n\n    static get $name() {\n        return 'TimeSpan';\n    }\n\n    //region Field definitions\n\n    static get fields() {\n        return [\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            {\n                name : 'startDate',\n                type : 'date'\n            },\n\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            {\n                name : 'endDate',\n                type : 'date'\n            },\n\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            {\n                name      : 'duration',\n                type      : 'number',\n                allowNull : true,\n                internal  : true\n            },\n\n            /**\n             * The unit part of the TimeSpan duration, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change durationUnit use #setDuration().\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n             * @category Scheduling\n             */\n            {\n                type         : 'durationunit',\n                name         : 'durationUnit',\n                defaultValue : 'd',\n                internal     : true\n            },\n\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and {@link #field-durationUnit} fields.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n            {\n                name    : 'fullDuration',\n                persist : false,\n                column  : {\n                    type : 'duration'\n                },\n                useProp : true\n            },\n\n            /**\n             * An encapsulation of the CSS classes to add to the rendered time span element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String|String[]|Object}\n             *\n             * @category Styling\n             */\n            {\n                name         : 'cls',\n                defaultValue : '',\n                internal     : true\n            },\n\n            /**\n             * CSS class specifying an icon to apply to the rendered time span element.\n             * **Note**: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease\n             * performance because feature will refer to the DOM to get exact size of the element.\n             * @field {String} iconCls\n             * @category Styling\n             */\n            {\n                name     : 'iconCls',\n                internal : true\n            },\n\n            /**\n             * A CSS style string (applied to `style.cssText`) or object (applied to `style`)\n             * ```\n             * record.style = 'color: red;font-weight: 800';\n             * ```\n             *\n             * @field {String} style\n             * @category Styling\n             */\n            {\n                name     : 'style',\n                type     : 'object',\n                internal : true\n            },\n\n            /**\n             * The name of the time span (or Event / Task)\n             * @field {String} name\n             * @category Common\n             */\n            {\n                name         : 'name',\n                type         : 'string',\n                defaultValue : ''\n            }\n        ];\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(data, ...args) {\n        // fullDuration is a \"calculated field\", but convenient to allow supplying it in the data\n        if (data?.fullDuration) {\n            const { magnitude, unit } = data.fullDuration;\n            data.duration = magnitude;\n            data.unit = unit;\n            delete data.fullDuration;\n        }\n\n        super.construct(data, ...args);\n\n        this.normalize();\n    }\n\n    /**\n     * Returns the event store this event is part of, if any.\n     *\n     * @property {Scheduler.data.EventStore}\n     * @readonly\n     * @category Misc\n     */\n    get eventStore() {\n        const me = this;\n\n        // If we are an occurrence, return our base recurring event's store\n        if (me.isOccurrence) {\n            return me.recurringTimeSpan.eventStore;\n        }\n        if (!me._eventStore) {\n            me._eventStore = me.stores?.find(s => s.isEventStore);\n        }\n        return me._eventStore;\n    }\n\n    normalize() {\n        const\n            me                                             = this,\n            { startDate, endDate, duration, durationUnit } = me,\n            hasDuration                                    = duration != null;\n\n        // need to calculate duration (checking first since seemed most likely to happen)\n        if (startDate && endDate && !hasDuration) {\n            me.setData('duration', DH.diff(startDate, endDate, durationUnit, true));\n        }\n        // need to calculate endDate?\n        else if (startDate && !endDate && hasDuration) {\n            me.setData('endDate', DH.add(startDate, duration, durationUnit));\n        }\n        // need to calculate startDate\n        else if (!startDate && endDate && hasDuration) {\n            me.setData('startDate', DH.add(endDate, -duration, durationUnit));\n        }\n    }\n\n    //endregion\n\n    //region Getters & Setters\n\n    updateInternalCls(cls) {\n        if (this._cls) {\n            this._cls.value = cls;\n        }\n        else {\n            this._cls = new DomClassList(cls);\n        }\n    }\n\n    set internalCls(cls) {\n        this.updateInternalCls(cls);\n        this.set('cls', this._cls.value);\n    }\n\n    get internalCls() {\n        const { cls } = this;\n        // `cls` getter can be overriden so return `cls` value if it is DomClassList or assign it to `this._cls`\n        if (cls?.isDomClassList) {\n            return cls;\n        }\n        this.internalCls = cls;\n        return this._cls;\n    }\n\n    get cls() {\n        if (!this._cls) {\n            this._cls = new DomClassList(super.get('cls'));\n        }\n        return this._cls;\n    }\n\n    set cls(cls) {\n        this.internalCls = cls;\n    }\n\n    get startDate() {\n        return this.get('startDate');\n    }\n\n    set startDate(date) {\n        this.setStartDate(date);\n    }\n\n    get endDate() {\n        return this.get('endDate');\n    }\n\n    set endDate(date) {\n        this.setEndDate(date);\n    }\n\n    // <remove-on-release>\n    // TODO: This can go away if Calendar would avoid rendering prior to the engine being ready (i.e., having calculated\n    //  all endDate values)\n    // </remove-on-release>\n    get endingDate() {\n        const\n            me = this,\n            {\n                endDate,\n                startDate\n            }  = me;\n\n        if (endDate) {\n            // Special case of startDate===endDate for allDay event:\n            // if (Number(endDate) === Number(startDate) && me.allDay) {\n            //     return DH.add(startDate, 1, 'd');\n            // }\n            // Nope... the above works fine except when the day start time is shifted. In this case we want the\n            // event to appear as \"all day\" on the shifted day, but the above will push the endingDate beyond the\n            // end of the shifted day.\n\n            return endDate;\n        }\n\n        return DH.add(startDate, me.duration, me.durationUnit);\n    }\n\n    get duration() {\n        return this.get('duration');\n    }\n\n    set duration(duration) {\n        this.setDuration(duration, this.durationUnit);\n    }\n\n    get durationUnit() {\n        return this.get('durationUnit');\n    }\n\n    /**\n     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is\n     * readonly after creation\n     * @param {Number} duration Duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit Unit for\n     * specified duration value, see {@link #field-durationUnit} for valid values\n     * @category Scheduling\n     */\n    setDuration(duration, durationUnit = this.durationUnit) {\n        // Must be a number\n        duration = parseFloat(duration);\n\n        this.set({\n            duration,\n            durationUnit,\n            ...this.updateDatesFromDuration(duration, durationUnit)\n        });\n    }\n\n    updateDatesFromDuration(magnitude, unit, startDate = this.startDate, endDate = this.endDate) {\n        const result = {};\n\n        if (startDate) {\n            result.endDate = DH.add(startDate, magnitude, unit);\n        }\n        else if (endDate) {\n            result.startDate = DH.add(endDate, -magnitude, unit);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns duration of the event in given unit. This is a wrapper for {@link Core.helper.DateHelper#function-getDurationInUnit-static}\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit\n     * @param {Boolean} [doNotRound]\n     * @private\n     * @returns {Number}\n     */\n    getDurationInUnit(unit, doNotRound) {\n        const me = this;\n\n        if (me.startDate && me.endDate) {\n            return DH.getDurationInUnit(me.startDate, me.endDate, unit, doNotRound);\n        }\n        else {\n            return DH.as(unit, me.duration, me.durationUnit);\n        }\n    }\n\n    get fullDuration() {\n        // Used for formatting during export\n        return new Duration({\n            unit      : this.durationUnit,\n            magnitude : this.duration\n        });\n    }\n\n    set fullDuration(duration) {\n        if (typeof duration === 'string') {\n            duration = DH.parseDuration(duration, true, this.durationUnit);\n        }\n\n        this.setDuration(duration.magnitude, duration.unit);\n    }\n\n    /**\n     * Sets the range start date\n     *\n     * @param {Date} date The new start date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `true`\n     * @category Scheduling\n     */\n    setStartDate(date, keepDuration = true) {\n        const\n            me    = this,\n            toSet = {\n                startDate : date\n            };\n\n        if (date) {\n            let calcEndDate;\n\n            if (keepDuration) {\n                calcEndDate = me.duration != null;\n            }\n            else {\n                if (me.endDate) {\n                    toSet.duration = DH.diff(date, me.endDate, me.durationUnit, true);\n\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcEndDate = this.duration != null;\n                }\n            }\n\n            if (calcEndDate) {\n                // Use hours to set end date in order to correctly process DST crossings\n                toSet.endDate = DH.add(date, me.getDurationInUnit('h'), 'h');\n            }\n        }\n        else {\n            toSet.duration = null;\n        }\n\n        me.set(toSet);\n    }\n\n    /**\n     * Sets the range end date\n     *\n     * @param {Date} date The new end date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `false`\n     * @category Scheduling\n     */\n    setEndDate(date, keepDuration = false) {\n        const\n            me    = this,\n            toSet = {\n                endDate : date\n            };\n\n        if (date) {\n            let calcStartDate;\n\n            if (keepDuration === true) {\n                calcStartDate = me.duration != null;\n            }\n            else {\n                if (me.startDate) {\n                    toSet.duration = DH.diff(me.startDate, date, me.durationUnit, true);\n\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcStartDate = this.duration != null;\n                }\n            }\n\n            if (calcStartDate) {\n                toSet.startDate = DH.add(date, -me.duration, me.durationUnit);\n            }\n        }\n\n        me.set(toSet);\n    }\n\n    /**\n     * Sets the event start and end dates\n     *\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     * @param {Boolean} [silent] Pass `true` to not trigger events\n     * @category Scheduling\n     */\n    setStartEndDate(start, end, silent) {\n        this.set({\n            startDate : start,\n            endDate   : end\n        }, null, silent);\n    }\n\n    /**\n     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.\n     * @readonly\n     * @property {Date[]}\n     * @category Scheduling\n     */\n    get dates() {\n        const\n            dates     = [],\n            startDate = DH.startOf(this.startDate, 'day'),\n            endDate   = this.endDate;\n\n        for (let date = startDate; date < endDate; date = DH.add(date, 1, 'day')) {\n            dates.push(date);\n        }\n\n        return dates;\n    }\n\n    get startDateMS() {\n        return (this.batching && this.hasBatchedChange('startDate') ? this.get('startDate') : this.startDate)?.getTime();\n    }\n\n    get endDateMS() {\n        return (this.batching && this.hasBatchedChange('endDate') ? this.get('endDate') : this.endDate)?.getTime();\n    }\n\n    /**\n     * Returns the duration of this Event in milliseconds.\n     * @readonly\n     * @property {Number}\n     * @category Scheduling\n     */\n    get durationMS() {\n        const { endDateMS, startDateMS } = this;\n\n        if (endDateMS && startDateMS) {\n            return endDateMS - startDateMS;\n        }\n        else {\n            return DH.asMilliseconds(this.duration || 0, this.durationUnit);\n        }\n    }\n\n    /**\n     * Returns true if record is a milestone.\n     * @readonly\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isMilestone() {\n        return this.duration === 0;\n    }\n\n    inSetNormalize(field) {\n        if (typeof field !== 'string') {\n            // If user is updating multiple properties in one go using an object, we help out\n            // by filling out missing schedule related data\n\n            let { startDate, endDate, duration, durationUnit = this.durationUnit } = field;\n\n            // Conversion is usually handled in inSet, but we are normalizing prior to that and have to handle it here\n            if (typeof startDate === 'string') {\n                startDate = this.getFieldDefinition('startDate').convert(startDate);\n            }\n\n            if (typeof endDate === 'string') {\n                endDate = this.getFieldDefinition('endDate').convert(endDate);\n            }\n\n            if ('duration' in field) {\n                if (startDate && !endDate) {\n                    endDate = DH.add(startDate, duration, durationUnit, true, true);\n                }\n\n                if (!startDate && endDate) {\n                    startDate = DH.add(endDate, -duration, durationUnit, true, true);\n                }\n            }\n            else if (startDate && endDate) {\n                // Calculate duration in hours and covert to target duration unit in order to avoid extra DST conversion\n                duration = DH.as(durationUnit, DH.diff(startDate, endDate, 'h', true), 'h');\n            }\n\n            // A framework (React tested) may freeze passed field object, so clone it in that case\n            const fieldOrClone = Object.isFrozen(field) ? ObjectHelper.clone(field) : field;\n            startDate && (fieldOrClone.startDate = startDate);\n            endDate && (fieldOrClone.endDate = endDate);\n            duration != null && (fieldOrClone.duration = duration);\n\n            return fieldOrClone;\n        }\n    }\n\n    fieldToKeys(field, value) {\n        const result = super.fieldToKeys(field, value);\n\n        // Replace fullDuration with duration and durationUnit in calls to `set()`\n        if (result.fullDuration) {\n            const { magnitude, unit } = result.fullDuration;\n            result.duration     = magnitude;\n            result.durationUnit = unit;\n        }\n\n        // Engine handles this for event & tasks\n        if (!this.isEventModel && !this.isTaskModel) {\n            // Recalculate start/end date if duration is set with only one of them\n            if (('duration' in result || result.durationUnit) && !(result.startDate && result.endDate)) {\n                Object.assign(\n                    result,\n                    this.updateDatesFromDuration(\n                        result.duration ?? this.duration,\n                        result.durationUnit ?? this.durationUnit,\n                        result.startDate,\n                        result.endDate\n                    )\n                );\n            }\n        }\n\n        return result;\n    }\n\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly) {\n        if (!skipAccessors) {\n            field = this.inSetNormalize(field) || field;\n        }\n\n        return super.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly);\n    }\n\n    // Cls requires special handling since it is converted to a DomClassList\n    applyValue(useProp, key, value, skipAccessors, field) {\n        if (key === 'cls') {\n            this.updateInternalCls(value);\n        }\n\n        super.applyValue(useProp, key, value, skipAccessors, field);\n    }\n\n    //endregion\n\n    //region Iteration\n\n    /**\n     * Iterates over the {@link #property-dates}\n     * @param {Function} func The function to call for each date\n     * @param {Object} thisObj `this` reference for the function\n     * @category Scheduling\n     */\n    forEachDate(func, thisObj) {\n        return this.dates.forEach(func.bind(thisObj));\n    }\n\n    //endregion\n\n    /**\n     * Checks if the range record has both start and end dates set and start <= end\n     *\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isScheduled() {\n        const { startDateMS, endDateMS } = this;\n\n        return endDateMS - startDateMS >= 0;\n    }\n\n    // Simple check if end date is greater than start date\n    get isValid() {\n        const { startDate, endDate } = this;\n        return !startDate || !endDate || (endDate - startDate >= 0);\n    }\n\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     */\n    shift(amount, unit = this.durationUnit) {\n        // <remove-on-release>\n        // TODO: REMOVE After 6.0\n        // </remove-on-release>\n        if (typeof amount === 'string') {\n            const u = amount;\n\n            amount = unit;\n            unit = u;\n        }\n\n        return this.setStartDate(DH.add(this.startDate, amount, unit, true), true);\n    }\n\n    /**\n     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.\n     * @property {String}\n     * @category Parent & children\n     */\n    get wbsCode() {\n        return this._wbsCode || this.indexPath.join('.');\n    }\n\n    set wbsCode(value) {\n        // wbsCode needs to be writable to interop w/TaskModel and Baselines which copy this field value\n        this._wbsCode = value;\n    }\n\n    fullCopy() {\n        //NOT PORTED\n\n        return this.copy.apply(this, arguments);\n    }\n\n    intersects(timeSpan) {\n        return this.intersectsRange(timeSpan.startDate, timeSpan.endDate);\n    }\n\n    intersectsRange(start, end) {\n        const\n            myStart = this.startDate,\n            myEnd   = this.endDate;\n\n        return myStart && myEnd && DH.intersectSpans(myStart, myEnd, start, end);\n    }\n\n    /**\n     * Splits this event into two pieces at the desired position.\n     *\n     * @param {Number|String} splitPoint The duration point at which to split this event.\n     *\n     * If less then `1`, this indicates the relative position at which it will be split.\n     * 0.5 means cut it in half.\n     *\n     * If greater than `1`, this indicates the new duration in the current duration units of this event before the split.\n     *\n     * If this is a string, it will be a duration description as described in\n     * {@link Core.helper.DateHelper#function-parseDuration-static}, for example `'15 min'`\n     *\n     * @returns {Scheduler.model.TimeSpan} The newly created split section of the timespan\n     * @category Scheduling\n     */\n    split(splitPoint = 0.5) {\n        const\n            me             = this,\n            clone          = me.copy(),\n            {\n                fullDuration,\n                eventStore,\n                assignmentStore\n            }              = me,\n            oldDuration    = new Duration(fullDuration),\n            cloneDuration  = new Duration(fullDuration);\n\n        let ownNewDuration,\n            unitsChanged;\n\n        if (typeof splitPoint === 'string') {\n            ownNewDuration = new Duration(splitPoint);\n\n            // New duration specified in same time units as current duration\n            if (ownNewDuration.unit === oldDuration.unit) {\n                cloneDuration.magnitude -= ownNewDuration.magnitude;\n            }\n            // New duration is in different units, so convert clone's duration to match\n            else {\n                cloneDuration.magnitude = DH.as(ownNewDuration.unit, oldDuration) - ownNewDuration.magnitude;\n                cloneDuration.unit = ownNewDuration.unit;\n                unitsChanged = true;\n            }\n        }\n        else {\n            ownNewDuration = new Duration(splitPoint > 1 ? splitPoint : me.duration * splitPoint, me.durationUnit);\n            cloneDuration.magnitude -= ownNewDuration.magnitude;\n        }\n\n        clone.startDate = DH.add(me.startDate, ownNewDuration.magnitude, ownNewDuration.unit);\n\n        if (unitsChanged) {\n            clone.fullDuration = cloneDuration;\n            me.fullDuration = ownNewDuration;\n        }\n        else {\n            clone.duration = cloneDuration.magnitude;\n            me.duration = ownNewDuration.magnitude;\n        }\n\n        if (eventStore) {\n            eventStore.add(clone);\n\n            if (assignmentStore && !eventStore.usesSingleAssignment) {\n                assignmentStore.add(\n                    me.assignments.map(assignment => {\n                        const clonedData = Object.assign({}, assignment.data, {\n                            eventId  : clone.id,\n                            // From engine\n                            event    : null,\n                            resource : null\n                        });\n                        delete clonedData.id;\n\n                        return clonedData;\n                    })\n                );\n            }\n        }\n\n        return clone;\n    }\n\n    toICSString(icsEventConfig = {}) {\n        if (!this.isScheduled) {\n            return '';\n        }\n\n        const\n            {\n                startDate,\n                endDate\n            }         = this,\n            // To allow testing using a fixed timestamp value\n            timestamp = icsEventConfig.DTSTAMP || DH.format(new Date(), 'uu');\n\n        delete icsEventConfig.DTSTAMP;\n\n        let startEnd = {};\n\n        if (this.allDay) {\n            startEnd = {\n                'DTSTART;VALUE=DATE' : DH.format(startDate, 'u'),\n                'DTEND;VALUE=DATE'   : DH.format(endDate, 'u')\n            };\n        }\n        else {\n            startEnd = {\n                DTSTART : DH.format(startDate, 'uu'),\n                DTEND   : DH.format(endDate, 'uu')\n            };\n        }\n\n        const\n            version       = (VersionHelper.scheduler && VersionHelper.getVersion('scheduler')) || (VersionHelper.calendar && VersionHelper.getVersion('calendar')) || '',\n            icsWrapConfig = {\n                BEGIN    : 'VCALENDAR',\n                VERSION  : '2.0',\n                CALSCALE : 'GREGORIAN',\n                PRODID   : `-//Bryntum AB//Bryntum Scheduler ${version} //EN`,\n                END      : 'VCALENDAR'\n            },\n            eventConfig   = {\n                BEGIN   : 'VEVENT',\n                UID     : this.id + '@bryntum.com',\n                CLASS   : 'PUBLIC',\n                SUMMARY : this.name,\n                DTSTAMP : timestamp,\n                ...startEnd,\n                ...(this.recurrenceRule ? { RRULE : this.recurrenceRule } : {}),\n                ...icsEventConfig,\n                END     : 'VEVENT'\n            },\n            icsItems      = Object.keys(icsWrapConfig).map(key => `${key}:${icsWrapConfig[key]}`),\n            eventItems    = Object.keys(eventConfig).map(key => `${key}:${eventConfig[key]}`);\n\n        // Inject event details before the closing VCALENDAR entry\n        icsItems.splice(icsItems.length - 1, 0, ...eventItems);\n\n        return icsItems.join('\\n');\n    }\n\n    /**\n     * Triggers a download of this time span in ICS format (for import in Outlook etc.)\n     *\n     * ```javascript\n     * timeSpan.downloadAsICS({\n     *      LOCATION : timeSpan.location\n     *  });\n     * ```\n     * @param {Object<String,String>} [icsEventConfig] A config object with properties to be added in to `BEGIN:VEVENT`\n     * section of the exported event.\n     * @category Misc\n     */\n    exportToICS(icsEventConfig) {\n        if (this.isScheduled) {\n            const blob = new Blob([this.toICSString(icsEventConfig)], { type : 'text/calendar' });\n\n            BrowserHelper.downloadBlob(blob, (this.name || 'Event') + '.ics');\n        }\n    }\n\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default the method defines all the event fields as editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the model has no such field.\n     */\n    isEditable(fieldName) {\n        // return undefined for unknown fields\n        return this.getFieldDefinition(fieldName) ? true : undefined;\n    }\n\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullDuration') {\n            return super.isFieldModified('duration') || super.isFieldModified('durationUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n}\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/data/mixin/ResourceStoreMixin\n */\n\n/**\n * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Scheduler.data.ResourceStore}.\n *\n * @mixin\n */\nexport default Target => class ResourceStoreMixin extends (Target || Base) {\n    static get $name() {\n        return 'ResourceStoreMixin';\n    }\n\n    get isResourceStore() {\n        return true;\n    }\n\n    /**\n     * Add resources to the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * // resource.events is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * await resourceStore.project.commitAsync();\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n\n    /**\n     * Add resources to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added resources.\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n\n    /**\n     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * // resourceStore.first.events is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * await resourceStore.project.commitAsync();\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @member {ResourceModelConfig[]} data\n     * @category Records\n     */\n\n    /**\n     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @param {ResourceModelConfig[]} data Array of ResourceModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 100,\n            storeId      : 'resources',\n            autoTree     : true\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        if (!this.modelClass.isResourceModel) {\n            throw new Error('Model for ResourceStore must subclass ResourceModel');\n        }\n    }\n\n    removeAll() {\n        const result = super.removeAll(...arguments);\n\n        // Removing all resources removes all assignments\n        result && this.assignmentStore.removeAll();\n\n        return result;\n    }\n\n    // Apply id changes also to assignments (used to be handled automatically by relations earlier, but engine does not\n    // care about ids so needed now)\n    // problems:\n    // 1. orientation/HorizontalRendering listens to assignment store changes and is trying to refresh view\n    // When we update resource id on assignment, listener will be invoked and view will try to refresh. And it will\n    // fail, because row is not updated yet. Flag is raised on resource store to make HorizontalRendering to skip\n    // refreshing view in this particular case of resource id changing\n    onRecordIdChange({ record, oldValue, value }) {\n        super.onRecordIdChange({ record, oldValue, value });\n\n        if (record.isFieldModified('id')) {\n            this.isChangingId = true;\n\n            record.updateAssignmentResourceIds();\n\n            this.isChangingId = false;\n        }\n    }\n\n    // Cache used by VerticalRendering, reset from there\n    get allResourceRecords() {\n        return this._allResourceRecords || (this._allResourceRecords = this.getAllDataRecords());\n    }\n\n    /**\n     * Returns all resources that have no events assigned during the specified time range.\n     * @param {Date} startDate Time range start date\n     * @param {Date} endDate Time range end date\n     * @returns {Scheduler.model.ResourceModel[]} Resources without events\n     */\n    getAvailableResources({ startDate, endDate }) {\n        return this.query(resource => this.eventStore.isDateRangeAvailable(startDate, endDate, null, resource));\n    }\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/data/mixin/PartOfProject\n */\n\n/**\n * This is a mixin, included in all models and stores of the Scheduler project. It provides a common API for accessing\n * all stores of the project.\n *\n * @mixin\n */\nexport default Target => class PartOfProject extends (Target || Base) {\n\n    /**\n     * Returns the project this entity belongs to.\n     *\n     * @member {Scheduler.model.ProjectModel} project\n     * @readonly\n     * @category Project\n     */\n\n    /**\n     * Returns the event store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @readonly\n     * @category Project\n     */\n\n    /**\n     * Returns the dependency store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @readonly\n     * @category Project\n     */\n\n    /**\n     * Returns the assignment store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @readonly\n     * @category Project\n     */\n\n    /**\n     * Returns the resource store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @readonly\n     * @category Project\n     */\n\n    static get $name() {\n        return 'PartOfProject';\n    }\n};\n", "import VersionHelper from '../../../Core/helper/VersionHelper.js';\n\n/**\n * @module Scheduler/model/mixin/ResourceModelMixin\n */\n\n/**\n * Mixin that holds configuration shared between resources in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class ResourceModelMixin extends Target {\n    static get $name() {\n        return 'ResourceModelMixin';\n    }\n\n    // Flag checked by ResourceStore to make sure it uses a valid subclass\n    static get isResourceModel() {\n        return true;\n    }\n\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * This does not matter much on the resource itself, but is of importance when manipulating its references:\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // resource.assignments is not yet up to date\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // resource.assignments is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n\n    //region Fields\n\n    static get fields() {\n        return [\n            /**\n             * Unique identifier\n             * @field {String|Number} id\n             * @category Common\n             */\n\n            /**\n             * Get or set resource name\n             * @field {String} name\n             * @category Common\n             */\n            { name : 'name', type : 'string', persist : true },\n\n            /**\n             * Controls the primary color used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler.model.mixin.EventModelMixin#field-eventColor eventColor config}. Also, see\n             * Schedulers {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config}.\n             *\n             * For available standard colors, see\n             * {@link Scheduler.model.mixin.EventModelMixin#typedef-EventColor}.\n             *\n             * @field {EventColor} eventColor\n             * @category Styling\n             */\n            'eventColor',\n\n            /**\n             * Controls the style used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle eventStyle config}. See Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for available\n             * options.\n             * @field {String} eventStyle\n             * @category Styling\n             */\n            'eventStyle',\n\n            /**\n             * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * @field {String} imageUrl\n             * @category Styling\n             */\n            'imageUrl',\n\n            /**\n             * Image name relative to {@link Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath},\n             * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * Set value to `false` to disable image display.\n             * @field {String|Boolean} image\n             * @category Styling\n             */\n            'image',\n\n            /**\n             * Margin from rows edge to topmost event bar for this resource, in px.\n             * @field {Number} resourceMargin\n             * @category Layout\n             */\n            { name : 'resourceMargin', type : 'number' },\n\n            /**\n             * Margin between stacked event bars for this resource, in px.\n             * @field {Number} barMargin\n             * @category Layout\n             */\n            { name : 'barMargin', type : 'number' },\n\n            /**\n             * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.\n             *\n             * This value is used in horizontal mode to determine row height. When stacking, it is used as input for\n             * calculating the actual row height:\n             *\n             * ```javascript\n             * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)\n             * ```\n             *\n             * When packing or overlapping, it is used as the actual row height.\n             *\n             * @field {Number} rowHeight\n             * @category Layout\n             */\n\n            /**\n             * Base width of this resource, in px. If not set, the `columnWidth` specified in\n             * the Scheduler's configured {@link Scheduler.view.Scheduler#config-resourceColumns} is used.\n             *\n             * This value is used in vertical mode to determine column width.\n             *\n             * @field {Number} columnWidth\n             * @category Layout\n             */\n\n            /**\n             * Specify this to use a resource specific event layout in horizontal mode, see\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} for options.\n             *\n             * When unset (the default) Schedulers setting is used.\n             *\n             * @field {'stack'|'pack'|'mixed'|'none'} eventLayout\n             * @category Layout\n             */\n            'eventLayout'\n        ];\n    }\n\n    //endregion\n\n    //region Id change\n\n    updateAssignmentResourceIds() {\n        this.assigned.forEach(assignment => {\n            assignment.resourceId = this.id;\n        });\n    }\n\n    syncId(value) {\n        super.syncId(value);\n\n        this.updateAssignmentResourceIds();\n    }\n\n    //endregion\n\n    //region Getters\n\n    // Documented in Scheduler.model.ResourceModel, SchedulerPro.model.ResourceModel, Gantt.model.ResourceModel\n    get events() {\n        return this.assignments.reduce((events, assignment) => {\n            if (assignment.event) {\n                events.push(assignment.event);\n            }\n\n            return events;\n        }, []);\n    }\n\n    /**\n     * Returns all assignments for the resource\n     *\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Common\n     */\n    get assignments() {\n        return this.assigned ? [...this.assigned] : [];\n    }\n\n    set assignments(assignments) {\n        // Engine does not allow assigning to `assigned`, handle it here\n        assignments.forEach(assignment => {\n            assignment.resource = this;\n        });\n    }\n\n    /**\n     * Returns an array of events, associated with this resource\n     *\n     * @deprecated 5.3.6 Use the events property instead\n     *\n     * @returns {Scheduler.model.EventModel[]}\n     */\n    getEvents() {\n        VersionHelper.deprecate('scheduler', '6.0.0', 'getEvents() is deprecated, use the events property instead');\n        return this.events;\n    }\n\n    /**\n     * Returns `true` if the resource can be persisted.\n     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered\n     * persistable if its parent node is persistable.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        return super.isPersistable && (!this.parent || this.parent.isPersistable);\n    }\n\n    //endregion\n\n    /**\n     * Unassigns this Resource from all its Events\n     */\n    unassignAll() {\n        this.assignments && this.assignmentStore.remove(this.assignments);\n    }\n\n    /**\n     * Returns the initials (first letter of the first & last space-separated word in the name) or an empty string\n     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation\n     *\n     * @property {String}\n     * @readonly\n     * @category Common\n     */\n    get initials() {\n        const\n            { name = '' } = this;\n\n        if (!name) {\n            return '';\n        }\n\n        const names         = name.split(' '),\n            firstInitial  = names[0][0],\n            lastInitial   = (names.length > 1 ? names[names.length - 1][0] : '');\n\n        return firstInitial + lastInitial;\n    }\n\n    isWorkingTime(date) {\n        const calendar = (this.effectiveCalendar || this.project?.calendar);\n\n        return !calendar || calendar.isWorkingTime?.(date);\n    }\n};\n", "import GridRowModel from '../../Grid/data/GridRowModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport ResourceModelMixin from './mixin/ResourceModelMixin.js';\n/* <remove-on-release> */\nimport { BaseResourceMixin } from '../../Engine/quark/model/scheduler_basic/BaseResourceMixin.js';\n/* </remove-on-release> */\nimport { CoreResourceMixin } from '../../Engine/quark/model/scheduler_core/CoreResourceMixin.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? BaseResourceMixin : /* </remove-on-release> */CoreResourceMixin;\n\n/**\n * @module Scheduler/model/ResourceModel\n */\n\n/**\n * This class represent a single Resource in scheduler, usually added to a {@link Scheduler.data.ResourceStore}.\n *\n * It is a subclass of  {@link Core.data.Model}. Please refer to the documentation for that class to become familiar\n * with the base interface of the resource.\n *\n * ## Fields and references\n *\n * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\n * your resources then you should subclass this class:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *       // \"id\" and \"name\" fields are already provided by the superclass\n *       { name: 'company', type : 'string' }\n *     ];\n *   }\n * });\n * ```\n *\n * If you want to use other names in your data for the id and name fields you can configure them as seen below:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *        { name: 'name', dataSource: 'userName' }\n *     ];\n *   },\n * });\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `{@link #property-assignments}` - The linked assignment records\n * - `{@link #property-events}` - The linked (through assignments) event records\n *\n * ## Async resolving of references\n *\n * As described above, a resource has links to assignments and events. These references are populated async, using the\n * calculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\n * cannot be used immediately after assignment modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // resource.assignments is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // resource.assignments is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // resource.assignments is up to date\n * ```\n *\n * @extends Grid/data/GridRowModel\n * @mixes Scheduler/model/mixin/ResourceModelMixin\n */\nexport default class ResourceModel extends ResourceModelMixin(PartOfProject(EngineMixin.derive(GridRowModel))) {\n    /**\n     * Get associated events\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @readonly\n     * @category Common\n     */\n\n    static $name = 'ResourceModel';\n\n}\n\nResourceModel.exposeProperties();\n", "import ResourceStoreMixin from './mixin/ResourceStoreMixin.js';\nimport ResourceModel from '../model/ResourceModel.js';\nimport AjaxStore from '../../Core/data/AjaxStore.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\n/* <remove-on-release> */\nimport { ChronoResourceStoreMixin } from '../../Engine/quark/store/ChronoResourceStoreMixin.js';\n/* </remove-on-release> */\nimport { CoreResourceStoreMixin } from '../../Engine/quark/store/CoreResourceStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? PartOfBaseProject(ChronoResourceStoreMixin.derive(AjaxStore)) : /* </remove-on-release> */PartOfProject(CoreResourceStoreMixin.derive(AjaxStore));\n\n/**\n * @module Scheduler/data/ResourceStore\n */\n\n/**\n * A store holding all the {@link Scheduler.model.ResourceModel resources} to be rendered into a\n * {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.ResourceModel}.\n *\n * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * resourceStore.data = [{ id }, ...];\n *\n * // references (assignments, events) not resolved yet\n *\n * await resourceStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await resourceStore.loadDataAsync([{ id }, ...]);\n *\n * // references (assignments, events) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/ResourceStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceStore extends ResourceStoreMixin(EngineMixin) {\n\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel\n        };\n    }\n\n}\n", "import Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n\n/**\n * @module Scheduler/data/mixin/EventStoreMixin\n */\n\n/**\n * This is a mixin, containing functionality related to managing events.\n *\n * It is consumed by the regular {@link Scheduler.data.EventStore} class and the Scheduler Pro's `EventStore` class.\n *\n * @mixin\n */\nexport default Target => class EventStoreMixin extends (Target || Base) {\n    static $name = 'EventStoreMixin';\n\n    /**\n     * Add events to the store.\n     *\n     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * // endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * await eventStore.project.commitAsync();\n     * // endDate is calculated\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n\n    /**\n     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on\n     * the added events.\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n\n    /**\n     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * // eventStore.first.endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * await eventStore.project.commitAsync();\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @member {EventModelConfig[]} data\n     * @category Records\n     */\n\n    /**\n     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @param {EventModelConfig[]} data Array of EventModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n\n    /**\n     * Class used to represent records. Defaults to class EventModel.\n     * @member {Scheduler.model.EventModel} modelClass\n     * @typings {typeof EventModel}\n     * @category Records\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 100,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200,\n\n            storeId : 'events',\n\n            /**\n             * Configure with `true` to also remove the event when removing the last assignment from the linked\n             * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            removeUnassignedEvent : true,\n\n            /**\n             * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.\n             * If not provided, the mode will be inferred from\n             *\n             * 1. presence of an assignment store (i.e. multi-assignment)\n             * 2. presence of `resourceId` in the event store data (i.e. single assignment mode)\n             * @config {Boolean}\n             * @category Common\n             */\n            singleAssignment : null\n        };\n    }\n\n    //region Init & destroy\n\n    construct(config) {\n        super.construct(config);\n\n        this.autoTree = true;\n\n        if (this.singleAssignment) {\n            this.usesSingleAssignment = true;\n        }\n\n        if (!this.modelClass.isEventModel) {\n            throw new Error('The model for the EventStore must subclass EventModel');\n        }\n    }\n\n    //endregion\n\n    //region Events records, iteration etc.\n\n    set filtersFunction(filtersFunction) {\n        super.filtersFunction = filtersFunction;\n    }\n\n    get filtersFunction() {\n        // Generate the real filterFn.\n        const result = super.filtersFunction;\n\n        // We always filter *in* records which are being created by the UI.\n        if (result && result !== FunctionHelper.returnTrue) {\n            return r => r.isCreating || result(r);\n        }\n        return result;\n    }\n\n    /**\n     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days\n     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.\n     *\n     * Example:\n     *\n     * ```javascript\n     *  eventCounts = eventStore.getEventCounts({\n     *      startDate : scheduler.timeAxis.startDate,\n     *      endDate   : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @category Events\n     */\n    getEventCounts(options) {\n        const\n            me     = this,\n            {\n                filtersFunction,\n                added\n            }      = me,\n            // Must use getEvents so that the loadDateRange event is triggered.\n            result = me.getEvents({\n                ...options,\n                storeFilterFn : me.isFiltered ? (me.reapplyFilterOnAdd ? filtersFunction : eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord)) : null,\n                dateMap       : options.dateMap || true\n            });\n\n        result.forEach((value, key) => result.set(key, value.length));\n        return result;\n    }\n\n    /**\n     * Calls the supplied iterator function once for every scheduled event, providing these arguments\n     * - event : the event record\n     * - startDate : the event start date\n     * - endDate : the event end date\n     *\n     * Returning false cancels the iteration.\n     *\n     * @param {Function} fn iterator function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @category Events\n     */\n    forEachScheduledEvent(fn, thisObj = this) {\n        this.forEach(event => {\n            const { startDate, endDate } = event;\n\n            if (startDate && endDate) {\n                return fn.call(thisObj, event, startDate, endDate);\n            }\n        });\n    }\n\n    /**\n     * Returns an object defining the earliest start date and the latest end date of all the events in the store.\n     *\n     * @returns {Object} An object with 'startDate' and 'endDate' properties (or null values if data is missing).\n     * @category Events\n     */\n    getTotalTimeSpan() {\n        let earliest = new Date(9999, 0, 1),\n            latest   = new Date(0);\n\n        this.forEach(event => {\n            if (event.startDate) {\n                earliest = DateHelper.min(event.startDate, earliest);\n            }\n            if (event.endDate) {\n                latest = DateHelper.max(event.endDate, latest);\n            }\n        });\n\n        // <remove-on-release>\n        // TODO: this will fail in programs designed to work with events in the past (after Jan 1, 1970)\n        // </remove-on-release>\n        earliest = earliest < new Date(9999, 0, 1) ? earliest : null;\n        latest   = latest > new Date(0) ? latest : null;\n\n        // keep last calculated value to be able to track total timespan changes\n        return (this.lastTotalTimeSpan = {\n            startDate : earliest || null,\n            endDate   : latest || earliest || null\n        });\n    }\n\n    /**\n     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you\n     * need custom logic.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Boolean}\n     * @category Events\n     */\n    isEventPersistable(event) {\n        return event.isPersistable;\n    }\n\n    //endregion\n\n    //region Resource\n\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in TaskStore.js\n\n        // Cannot assign anything to generated parents\n        if (resource.data.generatedParent) {\n            return false;\n        }\n\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n\n        return !Array.from(allEvents).some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n\n    /**\n     * Filters the events associated with a resource, based on the function provided. An array will be returned for those\n     * events where the passed function returns true.\n     * @param {Scheduler.model.ResourceModel} resource\n     * @param {Function} fn The function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @returns {Scheduler.model.EventModel[]} the events in the time span\n     * @private\n     * @category Resource\n     */\n    filterEventsForResource(resource, fn, thisObj = this) {\n        return resource.getEvents(this).filter(fn.bind(thisObj));\n    }\n\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Resource\n     */\n    getResourcesForEvent(event) {\n        // If we are sent an occurrence, use its parent\n        if (event.isOccurrence) {\n            event = event.recurringTimeSpan;\n        }\n\n        return this.assignmentStore.getResourcesForEvent(event);\n    }\n\n    /**\n     * Returns all events assigned to a resource.\n     * *NOTE:* this does not include occurrences of recurring events. Use the\n     * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} API to include occurrences of recurring events.\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource or resource id.\n     * @returns {Scheduler.model.EventModel[]}\n     * @category Resource\n     */\n    getEventsForResource(resource) {\n        return this.assignmentStore.getEventsForResource(resource);\n    }\n\n    //endregion\n\n    //region Assignment\n\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForEvent(event) {\n        return this.assignmentStore.getAssignmentsForEvent(event) || [];\n    }\n\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForResource(resource) {\n        return this.assignmentStore.getAssignmentsForResource(resource) || [];\n    }\n\n    /**\n     * Creates and adds assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource The resource(s) to assign to the event\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assignment\n     */\n    assignEventToResource(event, resource, removeExistingAssignments = false) {\n        return this.assignmentStore.assignEventToResource(event, resource, undefined, removeExistingAssignments);\n    }\n\n    /**\n     * Removes assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    unassignEventFromResource(event, resource) {\n        this.assignmentStore.unassignEventFromResource(event, resource);\n    }\n\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.EventModel}    event    An event or id of the event to reassign\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} oldResource A resource or id to unassign from\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} newResource A resource or id to assign to\n     * @category Assignment\n     */\n    reassignEventFromResourceToResource(event, oldResource, newResource) {\n        const\n            me            = this,\n            newResourceId = Model.asId(newResource),\n            assignment    = me.assignmentStore.getAssignmentForEventAndResource(event, oldResource);\n\n        if (assignment) {\n            assignment.resourceId = newResourceId;\n        }\n        else {\n            me.assignmentStore.assignEventToResource(event, newResource);\n        }\n\n    }\n\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Boolean}\n     * @category Assignment\n     */\n    isEventAssignedToResource(event, resource) {\n        return this.assignmentStore.isEventAssignedToResource(event, resource);\n    }\n\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @category Assignment\n     */\n    removeAssignmentsForEvent(event) {\n        this.assignmentStore.removeAssignmentsForEvent(event);\n    }\n\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    removeAssignmentsForResource(resource) {\n        this.assignmentStore.removeAssignmentsForResource(resource);\n    }\n\n    //endregion\n\n    /**\n     * Appends a new record to the store\n     * @param {Scheduler.model.EventModel} record The record to append to the store\n     * @category CRUD\n     */\n    append(record) {\n        return this.add(record);\n    }\n\n    //region Project\n\n    get project() {\n        return super.project;\n    }\n\n    set project(project) {\n        super.project = project;\n\n        this.detachListeners('project');\n\n        if (project) {\n            // Project already has AssignmentStore instance? Attach to it.\n            if (project.assignmentStore?.isAssignmentStore) {\n                this.attachToAssignmentStore(project.assignmentStore);\n            }\n\n            // Accessing assignmentStore would trigger `assignmentStoreChange` event on the project, so we set up\n            // the listener after\n            project.ion({\n                name                  : 'project',\n                assignmentStoreChange : 'onProjectAssignmentStoreChange',\n                thisObj               : this,\n                prio                  : 200 // Before UI updates\n            });\n        }\n    }\n\n    //endregion\n\n    //region Single assignment\n\n    get usesSingleAssignment() {\n        if (this.isChained) {\n            return this.masterStore.usesSingleAssignment;\n        }\n        return this._usesSingleAssignment;\n    }\n\n    set usesSingleAssignment(value) {\n        this._usesSingleAssignment = value;\n\n        const { assignmentStore } = this;\n        // Use cheaper id generation for single assignment mode (no UUID needed)\n        if (assignmentStore?.isStore && !assignmentStore.hasGenerateIdOverride) {\n            // Normal fn on purpose, scope is AssignmentModel\n            assignmentStore.modelClass.generateId = function() {\n                if (this.singleAssignmentIdCounter == null) {\n                    this.singleAssignmentIdCounter = 0;\n                }\n                return `a-${++this.singleAssignmentIdCounter}`;\n            };\n            assignmentStore.hasGenerateIdOverride = true;\n        }\n    }\n\n    processRecords(eventRecords) {\n        const\n            { assignmentStore } = this,\n            assignmentsToAdd = [];\n\n        // Same as on `joinRecordsToStore`, when adding a number of event records CoreEventMixin#joinProject method\n        // will clear/rebuild cache in a loop. We raise this flag to skip invalidating assignment store indices for the time\n        // we are joining records to the store. When they're added and indices are read, we will invalidate them.\n        if (assignmentStore) {\n            assignmentStore.skipInvalidateIndices = true;\n        }\n\n        eventRecords = super.processRecords(eventRecords, assignmentStore && !this.stm?.isRestoring && (eventRecord => {\n            // AssignmentStore found, add an assignment to it if this is not a dataset operation\n            const resourceId = eventRecord.get('resourceId');\n\n            if (!eventRecord.reassignedFromReplace && resourceId != null) {\n                // Check if the event is already assigned to the resource, though it's not in the event store.\n                // It could happen when you remove an event, so both event and assignment records are removed,\n                // then you \"undo\" the action and the assignment is restored before the event is restored.\n                if (!assignmentStore.includesAssignment(eventRecord.id, resourceId)) {\n                    // Cannot use `event.assign(resourceId)` since event is not part of store yet\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignmentsToAdd.push({\n                        id      : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId : eventRecord.id\n                    });\n                }\n            }\n\n            // clear flag\n            eventRecord.reassignedFromReplace = false;\n        }) || undefined);\n\n        if (assignmentStore) {\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n\n            assignmentStore.add(assignmentsToAdd);\n        }\n\n        return eventRecords;\n    }\n\n    joinRecordsToStore(records) {\n        const { assignmentStore } = this;\n\n        if (assignmentStore) {\n            // When adding a number of event records CoreEventMixin#joinProject method will clear/rebuild cache in a loop.\n            // We raise this flag to skip invalidating assignment store indices for the time we are joining records to\n            // the store. When they're added and indices are read, we will invalidate them.\n            assignmentStore.skipInvalidateIndices = true;\n\n            super.joinRecordsToStore(records);\n\n            assignmentStore.storage.invalidateIndices();\n\n            assignmentStore.skipInvalidateIndices = false;\n        }\n        else {\n            super.joinRecordsToStore(records);\n        }\n    }\n\n    processRecord(eventRecord, isDataset = false) {\n        eventRecord = super.processRecord(eventRecord, isDataset);\n\n        const\n            me              = this,\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore,\n            resourceId      = eventRecord.get('resourceId'),\n            { resourceIds } = eventRecord;\n\n        if (resourceIds?.length && eventRecord.meta.skipEnforcingSingleAssignment !== false && me.modelClass.fieldMap?.resourceIds.persist) {\n            if (assignmentStore) {\n                assignmentStore.add(resourceIds\n                    .filter(resourceId => !assignmentStore.some(a => a.eventId === eventRecord.id && a.resourceId === resourceId))\n                    .map(resourceId => ({ resource : resourceId, event : eventRecord })));\n            }\n            else {\n                me.$processResourceIds = true;\n            }\n        }\n        else if (resourceId != null && !eventRecord.meta.skipEnforcingSingleAssignment) {\n            const\n                existingRecord      = me.getById(eventRecord.id),\n                isReplacing         = existingRecord && existingRecord !== eventRecord && !isDataset;\n\n            // Replacing an existing event, repoint the resource of its assignment\n            // (already repointed to the new event by engine in EventStoreMixin)\n            if (isReplacing) {\n                // Have to look assignment up on store, removed by engine in super call above\n                const assignmentSet = assignmentStore.storage.findItem('eventId', eventRecord.id);\n                if (assignmentSet?.size) {\n                    const assignment = assignmentSet.values().next().value;\n                    assignment.resource = resourceId;\n                    eventRecord.reassignedFromReplace = true;\n                }\n            }\n            // No AssignmentStore assigned yet, need to process when that happens. Or if it is a dataset operation,\n            // processing will happen at the end of it to not add individual assignment (bad for performance)\n            else {\n                me.$processResourceIds = true;\n            }\n\n            // Flag that we have been loaded using resourceId, checked by CrudManager to exclude the internal\n            // AssignmentStore from sync\n            me.usesSingleAssignment = true;\n        }\n\n        return eventRecord;\n    }\n\n    processResourceIds() {\n        const\n            me              = this,\n            // When used in a standalone CrudManager, there is no direct link to the assignment store\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore;\n\n        if (me.$processResourceIds && assignmentStore?.isAssignmentStore && !(me.project?.isSharingAssignmentStore && me.isChained)) {\n            const assignments = [];\n\n            // resourceIds used during initialization, convert into assignments\n            me.forEach(eventRecord => {\n                const { resourceId, resourceIds, id : eventId } = eventRecord;\n                if (resourceId != null) {\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignments.push({\n                        id : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId\n                    });\n                }\n                else if (resourceIds?.length) {\n                    resourceIds.forEach(rId => {\n                        assignments.push({\n                            id         : assignmentStore.modelClass.generateId(''),\n                            resourceId : rId,\n                            eventId\n                        });\n                    });\n                }\n            });\n\n            // Disable as much as possible, since we are in full control of this store when using single assignment mode\n            assignmentStore.useRawData = {\n                disableDefaultValue     : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true\n            };\n            // Flag that throws in AssignmentStore if data is loaded some other way when using single assignment\n            assignmentStore.usesSingleAssignment = false;\n            // These assignments all use generated ids, and are not meant to be searialized anyway so bypass check\n            assignmentStore.verifyNoGeneratedIds = false;\n\n            assignmentStore.data = assignments;\n\n            assignmentStore.usesSingleAssignment = true;\n\n            me.$processResourceIds = false;\n        }\n    }\n\n    loadData() {\n        super.loadData(...arguments);\n\n        this.processResourceIds();\n    }\n\n    // Optionally remove unassigned events\n    onBeforeRemoveAssignment({ records }) {\n        const me = this;\n\n        if (\n            me.removeUnassignedEvent && !me.isRemoving && !me.isSettingData &&\n            !me.stm?.isRestoring && !me.usesSingleAssignment &&\n            // Do not remove unassigned events when syncing data, new assignments etc. might be synced afterwards\n            !me.assignmentStore.isSyncingDataOnLoad && !me.resourceStore.isSyncingDataOnLoad\n        ) {\n            const toRemove = new Set();\n            // Collect all events that are unassigned after the remove\n            records.forEach(assignmentRecord => {\n                const { event } = assignmentRecord;\n                // Assignment might not have an event or the event might already be removed\n                if (event && !event.isRemoved && event.assignments.every(a => records.includes(a))) {\n                    toRemove.add(event);\n                }\n            });\n\n            // And remove them\n            if (toRemove.size) {\n                me.remove([...toRemove]);\n            }\n        }\n    }\n\n    onProjectAssignmentStoreChange({ store }) {\n        this.attachToAssignmentStore(store);\n    }\n\n    attachToAssignmentStore(assignmentStore) {\n        const me = this;\n\n        me.detachListeners('assignmentStore');\n\n        if (assignmentStore) {\n            me.processResourceIds();\n\n            assignmentStore.ion({\n                name : 'assignmentStore',\n\n                // Adding an assignment in single assignment mode should set events resourceId if needed,\n                // otherwise it should set events resourceIds (if persistable)\n\n                addPreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n                                if (event?.isEvent && event.resourceId !== assignment.resourceId) {\n                                    event.meta.isAssigning = true;\n                                    event.set('resourceId', assignment.resourceId);\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                        else if (me.modelClass.fieldMap?.resourceIds.persist) {\n                            records.forEach(assignment => {\n                                const { event } = assignment;\n\n                                if (event?.isEvent) {\n                                    event.meta.isAssigning = true;\n                                    const resourceIds = event.resourceIds ?? [];\n                                    if (!resourceIds.includes(assignment.resourceId)) {\n                                        event.resourceIds = [...resourceIds, assignment.resourceId];\n                                    }\n\n                                    event.meta.isAssigning = false;\n                                }\n                            });\n                        }\n                    }\n                },\n\n                // Called both for remove and removeAll\n                beforeRemove : 'onBeforeRemoveAssignment',\n\n                // Removing an assignment in single assignment mode should set events resourceId to null,\n                // otherwise it should set events resourceIds to an empty array\n                removePreCommit({ records }) {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            records.forEach(assignment => {\n                                // With engine link to event is already broken when we get here, hence the lookup\n                                me.getById(assignment.eventId)?.set('resourceId', null);\n                            });\n                        }\n                        else if (me.modelClass.fieldMap?.resourceIds.persist) {\n                            records.forEach(({ event, resourceId }) => {\n                                const\n                                    resourceIds     = event.resourceIds.slice(),\n                                    indexToRemove   = resourceIds?.indexOf(resourceId);\n\n                                if (indexToRemove >= 0) {\n                                    resourceIds.splice(indexToRemove, 1);\n                                    event.resourceIds = resourceIds;\n                                }\n                            });\n                        }\n                    }\n                },\n\n                removeAllPreCommit() {\n                    if (!me.isSettingData && !me.isAssigning) {\n                        if (me.usesSingleAssignment) {\n                            me.allRecords.forEach(eventRecord => eventRecord.set('resourceId', null));\n                        }\n                        else if (me.modelClass.fieldMap?.resourceIds.persist) {\n                            me.allRecords.forEach(eventRecord => {\n                                eventRecord.resourceIds = [];\n                            });\n                        }\n                    }\n                },\n\n                // Keep events resourceId and resourceIds in sync with assignment on changes\n                update({ record, changes }) {\n                    if ('resourceId' in changes) {\n                        const { event } = record;\n\n                        if (me.usesSingleAssignment) {\n                            event.meta.isAssigning = true;\n                            event.set('resourceId', changes.resourceId.value);\n                            event.meta.isAssigning = false;\n                        }\n                        else if (me.modelClass.fieldMap?.resourceIds.persist) {\n                            event.meta.isAssigning = true;\n                            const\n                                resourceIds     = event.resourceIds.slice(),\n                                indexToRemove   = resourceIds?.indexOf(changes.resourceId.oldValue);\n\n                            if (indexToRemove >= 0) {\n                                resourceIds.splice(indexToRemove, 1);\n                            }\n\n                            if (!resourceIds?.includes(changes.resourceId.value)) {\n                                resourceIds.push(changes.resourceId.value);\n                                event.resourceIds = resourceIds;\n                            }\n                            event.meta.isAssigning = false;\n                        }\n                    }\n                },\n\n                // Keep events resourceIds in sync with assignment on dataset loading\n                change({ action, records }) {\n                    if (action === 'dataset' && me.modelClass.fieldMap?.resourceIds.persist) {\n                        records.forEach(({ event, resourceId }) => {\n                            const resourceIds = event.resourceIds ?? [];\n\n                            if (!resourceIds.includes(resourceId)) {\n                                resourceIds.push(resourceId);\n                                event.meta.isAssigning = true;\n                                event.setData('resourceIds', resourceIds);\n                                event.meta.isAssigning = false;\n                            }\n                        });\n                    }\n                },\n\n                thisObj : me\n            });\n        }\n    }\n\n    set data(data) {\n        this.isSettingData = true;\n\n        // When using single assignment, remove all assignments when loading a new set of events.\n        // Don't do it when filling a chained store, assignments are for the master store\n        if (this.usesSingleAssignment && !this.syncDataOnLoad && !this.isChained) {\n            this.assignmentStore.removeAll(true);\n        }\n\n        super.data = data;\n\n        this.isSettingData = false;\n    }\n\n    // Override trigger to decorate update/change events with a flag if resourceId was the only thing changed, in which\n    // case the change most likely can be ignored since the assignment will also change\n    trigger(eventName, params) {\n        const { changes } = params || {};\n\n        // https://github.com/bryntum/support/issues/6610\n        // test: SchedulerPro/tests/data/UndoRedo.t.js, \"Should refresh the view after undoing the event copy-paste\"\n        // can not ignore this event when stm is restoring, because of the edge case in that ticket\n        if (changes && 'resourceId' in changes && Object.keys(changes).length === 1 && !this.stm?.isRestoring) {\n            params.isAssign = true;\n        }\n\n        return super.trigger(...arguments);\n    }\n\n    remove(records, ...args) {\n        const result = super.remove(records, ...args);\n\n        // Make sure assignment is removed with event when using single assignment\n        if (result.length && this.usesSingleAssignment) {\n            for (const eventRecord of result) {\n                if (!eventRecord.isOccurrence) {\n                    (this.assignmentStore || this.crudManager?.assignmentStore)?.remove(eventRecord.assignments, true);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    //endregion\n};\n", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n\n/**\n * @module Scheduler/data/mixin/GetEventsMixin\n */\n\nconst\n    returnTrue   = () => true,\n    notRecurring = event => !event.isRecurring;\n\n/**\n * Mixing containing functionality for retrieving a range of events, mainly used during rendering.\n *\n * Consumed by EventStore in Calendar, Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n */\nexport default Target => class GetEventsMixin extends Target {\n\n    static $name = 'GetEventsMixin';\n\n    /**\n     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.\n     *\n     * By default, for any date, this includes any event which *intersects* that date.\n     *\n     * To only include events that are fully contained *within* the date range, pass the `allowPartial`\n     * option as `false`.\n     *\n     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If\n     * that is not required, pass the `includeOccurrences` option as `false`. **Note that if `includeOccurrences` is\n     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs\n     * to be generated and returned.**\n     *\n     * Example:\n     *\n     * ```javascript\n     *  visibleEvents = eventStore.getEvents({\n     *      resourceRecord : myResource,\n     *      startDate      : scheduler.timeAxis.startDate,\n     *      endDate        : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} [options.date] If only one date is required, pass this option instead of the\n     * `startDate` and `endDate` options.\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @param {Scheduler.model.ResourceModel} [options.resourceRecord] Pass a resource to only return events assigned to\n     *   this resource. Not supported when using the `dateMap` option (see below)\n     * @param {Function} [options.filter] A function to filter out events which are not required.\n     * @param {Boolean} [options.ignoreFilters] By default, store filters are honoured. Pass this\n     * as `true` to include filtered out events.\n     * @param {Boolean} [options.includeOccurrences=true] Occurrences of recurring events are included by default.\n     * @param {Boolean} [options.allowPartial=true] Events which start before or after the range, but *intersect* the\n     *   range are included by default.\n     * @param {Boolean} [options.startOnly] Pass `true` to only include events which *start on* each date in the range.\n     * @param {Boolean} [options.onlyAssigned] Pass `true` to only include events that are assigned to a resource\n     * @param {Boolean|Map} [options.dateMap] Populates the passed `Map`, or if passed as `true`, creates and\n     * returns a new `Map`. The keys are `YYYY-MM-DD` date strings and the entries are arrays of\n     * {@link Scheduler.model.EventModel EventModel}s.\n     * @returns {Scheduler.model.EventModel[]|Map} Events which match the passed configuration.\n     * @category Events\n     */\n    getEvents({\n        filter,\n        date,\n        startDate,                  // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences,         // Interpolate occurrences into the returned event set\n        allowPartial,               // Include events which *intersect* the date range\n        onlyAssigned = false,       // Only include events that are assigned to a resource\n        dateMap = false,            // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me                = this,\n            options           = arguments[0],\n            {\n                lastDateRange,\n                added,\n                filtersFunction\n            } = me,\n            passedFilter      = filter;\n\n        // Add filtering for only assigned events if requested.\n        if (onlyAssigned) {\n            options.filter = passedFilter ? e => passedFilter(e) && e.resources.length : e => e.resources.length;\n        }\n\n        // Note that we cannot use defaulting in the argument block because we pass\n        // the incoming options object down into implementations.\n        if (!('startDate' in options)) {\n            startDate = options.startDate = date;\n        }\n        if (!('includeOccurrences' in options)) {\n            includeOccurrences = options.includeOccurrences = true;\n        }\n        if (!('allowPartial' in options)) {\n            allowPartial = options.allowPartial = !startOnly;\n        }\n\n        // We can't use me.filtersFunction if reapplyFilterOnAdd is false because there may be newly\n        // added events which may not be subject to the filter. Records which are still in\n        // the added bag must be tested for presence using indexOf so as to be always in sync\n        // with the store being refiltered. Parens help readability.\n        // Don't use the store's filtering function if we were asked to ignore filters.\n        // eslint-disable-next-line no-extra-parens\n        options.storeFilterFn = me.isFiltered && !options.ignoreFilters ? (me.reapplyFilterOnAdd ? filtersFunction : (eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord))) : null;\n\n        // Default to a one day range if only startDate passed\n        if (!endDate) {\n            if (startDate) {\n                endDate = options.endDate = DateHelper.clearTime(startDate);\n                endDate.setDate(endDate.getDate() + 1);\n            }\n            // If no dates passed, the dateFilter will include all.\n            else {\n                // We need to know what occurrences to generate.\n                if (includeOccurrences) {\n                    throw new Error('getEvents MUST be passed startDate and endDate if recurring occurrences are requested');\n                }\n                options.dateFilter = returnTrue;\n            }\n        }\n\n        if (!options.dateFilter) {\n            // Must start in the date range\n            if (startOnly) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate;\n\n                    return eventStartDate && !(DateHelper.clearTime(eventStartDate) - startDate);\n                };\n            }\n            // Any intersection with our date range\n            else if (allowPartial) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate,\n                        isMilestone    = !(eventStartDate - eventEndDate);\n\n                    return eventStartDate && (isMilestone ? DateHelper.betweenLesserEqual(eventStartDate, startDate, endDate) : DateHelper.intersectSpans(eventStartDate, eventEndDate, startDate, endDate));\n                };\n            }\n            // Must be wholly contained with the our range\n            else {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate;\n\n                    return eventStartDate && eventStartDate >= startDate && eventEndDate <= endDate;\n                };\n            }\n        }\n\n        const newDateRange = {\n            startDate,\n            endDate\n        };\n\n        // Ensure the listeners are present\n        me.processConfiguredListeners();\n\n        /**\n         * Fired when a range of events is requested from the {@link #function-getEvents} method.\n         *\n         * <div class=\"note\">\n         * This event fires <span style=\"font-weight:bold\">every time</span> a range of events is\n         * requested from the store.\n         * </div>\n         *\n         * An application may have one of two levels of interest in events being read from a store.<br>\n         *\n         * 1.  To be notified when <span style=\"font-weight:bold\">any</span> event block is requested regardless of what the\n         * date range is.\n         * 2.  To be notified when a <span style=\"font-weight:bold\">new date range</span> is requested.\n         *\n         * This event allows both types of application to be written. The `changed` property is\n         * set if a different date range is requested.\n         *\n         * ```javascript\n         * new Scheduler({\n         *     eventStore : {\n         *         listeners : {\n         *             loadDateRange({ new : { startDate, endDate }, changed }) {\n         *                 // Load new data if user is requesting a different time window.\n         *                 if (changed) {\n         *                     fetch(...);\n         *                 }\n         *             }\n         *         }\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * @event loadDateRange\n         * @param {Scheduler.data.EventStore} source This EventStore\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @param {Boolean} changed `true` if the date range is different from the last time a request was made.\n         */\n        me.trigger('loadDateRange', {\n            old     : lastDateRange || {},\n            new     : Objects.clone(newDateRange),\n            changed : Boolean(!lastDateRange || (lastDateRange.startDate - newDateRange.startDate || lastDateRange.endDate - newDateRange.endDate))\n        });\n        // Dates are mutable, so we must keep our own copy.\n        me.lastDateRange = Objects.clone(newDateRange);\n\n        return dateMap ? me.getEventsAsMap(options) : me.getEventsAsArray(options);\n    }\n\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when not using dateMap.\n     * @private\n     */\n    getEventsAsArray({\n        filter,\n        date,\n        resourceRecord,\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dayTime = null,\n\n        // Injected by the getEvents master method\n        dateFilter,\n\n        storeFilterFn,\n\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me     = this,\n            events = [],\n            count  = storeFilterFn ? me.count : me.allCount;\n\n        if (count) {\n            let candidateEvents = resourceRecord ? me.getEventsForResource(resourceRecord) : null;\n\n            // If there *was* a resourceRecord, candidateEvents will already be set up using me.getEventsForResource.\n            // If no resourceRecord specified, we are gathering by date, so use the indices.\n            if (!resourceRecord) {\n                const\n                    dateIndex = me.useDayIndex(dayTime),\n                    eventSet  = new Set(),\n                    indexName = startOnly ? 'startDate' : 'date';\n\n                // Add all recurring events which started on or before our date range.\n                me.recurringEvents.forEach(e => {\n                    if (dateIndex.dayTime.startOfDay(e.startDate) <= startDate) {\n                        eventSet.add(e);\n                    }\n                });\n\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    const coincidingEvents = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date);\n\n                    coincidingEvents?.forEach(e => eventSet.add(e));\n                }\n\n                // We gathered all events which *coincide* with each date.\n                // We also added in all recurring events which started on or before our date range.\n                // All these were made unique by the Set.\n                // Return it to array form.\n                candidateEvents = [...eventSet];\n            }\n\n            // Events found from the date indices won't be filtered.\n            // On the other side, when using getEventForResource we will get all events for\n            // the resource even if the EventStore is filtered, handle this by excluding \"invisible\" events here\n            if (storeFilterFn) {\n                candidateEvents = candidateEvents.filter(storeFilterFn);\n            }\n\n            // Go through candidates.\n            // For a recurring event, and we are including recurrences, add date-qualifying occurrences.\n            // For a non-recurring event, add it if it's date-qualified.\n            for (let i = 0, { length } = candidateEvents; i < length; i++) {\n                const e = candidateEvents[i];\n\n                // For recurring events, add date-qualifying occurrences, not the base\n                if (includeOccurrences && e.isRecurring) {\n                    events.push.apply(events, e.getOccurrencesForDateRange(startDate, endDate).filter(dateFilter));\n                }\n                // For ordinary events, add if it's date-qualified\n                else if (dateFilter(e)) {\n                    events.push(e);\n                }\n            }\n        }\n\n        return filter ? events.filter(filter) : events;\n    }\n\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when using dateMap.\n     * @private\n     */\n    getEventsAsMap({\n        filter : passedFilter,\n        date,\n        resourceRecord,             // Not supported yet. Will add if ever requested.\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dateMap,                    // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n\n        storeFilterFn,\n\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const me = this;\n\n        // Convert `true` to a Map.\n        if (dateMap?.clear) {\n            dateMap.clear();\n        }\n        else {\n            dateMap = new Map();\n        }\n\n        if (me.count) {\n            const\n                dateIndex       = me.useDayIndex(dayTime),\n                indexName       = startOnly ? 'startDate' : 'date',\n                recurringEvents = [],\n                filter          = e => (!passedFilter || passedFilter(e)) && (!storeFilterFn || storeFilterFn(e)),\n                baseEventFilter = e => notRecurring(e) && filter(e);\n\n            dayTime = dateIndex.dayTime;  // dayTime=null becomes DayTime instance for midnight\n\n            // We can't yet do this for just a resource.\n            if (resourceRecord) {\n                throw new Error('Querying for events for a resource and returning a date-keyed Map is not supported');\n            }\n            else {\n                // Add all recurring events which started before the end of our date range.\n                // There are none in Gantt projects\n                me.recurringEvents?.forEach(e => {\n                    if (dayTime.startOfDay(e.startDate) < endDate) {\n                        recurringEvents.push(e);\n                    }\n                });\n\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    let [coincidingEvents, key] = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date, true);\n\n                    // The index entry may be there, but it could be empty.\n                    if (coincidingEvents?.size) {\n                        // Convert Set which index holds into an Array.\n                        // A recurring event doesn't go into the Map, its occurrences do.\n                        // Then filter by the passed filter and this Store's filter function\n                        // because events found from the date indices won't be filtered.\n                        coincidingEvents = [...coincidingEvents].filter(baseEventFilter);\n\n                        // Only create the entry for the day if there are events found\n                        if (coincidingEvents.length) {\n                            (dateMap.get(key) || (dateMap.set(key, []).get(key))).push(...coincidingEvents);\n                        }\n                    }\n                }\n            }\n\n            // Go through matching recurring events.\n            for (let i = 0, { length } = recurringEvents; i < length; i++) {\n                const\n                    e = recurringEvents[i],\n                    // For each recurring event, add occurrences if we are including occurrences else, add the base.\n                    // Then filter by the passed filter and this Store's filter function\n                    // because events found from the date indices won't be filtered.\n                    occurrences = (includeOccurrences ? e.getOccurrencesForDateRange(startDate, endDate) : [e]).filter(filter),\n                    lastDate    = DateHelper.add(endDate, 1, 'day');\n\n                // Add occurrences to dateMap\n                for (let bucket, i = 0, { length } = occurrences; i < length; i++) {\n                    const\n                        occurrence = occurrences[i],\n                        date = dayTime.startOfDay(occurrence.startDate),\n                        indexName = getDateIndex ? getDateIndex(date) : (startOnly ? 'startDate' : 'date'),\n                        lastIntersectingDate = (indexName === 'startDate') || !occurrence.durationMS\n                            ? DateHelper.add(date, 1, 'day')\n                            : DateHelper.min(occurrence.endDate || DateHelper.add(occurrence.startDate, occurrence.duration, occurrence.durationUnit), lastDate);\n\n                    // Loop through covered dates, adding to dateMap if required\n                    for (; date < lastIntersectingDate; date.setDate(date.getDate() + 1)) {\n                        const key = dayTime.dateKey(date);\n\n                        (bucket = dateMap.get(key)) || dateMap.set(key, bucket = []);\n\n                        bucket.push(occurrence);\n                    }\n                }\n            }\n        }\n\n        return dateMap;\n    }\n\n};\n", "import DayTime from '../../../Core/util/DayTime.js';\n\n/**\n * @module Scheduler/data/util/EventDayIndex\n */\n\nconst\n    // Maps an index name that can be requested to its storage property on the EventDayIndex instance:\n    indexNameMap = {\n        date      : '_dateIndex',\n        startDate : '_startDateIndex'\n    },\n    indexProps         = Object.values(indexNameMap),\n    emptyArray         = Object.freeze([]),\n    { MILLIS_PER_DAY } = DayTime;\n\n/**\n * This utility class is used by event stores to index events by their day (a \"YYYY-MM-DD\" value, also known as a\n * \"date key\"). This key is produced by a {@link Core.util.DayTime} instance. If two `DayTime` instances have a common\n * `startShift`, they can share an index.\n *\n * @internal\n */\nexport default class EventDayIndex {\n    constructor(store, dayTime) {\n        /**\n         * The `DayTime` definition for this index. This is set to the initial DayTime instance but can be used for\n         * any other {@link #function-register registered} `DayTime` instances since they all posses the same value for\n         * `startShift`.\n         *\n         * This defaults to {@link Core.util.DayTime#property-MIDNIGHT-static}.\n         * @member {Core.util.DayTime} dayTime\n         * @readonly\n         */\n        this.dayTime = dayTime || DayTime.MIDNIGHT;\n\n        /**\n         * The owning store instance of this index.\n         * @member {Scheduler.data.EventStore} store\n         * @private\n         * @readonly\n         */\n        this.store = store;\n\n        /**\n         * The `DayTime` instances {@link #function-register registered} with this index instance. As instances are\n         * {@link #function-unregister unregistered} they are removed from this array. Once this array is empty, this\n         * index can be discarded.\n         * @member {Core.util.DayTime[]} users\n         * @private\n         */\n        this.users = [this.dayTime];\n    }\n\n    /**\n     * Adds an event record to the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be added (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    add(indexName, date, eventRecord) {\n        const\n            index    = this[indexNameMap[indexName]],\n            key      = this.dayTime.dateKey(date),\n            entry    = index[key] || (index[key] = new Set());\n\n        entry.add(eventRecord);\n    }\n\n    /**\n     * Adds an event record to all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    addEvent(eventRecord) {\n        let dateMS = this.dayTime.startOfDay(eventRecord.startDate)?.getTime(),\n            endDateMS;\n\n        if (dateMS) {\n            endDateMS = eventRecord.endDate?.getTime() ?? dateMS;\n            this.add('startDate', dateMS, eventRecord);\n\n            do {\n                this.add('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n\n    /**\n     * Clear this index.\n     */\n    clear() {\n        indexProps.forEach(name => this[name] = Object.create(null));\n    }\n\n    /**\n     * Returns an object that has properties named by the {@link Core.util.DayTime#function-dateKey} method, or the\n     * array of event records if a `date` is specified, or the event record array and the date key in a 2-element array\n     * if `returnKey` is `true`.\n     * @param {String} indexName The name of the desired index (either 'date' or 'startDate').\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch. When passed, this method will return\n     * the array of event records for this date.\n     * @param {Boolean} [returnKey] Specify `true` to return the date key along with the event record array.\n     * @returns {Object|Scheduler.model.EventModel[]}\n     */\n    get(indexName, date, returnKey) {\n        // Date indices are created on first usage and after that kept up to date on changes\n        !this.initialized && this.initialize();\n\n        let ret = this[indexNameMap[indexName]],\n            key;\n\n        if (date) {\n            key = this.dayTime.dateKey(date);\n            ret = returnKey ? [ret[key], key] : ret[key];\n        }\n\n        return ret;\n    }\n\n    /**\n     * Called when this index is first used. Once called, further store changes will be used to maintain this index.\n     * @private\n     */\n    initialize() {\n        this.initialized = true;\n\n        this.clear();\n        this.sync('splice', this.store.storage.allValues);\n    }\n\n    invalidate() {\n        this.initialized = false;\n\n        indexProps.forEach(name => this[name] = null);\n    }\n\n    /**\n     * Returns `true` if the given `dayTime` matches this index.\n     * @param {Core.util.DayTime} dayTime\n     * @returns {Boolean}\n     */\n    matches(dayTime) {\n        return this.dayTime.startShift === dayTime.startShift;\n    }\n\n    /**\n     * Removes an event record from the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be removed (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    remove(indexName, date, eventRecord) {\n        const\n            index = this[indexNameMap[indexName]],\n            key   = this.dayTime.dateKey(date),\n            entry = index[key];\n\n        if (entry) {\n            entry.delete(eventRecord);\n        }\n    }\n\n    /**\n     * Removes an event record from all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @param {Date} startDate The start date for the event. This may be different from the `startDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @param {Date} endDate The end date for the event. This may be different from the `endDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @private\n     */\n    removeEvent(eventRecord, startDate, endDate) {\n        let dateMS = this.dayTime.startOfDay(startDate)?.getTime(),\n            endDateMS;\n\n        if (dateMS) {\n            endDateMS = endDate?.getTime() ?? dateMS;\n            this.remove('startDate', dateMS, eventRecord);\n\n            do {\n                this.remove('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n\n    // <remove-on-release>\n    // TODO: Improve Collection indices to handle this\n    //  Keeps date & startDate indices up to date, used by Calendar and recurrence\n    //  The indices are initialized lazily on first access, and then kept up to date on changes\n    // </remove-on-release>\n    sync(action, added, removed, replaced, wasSet) {\n        added = added || emptyArray;\n        removed = removed || emptyArray;\n\n        const\n            me            = this,\n            addedCount    = added.length,\n            removedCount  = removed.length,\n            replacedCount = replaced?.length;\n\n        let i, newEvent, outgoingEvent;\n\n        if (!me.initialized) {\n            return;\n        }\n\n        switch (action) {\n            case 'clear':\n                me.clear();\n                break;\n\n            // Add and remove\n            case 'splice':\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n\n                    for (i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n\n                // Remove entries from indices\n                if (removedCount) {\n                    for (i = 0; i < removedCount; i++) {\n                        outgoingEvent = removed[i];\n\n                        me.removeEvent(outgoingEvent, outgoingEvent.startDate, outgoingEvent.endDate);\n                    }\n                }\n\n                // Add entries to indices\n                if (addedCount) {\n                    for (i = 0; i < addedCount; i++) {\n                        newEvent = added[i];\n\n                        // Can only be date-indexed if it's scheduled.\n                        // Also ignore parent events (likely using a Gantt project)\n                        if (newEvent.isScheduled && !newEvent.isParent) {\n                            me.addEvent(newEvent);\n                        }\n                    }\n                }\n                break;\n\n            // invoked when the start or end changes so that the event can be re-indexed.\n            case 'reschedule':\n                outgoingEvent = added[0];\n\n                me.removeEvent(outgoingEvent, wasSet.startDate?.oldValue || outgoingEvent.startDate,\n                    wasSet.endDate?.oldValue || outgoingEvent.endDate);\n\n                // Now process as a splice with an add and no removes.\n                me.sync('splice', added);\n\n                break;\n        }\n    }\n\n    /**\n     * This method registers a `dayTime` instance with this index in the `users` array.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     */\n    register(dayTime) {\n        this.users.push(dayTime);\n    }\n\n    /**\n     * This method unregisters a `dayTime` instance, removing it from the `users` array. This method returns `true` if\n     * this was the last registered instance and this index is no longer needed.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @returns {Boolean}\n     */\n    unregister(dayTime) {\n        const\n            { users } = this,\n            i = users.indexOf(dayTime);\n\n        if (i > -1) {\n            users.splice(i, 1);\n        }\n\n        return !users.length;\n    }\n};\n\n// To avoid shape changes:\nconst proto = EventDayIndex.prototype;\n\nindexProps.forEach(name => proto[name] = null);\nproto.initialized = false;\n", "import DayTime from '../../../Core/util/DayTime.js';\nimport EventDayIndex from '../util/EventDayIndex.js';\n\n/**\n * @module Scheduler/data/mixin/DayIndexMixin\n */\n\nconst { MIDNIGHT } = DayTime;\n\n/**\n * Mixing handling Calendars day indices.\n *\n * Consumed by EventStore in Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n * @internal\n */\nexport default Target => class DayIndexMixin extends Target {\n\n    static $name = 'DayIndexMixin';\n\n    construct(config) {\n        super.construct(config);\n\n        this.dayIndices = null;\n    }\n\n    //region Keeping index in sync\n\n    // Override to syncIndices on initial load\n    afterLoadData() {\n        this.syncIndices('splice', this.storage.allValues);\n        super.afterLoadData?.();\n    }\n\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Indices must be synced before responding to change\n        this.syncIndices(action, added, removed, replaced);\n\n        super.onDataChange(...arguments);\n    }\n\n    onDataReplaced(action, data) {\n        // Indices must be synced before responding to change\n        this.syncIndices('clear');\n        this.syncIndices('splice', this.storage.values);\n\n        super.onDataReplaced(action, data);\n    }\n\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        // Ensure by-date indices are up to date.\n        if (('startDate' in wasSet) || ('endDate' in wasSet)) {\n            this.syncIndices('reschedule', [record], null, null, wasSet);\n        }\n\n        super.onModelChange(...arguments);\n    }\n\n    //endregion\n\n    //region Index\n\n    /**\n     * Invalidates associated day indices.\n     * @internal\n     */\n    invalidateDayIndices() {\n        this.dayIndices?.forEach(dayIndex => dayIndex.invalidate());\n    }\n\n    /**\n     * Registers a `DayTime` instance, creating an `EventDayIndex` for each distinct `startShift`. This index is\n     * maintained until all instances with a matching `startShift` are {@link #function-unregisterDayIndex unregistered}.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @internal\n     * @category Indexing\n     */\n    registerDayIndex(dayTime) {\n        const\n            me = this,\n            dayIndices = me.dayIndices || (me.dayIndices = []);\n\n        let dayIndex, i;\n\n        for (i = 0; !dayIndex && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                (dayIndex = dayIndices[i]).register(dayTime);\n            }\n        }\n\n        !dayIndex && dayIndices.push(dayIndex = new EventDayIndex(me, dayTime));\n\n        return dayIndex;\n    }\n\n    syncIndices(...args) {\n        this.dayIndices?.forEach(dayIndex => dayIndex.sync(...args));\n    }\n\n    /**\n     * Removes a registered `DayTime` instance. If this is the last instance registered to an `EventDayIndex`, that\n     * index is removed.\n     * @param {Core.util.DayTime} dayTime The instance to unregister.\n     * @internal\n     * @category Indexing\n     */\n    unregisterDayIndex(dayTime) {\n        const\n            me = this,\n            { dayIndices } = me;\n\n        for (let i = dayIndices?.length; i-- > 0; /* empty */) {\n            if (dayIndices[i].matches(dayTime)) {\n                if (dayIndices[i].unregister(dayTime)) {\n                    dayIndices.splice(i, 1);\n                }\n\n                break;\n            }\n        }\n    }\n\n    /**\n     * Returns the `EventDayIndex` to use for the given `DayTime` instance. This may be the primary instance or a\n     * child instance created by {@link #function-registerDayIndex}.\n     * @param {Core.util.DayTime} dayTime The `DayTime` of the desired index.\n     * @returns {Scheduler.data.util.EventDayIndex}\n     * @private\n     * @category Indexing\n     */\n    useDayIndex(dayTime) {\n        const\n            me             = this,\n            { dayIndices } = me;\n\n        dayTime = dayTime || MIDNIGHT;\n\n        for (let i = 0; dayIndices && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                return dayIndices[i];\n            }\n        }\n\n        if (dayTime.startShift) {\n            throw new Error(`No day index registered for ${dayTime} on ${me.id}`);\n        }\n\n        return me.registerDayIndex(MIDNIGHT);\n    }\n\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/data/mixin/RecurringTimeSpansMixin\n */\n\nconst\n    emptyArray = Object.freeze([]);\n\n/**\n * This mixin provides recurrence functionality to a store containing {@link Scheduler.model.TimeSpan TimeSpan} models.\n * Normally you don't need to interact with this mixin directly.\n * @mixin\n */\nexport default Target => class RecurringTimeSpansMixin extends (Target || Base) {\n    static get $name() {\n        return 'RecurringTimeSpansMixin';\n    }\n\n    construct(...args) {\n        const me = this;\n\n        // We store all generated occurrences keyed by `_generated_${recurringTimeSpan.id}:${occurrenceStartDate}`\n        // So that when asked to generate an occurrence for a date, an already generated one can be returned.\n        me.globalOccurrences = new Map();\n\n        // All recurring events added to the store are accessible through this Set. It's used\n        // to generate occurrences.\n        me.recurringEvents = new Set();\n\n        super.construct(...args);\n    }\n\n    // Override to refreshRecurringEventsCache on initial load\n    afterLoadData() {\n        // All cached occurrences are now potentially invalid.\n        // A store reload might imply any number of changes which invalidate any occurrence.\n        this.globalOccurrences.clear();\n\n        // Clear and rebuild the recurring events cache\n        this.refreshRecurringEventsCache('clear');\n        this.refreshRecurringEventsCache('splice', this.storage.allValues);\n        super.afterLoadData && super.afterLoadData();\n    }\n\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Recurring events cache must be refreshed before responding to change\n        this.refreshRecurringEventsCache(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n\n    refreshRecurringEventsCache(action, added = emptyArray, removed = emptyArray, replaced) {\n        const\n            me                  = this,\n            { recurringEvents } = me,\n            replacedCount       = replaced?.length;\n\n        switch (action) {\n            case 'clear':\n                recurringEvents.clear();\n                break;\n\n            // Add and remove\n            case 'splice': {\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n\n                    for (let i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n\n                const\n                    addedCount   = added.length,\n                    removedCount = removed.length;\n\n                // Track the recurring events we contain\n                if (removedCount && recurringEvents.size) {\n                    for (let i = 0; i < removedCount; i++) {\n                        // If it's being removed, remove it from the recurring events cache.\n                        // If it's not a recurring event, it doesn't matter, it won't be in there.\n                        recurringEvents.delete(removed[i]);\n                    }\n                }\n                // Track the recurring events we contain\n                if (addedCount) {\n                    for (let i = 0; i < addedCount; i++) {\n                        const newEvent = added[i];\n\n                        // Allow easy access to recurring events\n                        if (newEvent.isRecurring) {\n                            recurringEvents.add(newEvent);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    //<debug>\n    add(record, ...args) {\n        // StoreCRUD#add always converts to array anyway, so do it first here\n        // so that the occurrence check can be reliable.\n        const records = ArrayHelper.asArray(record);\n\n        // Occurrences can never be in the store.\n        // When an occurrence is edited, it becomes an exception\n        // and is promoted to be a full event and THEN added.\n        if (this.isEventStore && records.some(r => r.isOccurrence)) {\n            throw new Error('Occurrences must not be added to the event store');\n        }\n        else {\n            return super.add(records, ...args);\n        }\n    }\n    //</debug>\n\n    getById(id) {\n        let result = super.getById(id);\n\n        // If the id is not found in the Store, then it could be one of our generated occurrences\n        if (!result) {\n            result = this.globalOccurrences.get(this.modelClass.asId(id));\n        }\n\n        return result;\n    }\n\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const isRecurrenceRelatedFieldChange = !silent && this.isRecurrenceRelatedFieldChange(record, wasSet);\n\n        // If this is the base of a recurring sequence, then any reactors to events from\n        // the super call must regenerate occurrences, so must be done at top.\n        // If silent is true, occurrences won't be recalculated. Do not remove occurrences from cache in such case.\n        if (isRecurrenceRelatedFieldChange) {\n            record.removeOccurrences();\n        }\n\n        super.onModelChange(...arguments);\n\n        // If this is the base of a recurring sequence, then the EventStore must\n        // trigger a refresh event so that UIs refresh themselves.\n        // This could be at the tail end of the creation of an exception\n        // or a new recurring base.\n        if (isRecurrenceRelatedFieldChange) {\n            const event = { action : 'batch', records : this.storage.values };\n\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n\n    /**\n     * The method restricts which field modifications should trigger timespan occurrences building.\n     * By default, any field change of a recurring timespan causes the rebuilding.\n     * @param  {Scheduler.model.TimeSpan} timeSpan The modified timespan.\n     * @param  {Object} wasSet Object containing the change set.\n     * @returns {Boolean} `True` if the fields modification should trigger the timespan occurrences rebuilding.\n     * @internal\n     * @category Recurrence\n     */\n    isRecurrenceRelatedFieldChange(timeSpan, wasSet) {\n        return timeSpan.isRecurring || 'recurrenceRule' in wasSet;\n    }\n\n    /**\n     * Builds occurrences for the provided timespan across the provided date range.\n     * @private\n     * @category Recurrence\n     */\n    getOccurrencesForTimeSpan(timeSpan, startDate, endDate) {\n        const result = [];\n\n        if (timeSpan.isRecurring) {\n            timeSpan.recurrence.forEachOccurrence(startDate, endDate, r => result.push(r));\n        }\n\n        return result;\n    }\n\n    set data(data) {\n        // All cached occurrences are now invalid with a new dataset\n        this.globalOccurrences.clear();\n        super.data = data;\n    }\n\n    /**\n     * Returns all the recurring timespans.\n     * @returns {Scheduler.model.TimeSpan[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringTimeSpans() {\n        return [...this.recurringEvents];\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport RecurringTimeSpansMixin from './RecurringTimeSpansMixin.js';\n\n/**\n * @module Scheduler/data/mixin/RecurringEventsMixin\n */\n\n/**\n * This mixin class provides recurrence functionality to the {@link Scheduler.data.EventStore event store}.\n * @extends Scheduler/data/mixin/RecurringTimeSpansMixin\n * @mixin\n */\nexport default Target => class RecurringEventsMixin extends RecurringTimeSpansMixin(Target || Base) {\n\n    static get $name() {\n        return 'RecurringEventsMixin';\n    }\n\n    /**\n     * Returns all the recurring events.\n     *\n     * **An alias for ** {@link Scheduler.data.mixin.RecurringTimeSpansMixin#function-getRecurringTimeSpans} method.\n     *\n     * @returns {Scheduler.model.EventModel[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringEvents() {\n        return this.getRecurringTimeSpans();\n    }\n\n    isEventPersistable(event) {\n        // occurrences are not persistable\n        return super.isEventPersistable(event) && (!event.supportsRecurring || !event.isOccurrence);\n    }\n};\n", "import Base from '../../../../Core/Base.js';\n\nconst dayParseRegExp = /^([+-]?[0-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\n\nconst days = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\n\nexport default class RecurrenceDayRuleEncoder extends Base {\n\n    static decodeDay(rawDay) {\n        let parsedDay,\n            result;\n\n        if ((parsedDay = dayParseRegExp.exec(rawDay))) {\n\n            result = [days.indexOf(parsedDay[2])];\n\n            // optional position number\n            if (parsedDay[1]) {\n                parsedDay[1] = parseInt(parsedDay[1], 10);\n                result.push(parsedDay[1]);\n            }\n        }\n\n        return result;\n    }\n\n    static encodeDay(day) {\n        let position;\n\n        // support decodeDay() result format\n        if (Array.isArray(day)) {\n            [day, position] = day;\n        }\n\n        return (position ? position.toString() : '') + days[day];\n    }\n\n    // Turns days values provided as an array of strings (like [`-1MO`, `SU`, `+3FR`])\n    // into an array of [ dayIndex, position ] elements, where:\n    //\n    // - `dayIndex` - zero-based week day index value (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n    // - `position` - (optional) 1-based position of the day (integer value (can be both positive and negative))\n    static decode(rawDays) {\n        const result = [];\n        let parsedDay;\n\n        if (rawDays) {\n            for (let i = 0; i < rawDays.length; i++) {\n                if ((parsedDay = this.decodeDay(rawDays[i]))) {\n                    result.push(parsedDay);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    static encode(days) {\n        const result = [];\n        let day;\n\n        if (days) {\n            for (let i = 0; i < days.length; i++) {\n                if ((day = this.encodeDay(days[i]))) {\n                    result.push(day);\n                }\n            }\n        }\n\n        return result;\n    }\n};\n", "import Base from '../../../../Core/Base.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/data/util/recurrence/AbstractRecurrenceIterator\n * @private\n */\n\nconst\n    frequencyToUnitRe = /ly$/i,\n    frequencyToUnit = frequency => {\n        const result = frequency.replace(frequencyToUnitRe, '');\n\n        return result === 'DAI' ? 'DAY' : result;\n    },\n    fn = (date, counter, isFirst, timeSpan) => timeSpan.buildOccurrence(date, isFirst),\n    captureLastOccurrence = date => lastOccurrenceDate = date;\n\nlet lastOccurrenceDate;\n\nexport default class AbstractRecurrenceIterator extends Base {\n\n    static frequency = 'NONE';\n\n    static MAX_OCCURRENCES_COUNT = 1000000;\n\n    static processIterationConfig(config) {\n        const\n            { recurrence } = config,\n            {\n                frequency,\n                interval,\n                timeSpan,\n                endDate : until,\n                count\n            } = recurrence;\n\n        // Force the correction of the event to be in sync with its recurrence rule\n        // before performing iteration. For example, if the event's configured startDate\n        // is 1st January 2020, and the rule dictates that the event will take place\n        // monthly, every Monday, then the first event is not until Monday 6th January, 2020.\n        if (!config.syncingStartDate && !timeSpan.meta.isSyncedWithRule) {\n            // Do not generate occurrences outside of the specified range\n            const\n                intervalEndDate = DateHelper.add(timeSpan.startDate, interval, frequencyToUnit(frequency)),\n                endDate = DateHelper.min(\n                    intervalEndDate,\n                    config.endDate || intervalEndDate\n                );\n\n            this.forEachDate({\n                syncingStartDate : true,\n                startDate        : timeSpan.startDate,\n                endDate,\n                recurrence,\n                fn\n            });\n        }\n\n        // Capture the start after its been synced with its recurrence rule\n        const timeSpanStart = timeSpan.startDate;\n\n        // Extract the endDate from the config, defaulting to the recurrence UNTIL date\n        let {\n            startDate = timeSpanStart,\n            endDate   = until\n        } = config;\n\n        // No point in starting the iteration before the event starts\n        if (startDate < timeSpanStart) {\n            startDate = timeSpanStart;\n        }\n\n        // The recurrence's stop date overrides the configured endDate.\n        if (until) {\n            if (!endDate || endDate > until) {\n                endDate = until;\n            }\n        }\n        // If we are limiting using count and we are not starting from the\n        // first occurrence, then we have to calculate a stop date.\n        // This is because for date ranges in the future we cannot calculate how many\n        // preceding occurrences there may have been.\n        else if (count && startDate > timeSpanStart) {\n            // Iterate the occurrences from the start to capture the last one\n            this.forEachDate({\n                recurrence,\n                fn : captureLastOccurrence\n            });\n\n            // The date of the last occurrence in the count sequence overrides the configured endDate.\n            if (!endDate || endDate > lastOccurrenceDate) {\n                // since endDate of the provided interval is exclusive add 1 millisecond\n                endDate = new Date(lastOccurrenceDate.getTime() + 1);\n            }\n        }\n\n        // Preserve the requested start of requested visits.\n        const earliestVisibleDate = startDate;\n\n        // Unless we are only asked for events which *start* within the time range. we must make\n        // a best attempt to include any occurrences which span the start date.\n        // So if we are asking for events from the 1st of the month, and there's an event\n        // which runs every 2 months from the 15th to the 5th, we must include it. Start the\n        // iteration <interval> full frequency quanta before the requested start.\n        // This will only cause <interval> extra iterations.\n        // We cannot step back to before the event's starting date though.\n        if (!config.startOnly) {\n            startDate = new Date(DateHelper.max(DateHelper.add(startDate, -interval, frequencyToUnit(frequency)), timeSpanStart));\n        }\n\n        return Object.assign({\n            extraArgs : [],\n            // Only check start date for time spans with 0 duration\n            startOnly : !Boolean(timeSpan.durationMS)\n        }, config, {\n            startDate,\n            endDate,\n            timeSpan,\n            timeSpanStart,\n            earliestVisibleDate,\n            endDateMS             : endDate?.getTime(),\n            timeSpanStartMS       : timeSpanStart.getTime(),\n            earliestVisibleDateMS : earliestVisibleDate.getTime(),\n            durationMS            : timeSpan.durationMS,\n            spansStart            : startDate <= timeSpanStart && endDate > timeSpanStart\n        });\n    }\n\n    static getOccurrenceIndex(event) {\n        if (event.isOccurrence) {\n            return DateHelper.diff(event.recurringTimeSpan.startDate, event.startDate, frequencyToUnit(event.recurringTimeSpan.recurrence.frequency));\n        }\n    }\n\n    /**\n     * Returns Nth occurrence of a week day in the provided period of time.\n     * @param  {Date} startDate Period start date.\n     * @param  {Date} endDate   Period end date.\n     * @param  {Number} day    Week day (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n     * @param  {Number} index  Index to find.\n     * @returns {Date}           Returns the found date or null if there is no `index`th entry.\n     * @private\n     */\n    static getNthDayInPeriod(startDate, endDate, day, index) {\n        let result, sign, borderDate;\n\n        if (index) {\n            if (index > 0) {\n                sign = 1;\n                borderDate = startDate;\n            }\n            else {\n                sign = -1;\n                borderDate = endDate;\n            }\n\n            // delta between requested day and border day\n            const delta = day - borderDate.getDay();\n\n            // if the requested day goes after (before, depending on borderDate used (start/end))\n            // we adjust index +/-1\n            if (sign * delta < 0) {\n                index += sign;\n            }\n\n            // measure \"index\" weeks forward (or backward) ..take delta into account\n            // result = new Date(borderDate.getTime() + ((index - sign) * 7 + delta) * 24*60*60*1000);\n            // Per https://github.com/bryntum/support/issues/3413 - don't do that ^^ because DST makes days/week\n            // alternatingly shorter or longer depending on going in/out of DST:\n            result = new Date(borderDate);\n            result.setDate(borderDate.getDate() + (index - sign) * 7 + delta);\n\n            // if resulting date is outside of the provided range there is no \"index\"-th entry\n            // of the day\n            if (result < startDate || result > endDate) {\n                result = null;\n            }\n        }\n\n        return result;\n    }\n\n    static buildDate(year, month, date) {\n        const dt = new Date(year, month, date);\n\n        if (dt.getFullYear() === year && dt.getMonth() === month && dt.getDate() === date) {\n            return dt;\n        }\n    }\n\n    static isValidPosition(position) {\n        return Boolean(position);\n    }\n\n    static forEachDateAtPositions(dates, positions, fn, scope) {\n        const datesLength = dates.length,\n            processed     = {};\n\n        for (let i = 0; i < positions.length; i++) {\n\n            const index = positions[i];\n\n            if (this.isValidPosition(index)) {\n                const date = index > 0 ? dates[index - 1] : dates[datesLength + index];\n\n                if (date && !processed[date.getTime()]) {\n\n                    // remember that we've returned the date\n                    processed[date.getTime()] = true;\n\n                    // return false if it's time to stop recurring\n                    if (fn.call(scope, date) === false) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n\n    static isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDate >= earliestVisibleDate\n                : occurrenceDate.valueOf() + durationMS > earliestVisibleDate\n        ) && !timeSpan.hasException(occurrenceDate);\n    }\n\n    // Slightly faster version of ^, used by Daily & Weekly iterators\n    static isInViewMS(startOnly, occurenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDateMS >= earliestVisibleDateMS\n                : occurrenceDateMS + durationMS > earliestVisibleDateMS\n        ) && !timeSpan.hasException(occurenceDate);\n    }\n}\n", "/**\n * @module Scheduler/data/util/recurrence/DailyRecurrenceIterator\n */\n\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class DailyRecurrenceIterator extends AbstractRecurrenceIterator {\n\n    static frequency = 'DAILY';\n\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts a recurring event which matches the passed recurrence rule and overlaps the start and end dates\n     * and is not an {@link Scheduler.model.mixin.RecurringTimeSpan#field-exceptionDates exceptionDate}\n     * in the recurring event.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                = this.processIterationConfig(config),\n            { interval }     = recurrence,\n            delay            = startDate - timeSpanStart,\n            // recurrence interval duration in ms (86400000 is a single day duration in ms)\n            intervalDuration = interval * 86400000,\n            delayInIntervals = Math.floor(delay / intervalDuration);\n\n        let { count }       = recurrence,\n            counter         = 0,\n            occurrenceDate  = DateHelper.add(timeSpanStart, delayInIntervals * interval, 'day'),\n            occurrenceDateMS = occurrenceDate.getTime();\n\n        if (!endDate && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n\n        while (!endDateMS || occurrenceDateMS < endDateMS) {\n            const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n\n            counter++;\n\n            if (inView &&\n                ((endDateMS && occurrenceDateMS > endDateMS) || fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n            ) {\n                break;\n            }\n\n            // shift to the next day\n            occurrenceDate = DateHelper.add(occurrenceDate, interval, 'day');\n            occurrenceDateMS = occurrenceDate.getTime();\n        }\n    }\n}\n", "/**\n * @module Scheduler/data/util/recurrence/WeeklyRecurrenceIterator\n */\n\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class WeeklyRecurrenceIterator extends AbstractRecurrenceIterator {\n\n    static frequency = 'WEEKLY';\n\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                timeSpanStartMS,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                     = this.processIterationConfig(config),\n            {\n                interval,\n                days\n            }                     = recurrence,\n            { weekStartDay }      = DateHelper,\n            startHours            = timeSpanStart.getHours(),\n            startMinutes          = timeSpanStart.getMinutes(),\n            startSeconds          = timeSpanStart.getSeconds(),\n            startMS               = timeSpanStart.getMilliseconds();\n\n        let counter    = 0,\n            { count }  = recurrence,\n            weekDays   = DayRuleEncoder.decode(days),\n            weekStartDate, occurrenceDate;\n\n        // \"Days\" might be skipped then we use the event start day\n        if (!weekDays?.length) {\n            weekDays = [[timeSpanStart.getDay()]];\n        }\n\n        // If week start day is not zero (Sunday)\n        // we need to normalize weekDays array since its values are used\n        // to calculate real dates as: date = week_start_date + weekDay_entry\n        // which does not work when week starts on non-Sunday\n        if (weekStartDay > 0) {\n            for (let i = 0; i < weekDays.length; i++) {\n                if (weekStartDay > weekDays[i][0]) {\n                    weekDays[i][0] = 7 - weekStartDay - weekDays[i][0];\n                }\n                else {\n                    weekDays[i][0] -= weekStartDay;\n                }\n            }\n        }\n\n        // days could be provided in any order so it's important to sort them\n        weekDays.sort((a, b) => a[0] - b[0]);\n\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        weekStartDate = DateHelper.getNext(count || interval > 1 ? timeSpanStart : startDate, 'week', 0);\n\n        if (!endDateMS && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n\n        while (!endDateMS || weekStartDate.getTime() < endDateMS) {\n\n            for (let i = 0; i < weekDays.length; i++) {\n                // Faster than chaining multiple DateHelper calls\n                occurrenceDate = new Date(\n                    weekStartDate.getFullYear(),\n                    weekStartDate.getMonth(),\n                    weekStartDate.getDate() + weekDays[i][0],\n                    startHours,\n                    startMinutes,\n                    startSeconds,\n                    startMS\n                );\n\n                const occurrenceDateMS = occurrenceDate.getTime();\n\n                if (occurrenceDateMS >= timeSpanStartMS) {\n                    const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n\n                    counter++;\n\n                    if (inView &&\n                        ((endDateMS && occurrenceDateMS >= endDateMS) ||\n                        (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                        (count && counter >= count))\n                    ) {\n                        return;\n                    }\n                }\n            }\n\n            // get next week start\n            weekStartDate = DateHelper.getNext(weekStartDate, 'week', interval);\n        }\n    }\n\n}\n", "/**\n * @module Scheduler/data/util/recurrence/MonthlyRecurrenceIterator\n */\n\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class MonthlyRecurrenceIterator extends AbstractRecurrenceIterator {\n\n    static frequency = 'MONTHLY';\n\n    static getNthDayOfMonth(date, dayNum) {\n        const daysInMonth = DateHelper.daysInMonth(date);\n        let result = null;\n\n        if (dayNum && Math.abs(dayNum) <= daysInMonth) {\n            result = new Date(date.getFullYear(), date.getMonth(), dayNum < 0 ? daysInMonth + dayNum + 1 : dayNum);\n        }\n\n        return result;\n    }\n\n    static isValidPosition(position) {\n        return position && Math.abs(position) > 0 && Math.abs(position) <= 31;\n    }\n\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n\n        let\n            { monthDays }  = recurrence,\n            counter        = 0,\n            weekDayPosition,\n            monthStartDate, monthEndDate,\n            dates, occurrenceDate, i;\n\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        monthStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'month');\n        monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n\n        // If no month days nor week days are provided let's use event start date month day\n        if (!(monthDays && monthDays.length) && !(weekDays && weekDays.length)) {\n            monthDays = [timeSpanStart.getDate()];\n        }\n\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n\n        while ((!endDate || endDate > monthStartDate) && (!count || counter < count)) {\n\n            dates = [];\n\n            if (weekDays && weekDays.length) {\n\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n\n                    let from    = 1,\n                        till    = 53;\n\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(monthStartDate, monthEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n\n                dates.sort((a, b) => a - b);\n\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n\n                            counter++;\n\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                            ) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n\n            }\n            else {\n                const sortedMonthDates = [];\n\n                for (i = 0; i < monthDays.length; i++) {\n                    // check if the date wasn't iterated over yet\n                    if ((occurrenceDate = this.getNthDayOfMonth(monthStartDate, monthDays[i])) && !processedDate[occurrenceDate.getTime()]) {\n                        processedDate[occurrenceDate.getTime()] = true;\n                        sortedMonthDates.push(occurrenceDate);\n                    }\n                }\n\n                // it's important to sort the dates to iterate over them in the proper order\n                sortedMonthDates.sort((a, b) => a - b);\n\n                for (i = 0; i < sortedMonthDates.length; i++) {\n                    occurrenceDate = DateHelper.copyTimeValues(sortedMonthDates[i], timeSpanStart);\n\n                    if (hasPositions) {\n                        dates.push(occurrenceDate);\n                    }\n                    else if (occurrenceDate >= timeSpanStart) {\n                        const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n\n                        counter++;\n\n                        if (inView &&\n                            ((endDate && occurrenceDate > endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                        ) {\n                            return;\n                        }\n                    }\n                }\n            }\n\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n\n                        counter++;\n\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate <= endDate) &&\n                            // return false if it's time to stop recurring\n                            (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n                        ) {\n                            return false;\n                        }\n                    }\n                });\n            }\n\n            // get next month start\n            monthStartDate = DateHelper.getNext(monthStartDate, 'month', interval);\n            monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        }\n\n    }\n\n}\n", "/**\n * @module Scheduler/data/util/recurrence/YearlyRecurrenceIterator\n */\n\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class YearlyRecurrenceIterator extends AbstractRecurrenceIterator {\n\n    static frequency = 'YEARLY';\n\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n\n        let\n            { months }     = recurrence,\n            counter        = 0,\n            i, occurrenceDate, dates, yearStartDate, yearEndDate, weekDayPosition;\n\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        yearStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'year');\n        yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n\n        months && months.sort((a, b) => a - b);\n\n        // if no months provided let's use the event month\n        if (!(months && months.length) && !(weekDays && weekDays.length)) {\n            months = [timeSpanStart.getMonth() + 1];\n        }\n\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n\n        while ((!endDate || endDate > yearStartDate) && (!count || counter < count)) {\n\n            dates = [];\n\n            if (weekDays && weekDays.length) {\n\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n\n                    let\n                        from = 1,\n                        till = 53;\n\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(yearStartDate, yearEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n\n                dates.sort((a, b) => a - b);\n\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n\n                            counter++;\n\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) ||\n                                (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                (count && counter >= count))\n                            ) {\n                                return;\n                            }\n                        }\n                    }\n                }\n\n            }\n            else {\n                for (i = 0; i < months.length; i++) {\n\n                    if ((occurrenceDate = this.buildDate(yearStartDate.getFullYear(), months[i] - 1, timeSpanStart.getDate()))) {\n                        occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n\n                        // check if the date wasn't iterated over yet\n                        if (!processedDate[occurrenceDate.getTime()]) {\n                            processedDate[occurrenceDate.getTime()] = true;\n\n                            if (hasPositions) {\n                                dates.push(occurrenceDate);\n                            }\n                            else if (occurrenceDate >= timeSpanStart) {\n                                const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n\n                                counter++;\n\n                                if (inView &&\n                                    ((endDate && occurrenceDate >= endDate) ||\n                                    (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                    (count && counter >= count))\n                                ) {\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n\n                        counter++;\n\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate < endDate)) {\n                            // return false if it's time to stop recurring\n                            if (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count)) {\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n\n            // get next month start\n            yearStartDate = DateHelper.getNext(yearStartDate, 'year', interval);\n            yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        }\n\n    }\n}\n", "import Model from '../../Core/data/Model.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport RecurrenceDayRuleEncoder from '../data/util/recurrence/RecurrenceDayRuleEncoder.js';\nimport DailyRecurrenceIterator from '../data/util/recurrence/DailyRecurrenceIterator.js';\nimport WeeklyRecurrenceIterator from '../data/util/recurrence/WeeklyRecurrenceIterator.js';\nimport MonthlyRecurrenceIterator from '../data/util/recurrence/MonthlyRecurrenceIterator.js';\nimport YearlyRecurrenceIterator from '../data/util/recurrence/YearlyRecurrenceIterator.js';\n\n/**\n * @module Scheduler/model/RecurrenceModel\n */\n\nconst recurrenceIterators = {};\n\n[DailyRecurrenceIterator, WeeklyRecurrenceIterator, MonthlyRecurrenceIterator, YearlyRecurrenceIterator].forEach(it => {\n    recurrenceIterators[it.frequency] = it;\n});\n\nfunction convertStringOfIntegerItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',').map(item => parseInt(item, 10));\n        }\n    }\n    else {\n        value = null;\n    }\n\n    return value;\n}\n\nfunction convertStringOfItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',');\n        }\n    }\n    else {\n        value = null;\n    }\n\n    return value;\n}\n\nfunction isEqualAsString(value1, value2) {\n    return String(value1) === String(value2);\n}\n\nfunction convertInteger(value) {\n    if (this.defaultValue && value === undefined) {\n        return this.defaultValue;\n    }\n\n    if (this.allowNull && value == null) {\n        return null;\n    }\n\n    value = parseInt(value);\n\n    return isNaN(value) ? undefined : value;\n}\n\n/**\n * This class represents a timespan recurrence settings.\n * It is a subclass of {@link Core.data.Model} class.\n * Please refer to the documentation for that class to become familiar with the base interface of this class.\n *\n * The data source for these fields can be customized by subclassing this class.\n *\n * @extends Core/data/Model\n */\nexport default class RecurrenceModel extends Model {\n\n    static get $name() {\n        return 'RecurrenceModel';\n    }\n\n    /**\n     * Indicates that this is a `RecurrenceModel` class instance\n     * (allows to avoid using `instanceof`).\n     * @property {Boolean}\n     * @readonly\n     */\n    get isRecurrenceModel() {\n        return true;\n    }\n\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.\n             * @field {'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'} frequency\n             */\n            { name : 'frequency', defaultValue : 'DAILY' },\n            /**\n             * Field defines how often the recurrence repeats.\n             * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.\n             * @field {Number} interval\n             */\n            { name : 'interval', defaultValue : 1, convert : convertInteger },\n            /**\n             * End date of the recurrence. Specifies when the recurrence ends.\n             * The value is optional, the recurrence can as well be stopped using {@link #field-count} field value.\n             * @field {Date} endDate\n             */\n            { name : 'endDate', type : 'date' },\n            /**\n             * Specifies the number of occurrences after which the recurrence ends.\n             * The value includes the associated timespan itself so values less than 2 make no sense.\n             * The field is optional, the recurrence as well can be stopped using {@link #field-endDate} field value.\n             * @field {Number} count\n             */\n            { name : 'count', allowNull : true, convert : convertInteger },\n            /**\n             * Specifies days of the week on which the timespan should occur.\n             * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`\n             * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.\n             * Each value can also be preceded by a positive (+n) or negative (-n) integer.\n             * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.\n             *\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {String[]} days\n             */\n            {\n                name    : 'days',\n                convert : convertStringOfItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies days of the month on which the timespan should occur.\n             * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).\n             * **Applicable only** for monthly {@link #field-frequency}.\n             * @field {Number[]} monthDays\n             */\n            {\n                name    : 'monthDays',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies months of the year on which the timespan should occur.\n             * An array of integer values (1 - 12).\n             * **Applicable only** for yearly {@link #field-frequency}.\n             * @field {Number[]} months\n             */\n            {\n                name    : 'months',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * The positions to include in the recurrence. The values operate on a set of recurrence instances **in one interval** of the recurrence rule.\n             * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {Number} positions\n             */\n            {\n                name    : 'positions',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            }\n        ];\n    }\n\n    get dateFormat() {\n        return this._dateFormat || 'YYYYMMDDTHHmmss';\n    }\n\n    set dateFormat(format) {\n        this._dateFormat = format;\n    }\n\n    get recurrenceIterator() {\n        //<debug>\n        if (!recurrenceIterators[this.frequency]) {\n            throw new Error(`Can't find iterator for ${this.frequency} frequency`);\n        }\n        //</debug>\n\n        return recurrenceIterators[this.frequency];\n    }\n\n    /**\n     * The timespan this recurrence is associated with.\n     * @property {Scheduler.model.TimeSpan}\n     */\n    get timeSpan() {\n        return this._timeSpan;\n    }\n\n    set timeSpan(value) {\n        this._timeSpan = value;\n    }\n\n    /**\n     * The recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10) described format\n     * (\"RRULE\" expression).\n     * @property {String}\n     */\n    get rule() {\n        const\n            me     = this,\n            result = [];\n\n        if (me.frequency) {\n            result.push(`FREQ=${me.frequency}`);\n\n            if (me.interval > 1) {\n                result.push(`INTERVAL=${me.interval}`);\n            }\n            if (me.days && me.days.length) {\n                result.push('BYDAY=' + me.days.join(','));\n            }\n            if (me.monthDays && me.monthDays.length) {\n                result.push('BYMONTHDAY=' + me.monthDays.join(','));\n            }\n            if (me.months && me.months.length) {\n                result.push('BYMONTH=' + me.months.join(','));\n            }\n            if (me.count) {\n                result.push(`COUNT=${me.count}`);\n            }\n            if (me.endDate) {\n                result.push('UNTIL=' + DateHelper.format(me.endDate, me.dateFormat));\n            }\n            if (me.positions && me.positions.length) {\n                result.push('BYSETPOS=' + me.positions.join(','));\n            }\n        }\n\n        return result.join(';');\n    }\n\n    set rule(rule) {\n        const\n            me     = this,\n            values = {\n                frequency : null,\n                interval  : null,\n                count     : null,\n                endDate   : null,\n                days      : null,\n                monthDays : null,\n                months    : null,\n                positions : null\n            };\n\n        me.beginBatch();\n\n        if (rule) {\n            const parts = rule.split(';');\n\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const\n                    part = parts[i].split('='),\n                    value  = part[1];\n\n                switch (part[0]) {\n                    case 'FREQ':\n                        values.frequency = value;\n                        break;\n                    case 'INTERVAL':\n                        values.interval = value;\n                        break;\n                    case 'COUNT':\n                        values.count = value;\n                        values.until = null;\n                        break;\n                    case 'UNTIL':\n                        if (value) {\n                            values.endDate = DateHelper.parse(value, me.dateFormat);\n                        }\n                        else {\n                            values.endDate = null;\n                        }\n                        values.count = null;\n                        break;\n                    case 'BYDAY':\n                        values.days = value;\n                        break;\n                    case 'BYMONTHDAY':\n                        values.monthDays = value;\n                        break;\n                    case 'BYMONTH':\n                        values.months = value;\n                        break;\n                    case 'BYSETPOS':\n                        values.positions = value;\n                        break;\n                }\n            }\n        }\n\n        me.set(values);\n\n        if (rule) {\n            me.sanitize();\n        }\n\n        me.endBatch();\n    }\n\n    construct(data = {}) {\n        const\n            me                 = this,\n            { rule, timeSpan } = data;\n\n        me._suspendedTimeSpanNotifying = 0;\n\n        delete data.timeSpan;\n        delete data.rule;\n\n        super.construct(...arguments);\n\n        if (rule) {\n            me.suspendTimeSpanNotifying();\n            me.rule = rule;\n            me.resumeTimeSpanNotifying();\n        }\n\n        me.timeSpan = timeSpan;\n    }\n\n    /**\n     * Iterate occurrences for the owning timespan across the specified date range. This method can be called even\n     * if the timespan is not yet a member of a store, however, the occurrences returned will not be cached across\n     * subsequent calls to this method.\n     * @param {Date} startDate The start date of the iteration.\n     * @param {Date} endDate The end date of the iteration.\n     * @param {Function} fn The function to call for each occurrence.\n     * @param {Scheduler.model.TimeSpan} fn.occurrence The occurrence.\n     * @param {Boolean} fn.first A flag which is `true` for the first occurrence of this recurrence.\n     * @param {Number} fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Date} fn.date The occurrence date.\n     * @internal\n     */\n    forEachOccurrence(startDate, endDate, fn) {\n        if (this.timeSpan.startDate) {\n            this.recurrenceIterator.forEachDate({\n                recurrence : this,\n                startDate,\n                endDate,\n\n                fn(date, counter, first, timeSpan) {\n                    return fn(timeSpan.buildOccurrence(date, first), first, counter, date);\n                }\n            });\n        }\n    }\n\n    /**\n     * Cleans up fields that do not makes sense for the current {@link #field-frequency} value.\n     * @private\n     */\n    sanitize() {\n        const\n            me                = this,\n            timeSpanStartDate = me.timeSpan?.startDate,\n            values            = {};\n\n        me.isSanitizing = true;\n\n        switch (me.frequency) {\n            case 'DAILY' :\n                values.positions    = null;\n                values.days         = null;\n                values.monthDays    = null;\n                values.months       = null;\n                break;\n\n            case 'WEEKLY' : {\n                values.positions = null;\n                values.monthDays = null;\n                values.months = null;\n\n                const { days } = me;\n\n                if (timeSpanStartDate && days?.length === 1 && days[0] === RecurrenceDayRuleEncoder.encodeDay(timeSpanStartDate.getDay())) {\n                    values.days = null;\n                }\n                break;\n            }\n\n            case 'MONTHLY' : {\n                if (me.monthDays?.length) {\n                    values.positions = null;\n                    values.days = null;\n                }\n\n                values.months = null;\n\n                const { monthDays } = me;\n\n                if (timeSpanStartDate && monthDays?.length === 1 && monthDays[0] === timeSpanStartDate.getDate()) {\n                    values.monthDays = null;\n                }\n                break;\n            }\n\n            case 'YEARLY' : {\n                values.monthDays = null;\n\n                const { months } = me;\n\n                if (timeSpanStartDate && months?.length === 1 && months[0] === timeSpanStartDate.getMonth() + 1) {\n                    values.months = null;\n                }\n                break;\n            }\n        }\n\n        me.set(values);\n\n        me.isSanitizing = false;\n    }\n\n    copy(...args) {\n        const result = super.copy(...args);\n\n        result.dateFormat = this.dateFormat;\n        result.timeSpan   = this.timeSpan;\n\n        return result;\n    }\n\n    afterChange(toSet, wasSet, silent) {\n        const\n            result       = super.afterChange(toSet, wasSet, silent),\n            { timeSpan } = this;\n\n        if (!this.isSanitizing) {\n            // cleanup data to match the chosen frequency\n            this.sanitize();\n        }\n\n        if (timeSpan) {\n            timeSpan.sanitizeRecurrenceData(this);\n\n            if (!this.isTimeSpanNotifyingSuspended) {\n                timeSpan.onRecurrenceChanged();\n            }\n        }\n\n        return result;\n    }\n\n    set(field, value, ...args) {\n        const values = typeof field === 'object' ? field : { [field] : value };\n\n        // reset \"endDate\" field if \"count\" is being set\n        if (values.count) {\n            values.endDate = null;\n        }\n        // reset \"count\" field if \"endDate\" is being set\n        else if (values.endDate) {\n            values.count = null;\n        }\n\n        super.set(values, undefined, ...args);\n    }\n\n    get isTimeSpanNotifyingSuspended() {\n        return Boolean(this._suspendedTimeSpanNotifying);\n    }\n\n    suspendTimeSpanNotifying() {\n        this._suspendedTimeSpanNotifying++;\n    }\n\n    resumeTimeSpanNotifying() {\n        if (this._suspendedTimeSpanNotifying) this._suspendedTimeSpanNotifying--;\n    }\n}\n", "import TimeSpan from '../TimeSpan.js';\nimport RecurrenceModel from '../RecurrenceModel.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AbstractRecurrenceIterator from '../../data/util/recurrence/AbstractRecurrenceIterator.js';\n\nfunction convertExceptionDatesValue(value) {\n    const\n        result         = {},\n        { dateFormat } = this;\n\n    if (value) {\n        value = typeof value == 'string' ? value.split(',') : ArrayHelper.asArray(value);\n\n        value.forEach(item => {\n            if (typeof item == 'string') {\n                item = DateHelper.parse(item, dateFormat);\n            }\n\n            // If we've got a valid date out of the incoming item, add an exception key\n            if (!isNaN(item)) {\n                result[DateHelper.makeKey(item)] = 1;\n            }\n        });\n    }\n\n    return result;\n}\n\nfunction serializeExceptionDatesValue(value) {\n    const\n        result         = [],\n        { dateFormat } = this;\n\n    for (const date in value) {\n        if (value[date]) {\n            result.push(DateHelper.format(DateHelper.parseKey(date), dateFormat));\n        }\n    }\n\n    return result;\n}\n\nconst emptyArray = [];\n\n/**\n * @module Scheduler/model/mixin/RecurringTimeSpan\n */\n\n/**\n * This mixin class provides recurrence related fields and methods to a {@link Scheduler.model.TimeSpan timespan model}.\n *\n * The mixin introduces two types of timespans: __recurring timespan__ and its __occurrences__.\n * __Recurring timespan__ is a timespan having {@link #field-recurrenceRule recurrence rule} specified and its __occurrences__ are \"fake\" dynamically generated timespans.\n * Their set depends on the scheduler visible timespan and changes upon the timespan change.\n *\n * There are few methods allowing to distinguish a recurring event and an occurrence: {@link #property-isRecurring}, {@link #property-isOccurrence}\n * and {@link #property-recurringTimeSpan} (returns the event this record is an occurrence of).\n *\n * The {@link #field-recurrenceRule recurrence rule} defined for the event is parsed and\n * represented with {@link Scheduler.model.RecurrenceModel RecurrenceModel} class (can be changed by setting {@link #property-recurrenceModel} property) instance.\n * See: {@link #property-recurrence} property.\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class RecurringTimeSpan extends (Target || TimeSpan) {\n    static get $name() {\n        return 'RecurringTimeSpan';\n    }\n\n    /**\n     * Returns `true` if this timespan supports recurring.\n     * @property {Boolean}\n     * @category Recurrence\n     */\n    get supportsRecurring() {\n        return true;\n    }\n\n    static get fields() {\n        return [\n            /**\n             * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)\n             * described format (\"RRULE\" expression).\n             * @field {String} recurrenceRule\n             * @category Scheduling\n             */\n            {\n                name     : 'recurrenceRule',\n                internal : true\n            },\n            /**\n             * A string (either a single date or multiple dates separated by comma) or an array of strings containing\n             * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating\n             * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations\n             * won't create another copy of this occurrence again.\n             *\n             * ```javascript\n             * {\n             *     id: 7,\n             *     startDate: '2021-10-12T14:00:00',\n             *     endDate: '2021-10-12T15:00:00',\n             *     name: 'Lunch',\n             *     resourceId: 'hotel',\n             *     recurrenceRule: 'FREQ=DAILY;COUNT=5',\n             *     exceptionDates: ['2021-10-14']\n             * }\n             * ```\n             *\n             * Use {@link #function-addExceptionDate} method to add an individual entry to the dates array:\n             *\n             * ```javascript\n             * // Break the link between the occurrence and its base.\n             * // This also adds the occurrence date as an exception date\n             * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.\n             * occurrence.recurringTimeSpan = null;\n             *\n             * // now the occurrence is an individual record that can be changed & persisted freely\n             * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));\n             * ```\n             * **Note:** The dates in this field get automatically removed when the event changes its {@link Scheduler.model.TimeSpan#field-startDate start date}.\n             *\n             * @field {String|String[]} exceptionDates\n             * @category Scheduling\n             */\n            {\n                name      : 'exceptionDates',\n                convert   : convertExceptionDatesValue,\n                serialize : serializeExceptionDatesValue,\n                internal  : true\n            }\n        ];\n    }\n\n    /**\n     * Override of {@link Core/data/Model}'s method. If an {@link #property-isOccurrence}\n     * is passed, it is detached from its parent recurring event. If it still has a recurrence\n     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence\n     * an exception is added at the occurrence date.\n     * @category Recurrence\n     */\n    remove() {\n        if (this.isOccurrence) {\n            const\n                me = this,\n                { recurringTimeSpan } = me;\n\n            me.cancelBatch();\n            recurringTimeSpan.beginBatch();\n            me.detachFromRecurringEvent();\n            recurringTimeSpan.endBatch();\n        }\n        else {\n            return super.remove(...arguments);\n        }\n    }\n\n    get eventStore() {\n        let result = this.isOccurrence ? this.recurringEvent.eventStore : super.eventStore;\n\n        // Recurrence methods are called on `eventStore`, but in case we have a regular\n        // store with recurrence mixin, we won't event store and should return own\n        // store instead\n        if (!result && this.firstStore?.isRecurringTimeSpansMixin) {\n            result = this.firstStore;\n        }\n\n        return result;\n    }\n\n    /**\n     * Name of the class representing the recurrence model, defaults to {@link Scheduler.model.RecurrenceModel}\n     * @property {String}\n     * @category Recurrence\n     */\n    get recurrenceModel() {\n        return this._recurrenceModel || RecurrenceModel;\n    }\n\n    set recurrenceModel(model) {\n        this._recurrenceModel = model;\n    }\n\n    /**\n     * Sets a recurrence for the timespan with a given frequency, interval, and end.\n     * @param {RecurrenceModelConfig|String|Scheduler.model.RecurrenceModel} recurrence A data object for an instance of\n     * {@link Scheduler.model.RecurrenceModel}. May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or\n     * `YEARLY`.\n     *\n     * ```javascript\n     * // repeat the event every other week till Jan 2 2039\n     * event.setRecurrence({\n     *     frequency : \"WEEKLY\",\n     *     interval  : 2,\n     *     endDate   : new Date(2039, 0, 2)\n     * });\n     * ```\n     *\n     * Also a {@link Scheduler.model.RecurrenceModel recurrence model} can be provided as the only argument for this\n     * method:\n     *\n     * ```javascript\n     * const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });\n     *\n     * event.setRecurrence(recurrence);\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * event.setRecurrence(\"WEEKLY\", 2, new Date(2039, 0, 2));\n     * ```\n     * @param {Number} [interval] The interval between occurrences (instances of this recurrence). For example, a daily\n     * recurrence with an interval of 2 occurs every other day. Must be greater than 0.\n     * @param {Number|Date} [recurrenceEnd] The end of the recurrence. The value can be specified by a date or by a\n     * maximum count of occurrences (has to greater than 1, since 1 means the event itself).\n     * @category Recurrence\n     */\n    setRecurrence(recurrence, interval, recurrenceEnd) {\n        const me = this;\n\n        let recurrenceRule;\n\n        if (recurrence) {\n            if (!recurrence.isRecurrenceModel) {\n                if (typeof recurrence === 'string') {\n                    recurrence = {\n                        frequency : recurrence\n                    };\n\n                    if (interval) {\n                        recurrence.interval = interval;\n                    }\n\n                    // If the recurrence is limited\n                    if (recurrenceEnd) {\n                        if (recurrenceEnd instanceof Date) {\n                            recurrence.endDate = recurrenceEnd;\n                        }\n                        else {\n                            recurrence.count = recurrenceEnd;\n                        }\n                    }\n                }\n                recurrence = new me.recurrenceModel(recurrence);\n            }\n\n            // The RecurrenceModel has a reference to its owning recurring event.\n            // It uses this to remove the owning event's exceptions after its new endDate\n            // whenever its endDate is changed.\n            recurrence.timeSpan = me;\n\n            recurrenceRule = recurrence.rule;\n        }\n\n        me.recurrence     = recurrence;\n        me.recurrenceRule = recurrenceRule;\n    }\n\n    /**\n     * The recurrence model used for the timespan.\n     * @property {Scheduler.model.RecurrenceModel}\n     * @category Recurrence\n     */\n    get recurrence() {\n        const\n            me = this,\n            rule = me.recurrenceRule;\n\n        if (!me._recurrence && rule) {\n            me._recurrence = new me.recurrenceModel({ rule, timeSpan : me, id : `${me.id}-recurrence` });\n        }\n\n        return me._recurrence;\n    }\n\n    set recurrence(recurrence) {\n        const me = this;\n\n        me._recurrence = recurrence;\n\n        if (recurrence) {\n            // bind recurrence instance to the model\n            recurrence.timeSpan = me;\n            me.recurrenceRule   = recurrence.rule;\n        }\n        else {\n            // If this is being done to an occurrence, it's a signal that we are being\n            // mutated into an exception. Apply the change immediately, directly to the data.\n            if (me.isOccurrence) {\n                me.setData('recurrenceRule', null);\n            }\n            else {\n                me.recurrenceRule = null;\n            }\n        }\n    }\n\n    /**\n     * Indicates if the timespan is recurring.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isRecurring() {\n        // MUST evaluate in this order so that if it is an occurrence,\n        // the recurrence getter does not refresh the rule\n        return Boolean(!this.isOccurrence && this.recurrence);\n    }\n\n    /**\n     * Indicates if the timespan is an occurrence of another recurring timespan.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isOccurrence() {\n        return Boolean(this.recurringTimeSpan);\n    }\n\n    /**\n     * The \"main\" timespan this model is an occurrence of. For non-occurrences returns `null`.\n     * @property {Scheduler.model.TimeSpan}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get recurringTimeSpan() {\n        return this._recurringTimeSpan;\n    }\n\n    get isPersistable() {\n        return super.isPersistable && (!this.supportsRecurring || !this.isOccurrence);\n    }\n\n    set recurringTimeSpan(recurringTimeSpan) {\n        this._recurringTimeSpan = recurringTimeSpan;\n    }\n\n    /**\n     * Returns the occurrences of this event over the specified time range. If the first\n     * occurrence is in the time range `*this*` record is included in that position.\n     * @param {Date} startDate The start date of the range for which to include occurrences.\n     * @param {Date} [endDate] The end date of the range for which to include occurrences.\n     * Defaults to the startDate.\n     * @returns {Scheduler.model.TimeSpan[]} The array of occurrences which occur over the specified range.\n     * @category Recurrence\n     */\n    getOccurrencesForDateRange(startDate, endDate = startDate) {\n        return this.eventStore.getOccurrencesForTimeSpan(this, startDate, endDate);\n    }\n\n    /**\n     * Array of this recurring timespan's cached occurrences. __Not including the owning recurring\n     * event__.\n     *\n     * Empty if the timespan is not recurring.\n     *\n     * __Note that this is an internal accessor and is cleared whenever changes are made to the\n     * owning recurring event__.\n     * @property {Scheduler.model.TimeSpan[]}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrences() {\n        if (this.isRecurring) {\n            const result = [];\n\n            // The occurrencesMap contains entries for each occurrence date.\n            this.occurrenceMap.forEach(occurrence => {\n                if (occurrence !== this) {\n                    result.push(occurrence);\n                }\n            });\n\n            return result;\n        }\n\n        return emptyArray;\n    }\n\n    /**\n     * A Map, keyed by each date an occurrence intersects, of occurrences of this event.\n     * @property {Map}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrenceMap() {\n        return this._occurrencesMap || (this._occurrencesMap = new Map());\n    }\n\n    /**\n     * Removes an occurrence from this recurring timespan's cached occurrences.\n     * @param dateOrTimeSpan occurrence date or occurrence TimeSpan\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrence(dateOrTimeSpan) {\n        const date = dateOrTimeSpan.isTimeSpan ? dateOrTimeSpan.occurrenceDate : dateOrTimeSpan;\n\n        // Clear the occurrences *is* we are in an EventStore.\n        this.eventStore?.globalOccurrences.delete(this.createRecurrenceKey(date));\n        // Remove occurrence from its by-startDate cache\n        this.occurrenceMap.delete(DateHelper.makeKey(date));\n    }\n\n    /**\n     * Removes all cached occurrences on or after the passed date from this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrencesFrom(date) {\n        this.occurrenceMap.forEach((occurrence, dateKey) => {\n            if (DateHelper.parseKey(dateKey) >= date) {\n                this.removeOccurrence(occurrence);\n            }\n        });\n    }\n\n    /**\n     * Removes this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrences() {\n        // This recurring event must also be removed from the occurrenceMap if it's there\n        // So insert it as the first element. Can also be found from the store's global occurrence\n        // Map using [...this.eventStore.globalOccurrences.keys()].filter(e => e.startsWith(`_generated:${this.id}`))\n        [this, ...this.occurrences].forEach(occurrence => this.removeOccurrence(occurrence));\n    }\n\n    /**\n     * The method is triggered when the timespan recurrence settings get changed.\n     * It updates the {@link #field-recurrenceRule} field in this case.\n     * @internal\n     * @category Recurrence\n     */\n    onRecurrenceChanged() {\n        this.recurrenceRule = this.recurrence?.rule || null;\n    }\n\n    sanitizeRecurrenceData(recurrence = this.recurrence) {\n        // Remove all exceptionsDates that our owning timeSpan had that are\n        // now after our end date and therefore redundant.\n        if (recurrence.endDate) {\n            const\n                endDate            = DateHelper.clearTime(recurrence.endDate),\n                { exceptionDates } = this;\n\n            // Clear any now-invalid cached occurrences\n            this.removeOccurrencesFrom(endDate);\n\n            // If we had any exceptions on or after this date, remove them.\n            if (exceptionDates) {\n                for (const dateKey in exceptionDates) {\n                    const exceptionDate = DateHelper.parseKey(dateKey);\n\n                    if (exceptionDate >= endDate) {\n                        delete exceptionDates[dateKey];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * The original {@lScheduler.model.TimeSpan#field-startDate startDate} of this event before any modifications\n     * took place. Used by {@link #function-removeOccurrence} and {@link #function-detachFromRecurringEvent}\n     * @internal\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceDate() {\n        return this.meta.modified?.startDate || this.startDate;\n    }\n\n    /**\n     * If this event is an {@link #property-isOccurrence occurrence} of a recurring event, then this\n     * property yields its zero-based occurrence index in the sequence.\n     * @property {Number}\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceIndex() {\n        return AbstractRecurrenceIterator.getOccurrenceIndex(this);\n    }\n\n    /**\n     * Builds an occurrence of this recurring event by cloning the timespan data.\n     * The method is used internally by the __RecurringTimeSpans__ mixin.\n     * Override it if you need to customize the generated occurrences.\n     *\n     * If the date requested is the start date of the event sequence, `this`\n     * record is returned. All runs of recurring events begin with the base record.\n     * @param  {Date} occurrenceDate The occurrence start date.\n     * @param  {Boolean} isFirst `true` if this is the first occurrence.\n     * @returns {Scheduler.model.TimeSpan} The occurrence.\n     * @internal\n     * @category Recurrence\n     */\n    buildOccurrence(occurrenceDate, isFirst) {\n        const\n            me                    = this,\n            {\n                occurrenceMap,\n                recurrence,\n                meta\n            }                     = me,\n            globalOccurrences     = me.eventStore?.globalOccurrences,\n            occurrenceKey         = DateHelper.makeKey(occurrenceDate),\n            id                    = me.createRecurrenceKey(occurrenceDate, occurrenceKey),\n            onStartDate           = !(occurrenceDate - me.startDate),\n            { fieldMap }          = me.constructor;\n\n        // An occurrence has a unique ID which identifies it by its base recurring event and its time.\n        let occurrence   = globalOccurrences?.get(id),\n            { duration } = me;\n\n        // If there's no duration, or it's an all day event (which makes the event ceil and floor its\n        // start and end dates, but does *NOT* as of 27/5/2020 adjust its duration) then\n        // we calculate the duration of the occurrence.\n        if (me.endDate && (me.allDay || !duration)) {\n            duration = DateHelper.as(me.durationUnit, me.endDate.getTime() - me.startDate.getTime());\n        }\n\n        // Don't let NaN in record data\n        const occurrenceEndDate = duration !== undefined ? DateHelper.add(occurrenceDate, duration, me.durationUnit) : undefined;\n\n        if (!occurrence) {\n            // If this is the first occurrence (start times may not match), or it's right on the start\n            // then this recurring event *IS* the occurrence\n            if (isFirst || onStartDate) {\n                occurrence = me;\n\n                // We are the first occurrence.\n                // But if our start time is not as the rule requires, adjust ourself *silently*\n                if (!onStartDate) {\n                    me.setStartEndDate(occurrenceDate, occurrenceEndDate, true);\n                    // Since we've changed the event start date the recurrence \"Days\"/\"MonthDays\"/\"Months\"\n                    // might get redundant in case the event start date matches the fields values\n                    // Calling recurrence sanitize() will clean the fields in this case.\n                    recurrence.suspendTimeSpanNotifying();\n                    recurrence.sanitize();\n                    recurrence.resumeTimeSpanNotifying();\n                }\n\n                // Either way, because of adjustment above, or initial correctness, we are in sync\n                // with our recurrence rule. A RecurrenceIterator is now able to calculate a correct\n                // UNTIL date from a COUNT value. See AbstractRecurrenceIterator#processIterationConfig\n                meta.isSyncedWithRule = true;\n            }\n            // Generate an occurrence which references this as its parent\n            else {\n                occurrence = me.copy(\n                    {\n                        [fieldMap.id.dataSource]        : id,\n                        [fieldMap.startDate.dataSource] : occurrenceDate,\n                        [fieldMap.endDate.dataSource]   : occurrenceEndDate,\n                        [fieldMap.duration.dataSource]  : duration,\n                        constraintDate                  : null,\n                        constraintType                  : null\n                    },\n                    { creatingOccurrence : true }\n                );\n\n                occurrence.recurringTimeSpan = me;\n            }\n\n            globalOccurrences?.set(id, occurrence);\n\n            // A recurring timespan keeps a by-startDate index of occurrences.\n            // And itself will be among those.\n            occurrenceMap.set(occurrenceKey, occurrence);\n        }\n\n        return occurrence;\n    }\n\n    createRecurrenceKey(date = this.startDate, dateKey = null) {\n        return `_generated:${this.id}:${dateKey || DateHelper.makeKey(date)}`;\n    }\n\n    // Converts this occurrence to a new \"master\" event\n    convertToRealEvent(wasSet, silent) {\n        if (!this.isOccurrence) {\n            return;\n        }\n\n        const\n            me = this,\n            {\n                recurringTimeSpan,\n                resource,\n                occurrenceIndex,\n                recurrence\n            }               = me,\n            count           = recurrence && recurringTimeSpan.recurrence.count,\n            // resourceRecords is a temporary property of occurrence events to handle cases\n            // if only resources has been updated. (change only resources won't mark record as dirty)\n            newResource     = wasSet?.resourceRecords?.value || me.data.newResource;\n\n        recurringTimeSpan.beginBatch();\n\n        me.detachFromRecurringEvent();\n\n        me.clearChanges();\n\n        // Must silently set our own ID, not be the key generated from our parent id and occurrence date.\n        // Must not result in the id field being in the modified state.\n        me.setData('id', me.generateId(recurringTimeSpan.eventStore));\n\n        if (newResource) {\n            // clear resourceId to avoid auto-adding to assignmentStore, it is handled manually bellow\n            delete me.data.resourceId;\n        }\n\n        // The impending changes to the former parent recurring event trigger a full refresh.\n        recurringTimeSpan.eventStore.add(me, silent);\n\n        // Ensure that the original count is honoured.\n        // If we are the 8th occurrence of 10, OUR repeat count must be 3.\n        if (count) {\n            me.recurrence.count = count - occurrenceIndex;\n        }\n\n        if (newResource || resource) {\n            me.assign(newResource || resource);\n        }\n\n        // remove data after apply\n        if (newResource) {\n            delete me.data.resourceRecords;\n        }\n        if (wasSet) {\n            delete wasSet.resourceRecords;\n        }\n\n        // Any change to a recurring events triggers a store refresh event.\n        recurringTimeSpan.endBatch();\n    }\n\n    afterChange(toSet, wasSet, silent, ...args) {\n        const\n            me             = this,\n            { eventStore } = me;\n\n        // reset cached recurrence instance in case \"recurrenceRule\" is changed\n        if ('recurrenceRule' in wasSet) {\n            me._recurrence = null;\n\n            // If we are a recurring event, we must be in the recurringEvents cache.\n            // If we are *not* a recurring event, we must *not* be in there.\n            // An event not yet in a store (eg dragging to create) won't have an eventStore.\n            eventStore?.recurringEvents[wasSet.recurrenceRule.value ? 'add' : 'delete'](me);\n        }\n\n        // Any change to an occurrence adds it to an event store, at which point\n        // it ceases to be an occurrence.\n        //\n        // If it has a recurrenceRule it becomes the start of a new recurring event series,\n        // and the old owning recurring event stops on the day before.\n        //\n        // If it has no recurrenceRule, it becomes an exception to its owning recurring event.\n        if (me.isOccurrence) {\n            me.convertToRealEvent(wasSet, silent);\n        }\n        // Setting a newException date must mark the exceptionDates as modified\n        else if ('newExceptionDate' in wasSet) {\n            me.meta.modified.exceptionDates = true;\n            delete me.meta.modified.newExceptionDate;\n\n            // Remove any occurrence on that date from our by-startDate cache\n            // and from the global occurrences cache\n            me.removeOccurrence(wasSet.newExceptionDate.value);\n        }\n\n        return super.afterChange(toSet, wasSet, silent, ...args);\n    }\n\n    /**\n     * Detaches an occurrence from its owning recurring event so that it can be added to the eventStore\n     * either as an exception, or as the start of a new recurring sequence.\n     * @internal\n     * @category Recurrence\n     */\n    detachFromRecurringEvent() {\n        const\n            me                                    = this,\n            // For access further down, breaking the link involves engine if trying to get the occurrenceDate later,\n            // resulting in the wrong date\n            { recurringTimeSpan, occurrenceDate, startDate } = me;\n\n        // Break the link\n        me.recurringTimeSpan = null;\n\n        // The occurrenceDate is injected into the data when an occurrence is created.\n        // the recurringTimeSpan's afterChange will remove any cache occurrence\n        // for this date; see above\n        recurringTimeSpan.addExceptionDate(occurrenceDate);\n\n        // If we still have a recurrenceRule, we're being promoted to be a new recurring event.\n        // The recurrence setter applies the rule immediately to occurrences, so this will\n        // always be correct.\n        if (me.recurrenceRule) {\n            // The RecurrenceModel removes occurrences and exceptions after this date\n            recurringTimeSpan.recurrence.endDate = DateHelper.add(startDate, -1, 'minute');\n        }\n    }\n\n    /**\n     * The setter used by Model#inSet when {@link #function-addExceptionDate} is called.\n     * Adding an exception must trigger change processing in a recurring event, so it must\n     * be changed through a {@link Core.data.Model#function-set} call. Also, the change must be batchable\n     * with other changes.\n     * @private\n     * @readonly\n     * @category Recurrence\n     */\n    set newExceptionDate(date) {\n        if (date) {\n            const exceptionDates = this.exceptionDates || (this.exceptionDates = {});\n\n            exceptionDates[DateHelper.makeKey(date)] = 1;\n        }\n    }\n\n    /**\n     * Adds an exception date that should be skipped when generating occurrences for the timespan.\n     * The methods adds an entry to the array kept in {@link #field-exceptionDates} field.\n     * @param {Date} date Exception date.\n     * @internal\n     * @category Recurrence\n     */\n    addExceptionDate(newExceptionDate) {\n        return this.set({\n            newExceptionDate\n        });\n    }\n\n    /**\n     * Does this recurring event have an exception on the passed date.\n     * @param {Date} date The date to find an exception for.\n     * @returns {Boolean} `true` if the event has an exception starting on the passed date.\n     * @category Recurrence\n     */\n    hasException(date) {\n        return this.exceptionDates?.[DateHelper.makeKey(date)];\n    }\n};\n", "import DH from '../../../Core/helper/DateHelper.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\nconst\n    oneDayMS = 1000 * 60 * 60 * 24;\n\n/**\n * @module Scheduler/model/mixin/EventModelMixin\n */\n\n/**\n * Predefined named colors (actual color might vary by theme):\n * <div class=\"b-colorbox b-inline b-sch-red\"></div>red,\n * <div class=\"b-colorbox b-inline b-sch-pink\"></div>pink,\n * <div class=\"b-colorbox b-inline b-sch-purple\"></div>purple,\n * <div class=\"b-colorbox b-inline b-sch-magenta\"></div>magenta,\n * <div class=\"b-colorbox b-inline b-sch-violet\"></div>violet,\n * <div class=\"b-colorbox b-inline b-sch-indigo\"></div>indigo,\n * <div class=\"b-colorbox b-inline b-sch-blue\"></div>blue,\n * <div class=\"b-colorbox b-inline b-sch-cyan\"></div>cyan,\n * <div class=\"b-colorbox b-inline b-sch-teal\"></div>teal,\n * <div class=\"b-colorbox b-inline b-sch-green\"></div>green,\n * <div class=\"b-colorbox b-inline b-sch-gantt-green\"></div>gantt-green\n * <div class=\"b-colorbox b-inline b-sch-lime\"></div>lime,\n * <div class=\"b-colorbox b-inline b-sch-yellow\"></div>yellow,\n * <div class=\"b-colorbox b-inline b-sch-orange\"></div>orange,\n * <div class=\"b-colorbox b-inline b-sch-deep-orange\"></div>deep-orange\n * <div class=\"b-colorbox b-inline b-sch-gray\"></div>gray\n * <div class=\"b-colorbox b-inline b-sch-light-gray\"></div>light-gray\n * @typedef {'red'|'pink'|'purple'|'magenta'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'gantt-green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'light-gray'|String|null} EventColor\n */\n// Colors also specified in a static getter in TimelineEventRendering.js\n\n/**\n * Mixin that holds configuration shared between events in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class EventModelMixin extends Target {\n    static get $name() {\n        return 'EventModelMixin';\n    }\n\n    // Flag checked by EventStore to make sure it uses a valid subclass\n    static get isEventModel() {\n        return true;\n    }\n\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * eventRecord.set('duration', 4);\n     * // eventRecord.endDate is not yet calculated\n     *\n     * await eventRecord.setAsync('duration', 4);\n     * // eventRecord.endDate is calculated\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events. If event is recurring, occurrences won't be updated\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n\n    //region Fields\n\n    static get fields() {\n        return [\n            // <remove-on-release>\n            // TODO: below startDate/endDate/duration fields docs copy-paste should be cleaned up after supporting @localdoc & @inheritdoc combination\n            // </remove-on-release>\n\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its\n             * duration (with reservation for other scheduling logic affecting the duration). If you want to change the\n             * `startDate` and `duration`, use {@link Scheduler/model/TimeSpan#function-setStartDate} instead (passing\n             * `false` as the second argument).\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and\n             * {@link Scheduler.model.TimeSpan#field-durationUnit} fields.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n\n            /**\n             * The unique identifier of a task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n\n            /**\n             * Id of the resource this event is associated with (only usable for single assignments). We recommend\n             * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`\n             * will have an assignment in AssignmentStore generated.\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            {\n                name     : 'resourceId',\n                internal : true\n            },\n\n            /**\n             * Ids of the resources this event is associated with (can be used for for multiple assignments).\n             * Any event using `resourceIds` will have assignments in AssignmentStore generated automatically.\n             * It only applies if is configured with `perist: true`.\n             * ```javascript\n             *   class CustomEventModel extends EventModel {\n             *       static get $name() {\n             *           return 'CustomEventModel';\n             *       }\n             *\n             *       static get fields() {\n             *           return [\n             *               { name : 'resourceIds', persist : true }\n             *           ];\n             *       }\n             *   };\n             *\n             *   const\n             *       resources   = [\n             *           { id : 'r1', name : 'Celia' },\n             *           { id : 'r2', name : 'Lee' },\n             *           { id : 'r3', name : 'Macy' },\n             *           { id : 'r4', name : 'Madison' }\n             *       ],\n             *       events      = [\n             *           {\n             *               id          : 1,\n             *               resourceIds : ['r1', 'r2']\n             *               ...\n             *           },\n             *           {\n             *               id          : 2,\n             *               resourceIds : ['r3', 'r4']\n             *               ...\n             *           }\n             *       ];\n             *\n             *   const scheduler = new Scheduler({\n             *       ...\n             *       eventStore : {\n             *           modelClass : CustomEventModel,\n             *           data       : events\n             *       },\n             *       ...\n             *   });\n             * ```\n             * @field {String[]|Number[]} resourceIds\n             * @category Common\n             */\n            {\n                name     : 'resourceIds',\n                type     : 'array',\n                persist  : false,\n                internal : true\n            },\n\n            /**\n             * The array of {@link Scheduler.model.ResourceModel resources} which are assigned to this event.\n             * @field {String|Number} resources\n             * @category Common\n             */\n            {\n                name   : 'resources',\n                column : {\n                    type : 'resourceassignment'\n                },\n                persist  : false,\n                // <remove-on-release>\n                // TODO: remove this when resourcecolumn is in Scheduler\n                // </remove-on-release>\n                internal : true,\n                useProp  : true\n            },\n\n            /**\n             * Specify false to prevent the event from being dragged (if EventDrag feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'draggable',\n                type         : 'boolean',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            },\n\n            /**\n             * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also\n             * specify `'start'` or `'end'` to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'resizable',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            }, // true, false, 'start' or 'end'\n\n            /**\n             * A field marking event as all day(s) spanning event.\n             * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.\n             * @field {Boolean} allDay\n             * @category Scheduling\n             */\n            {\n                name         : 'allDay',\n                type         : 'boolean',\n                defaultValue : false\n            },\n\n            /**\n             * Controls this events appearance, see Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for\n             * available options.\n             * @field {'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null} eventStyle\n             * @category Styling\n             */\n            {\n                name     : 'eventStyle',\n                internal : true\n            },\n\n            /**\n             * Controls the primary color of the event. For available standard colors, see\n             * {@link #typedef-EventColor}.\n             * @field {EventColor|String|null} eventColor\n             * @category Styling\n             */\n            {\n                name     : 'eventColor',\n                internal : true\n            },\n\n            /**\n             * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.\n             * @field {Number} milestoneWidth\n             * @category Styling\n             */\n            {\n                name     : 'milestoneWidth',\n                internal : true\n            },\n\n            /**\n             * Set this field to `false` to opt out of {@link Scheduler.feature.StickyEvents sticky event content}\n             * (keeping event text in view while scrolling).\n             * @field {Boolean} stickyContents\n             * @category Styling\n             */\n            {\n                name     : 'stickyContents',\n                internal : true\n            }\n        ];\n    }\n\n    //endregion\n\n    //region Id change\n\n    updateAssignmentEventIds() {\n        this.assigned.forEach(assignment => {\n            assignment.eventId = this.id;\n        });\n    }\n\n    syncId(value) {\n        super.syncId(value);\n\n        this.updateAssignmentEventIds();\n    }\n\n    //endregion\n\n    //region Resources\n\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Scheduler.model.ResourceModel[]}\n     * @category Assignments & Resources\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, { resource }) => {\n            resource && resources.push(resource.$original);\n            return resources;\n        }, []);\n    }\n\n    set resources(resources) {\n        resources = ArrayHelper.asArray(resources);\n\n        const\n            me             = this,\n            newResourceIds = resources.map(me.constructor.asId);\n\n        if (me.usesSingleAssignment) {\n            me.set('resourceId', newResourceIds[0]);\n        }\n        else if (me.fieldMap?.resourceIds.persist) {\n            me.resourceIds = newResourceIds;\n        }\n        else {\n            const\n                existingResourceIds                     = me.assignments.map(a => a.resource.id),\n                { onlyInA : toAdd, onlyInB : toRemove } = ArrayHelper.delta(newResourceIds, existingResourceIds);\n            // Add first, remove after. Otherwise event might get removed with its last assignment\n            me.assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n            me.assignmentStore.remove(toRemove.map(resourceId => me.assignments.find(a => a.resource.id === resourceId)));\n        }\n    }\n\n    /**\n     * Iterate over all associated resources\n     * @private\n     * @category Assignments & Resources\n     */\n    forEachResource(fn, thisObj = this) {\n        for (const resource of this.resources) {\n            if (fn.call(thisObj, resource) === false) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource\n     * with specified id.\n     *\n     * @param {String} [resourceId] To retrieve a specific resource\n     * @returns {Scheduler.model.ResourceModel}\n     * @category Assignments & Resources\n     */\n    getResource(resourceId) {\n        if (resourceId == null) {\n            return this.resource;\n        }\n\n        return this.resourceStore ? this.resourceStore.getById(resourceId) : null;\n    }\n\n    //endregion\n\n    //region Dates\n\n    get startDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n\n        return dt;\n    }\n\n    set startDate(startDate) {\n        if (this.batching) {\n            this._startDate = startDate;\n            this.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n        }\n    }\n\n    get endDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n\n        return dt;\n    }\n\n    set endDate(endDate) {\n        if (this.batching) {\n            this._endDate = endDate;\n            this.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n        }\n    }\n\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        return this.startDate;\n    }\n\n    set wrapStartDate(value) {}\n\n    get wrapEndDate() {\n        return this.endDate;\n    }\n\n    set wrapEndDate(value) {}\n\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     * @returns {Promise} A promise which is resolved when shift calculations are done\n     * @async\n     * @method shift\n     * @category Scheduling\n     */\n\n    //endregion\n\n    //region Is\n\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isEvent() {\n        return true;\n    }\n\n    /**\n     * Returns true if event can be drag and dropped\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isDraggable() {\n        return !this.readOnly && this.draggable;\n    }\n\n    /**\n     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can\n     * be resized.\n     *\n     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.\n     *\n     * @property {Boolean|String}\n     * @readonly\n     * @category Editing\n     */\n    get isResizable() {\n        return !this.isMilestone && (!this.isParent || this.manuallyScheduled) && this.resizable;\n    }\n\n    /**\n     * Returns false if the event is not persistable. By default it always is, override this getter if you need\n     * custom logic.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        // Records not yet fully created cannot be persisted\n        return super.isPersistable && !this.isCreating;\n    }\n\n    endBatch() {\n        const\n            me = this,\n            { isPersistable : wasPersistable, meta : { batchChanges } } = me;\n\n        // Remove cached values\n        // https://github.com/bryntum/support/issues/3358\n        if (batchChanges) {\n            if ('endDate' in batchChanges) {\n                delete me._endDate;\n                // When project recalculates start/end date and committing changes to record it calls endBatch. In this\n                // case wrap dates become invalid and should be reset on the record. We do it by forcing `null` value.\n                // Possible scenarios include adding dependency or moving first event in a dependency chain.\n                // Covered by pro/features/BufferTimeDependencies.t\n                // wrap date is an internal field we should be fine without mapping\n                if (me.postamble) {\n                    me.wrapEndDate = null;\n                }\n            }\n\n            if ('startDate' in batchChanges) {\n                delete me._startDate;\n\n                if (me.preamble) {\n                    me.wrapStartDate = null;\n                }\n            }\n        }\n\n        super.endBatch(...arguments);\n\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (me.isPersistable && !wasPersistable && !me.ignoreBag && me.assigned) {\n            for (const assignment of me.assigned) {\n                assignment.stores.forEach(s =>\n                    s.updateModifiedBagForRecord(assignment)\n                );\n            }\n        }\n    }\n\n    get isCreating() {\n        return super.isCreating;\n    }\n\n    set isCreating(value) {\n        super.isCreating = value;\n\n        this.assignmentStore?.suspendAutoCommit();\n        this.assignments.forEach(record => record.isCreating = value);\n        this.assignmentStore?.resumeAutoCommit();\n    }\n\n    //endregion\n\n    //region Single assignment compatibility\n\n    get usesSingleAssignment() {\n        return !this.eventStore || this.eventStore.usesSingleAssignment;\n    }\n\n    copy(...args) {\n        const copy = super.copy(...args);\n\n        // Don't copy resourceId when using multi assignment\n        if (!this.usesSingleAssignment) {\n            copy.resourceId = null;\n        }\n\n        return copy;\n    }\n\n    /**\n     * Override persistable getter to prevent sending resourceId when using multiple resource assignment mode\n     * https://github.com/bryntum/support/issues/1345\n     * @private\n     */\n    get persistableData() {\n        const data = super.persistableData;\n        if (!this.usesSingleAssignment) {\n            delete data.resourceId;\n        }\n        return data;\n    }\n\n    /**\n     * Returns the first assigned resource, or assigns a resource\n     * @member {Scheduler.model.ResourceModel} resource\n     * @category Assignments & Resources\n     */\n    get resource() {\n        const { resources } = this;\n        return resources.length ? resources[0] : null;\n    }\n\n    set resource(resourceRecord) {\n        // Use the resourceId setter for single assignment\n        this.resourceId = this.constructor.asId(resourceRecord);\n    }\n\n    get resourceId() {\n        return this.usesSingleAssignment ? this.get('resourceId') : this.resource?.id;\n    }\n\n    set resourceId(resourceId) {\n        this.applyResourceId(resourceId);\n    }\n\n    get resourceIds() {\n        if (this.fieldMap?.resourceIds.persist) {\n            return this.get('resourceIds');\n        }\n        else {\n            return this.resources?.map(r => r.id) ?? [];\n        }\n    }\n\n    set resourceIds(ids) {\n        this.set('resourceIds', ids);\n    }\n\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n\n    applyResourceId(resourceId, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n\n        // When part of an EventStore, resourceId are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n\n            if (resourceId != null) {\n                if (!me.meta.skipEnforcingSingleAssignment) {\n                    eventStore.usesSingleAssignment = true;\n                }\n\n                // Reassign if already assigned, only single assignment allowed\n                if (assignments?.length && resourceId !== assignments[0].resourceId) {\n                    //assignments[0].set('resourceId', resourceId, Boolean(me.eventStore.eventsSuspended));\n                    // Silent reassign if events are suspended on event store, won't be expecting UI update then\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments[0].resource = resourceId;\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.assignEventToResource(me, resourceId);\n                }\n            }\n            // Setting resourceId to null removes all assignments, if resourceIds is not set\n            else if (me.usesSingleAssignment || me.resourceIds?.length) {\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceId });\n        }\n    }\n\n    applyResourceIds(resourceIds, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n\n        if (me.fieldMap['resourceIds'].persist === false) {\n            return false;\n        }\n\n        // Remove duplicated value\n        resourceIds = [...new Set(resourceIds)];\n\n        // When part of an EventStore, resourceIds are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n\n            if (resourceIds?.length) {\n                // If there are assignments, update them with new resourceIds. If resourceIds\n                // contains more elements than existing assignments, add new ones,\n                // otherwise remove excess assignments not used anymore\n                if (assignments?.length) {\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n\n                    assignments.forEach(assignment => {\n                        const resourceIdToUpdate = resourceIds.find(resourceId =>\n                            !assignments.some(a => a.resourceId === resourceId));\n                        if (resourceIdToUpdate) {\n                            assignment.resource = resourceIdToUpdate;\n                        }\n                    });\n\n                    const { onlyInA : toAdd, onlyInB: toRemove } = ArrayHelper.delta(resourceIds, assignments.map(assignment => assignment.resourceId));\n                    assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n                    assignmentStore.remove(toRemove.map(resourceId => assignments.find(a => a.resource.id === resourceId)));\n\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.add(resourceIds.map(resourceId => ({ resource : resourceId, event : me })));\n                }\n            }\n            else {\n                // Setting resourceIds to an empty list removes all assignments\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceIds });\n        }\n    }\n\n    // Special handling of setting resourceId and resourceIds, creates assignment\n    applyValue(useProp, mapping, value, skipAccessors, field) {\n        if (field && !this.meta.isAssigning) {\n            const { eventStore } = this;\n\n            switch (field.name) {\n                case 'resourceId':\n                    eventStore && (eventStore.isAssigning = true);\n\n                    this.applyResourceId(value, true);\n                    break;\n                case 'resourceIds':\n                    eventStore && (eventStore.isAssigning = true);\n\n                    this.applyResourceIds(value, true);\n                    break;\n            }\n\n            eventStore && (eventStore.isAssigning = false);\n        }\n\n        super.applyValue(useProp, mapping, value, skipAccessors, field);\n    }\n\n    //endregion\n\n    //region Assignment\n\n    /**\n     * Returns all assignments for the event. Event must be part of the store for this method to work.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @readonly\n     * @category Assignments & Resources\n     */\n    get assignments() {\n        return [...(this.assigned || [])];\n    }\n\n    /**\n     * Assigns this event to the specified resource.\n     *\n     * *Note:* The event must be part of an EventStore for this to work. If the EventStore uses single assignment\n     * (loaded using resourceId) existing assignments will always be removed.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     *        Resource record or an id (or an array of such).\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @category Assignments & Resources\n     */\n    assign(resource, removeExistingAssignments = false) {\n        const { eventStore } = this;\n\n        if (eventStore && !eventStore.usesSingleAssignment) {\n            eventStore.assignEventToResource(this, resource, removeExistingAssignments);\n        }\n        else {\n            // Remember what resource to assign,  directly in single assignment mode or for later when we are joined to\n            // an EventStore\n            this.resourceId = this.constructor.asId(resource);\n\n            if (!eventStore) {\n                // Prevent flagging EventStore as using single assignment when that happens, we cannot know that here\n                this.meta.skipEnforcingSingleAssignment = true;\n            }\n        }\n    }\n\n    /**\n     * Unassigns this event from the specified resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} [resource] The resource to unassign from.\n     * @category Assignments & Resources\n     */\n    unassign(resource, removingResource = false) {\n        const me = this;\n\n        resource = me.constructor.asId(resource);\n\n        // If unassigned is caused by removing the resource the UI should be able to find out to not do extra redraws etc.\n        me.meta.removingResource = removingResource;\n\n        me.eventStore?.unassignEventFromResource(me, resource);\n\n        me.meta.removingResource = null;\n    }\n\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} oldResourceId A resource to unassign from or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} newResourceId A resource to assign to or its id\n     * @category Assignments & Resources\n     */\n    reassign(oldResourceId, newResourceId) {\n        this.eventStore && this.eventStore.reassignEventFromResourceToResource(this, oldResourceId, newResourceId);\n    }\n\n    /**\n     * Returns true if this event is assigned to a certain resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource to query for\n     * @returns {Boolean}\n     * @category Assignments & Resources\n     */\n    isAssignedTo(resource) {\n        const resourceId = this.constructor.asId(resource);\n        return this.assignments.some(assignment => assignment.resourceId === resourceId);\n    }\n\n    //endregion\n\n    //region Dependencies\n\n    /**\n     * Returns all predecessor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     */\n    get predecessors() {\n        return [...this.incomingDeps ?? []];\n    }\n\n    /**\n     * Returns all successor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     *\n     */\n    get successors() {\n        return [...this.outgoingDeps ?? []];\n    }\n\n    get dependencies() {\n        // Dependency feature listens for assignment changes pre commit, thus we risk deps not being set up yet\n        return [...this.incomingDeps ?? [], ...this.outgoingDeps ?? []];\n    }\n\n    //endregion\n\n    normalize() {\n        // Normalization handled by Engine\n    }\n\n    inSetNormalize() {\n        // Normalization handled by Engine\n    }\n\n    /**\n     * The \"main\" event this model is an occurrence of.\n     * Returns `null` for non-occurrences.\n     * @property {Scheduler.model.EventModel}\n     * @alias #Scheduler.model.mixin.RecurringTimeSpan#property-recurringTimeSpan\n     * @readonly\n     * @category Scheduling\n     */\n    get recurringEvent() {\n        return this.recurringTimeSpan;\n    }\n\n    /**\n     * Flag which indicates that this event is an interday event. This means that it spans\n     * an entire day or multiple days.\n     *\n     * This is essentially used by the Calendar package to determine if an event should\n     * go into the all day zone of a DayView.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Scheduling\n     */\n    get isInterDay() {\n        const { durationMS } = this;\n\n        // A full day (86400000 or more) marks as it as interDay,\n        // which means it belongs in the all day row of a Calendar DayView\n        if (durationMS >= oneDayMS || (!durationMS && this.allDay)) {\n            return true;\n        }\n\n        // Working out whether it crosses midnight is a little more difficult\n        const\n            {\n                endDate,\n                startDate\n            } = this,\n            eventStartMidnight = DH.clearTime(startDate);\n\n        // If either is null or NaN, we have to answer falsy\n        if (startDate && endDate) {\n            eventStartMidnight.setDate(eventStartMidnight.getDate() + 1);\n\n            // If the endDate is past midnight, it's interDay and goes in the all day row of a Calendar DayView\n            return (endDate || DH.add(startDate, durationMS)) > eventStartMidnight;\n        }\n    }\n\n    //region All day statics\n\n    static getAllDayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n\n        if (dt) {\n            dt = DH.clearTime(dt, true);\n        }\n\n        return dt;\n    }\n\n    static getAllDayEndDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('endDate');\n        }\n\n        if (dt && (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0)) {\n            dt = DH.getNext(dt, 'd', 1);\n        }\n\n        return dt;\n    }\n\n    static getAllDayDisplayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n\n        return DH.clearTime(dt, true);\n    }\n\n    static getAllDayDisplayEndDate(startDate, endDate) {\n        if (startDate && startDate.isEvent) {\n            endDate   = startDate.get('endDate');\n            startDate = startDate.get('startDate');\n        }\n\n        if (endDate) {\n            startDate = this.constructor.getAllDayDisplayStartDate(startDate);\n\n            // If date falls on start of the day - subtract one day to show end date correctly\n            // e.g. event starts on 2017-01-01 00:00 and ends on 2017-01-02 00:00, editor should show\n            // 2017-01-01 for both start and end\n            if (DH.clearTime(endDate, true).valueOf() === endDate.valueOf()) {\n                endDate = DH.add(endDate, DH.DAY, -1);\n            }\n            else if (startDate.valueOf() !== endDate.valueOf()) {\n                endDate = DH.clearTime(endDate, true);\n            }\n        }\n\n        return endDate;\n    }\n\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration}\n     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as\n     * editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     * @category Editing\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // end/duration is allowed to edit for leafs\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf;\n        }\n\n        return super.isEditable(fieldName);\n    }\n\n    //endregion\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\nimport EventModelMixin from './mixin/EventModelMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\n/* <remove-on-release> */\nimport { SchedulerBasicEvent } from '../../Engine/quark/model/scheduler_basic/SchedulerBasicEvent.js';\n/* </remove-on-release> */\nimport { SchedulerCoreEvent } from '../../Engine/quark/model/scheduler_core/SchedulerCoreEvent.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? SchedulerBasicEvent : /* </remove-on-release> */SchedulerCoreEvent;\n\n/**\n * @module Scheduler/model/EventModel\n */\n\n/**\n * This class represent a single event in your schedule, usually added to a {@link Scheduler.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an {@link Scheduler/model/EventModel} is normally part of an {@link Scheduler.data.EventStore},\n * which in turn is part of a project. When dates or the duration of an event is changed, the project performs async calculations\n * to normalize the other fields.\n * For example if {@link #field-duration} is changed, it will calculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, {@link #field-endDate} is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,\n * you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the {@link #field-startDate}, {@link #field-endDate}, {@link #field-resourceId} and name fields you can configure\n * them as seen below:\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource : 'taskStart' },\n *            { name: 'endDate', dataSource : 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource : 'userId' },\n *            { name: 'name', dataSource : 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n */\nexport default class EventModel extends EngineMixin.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin\n) {\n    static get $name() {\n        return 'EventModel';\n    }\n}\n\nEventModel.exposeProperties();\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport EventStoreMixin from './mixin/EventStoreMixin.js';\nimport GetEventsMixin from './mixin/GetEventsMixin.js';\nimport DayIndexMixin from './mixin/DayIndexMixin.js';\nimport RecurringEventsMixin from './mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\n/* <remove-on-release> */\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n/* </remove-on-release> */\nimport { CoreEventStoreMixin } from '../../Engine/quark/store/CoreEventStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? PartOfBaseProject(ChronoEventStoreMixin.derive(AjaxStore)) : /* </remove-on-release> */PartOfProject(CoreEventStoreMixin.derive(AjaxStore));\n\n/**\n * @module Scheduler/data/EventStore\n */\n\n/**\n * A store holding all the {@link Scheduler.model.EventModel events} to be rendered into a {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * ## Using recurring events\n * When recurring events are in the database, **all recurring event definitions** which started before\n * the requested start date, and have not yet finished recurring MUST be loaded into the EventStore.\n *\n * Only the **base** recurring event **definitions** are stored in the EventStore. You do not\n * need to calculate the future occurrence dates of these events. This is all handled by the EventStore.\n *\n * When asked to yield a set of events for a certain date range for creating a UI through\n * {@link #function-getEvents}, the EventStore *automatically* interpolates any occurrences of\n * recurring events into the results. They do not occupy slots in the EventStore for every date\n * in their repetition range (that would be very inefficient, and *might* be infinite).\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class EventStore extends EngineMixin.mixin(\n    RecurringEventsMixin,\n    EventStoreMixin,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n\n    static $name = 'EventStore';\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n}\n", "/**\n * @module Scheduler/model/mixin/AssignmentModelMixin\n */\n\n/**\n * Mixin that holds configuration shared between assignments in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class AssignmentModelMixin extends Target {\n    static get $name() {\n        return 'AssignmentModelMixin';\n    }\n\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // assignment.resource is not yet resolved\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // assignment.resource is resolved\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n\n    //region Fields\n\n    static get fields() {\n        return [\n            /**\n             * Id for the resource to assign to\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            'resourceId',\n\n            /**\n             * Id for the event to assign\n             * @field {String|Number} eventId\n             * @category Common\n             */\n            'eventId',\n\n            /**\n             * Specify `false` to opt out of drawing dependencies from/to this assignment\n             * @field {Boolean} drawDependencies\n             * @category Common\n             */\n            { name : 'drawDependencies', type : 'boolean' },\n\n            'event',\n\n            'resource'\n        ];\n    }\n\n    //endregion\n\n    construct(data, ...args) {\n        data = data || {};\n\n        const\n            { fieldMap }    = this,\n            eventIdField    = fieldMap.eventId.dataSource,\n            resourceIdField = fieldMap.resourceId.dataSource,\n            eventField      = fieldMap.event.dataSource,\n            resourceField   = fieldMap.resource.dataSource,\n            eventId         = data[eventIdField],\n            resourceId      = data[resourceIdField],\n            event           = data[eventField],\n            resource        = data[resourceField];\n\n        // Engine expects event and resource, not eventId and resourceId. We need to support both\n        if (eventId != null) {\n            data[eventField] = eventId;\n        }\n        else if (event != null) {\n            data[eventIdField] = event.isModel ? event.id : event;\n        }\n\n        if (resourceId != null) {\n            data[resourceField] = resourceId;\n        }\n        else if (resource != null) {\n            data[resourceIdField] = resource.isModel ? resource.id : resource;\n        }\n\n        super.construct(data, ...args);\n    }\n\n    //region Event & resource\n\n    /**\n     * A key made up from the event id and the id of the resource assigned to.\n     * @property eventResourceKey\n     * @readonly\n     * @internal\n     */\n    get eventResourceKey() {\n        return this.buildEventResourceKey(this.event, this.resource);\n    }\n\n    buildEventResourceKey(event, resource) {\n        let eventKey, resourceKey;\n\n        if (event) {\n            eventKey = event.isModel ? event.id : event;\n        }\n        else {\n            eventKey = this.internalId;\n        }\n\n        if (resource) {\n            resourceKey = resource.isModel ? resource.id : resource;\n        }\n        else {\n            resourceKey = this.internalId;\n        }\n        return `${eventKey}-${resourceKey}`;\n    }\n\n    buildIndexKey({ event, resource }) {\n        return this.buildEventResourceKey(event, resource);\n    }\n\n    set(field, value, ...args) {\n        const toSet = this.fieldToKeys(field, value);\n\n        // If resource was set, store its id as resourceId and announce it\n        if ('resource' in toSet) {\n            if (toSet.resource?.id !== undefined) {\n                toSet.resourceId = toSet.resource.id;\n            }\n        }\n        // If resourceId was set, we need to replace resource to have it re-referenced in engine\n        else if ('resourceId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.resource = toSet.resourceId;\n        }\n\n        // Same for event\n        if ('event' in toSet) {\n            if (toSet.event?.id !== undefined) {\n                toSet.eventId = toSet.event.id;\n            }\n        }\n        else if ('eventId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.event = toSet.eventId;\n        }\n\n        return super.set(toSet, null, ...args);\n    }\n\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        const me = this;\n\n        // Make sure Core Engine implementation notices \"resourceId\" change\n        // and updates \"resource\" field value respectively\n        if (!me.constructor.isProAssignmentModel && wasSet?.resourceId &&\n            me.resource?.id !== wasSet.resourceId.value) {\n            me.resource = wasSet.resourceId.value;\n        }\n        // If that's non-Core Engine and we have \"eventId\" indicated as just set\n        // and there was also \"event\" passed to set but it was not set\n        // and if that happens when propagating after sync-response applied\n        // - this means an event has changed its identifier\n        // (this fixes 11_backend.t.js in the Gantt)\n        else if (me.constructor.isProAssignmentModel && me.project?.propagatingSyncChanges &&\n            wasSet?.eventId && !wasSet?.event &&\n            (toSet.event.value === wasSet.eventId.value || toSet.event.value.id === wasSet.eventId.value)\n        ) {\n            // sanitize both wasSet and meta.modified\n            delete wasSet.eventId;\n            delete me.meta.modified.eventId;\n        }\n\n        return super.afterChange(...arguments);\n    }\n\n    // Settings resourceId relays to `resource`. Underlying data will be updated in `afterChange()` above\n    set resourceId(value) {\n        const { resource } = this;\n\n        // When assigning a new id to a resource, it will update the resourceId of the assignment. But the assignments\n        // resource is still the same so we need to announce here\n        if (resource?.isModel && resource.id === value) {\n            this.set('resourceId', value);\n        }\n        else {\n            this.resource = value;\n        }\n    }\n\n    get resourceId() {\n        // If assigned using `resource` and not `resourceId` there will be no resourceId\n        return this.resource?.id ?? this.get('resourceId');\n    }\n\n    // Same for event as for resourceId\n    set eventId(value) {\n        const { event } = this;\n\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (event?.isModel && event.id === value) {\n            this.set('eventId', value);\n        }\n        else {\n            this.event = value;\n        }\n    }\n\n    get eventId() {\n        // If assigned using `event` and not `eventId` there will be no eventId\n        return this.event?.id ?? this.get('eventId');\n    }\n\n    /**\n     * Convenience property to get the name of the associated event.\n     * @property {String}\n     * @readonly\n     */\n    get eventName() {\n        return this.event?.name;\n    }\n\n    /**\n     * Convenience property to get the name of the associated resource.\n     * @property {String}\n     * @readonly\n     */\n    get resourceName() {\n        return this.resource?.name;\n    }\n\n    // <remove-on-release>\n    // TODO: Deprecate in favor of `get resource`\n    // </remove-on-release>\n    /**\n     * Returns the resource associated with this assignment.\n     *\n     * @returns {Scheduler.model.ResourceModel} Instance of resource\n     */\n    getResource() {\n        return this.resource;\n    }\n\n    //endregion\n\n    // Convenience getter to not have to check `instanceof AssignmentModel`\n    get isAssignment() {\n        return true;\n    }\n\n    /**\n     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')\n     *\n     * @property {Boolean}\n     */\n    get isPersistable() {\n        const\n            {\n                event,\n                resource,\n                unjoinedStores,\n                assignmentStore\n            }           = this,\n            crudManager = assignmentStore?.crudManager;\n\n        let result;\n\n        if (assignmentStore) {\n            // If the owning event is not persistable, this assignment is also not persistable.\n            // if crud manager is used it can deal with phantom event/resource since it persists all records in one batch\n            // if no crud manager used we have to wait till event/resource are persisted\n            result = this.isValid && event.isPersistable && (crudManager || !event.hasGeneratedId && !resource.hasGeneratedId);\n        }\n        // if we remove the record\n        else {\n            result = !this.isPhantom && Boolean(unjoinedStores[0]);\n        }\n\n        // Records not yet fully created cannot be persisted\n        return result && super.isPersistable && !this.event?.isCreating;\n    }\n\n    get isValid() {\n        return this.resource != null && this.event != null;\n    }\n\n    /**\n     * Returns a textual representation of this assignment (e.g. Mike 50%).\n     * @returns {String}\n     */\n    toString() {\n        if (this.resourceName) {\n            return `${this.resourceName} ${Math.round(this.units)}%`;\n        }\n\n        return '';\n    }\n\n    //region STM hooks\n\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n\n        if (fieldName === 'event' || fieldName === 'eventId') {\n            const eventStore = this.project?.eventStore;\n\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n\n        if (fieldName === 'resource' || fieldName === 'resourceId') {\n            const resourceStore = this.project?.resourceStore;\n\n            if (resourceStore && resourceStore.oldIdMap[oldValue] === resourceStore.getById(newValue)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //endregion\n};\n", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport AssignmentModelMixin from './mixin/AssignmentModelMixin.js';\n/* <remove-on-release> */\nimport { BaseAssignmentMixin } from '../../Engine/quark/model/scheduler_basic/BaseAssignmentMixin.js';\n/* </remove-on-release> */\nimport { CoreAssignmentMixin } from '../../Engine/quark/model/scheduler_core/CoreAssignmentMixin.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? BaseAssignmentMixin : /* </remove-on-release> */CoreAssignmentMixin;\n\n/**\n * @module Scheduler/model/AssignmentModel\n */\n\n/**\n * This model represents a single assignment of a resource to an event in the scheduler, usually added to a\n * {@link Scheduler.data.AssignmentStore}.\n *\n * It is a subclass of the {@link Core.data.Model} class. Please refer to the documentation for that class to become\n * familiar with the base interface of this class.\n *\n * ## Fields and references\n *\n * An Assignment has the following fields:\n * - `id` - The id of the assignment\n * - `resourceId` - The id of the resource assigned (optionally replaced with `resource` for load)\n * - `eventId` - The id of the event to which the resource is assigned (optionally replaced with `event` for load)\n *\n * The data source for these fields can be customized by subclassing this class:\n *\n * ```javascript\n * class MyAssignment extends AssignmentModel {\n *   static get fields() {\n *       return [\n *          { name : 'resourceId', dataSource : 'linkedResource' }\n *       ];\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `event` - The linked event record\n * - `resource` - The linked resource record\n *\n * ## Async resolving of references\n *\n * As described above, an assignment links an event to a resource. It holds references to an event record and a resource\n * record. These references are populated async, using the calculation engine of the project that the assignment via\n * its store is a part of. Because of this asyncness, references cannot be used immediately after modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // assignment.resource is not yet available\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // assignment.resource is available\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // assignment.resource is available\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/AssignmentModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class AssignmentModel extends AssignmentModelMixin(PartOfProject(EngineMixin.derive(Model))) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n\n    /**\n     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after\n     * load it will be populated with the actual event and not its id. This field is not persistable.\n     * @field {Scheduler.model.EventModel} event\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Common\n     */\n\n    /**\n     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after\n     * load it will be populated with the actual resource and not its id. This field is not persistable.\n     * @field {Scheduler.model.ResourceModel} resource\n     * @accepts {String|Number|Scheduler.model.ResourceModel}\n     * @category Common\n     */\n\n    static get $name() {\n        return 'AssignmentModel';\n    }\n}\n\nAssignmentModel.exposeProperties();\n", "import Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/data/mixin/AssignmentStoreMixin\n */\n\n/**\n * This is a mixin, containing functionality related to managing assignments.\n *\n * It is consumed by the regular {@link Scheduler.data.AssignmentStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class AssignmentStoreMixin extends Target {\n    static get $name() {\n        return 'AssignmentStoreMixin';\n    }\n\n    /**\n     * Add assignments to the store.\n     *\n     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * // assignment.event is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * await assignmentStore.project.commitAsync();\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n\n    /**\n     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added assignments.\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n\n    /**\n     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId }];\n     * // assignmentStore.first.event is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId  }];\n     * await assignmentStore.project.commitAsync();\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @member {AssignmentModelConfig[]} data\n     * @category Records\n     */\n\n    /**\n     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @param {AssignmentModelConfig[]} data Array of AssignmentModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 300,\n\n            storeId : 'assignments'\n        };\n    }\n\n    add(newAssignments, ...args) {\n        newAssignments = ArrayHelper.asArray(newAssignments);\n\n        for (let i = 0; i < newAssignments.length; i++) {\n            let assignment = newAssignments[i];\n\n            if (!(assignment instanceof Model)) {\n                newAssignments[i] = assignment = this.createRecord(assignment);\n            }\n            if (!this.isSyncingDataOnLoad && this.storage.findIndex('eventResourceKey', assignment.eventResourceKey, true) !== -1) {\n                throw new Error(`Duplicate assignment Event: ${assignment.eventId} to resource: ${assignment.resourceId}`);\n            }\n            if (assignment.event?.isCreating) {\n                assignment.isCreating = true;\n            }\n        }\n        return super.add(newAssignments, ...args);\n    }\n\n    includesAssignment(eventId, resourceId) {\n        return this.storage.findIndex('eventResourceKey', `${eventId}-${resourceId}`, true) !== -1;\n    }\n\n    setStoreData(data) {\n        if (this.usesSingleAssignment) {\n            throw new Error('Data loading into AssignmentStore (multi-assignment mode) cannot be combined EventStore data containing resourceId (single-assignment mode)');\n        }\n\n        super.setStoreData(data);\n    }\n\n    //region Init & destroy\n\n    // This index fixes poor performance when you add large number of events to an event store with large number of\n    // events - if cache is missing existing records are iterated n² times.\n    // https://github.com/bryntum/support/issues/3154#issuecomment-881336588\n\n    set storage(storage) {\n        super.storage = storage;\n\n        // This allows a map based, fast lookup of assignments by their eventResourceKey.\n        // This is so that the test for duplicate assignment adding is fast.\n        this.storage.addIndex({ property : 'eventResourceKey', dependentOn : { event : true, resource : true } });\n    }\n\n    get storage() {\n        // Micro optimization to avoid expensive super call\n        return this._storage || super.storage;\n    }\n\n    //endregion\n\n    //region Stores\n\n    // To not have to do instanceof checks\n    get isAssignmentStore() {\n        return true;\n    }\n\n    //endregion\n\n    //region Recurrence\n\n    /**\n     * Returns a \"fake\" assignment used to identify a certain occurrence of a recurring event.\n     * If passed the original event, it returns `originalAssignment`.\n     * @param {Scheduler.model.AssignmentModel} originalAssignment\n     * @param {Scheduler.model.EventModel} occurrence\n     * @returns {Object} Temporary assignment\n     * @internal\n     */\n    getOccurrence(originalAssignment, occurrence) {\n        // Pass along the original assignment for non occurrence related calls\n        if (!originalAssignment || !occurrence?.isOccurrence) {\n            return originalAssignment;\n        }\n\n        // Not for saving chars, needed in fn below\n        const me = this;\n\n        return {\n            id                     : `${occurrence.id}:a${originalAssignment.id}`,\n            event                  : occurrence,\n            resource               : originalAssignment.resource,\n            eventId                : occurrence.id,\n            resourceId             : originalAssignment.resource.id,\n            isAssignment           : true,\n            // This field is required to distinguish this fake assignment when event is being removed from UI\n            isOccurrenceAssignment : true,\n            // Not being an actual record, instanceMeta is stored on the store instead\n            instanceMeta(instanceOrId) {\n                return me.occurrenceInstanceMeta(this, instanceOrId);\n            }\n        };\n    }\n\n    // Per fake assignment instance meta, stored on store since fakes are always generated on demand\n    occurrenceInstanceMeta(occurrenceAssignment, instanceOrId) {\n        const\n            me         = this,\n            instanceId = instanceOrId.id || instanceOrId,\n            { id }     = occurrenceAssignment;\n\n        let { occurrenceMeta } = me;\n\n        if (!occurrenceMeta) {\n            occurrenceMeta = me.occurrenceMeta = {};\n        }\n\n        if (!occurrenceMeta[id]) {\n            occurrenceMeta[id] = {};\n        }\n\n        return occurrenceMeta[id][instanceId] || (occurrenceMeta[id][instanceId] = {});\n    }\n\n    //endregion\n\n    //region Mapping\n\n    /**\n     * Maps over event assignments.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.EventModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForEvent(event, fn, filterFn) {\n        event = this.eventStore.getById(event);\n\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n\n        if (fnSet || filterFnSet) {\n            return event.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n\n                return result;\n            }, []);\n        }\n\n        return event.assignments;\n    }\n\n    /**\n     * Maps over resource assignments.\n     *\n     * @param {Scheduler.model.ResourceModel|Number|String} resource\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.ResourceModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForResource(resource, fn, filterFn) {\n        resource = this.resourceStore.getById(resource);\n\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n\n        if (fnSet || filterFnSet) {\n            return resource.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n\n                return result;\n            }, []);\n        }\n\n        return resource.assignments;\n    }\n\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForEvent(event) {\n        return event.assignments;\n    }\n\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @category Assignments\n     */\n    removeAssignmentsForEvent(event) {\n        return this.remove(event.assignments);\n    }\n\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource.assignments;\n    }\n\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|*} resource\n     * @category Assignments\n     */\n    removeAssignmentsForResource(resource) {\n        this.remove(this.getAssignmentsForResource(resource));\n    }\n\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Assignments\n     */\n    getResourcesForEvent(event) {\n        return event.resources;\n    }\n\n    /**\n     * Returns all events assigned to a resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.TimeSpan[]}\n     * @category Assignments\n     */\n    getEventsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n\n        return resource?.events;\n    }\n\n    /**\n     * Creates and adds assignment record(s) for a given event and resource(s).\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} resources The resource(s) to assign to the event\n     * @param {Function} [assignmentSetupFn] A hook function which takes an assignment as its argument and must return an assignment.\n     * @param {Boolean} [removeExistingAssignments] `true` to remove assignments for other resources\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assign\n     */\n    assignEventToResource(event, resources, assignmentSetupFn = null, removeExistingAssignments = false) {\n        const\n            me       = this,\n            toRemove = removeExistingAssignments ? new Set(event.assignments) : null;\n\n        resources = ArrayHelper.asArray(resources).map(r => r.$original ?? r);\n\n        if (me.eventStore?.usesSingleAssignment) {\n            // Use same code path as other single assignments if already assigned\n            if (event.assignments?.length) {\n                if (!me.isEventAssignedToResource(event, resources[0])) {\n                    event.resource = resources[0];\n                }\n                return [];\n            }\n            // otherwise - set \"resourceId\" and proceed to assignment creation\n            else {\n                event.resourceId = resources[0].id;\n            }\n        }\n\n        let newAssignments = [];\n\n        me.suspendAutoCommit();\n\n        // Assign\n        resources.forEach(resource => {\n            const existingAssignment = me.getAssignmentForEventAndResource(event, resource);\n            if (!existingAssignment) {\n                const assignment = {\n                    event,\n                    resource\n                };\n\n                newAssignments.push(assignmentSetupFn?.(assignment) ?? assignment);\n            }\n            else if (removeExistingAssignments) {\n                toRemove.delete(existingAssignment);\n            }\n        });\n\n        newAssignments = me.add(newAssignments);\n\n        if (removeExistingAssignments) {\n            me.remove(Array.from(toRemove));\n        }\n\n        // If true, will trigger a commit\n        me.resumeAutoCommit();\n\n        return newAssignments;\n    }\n\n    /**\n     * Removes assignment record for a given event and resource.\n     *\n     * @param {Scheduler.model.TimeSpan|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} [resources] The resource to unassign the event from. If omitted, all resources of the events will be unassigned\n     * @returns {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]}\n     * @category Assign\n     */\n    unassignEventFromResource(event, resources) {\n        const\n            me = this,\n            assignmentsToRemove = [];\n\n        if (!resources) {\n            return me.removeAssignmentsForEvent(event);\n        }\n\n        resources = ArrayHelper.asArray(resources);\n\n        for (let i = 0; i < resources.length; i++) {\n            if (me.isEventAssignedToResource(event, resources[i])) {\n                assignmentsToRemove.push(me.getAssignmentForEventAndResource(event, resources[i]));\n            }\n        }\n\n        return me.remove(assignmentsToRemove);\n    }\n\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event Event record or id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource record or id\n     * @returns {Boolean}\n     * @category Assignments\n     */\n    isEventAssignedToResource(event, resource) {\n        return Boolean(this.getAssignmentForEventAndResource(event, resource));\n    }\n\n    /**\n     * Returns an assignment record for a given event and resource\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event The event or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource or its id\n     * @returns {Scheduler.model.AssignmentModel}\n     * @category Assignments\n     */\n    getAssignmentForEventAndResource(event, resource) {\n        let assignments;\n\n        // Note: In order to not evaluate conditions which do not have to be evaluated each condition is assigned to a\n        // variable within the condition.\n        if (\n            !(event = this.eventStore.getById(event)) ||\n            !(assignments = event.assignments) ||\n            // Also note that resources are looked for in the master store if chained, to handle dragging between\n            // schedulers using chained versions of the same resource store. Needed since assignmentStore is shared and\n            // might point to wrong resourceStore (can only point to one)\n            !(resource = this.resourceStore.$master.getById(resource))\n        ) {\n            return null;\n        }\n\n        return this.getOccurrence(assignments.find(a => a.resource?.$original === resource.$original), event);\n    }\n\n    //endregion\n};\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nimport AssignmentStoreMixin from './mixin/AssignmentStoreMixin.js';\n/* <remove-on-release> */\nimport { ChronoAssignmentStoreMixin } from '../../Engine/quark/store/ChronoAssignmentStoreMixin.js';\n/* </remove-on-release> */\nimport { CoreAssignmentStoreMixin } from '../../Engine/quark/store/CoreAssignmentStoreMixin.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? PartOfBaseProject(ChronoAssignmentStoreMixin.derive(AjaxStore)) : /* </remove-on-release> */PartOfProject(CoreAssignmentStoreMixin.derive(AjaxStore));\n\n/**\n * @module Scheduler/data/AssignmentStore\n */\n\n/**\n * A store representing a collection of assignments between events in the {@link Scheduler.data.EventStore} and resources\n * in the {@link Scheduler.data.ResourceStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.AssignmentModel}.\n *\n * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\n * ResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\n * records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * assignmentStore.data = [{ eventId, resourceId }, ...];\n *\n * // references (event, resource) not resolved yet\n *\n * await assignmentStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n *\n * // references (event, resource) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/AssignmentStoreMixin\n * @mixes Scheduler/data/mixin/PartOfProject\n * @extends Core/data/AjaxStore\n */\nexport default class AssignmentStore extends AssignmentStoreMixin(EngineMixin) {\n\n    static $name = 'AssignmentStore';\n\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel\n        };\n    }\n\n}\n", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Model from '../../Core/data/Model.js';\nimport Duration from '../../Core/data/Duration.js';\n\n/**\n * @module Scheduler/model/DependencyBaseModel\n */\n\nconst canonicalDependencyTypes = [\n    'SS',\n    'SF',\n    'FS',\n    'FF'\n];\n\n/**\n * Base class used for both Scheduler and Gantt. Not intended to be used directly\n *\n * @extends Core/data/Model\n */\nexport default class DependencyBaseModel extends Model {\n    static get $name() {\n        return 'DependencyBaseModel';\n    }\n\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     **\n     * ```javascript\n     * dependency.set('from', 2);\n     * // dependency.fromEvent is not yet up to date\n     *\n     * await dependency.setAsync('from', 2);\n     * // dependency.fromEvent is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n\n    //region Fields\n\n    /**\n     * An enumerable object, containing names for the dependency types integer constants.\n     * - 0 StartToStart\n     * - 1 StartToEnd\n     * - 2 EndToStart\n     * - 3 EndToEnd\n     * @property {Object}\n     * @readonly\n     * @category Dependency\n     */\n    static get Type() {\n        return {\n            StartToStart : 0,\n            StartToEnd   : 1,\n            EndToStart   : 2,\n            EndToEnd     : 3\n        };\n    }\n\n    static get fields() {\n        return [\n            // 3 mandatory fields\n\n            /**\n             * From event, id of source event\n             * @field {String|Number} from\n             * @category Dependency\n             */\n            { name : 'from' },\n\n            /**\n             * To event, id of target event\n             * @field {String|Number} to\n             * @category Dependency\n             */\n            { name : 'to' },\n\n            /**\n             * Dependency type, see static property {@link #property-Type-static}\n             * @field {Number} type=2\n             * @category Dependency\n             */\n            { name : 'type', type : 'int', defaultValue : 2 },\n\n            /**\n             * CSS class to apply to lines drawn for the dependency\n             * @field {String} cls\n             * @category Styling\n             */\n            { name : 'cls', defaultValue : '' },\n\n            /**\n             * Bidirectional, drawn with arrows in both directions\n             * @field {Boolean} bidirectional\n             * @category Dependency\n             */\n            { name : 'bidirectional', type : 'boolean' },\n\n            /**\n             * Start side on source (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} fromSide\n             * @category Dependency\n             */\n            { name : 'fromSide', type : 'string' },\n\n            /**\n             * End side on target (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} toSide\n             * @category Dependency\n             */\n            { name : 'toSide', type : 'string' },\n\n            /**\n             * The magnitude of this dependency's lag (the number of units).\n             * @field {Number} lag\n             * @category Dependency\n             */\n            { name : 'lag', type : 'number', allowNull : true, defaultValue : 0 },\n\n            /**\n             * The units of this dependency's lag, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"ms\" (milliseconds)\n             * - \"s\" (seconds)\n             * - \"m\" (minutes)\n             * - \"h\" (hours)\n             * - \"d\" (days)\n             * - \"w\" (weeks)\n             * - \"M\" (months)\n             * - \"y\" (years)\n             *\n             * This field is readonly after creation, to change `lagUnit` use {@link #function-setLag setLag()}.\n             * @field {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} lagUnit\n             * @category Dependency\n             * @readonly\n             */\n            {\n                name         : 'lagUnit',\n                type         : 'string',\n                defaultValue : 'd'\n            },\n\n            { name : 'highlighted', persist : false, internal : true }\n        ];\n    }\n\n    // fromEvent/toEvent defined in CoreDependencyMixin in engine\n\n    /**\n     * Gets/sets the source event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Scheduler.model.EventModel} fromEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n\n    /**\n     * Gets/sets the target event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Scheduler.model.EventModel} toEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n\n    //endregion\n\n    //region Init\n\n    construct(data) {\n        const\n            from = data[this.fieldMap.from.dataSource],\n            to   = data[this.fieldMap.to.dataSource];\n\n        // Engine expects fromEvent and toEvent, not from and to. We need to support both\n        if (from != null) {\n            data.fromEvent = from;\n        }\n\n        if (to != null) {\n            data.toEvent = to;\n        }\n\n        super.construct(...arguments);\n    }\n\n    //endregion\n\n    get eventStore() {\n        return this.eventStore || this.unjoinedStores[0]?.eventStore;\n    }\n\n    set from(value) {\n        const { fromEvent } = this;\n\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (fromEvent?.isModel && fromEvent.id === value) {\n            this.set('from', value);\n        }\n        else {\n            this.fromEvent = value;\n        }\n    }\n\n    get from() {\n        return this.get('from');\n    }\n\n    set to(value) {\n        const { toEvent } = this;\n\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (toEvent?.isModel && toEvent.id === value) {\n            this.set('to', value);\n        }\n        else {\n            this.toEvent = value;\n        }\n    }\n\n    get to() {\n        return this.get('to');\n    }\n\n    /**\n     * Alias to dependency type, but when set resets {@link #field-fromSide} & {@link #field-toSide} to null as well.\n     *\n     * @property {Number}\n     * @category Dependency\n     */\n    get hardType() {\n        return this.getHardType();\n    }\n\n    set hardType(type) {\n        this.setHardType(type);\n    }\n\n    /**\n     * Returns dependency hard type, see {@link #property-hardType}.\n     *\n     * @returns {Number}\n     * @category Dependency\n     */\n    getHardType() {\n        return this.get('type');\n    }\n\n    /**\n     * Sets dependency {@link #field-type} and resets {@link #field-fromSide} and {@link #field-toSide} to null.\n     *\n     * @param {Number} type\n     * @category Dependency\n     */\n    setHardType(type) {\n        let result;\n\n        if (type !== this.hardType) {\n            result = this.set({\n                type,\n                fromSide : null,\n                toSide   : null\n            });\n        }\n\n        return result;\n    }\n\n    get lag() {\n        return this.get('lag');\n    }\n\n    set lag(lag) {\n        this.setLag(lag);\n    }\n\n    /**\n     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation\n     * @param {Number|String|Object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} [lagUnit] Unit for numeric lag value, see\n     * {@link #field-lagUnit} for valid values\n     * @category Dependency\n     */\n    setLag(lag, lagUnit = this.lagUnit) {\n        // Either they're only setting the magnitude\n        // or, if it's a string, parse the full duration.\n        if (arguments.length === 1) {\n            if (typeof lag === 'number') {\n                this.lag = lag;\n            }\n            else {\n                //<debug>\n                if (typeof lag !== 'string') {\n                    throw new Error('Depenedency#setLag accepts either numeric magnitude, or a duration string');\n                }\n                //</debug>\n                lag = DateHelper.parseDuration(lag);\n                this.set({\n                    lag     : lag.magnitude,\n                    lagUnit : lag.unit\n                });\n            }\n            return;\n        }\n\n        // Must be a number\n        lag = parseFloat(lag);\n\n        this.set({\n            lag,\n            lagUnit\n        });\n    }\n\n    getLag() {\n        if (this.lag) {\n            return `${this.lag < 0 ? '-' : '+'}${Math.abs(this.lag)}${DateHelper.getShortNameOfUnit(this.lagUnit)}`;\n        }\n        return '';\n    }\n\n    /**\n     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:\n     * @property {Core.data.Duration}\n     * @property {Number} fullLag.magnitude The magnitude of the duration\n     * @property {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} fullLag.unit The unit in which the duration is measured, eg\n     * `'d'` for days\n     * @category Dependency\n     */\n    get fullLag() {\n        return new Duration({\n            unit      : this.lagUnit,\n            magnitude : this.lag\n        });\n    }\n\n    set fullLag(lag) {\n        if (typeof lag === 'string') {\n            this.setLag(lag);\n        }\n        else {\n            this.setLag(lag.magnitude, lag.unit);\n        }\n    }\n\n    /**\n     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        const\n            me = this,\n            { stores, unjoinedStores } = me,\n            store = stores[0];\n\n        let result;\n\n        if (store) {\n            const\n                { fromEvent, toEvent } = me,\n                crudManager            = store.crudManager;\n\n            // if crud manager is used it can deal with phantom source/target since it persists all records in one batch\n            // if no crud manager used we have to wait till source/target are persisted\n            result = fromEvent && (crudManager || !fromEvent.hasGeneratedId) && toEvent && (crudManager || !toEvent.hasGeneratedId);\n        }\n        else {\n            result = Boolean(unjoinedStores[0]);\n        }\n\n        return result && super.isPersistable;\n    }\n\n    getDateRange() {\n        const { fromEvent, toEvent } = this;\n\n        if (fromEvent?.isScheduled && toEvent?.isScheduled) {\n            const Type = DependencyBaseModel.Type;\n\n            let sourceDate,\n                targetDate;\n\n            switch (this.type) {\n                case Type.StartToStart:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n\n                case Type.StartToEnd:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n\n                case Type.EndToEnd:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n\n                case Type.EndToStart:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n\n                default:\n                    throw new Error('Invalid dependency type: ' + this.type);\n            }\n\n            return {\n                start : Math.min(sourceDate, targetDate),\n                end   : Math.max(sourceDate, targetDate)\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Applies given CSS class to dependency, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    highlight(cls) {\n        const classes = this.highlighted?.split(' ') ?? [];\n\n        if (!classes.includes(cls)) {\n            this.highlighted = classes.concat(cls).join(' ');\n        }\n    }\n\n    /**\n     * Removes given CSS class from dependency if applied, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    unhighlight(cls) {\n        const { highlighted } = this;\n\n        if (highlighted) {\n            const\n                classes = highlighted.split(' '),\n                index   = classes.indexOf(cls);\n\n            if (index >= 0) {\n                classes.splice(index, 1);\n                this.highlighted = classes.join(' ');\n            }\n        }\n    }\n\n    /**\n     * Checks if the given CSS class is applied to dependency.\n     *\n     * @param {String} cls\n     * @returns {Boolean}\n     * @category Dependency\n     */\n    isHighlightedWith(cls) {\n        return this.highlighted && this.highlighted.split(' ').includes(cls);\n    }\n\n    getConnectorString(raw) {\n        const rawValue = canonicalDependencyTypes[this.type];\n\n        if (raw) {\n            return rawValue;\n        }\n\n        // FS => empty string; it's the default\n        if (this.type === DependencyBaseModel.Type.EndToStart) {\n            return '';\n        }\n\n        return rawValue;\n    }\n\n    // getConnectorStringFromType(type, raw) {\n    //     const rawValue = canonicalDependencyTypes[type];\n    //\n    //     if (raw) {\n    //         return rawValue;\n    //     }\n    //\n    //     // FS => empty string; it's the default\n    //     if (type === DependencyBaseModel.Type.EndToStart) {\n    //         return '';\n    //     }\n    //\n    //     const locale = LocaleManager.locale;\n    //\n    //     // See if there is a local version of SS, SF or FF\n    //     if (locale) {\n    //         const localized = locale.Scheduler && locale.Scheduler[rawValue];\n    //         if (localized) {\n    //             return localized;\n    //         }\n    //     }\n    //\n    //     return rawValue;\n    // }\n\n    // getConnectorString(raw) {\n    //     return this.getConnectorStringFromType(this.type);\n    // }\n\n    // * getConnectorStringGenerator(raw) {\n    //     return this.getConnectorStringFromType(yield this.$.type);\n    // }\n\n    toString() {\n        return `${this.from}${this.getConnectorString()}${this.getLag()}`;\n    }\n\n    /**\n     * Returns `true` if the dependency is valid. It is considered valid if it has a valid type and both from and to\n     * events are set and pointing to different events.\n     *\n     * @property {Boolean}\n     * @typings ignore\n     * @category Editing\n     */\n    get isValid() {\n        const { fromEvent, toEvent, type } = this;\n\n        return typeof type === 'number' && fromEvent && toEvent && fromEvent !== toEvent;\n    }\n\n    get fromEventName() {\n        return this.fromEvent?.name || '';\n    }\n\n    get toEventName() {\n        return this.toEvent?.name || '';\n    }\n\n    //region STM hooks\n\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n\n        if (fieldName === 'from' || fieldName === 'to' || fieldName === 'fromEvent' || fieldName === 'toEvent') {\n\n            const eventStore = this.project?.eventStore;\n\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    //endregion\n}\n\nDependencyBaseModel.exposeProperties();\n", "import DependencyBaseModel from './DependencyBaseModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\n/* <remove-on-release> */\nimport { BaseDependencyMixin } from '../../Engine/quark/model/scheduler_basic/BaseDependencyMixin.js';\n/* </remove-on-release> */\nimport { CoreDependencyMixin } from '../../Engine/quark/model/scheduler_core/CoreDependencyMixin.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? BaseDependencyMixin : /* </remove-on-release> */CoreDependencyMixin;\n\n/**\n * @module Scheduler/model/DependencyModel\n */\n\n/**\n * This model represents a dependency between two events, usually added to a {@link Scheduler.data.DependencyStore}.\n *\n * It is a subclass of the {@link Scheduler.model.DependencyBaseModel} class, which in its turn subclasses\n * {@link Core.data.Model}. Please refer to documentation of those classes to become familiar with the base interface of\n * this class.\n *\n * ## Fields and references\n *\n * A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\n * the subclass, see the example below. Please also refer to {@link Core.data.Model} for details.\n *\n * ```javascript\n * class MyDependency extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource: 'targetId' },\n *       { name: 'from', dataSource: 'sourceId' }\n *     ]);\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `fromEvent` - The event on the start side of the dependency\n * - `toEvent` - The event on the end side of the dependency\n *\n * ## Async resolving of references\n *\n * As described above, a dependency has links to events. These references are populated async, using the calculation\n * engine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\n * used immediately after modifications:\n *\n * ```javascript\n * dependency.from = 2;\n * // dependency.fromEvent is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * dependency.from = 2;\n * await dependency.project.commitAsync();\n * // dependency.fromEvent is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await dependency.setAsync({ from : 2});\n * // dependency.fromEvent is up to date\n * ```\n *\n * @extends Scheduler/model/DependencyBaseModel\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class DependencyModel extends PartOfProject(EngineMixin.derive(DependencyBaseModel)) {\n    static get $name() {\n        return 'DependencyModel';\n    }\n\n    // Determines the type of dependency based on fromSide and toSide\n    getTypeFromSides(fromSide, toSide, rtl) {\n        const\n            types     = DependencyBaseModel.Type,\n            startSide = rtl ? 'right' : 'left',\n            endSide   = rtl ? 'left' : 'right';\n\n        if (fromSide === startSide) {\n            return (toSide === startSide) ? types.StartToStart : types.StartToEnd;\n        }\n\n        return (toSide === endSide) ? types.EndToEnd : types.EndToStart;\n    }\n}\n\nDependencyModel.exposeProperties();\n", "import ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport Model from '../../../Core/data/Model.js';\n\n/**\n * @module Scheduler/data/mixin/DependencyStoreMixin\n */\n\n/**\n * This is a mixin, containing functionality related to managing dependencies.\n *\n * It is consumed by the regular {@link Scheduler.data.DependencyStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class DependencyStoreMixin extends Target {\n    static get $name() {\n        return 'DependencyStoreMixin';\n    }\n\n    /**\n     * Add dependencies to the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * // dependency.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * await dependencyStore.project.commitAsync();\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n\n    /**\n     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added dependencies.\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n\n    /**\n     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * // dependencyStore.first.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * await dependencyStore.project.commitAsync();\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @member {DependencyModelConfig[]} data\n     * @category Records\n     */\n\n    /**\n     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @param {DependencyModelConfig[]} data Array of DependencyModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400,\n\n            storeId : 'dependencies'\n        };\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    reduceEventDependencies(event, reduceFn, result, flat = true, depsGetterFn) {\n        depsGetterFn = depsGetterFn || (event => this.getEventDependencies(event));\n\n        event = ArrayHelper.asArray(event);\n\n        event.reduce((result, event) => {\n            if (event.children && !flat) {\n                event.traverse(evt => {\n                    result = depsGetterFn(evt).reduce(reduceFn, result);\n                });\n            }\n            else {\n                result = depsGetterFn(event).reduce(reduceFn, result);\n            }\n        }, result);\n\n        return result;\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    mapEventDependencies(event, fn, filterFn, flat, depsGetterFn) {\n        return this.reduceEventDependencies(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat, depsGetterFn);\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    mapEventPredecessors(event, fn, filterFn, flat) {\n        return this.reduceEventPredecessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    mapEventSuccessors(event, fn, filterFn, flat) {\n        return this.reduceEventSuccessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n\n    /**\n     * Returns all dependencies for a certain event (both incoming and outgoing)\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.DependencyModel[]}\n     */\n    getEventDependencies(event) {\n        return [].concat(event.predecessors || [], event.successors || []);\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    removeEventDependencies(event) {\n        this.remove(this.getEventDependencies(event));\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    removeEventPredecessors(event) {\n        this.remove(event.predecessors);\n    }\n\n    // <remove-on-release>\n    // TODO: document\n    // </remove-on-release>\n    removeEventSuccessors(event, flat) {\n        this.remove(event.successors);\n    }\n\n    getBySourceTargetId(key) {\n        // <remove-on-release>\n        // TODO: in original code this uses a keymap\n        // </remove-on-release>\n        return this.records.find(r =>\n            key == this.constructor.makeDependencySourceTargetCompositeKey(r.from, r.to)\n        );\n    }\n\n    /**\n     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st\n     * task to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent 1st event\n     * @param {Scheduler.model.EventModel|String} targetEvent 2nd event\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) {\n        sourceEvent = Model.asId(sourceEvent);\n        targetEvent = Model.asId(targetEvent);\n\n        return this.getBySourceTargetId(this.constructor.makeDependencySourceTargetCompositeKey(sourceEvent, targetEvent));\n    }\n\n    /**\n     * Returns a dependency model instance linking given events if such dependency exists in the store.\n     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent\n     * @param {Scheduler.model.EventModel|String} targetEvent\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getEventsLinkingDependency(sourceEvent, targetEvent) {\n        return this.getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) ||\n            this.getDependencyForSourceAndTargetEvents(targetEvent, sourceEvent);\n    }\n\n    /**\n     * Validation method used to validate a dependency. Override and return `true` to indicate that an\n     * existing dependency between two tasks is valid. For a new dependency being created please see\n     * {@link #function-isValidDependencyToCreate}.\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.TimeSpan|Number|String} dependencyOrFromId The dependency\n     * model, the from task/event or the id of the from task/event\n     * @param {Scheduler.model.TimeSpan|Number|String} [toId] To task/event or id thereof if the first parameter is not\n     * a dependency record\n     * @param {Number} [type] Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static} if the first\n     * parameter is not a dependency model instance.\n     * @returns {Boolean}\n     */\n    async isValidDependency(dependencyOrFromId, toId, type) {\n        let fromEvent = dependencyOrFromId, toEvent = toId;\n\n        if (dependencyOrFromId == null) {\n            return false;\n        }\n\n        // Accept dependency model\n        if (dependencyOrFromId.isDependencyModel) {\n            ({ fromEvent, toEvent } = dependencyOrFromId);\n        }\n\n        // Accept from as id\n        fromEvent = this.eventStore.getById(fromEvent);\n\n        // Accept to as id\n        toEvent = this.eventStore.getById(toEvent);\n\n        // This condition is supposed to map all model instances to be validated by project. Lowest common ancestor\n        // for scheduler event, scheduler pro event and gantt task is TimeSpan\n        if (fromEvent && toEvent) {\n            // Block creating dependencies to display only tasks in Gantt\n            if (!fromEvent.project || !toEvent.project) {\n                return false;\n            }\n\n            // Not asserting dependency type here. Default value should normally suffice.\n            return this.project.isValidDependency(fromEvent, toEvent, type);\n        }\n\n        return dependencyOrFromId !== toId;\n    }\n\n    /**\n     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that\n     * a new dependency is valid to be created.\n     *\n     * @param {Scheduler.model.TimeSpan|Number|String} fromId From event/task or id\n     * @param {Scheduler.model.TimeSpan|Number|String} toId To event/task or id\n     * @param {Number} type Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static}\n     * @returns {Boolean}\n     */\n    isValidDependencyToCreate(fromId, toId, type) {\n        return this.isValidDependency(fromId, toId, type);\n    }\n\n    /**\n     * Returns all dependencies highlighted with the given CSS class\n     *\n     * @param {String} cls\n     * @returns {Scheduler.model.DependencyBaseModel[]}\n     */\n    getHighlightedDependencies(cls) {\n        return this.records.reduce((result, dep) => {\n            if (dep.isHighlightedWith(cls)) result.push(dep);\n            return result;\n        }, []);\n    }\n\n    static makeDependencySourceTargetCompositeKey(from, to) {\n        return `source(${from})-target(${to})`;\n    }\n\n    //region Product neutral\n\n    getTimeSpanDependencies(record) {\n        return this.getEventDependencies(record);\n    }\n\n    //endregion\n};\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport DependencyStoreMixin from './mixin/DependencyStoreMixin.js';\n/* <remove-on-release> */\nimport { ChronoDependencyStoreMixin } from '../../Engine/quark/store/ChronoDependencyStoreMixin.js';\n/* </remove-on-release> */\nimport { CoreDependencyStoreMixin } from '../../Engine/quark/store/CoreDependencyStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\n\nconst EngineMixin = /* <remove-on-release> */ globalThis.bryntum?.useBasicEngine ? PartOfBaseProject(ChronoDependencyStoreMixin.derive(AjaxStore)) : /* </remove-on-release> */PartOfProject(CoreDependencyStoreMixin.derive(AjaxStore));\n\n/**\n * @module Scheduler/data/DependencyStore\n */\n\n/**\n * A store representing a collection of dependencies between events in the {@link Scheduler.data.EventStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.DependencyModel}.\n *\n * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * dependencyStore.data = [{ from, to }, ...];\n *\n * // references (fromEvent, toEvent) not resolved yet\n *\n * await dependencyStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await dependencyStore.loadDataAsync([{ from, to }, ...]);\n *\n * // references (fromEvent, toEvent) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/DependencyStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class DependencyStore extends DependencyStoreMixin(EngineMixin.derive(AjaxStore)) {\n\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel\n        };\n    }\n\n}\n", "/**\n * @module Scheduler/crud/mixin/AbstractCrudManagerValidation\n */\n\n/**\n * Mixin proving responses validation API to Crud Manager.\n * @mixin\n */\nexport default Target => class AbstractCrudManagerValidation extends Target {\n\n    static get $name() {\n        return 'AbstractCrudManagerValidation';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * This config validates the response structure for requests made by the Crud Manager.\n             * When `true`, the Crud Manager checks every parsed response structure for errors\n             * and if the response format is invalid, a warning is logged to the browser console.\n             *\n             * The config is intended to help developers implementing backend integration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            validateResponse : true,\n\n            /**\n             * When `true` treats parsed responses without `success` property as successful.\n             * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            skipSuccessProperty : true,\n\n            crudLoadValidationWarningPrefix : 'CrudManager load response error(s):',\n\n            crudSyncValidationWarningPrefix : 'CrudManager sync response error(s):',\n\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/scheduler/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-supportShortSyncResponse)',\n\n            disableValidationNote : 'Note: To disable this validation please set the \"validateResponse\" config to false'\n        };\n    }\n\n    get crudLoadValidationMandatoryStores() {\n        return [];\n    }\n\n    getStoreLoadResponseWarnings(storeInfo, responded, expectedResponse) {\n        const\n            messages        = [],\n            { storeId }     = storeInfo,\n            mandatoryStores = this.crudLoadValidationMandatoryStores,\n            result          = { [storeId] : {} };\n\n        // if the store section is responded\n        if (responded) {\n            if (!responded.rows) {\n                messages.push(`- \"${storeId}\" store section should have a \"rows\" property with an array of the store records.`);\n\n                result[storeId].rows = ['...'];\n            }\n        }\n        // if the store is mandatory\n        else if (mandatoryStores?.includes(storeId)) {\n            messages.push(`- No \"${storeId}\" store section found. It should contain the store data.`);\n\n            result[storeId].rows = ['...'];\n        }\n\n        // extend expected response w/ this store part\n        if (messages.length) {\n            Object.assign(expectedResponse, result);\n        }\n\n        return messages;\n    }\n\n    getLoadResponseWarnings(response) {\n        const\n            messages         = [],\n            expectedResponse = {};\n\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            messages.push(...this.getStoreLoadResponseWarnings(storeInfo, response?.[storeId], expectedResponse));\n        });\n\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\"/g, '...'));\n\n            messages.push(this.disableValidationNote);\n        }\n\n        return messages;\n    }\n\n    validateLoadResponse(response) {\n        const messages = this.getLoadResponseWarnings(response);\n\n        if (messages.length) {\n            console.warn(this.crudLoadValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n\n    getStoreSyncResponseWarnings(storeInfo, requested, responded, expectedResponse) {\n        const\n            messages         = [],\n            missingRows      = [],\n            missingRemoved   = [],\n            { storeId }      = storeInfo,\n            result           = { [storeId] : {} },\n            phantomIdField   = storeInfo.phantomIdField || this.phantomIdField,\n            { modelClass }   = storeInfo.store,\n            { idField }      = modelClass,\n            respondedRows    = responded?.rows || [],\n            respondedRemoved = responded?.removed || [];\n\n        let showSupportShortSyncResponseNote = false;\n\n        // if added records were passed in the request they should be mentioned in the response\n        if (requested?.added) {\n            missingRows.push(\n                ...requested.added.filter(record => {\n                    return !respondedRows.find(row => row[phantomIdField] == record[phantomIdField]) &&\n                        !respondedRemoved.find(row => row[phantomIdField] == record[phantomIdField] || row[idField] == record[phantomIdField]);\n                }).map(record => ({ [phantomIdField] : record[phantomIdField], [idField] : '...' }))\n            );\n\n            if (missingRows.length) {\n                const missingIds = missingRows.map(row => '#' + row[phantomIdField]).join(', ');\n\n                messages.push(`- \"${storeId}\" store \"rows\" section should mention added record(s) ${missingIds} sent in the request. ` +\n                    'It should contain the added records identifiers (both phantom and \"real\" ones assigned by the backend).');\n            }\n        }\n\n        // if short responses are enabled\n        if (this.supportShortSyncResponse) {\n            // if the data is not object, will return error\n            if (!missingRows.length && responded) {\n                if (typeof responded !== 'object' || Array.isArray(responded)) {\n                    messages.push(`- \"${storeId}\" store section should be an Object.`);\n                    result[storeId]['...'] = '...';\n                }\n\n                // for request to edit records, if rows is present, it must be an array\n                if (responded.rows && !Array.isArray(responded.rows)) {\n                    messages.push(`- \"${storeId}\" store \"rows\" section should be an array`);\n                    missingRows.push('...');\n                }\n\n                // removed if presented must be an array\n                if (responded.removed && !Array.isArray(responded.removed)) {\n                    messages.push(`- \"${storeId}\" store \"removed\" section should be an array:`);\n                    missingRemoved.push('...');\n                }\n            }\n        }\n        // if short responses are disabled\n        else {\n            // if updated records were passed in the request they should be mentioned in the response\n            if (requested?.updated) {\n                const missingUpdatedRows = requested.updated.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                    .map(record => ({ [idField] : record[idField] }));\n\n                missingRows.push(...missingUpdatedRows);\n\n                if (missingUpdatedRows.length) {\n                    const missingIds = missingUpdatedRows.map(row => '#' + row[idField]).join(', ');\n\n                    messages.push(`- \"${storeId}\" store \"rows\" section should mention updated record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the updated record identifiers.`);\n\n                    showSupportShortSyncResponseNote = true;\n                }\n\n            }\n\n            if (missingRows.length) {\n                missingRows.push('...');\n            }\n\n            // if removed records were passed in the request they should be mentioned in the response\n            if (requested?.removed) {\n                missingRemoved.push(\n                    ...requested.removed.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                        .map(record => ({ [idField] : record[idField] }))\n                );\n\n                if (missingRemoved.length) {\n                    const missingIds = missingRemoved.map(row => '#' + row[idField]).join(', ');\n\n                    messages.push(`- \"${storeId}\" store \"removed\" section should mention removed record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the removed record identifiers.`);\n\n                    result[storeId].removed = missingRemoved;\n                    missingRemoved.push('...');\n\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n\n        }\n\n        if (missingRows.length) {\n            result[storeId].rows = missingRows;\n        }\n\n        // get rid of store section if no rows/removed there\n        if (!messages.length) {\n            delete result[storeId];\n        }\n\n        // extend expected response w/ this store part\n        Object.assign(expectedResponse, result);\n\n        return { messages, showSupportShortSyncResponseNote };\n    }\n\n    getSyncResponseWarnings(response, requestDesc) {\n        const\n            messages         = [],\n            expectedResponse = {},\n            request          = requestDesc.pack;\n\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n\n        let showSupportShortSyncResponseNote = false;\n\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            const warnings = this.getStoreSyncResponseWarnings(storeInfo, request?.[storeId], response[storeId], expectedResponse);\n\n            showSupportShortSyncResponseNote = showSupportShortSyncResponseNote || warnings.showSupportShortSyncResponseNote;\n\n            messages.push(...warnings.messages);\n        });\n\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\":\\s*\"\\.\\.\\.\"/g, ',,,').replace(/\"\\.\\.\\.\"/g, '...'));\n\n            if (showSupportShortSyncResponseNote) {\n                messages.push(this.supportShortSyncResponseNote);\n            }\n\n            messages.push(this.disableValidationNote);\n        }\n\n        return messages;\n    }\n\n    validateSyncResponse(response, request) {\n        const messages = this.getSyncResponseWarnings(response, request);\n\n        if (messages.length) {\n            console.warn(this.crudSyncValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n};\n", "import Store from '../../Core/data/Store.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Base from '../../Core/Base.js';\nimport Events from '../../Core/mixin/Events.js';\nimport AbstractCrudManagerValidation from './mixin/AbstractCrudManagerValidation.js';\n\n/**\n * @module Scheduler/crud/AbstractCrudManagerMixin\n */\n\nexport class AbstractCrudManagerError extends Error {}\n\nexport class CrudManagerRequestError extends AbstractCrudManagerError {\n    constructor(cfg = {}) {\n        super(cfg.message || cfg.request && StringHelper.capitalize(cfg.request?.type) + ' failed' || 'Crud Manager request failed');\n        Object.assign(this, cfg);\n        this.action = this.request?.type;\n    }\n}\n\nconst\n    storeSortFn     = function(lhs, rhs, sortProperty) {\n        // <remove-on-release>\n        // TODO: get rid of these StoreDescriptors. Just use Stores.\n        // </remove-on-release>\n        if (lhs.store) {\n            lhs = lhs.store;\n        }\n        if (rhs.store) {\n            rhs = rhs.store;\n        }\n\n        lhs = lhs[sortProperty] || 0;\n        rhs = rhs[sortProperty] || 0;\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    },\n\n    // Sorter function to keep stores in loadPriority order\n    storeLoadSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'loadPriority');\n    },\n\n    // Sorter function to keep stores in syncPriority order\n    storeSyncSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'syncPriority');\n    };\n\n/**\n * An abstract mixin that supplies most of the CrudManager functionality.\n * It implements basic mechanisms of collecting stores to organize batch communication with a server.\n * It does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes.\n * Out of the box there are mixins implementing {@link Scheduler/crud/transport/AjaxTransport support of AJAX for data transferring}\n * and {@link Scheduler/crud/encoder/JsonEncoder JSON for data encoding system}.\n * For example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the data\n * to the server:\n *\n * ```javascript\n * class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {\n *     ...\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - {@link #function-sendRequest}\n * - {@link #function-cancelRequest}\n * - {@link #function-encode}\n * - {@link #function-decode}\n *\n * @mixin\n * @mixes Core/mixin/Delayable\n * @mixes Core/mixin/Events\n * @mixes Scheduler/crud/mixin/AbstractCrudManagerValidation\n * @abstract\n */\nexport default Target => {\n\n    // Trigger $meta calculation to get up-to-date is \"isXXX\" flags\n    // (kinky construction to avoid production minification faced in Angular https://github.com/bryntum/support/issues/2889)\n    Target.$$meta = Target.$meta;\n\n    const mixins = [];\n\n    // These two mixins are mixed in the Scheduling Engine code ..but in its own way\n    // so that Base.mixin() cannot understand that they are already there and applies them 2nd time\n    if (!Target.isEvents) {\n        mixins.push(Events);\n    }\n    if (!Target.isDelayable) {\n        mixins.push(Delayable);\n    }\n\n    mixins.push(AbstractCrudManagerValidation);\n\n    return class AbstractCrudManagerMixin extends (Target || Base).mixin(...mixins) {\n\n        /**\n         * Fires before server response gets applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeResponseApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n         * @param {Object} response The decoded server response object.\n         */\n\n        /**\n         * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeLoadApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         * @param {Object} options Options provided to the {@link #function-load} method.\n         */\n        /**\n         * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeSyncApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         */\n\n        static get $name() {\n            return 'AbstractCrudManagerMixin';\n        }\n\n        //region Default config\n\n        static get defaultConfig() {\n            return {\n                /**\n                 * The server revision stamp.\n                 * The _revision stamp_ is a number which should be incremented after each server-side change.\n                 * This property reflects the current version of the data retrieved from the server and gets updated\n                 * after each {@link #function-load} and {@link #function-sync} call.\n                 * @property {Number}\n                 * @readonly\n                 * @category CRUD\n                 */\n                crudRevision : null,\n\n                /**\n                 * A list of registered stores whose server communication will be collected into a single batch.\n                 * Each store is represented by a _store descriptor_.\n                 * @member {CrudManagerStoreDescriptor[]} crudStores\n                 * @category CRUD\n                 */\n\n                /**\n                 * Sets the list of stores controlled by the CRUD manager.\n                 *\n                 * When adding a store to the CrudManager, make sure the server response format is correct for `load`\n                 * and `sync` requests. Learn more in the\n                 * [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n                 *\n                 * Store can be provided by itself, its storeId or as a _store descriptor_.\n                 * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n                 * @category CRUD\n                 */\n                crudStores : [],\n\n                /**\n                 * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a\n                 * store to use it by id. Store identifier is used as a container name holding corresponding store data\n                 * while transferring them to/from the server. By default, `storeId` property is used. And in case a\n                 * container identifier has to differ this config can be used:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // store id is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON, so we create a new property \"storeIdForCrud\"\n                 *         id             : 'meow',\n                 *         storeIdForCrud : 'cats'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores           : ['meow'],\n                 *     // crud manager will get store identifier from \"storeIdForCrud\" property\n                 *     storeIdProperty  : 'storeIdForCrud'\n                 * });\n                 * ```\n                 * The `storeIdProperty` property can also be specified directly on a store:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON\n                 *         id              : 'meow',\n                 *         // so we create a new property \"storeIdForCrud\"..\n                 *         storeIdForCrud  : 'cats',\n                 *         // and point CrudManager to use it as the store identifier source\n                 *         storeIdProperty  : 'storeIdForCrud'\n                 *     }\n                 * });\n                 *\n                 * class DogStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"dogs\" and it will be used as a container name for the store data\n                 *         storeId : 'dogs',\n                 *         // id is set to get a store by identifier\n                 *         id      : 'dogs'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 * new DogStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores : ['meow', 'dogs']\n                 * });\n                 * ```\n                 * @config {String}\n                 * @category CRUD\n                 */\n                storeIdProperty : 'storeId',\n\n                // <remove-on-release>\n                // TODO: no support for remote filtering yet\n                // /**\n                //  * The name of the 'filter' parameter to send in a load request.\n                //  * @config {String}\n                //  * @default\n                //  */\n                // </remove-on-release>\n                crudFilterParam : 'filter',\n\n                /**\n                 * Sends request to the server.\n                 * @function sendRequest\n                 * @param {Object} request The request to send. An object having following properties:\n                 * @param {'load'|'sync'} request.type Request type, can be either `load` or `sync`\n                 * @param {String} request.data {@link #function-encode Encoded} request.\n                 * @param {Function} request.success Callback to be started on successful request transferring\n                 * @param {Function} request.failure Callback to be started on request transfer failure\n                 * @param {Object} request.thisObj `this` reference for the above `success` and `failure` callbacks\n                 * @returns {Promise} The request promise.\n                 * @abstract\n                 */\n\n                /**\n                 * Cancels request to the server.\n                 * @function cancelRequest\n                 * @param {Promise} promise The request promise to cancel (a value returned by corresponding\n                 * {@link #function-sendRequest} call).\n                 * @param {Function} reject Reject handle of the corresponding promise\n                 * @abstract\n                 */\n\n                /**\n                 * Encodes request to the server.\n                 * @function encode\n                 * @param {Object} request The request to encode.\n                 * @returns {String} The encoded request.\n                 * @abstract\n                 */\n\n                /**\n                 * Decodes response from the server.\n                 * @function decode\n                 * @param {String} response The response to decode.\n                 * @returns {Object} The decoded response.\n                 * @abstract\n                 */\n\n                transport : {},\n\n                /**\n                 * When `true` forces the CRUD manager to process responses depending on their `type` attribute.\n                 * So `load` request may be responded with `sync` response for example.\n                 * Can be used for smart server logic allowing the server to decide when it's better to respond with a\n                 * complete data set (`load` response) or it's enough to return just a delta (`sync` response).\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                trackResponseType : false,\n\n                /**\n                 * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the\n                 * *sync* response. In this case response should include only server side changes.\n                 *\n                 * **Please note that added records should still be mentioned in response to provide real identifier\n                 * instead of the phantom one.**\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                supportShortSyncResponse : true,\n\n                /**\n                 * Field name to be used to transfer a phantom record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomIdField : '$PhantomId',\n\n                /**\n                 * Field name to be used to transfer a phantom parent record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomParentIdField : '$PhantomParentId',\n\n                /**\n                 * Specify `true` to automatically call {@link #function-load} method on the next frame after creation.\n                 *\n                 * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to\n                 * register its stores before loading starts.\n                 *\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoLoad : false,\n\n                /**\n                 * The timeout in milliseconds to wait before persisting changes to the server.\n                 * Used when {@link #config-autoSync} is set to `true`.\n                 * @config {Number}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSyncTimeout : 100,\n\n                /**\n                 * `true` to automatically persist store changes after edits are made in any of the stores monitored.\n                 * Please note that sync request will not be invoked immediately but only after\n                 * {@link #config-autoSyncTimeout} interval.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSync : false,\n\n                /**\n                 * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them\n                 * to the server.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                resetIdsBeforeSync : true,\n\n                /**\n                 * @member {CrudManagerStoreDescriptor[]} syncApplySequence\n                 * An array of stores presenting an alternative sync responses apply order.\n                 * Each store is represented by a _store descriptor_.\n                 * @category CRUD\n                 */\n\n                /**\n                 * An array of store identifiers sets an alternative sync responses apply order.\n                 * By default, the order in which sync responses are applied to the stores is the same as they\n                 * registered in. But in case of some tricky dependencies between stores this order can be changed:\n                 *\n                 *```javascript\n                 * class MyCrudManager extends CrudManager {\n                 *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')\n                 *     crudStores : ['store1', 'store2', 'store3'],\n                 *     // but we apply changes from server to them in an opposite order\n                 *     syncApplySequence : ['store3', 'store2', 'store1']\n                 * });\n                 *```\n                 * @config {String[]}\n                 * @category CRUD\n                 */\n                syncApplySequence : [],\n\n                orderedCrudStores : [],\n\n                /**\n                 * `true` to write all fields from the record to the server.\n                 * If set to `false` it will only send the fields that were modified.\n                 * Note that any fields that have {@link Core/data/field/DataField#config-persist} set to `false` will\n                 * still be ignored and fields having {@link Core/data/field/DataField#config-alwaysWrite} set to `true`\n                 * will always be included.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                writeAllFields : false,\n\n                crudIgnoreUpdates : 0,\n\n                autoSyncSuspendCounter : 0,\n\n                // Flag that shows if crud manager performed successful load request\n                crudLoaded : false,\n\n                applyingLoadResponse : false,\n                applyingSyncResponse : false,\n\n                callOnFunctions : true\n            };\n        }\n\n        static configurable = {\n            /**\n             * Convenience shortcut to set only the url to load from, when you do not need to supply any other config\n             * options in the `load` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     loadUrl : 'read.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'read.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.load.url`.\n             *\n             * @prp {String}\n             */\n            loadUrl : null,\n\n            /**\n             * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config\n             * options in the `sync` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     syncUrl : 'sync.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'sync.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.sync.url`.\n             *\n             * @prp {String}\n             */\n            syncUrl : null,\n\n            /**\n             * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local\n             * changes. Useful in a polling scenario, to keep client up to date with the backend.\n             * @prp {Boolean}\n             */\n            forceSync : null\n        };\n\n        static delayable = {\n            // Postponed to next frame, to allow Scheduler created after CrudManager to inject its stores\n            // (timeRanges, resourceTimeRanges)\n            doAutoLoad : 'raf'\n        };\n\n        get isCrudManager() {\n            return true;\n        }\n\n        //endregion\n\n        //region Init\n\n        construct(config = {}) {\n            this._requestId = 0;\n            this.activeRequests = {};\n            this.crudStoresIndex = {};\n\n            super.construct(config);\n        }\n\n        afterConstruct() {\n            super.afterConstruct();\n\n            if (this.autoLoad) {\n                this._autoLoadPromise = this.doAutoLoad();\n            }\n        }\n\n        //endregion\n\n        //region Configs\n\n        get loadUrl() {\n            return this.transport?.load?.url;\n        }\n\n        updateLoadUrl(url) {\n            ObjectHelper.setPath(this, 'transport.load.url', url);\n        }\n\n        get syncUrl() {\n            return this.transport?.sync?.url;\n        }\n\n        updateSyncUrl(url) {\n            ObjectHelper.setPath(this, 'transport.sync.url', url);\n        }\n\n        //endregion\n\n        //region Store descriptors & index\n\n        /**\n         * Returns a registered store descriptor.\n         * @param {String|Core.data.Store} storeId The store identifier or registered store instance.\n         * @returns {CrudManagerStoreDescriptor} The descriptor of the store.\n         * @category CRUD\n         */\n        getStoreDescriptor(storeId) {\n            if (!storeId) return null;\n\n            if (storeId instanceof Store) return this.crudStores.find(storeDesc => storeDesc.store === storeId);\n\n            if (typeof storeId === 'object') return this.crudStoresIndex[storeId.storeId];\n\n            return this.crudStoresIndex[storeId] || this.getStoreDescriptor(Store.getStore(storeId));\n        }\n\n        fillStoreDescriptor(descriptor) {\n            const\n                { store } = descriptor,\n                {\n                    storeIdProperty = this.storeIdProperty,\n                    modelClass\n                }         = store;\n\n            if (!descriptor.storeId) {\n                descriptor.storeId = store[storeIdProperty] || store.id;\n            }\n            if (!descriptor.idField) {\n                descriptor.idField = modelClass.idField;\n            }\n            if (!descriptor.phantomIdField) {\n                descriptor.phantomIdField = modelClass.phantomIdField;\n            }\n            if (!descriptor.phantomParentIdField) {\n                descriptor.phantomParentIdField = modelClass.phantomParentIdField;\n            }\n            if (!('writeAllFields' in descriptor)) {\n                descriptor.writeAllFields = store.writeAllFields;\n            }\n\n            return descriptor;\n        }\n\n        updateCrudStoreIndex() {\n            const\n                crudStoresIndex = this.crudStoresIndex = {};\n\n            this.crudStores.forEach(store => store.storeId && (crudStoresIndex[store.storeId] = store));\n        }\n\n        //endregion\n\n        //region Store collection (add, remove, get & iterate)\n\n        /**\n         * Returns a registered store.\n         * @param {String} storeId Store identifier.\n         * @returns {Core.data.Store} Found store instance.\n         * @category CRUD\n         */\n        getCrudStore(storeId) {\n            const storeDescriptor = this.getStoreDescriptor(storeId);\n            return storeDescriptor?.store;\n        }\n\n        forEachCrudStore(fn, thisObj = this) {\n            if (!fn) {\n                throw new Error('Iterator function must be provided');\n            }\n\n            this.crudStores.every(store =>\n                fn.call(thisObj, store.store, store.storeId, store) !== false\n            );\n        }\n\n        set crudStores(stores) {\n            this._crudStores = [];\n\n            this.addCrudStore(stores);\n\n            // Ensure preconfigured stores stay stable at the start of the array when\n            // addPrioritizedStore attempts to insert in order. Only featured gantt/scheduler stores\n            // must participate in the ordering. If they were configured in, they must not move.\n            for (const store of this._crudStores) {\n                store.loadPriority = store.syncPriority = 0;\n            }\n        }\n\n        get crudStores() {\n            return this._crudStores;\n        }\n\n        get orderedCrudStores() {\n            return this._orderedCrudStores;\n        }\n\n        set orderedCrudStores(stores) {\n            return this._orderedCrudStores = stores;\n        }\n\n        set syncApplySequence(stores) {\n            this._syncApplySequence = [];\n\n            this.addStoreToApplySequence(stores);\n        }\n\n        get syncApplySequence() {\n            return this._syncApplySequence;\n        }\n\n        internalAddCrudStore(store) {\n            const\n                me = this;\n\n            let storeInfo;\n\n            // if store instance provided\n            if (store instanceof Store) {\n                storeInfo = { store };\n            }\n            else if (typeof store === 'object') {\n                if (!store.store) {\n                    // not a store descriptor, assume it is a store config\n                    store = {\n                        storeId : store.id,\n                        store   : new Store(store)\n                    };\n                }\n\n                storeInfo = store;\n            }\n            // if it's a store identifier\n            else {\n                storeInfo = { store : Store.getStore(store) };\n            }\n\n            me.fillStoreDescriptor(storeInfo);\n\n            // store instance\n            store = storeInfo.store;\n\n            // if the store has \"setCrudManager\" hook - use it\n            if (store.setCrudManager) {\n                store.setCrudManager(me);\n            }\n            // otherwise decorate the store w/ \"crudManager\" property\n            else {\n                store.crudManager = me;\n            }\n\n            // Stores have a defaultConfig for pageSize. CrudManager does not support that.\n            // <remove-on-release>\n            // TODO: PORT currently no support for paging.\n            // </remove-on-release>\n            store.pageSize = null;\n\n            // Prevent AjaxStores from performing their own CRUD operations if CrudManager is configured with an URL\n            if (me.loadUrl || me.syncUrl) {\n                store.autoCommit = false;\n                store.autoLoad = false;\n                if (store.createUrl || store.updateUrl || store.deleteUrl || store.readUrl) {\n                    console.warn('You have configured an URL on a Store that is handled by a CrudManager that is also configured with an URL. The Store URL\\'s should be removed.');\n                }\n            }\n\n            // listen to store changes\n            me.bindCrudStoreListeners(store);\n\n            return storeInfo;\n        }\n\n        /**\n         * Adds a store to the collection.\n         *\n         *```javascript\n         * // append stores to the end of collection\n         * crudManager.addCrudStore([\n         *     store1,\n         *     // storeId\n         *     'bar',\n         *     // store descriptor\n         *     {\n         *         storeId : 'foo',\n         *         store   : store3\n         *     },\n         *     {\n         *         storeId         : 'bar',\n         *         store           : store4,\n         *         // to write all fields of modified records\n         *         writeAllFields  : true\n         *     }\n         * ]);\n         *```\n         *\n         * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n         * Exactly in this order the loaded data will be put into each store.\n         *\n         * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n         * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n         *\n         * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n         * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of collection\n         * crudManager.addCrudStore([ store4, store5 ], 0);\n         * ```\n         *\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addCrudStore(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addCrudStore(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addCrudStore(store, position, fromStore) {\n            store = ArrayHelper.asArray(store);\n\n            if (!store?.length) {\n                return;\n            }\n\n            const\n                me     = this,\n                stores = store.map(me.internalAddCrudStore, me);\n\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.crudStores.push(...stores);\n            }\n            // if position specified\n            else {\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    position += me.crudStores.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                me.crudStores.splice(position, 0, ...stores);\n            }\n\n            me.orderedCrudStores.push(...stores);\n\n            me.updateCrudStoreIndex();\n        }\n\n        // Adds configured scheduler stores to the store collection ensuring correct order\n        // unless they're already registered.\n        addPrioritizedStore(store) {\n            const me = this;\n\n            if (!me.hasCrudStore(store)) {\n                me.addCrudStore(store, ArrayHelper.findInsertionIndex(store, me.crudStores, storeLoadSortFn));\n            }\n            if (!me.hasApplySequenceStore(store)) {\n                me.addStoreToApplySequence(store, ArrayHelper.findInsertionIndex(store, me.syncApplySequence, storeSyncSortFn));\n            }\n        }\n\n        hasCrudStore(store) {\n            return this.crudStores?.some(s => s === store || s.store === store || s.storeId === store);\n        }\n\n        /**\n         * Removes a store from collection. If the store was registered in alternative sync sequence list\n         * it will be removed from there as well.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeCrudStore(\"foo\");\n         *\n         * // remove store3\n         * crudManager.removeCrudStore(store3);\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeCrudStore(store) {\n            const\n                me         = this,\n                stores     = me.crudStores,\n                foundStore = stores.find(s => s === store || s.store === store || s.storeId === store);\n\n            if (foundStore) {\n                // unbind store listeners\n                me.unbindCrudStoreListeners(foundStore.store);\n\n                delete me.crudStoresIndex[foundStore.storeId];\n                ArrayHelper.remove(stores, foundStore);\n\n                if (me.syncApplySequence) {\n                    me.removeStoreFromApplySequence(store);\n                }\n            }\n            else {\n                throw new Error('Store not found in stores collection');\n            }\n        }\n\n        //endregion\n\n        //region Store listeners\n\n        bindCrudStoreListeners(store) {\n            store.ion({\n                name : store.id,\n\n                // When a tentatively added record gets confirmed as permanent, this signals a change\n                addConfirmed : 'onCrudStoreChange',\n                change       : 'onCrudStoreChange',\n                destroy      : 'onCrudStoreDestroy',\n                thisObj      : this\n            });\n        }\n\n        unbindCrudStoreListeners(store) {\n            this.detachListeners(store.id);\n        }\n\n        //endregion\n\n        //region Apply sequence\n\n        /**\n         * Adds a store to the alternative sync responses apply sequence.\n         * By default, the order in which sync responses are applied to the stores is the same as they registered in.\n         * But this order can be changes either on construction step using {@link #config-syncApplySequence} option\n         * or by calling this method.\n         *\n         * **Please note**, that if the sequence was not initialized before this method call then\n         * you will have to do it yourself like this for example:\n         *\n         * ```javascript\n         * // alternative sequence was not set for this crud manager\n         * // so let's fill it with existing stores keeping the same order\n         * crudManager.addStoreToApplySequence(crudManager.crudStores);\n         *\n         * // and now we can add our new store\n         *\n         * // we will load its data last\n         * crudManager.addCrudStore(someNewStore);\n         * // but changes to it will be applied first\n         * crudManager.addStoreToApplySequence(someNewStore, 0);\n         * ```\n         * add registered stores to the sequence along with the store(s) you want to add\n         *\n         * @param {Core.data.Store|CrudManagerStoreDescriptor|Core.data.Store[]|CrudManagerStoreDescriptor[]} store The\n         * store to add or its _descriptor_ (or array of stores or descriptors).\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of sequence\n         * crudManager.addStoreToApplySequence([ store4, store5 ], 0);\n         * ```\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addStoreToApplySequence(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addStoreToApplySequence(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addStoreToApplySequence(store, position, fromStore) {\n            if (!store) {\n                return;\n            }\n\n            store = ArrayHelper.asArray(store);\n\n            const\n                me   = this,\n                // loop over list of stores to add\n                data = store.reduce((collection, store) => {\n                    const s = me.getStoreDescriptor(store);\n                    s && collection.push(s);\n                    return collection;\n                }, []);\n\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.syncApplySequence.push(...data);\n\n                // if position specified\n            }\n            else {\n                let pos = position;\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    pos += me.syncApplySequence.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                //me.syncApplySequence.splice.apply(me.syncApplySequence, [].concat([pos, 0], data));\n                me.syncApplySequence.splice(pos, 0, ...data);\n            }\n\n            const sequenceKeys = me.syncApplySequence.map(({ storeId }) => storeId);\n\n            me.orderedCrudStores = [...me.syncApplySequence];\n            me.crudStores.forEach(storeDesc => {\n                if (!sequenceKeys.includes(storeDesc.storeId)) {\n                    me.orderedCrudStores.push(storeDesc);\n                }\n            });\n        }\n\n        /**\n         * Removes a store from the alternative sync sequence.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeStoreFromApplySequence(\"foo\");\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeStoreFromApplySequence(store) {\n            const index = this.syncApplySequence.findIndex(s => s === store || s.store === store || s.storeId === store);\n            if (index > -1) {\n                this.syncApplySequence.splice(index, 1);\n\n                // ordered crud stores list starts with syncApplySequence, we can use same index\n                this.orderedCrudStores.splice(index, 1);\n            }\n        }\n\n        hasApplySequenceStore(store) {\n            return this.syncApplySequence.some(s => s === store || s.store === store || s.storeId === store);\n        }\n\n        //endregion\n\n        //region Events\n\n        // Remove stores that are destroyed, to not try and apply response changes etc. to them\n        onCrudStoreDestroy({ source : store }) {\n            this.removeCrudStore(store);\n        }\n\n        onCrudStoreChange(event) {\n            const me = this;\n\n            if (me.crudIgnoreUpdates) {\n                return;\n            }\n\n            /**\n             * Fires when data in any of the registered data stores is changed.\n             * ```javascript\n             *     crudManager.on('hasChanges', function (crud) {\n             *         // enable persist changes button when some store gets changed\n             *         saveButton.enable();\n             *     });\n             * ```\n             * @event hasChanges\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n             */\n\n            if (me.crudStoreHasChanges(event?.source)) {\n                me.trigger('hasChanges');\n\n                if (me.autoSync) {\n                    me.scheduleAutoSync();\n                }\n            }\n            else {\n                me.trigger('noChanges');\n            }\n        }\n\n        /**\n         * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).\n         * @category CRUD\n         */\n        suspendAutoSync() {\n            this.autoSyncSuspendCounter++;\n        }\n\n        /**\n         * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.\n         * @param {Boolean} [doSync=true] Pass `true` to schedule a sync after resuming (if there are pending\n         * changes) and `false` to not persist the changes.\n         * @category CRUD\n         */\n        resumeAutoSync(doSync = true) {\n            const me = this;\n\n            me.autoSyncSuspendCounter--;\n\n            if (me.autoSyncSuspendCounter <= 0) {\n                me.autoSyncSuspendCounter = 0;\n\n                // if configured to trigger persisting and there are changes\n                if (doSync && me.autoSync && me.crudStoreHasChanges()) {\n                    me.scheduleAutoSync();\n                }\n            }\n        }\n\n        get isAutoSyncSuspended() {\n            return this.autoSyncSuspendCounter > 0;\n        }\n\n        scheduleAutoSync() {\n            const me = this;\n\n            // add deferred call if it's not scheduled yet\n            if (!me.hasTimeout('autoSync') && !me.isAutoSyncSuspended) {\n                me.setTimeout({\n                    name : 'autoSync',\n                    fn   : () => {\n                        me.sync().catch(error => {\n                            // <debug>\n                            if (!me.hasListener('syncFail') && !me.hasListener('requestFail') && !me.onSyncFail && !me.onRequestFail) {\n                                console.warn('CrudManager error while auto-syncing the data (please setup \"syncFail\" or \"requestFail\" event listeners to handle such cases)\\n', error);\n                            }\n                            // </debug>\n                        });\n                    },\n                    delay : me.autoSyncTimeout\n                });\n            }\n        }\n\n        async triggerFailedRequestEvents(request, response, responseText, fetchOptions) {\n            const { options, type : requestType } = request;\n\n            /**\n             * Fires when a request fails.\n             * @event requestFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger('requestFail', { requestType, response, responseText, responseOptions : fetchOptions });\n            /**\n             * Fires when a {@link #function-load load request} fails.\n             * @event loadFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             * @params {Object} options Options provided to the {@link #function-load} method.\n             */\n            /**\n             * Fires when a {@link #function-sync sync request} fails.\n             * @event syncFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger(requestType + 'Fail', { response, responseOptions : fetchOptions, responseText, options });\n        }\n\n        async internalOnResponse(request, responseText, fetchOptions) {\n            const\n                me                              = this,\n                response                        = responseText ? me.decode(responseText) : null,\n                { options, type : requestType } = request;\n\n            if (responseText && !response) {\n                console.error('Failed to parse response: ' + responseText);\n            }\n\n            if (!response || (me.skipSuccessProperty ? response.success === false : !response.success)) {\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n            }\n            else if (\n                me.trigger('beforeResponseApply', { requestType, response }) !== false &&\n                me.trigger(`before${StringHelper.capitalize(requestType)}Apply`, { response, options }) !== false\n            ) {\n                me.crudRevision = response.revision;\n\n                await me.applyResponse(request, response, options);\n\n                // Might have been destroyed while applying response\n                if (me.isDestroyed) {\n                    return;\n                }\n\n                /**\n                 * Fires on successful request completion after data gets applied to the stores.\n                 * @event requestDone\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger('requestDone', { requestType, response, responseOptions : fetchOptions });\n                /**\n                 * Fires on successful {@link #function-load load request} completion after data gets loaded to the stores.\n                 * @event load\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 * @params {Object} options Options provided to the {@link #load} method.\n                 */\n                /**\n                 * Fires on successful {@link #function-sync sync request} completion.\n                 * @event sync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger(requestType, { response, responseOptions : fetchOptions, options });\n\n                if (requestType === 'load' || !me.crudStoreHasChanges()) {\n                    /**\n                     * Fires when registered stores get into state when they don't have any\n                     * not persisted change. This happens after {@link #function-load} or {@link #function-sync} request\n                     * completion. Or this may happen after a record update which turns its fields back to their original state.\n                     *\n                     * ```javascript\n                     * crudManager.on('nochanges', function (crud) {\n                     *     // disable persist changes button when there is no changes\n                     *     saveButton.disable();\n                     * });\n                     * ```\n                     *\n                     * @event noChanges\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     */\n                    me.trigger('noChanges');\n\n                    if (requestType === 'load') {\n                        me.emitCrudStoreEvents(request.pack.stores, 'afterRequest');\n                    }\n                }\n            }\n\n            return response;\n        }\n\n        //endregion\n\n        //region Changes tracking\n\n        suspendChangesTracking() {\n            this.crudIgnoreUpdates++;\n        }\n\n        resumeChangesTracking(skipChangeCheck) {\n            if (this.crudIgnoreUpdates && !--this.crudIgnoreUpdates && !skipChangeCheck) {\n                this.onCrudStoreChange();\n            }\n        }\n\n        get isBatchingChanges() {\n            return this.crudIgnoreUpdates > 0;\n        }\n\n        /**\n         * Returns `true` if any of registered stores (or some particular store) has non persisted changes.\n         *\n         * ```javascript\n         * // if we have any unsaved changes\n         * if (crudManager.crudStoreHasChanges()) {\n         *     // persist them\n         *     crudManager.sync();\n         * // otherwise\n         * } else {\n         *     alert(\"There are no unsaved changes...\");\n         * }\n         * ```\n         *\n         * @param {String|Core.data.Store} [storeId] The store identifier or store instance to check changes for.\n         * If not specified then will check changes for all of the registered stores.\n         * @returns {Boolean} `true` if there are not persisted changes.\n         * @category CRUD\n         */\n        crudStoreHasChanges(storeId) {\n            return storeId\n                ? this.isCrudStoreDirty(this.getCrudStore(storeId))\n                : this.crudStores.some(config => this.isCrudStoreDirty(config.store));\n        }\n\n        isCrudStoreDirty(store) {\n            return Boolean(store.changes);\n        }\n\n        //endregion\n\n        //region Load\n\n        doAutoLoad() {\n            return this.load().catch(error => {\n                // <debug>\n                if (!this.isDestroyed && !this.hasListener('loadFail') && !this.hasListener('requestFail')) {\n                    console.warn('CrudManager error while auto-loading the data (please setup \"loadFail\" or \"requestFail\" event listeners to handle such cases)\\n', error);\n                }\n                // </debug>\n            });\n        }\n\n        emitCrudStoreEvents(stores, eventName, eventParams) {\n            const event = { action : 'read' + eventName, ...eventParams };\n\n            for (const store of this.crudStores) {\n                if (stores.includes(store.storeId)) {\n                    store.store.trigger(eventName, event);\n                }\n            }\n        }\n\n        getLoadPackage(options) {\n            const\n                pack        = {\n                    type      : 'load',\n                    requestId : this.requestId\n                },\n                stores      = this.crudStores,\n                optionsCopy = Object.assign({}, options);\n\n            // This is a special option which does not apply to a store.\n            // It's used as options to the AjaxTransport#sendRequest method\n            delete optionsCopy.request;\n\n            pack.stores = stores.map(store => {\n                const\n                    opts     = optionsCopy?.[store.storeId],\n                    pageSize = store.pageSize || store.store?.pageSize;\n\n                // <remove-on-release>\n                // TODO: PORT currently no support for remote filters\n                // if the store uses remote filtering\n                // if (store.store.remoteFilter && filterParam) {\n                //\n                //     opts = opts || {};\n                //\n                //     var filters = [];\n                //\n                //     store.store.getFilters().each(function(f) {\n                //         filters.push(f.serialize());\n                //     });\n                //\n                //     // put filters info into the package\n                //     opts[filterParam] = filters;\n                // }\n                // TODO: PORT currently no support for paging\n                // </remove-on-release>\n                if (opts || pageSize) {\n                    const\n                        params = Object.assign({\n                            storeId : store.storeId,\n                            page    : 1\n                        }, opts);\n\n                    if (pageSize) {\n                        params.pageSize = pageSize;\n                    }\n\n                    store.currentPage = params.page;\n\n                    // Remove from common request options\n                    if (opts) {\n                        delete optionsCopy[store.storeId];\n                    }\n\n                    return params;\n                }\n\n                return store.storeId;\n            });\n\n            // Apply common request options\n            Object.assign(pack, optionsCopy);\n\n            return pack;\n        }\n\n        loadCrudStore(store, data, options) {\n            const rows = data?.rows;\n\n            if (options?.append || data?.append) {\n                store.add(rows);\n            }\n            else {\n                store.data = rows;\n            }\n\n            store.trigger('load', { data : rows });\n        }\n\n        loadDataToCrudStore(storeDesc, data, options) {\n            const\n                store = storeDesc.store,\n                rows  = data?.rows;\n\n            store.__loading = true;\n\n            if (rows) {\n                this.loadCrudStore(store, data, options, storeDesc);\n            }\n\n            store.__loading = false;\n        }\n\n        /**\n         * Loads data to the Crud Manager\n         * @param {Object} response A simple object representing the data.\n         * The object structure matches the decoded `load` response structure:\n         *\n         * ```js\n         * // load static data into crudManager\n         * crudManager.loadCrudManagerData({\n         *     success   : true,\n         *     resources : {\n         *         rows : [\n         *             { id : 1, name : 'John' },\n         *             { id : 2, name : 'Abby' }\n         *         ]\n         *     }\n         * });\n         * ```\n         * @param {Object} [options] Extra data loading options.\n         * @category CRUD\n         */\n        loadCrudManagerData(response, options = {}) {\n            // we don't want to react to store changes during loading of them\n            this.suspendChangesTracking();\n\n            // we load data to the stores in the order they're kept in this.stores array\n            this.crudStores.forEach(storeDesc => {\n                const\n                    storeId = storeDesc.storeId,\n                    data    = response[storeId];\n\n                if (data) {\n                    this.loadDataToCrudStore(storeDesc, data, options[storeId]);\n                }\n            });\n\n            this.resumeChangesTracking(true);\n        }\n\n        /**\n         * Returns true if the crud manager is currently loading data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerLoading() {\n            return Boolean(this.activeRequests.load || this.applyingLoadResponse);\n        }\n\n        /**\n         * Returns true if the crud manager is currently syncing data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerSyncing() {\n            return Boolean(this.activeRequests.sync || this.applyingSyncResponse);\n        }\n\n        get isLoadingOrSyncing() {\n            return Boolean(this.isCrudManagerLoading || this.isCrudManagerSyncing);\n        }\n\n        /**\n         * Loads data to the stores registered in the crud manager. For example:\n         *\n         * ```javascript\n         * crudManager.load(\n         *     // here are request parameters\n         *     {\n         *         store1 : { append : true, page : 3, smth : 'foo' },\n         *         store2 : { page : 2, bar : '!!!' }\n         *     }\n         * ).then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling {@link #function-cancelRequest}.\n         * @param {Object|String} [options] The request parameters or a URL.\n         * @param {Object} [options.request] An object which contains options to merge\n         * into the options which are passed to {@link Scheduler/crud/transport/AjaxTransport#function-sendRequest}.\n         * ```javascript\n         * {\n         *     store1 : { page : 3, append : true, smth : 'foo' },\n         *     store2 : { page : 2, bar : '!!!' },\n         *     request : {\n         *         params : {\n         *             startDate : '2021-01-01'\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * Omitting request arg:\n         * ```javascript\n         * crudManager.load().then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * When presented it should be an object where keys are store Ids and values are, in turn, objects\n         * of parameters related to the corresponding store. These parameters will be transferred in each\n         * store's entry in the `stores` property of the POST data.\n         *\n         * Additionally, for flat stores `append: true` can be specified to add loaded records to the existing records,\n         * default is to remove corresponding store's existing records first.\n         * **Please note** that for delta loading you can also use an {@link #config-trackResponseType alternative approach}.\n         * @param {'sync'|'load'} [options.request.type] The request type. Either `load` or `sync`.\n         * @param {String} [options.request.url] The URL for the request. Overrides the URL defined in the `transport`\n         * object\n         * @param {String} [options.request.data] The encoded _Crud Manager_ request data.\n         * @param {Object} [options.request.params] An object specifying extra HTTP params to send with the request.\n         * @param {Function} [options.request.success] A function to be started on successful request transferring.\n         * @param {String} [options.request.success.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Function} [options.request.failure] A function to be started on request transfer failure.\n         * @param {String} [options.request.failure.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Object} [options.request.thisObj] `this` reference for the above `success` and `failure` functions.\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has following structure:\n         *\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         *     options         : Object   // options, passed to load request\n         * }\n         * ```\n         *\n         * If promise was rejected by {@link #event-beforeLoad} event, `state` object will have the following structure:\n         *\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        load(options) {\n            if (typeof options === 'string') {\n                options = {\n                    request : {\n                        url : options\n                    }\n                };\n            }\n\n            const\n                me   = this,\n                pack = me.getLoadPackage(options);\n\n            me._autoLoadPromise = null;\n\n            return new Promise((resolve, reject) => {\n                /**\n                 * Fires before {@link #function-load load request} is sent. Return `false` to cancel load request.\n                 * @event beforeLoad\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeLoad', { pack }) !== false) {\n                    // if another load request is in progress let's cancel it\n                    const { load } = me.activeRequests;\n\n                    if (load) {\n                        me.cancelRequest(load.desc, load.reject);\n\n                        me.trigger('loadCanceled', { pack });\n                    }\n\n                    // <remove-on-release>\n                    // TODO: refactor this\n                    // </remove-on-release>\n                    const request = Objects.assign({\n                        id      : pack.requestId,\n                        data    : me.encode(pack),\n                        type    : 'load',\n                        success : me.onCrudRequestSuccess,\n                        failure : me.onCrudRequestFailure,\n                        thisObj : me\n                    }, options?.request);\n\n                    me.activeRequests.load = {\n                        type : 'load',\n                        options,\n                        pack,\n                        resolve,\n                        reject(...args) {\n                            // sendRequest will start a fetch promise, which we cannot reject from here. In fact what we\n                            // need to do, is to make fetch.then() to not call any real handlers. Which is what we do here.\n                            request.success = request.failure = null;\n                            reject(...args);\n                        },\n                        id   : pack.requestId,\n                        desc : me.sendRequest(request)\n                    };\n\n                    me.emitCrudStoreEvents(pack.stores, 'loadStart');\n\n                    me.trigger('loadStart', { pack });\n                }\n                else {\n                    /**\n                     * Fired after {@link #function-load load request} was canceled by some {@link #event-beforeLoad}\n                     * listener or due to incomplete prior load request.\n                     * @event loadCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud\n                     * manager.\n                     */\n                    me.trigger('loadCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            });\n        }\n\n        getActiveCrudManagerRequest(requestType) {\n            let request = this.activeRequests[requestType];\n\n            if (!request && this.trackResponseType) {\n                request = Object.values(this.activeRequests)[0];\n            }\n\n            return request;\n        }\n\n        //endregion\n\n        //region Changes (prepare, process, get)\n\n        prepareAddedRecordData(record, storeInfo) {\n            const\n                me                   = this,\n                { store }            = storeInfo,\n                { isTree }           = store,\n                phantomIdField       = storeInfo.phantomIdField || me.phantomIdField,\n                phantomParentIdField = storeInfo.phantomParentIdField || me.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore),\n                cls                  = record.constructor,\n                data                 = Object.assign(record.persistableData, {\n                    [phantomIdField] : record.id\n                });\n\n            if (isTree) {\n                const { parent } = record;\n\n                if (parent && !parent.isRoot && parent.isPhantom) {\n                    data[phantomParentIdField] = parent.id;\n                }\n            }\n\n            if (me.resetIdsBeforeSync) {\n                ObjectHelper.deletePath(data, cls.idField);\n            }\n\n            // If we have store fields that should be persisted w/ Crud Manager protocol\n            subStoreFields.forEach(field => {\n                const subStore = record.get(field.name);\n\n                if (subStore.allCount) {\n                    data[field.dataSource] = {\n                        added : subStore.getRange()\n                            .map(record => me.prepareAddedRecordData(record, { store : subStore }))\n                    };\n                }\n            });\n\n            return data;\n        }\n\n        prepareAdded(list, storeInfo) {\n            return list.filter(record => record.isValid).map(record => this.prepareAddedRecordData(record, storeInfo));\n        }\n\n        prepareUpdated(list, storeInfo) {\n            const\n                { store }            = storeInfo,\n                { isTree }           = store,\n                writeAllFields       = storeInfo.writeAllFields || (storeInfo.writeAllFields !== false && this.writeAllFields),\n                phantomParentIdField = storeInfo.phantomParentIdField || this.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore);\n\n            // <remove-on-release>\n            // TODO: root node included into store.modified need to get rid of it since we don't persist it\n            // </remove-on-release>\n            if (storeInfo.store.tree) {\n                const rootNode = storeInfo.store.rootNode;\n                list = list.filter(record => record !== rootNode);\n            }\n\n            return list.filter(record => record.isValid).reduce((data, record) => {\n                let recordData;\n\n                // write all fields\n                if (writeAllFields) {\n                    recordData = record.persistableData;\n                }\n                else {\n                    recordData = record.modificationDataToWrite;\n                }\n\n                if (isTree) {\n                    const { parent } = record;\n\n                    if (parent && !parent.isRoot && parent.isPhantom) {\n                        recordData[phantomParentIdField] = parent.id;\n                    }\n                }\n\n                // If we have store fields that should be persisted w/ Crud Manager protocal\n                subStoreFields.forEach(field => {\n                    const subStore = record.get(field.name);\n\n                    recordData[field.dataSource] = this.getCrudStoreChanges({ store : subStore });\n                });\n\n                // recordData can be null\n                if (!ObjectHelper.isEmpty(recordData)) {\n                    data.push(recordData);\n                }\n\n                return data;\n            }, []);\n        }\n\n        prepareRemoved(list) {\n            return list.map(record => {\n                const cls = record.constructor;\n\n                return ObjectHelper.setPath({}, cls.idField, record.id);\n            });\n        }\n\n        getCrudStoreChanges(storeDescriptor) {\n            const { store } = storeDescriptor;\n\n            let { added = [], modified : updated = [], removed = [] } = (store.changes || {}),\n                result;\n\n            if (added.length) added = this.prepareAdded(added, storeDescriptor);\n            if (updated.length) updated = this.prepareUpdated(updated, storeDescriptor);\n            if (removed.length) removed = this.prepareRemoved(removed);\n\n            // if this store has changes\n            if (added.length || updated.length || removed.length) {\n                result = {};\n\n                if (added.length) result.added = added;\n                if (updated.length) result.updated = updated;\n                if (removed.length) result.removed = removed;\n            }\n\n            return result;\n        }\n\n        getChangesetPackage() {\n            const { changes } = this;\n\n            return changes || this.forceSync\n                ? {\n                    type      : 'sync',\n                    requestId : this.requestId,\n                    revision  : this.crudRevision,\n                    ...changes\n                } : null;\n        }\n\n        //endregion\n\n        //region Apply\n\n        /**\n         * Returns current changes as an object consisting of added/modified/removed arrays of records for every\n         * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:\n         *\n         * ```javascript\n         * {\n         *     resources : {\n         *         added    : [{ name : 'New guy' }],\n         *         modified : [{ id : 2, name : 'Mike' }],\n         *         removed  : [{ id : 3 }]\n         *     },\n         *     events : {\n         *         modified : [{  id : 12, name : 'Cool task' }]\n         *     },\n         *     ...\n         * }\n         * ```\n         *\n         * @property {Object}\n         * @readonly\n         * @category CRUD\n         */\n        get changes() {\n            const data = {};\n\n            this.crudStores.forEach(store => {\n                const changes = this.getCrudStoreChanges(store);\n\n                if (changes) {\n                    data[store.storeId] = changes;\n                }\n            });\n\n            return Object.keys(data).length > 0 ? data : null;\n        }\n\n        getRowsToApplyChangesTo({ store, storeId }, storeResponse, storePack) {\n            const\n                me             = this,\n                { modelClass } = store,\n                idDataSource   = modelClass.idField,\n                // request data\n                {\n                    updated : requestUpdated,\n                    removed : requestRemoved\n                }              = storePack || {};\n\n            let rows, removed, remote;\n\n            // If the response contains the store section\n            if (storeResponse) {\n                remote = true;\n\n                const respondedIds = {};\n\n                // responded record changes/removals\n                rows    = storeResponse.rows?.slice() || [];\n                removed = storeResponse.removed?.slice() || [];\n\n                // Collect hash w/ identifiers of responded records\n                [...rows, ...removed].forEach(responseRecord => {\n                    const id = ObjectHelper.getPath(responseRecord, idDataSource);\n\n                    respondedIds[id] = true;\n                });\n\n                // If it's told to support providing server changes only in response\n                // CrudManager should collect other records to commit from current requested data\n                if (me.supportShortSyncResponse) {\n                    // append records requested to update (if not there already)\n                    requestUpdated?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            rows.push({ [idDataSource] : id });\n                        }\n                    });\n                    // append records requested to remove (if not there already)\n                    requestRemoved?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            removed.push({ [idDataSource] : id });\n                        }\n                    });\n                }\n\n            }\n            // If there is no this store section we use records mentioned in the current request\n            else if (requestUpdated || requestRemoved) {\n                remote  = false;\n                rows    = requestUpdated;\n                removed = requestRemoved;\n            }\n\n            // return nullish \"rows\"/\"removed\" if no entries\n            rows    = rows?.length ? rows : null;\n            removed = removed?.length ? removed : null;\n\n            return {\n                rows,\n                removed,\n                remote\n            };\n        }\n\n        applyChangesToStore(storeDesc, storeResponse, storePack) {\n            const\n                me                = this,\n                phantomIdField    = storeDesc.phantomIdField || me.phantomIdField,\n                { store }         = storeDesc,\n                idField           = store.modelClass.getFieldDataSource('id'),\n                subStoreFields    = store.modelClass.allFields.filter(field => field.subStore),\n                // collect records we need to process\n                { rows, removed, remote } = me.getRowsToApplyChangesTo(storeDesc, storeResponse, storePack),\n                added = [],\n                updated = [];\n\n            // Convert to the { updated, added } format accepted by stores\n            if (rows) {\n                for (const data of rows) {\n                    // Existing records are updated\n                    if (store.getById(data[phantomIdField] ?? data[idField])) {\n                        updated.push(data);\n                    }\n                    // Others added\n                    else {\n                        added.push(data);\n                    }\n                }\n            }\n\n            const extraLogEntries = [];\n\n            // Handle sub-stores (if any)\n            if (updated.length && subStoreFields.length) {\n\n                updated.forEach(updateData => {\n                    const\n                        record = store.getById(updateData[phantomIdField] ?? updateData[idField]),\n                        // find the request portion related to the record\n                        recordRequest = storePack.added?.find(t => t[phantomIdField] == updateData[phantomIdField]) ||\n                            storePack.updated?.find(t => t[idField] == updateData[idField]);\n\n                    const extraLogInfo = {};\n\n                    subStoreFields.forEach(field => {\n                        const store = record.get(field.name);\n\n                        me.applyChangesToStore({ store }, updateData[field.dataSource],\n                            recordRequest?.[field.dataSource]\n                        );\n\n                        // We're putting the store field entry to the log\n                        // just to indicate the fact it was actually changed.\n                        // The value will not be used for comparison so we can use any.\n                        extraLogInfo[field.dataSource] = 'foo';\n\n                        delete updateData[field.dataSource];\n                    });\n\n                    extraLogEntries.push([record, extraLogInfo]);\n                });\n            }\n\n            // process added/updated records\n            const log = store.applyChangeset({ removed, added, updated }, null, phantomIdField, remote, true);\n\n            extraLogEntries.forEach(([record, logEntry]) => Object.assign(log.get(record.id), logEntry));\n\n            return log;\n        }\n\n        applySyncResponse(response, request) {\n            const\n                me     = this,\n                stores = me.orderedCrudStores;\n\n            me.applyingChangeset = me.applyingSyncResponse = true;\n            me.suspendChangesTracking();\n\n            for (const store of stores) {\n                me.applyChangesToStore(store, response[store.storeId], request?.pack?.[store.storeId]);\n            }\n\n            me.resumeChangesTracking(true);\n            me.applyingChangeset = me.applyingSyncResponse = false;\n        }\n\n        applyLoadResponse(response, options) {\n            this.applyingLoadResponse = true;\n\n            this.loadCrudManagerData(response, options);\n\n            this.applyingLoadResponse = false;\n        }\n\n        async applyResponse(request, response, options) {\n            const\n                me = this,\n                // in trackResponseType mode we check response type before deciding how to react on the response\n                responseType = me.trackResponseType && response.type || request.type;\n\n            switch (responseType) {\n                case 'load' :\n                    if (me.validateResponse) {\n                        me.validateLoadResponse(response);\n                    }\n\n                    me.applyLoadResponse(response, options);\n                    break;\n                case 'sync' :\n                    if (me.validateResponse) {\n                        me.validateSyncResponse(response, request);\n                    }\n\n                    me.applySyncResponse(response, request);\n                    break;\n            }\n        }\n\n        /**\n         * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended\n         * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.\n         *\n         * Example of a changeset:\n         * ```javascript\n         * project.applyChangeset({\n         *     events : {\n         *         added : [\n         *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }\n         *         ],\n         *         updated : [\n         *             { id : 5, name : 'Changed' }\n         *         ],\n         *         removed : [\n         *             { id : 1 }\n         *         ]\n         *     },\n         *     resources : { ... },\n         *     ...\n         * });\n         * ```\n         *\n         * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.\n         * See {@link Core/data/Store#function-applyChangeset} for more details.\n         *\n         * @param {Object} changes Changeset to apply, an object keyed by store id where each value follows the\n         * format described in {@link Core/data/Store#function-applyChangeset}\n         * @param {Function} [transformFn] Optional function used to preprocess a changeset per store in a different\n         * format, should return an object with the format expected by {@link Core/data/Store#function-applyChangeset}\n         * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a\n         * proper id instead of a phantom id\n         */\n        applyChangeset(changes, transformFn = null, phantomIdField, logChanges = false) {\n            const\n                me  = this,\n                log = logChanges ? new Map() : undefined;\n\n            me.suspendAutoSync();\n            me.suspendChangesTracking();\n\n            for (const { store, phantomIdField } of me.orderedCrudStores) {\n                if (changes[store.id]) {\n                    const storeLog = store.applyChangeset(\n                        changes[store.id],\n                        transformFn,\n                        phantomIdField || me.phantomIdField,\n                        // mark this changeset as remote to enforce it\n                        true,\n                        logChanges\n                    );\n\n                    if (storeLog) {\n                        log.set(store.id, storeLog);\n                    }\n                }\n            }\n\n            me.resumeChangesTracking(true);\n            me.resumeAutoSync(false);\n\n            return log;\n        }\n\n        //endregion\n\n        /**\n         * Generates unique request identifier.\n         * @internal\n         * @template\n         * @returns {Number} The request identifier.\n         * @category CRUD\n         */\n        get requestId() {\n            return Number.parseInt(`${Date.now()}${(this._requestId++)}`);\n        }\n\n        /**\n         * Persists changes made on the registered stores to the server and/or receives changes made on the backend.\n         * Usage:\n         *\n         * ```javascript\n         * // persist and run a callback on request completion\n         * crud.sync().then(\n         *     () => console.log(\"Changes saved...\"),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it\n         * until previous request completion.\n         * In this case {@link #event-syncDelayed} event will be fired.\n         *\n         * ** Note: ** Please take a look at {@link #config-autoSync} config. This option allows to persist changes\n         * automatically after any data modification.\n         *\n         * ** Note: ** By default a sync request is only sent if there are any local {@link #property-changes}. To\n         * always send a request when calling this function, configure {@link #config-forceSync} as `true`.\n         *\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has the following structure:\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         * }\n         * ```\n         * If promise was rejected by the {@link #event-beforeSync} event, `state` object will have this structure:\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        sync() {\n            const me = this;\n\n            // A direct call to sync cancels any outstanding autoSync\n            me.clearTimeout('autoSync');\n\n            if (me.activeRequests.sync) {\n                // let's delay this call and start it only after server response\n                /**\n                 * Fires after {@link #function-sync sync request} was delayed due to incomplete previous one.\n                 * @event syncDelayed\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} arguments The arguments of {@link #function-sync} call.\n                 */\n                me.trigger('syncDelayed');\n\n                // Queue sync request after current one\n                return me.activeSyncPromise = me.activeSyncPromise.finally(() => me.sync());\n            }\n\n            // Store current request promise. While this one is pending, all following sync requests will create chain\n            // of sequential promises\n            return me.activeSyncPromise = new Promise((resolve, reject) => {\n                // get current changes set package\n                const pack = me.getChangesetPackage();\n\n                // if no data to persist we resolve immediately\n                if (!pack) {\n                    resolve(null);\n                    return;\n                }\n\n                /**\n                 * Fires before {@link #function-sync sync request} is sent. Return `false` to cancel sync request.\n                 *\n                 * ```javascript\n                 * crudManager.on('beforesync', function() {\n                 *     // cannot persist changes before at least one record is added\n                 *     // to the `someStore` store\n                 *     if (!someStore.getCount()) return false;\n                 * });\n                 * ```\n                 * @event beforeSync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeSync', { pack }) !== false) {\n\n                    me.trigger('syncStart', { pack });\n\n                    // keep active request details\n                    me.activeRequests.sync = {\n                        type : 'sync',\n                        pack,\n                        resolve,\n                        reject,\n                        id   : pack.requestId,\n                        desc : me.sendRequest({\n                            id      : pack.requestId,\n                            data    : me.encode(pack),\n                            type    : 'sync',\n                            success : me.onCrudRequestSuccess,\n                            failure : me.onCrudRequestFailure,\n                            thisObj : me\n                        })\n                    };\n                }\n                else {\n                    /**\n                     * Fires after {@link #function-sync sync request} was canceled by some {@link #event-beforeSync} listener.\n                     * @event syncCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                     */\n                    me.trigger('syncCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            }).catch(error => {\n                // If the request was not cancelled in beforeSync listener, forward the error so the user's `catch` handler can catch it\n                if (error && !error.cancelled) {\n                    throw error;\n                }\n\n                // Pass the error object as a param to the next `then` chain\n                return error;\n            });\n        }\n\n        async onCrudRequestSuccess(rawResponse, fetchOptions, request) {\n            const\n                me = this,\n                {\n                    type : requestType,\n                    id   : requestId\n                }  = request;\n\n            if (me.isDestroyed) return;\n\n            let responseText = '';\n\n            request = me.activeRequests[requestType];\n\n            // we throw exception below to let events trigger first in internalOnResponse() call\n            try {\n                responseText = await rawResponse.text();\n            }\n            catch (e) {\n            }\n\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n\n            // This situation should never occur.\n            // In the load() method, if a load is called while there is a load\n            // ongoing, the ongoing Transport request is cancelled and loadCanceled triggered.\n            // But having got here, it's too late to cancel a Transport request, so\n            // the operation is unregistered below.\n            // In the sync() method, if a sync is called while there is a sync\n            // ongoing, it waits until completion, before syncing.\n            // The activeRequest for any operation should NEVER be able to be\n            // replaced while this operation is ongoing, so this must be fatal.\n            if (request?.id !== requestId) {\n                throw new Error(`Interleaved ${requestType} operation detected`);\n            }\n\n            // Reset the active request info before we enter async code which could allow\n            // application code to run which could potentially call another request.\n            // It is too late for this request to be canceled - the activeRequest represented\n            // the Transport object and that has completed now.\n            me.activeRequests[requestType] = null;\n\n            const response = await me.internalOnResponse(request, responseText, fetchOptions);\n\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n\n            if (!response || (me.skipSuccessProperty ? response?.success === false : !response?.success)) {\n                const error = {\n                    rawResponse,\n                    response,\n                    request\n                };\n                if (response?.message) {\n                    error.message = response.message;\n                }\n                request.reject(new CrudManagerRequestError(error));\n            }\n\n            // Successful request type done flag (this.crudLoaded or this.crudSynced)..\n            me['crud' + StringHelper.capitalize(request.type) + 'ed'] = true;\n\n            request.resolve({ response, rawResponse, responseText, request });\n        }\n\n        async onCrudRequestFailure(rawResponse, fetchOptions, request) {\n            const me = this;\n\n            if (me.isDestroyed) return;\n\n            request = me.activeRequests[request.type];\n\n            const\n                signal      = fetchOptions?.abortController?.signal,\n                wasAborted  = Boolean(signal?.aborted);\n\n            if (!wasAborted) {\n                let response,\n                    responseText = '';\n\n                try {\n                    responseText = await rawResponse.text();\n                    response = me.decode(responseText);\n                }\n                catch (e) {\n                }\n\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n\n                request.reject(new CrudManagerRequestError({\n                    rawResponse,\n                    request\n                }));\n            }\n\n            // reset the active request info\n            me.activeRequests[request.type] = null;\n        }\n\n        /**\n         * Accepts all changes in all stores, resets the modification tracking:\n         * * Clears change tracking for all records\n         * * Clears added\n         * * Clears modified\n         * * Clears removed\n         * Leaves the store in an \"unmodified\" state.\n         * @category CRUD\n         */\n        acceptChanges() {\n            this.crudStores.forEach(store => store.store.acceptChanges());\n        }\n\n        /**\n         * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted\n         * records will be removed.\n         * @category CRUD\n         */\n        revertChanges() {\n            // the method aliases revertCrudStoreChanges\n            this.revertCrudStoreChanges();\n        }\n\n        revertCrudStoreChanges() {\n            const { usesSingleAssignment } = this.eventStore;\n\n            // Ignore assignment store if using single assignment, otherwise reverting changes will undo changes from\n            // reverting the event store after reassignment\n            this.orderedCrudStores.forEach(({ store }) => (!store.isAssignmentStore || !usesSingleAssignment) && store.revertChanges());\n        }\n\n        /**\n         * Removes all stores and cancels active requests.\n         * @category CRUD\n         * @internal\n         */\n        doDestroy() {\n            const\n                me             = this,\n                { load, sync } = me.activeRequests;\n\n            load && me.cancelRequest(load.desc, load.reject);\n            sync && me.cancelRequest(sync.desc, sync.reject);\n\n            while (me.crudStores.length > 0) {\n                me.removeCrudStore(me.crudStores[0]);\n            }\n\n            super.doDestroy && super.doDestroy();\n        }\n    };\n};\n", "import Base from '../../../Core/Base.js';\nimport AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n\n/**\n * @module Scheduler/crud/transport/AjaxTransport\n */\n\n/**\n * Implements data transferring functional that can be used for {@link Scheduler.crud.AbstractCrudManager} super classing.\n * Uses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n *\n * @example\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}\n *\n * @abstract\n * @mixin\n */\nexport default Target => class AjaxTransport extends (Target || Base) {\n    static get $name() {\n        return 'AjaxTransport';\n    }\n\n    /**\n     * Configuration of the AJAX requests used by _Crud Manager_ to communicate with a server-side.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         params    : {\n     *             foo : 'bar'\n     *         }\n     *     },\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     }\n     * }\n     *```\n     * Since the class uses Fetch API you can use\n     * any its [Request interface](https://developer.mozilla.org/en-US/docs/Web/API/Request) options:\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url         : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName   : 'data',\n     *         // pass few Fetch API options\n     *         method      : 'GET',\n     *         credentials : 'include',\n     *         cache       : 'no-cache'\n     *     },\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers     : {\n     *             'Content-Type' : 'application/json'\n     *         },\n     *         credentials : 'include'\n     *     }\n     * }\n     *```\n     *\n     * An object where you can set the following possible properties:\n     * @config {Object} transport\n     * @property {Object} [transport.load] Load requests configuration:\n     * @property {String} [transport.load.url] URL to request for data loading.\n     * @property {String} [transport.load.method='GET'] HTTP method to be used for load requests.\n     * @property {String} [transport.load.paramName='data'] Name of the parameter that will contain a serialized `load`\n     * request. The value is mandatory for requests using `GET` method (default for `load`) so if the value is not\n     * provided `data` string is used as default.\n     * This value is optional for HTTP methods like `POST` and `PUT`, the request body will be used for data\n     * transferring in these cases.\n     * @property {Object} [transport.load.params] An object containing extra HTTP parameters to pass to the server when\n     * sending a `load` request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         // so resulting URL will look like: http://mycool-server.com/load.php?userId=123456&data=...\n     *         params    : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.load.headers] An object containing headers to pass to each server request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // specify Content-Type for \"load\" requests\n     *         headers   : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url          : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName    : 'data',\n     *         // Fetch API options\n     *         method       : 'GET',\n     *         credentials  : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @property {Object} [transport.sync] Sync requests (`sync` in further text) configuration:\n     * @property {String} [transport.sync.url] URL to request for `sync`.\n     * @property {String} [transport.sync.method='POST'] HTTP request method to be used for `sync`.\n     * @property {String} [transport.sync.paramName=undefined] Name of the parameter in which `sync` data will be\n     * transferred. This value is optional for requests using methods like `POST` and `PUT`, the request body will be\n     * used for data transferring in this case (default for `sync`). And the value is mandatory for requests using `GET`\n     * method (if the value is not provided `data` string will be used as fallback).\n     * @property {Object} [transport.sync.params] HTTP parameters to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url    : 'http://mycool-server.com/sync.php',\n     *         // extra HTTP request parameter\n     *         params : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.sync.headers] HTTP headers to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for \"sync\" requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         credentials : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @category CRUD\n     */\n\n    static get defaultMethod() {\n        return {\n            load : 'GET',\n            sync : 'POST'\n        };\n    }\n\n    /**\n     * Cancels a sent request.\n     * @param {Promise} requestPromise The Promise object wrapping the Request to be cancelled.\n     * The _requestPromise_ is the value returned from the corresponding {@link #function-sendRequest} call.\n     * @category CRUD\n     */\n    cancelRequest(requestPromise, reject) {\n        requestPromise.abort?.();\n        // <remove-on-release>\n        // TODO: fix this\n        // </remove-on-release>\n        if (!this.isDestroying) {\n            reject({ cancelled : true });\n        }\n    }\n\n    shouldUseBodyForRequestData(packCfg, method, paramName) {\n        return !(method === 'HEAD' || method === 'GET') && !paramName;\n    }\n\n    /**\n     * Sends a _Crud Manager_ request to the server.\n     * @param {Object} request The request configuration object having following properties:\n     * @param {'load'|'sync'} request.type The request type. Either `load` or `sync`.\n     * @param {String} request.url The URL for the request. Overrides the URL defined in the `transport` object\n     * @param {String} request.data The encoded _Crud Manager_ request data.\n     * @param {Object} request.params An object specifying extra HTTP params to send with the request.\n     * @param {Function} request.success A function to be started on successful request transferring.\n     * @param {String} request.success.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Function} request.failure A function to be started on request transfer failure.\n     * @param {String} request.failure.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Object} request.thisObj `this` reference for the above `success` and `failure` functions.\n     * @returns {Promise} The fetch Promise object.\n     * @fires beforeSend\n     * @async\n     * @category CRUD\n     */\n    sendRequest(request) {\n        const\n            me              = this,\n            { data }        = request,\n            transportConfig = me.transport[request.type] || {},\n            // clone parameters defined for this type of request\n            requestConfig   = Objects.assign({}, transportConfig, transportConfig.requestConfig);\n\n        if (request.url) {\n            requestConfig.url = request.url;\n        }\n\n        requestConfig.method = requestConfig.method || AjaxTransport.defaultMethod[request.type];\n        requestConfig.params = Objects.assign(requestConfig.params || {}, request.params);\n\n        let { paramName } = requestConfig;\n\n        // transfer package in the request body for some types of HTTP requests\n        if (me.shouldUseBodyForRequestData(transportConfig, requestConfig.method, paramName)) {\n            requestConfig.body = data;\n\n            // for requests having body we set Content-Type to 'application/json' by default\n            requestConfig.headers = requestConfig.headers || {};\n            requestConfig.headers['Content-Type'] = requestConfig.headers['Content-Type'] || 'application/json';\n        }\n        else {\n            // when we don't use body paramName is mandatory so fallback to 'data' as name\n            paramName = paramName || 'data';\n\n            requestConfig.params[paramName] = data;\n        }\n\n        if (!requestConfig.url) {\n            throw new Error('Trying to request without URL specified');\n        }\n\n        // sanitize request config\n        delete requestConfig.requestConfig;\n        delete requestConfig.paramName;\n\n        let ajaxPromise, resultPromise;\n\n        function performSend() {\n            // AjaxHelper.fetch call it \"queryParams\"\n            requestConfig.queryParams = requestConfig.params;\n\n            delete requestConfig.params;\n\n            let cancelled = false;\n\n            const fetchOptions = Objects.assign({}, requestConfig, requestConfig.fetchOptions);\n\n            ajaxPromise  = AjaxHelper.fetch(requestConfig.url, fetchOptions);\n\n            return ajaxPromise.catch(error => {\n                ajaxPromise.done = true;\n\n                me.trigger?.('responseReceived', { success : false });\n\n                const signal = fetchOptions.abortController?.signal;\n\n                if (signal) {\n                    cancelled = signal.aborted;\n\n                    if (!cancelled) {\n                        console.warn(error);\n                    }\n                }\n\n                return { error, cancelled };\n            }).then(response => {\n                ajaxPromise.done = true;\n\n                me.trigger?.('responseReceived', { success : Boolean(response?.ok) });\n\n                const callback = response?.ok ? request.success : request.failure;\n\n                return callback?.call(request.thisObj || me, response, fetchOptions, request);\n            });\n        }\n\n        /**\n         * Fires before a request is sent to the server.\n         *\n         * ```javascript\n         * crudManager.on('beforeSend', function ({ params, type }) {\n         *     // let's set \"sync\" request parameters\n         *     if (type == 'sync') {\n         *         // dynamically depending on \"flag\" value\n         *         if (flag) {\n         *             params.foo = 'bar';\n         *         }\n         *         else {\n         *             params.foo = 'smth';\n         *         }\n         *     }\n         * });\n         * ```\n         * @event beforeSend\n         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.\n         * @param {Object} params HTTP request params to be passed in the request URL.\n         * @param {'sync'|'load'} requestType CrudManager request type (`load`/`sync`)\n         * @param {Object} requestConfig Configuration object for Ajax request call\n         * @async\n         */\n        const beforeSendResult = me.trigger('beforeSend', {\n            params      : requestConfig.params,\n            requestType : request.type,\n            requestConfig,\n            config      : request\n        });\n\n        if (Objects.isPromise(beforeSendResult)) {\n            resultPromise = beforeSendResult.then(performSend);\n        }\n        else {\n            resultPromise = performSend();\n        }\n\n        resultPromise.abort = () => {\n            if (!ajaxPromise.done) {\n                ajaxPromise.abort?.();\n            }\n        };\n\n        return resultPromise;\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/crud/encoder/JsonEncoder\n */\n\n/**\n * Implements data encoding functional that should be mixed to a {@link Scheduler.crud.AbstractCrudManager} sub-class.\n * Uses _JSON_ as an encoding system.\n *\n * @example\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}\n *\n * @mixin\n */\nexport default Target => class JsonEncoder extends (Target || Base) {\n    static get $name() {\n        return 'JsonEncoder';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Configuration of the JSON encoder used by the _Crud Manager_.\n             *\n             * @config {Object}\n             * @property {Object} encoder.requestData Static data to send with the data request.\n             *\n             * ```js\n             * new CrudManager({\n             *     // add static \"foo\" property to all requests data\n             *     encoder : {\n             *         requestData : {\n             *             foo : 'Bar'\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * The above snippet will result adding \"foo\" property to all requests data:\n             *\n             * ```json\n             *     {\n             *         \"requestId\"   : 756,\n             *         \"type\"        : \"load\",\n             *\n             *         \"foo\"         : \"Bar\",\n             *\n             *         \"stores\"      : [\n             *             ...\n             * ```\n             * @category CRUD\n             */\n            encoder : {}\n        };\n    }\n\n    /**\n     * Encodes a request object to _JSON_ encoded string. If encoding fails (due to circular structure), it returns null.\n     * Supposed to be overridden in case data provided by the _Crud Manager_ has to be transformed into format requested by server.\n     * @param {Object} requestData The request to encode.\n     * @returns {String} The encoded request.\n     * @category CRUD\n     */\n    encode(requestData) {\n        requestData = Object.assign({}, this.encoder?.requestData, requestData);\n\n        return StringHelper.safeJsonStringify(requestData);\n    }\n\n    /**\n     * Decodes (parses) a _JSON_ response string to an object. If parsing fails, it returns null.\n     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the _Crud Manager_.\n     * @param {String} responseText The response text to decode.\n     * @returns {Object} The decoded response.\n     * @category CRUD\n     */\n    decode(responseText) {\n        return StringHelper.safeJsonParse(responseText);\n    }\n};\n", "import AbstractCrudManagerMixin from '../../../Scheduler/crud/AbstractCrudManagerMixin.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport Base from '../../../Core/Base.js';\nimport AjaxTransport from '../../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../../crud/encoder/JsonEncoder.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/data/mixin/ProjectCrudManager\n */\n\n/**\n * This mixin provides Crud Manager functionality supporting loading of scheduling engine projects.\n *\n * @mixin\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @mixes Scheduler/crud/encoder/JsonEncoder\n */\nexport default Target => class ProjectCrudManager extends (Target || Base).mixin(AbstractCrudManagerMixin, AjaxTransport, JsonEncoder) {\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            project : null\n        };\n    }\n\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n\n        super.startConfigure(config);\n\n        this._changesToClear = new Map();\n    }\n\n    async doAutoLoad() {\n        const { project } = this;\n\n        // Delay autoLoad to after projects initial commit if configured with a project\n        if (project) {\n            await project.commitAsync();\n        }\n\n        return super.doAutoLoad();\n    }\n\n    applyProjectResponse(response) {\n        const\n            me = this,\n            { project } = me;\n\n        me.applyingProjectResponse = true;\n\n        const\n            startDateField = project.fieldMap.startDate,\n            endDateField   = project.fieldMap.endDate,\n            startDate      = ObjectHelper.getPath(response, startDateField.dataSource),\n            endDate        = ObjectHelper.getPath(response, endDateField.dataSource);\n\n        // With early rendering engine won't convert project dates in time, do it manually first\n        if (typeof startDate === 'string') {\n            ObjectHelper.setPath(response, startDateField.dataSource, startDateField.convert(startDate));\n        }\n        if (typeof endDate === 'string') {\n            ObjectHelper.setPath(response, endDateField.dataSource, endDateField.convert(endDate));\n        }\n\n        Object.assign(project, response);\n\n        me._changesToClear.set(me, response);\n\n        me.applyingProjectResponse = false;\n    }\n\n    loadCrudManagerData(response, options = {}) {\n        const\n            me = this,\n            { project } = me;\n\n        // We don't want to react on store changes while loading them\n        me.suspendChangesTracking();\n\n        super.loadCrudManagerData(...arguments);\n\n        // If there is project data provided\n        if (response?.project) {\n            // If the project is delaying its linking to a new graph instance\n            // wait till it detaches all records from the old graph\n            // and then apply the project data.\n            // Otherwise the project changes we apply here will be overridden when detaching from the old graph.\n            // Since the code copies last identifier values from the graph when detaching.\n            if (project.delayEnteringReplica) {\n                project.ion({\n                    recordsUnlinked : () => {\n                        me.suspendChangesTracking();\n                        me.applyProjectResponse(response.project);\n                        me.resumeChangesTracking();\n                    },\n                    once : true\n                });\n            }\n            else {\n                me.applyProjectResponse(response.project);\n            }\n        }\n\n        me.resumeChangesTracking();\n    }\n\n    async sync() {\n        const { project } = this;\n\n        // Suspend Crud Manager autoSync to not react on changes during commitAsync() call\n        this.suspendAutoSync();\n\n        // Make sure data is in a calculated state before syncing\n        if (project) {\n            await project.commitAsync();\n        }\n\n        if (this.isDestroying) {\n            return;\n        }\n\n        // resume autoSync silently\n        this.resumeAutoSync(false);\n\n        return super.sync();\n    }\n\n    async applyResponse(request, response, options) {\n        const me = this;\n\n        if (me.isDestroyed || me.project?.isDestroyed) {\n            return;\n        }\n\n        me.trigger('beforeApplyResponse');\n\n        await super.applyResponse(request, response, options);\n        // If there is the project data provided or it's not provided but short responses are enabled\n        // in such cases we treat a successful response covering all sent changes as much as that's possible\n        // so responding `project : { ... }` should not be really needed\n        if (response?.project || (me.supportShortSyncResponse && request?.pack?.project)) {\n            // apply the responded changes (or accept the requested ones)\n            me.applyProjectResponse(response.project || request?.pack?.project);\n        }\n\n        // if we have a project\n        if (me.project) {\n            let requestType = request.type;\n\n            // response can force its type\n            if (me.trackResponseType) {\n                requestType = response.type || requestType;\n            }\n\n            // Make a boolean flag indicating what has triggered the propagation (\"propagatingLoadChanges\" or  \"propagatingSyncChanges\")\n            const propagationFlag = `propagating${StringHelper.capitalize(requestType)}Changes`;\n\n            me.suspendAutoSync();\n            me[propagationFlag] = true;\n\n            const loud = me.project.isInitialCommit && !me.project.silenceInitialCommit;\n\n            // Wait till calculation gets done\n            await me.project.commitAsync();\n\n            me[propagationFlag] = false;\n\n            // for initial commit we still trigger the sync, but not for following\n            me.resumeAutoSync?.(loud);\n\n            // Accept changes came from the server (might have been destroyed while waiting above)\n            me.commitRespondedChanges?.();\n        }\n\n        // Trigger if we did not get destroyed while waiting above\n        me.trigger?.('applyResponse');\n    }\n\n    applySyncResponse(...args) {\n        const\n            me          = this,\n            stmDisabled = me.project?.stm.disabled;\n\n        if (stmDisabled === false && me.ignoreRemoteChangesInSTM) {\n            me.project.stm.disable();\n        }\n\n        super.applySyncResponse(...args);\n\n        if (stmDisabled === false) {\n            me.project.stm.enable();\n        }\n    }\n\n    shouldClearRecordFieldChange(record, field, value) {\n        const oldValue = record.getValue(field);\n\n        field = record.getFieldDefinition(field);\n\n        // If the field value matches the one responded from the server\n        // we silently accept it\n        return field?.isEqual ? field.isEqual(oldValue, value) : ObjectHelper.isEqual(oldValue, value);\n    }\n\n    commitRespondedChanges() {\n        // We silently accept changes came from the server\n        this._changesToClear.forEach((changes, record) => {\n            Object.entries(changes).forEach(([key, value]) => {\n                // If the field value matches the one responded from the server\n                // we silently accept it\n                if (this.shouldClearRecordFieldChange(record, key, value)) {\n                    delete record.meta.modified[key];\n                }\n            });\n        });\n\n        this._changesToClear.clear();\n    }\n\n    applyChangesToStore(storeDesc, storeResponse, storePack, ...rest) {\n        const changesMap = super.applyChangesToStore(storeDesc, storeResponse, storePack, ...rest);\n\n        // The changes enter graph first but not store until later, clearing changes in StoreChanges might still leave\n        // records modified. We need to clean up after the next propagation, so we store record changes in a map for now\n        if (changesMap.size && this.project) {\n            for (const [id, changes] of changesMap) {\n                const record = storeDesc.store.getById(id);\n                record && this._changesToClear.set(record, changes);\n            }\n        }\n\n        return changesMap;\n    }\n};\n", "import Model from '../../../Core/data/Model.js';\n\n/**\n * @module Scheduler/model/mixin/ProjectModelCommon\n */\n\n/**\n * Mixin that provides helpful methods and properties for a `ProjectModel`. This mixin applies to all Bryntum products.\n * @mixin\n * @internal\n */\nexport default Target => class ProjectModelCommon extends (Target || Model) {\n    static $name = 'ProjectModelCommon';\n\n    static get configurable() {\n        return {\n            // <remove-on-release>\n            // TODO: json : null,\n            // </remove-on-release>\n\n            // Documented in Gantt/Scheduler/SchedulerPro version of ./model/ProjectModel since types differ\n            assignments  : null,\n            dependencies : null,\n            resources    : null,\n            timeRanges   : null\n        };\n    }\n\n    //region Inline data\n\n    get assignments() {\n        return this.assignmentStore.allRecords;\n    }\n\n    updateAssignments(assignments) {\n        this.assignmentStore.data = assignments;\n    }\n\n    get dependencies() {\n        return this.dependencyStore.allRecords;\n    }\n\n    updateDependencies(dependencies) {\n        this.dependencyStore.data = dependencies;\n    }\n\n    get resources() {\n        return this.resourceStore.allRecords;\n    }\n\n    updateResources(resources) {\n        this.resourceStore.data = resources;\n    }\n\n    get timeRanges() {\n        return this.timeRangeStore.allRecords;\n    }\n\n    getTimeRanges(startDate, endDate) {\n        const\n            store = this.timeRangeStore,\n            ret = [];\n\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n\n        return ret;\n    }\n\n    updateTimeRanges(timeRanges) {\n        this.timeRangeStore.data = timeRanges;\n    }\n\n    getResourceTimeRanges(startDate, endDate) {\n        const\n            store = this.resourceTimeRangeStore,\n            ret = [];\n\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n\n        return ret;\n    }\n\n    //endregion\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n\n/**\n * @module Scheduler/model/ResourceTimeRangeModel\n */\n\n/**\n * This class represent a single resource time range in your schedule.\n * To style the rendered elements, use {@link Scheduler.model.TimeSpan#field-cls} or {@link #field-timeRangeColor} field.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * You can also make ranges recurring by adding a `recurrenceRule` to the range data.\n *\n * ```javascript\n *\n * // Make new store that supports time ranges recurrence\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class ResourceTimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'ResourceTimeRangeModel';\n\n    //region Fields\n\n    static fields = [\n        /**\n         * Id of the resource this time range is associated with\n         * @field {String|Number} resourceId\n         */\n        'resourceId',\n\n        /**\n         * Controls this time ranges primary color, defaults to using current themes default time range color.\n         * @field {String} timeRangeColor\n         */\n        'timeRangeColor'\n    ];\n\n    static relations = {\n        /**\n         * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned\n         * to `resourceId`. The relation also lets you access all time ranges on a resource through\n         * `ResourceModel#timeRanges`.\n         * @member {Scheduler.model.ResourceModel} resource\n         */\n        resource : {\n            foreignKey            : 'resourceId',\n            foreignStore          : 'resourceStore',\n            relatedCollectionName : 'timeRanges',\n            nullFieldOnRemove     : true\n        }\n    };\n\n    static domIdPrefix = 'resourcetimerange';\n\n    get domId() {\n        return `${this.constructor.domIdPrefix}-${this.id}`;\n    }\n\n    //endregion\n\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isResourceTimeRange() {\n        return true;\n    }\n\n    // To match EventModel API\n    get resources() {\n        return this.resource ? [this.resource] : [];\n    }\n\n    // To match EventModel API\n    get $linkedResources() {\n        return this.resources;\n    }\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceTimeRangeModel from '../model/ResourceTimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n\n/**\n * @module Scheduler/data/ResourceTimeRangeStore\n */\n\n/**\n * A class representing a collection of resource time ranges.\n * Contains a collection of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * By default, the class doesn't support recurrence. In order to add its support\n * please use {@link Scheduler.data.mixin.RecurringTimeSpansMixin RecurringTimeSpansMixin} mixin\n * (the store model in turn should be mixed with {@link Scheduler/model/mixin/RecurringTimeSpan RecurringTimeSpan} class):\n *\n * ```js\n * // Mix RecurringTimeSpan (which adds recurrence support) to ResourceTimeRangeModel\n * class MyResourceTimeRange extends RecurringTimeSpan(ResourceTimeRangeModel) {};\n *\n * // Mix RecurringTimeSpansMixin (which adds recurrence support) to ResourceTimeRangeStore\n * class MyResourceTimeRangeStore extends RecurringTimeSpansMixin(ResourceTimeRangeStore) {\n *     static get defaultConfig() {\n *         return {\n *             // use our new MyResourceTimeRange model\n *             modelClass : MyResourceTimeRange\n *         };\n *     }\n * };\n *\n * // Make new store that supports time ranges recurrence\n * const store = new MyResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceTimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n\n    static $name = 'ResourceTimeRangeStore';\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500,\n\n            /**\n             * This store should be linked to a ResourceStore to link the time ranges to resources\n             * @config {Scheduler.data.ResourceStore}\n             */\n            resourceStore : null,\n\n            modelClass : ResourceTimeRangeModel,\n            storeId    : 'resourceTimeRanges'\n        };\n    }\n\n    set resourceStore(store) {\n        this._resourceStore = store;\n\n        // If store is assigned after configuration we need to init relations\n        if (!this.isConfiguring) {\n            this.initRelations(true);\n        }\n    }\n\n    get resourceStore() {\n        return this._resourceStore;\n    }\n\n    // Matching signature in EventStore to allow reusage of SchedulerStores#onInternalEventStoreChange()\n    getResourcesForEvent(resourceTimeRange) {\n        return [resourceTimeRange.resource];\n    }\n\n    /**\n     * Get resource time ranges intersecting the specified date range for a resource.\n     *\n     * The result is sorted by `startDate`.\n     *\n     * @param {Object} options Options\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord Resource record\n     * @param {Date} options.startDate Start date of the range\n     * @param {Date} options.endDate End date of the range\n     * @returns {Scheduler.model.ResourceTimeRangeModel[]}\n     */\n    getRanges({ resourceRecord, startDate, endDate }) {\n        const rangesInDateRange = resourceRecord.timeRanges.flatMap(range => {\n            if (range.supportsRecurring) {\n                return range.getOccurrencesForDateRange(startDate, endDate);\n            }\n\n            if (range.intersectsRange(startDate, endDate)) {\n                return range;\n            }\n\n            return [];\n        });\n\n        return rangesInDateRange.sort((span1, span2) => span1.startDate - span2.startDate);\n    }\n}\n", "import Model from '../../../Core/data/Model.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n\n/**\n * @module Scheduler/model/mixin/ProjectModelTimeZoneMixin\n */\n\n/**\n * Mixin that holds TimeZone functionality shared between projects in Scheduler, Scheduler Pro, Gantt and Calendar\n * @mixin\n */\nexport default Target => class ProjectModelTimeZoneMixin extends (Target || Model) {\n    static $name = 'ProjectModelTimeZoneMixin';\n\n    static configurable = {\n        /**\n         * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will\n         * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the\n         * displayed timeline's headers as well at the start and end date of it.\n         *\n         * There is currently no built-in time zone support in JavaScript which means that the converted dates\n         * technically still are in the local system time zone, but adjusted to match the configured time zone.\n         *\n         * ### DST\n         * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that\n         * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and\n         * off.\n         *\n         * *For example:*\n         * 1. The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).\n         * 2. The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5\n         *    when DST).\n         * 3. The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when\n         *    `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as\n         *    `2022-03-27T03:00` instead.\n         *\n         * If a UTC offset is provided, there is no DST support at all.\n         *\n         * ### Editing\n         * If creating new records or editing existing record dates, the dates will be interpreted as in the selected\n         * time zone.\n         *\n         * ### Saving\n         * When saving or syncing data, the dates will be restored to local system time and converted to JSON\n         * ISO formatted.\n         *\n         * @prp {String|Number} [timeZone]\n         * @category Advanced\n         */\n        timeZone : {\n            // Don't ingest the config eagerly because it relies on project being present.\n            // Lazy means it waits for ingestion until timeZone property is referenced.\n            $config : 'lazy',\n            value   : null\n        }\n    };\n\n    get _storesWithDates() {\n        return [this.taskStore, this.timeRangeStore, this.resourceTimeRangeStore].filter(s => s);\n    }\n\n    // Overrides a Store's processRecord function to be able to convert records added by a dataset\n    // before they are processed by the engine\n    overrideStoreProcessRecord(store) {\n        if (this._storesWithDates.includes(store) && !store.$originalProcessRecord) {\n            store.$originalProcessRecord =\n                FunctionHelper.before(store, 'processRecord', (record, isDataSet) => {\n                    if (isDataSet || store.isLoadingData) {\n                        // When loading or changing dataset, de data is treated as local dates and need to be converted\n                        this.convertRecordToTimeZone(record);\n                    }\n                });\n        }\n    }\n\n    attachStore(store) {\n        super.attachStore(store);\n\n        // If a new store is attached, convert it to the configured timezone\n        if (store && this.timeZone != null && this._storesWithDates.includes(store)) {\n            this.convertStoresToTimeZone([store]);\n            this.overrideStoreProcessRecord();\n        }\n    }\n\n    detachStore(store) {\n        super.detachStore(store);\n\n        // When a store is detached, the records isn't timezone converted anymore\n        if (store && !store.isDestroyed) {\n            const { $originalProcessRecord } = store;\n\n            if ($originalProcessRecord) {\n                $originalProcessRecord(); // Restores the original function\n                store.$originalProcessRecord = null;\n                // Convert records back to local system timezone\n                this.convertStoresToTimeZone([store], null);\n\n            }\n        }\n    }\n\n    relayStoreChange({ source, action, records, replaced }) {\n        const me = this;\n\n        if (me.timeZone != null && me._storesWithDates.includes(source)) {\n            // When a record is added or replaced, it is treated as in current configured timezone\n            if (['add', 'replace'].includes(action)) {\n                if (!records?.length && replaced?.length) {\n                    records = replaced;\n                }\n                if (records.length) {\n                    records.forEach(record => record.timeZone = me.timeZone);\n                }\n            }\n        }\n    }\n\n    convertStoresToTimeZone(stores, timeZone = this.timeZone) {\n        const\n            me            = this,\n            stmAutoRecord = me.stm?.autoRecord;\n\n        // Disable STM while updating timezone values\n        if (stmAutoRecord) {\n            me.stm.autoRecord = false;\n        }\n\n        for (const store of stores) {\n            store?.forEach(r => me.convertRecordToTimeZone(r, timeZone));\n        }\n\n        if (stmAutoRecord) {\n            // Restore original value\n            me.stmAutoRecord = stmAutoRecord;\n        }\n    }\n\n    convertRecordToTimeZone(record, timeZone = this.timeZone) {\n        if (record.timeZone !== timeZone) {\n            record.$ignoreChange = true; // Used to ignore changes in NestedEvents feature\n            // Convert baselines if exists\n            if (record.baselines?.count) {\n                for (const bl of record.baselines) {\n                    // The baseline records is not marked with a timezone when they are created\n                    if (record.timeZone !== bl.timeZone) {\n                        bl.timeZone = record.timeZone;\n                    }\n                    bl.convertToTimeZone(timeZone);\n                }\n            }\n\n            record.convertToTimeZone(timeZone);\n\n            record.$ignoreChange = false;\n        }\n    }\n\n    updateTimeZone(timeZone, oldTimeZone) {\n        const\n            me            = this,\n            isConfiguring = me._isConfiguringTimeZone || me.isConfiguring;\n\n        me.trigger('beforeTimeZoneChange', {\n            timeZone,\n            oldTimeZone,\n            isConfiguring\n        });\n\n        me.calendarManagerStore.forEach(calendar => calendar.bumpVersion());\n\n        // Convert data to time zone\n        me.convertStoresToTimeZone(me._storesWithDates);\n\n        me._storesWithDates.forEach(store => me.overrideStoreProcessRecord(store));\n\n        // Convert project startdate\n        if (me.startDate) {\n            const startDate = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(me.startDate, oldTimeZone) : me.startDate;\n            me.startDate = timeZone != null ? TimeZoneHelper.toTimeZone(startDate, timeZone) : startDate;\n        }\n\n        me.ignoreRecordChanges = true;\n        me.commitAsync().then(() => {\n            if (!me.isDestroyed) {\n                me.trigger('timeZoneChange', {\n                    timeZone,\n                    oldTimeZone,\n                    isConfiguring\n                });\n            }\n            delete me._isConfiguringTimeZone;\n        });\n    }\n\n};\n", "import Model from '../../../Core/data/Model.js';\nimport ProjectModelCommon from './ProjectModelCommon.js';\nimport ResourceTimeRangeModel from '../ResourceTimeRangeModel.js';\nimport TimeSpan from '../TimeSpan.js';\nimport Store from '../../../Core/data/Store.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ResourceTimeRangeStore from '../../data/ResourceTimeRangeStore.js';\nimport ProjectModelTimeZoneMixin from './ProjectModelTimeZoneMixin.js';\n\n/**\n * @module Scheduler/model/mixin/ProjectModelMixin\n */\n\n/**\n * Mixin that holds configuration shared between projects in Scheduler and Scheduler Pro.\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n * @mixin\n */\nexport default Target => class ProjectModelMixin extends (Target || Model).mixin(\n    ProjectModelCommon,\n    ProjectModelTimeZoneMixin\n) {\n    static get $name() {\n        return 'ProjectModelMixin';\n    }\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager}\n             * @category Advanced\n             */\n            stm : {},\n\n            timeRangeModelClass         : TimeSpan,\n            resourceTimeRangeModelClass : ResourceTimeRangeModel,\n\n            /**\n             * The constructor to create a time range store instance with. Should be a class subclassing the\n             * {@link Core.data.Store}\n             * @config {Core.data.Store|Object}\n             * @typings {typeof Store|object}\n             * @category Models & Stores\n             */\n            timeRangeStoreClass : Store,\n\n            /**\n             * The constructor to create a resource time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.ResourceTimeRangeStore}\n             * @config {Scheduler.data.ResourceTimeRangeStore|Object}\n             * @typings {typeof ResourceTimeRangeStore|object}\n             * @category Models & Stores\n             */\n            resourceTimeRangeStoreClass : ResourceTimeRangeStore,\n\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeSpan TimeSpan} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]} [timeRangesData]\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-resourceTimeRangeStore resourceTimeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} or it's\n             * configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]} [resourceTimeRangesData]\n             * @category Legacy inline data\n             */\n\n            eventStore      : {},\n            assignmentStore : {},\n            dependencyStore : {},\n            resourceStore   : {},\n            timeRangesData  : null\n        };\n    }\n\n    static configurable = {\n        /**\n         * Project data as a JSON string, used to populate its stores.\n         *\n         * ```javascript\n         * const project = new ProjectModel({\n         *     json : '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n         * }\n         * ```\n         *\n         * @config {String}\n         * @category Inline data\n         */\n        json : null,\n\n        /**\n         * The {@link Core.data.Store store} holding the time ranges information.\n         *\n         * See also {@link Scheduler.model.TimeSpan}\n         *\n         * @member {Core.data.Store} timeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Core.data.Store} instance or a config object.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Models & Stores\n         */\n        timeRangeStore : {\n            value : {\n                id         : 'timeRanges', // no-sanity\n                modelClass : TimeSpan\n            },\n            $config : 'nullify'\n        },\n\n        /**\n         * The {@link Scheduler.data.ResourceTimeRangeStore store} holding the resource time ranges information.\n         *\n         * See also {@link Scheduler.model.ResourceTimeRangeModel}\n         *\n         * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Scheduler.data.ResourceTimeRangeStore} instance or a config object.\n         * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n         * @category Models & Stores\n         */\n        resourceTimeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n\n        // Documented in Scheduler/SchedulerPro versions of model/ProjectModel since types differ\n        events             : null,\n        resourceTimeRanges : null\n    };\n\n    //endregion\n\n    //region Properties\n\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     * @category Inline data\n     */\n    get inlineData() {\n        return StringHelper.safeJsonParse(super.json);\n    }\n\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n\n    //endregion\n\n    //region Functions\n\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,\n     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline\n     * data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        super.construct(...arguments);\n\n        // These stores are not handled by engine, but still held on project\n\n        if (config.timeRangesData) {\n            this.timeRangeStore.data = config.timeRangesData;\n        }\n\n        if (config.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = config.resourceTimeRangesData;\n        }\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        const me = this;\n\n        !me.timeRangeStore.stm && me.stm.addStore(me.timeRangeStore);\n        !me.resourceTimeRangeStore.stm && me.stm.addStore(me.resourceTimeRangeStore);\n    }\n\n    //endregion\n\n    //region Attaching stores\n\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (store) {\n            store.ion({\n                name    : store.$$name,\n                change  : 'relayStoreChange',\n                thisObj : this\n            });\n        }\n        super.attachStore(store);\n    }\n\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        if (store) {\n            this.detachListeners(store.$$name);\n            super.detachStore(store);\n        }\n    }\n\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Scheduler.model.ProjectModel} source This project\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n\n    updateTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n    }\n\n    setTimeRangeStore(store) {\n        this.timeRangeStore = store;\n    }\n\n    changeTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.timeRangeStoreClass.new({\n                modelClass : this.timeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n\n    updateResourceTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n    }\n\n    changeResourceTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.resourceTimeRangeStoreClass.new({\n                modelClass : this.resourceTimeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n\n    setResourceTimeRangeStore(store) {\n        this.resourceTimeRangeStore = store;\n    }\n\n    //endregion\n\n    //region Inline data\n\n    get events() {\n        return this.eventStore.allRecords;\n    }\n\n    updateEvents(events) {\n        this.eventStore.data = events;\n    }\n\n    get resourceTimeRanges() {\n        return this.resourceTimeRangeStore.allRecords;\n    }\n\n    updateResourceTimeRanges(resourceTimeRanges) {\n        this.resourceTimeRangeStore.data = resourceTimeRanges;\n    }\n\n    async loadInlineData(data) {\n        // Flag reset in super\n        this.isLoadingInlineData = true;\n\n        // Stores not handled by engine\n        if (data.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = data.resourceTimeRangesData;\n        }\n\n        if (data.timeRangesData) {\n            this.timeRangeStore.data = data.timeRangesData;\n        }\n\n        return super.loadInlineData(data);\n    }\n\n    //endregion\n\n    //region JSON\n\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        const\n            me = this,\n            result = {\n                eventsData             : me.eventStore.toJSON(),\n                resourcesData          : me.resourceStore.toJSON(),\n                dependenciesData       : me.dependencyStore.toJSON(),\n                timeRangesData         : me.timeRangeStore.toJSON(),\n                resourceTimeRangesData : me.resourceTimeRangeStore.toJSON()\n            };\n\n        if (!me.eventStore.usesSingleAssignment) {\n            result.assignmentsData = me.assignmentStore.toJSON();\n        }\n\n        return result;\n    }\n\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n\n    changeJson(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        return json;\n    }\n\n    updateJson(json) {\n        json && this.loadInlineData(json);\n    }\n\n    //endregion\n\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n\n    doDestroy() {\n        this.timeRangeStore.destroy();\n        this.resourceTimeRangeStore.destroy();\n\n        super.doDestroy();\n    }\n};\n", "/**\n * @module Scheduler/model/mixin/ProjectCurrentConfig\n */\n\n/**\n * Mixin that makes sure current config for a project includes store data and is cleaned up properly.\n *\n * @mixin\n * @private\n */\nexport default Target => class ProjectCurrentConfig extends Target {\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs/fields for the project, with special handling for inline data\n    getCurrentConfig(options) {\n        const\n            me     = this,\n            result = super.getCurrentConfig(options);\n\n        if (result) {\n            for (const storeName of ['eventStore', 'resourceStore', 'assignmentStore', 'dependencyStore', 'timeRangeStore', 'resourceTimeRangeStore']) {\n                const store = me[storeName];\n\n                if (store) {\n                    if (store.count) {\n                        result[store.id + 'Data'] = store.getInlineData(options);\n                    }\n\n                    // Get stores current state, in case it has filters etc. added at runtime\n                    const storeState = store.getCurrentConfig(options);\n                    if (storeState && Object.keys(storeState).length > 0) {\n                        result[storeName] = Object.assign(result[storeName] || {}, storeState);\n                    }\n                    // Remove empty store configs\n                    else if (result[storeName] && Object.keys(result[storeName]).length === 0) {\n                        delete result[storeName];\n                    }\n                }\n            }\n\n            if (result.timeRangeStore) {\n                // Exclude default time range modelClass (it is a plain store), spam\n                if (me.timeRangeStore.originalModelClass === me.timeRangeModelClass || me.timeRangeStore.originalModelClass.$name === 'TimeSpan') {\n                    delete result.timeRangeStore.modelClass;\n                }\n\n                // Same for default storeId\n                if (result.timeRangeStore.storeId === 'timeRanges') {\n                    delete result.timeRangeStore.storeId;\n                }\n\n                // Since timeRangeStore is a plain store it is always configured with id, spam\n                if (Object.keys(result.timeRangeStore).length === 1) {\n                    delete result.timeRangeStore;\n                }\n            }\n\n            // Gantt specifics\n            if (me.taskStore.isTaskStore) {\n                delete result.eventModelClass;\n                delete result.eventStoreClass;\n                delete result.children;\n            }\n\n            return result;\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/data/util/ModelPersistencyManager\n */\n\n/**\n * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable\n * records from sync operation. The logic has meaning only for CRUD-less sync operations.\n *\n * @private\n */\nexport default class ModelPersistencyManager extends Base {\n    // region Event attachers\n\n    set eventStore(newEventStore) {\n        const me = this;\n\n        me.eventStoreDetacher && me.eventStoreDetacher();\n        me._eventStore = newEventStore;\n        if (newEventStore && newEventStore.autoCommit) {\n            me.eventStoreDetacher = newEventStore.ion({\n                beforecommit : me.onEventStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n\n    get eventStore() {\n        return this._eventStore;\n    }\n\n    set resourceStore(newResourceStore) {\n        const me = this;\n\n        me.resourceStoreDetacher && me.resourceStoreDetacher();\n        me._resourceStore = newResourceStore;\n\n        if (newResourceStore && newResourceStore.autoCommit) {\n            me.resourceStoreDetacher = newResourceStore.ion({\n                beforecommit : me.onResourceStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n\n    get resourceStore() {\n        return this._resourceStore;\n    }\n\n    set assignmentStore(newAssignmentStore) {\n        const me = this;\n\n        me.assignmentStoreDetacher && me.assignmentStoreDetacher();\n        me._assignmentStore = newAssignmentStore;\n\n        if (newAssignmentStore && newAssignmentStore.autoSync) {\n            me.assignmentStoreDetacher = newAssignmentStore.ion({\n                beforecommit : me.onAssignmentStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n\n    get assignmentStore() {\n        return this._assignmentStore;\n    }\n\n    set dependencyStore(newDependencyStore) {\n        const me = this;\n\n        me.dependencyStoreDetacher && me.dependencyStoreDetacher();\n        me._dependencyStore = newDependencyStore;\n\n        if (newDependencyStore && newDependencyStore.autoSync) {\n            me.dependencyStoreDetacher = newDependencyStore.ion({\n                beforecommit : me.onDependencyStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n\n    get dependencyStore() {\n        return this._dependencyStore;\n    }\n\n    // endregion\n\n    // region Event handlers\n\n    onEventStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n\n    onResourceStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n\n    onAssignmentStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n\n    onDependencyStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n\n    // endregion\n\n    // region Management rules\n\n    removeNonPersistableRecordsToCreate(changes) {\n        const recordsToCreate = changes.added || [];\n        let r, i;\n\n        // We remove from the array we iterate thus we iterate from end to start\n        for (i = recordsToCreate.length - 1; i >= 0; --i) {\n            r = recordsToCreate[i];\n            if (!r.isPersistable) {\n                recordsToCreate.splice(recordsToCreate.indexOf(r), 1);\n            }\n        }\n\n        // Prevent empty create request\n        if (recordsToCreate.length === 0) {\n            changes.added.length = 0;\n        }\n    }\n\n    shallContinueSync(options) {\n        return Boolean((options.added && options.added.length > 0) ||\n            (options.modified && options.modified.length > 0) ||\n            (options.removed && options.removed.length > 0));\n    }\n\n    // endregion\n}\n", "import VersionHelper from '../../Core/helper/VersionHelper.js';\nimport ProjectModelMixin from './mixin/ProjectModelMixin.js';\nimport ProjectCurrentConfig from './mixin/ProjectCurrentConfig.js';\nimport ModelPersistencyManager from '../data/util/ModelPersistencyManager.js';\n/* <remove-on-release> */\nimport { SchedulerBasicProjectMixin } from '../../Engine/quark/model/scheduler_basic/SchedulerBasicProjectMixin.js';\n/* </remove-on-release> */\nimport { SchedulerCoreProjectMixin } from '../../Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js';\nimport EventModel from './EventModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport EventStore from '../data/EventStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\n\nconst EngineMixin = /* <remove-on-release> */globalThis.bryntum?.useBasicEngine ? SchedulerBasicProjectMixin : /* </remove-on-release> */SchedulerCoreProjectMixin;\n\n/**\n * @module Scheduler/model/ProjectModel\n */\n\n/**\n * This class represents a global project of your Scheduler - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler:\n *\n * - {@link Scheduler.data.EventStore}\n * - {@link Scheduler.data.ResourceStore}\n * - {@link Scheduler.data.AssignmentStore}\n * - {@link Scheduler.data.DependencyStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n * - {@link Scheduler.data.ResourceTimeRangeStore}\n *\n * The project uses a calculation engine to normalize dates and durations. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler UI but which you must know about when performing\n * more advanced operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation (a\n * commit) which happens moments later. It is also possible to trigger these calculations directly. This snippet illustrate\n * the process:\n *\n 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * ## Using inline data\n *\n * The project provides settable property {@link Scheduler.crud.AbstractCrudManager#property-inlineData} that can\n * be used to get data from all its stores at once and to set this data as well. Populating the stores this way can\n * be useful if you cannot or you do not want to use CrudManager for server requests but you pull the data by other\n * means and have it ready outside of ProjectModel. Also, the data from all stores is available in a single\n * assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.project.inlineData = data;\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core.data.stm.StateTrackingManager StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\n * project store changes:\n *\n * ```javascript\n * // Turn on auto recording when you create your Scheduler:\n * const scheduler = new Scheduler({\n *    project : {\n *        stm : {\n *            autoRecord : true\n *        }\n *    }\n * });\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/ProjectModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class ProjectModel extends ProjectCurrentConfig(ProjectModelMixin(EngineMixin)) {\n    static get $name() {\n        return 'ProjectModel';\n    }\n\n    //region Inline data configs & properties\n\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n\n    /**\n     * Get/set {@link #property-eventStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.EventModel EventModels} but also accepts an array of\n     * its configuration objects as input.\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-eventStore}. Should be an array of\n     * {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Inline data\n     */\n\n    /**\n     * Get/set {@link #property-resourceStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceModel ResourceModels} but also accepts an array\n     * of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceStore}. Should be an array of\n     * {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Inline data\n     */\n\n    /**\n     * Get/set {@link #property-assignmentStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.AssignmentModel AssignmentModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n     * {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Inline data\n     */\n\n    /**\n     * Get/set {@link #property-dependencyStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.DependencyModel DependencyModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n     * {@link Scheduler.model.DependencyModel DependencyModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Inline data\n     */\n\n    /**\n     * Get/set {@link #property-timeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n     * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n     *\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Inline data\n     */\n\n    /**\n     * Get/set {@link #property-resourceTimeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n     * also accepts an array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n     * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @category Inline data\n     */\n\n    //endregion\n\n    //region Legacy inline data configs & properties\n\n    /**\n     * The initial data, to fill the {@link #property-eventStore} with.\n     * Should be an array of {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} eventsData\n     * @category Legacy inline data\n     */\n\n    /**\n     * The initial data, to fill the {@link #property-dependencyStore} with.\n     * Should be an array of {@link Scheduler.model.DependencyModel DependencyModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} [dependenciesData]\n     * @category Legacy inline data\n     */\n\n    /**\n     * The initial data, to fill the {@link #property-resourceStore} with.\n     * Should be an array of {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} [resourcesData]\n     * @category Legacy inline data\n     */\n\n    /**\n     * The initial data, to fill the {@link #property-assignmentStore} with.\n     * Should be an array of {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} [assignmentsData]\n     * @category Legacy inline data\n     */\n\n    //endregion\n\n    //region Store configs & properties\n\n    /**\n     * The {@link Scheduler.data.EventStore store} holding the events information.\n     *\n     * See also {@link Scheduler.model.EventModel}\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.EventStore} instance or a config object.\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Models & Stores\n     */\n\n    /**\n     * The {@link Scheduler.data.DependencyStore store} holding the dependencies information.\n     *\n     * See also {@link Scheduler.model.DependencyModel}\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.DependencyStore} instance or a config object.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Models & Stores\n     */\n\n    /**\n     * The {@link Scheduler.data.ResourceStore store} holding the resources that can be assigned to the events in the event store.\n     *\n     * See also {@link Scheduler.model.ResourceModel}\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.ResourceStore} instance or a config object.\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Models & Stores\n     */\n\n    /**\n     * The {@link Scheduler.data.AssignmentStore store} holding the assignments information.\n     *\n     * See also {@link Scheduler.model.AssignmentModel}\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.AssignmentStore} instance or a config object.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Models & Stores\n     */\n\n    //endregion\n\n    //region Configs\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {Scheduler.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {Scheduler.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {Scheduler.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.EventStore}\n             * @config {Scheduler.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.DependencyStore}\n             * @config {Scheduler.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.ResourceStore}\n             * @config {Scheduler.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.AssignmentStore}\n             * @config {Scheduler.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {Scheduler.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n\n    //endregion\n\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new Scheduler({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n\n    construct(...args) {\n        super.construct(...args);\n\n        if (VersionHelper.isTestEnv) {\n            globalThis.bryntum.testProject = this;\n        }\n\n        // Moved here from EventStore, since project is now the container instead of it\n        this.modelPersistencyManager = this.createModelPersistencyManager();\n    }\n\n    /**\n     * Creates and returns model persistency manager\n     *\n     * @returns {Scheduler.data.util.ModelPersistencyManager}\n     * @internal\n     */\n    createModelPersistencyManager() {\n        return new ModelPersistencyManager({\n            eventStore      : this,\n            resourceStore   : this.resourceStore,\n            assignmentStore : this.assignmentStore,\n            dependencyStore : this.dependencyStore\n        });\n    }\n\n    doDestroy() {\n        this.modelPersistencyManager.destroy();\n        super.doDestroy();\n    }\n\n    // To comply with TaskBoards expectations\n    get taskStore() {\n        return this.eventStore;\n    }\n}\n\nProjectModel.applyConfigs = true;\n\nProjectModel.initClass();\n", "/**\n * @module Scheduler/crud/mixin/CrudManagerView\n */\n\nimport LoadMaskable from '../../../Core/mixin/LoadMaskable.js';\nimport Mask from '../../../Core/widget/Mask.js';\n\n/**\n * Mixin to track Crud Manager requests to the server and mask the view during them. For masking, it\n * uses the {@link Core.mixin.LoadMaskable#config-loadMask} and {@link Core.mixin.LoadMaskable#config-syncMask}\n * properties.\n *\n * @mixin\n * @extends Core/mixin/LoadMaskable\n */\nexport default Target => class CrudManagerView extends Target.mixin(LoadMaskable) {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{GridBase.loadFailedMessage}',\n        'L{GridBase.syncFailedMessage}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'CrudManagerView';\n    }\n\n    static config = {\n        clearMaskDelay : null,\n\n        // Test environment may be in a poll wait for mask to disappear.\n        // Hiding the mask immediately, before the load sequence ends releases it too early\n        testConfig : {\n            clearMaskDelay : 0\n        }\n    };\n\n    //region Init\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        const { crudManager, project } = this;\n\n        if (this.loadMask && (crudManager || project).isCrudManagerLoading) {\n            // Show loadMask if crud manager is already loading\n            this.onCrudManagerLoadStart();\n        }\n    }\n\n    //endregion\n\n    /**\n     * Applies the {@link Scheduler.crud.mixin.CrudManagerView#config-syncMask} as the\n     * {@link Core.widget.Widget#config-masked mask} for this widget.\n     * @internal\n     */\n    applySyncMask() {\n        const { syncMask } = this;\n\n        if (syncMask) {\n            this.masked = Mask.mergeConfigs(this.loadMaskDefaults, syncMask);\n        }\n    }\n\n    /**\n     * Hooks up crud manager listeners\n     * @private\n     * @category Store\n     */\n    bindCrudManager(crudManager) {\n        this.detachListeners('crudManager');\n\n        crudManager?.ion({\n            name                : 'crudManager',\n            loadStart           : 'onCrudManagerLoadStart',\n            beforeSend          : 'onCrudManagerBeforeSend',\n            load                : 'onCrudManagerLoad',\n            loadCanceled        : 'onCrudManagerLoadCanceled',\n            syncStart           : 'onCrudManagerSyncStart',\n            beforeApplyResponse : 'onCrudManagerBeforeApplyResponse',\n            applyResponse       : 'onCrudManagerApplyResponse',\n            sync                : 'onCrudManagerSync',\n            syncCanceled        : 'onCrudManagerSyncCanceled',\n            requestFail         : 'onCrudManagerRequestFail',\n            responseReceived    : 'onAjaxTransportResponseReceived',\n            thisObj             : this\n        });\n    }\n\n    onCrudManagerBeforeSend({ params }) {\n        this.applyStartEndParameters?.(params);\n    }\n\n    onCrudManagerLoadStart() {\n        // Show loadMask before crud manager starts loading\n        this.applyLoadMask();\n        this.toggleEmptyText?.();\n    }\n\n    onCrudManagerSyncStart() {\n        this.applySyncMask();\n    }\n\n    onCrudManagerBeforeApplyResponse() {\n        // Prevent redrawing for each applied change, instead do it once after all changes are applied\n        // (TaskBoard does not have suspendRefresh/resumeRefresh, it already updates on a buffer so not needed)\n        this.suspendRefresh?.();\n    }\n\n    onCrudManagerApplyResponse() {\n        // Repaint rows once after applying changes\n        this.resumeRefresh?.(true);\n    }\n\n    onCrudManagerRequestFinalize(successful = true, requestType, response) {\n        const\n            me = this;\n\n        if (successful) {\n            me.toggleEmptyText?.();\n        }\n        else {\n            if (!me.masked) {\n                me.applyLoadMask();\n            }\n            me.applyMaskError(\n                `<div class=\"b-grid-load-failure\">\n                    <div class=\"b-grid-load-fail\">${me.L(`L{GridBase.${requestType}FailedMessage}`)}</div>\n                    ${response && response.message ? `<div class=\"b-grid-load-fail\">${me.L('L{CrudManagerView.serverResponseLabel}')} ${response.message}</div>` : ''}\n                </div>`);\n        }\n    }\n\n    onCrudManagerLoadCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n\n    onCrudManagerSyncCanceled() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n\n    onCrudManagerLoad() {\n        this.onCrudManagerRequestFinalize(true, 'load');\n    }\n\n    onCrudManagerSync() {\n        this.onCrudManagerRequestFinalize(true, 'sync');\n    }\n\n    onCrudManagerRequestFail({ requestType, response }) {\n        this.onCrudManagerRequestFinalize(false, requestType, response);\n    }\n\n    onAjaxTransportResponseReceived() {\n        const me = this;\n        if (me.clearMaskDelay != null) {\n            me.setTimeout(() => me.masked = null, me.clearMaskDelay);\n        }\n        else {\n            me.masked = null;\n        }\n    }\n\n    get widgetClass() {}\n};\n"],
  "mappings": "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",
  "names": ["diffSecond", "date", "diff", "Date", "getFullYear", "getMonth", "getDate", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "later", "version", "Array", "prototype", "indexOf", "searchElement", "TypeError", "t", "Object", "len", "length", "n", "arguments", "Number", "Infinity", "Math", "floor", "abs", "k", "max", "String", "trim", "replace", "array", "sort", "arr", "zeroIsLast", "a", "b", "push", "shift", "next", "val", "values", "extent", "cur", "zeroIsLargest", "nextIdx", "i", "nextInvalid", "min", "zeroVal", "start", "prev", "prevIdx", "prevInvalid", "day", "D", "name", "range", "d", "call", "isValid", "DExtent", "month", "M", "DAYS_IN_MONTH", "dy", "DStart", "Y", "end", "DEnd", "nextRollover", "DMax", "prevRollover", "dayOfWeekCount", "dc", "dcExtent", "ceil", "dcStart", "dcEnd", "dcMax", "getTime", "dayOfWeek", "dw", "getDay", "dayOfYear", "DAY", "year", "dyExtent", "dyMax", "hour", "h", "getHour", "hStart", "hEnd", "isUTC", "minute", "m", "getMin", "mStart", "mEnd", "s", "inc", "MIN", "SEC", "MStart", "MEnd", "second", "getSec", "cache", "time", "weekOfMonth", "wm", "wmExtent", "wmStart", "wmEnd", "wmMax", "weekOfYear", "wy", "wThur", "YThur", "WEEK", "wyExtent", "dwFirst", "dwLast", "wyStart", "wyEnd", "wyThur", "wyMax", "getYear", "YStart", "YEnd", "NEVER", "fullDate", "fd", "modifier", "after", "constraint", "value", "startDate", "before", "compile", "schedDef", "constraints", "constraintsLen", "tickConstraint", "key", "nameParts", "split", "mod", "vals", "ra", "rb", "compareFn", "dir", "nextVal", "maxAttempts", "done", "curVal", "newVal", "result", "compare", "undefined", "tick", "tickSafe", "tickStart", "schedule", "sched", "Error", "schedules", "schedulesLen", "exceptions", "exceptionsLen", "j", "getInstances", "count", "endDate", "isRange", "loopCount", "schedStarts", "exceptStarts", "results", "isForward", "lastResult", "rStart", "rEnd", "setNextStarts", "setRangeStarts", "findNext", "updateRangeStarts", "calcRangeOverlap", "updateNextStarts", "maxEndDate", "calcMaxEndDate", "calcEnd", "r", "getStart", "tickStarts", "toString", "cleanDate", "isNaN", "valueOf", "schedArr", "startsArr", "rangesArr", "nextStart", "newStart", "minEndDate", "exceptsArr", "nextRange", "prevRange", "setTimeout", "fn", "scheduleTimeout", "now", "isDone", "clear", "clearTimeout", "setInterval", "timezone", "useLocalTime", "build", "UTC", "get", "localTime", "HOUR", "period", "parse", "cron", "expr", "hasSeconds", "NAMES", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC", "SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT", "REPLACEMENTS", "FIELDS", "getValue", "offset", "cloneSchedule", "clone", "field", "slice", "add", "addHash", "curSched", "hash", "addWeekday", "except1", "except2", "addRange", "item", "incSplit", "rangeSplit", "isHash", "itemSorter", "parseExpr", "components", "f", "component", "items", "prepareExpr", "prepared", "toUpperCase", "e", "recur", "curArr", "curName", "every", "applyMin", "applyMax", "last", "x", "c", "on", "first", "dayOfMonth", "onWeekend", "onWeekday", "customModifier", "id", "custom", "customPeriod", "startingOn", "between", "splice", "and", "except", "text", "str", "pos", "input", "error", "TOKENTYPES", "eof", "rank", "dayName", "monthName", "yearIndex", "dayInstance", "weekday", "weekend", "at", "also", "of", "onthe", "through", "jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec", "sun", "mon", "tue", "wed", "thu", "fri", "sat", "fir", "sec", "thi", "type", "startPos", "endPos", "peek", "expected", "scanTokens", "whiteSpace", "token", "curInput", "scanToken", "substring", "exec", "index", "scan", "expectedToken", "parseThroughExpr", "tokenType", "parseTokenValue", "checkAndParse", "nums", "parseRanges", "concat", "parseEvery", "num", "parseTimePeriod", "parseToken", "parseOnThe", "parseScheduleExpr", "timePeriod", "found", "convertString", "output", "parts", "parseInt", "toLowerCase", "iterable", "gen1Pending", "gen2Pending", "iterator", "gen1", "Symbol", "gen2", "inBatchesBySize", "batchSize", "runningBatch", "el", "filter", "func", "drop", "howMany", "some", "map", "reduce", "initialAcc", "acc", "uniqueOnly", "seen", "Set", "has", "uniqueOnlyBy", "uniqueBy", "takeWhile", "iterators", "concatIterable", "iteratorsProducer", "ChainedIteratorClass", "constructor", "derive", "copy", "iter1", "iter2", "toArray", "from", "order", "toSet", "toMap", "Map", "flush", "element", "memoize", "MemoizedIteratorClass", "ChainedIterator", "CI", "elements", "$iterator", "$iterable", "alreadyConsumed", "MemoizedIterator", "MI", "MixinInstanceOfProperty", "MixinStateProperty", "MixinWalkDepthState", "baseEl", "sourceEl", "$elementsByTopoLevel", "$topoLevels", "linearizedByTopoLevelsSource", "linearizedByTopoLevels", "new", "props", "me", "assign", "topoLevels", "buildTopoLevels", "elementsByTopoLevel", "keys", "level1", "level2", "buildElementsByTopoLevel", "getOrCreateLevel", "topoLevel", "elementsAtLevel", "set", "maxTopoLevel", "baseElements", "walkDepthState", "requirements", "mixin", "mixins", "level", "mixin1", "mixin2", "MIXIN_ID", "identity", "ZeroBaseClass", "MixinState", "baseClass", "identitySymbol", "mixinLambda", "$minimalClass", "getMixinState", "symbol", "mixinLambdaWrapper", "base", "extendedClass", "defineProperty", "hasInstance", "isInstanceOfStatic", "minimalClass", "buildMinimalClass", "getBaseClassMixinId", "mixinId", "baseClassesIds", "newId", "self", "baseCls", "minimalClassConstructor", "cls", "nextHash", "fromCharCode", "wrapperCls", "minimalClassesByLinearHash", "mix", "Mixin", "$", "bind", "isMixinClass", "getPrototypeOf", "hasOwnProperty", "required", "lastRequirement", "forEach", "requirement", "mixinState", "currentBaseClass", "currentIsSub", "isPrototypeOf", "currentIsSuper", "instance", "Boolean", "isInstanceOf", "MixinAny", "TimeUnit", "ConstraintType", "SchedulingMode", "DependencyValidationResult", "DependencyType", "DependenciesCalendar", "ProjectType", "Direction", "isEqualEffectiveDirection", "direction", "kind", "enforcedBy", "inheritedFrom", "ConstraintIntervalSide", "MIN_DATE", "MAX_DATE", "isDateFinite", "EdgeInclusion", "CalendarIteratorResult", "CalendarCache", "config", "cacheFilledStartDate", "cacheFilledEndDate", "intervalsCachingChunkDuration", "intervalsCachingChunkUnit", "Day", "maxCacheExtendCycles", "maxRange", "includeWrappingRangeFrom", "ensureCacheFilledForInterval", "intervalCache", "includeWrappingRange", "cacheFilledStartDateN", "cacheFilledEndDateN", "startDateN", "endDateN", "fillCache", "_1", "_2", "forEachAvailabilityInterval", "options", "scope", "cacheCursorDate", "cursorDate", "rangeStart", "cycle", "DateHelper", "interval", "getIntervalOf", "Left", "Right", "intervalStartDate", "intervalEndDate", "FullRangeIterated", "MaxRangeReached", "countFrom", "countTill", "cacheInterval", "StoppedByIterator", "getNextInterval", "getPrevInterval", "MaxCacheExtendCyclesReached", "stripDuplicates", "CalendarCacheInterval", "intervals", "calendar", "includeInterval", "combineWith", "getIsWorking", "isWorking", "normalizeIntervals", "filtered", "interval1", "interval2", "getPriorityField", "binarySearch", "comparator", "left", "right", "mid", "IndexPosition", "SortedMap", "search", "insertAt", "setValueAt", "getEntryAt", "getKeyAt", "getValueAt", "delete", "deleteAt", "size", "indexOfKey", "Exact", "Next", "getAllEntries", "IntervalCache", "points", "leftInfinityKey", "rightInfinityKey", "emptyInterval", "combineIntervalsFn", "getDateAt", "getPointAt", "edgeInclusion", "startDateIndex", "getIntervalWithStartDateIndex", "addInterval", "extendInterval", "curIndex", "lastUpdatedPoint", "inclusion", "curDate", "existingInterval", "getSummary", "label", "CalendarCacheSingle", "staticIntervalsCached", "unspecifiedTimeInterval", "_this$calendar$projec", "cacheStaticIntervals", "parentCache", "timeZone", "ignoreTimeZone", "project", "forEachRecurrentInterval", "startSchedule", "getStartDateSchedule", "endSchedule", "getEndDateSchedule", "wrappingStartDate", "wrappingEndDate", "nextEndDate", "getStartOfNextDay", "wrappingStartDates", "wrappingEndDates", "startDates", "endDates", "recStartDate", "recEndDate", "TimeZoneHelper", "toTimeZone", "existingCacheInterval", "forEachStaticInterval", "_this$calendar$projec2", "intervalStore", "isStatic", "isRecurrent", "AbstractPartOfProjectGenericMixin", "commitAsync", "$project", "calculateProject", "setProject", "getProject", "getAssignmentStore", "assignmentStore", "getDependencyStore", "dependencyStore", "getEventStore", "eventStore", "getResourceStore", "resourceStore", "getCalendarManagerStore", "calendarManagerStore", "AbstractPartOfProjectStoreMixin", "Store", "superProto", "isLoadingData", "disableHasLoadedDataToCommitFlag", "$name", "construct", "asyncEvents", "remove", "removeAll", "change", "refresh", "move", "update", "trigger", "eventName", "param", "asyncEvent", "action", "isEngineReady", "isWritingData", "eventsSuspended", "dataReadyDetacher", "queuedDataReadyEvents", "ion", "dataReady", "once", "setStoreData", "data", "_this$project", "syncDataOnLoad", "hasLoadedDataToCommit", "store", "doAutoCommit", "suspendCount", "addAsync", "records", "silent", "insertAsync", "insert", "loadDataAsync", "performFilter", "_this$rootNode", "rootNode", "isLoading", "then", "AbstractPartOfProjectModelMixin", "Model", "joinStore", "joinedProject", "isRepopulatingStores", "joinProject", "unjoinStore", "isReplacing", "isLeavingProjectStore", "isFillingFromMaster", "isChained", "masterStore", "isDestroying", "leaveProject", "graph", "stores", "find", "setAsync", "fieldName", "getAsync", "_this$project2", "isStmRestoring", "isRestoringData", "stm", "isRestoring", "CalendarIntervalMixin", "fields", "defaultValue", "getCalendar", "resetPriority", "priorityField", "getDepth", "priority", "recurrentStartDate", "recurrentEndDate", "parseDateSchedule", "JSON", "startDateSchedule", "endDateSchedule", "CalendarIntervalStore", "defaultConfig", "modelClass", "UnspecifiedTimeIntervalModel", "CorePartOfProjectGenericMixin", "_this$project3", "_this$project4", "_this$project5", "getEventById", "_this$eventStore", "getById", "getDependencyById", "_this$dependencyStore", "getResourceById", "_this$resourceStore", "getAssignmentById", "_this$assignmentStore", "getCalendarById", "_this$calendarManager", "AbstractCalendarMixin", "CalendarMixin", "subStore", "intervalStoreClass", "meta", "intervalsStore", "initIntervalsStore", "storeClass", "getDefaultConfiguration", "calendarIntervalModelClass", "processIntervalsStoreData", "bumpVersion", "isDefault", "defaultCalendar", "childLevel", "_this$getProject", "maxCalendarRange", "calendarCache", "accumulateWorkingTime", "durationMs", "_this$getProject2", "finalDate", "remainingDurationInMs", "adjustDurationToDST", "calendarCacheInterval", "dstDiff", "getTimezoneOffset", "calculateDurationMs", "allowNegative", "duration", "multiplier", "calculateEndDate", "res", "calculateStartDate", "skipNonWorkingTime", "workingDate", "addIntervals", "removeInterval", "removeIntervals", "clearIntervals", "clearCache", "$calendarCache", "unspecifiedTimeIsWorking", "parent", "isRoot", "resetPriorityOfAllIntervals", "traverse", "insertChild", "child", "isArray", "doDestroy", "destroy", "isDayHoliday", "clearTime", "getNext", "hasWorkingTime", "_intervalStartDate", "_intervalEndDate", "getDailyHolidaysRanges", "getWorkingTimeRanges", "entry", "getNonWorkingTimeRanges", "iconCls", "isWorkingTime", "fullyContained", "workingTimeStart", "AbstractHasAssignmentsMixin", "HasAssignmentsMixin", "getAssignmentFor", "resource", "assignment", "_a", "assigned", "isAssignedTo", "assignmentCls", "addAssignment", "event", "unassign", "removeAssignment", "isInActiveTransaction", "assignmentsForRemoval", "afterEventRemoval", "CorePartOfProjectModelMixin", "$isCalculating", "$changed", "$beforeChange", "invalidate", "bufferedCommitAsync", "getCurrentOrProposed", "hasCurrentOrProposed", "propose", "changes", "_this$recurringTimeSp", "recurringTimeSpan", "setChanged", "setData", "calculateInvalidated", "finalizeInvalidated", "isNotNumber", "CIFromSetOrArrayOrValue", "delay", "Promise", "resolve", "format", "match", "number", "AbstractAssignmentStoreMixin", "allAssignmentsForRemoval", "AbstractCalendarManagerStoreMixin", "isDestroyed", "record", "AbstractDependencyStoreMixin", "dependenciesForRemoval", "allDependenciesForRemoval", "dataAddRemoveActions", "AbstractEventStoreMixin", "onDataChange", "_event$removed", "isAddRemove", "removed", "onNodeRemoveChild", "children", "flags", "toRemove", "dependency", "processRecord", "eventRecord", "isDataset", "existingRecord", "AbstractResourceStoreMixin", "afterResourceRemoval", "resourceRecord", "CoreEventMixin", "_startDate", "_endDate", "_duration", "_b", "proposeStartDate", "proposeEndDate", "proposeDuration", "inSet", "fromRelationUpdate", "skipAccessors", "getStartDate", "keepDuration", "_this$startDate", "inSetting", "setStartDate", "getEndDate", "_this$endDate", "setEndDate", "getDuration", "unit", "keepStart", "durationUnit", "setDuration", "getDurationUnit", "changed", "_me$assignmentStore", "unresolved", "storage", "findItem", "_me$assignmentStore2", "cachedAssignments", "applyValue", "useProp", "afterChange", "wasSet", "changedStart", "changedEnd", "changedDuration", "calculate", "currentOrProposedStartDate", "currentOrProposedEndDate", "currentOrProposedDuration", "currentOrProposedDurationUnit", "hourDuration", "targetDuration", "as", "CoreResourceMixin", "getResourcesAssignments", "query", "skipAccessor", "asId", "recordOrId", "isModel", "CoreAssignmentMixin", "isEqual", "persist", "$master", "isPerformingCommit", "skipInvalidateIndices", "invalidateIndices", "resolved", "resourceId", "eventId", "CorePartOfProjectStoreMixin", "onCommitAsync", "emptySet", "CoreAssignmentStoreMixin", "extraKeys", "property", "unique", "getEventsAssignments", "$original", "updateIndices", "rebuildIndices", "afterLoadData", "linkAssignments", "modelName", "unlinkAssignments", "_assignment$modelName", "getData", "CoreCalendarMixin", "CoreCalendarManagerStoreMixin", "tree", "CoreDependencyMixin", "_this$dependencyStore2", "fromEvent", "toEvent", "_this$eventStore2", "_this$eventStore3", "CoreDependencyStoreMixin", "getIncomingDepsForEvent", "getOutgoingDepsForEvent", "CoreHasAssignmentsMixin", "$cachedAssignments", "_this$assigned", "deep", "ObjectHelper", "isObject", "skipFieldIdentifiers", "CoreHasDependenciesMixin", "outgoingDeps", "incomingDeps", "SchedulerCoreEvent", "CoreEventStoreMixin", "_this$assignmentStore2", "CoreResourceStoreMixin", "removing", "_this$assignmentStore3", "EventsWrapper", "Events", "DelayableWrapper", "Delayable", "AbstractProjectMixin", "isInitialCommit", "isInitialCommitPerformed", "isLoadingInlineData", "silenceInitialCommit", "repopulateStore", "repopulateReplica", "deferUntilRepopulationIfNeeded", "deferId", "args", "attachStore", "detachStore", "getStm", "SchedulerCoreProjectMixin", "configurable", "eventModelClass", "assignmentModelClass", "resourceModelClass", "dependencyModelClass", "calendarModelClass", "eventStoreClass", "assignmentStoreClass", "resourceStoreClass", "dependencyStoreClass", "calendarManagerStoreClass", "assignmentsData", "calendarsData", "dependenciesData", "eventsData", "resourcesData", "$invalidated", "ongoing", "_eventStore$crudManag", "crudManager", "isAssignmentStore", "isSharingAssignmentStore", "loadInlineData", "_me$eventStore", "_me$dependencyStore", "_me$resourceStore", "_me$calendarManagerSt", "_me$stm", "tasksData", "commitLoad", "joinStoreRecords", "unJoinStoreRecords", "node", "resolveStoreAndModelClass", "setEventStore", "changeEventStore", "oldStore", "addStore", "hasStore", "removeStore", "oldEvent", "newEvent", "updateEventStore", "setAssignmentStore", "changeAssignmentStore", "updateAssignmentStore", "setResourceStore", "changeResourceStore", "oldResource", "newResource", "updateResourceStore", "setDependencyStore", "changeDependencyStore", "updateDependencyStore", "setCalendarManagerStore", "changeCalendarManagerStore", "_calendarManagerStore", "_calendarManagerStore2", "updateCalendarManagerStore", "$calendar", "effectiveCalendar", "addEvent", "addResource", "addDependency", "hasPendingAutoCommit", "hasTimeout", "unScheduleAutoCommit", "doCommitAsync", "silenceCommit", "_store$suspendAutoCom", "suspendAutoCommit", "isCalculated", "beginBatch", "endBatch", "_store$resumeAutoComm", "resumeAutoCommit", "propagateAsync", "isValidDependency", "$stm", "StateTrackingManager", "disabled", "restoringStop", "disable", "enable", "applyConfigs", "dateFieldsToConvert", "constraintDate", "deadlineDate", "TimeZonedDatesMixin", "Target", "TimeSpan", "setLocalDate", "getLocalDate", "fromTimeZone", "applyChangeset", "rawChanges", "getFieldPersistentValue", "convertToTimeZone", "metaModified", "modified", "convertFields", "isTask", "manuallyScheduled", "clearChanges", "isEmpty", "__publicField", "allowNull", "internal", "column", "fullDuration", "magnitude", "normalize", "isOccurrence", "_eventStore", "_me$stores", "isEventStore", "hasDuration", "DH", "updateInternalCls", "_cls", "DomClassList", "internalCls", "isDomClassList", "endingDate", "parseFloat", "updateDatesFromDuration", "getDurationInUnit", "doNotRound", "Duration", "parseDuration", "calcEndDate", "calcStartDate", "setStartEndDate", "dates", "startOf", "startDateMS", "_ref", "batching", "hasBatchedChange", "endDateMS", "_ref2", "durationMS", "asMilliseconds", "isMilestone", "inSetNormalize", "getFieldDefinition", "convert", "fieldOrClone", "isFrozen", "fieldToKeys", "isEventModel", "isTaskModel", "validOnly", "forEachDate", "thisObj", "isScheduled", "amount", "u", "wbsCode", "_wbsCode", "indexPath", "join", "fullCopy", "apply", "intersects", "timeSpan", "intersectsRange", "myStart", "myEnd", "intersectSpans", "splitPoint", "oldDuration", "cloneDuration", "ownNewDuration", "unitsChanged", "usesSingleAssignment", "assignments", "clonedData", "toICSString", "icsEventConfig", "timestamp", "DTSTAMP", "startEnd", "allDay", "DTSTART", "DTEND", "VersionHelper", "scheduler", "getVersion", "icsWrapConfig", "BEGIN", "VERSION", "CALSCALE", "PRODID", "END", "eventConfig", "UID", "CLASS", "SUMMARY", "recurrenceRule", "RRULE", "icsItems", "eventItems", "exportToICS", "blob", "Blob", "BrowserHelper", "downloadBlob", "isEditable", "isFieldModified", "_$name", "ResourceStoreMixin", "Base", "isResourceStore", "loadPriority", "syncPriority", "storeId", "autoTree", "isResourceModel", "onRecordIdChange", "oldValue", "isChangingId", "updateAssignmentResourceIds", "allResourceRecords", "_allResourceRecords", "getAllDataRecords", "getAvailableResources", "isDateRangeAvailable", "PartOfProject", "ResourceModelMixin", "syncId", "events", "getEvents", "deprecate", "isPersistable", "unassignAll", "initials", "names", "firstInitial", "lastInitial", "_calendar$isWorkingTi", "EngineMixin", "ResourceModel", "GridRowModel", "exposeProperties", "AjaxStore", "ResourceStore", "EventStoreMixin", "removeUnassignedEvent", "singleAssignment", "filtersFunction", "FunctionHelper", "returnTrue", "isCreating", "getEventCounts", "added", "storeFilterFn", "isFiltered", "reapplyFilterOnAdd", "includes", "dateMap", "forEachScheduledEvent", "getTotalTimeSpan", "earliest", "latest", "lastTotalTimeSpan", "isEventPersistable", "excludeEvent", "generatedParent", "allEvents", "getEventsForResource", "isAssignment", "resources", "eventToRemove", "filterEventsForResource", "getResourcesForEvent", "getAssignmentsForEvent", "getAssignmentsForResource", "assignEventToResource", "removeExistingAssignments", "unassignEventFromResource", "reassignEventFromResourceToResource", "newResourceId", "getAssignmentForEventAndResource", "isEventAssignedToResource", "removeAssignmentsForEvent", "removeAssignmentsForResource", "append", "detachListeners", "_project$assignmentSt", "attachToAssignmentStore", "assignmentStoreChange", "prio", "_usesSingleAssignment", "isStore", "hasGenerateIdOverride", "generateId", "singleAssignmentIdCounter", "processRecords", "eventRecords", "_this$stm", "assignmentsToAdd", "reassignedFromReplace", "includesAssignment", "joinRecordsToStore", "_me$crudManager", "_me$modelClass$fieldM", "resourceIds", "skipEnforcingSingleAssignment", "fieldMap", "$processResourceIds", "assignmentSet", "processResourceIds", "_me$crudManager2", "_me$project", "rId", "useRawData", "disableDefaultValue", "disableDuplicateIdCheck", "disableTypeConversion", "verifyNoGeneratedIds", "loadData", "onBeforeRemoveAssignment", "isRemoving", "isSettingData", "isSyncingDataOnLoad", "assignmentRecord", "isRemoved", "onProjectAssignmentStoreChange", "addPreCommit", "isAssigning", "_me$modelClass$fieldM2", "isEvent", "beforeRemove", "removePreCommit", "_me$modelClass$fieldM3", "_me$getById", "indexToRemove", "removeAllPreCommit", "_me$modelClass$fieldM4", "allRecords", "_me$modelClass$fieldM5", "_me$modelClass$fieldM6", "params", "_this$stm2", "isAssign", "_this$crudManager", "notRecurring", "isRecurring", "GetEventsMixin", "startOnly", "includeOccurrences", "allowPartial", "onlyAssigned", "dayTime", "getDateIndex", "lastDateRange", "passedFilter", "ignoreFilters", "setDate", "dateFilter", "eventStartDate", "eventEndDate", "betweenLesserEqual", "newDateRange", "processConfiguredListeners", "old", "Objects", "getEventsAsMap", "getEventsAsArray", "allCount", "candidateEvents", "dateIndex", "useDayIndex", "eventSet", "indexName", "recurringEvents", "startOfDay", "coincidingEvents", "getOccurrencesForDateRange", "_dateMap", "baseEventFilter", "_me$recurringEvents", "_coincidingEvents", "occurrences", "lastDate", "bucket", "occurrence", "lastIntersectingDate", "dateKey", "indexNameMap", "indexProps", "emptyArray", "freeze", "MILLIS_PER_DAY", "DayTime", "EventDayIndex", "MIDNIGHT", "users", "_this$dayTime$startOf", "dateMS", "_eventRecord$endDate", "create", "returnKey", "initialized", "initialize", "ret", "sync", "allValues", "matches", "startShift", "removeEvent", "_this$dayTime$startOf2", "replaced", "_wasSet$startDate", "_wasSet$endDate", "addedCount", "removedCount", "replacedCount", "outgoingEvent", "isParent", "register", "unregister", "proto", "DayIndexMixin", "dayIndices", "_super$afterLoadData", "syncIndices", "onDataReplaced", "onModelChange", "invalidateDayIndices", "_this$dayIndices", "dayIndex", "registerDayIndex", "_this$dayIndices2", "unregisterDayIndex", "RecurringTimeSpansMixin", "globalOccurrences", "refreshRecurringEventsCache", "isRecurrenceRelatedFieldChange", "removeOccurrences", "getOccurrencesForTimeSpan", "recurrence", "forEachOccurrence", "getRecurringTimeSpans", "RecurringEventsMixin", "getRecurringEvents", "supportsRecurring", "dayParseRegExp", "days", "RecurrenceDayRuleEncoder", "decodeDay", "rawDay", "parsedDay", "encodeDay", "position", "decode", "rawDays", "encode", "frequencyToUnitRe", "frequencyToUnit", "frequency", "counter", "isFirst", "buildOccurrence", "captureLastOccurrence", "lastOccurrenceDate", "AbstractRecurrenceIterator", "processIterationConfig", "until", "syncingStartDate", "isSyncedWithRule", "timeSpanStart", "earliestVisibleDate", "extraArgs", "timeSpanStartMS", "earliestVisibleDateMS", "spansStart", "getOccurrenceIndex", "getNthDayInPeriod", "sign", "borderDate", "delta", "buildDate", "dt", "isValidPosition", "forEachDateAtPositions", "positions", "datesLength", "processed", "isInView", "occurrenceDate", "hasException", "isInViewMS", "occurenceDate", "occurrenceDateMS", "MAX_OCCURRENCES_COUNT", "DailyRecurrenceIterator", "intervalDuration", "delayInIntervals", "inView", "WeeklyRecurrenceIterator", "_weekDays", "weekStartDay", "startHours", "startMinutes", "startSeconds", "startMS", "weekDays", "DayRuleEncoder", "weekStartDate", "MonthlyRecurrenceIterator", "getNthDayOfMonth", "dayNum", "daysInMonth", "hasPositions", "processedDate", "monthDays", "weekDayPosition", "monthStartDate", "monthEndDate", "weekDay", "till", "copyTimeValues", "sortedMonthDates", "YearlyRecurrenceIterator", "months", "yearStartDate", "yearEndDate", "recurrenceIterators", "it", "convertStringOfIntegerItemsValue", "convertStringOfItemsValue", "isEqualAsString", "value1", "value2", "convertInteger", "RecurrenceModel", "isRecurrenceModel", "dateFormat", "_dateFormat", "recurrenceIterator", "_timeSpan", "rule", "part", "sanitize", "_suspendedTimeSpanNotifying", "suspendTimeSpanNotifying", "resumeTimeSpanNotifying", "_me$timeSpan", "timeSpanStartDate", "isSanitizing", "_me$monthDays", "sanitizeRecurrenceData", "isTimeSpanNotifyingSuspended", "onRecurrenceChanged", "convertExceptionDatesValue", "ArrayHelper", "asArray", "makeKey", "serializeExceptionDatesValue", "parseKey", "RecurringTimeSpan", "serialize", "cancelBatch", "detachFromRecurringEvent", "_this$firstStore", "recurringEvent", "firstStore", "isRecurringTimeSpansMixin", "recurrenceModel", "_recurrenceModel", "model", "setRecurrence", "recurrenceEnd", "_recurrence", "_recurringTimeSpan", "occurrenceMap", "_occurrencesMap", "removeOccurrence", "dateOrTimeSpan", "isTimeSpan", "createRecurrenceKey", "removeOccurrencesFrom", "_this$recurrence", "exceptionDates", "_this$meta$modified", "occurrenceIndex", "occurrenceKey", "onStartDate", "occurrenceEndDate", "dataSource", "constraintType", "creatingOccurrence", "convertToRealEvent", "_wasSet$resourceRecor", "resourceRecords", "newExceptionDate", "addExceptionDate", "_this$exceptionDates", "oneDayMS", "EventModelMixin", "updateAssignmentEventIds", "_me$fieldMap", "newResourceIds", "existingResourceIds", "onlyInA", "toAdd", "onlyInB", "forEachResource", "getResource", "getAllDayStartDate", "getAllDayEndDate", "wrapStartDate", "wrapEndDate", "isDraggable", "readOnly", "draggable", "isResizable", "resizable", "wasPersistable", "batchChanges", "postamble", "preamble", "ignoreBag", "updateModifiedBagForRecord", "persistableData", "_this$resource", "applyResourceId", "_this$fieldMap", "_this$resources", "ids", "$linkedResources", "_this$resources2", "flatMap", "$links", "fromApplyValue", "_me$resourceIds", "suspendEvents", "resumeEvents", "applyResourceIds", "_eventStore$crudManag2", "_resourceIds", "resourceIdToUpdate", "mapping", "removingResource", "reassign", "oldResourceId", "predecessors", "successors", "dependencies", "isInterDay", "eventStartMidnight", "getAllDayDisplayStartDate", "getAllDayDisplayEndDate", "isLeaf", "EventModel", "EventStore", "AssignmentModelMixin", "eventIdField", "resourceIdField", "eventField", "resourceField", "eventResourceKey", "buildEventResourceKey", "eventKey", "resourceKey", "internalId", "buildIndexKey", "_toSet$resource", "isProAssignmentModel", "_toSet$event", "_me$resource", "propagatingSyncChanges", "_this$event", "_this$event2", "resourceName", "_this$resource2", "_this$event3", "unjoinedStores", "hasGeneratedId", "isPhantom", "round", "units", "shouldRecordFieldChange", "newValue", "oldIdMap", "AssignmentModel", "AssignmentStoreMixin", "newAssignments", "_assignment$event", "createRecord", "findIndex", "addIndex", "dependentOn", "_storage", "getOccurrence", "originalAssignment", "isOccurrenceAssignment", "instanceMeta", "instanceOrId", "occurrenceInstanceMeta", "occurrenceAssignment", "instanceId", "occurrenceMeta", "mapAssignmentsForEvent", "filterFn", "fnSet", "filterFnSet", "mapResult", "mapAssignmentsForResource", "_resource", "assignmentSetupFn", "_event$assignments", "existingAssignment", "assignmentsToRemove", "_a$resource", "AssignmentStore", "canonicalDependencyTypes", "DependencyBaseModel", "Type", "StartToStart", "StartToEnd", "EndToStart", "EndToEnd", "to", "_this$unjoinedStores$", "hardType", "getHardType", "setHardType", "fromSide", "toSide", "lag", "setLag", "lagUnit", "getLag", "getShortNameOfUnit", "fullLag", "getDateRange", "sourceDate", "targetDate", "highlight", "_this$highlighted", "classes", "highlighted", "unhighlight", "isHighlightedWith", "getConnectorString", "raw", "rawValue", "fromEventName", "_this$fromEvent", "toEventName", "_this$toEvent", "DependencyModel", "getTypeFromSides", "rtl", "types", "startSide", "endSide", "DependencyStoreMixin", "reduceEventDependencies", "reduceFn", "flat", "depsGetterFn", "getEventDependencies", "evt", "mapEventDependencies", "mapEventPredecessors", "reduceEventPredecessors", "mapEventSuccessors", "reduceEventSuccessors", "removeEventDependencies", "removeEventPredecessors", "removeEventSuccessors", "getBySourceTargetId", "makeDependencySourceTargetCompositeKey", "getDependencyForSourceAndTargetEvents", "sourceEvent", "targetEvent", "getEventsLinkingDependency", "dependencyOrFromId", "toId", "isDependencyModel", "isValidDependencyToCreate", "fromId", "getHighlightedDependencies", "dep", "getTimeSpanDependencies", "DependencyStore", "AbstractCrudManagerValidation", "validateResponse", "skipSuccessProperty", "crudLoadValidationWarningPrefix", "crudSyncValidationWarningPrefix", "supportShortSyncResponseNote", "disableValidationNote", "crudLoadValidationMandatoryStores", "getStoreLoadResponseWarnings", "storeInfo", "responded", "expectedResponse", "messages", "mandatoryStores", "rows", "getLoadResponseWarnings", "response", "success", "forEachCrudStore", "stringify", "validateLoadResponse", "console", "warn", "getStoreSyncResponseWarnings", "requested", "missingRows", "missingRemoved", "phantomIdField", "idField", "respondedRows", "respondedRemoved", "showSupportShortSyncResponseNote", "row", "missingIds", "supportShortSyncResponse", "updated", "missingUpdatedRows", "getSyncResponseWarnings", "requestDesc", "request", "pack", "warnings", "validateSyncResponse", "AbstractCrudManagerError", "CrudManagerRequestError", "cfg", "_cfg$request", "_this$request", "message", "StringHelper", "capitalize", "storeSortFn", "lhs", "rhs", "sortProperty", "storeLoadSortFn", "storeSyncSortFn", "AbstractCrudManagerMixin", "$$meta", "$meta", "isEvents", "isDelayable", "crudRevision", "crudStores", "storeIdProperty", "crudFilterParam", "transport", "trackResponseType", "phantomParentIdField", "autoLoad", "autoSyncTimeout", "autoSync", "resetIdsBeforeSync", "syncApplySequence", "orderedCrudStores", "writeAllFields", "crudIgnoreUpdates", "autoSyncSuspendCounter", "crudLoaded", "applyingLoadResponse", "applyingSyncResponse", "callOnFunctions", "isCrudManager", "_requestId", "activeRequests", "crudStoresIndex", "afterConstruct", "_autoLoadPromise", "doAutoLoad", "loadUrl", "_this$transport", "_this$transport$load", "load", "url", "updateLoadUrl", "setPath", "syncUrl", "_this$transport2", "_this$transport2$sync", "updateSyncUrl", "getStoreDescriptor", "storeDesc", "getStore", "fillStoreDescriptor", "descriptor", "updateCrudStoreIndex", "getCrudStore", "storeDescriptor", "_crudStores", "addCrudStore", "_orderedCrudStores", "_syncApplySequence", "addStoreToApplySequence", "internalAddCrudStore", "setCrudManager", "pageSize", "autoCommit", "createUrl", "updateUrl", "deleteUrl", "readUrl", "bindCrudStoreListeners", "fromStore", "_store", "addPrioritizedStore", "hasCrudStore", "findInsertionIndex", "hasApplySequenceStore", "_this$crudStores", "removeCrudStore", "foundStore", "unbindCrudStoreListeners", "removeStoreFromApplySequence", "addConfirmed", "collection", "sequenceKeys", "onCrudStoreDestroy", "source", "onCrudStoreChange", "crudStoreHasChanges", "scheduleAutoSync", "suspendAutoSync", "resumeAutoSync", "doSync", "isAutoSyncSuspended", "catch", "triggerFailedRequestEvents", "responseText", "fetchOptions", "requestType", "responseOptions", "internalOnResponse", "revision", "applyResponse", "emitCrudStoreEvents", "suspendChangesTracking", "resumeChangesTracking", "skipChangeCheck", "isBatchingChanges", "isCrudStoreDirty", "eventParams", "getLoadPackage", "requestId", "optionsCopy", "_store$store", "opts", "page", "currentPage", "loadCrudStore", "loadDataToCrudStore", "__loading", "loadCrudManagerData", "isCrudManagerLoading", "isCrudManagerSyncing", "isLoadingOrSyncing", "reject", "_options", "cancelRequest", "desc", "onCrudRequestSuccess", "failure", "onCrudRequestFailure", "sendRequest", "cancelled", "getActiveCrudManagerRequest", "prepareAddedRecordData", "isTree", "subStoreFields", "allFields", "deletePath", "getRange", "prepareAdded", "list", "prepareUpdated", "recordData", "modificationDataToWrite", "getCrudStoreChanges", "prepareRemoved", "getChangesetPackage", "forceSync", "getRowsToApplyChangesTo", "storeResponse", "storePack", "_rows", "_removed", "idDataSource", "requestUpdated", "requestRemoved", "remote", "_storeResponse$rows", "_storeResponse$remove", "respondedIds", "responseRecord", "getPath", "applyChangesToStore", "getFieldDataSource", "extraLogEntries", "updateData", "_storePack$added", "_storePack$updated", "recordRequest", "extraLogInfo", "log", "logEntry", "applySyncResponse", "applyingChangeset", "_request$pack", "applyLoadResponse", "transformFn", "logChanges", "storeLog", "activeSyncPromise", "finally", "rawResponse", "_request", "_fetchOptions$abortCo", "signal", "abortController", "aborted", "acceptChanges", "revertChanges", "revertCrudStoreChanges", "delayable", "AjaxTransport", "defaultMethod", "requestPromise", "_requestPromise$abort", "abort", "shouldUseBodyForRequestData", "packCfg", "method", "paramName", "transportConfig", "requestConfig", "body", "headers", "ajaxPromise", "resultPromise", "performSend", "queryParams", "AjaxHelper", "fetch", "_me$trigger", "_me$trigger2", "ok", "callback", "beforeSendResult", "isPromise", "_ajaxPromise$abort", "_ajaxPromise", "JsonEncoder", "encoder", "requestData", "_this$encoder", "safeJsonStringify", "safeJsonParse", "ProjectCrudManager", "startConfigure", "getConfig", "_changesToClear", "applyProjectResponse", "applyingProjectResponse", "startDateField", "endDateField", "delayEnteringReplica", "recordsUnlinked", "_request$pack2", "_me$resumeAutoSync", "_me$commitRespondedCh", "propagationFlag", "loud", "commitRespondedChanges", "_me$project2", "stmDisabled", "ignoreRemoteChangesInSTM", "shouldClearRecordFieldChange", "_field", "entries", "rest", "changesMap", "ProjectModelCommon", "timeRanges", "updateAssignments", "updateDependencies", "updateResources", "timeRangeStore", "getTimeRanges", "updateTimeRanges", "getResourceTimeRanges", "resourceTimeRangeStore", "ResourceTimeRangeModel", "domId", "domIdPrefix", "isResourceTimeRange", "relations", "foreignKey", "foreignStore", "relatedCollectionName", "nullFieldOnRemove", "ResourceTimeRangeStore", "_resourceStore", "isConfiguring", "initRelations", "resourceTimeRange", "getRanges", "span1", "span2", "ProjectModelTimeZoneMixin", "_storesWithDates", "taskStore", "overrideStoreProcessRecord", "$originalProcessRecord", "isDataSet", "convertRecordToTimeZone", "convertStoresToTimeZone", "relayStoreChange", "_records", "stmAutoRecord", "autoRecord", "_record$baselines", "$ignoreChange", "baselines", "bl", "updateTimeZone", "oldTimeZone", "_isConfiguringTimeZone", "ignoreRecordChanges", "$config", "ProjectModelMixin", "timeRangeModelClass", "resourceTimeRangeModelClass", "timeRangeStoreClass", "resourceTimeRangeStoreClass", "timeRangesData", "inlineData", "json", "resourceTimeRangesData", "$$name", "updateTimeRangeStore", "setTimeRangeStore", "changeTimeRangeStore", "updateResourceTimeRangeStore", "changeResourceTimeRangeStore", "setResourceTimeRangeStore", "updateEvents", "resourceTimeRanges", "updateResourceTimeRanges", "toJSON", "changeJson", "updateJson", "ProjectCurrentConfig", "getCurrentConfig", "storeName", "getInlineData", "storeState", "originalModelClass", "isTaskStore", "ModelPersistencyManager", "newEventStore", "eventStoreDetacher", "beforecommit", "onEventStoreBeforeSync", "detachable", "newResourceStore", "resourceStoreDetacher", "onResourceStoreBeforeSync", "newAssignmentStore", "assignmentStoreDetacher", "_assignmentStore", "onAssignmentStoreBeforeSync", "newDependencyStore", "dependencyStoreDetacher", "_dependencyStore", "onDependencyStoreBeforeSync", "removeNonPersistableRecordsToCreate", "shallContinueSync", "recordsToCreate", "ProjectModel", "isTestEnv", "globalThis", "bryntum", "testProject", "modelPersistencyManager", "createModelPersistencyManager", "initClass", "CrudManagerView", "LoadMaskable", "loadMask", "onCrudManagerLoadStart", "applySyncMask", "syncMask", "masked", "Mask", "mergeConfigs", "loadMaskDefaults", "bindCrudManager", "loadStart", "beforeSend", "loadCanceled", "syncStart", "beforeApplyResponse", "syncCanceled", "requestFail", "responseReceived", "onCrudManagerBeforeSend", "_this$applyStartEndPa", "applyStartEndParameters", "_this$toggleEmptyText", "applyLoadMask", "toggleEmptyText", "onCrudManagerSyncStart", "onCrudManagerBeforeApplyResponse", "_this$suspendRefresh", "suspendRefresh", "onCrudManagerApplyResponse", "_this$resumeRefresh", "resumeRefresh", "onCrudManagerRequestFinalize", "successful", "_me$toggleEmptyText", "applyMaskError", "L", "onCrudManagerLoadCanceled", "onCrudManagerSyncCanceled", "onCrudManagerLoad", "onCrudManagerSync", "onCrudManagerRequestFail", "onAjaxTransportResponseReceived", "clearMaskDelay", "widgetClass", "testConfig"]
}
