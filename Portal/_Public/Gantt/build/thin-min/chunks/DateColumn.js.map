{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/DateColumn.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Grid/column/DateColumn\n */\n\n/**\n * A column that displays a date in the specified {@link #config-format}. By default `L` format is used, which\n * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n *\n * ```javascript\n * // These options represent `L` format\n * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n *\n * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n *\n * // Formatting using Bryntum API\n * LocaleManager.applyLocale('En');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n * LocaleManager.applyLocale('Ru');\n * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n * ```\n *\n * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n *\n * The {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n *\n * Default editor is a {@link Core.widget.DateField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     columns : [\n *          { type: 'date', text: 'Start date', format: 'YYYY-MM-DD', field: 'start' }\n *     ]\n * });\n *\n * @classType date\n * @inlineexample Grid/column/DateColumn.js\n * @column\n */\nexport default class DateColumn extends Column {\n\n    //region Config\n\n    static $name = 'DateColumn';\n\n    static type  = 'date';\n\n    // Type to use when auto adding field\n    static fieldType = 'date';\n\n    static fields = ['format', 'pickerFormat', 'step', 'min', 'max'];\n\n    static get defaults() {\n        return {\n            /**\n             * Min value for the cell editor\n             * @config {String|Date} min\n             */\n\n            /**\n             * Max value for the cell editor\n             * @config {String|Date} max\n             */\n\n            /**\n             * The {@link Core.data.field.DateDataField#config-name} of the data model date field to read data from.\n             * @config {String} field\n             * @category Common\n             */\n\n            /**\n             * Date format to convert a given date object into a string to display. By default `L` format is used, which\n             * contains the following info: full year, 2-digit month, and 2-digit day. Depending on the browser locale,\n             * the formatted date might look different. [Intl.DateTimeFormat API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat)\n             * is used to format the date. Here is an example of possible outputs depending on the browser locale:\n             *\n             * ```javascript\n             * // These options represent `L` format\n             * const options = { year : 'numeric', month : '2-digit', day : '2-digit' };\n             *\n             * new Intl.DateTimeFormat('en-US', options).format(new Date(2021, 6, 1)); // \"07/01/2021\"\n             * new Intl.DateTimeFormat('ru-RU', options).format(new Date(2021, 6, 1)); // \"01.07.2021\"\n             *\n             * // Formatting using Bryntum API\n             * LocaleManager.applyLocale('En');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"07/01/2021\"\n             * LocaleManager.applyLocale('Ru');\n             * DateHelper.format(new Date(2021, 6, 1), 'L'); // \"01.07.2021\"\n             * ```\n             *\n             * To learn more about available formats check out {@link Core.helper.DateHelper} docs.\n             *\n             * Note, the {@link Core.data.field.DateDataField field} this column reads data from should be a type of date.\n             * @config {String}\n             * @default\n             * @category Common\n             */\n            format : 'L',\n\n            /**\n             * Time increment duration value to apply when clicking the left / right trigger icons. See\n             * {@link Core.widget.DateField#config-step} for more information\n             * Set to `null` to hide the step triggers.\n             * @config {String|Number|DurationConfig}\n             * @default\n             * @category Common\n             */\n            step : 1,\n\n            minWidth : 85,\n\n            filterType : 'date'\n        };\n    }\n\n    //endregion\n\n    //region Display\n\n    /**\n     * Renderer that displays the date with the specified format. Also adds cls 'date-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n\n    /**\n     * Group renderer that displays the date with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n\n    //endregion\n\n    //region Formatter\n\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the date\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a date, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format || undefined); // null does not use default format\n        }\n        return DateHelper.format(value, this.format || undefined);\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    /**\n     * Get/Set format for date displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this.data;\n\n        this.set('format', value);\n\n        if (editor) {\n            editor.format = value;\n        }\n    }\n\n    get format() {\n        return this.get('format');\n    }\n\n    get defaultEditor() {\n        const\n            me                         = this,\n            { min, max, step, format } = me;\n\n        return {\n            name                 : me.field,\n            type                 : 'date',\n            calendarContainerCls : 'b-grid-cell-editor-related',\n            weekStartDay         : me.grid.weekStartDay,\n            format,\n            max,\n            min,\n            step\n        };\n    }\n\n    //endregion\n\n}\n\nColumnStore.registerColumnType(DateColumn, true);\nDateColumn.exposeProperties();\n"],
  "mappings": "yQA6Ce,MAAMA,UAAmBC,CAAO,CAO3C,WAAWC,UAAW,CAClB,MAAO,CAyCHC,OAAS,IASTC,KAAO,EACPC,SAAW,GACXC,WAAa,OAErB,CAOAC,gBAAgB,CAAEC,MAAAA,CAAM,EAAG,CACvB,OAAOA,EAAQ,KAAKC,YAAYD,CAAK,EAAI,EAC7C,CAKAE,cAAc,CAAEC,YAAAA,EAAaC,YAAAA,CAAY,EAAG,CACxCD,EAAYE,UAAY,KAAKJ,YAAYG,CAAW,CACxD,CASAH,YAAYD,EAAO,CAEf,OAAI,OAAOA,GAAU,WACjBA,EAAQM,EAAWC,MAAMP,EAAO,KAAKL,QAAUa,MAAS,GAErDF,EAAWX,OAAOK,EAAO,KAAKL,QAAUa,MAAS,CAC5D,CAOA,IAAIb,OAAOK,EAAO,CACd,KAAM,CAAES,OAAAA,GAAW,KAAKC,KACxB,KAAKC,IAAI,SAAUX,CAAK,EACpBS,IACAA,EAAOd,OAASK,EAExB,CACA,IAAIL,QAAS,CACT,OAAO,KAAKiB,IAAI,QAAQ,CAC5B,CACA,IAAIC,eAAgB,CAChB,MACIC,EAA6B,KAC7B,CAAEC,IAAAA,EAAKC,IAAAA,EAAKpB,KAAAA,EAAMD,OAAAA,CAAO,EAAImB,EACjC,MAAO,CACHG,KAAuBH,EAAGI,MAC1BC,KAAuB,OACvBC,qBAAuB,6BACvBC,aAAuBP,EAAGQ,KAAKD,aAC/B1B,OAAAA,EACAqB,IAAAA,EACAD,IAAAA,EACAnB,KAAAA,EAER,CAEJ,CA5HI2B,EAFiB/B,EAEVgC,QAAQ,cACfD,EAHiB/B,EAGV2B,OAAQ,QAEfI,EALiB/B,EAKViC,YAAY,QACnBF,EANiB/B,EAMVkC,SAAS,CAAC,SAAU,eAAgB,OAAQ,MAAO,KAAK,GAyHnEC,EAAYC,mBAAmBpC,EAAY,EAAI,EAC/CA,EAAWqC,iBAAgB,EAC3BrC,EAAWsC,OAAS",
  "names": ["DateColumn", "Column", "defaults", "format", "step", "minWidth", "filterType", "defaultRenderer", "value", "formatValue", "groupRenderer", "cellElement", "groupRowFor", "innerHTML", "DateHelper", "parse", "undefined", "editor", "data", "set", "get", "defaultEditor", "me", "min", "max", "name", "field", "type", "calendarContainerCls", "weekStartDay", "grid", "__publicField", "$name", "fieldType", "fields", "ColumnStore", "registerColumnType", "exposeProperties", "_$name"]
}
