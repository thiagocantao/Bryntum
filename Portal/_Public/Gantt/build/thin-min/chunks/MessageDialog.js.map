{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/helper/mixin/DragHelperContainer.js", "../../../../Core/lib/Core/helper/mixin/DragHelperTranslate.js", "../../../../Core/lib/Core/helper/DragHelper.js", "../../../../Core/lib/Core/helper/ResizeHelper.js", "../../../../Core/lib/Core/helper/WidgetHelper.js", "../../../../Core/lib/Core/helper/util/Formatter.js", "../../../../Core/lib/Core/helper/util/NumberFormat.js", "../../../../Core/lib/Core/mixin/Clipboardable.js", "../../../../Core/lib/Core/util/Month.js", "../../../../Core/lib/Core/widget/ButtonGroup.js", "../../../../Core/lib/Core/widget/CalendarPanel.js", "../../../../Core/lib/Core/widget/YearPicker.js", "../../../../Core/lib/Core/widget/DisplayField.js", "../../../../Core/lib/Core/widget/DatePicker.js", "../../../../Core/lib/Core/widget/DateField.js", "../../../../Core/lib/Core/widget/NumberField.js", "../../../../Core/lib/Core/widget/TimePicker.js", "../../../../Core/lib/Core/widget/TimeField.js", "../../../../Core/lib/Core/widget/DurationField.js", "../../../../Core/lib/Core/widget/FieldFilterPicker.js", "../../../../Core/lib/Core/widget/Label.js", "../../../../Core/lib/Core/widget/FieldFilterPickerGroup.js", "../../../../Core/lib/Core/widget/MessageDialog.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport GlobalEvents from '../../GlobalEvents.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n\n// <remove-on-release>\n// TODO: Use mousedown pos and not center too reposition\n// </remove-on-release>\n\n/**\n * @module Core/helper/mixin/DragHelperContainer\n */\n\n/**\n * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperContainer extends (Target || Base) {\n    static get $name() {\n        return 'DragHelperContainer';\n    }\n\n    //region Init\n\n    /**\n     * Initialize container drag mode.\n     * @private\n     */\n    initContainerDrag() {\n        const me = this;\n        //use container drag as default mode\n        if (!me.mode) {\n            me.mode = 'container';\n        }\n        if (me.mode === 'container' && !me.containers) {\n            throw new Error('Container drag mode must specify containers');\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be dragged between containers.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabContainerDrag(event) {\n        const me = this;\n\n        // allow specified selectors to prevent drag\n        if (!me.ignoreSelector || !event.target.closest(me.ignoreSelector)) {\n            // go up from \"handle\" to draggable element\n            const element = DomHelper.getAncestor(event.target, me.containers, me.outerElement);\n\n            if (element) {\n                const box = element.getBoundingClientRect();\n\n                me.context = {\n                    element,\n                    valid            : true,\n                    action           : 'container',\n                    offsetX          : event.pageX - box.left,\n                    offsetY          : event.pageY - box.top,\n                    originalPosition : {\n                        parent : element.parentElement,\n                        prev   : element.previousElementSibling,\n                        next   : element.nextElementSibling\n                    }\n                };\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    startContainerDrag(event) {\n        const\n            me                          = this,\n            { context, floatRootOwner } = me,\n            { element : dragElement }   = context,\n            clonedNode                  = dragElement.cloneNode(true),\n            outerWidgetEl               = floatRootOwner?.element.closest('.b-outer');\n\n        // init drag proxy\n        clonedNode.classList.add(me.dragProxyCls, me.draggingCls);\n\n        // Append drag proxy to float root, fall back to root context node\n        (floatRootOwner?.floatRoot || DomHelper.getRootElement(dragElement)).appendChild(clonedNode);\n        context.dragProxy = clonedNode;\n\n        // style dragged element\n        context.dragging = dragElement;\n        dragElement.classList.add(me.dropPlaceholderCls);\n\n        // If element being dragged is also a child of the float root, add +1 to the cloned node z-index\n        if (outerWidgetEl?.parentElement?.matches('.b-float-root')) {\n            clonedNode.style.zIndex = floatRootOwner.floatRootMaxZIndex + 1;\n        }\n    }\n\n    onContainerDragStarted(event) {\n        const\n            me                                   = this,\n            { context }                          = me,\n            { element : dragElement, dragProxy } = context,\n            box                                  = dragElement.getBoundingClientRect();\n\n        // Always set the proxy element width manually, drag target could be sized with flex or % width\n        if (me.autoSizeClonedTarget) {\n            dragProxy.style.width  = box.width + 'px';\n            dragProxy.style.height = box.height + 'px';\n            DomHelper.setTranslateXY(context.dragProxy, box.left, box.top);\n        }\n        else {\n            const proxyBox = dragProxy.getBoundingClientRect();\n\n            Object.assign(context, {\n                offsetX : proxyBox.width / 2,\n                offsetY : proxyBox.height / 2\n            });\n            DomHelper.setTranslateXY(dragProxy, event.clientX, event.clientY);\n        }\n    }\n\n    /**\n     * Move the placeholder element into its new position on valid drag.\n     * @private\n     * @param event\n     */\n    updateContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (!context.started || !context.targetElement) {\n            return;\n        }\n\n        const\n            containerElement = DomHelper.getAncestor(context.targetElement, me.containers, 'b-gridbase'),\n            willLoseFocus    = context.dragging?.contains(DomHelper.getActiveElement(context.dragging));\n\n        if (containerElement && DomHelper.isDescendant(context.element, containerElement)) {\n            // dragging over part of self, do nothing\n            return;\n        }\n\n        // The dragging element contains focus, and moving it within the DOM\n        // will cause focus loss which might affect an encapsulating autoClose Popup.\n        // Prevent focus loss handling during the DOM move.\n        if (willLoseFocus) {\n            GlobalEvents.suspendFocusEvents();\n        }\n        if (containerElement && context.valid) {\n            me.moveNextTo(containerElement, event);\n        }\n        else {\n            // dragged outside of containers, revert position\n            me.revertPosition();\n        }\n        if (willLoseFocus) {\n            GlobalEvents.resumeFocusEvents();\n        }\n\n        event.preventDefault();\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    finishContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me,\n            // extracting variables to make code more readable\n            { dragging, dragProxy, valid, draggedTo, insertBefore, originalPosition } = context;\n\n        if (dragging) {\n            // needs to have a valid target\n            context.valid = Boolean(valid && (draggedTo || me.externalDropTargetSelector && event.target.closest(me.externalDropTargetSelector))  &&\n                    // no drop on self or parent\n                    (dragging !== insertBefore || originalPosition.parent !== draggedTo));\n\n            context.finalize = (valid = context.valid) => {\n                // revert if invalid (and context still exists, might have been aborted from outside)\n                if (!valid && me.context) {\n                    me.revertPosition();\n                }\n\n                dragging.classList.remove(me.dropPlaceholderCls);\n                dragProxy.remove();\n\n                me.reset();\n            };\n\n            // allow async finalization by setting async to true on context in drop handler,\n            // requires implementer to call context.finalize later to finish the drop\n            context.async = false;\n\n            me.trigger('drop', { context, event });\n\n            if (!context.async) {\n                // finalize immediately\n                context.finalize();\n            }\n        }\n    }\n\n    /**\n     * Aborts a drag operation.\n     * @private\n     * @param {Boolean} [invalid]\n     * @param {Object} [event]\n     * @param {Boolean} [silent]\n     */\n    abortContainerDrag(invalid = false, event = null, silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context.dragging) {\n            context.dragging.classList.remove(me.dropPlaceholderCls);\n            context.dragProxy.remove();\n\n            me.revertPosition();\n        }\n\n        if (!silent) {\n            me.trigger(invalid ? 'drop' : 'abort', { context, event });\n        }\n\n        me.reset();\n    }\n\n    //endregion\n\n    //region Helpers\n\n    /**\n     * Updates the drag proxy position.\n     * @private\n     * @param event\n     */\n    updateContainerProxy(event) {\n        const\n            me          = this,\n            { context } = me,\n            proxy       = context.dragProxy;\n\n        let newX = event.pageX - context.offsetX,\n            newY = event.pageY - context.offsetY;\n\n        if (typeof me.minX === 'number') {\n            newX = Math.max(me.minX, newX);\n        }\n\n        if (typeof me.maxX === 'number') {\n            newX = Math.min(me.maxX - proxy.offsetWidth, newX);\n        }\n\n        if (typeof me.minY === 'number') {\n            newY = Math.max(me.minY, newY);\n        }\n\n        if (typeof me.maxY === 'number') {\n            newY = Math.min(me.maxY  - proxy.offsetHeight, newY);\n        }\n\n        if (me.lockX) {\n            DomHelper.setTranslateY(proxy, newY);\n        }\n        else if (me.lockY) {\n            DomHelper.setTranslateX(proxy, newX);\n        }\n        else {\n            DomHelper.setTranslateXY(proxy, newX, newY);\n        }\n\n        let targetElement;\n\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        else {\n            targetElement = event.target;\n        }\n\n        context.targetElement = targetElement;\n    }\n\n    /**\n     * Positions element being dragged in relation to targetElement.\n     * @private\n     * @param targetElement\n     * @param event\n     */\n    moveNextTo(targetElement, event) {\n        const\n            { context } = this,\n            dragElement = context.dragging,\n            parent      = targetElement.parentElement;\n\n        if (targetElement !== dragElement) {\n            // dragged over a container and not over self, calculate where to insert\n\n            const centerX = Rectangle.from(targetElement).center.x;\n\n            if ((this.isRTL && event.pageX > centerX) || (!this.isRTL && event.pageX < centerX)) {\n                // dragged left of target center, insert before\n                parent.insertBefore(dragElement, targetElement);\n                context.insertBefore = targetElement;\n            }\n            else {\n                // dragged right of target center, insert after\n                if (targetElement.nextElementSibling) {\n                    // check that not dragged to the immediate left of self. in such case, position should not change\n                    if (targetElement.nextElementSibling !== dragElement) {\n                        context.insertBefore = targetElement.nextElementSibling;\n                        parent.insertBefore(dragElement, targetElement.nextElementSibling);\n                    }\n                    else if (!context.insertBefore && dragElement.parentElement.lastElementChild !== dragElement) {\n                        // <remove-on-release>\n                        // TODO: or flag as invalid drag? since no change...\n                        // </remove-on-release>\n                        // dragged left initially, should stay in place (checked in finishContainerDrag)\n                        context.insertBefore = targetElement.nextElementSibling;\n                    }\n                }\n                else {\n                    parent.appendChild(dragElement);\n                    context.insertBefore = null;\n                }\n            }\n\n            context.draggedTo = parent;\n        }\n    }\n\n    /**\n     * Moves element being dragged back to its original position.\n     * @private\n     */\n    revertPosition() {\n        const\n            { context }      = this,\n            { dragging }     = context,\n            { parent, next } = context.originalPosition;\n\n        // revert to correct location\n        if (next) {\n            const isNoop = next.previousSibling === dragging || (!next && dragging === parent.lastChild);\n\n            if (!isNoop) {\n                parent.insertBefore(dragging, next);\n            }\n        }\n        else {\n            parent.appendChild(dragging);\n        }\n\n        // no target container\n        context.draggedTo = null;\n    }\n\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Rectangle from '../util/Rectangle.js';\n\n/**\n * @module Core/helper/mixin/DragHelperTranslate\n */\n\nconst noScroll = { pageXOffset : 0, pageYOffset : 0 };\n\n/**\n * Mixin for DragHelper that handles repositioning (translating) an element within its container\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperTranslate extends Delayable(Target || Base) {\n    static get $name() {\n        return 'DragHelperTranslate';\n    }\n\n    static get configurable() {\n        return {\n            positioning : null,\n\n            // Private config that disables updating elements position, for when data is live updated during drag,\n            // leading to element being redrawn\n            skipUpdatingElement : null\n        };\n    }\n\n    //region Init\n\n    /**\n     * Initialize translation drag mode.\n     * @private\n     */\n    initTranslateDrag() {\n        const me = this;\n\n        if (!me.isElementDraggable && me.targetSelector) {\n            me.isElementDraggable = element => element.closest(me.targetSelector);\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be moved using translation.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabTranslateDrag(event) {\n        const element = this.getTarget(event);\n\n        if (element) {\n            this.context = {\n                valid : true,\n                element,\n\n                startPageX   : event.pageX,\n                startPageY   : event.pageY,\n                startClientX : event.clientX,\n                startClientY : event.clientY\n            };\n\n            return true;\n        }\n\n        return false;\n    }\n\n    getTarget(event) {\n        return event.target.closest(this.targetSelector);\n    }\n\n    getX(element) {\n        if (this.positioning === 'absolute') {\n            // Read left style rather than offsetLeft as it is impacted by margin-left style (Gantt milestones)\n            return parseFloat(element.style.left, 10);\n        }\n        else {\n            return DomHelper.getTranslateX(element);\n        }\n    }\n\n    getY(element) {\n        if (this.positioning === 'absolute') {\n            return parseFloat(element.style.top, 10);\n        }\n        else {\n            return DomHelper.getTranslateY(element);\n        }\n    }\n\n    getXY(element) {\n        if (this.positioning === 'absolute') {\n            return [element.offsetLeft, element.offsetTop];\n        }\n        else {\n            return DomHelper.getTranslateXY(element);\n        }\n    }\n\n    setXY(element, x, y) {\n        if (this.skipUpdatingElement) {\n            return;\n        }\n\n        if (this.positioning === 'absolute') {\n            element.style.left = x + 'px';\n            element.style.top  = y + 'px';\n        }\n        else {\n            DomHelper.setTranslateXY(element, x, y);\n        }\n    }\n\n    /**\n     * Start translating, called on first mouse move after dragging\n     * @private\n     * @param event\n     */\n    startTranslateDrag(event) {\n        const\n            me                                       = this,\n            { context, outerElement, proxySelector } = me,\n            // When cloning an element to be dragged, we place it in BODY by default\n            dragWithin                               = me.dragWithin = me.dragWithin || (me.cloneTarget && document.body);\n\n        let element = context.dragProxy || context.element;\n\n        const\n            grabbed       = element,\n            grabbedParent = element.parentElement;\n\n        if (me.cloneTarget) {\n            const\n                elementToClone                            = proxySelector ? element.querySelector(proxySelector) : element,\n                { width, height, x : proxyX, y : proxyY } = Rectangle.from(elementToClone, dragWithin);\n\n            element = me.createProxy(element);\n\n            let x = proxyX, y = proxyY;\n\n            // Match the grabbed element's size and position.\n            if (me.autoSizeClonedTarget) {\n                element.style.width  = `${width}px`;\n                element.style.height = `${height}px`;\n            }\n\n            element.classList.add(me.dragProxyCls, me.draggingCls);\n            // Remove some irrelevant CSS classes\n            element.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n            dragWithin.appendChild(element);\n\n            if (!me.autoSizeClonedTarget || proxySelector) {\n                const\n                    // Center proxy at cursor position, we assume app is applying styles to the element (inline or CSS)\n                    proxyRect                            = element.getBoundingClientRect(),\n                    { x : dragWithinX, y : dragWithinY } = dragWithin.getBoundingClientRect(),\n                    localX                               = event.clientX - dragWithinX,\n                    // Body may have a non-zero top\n                    localY                               = event.clientY - dragWithinY + (dragWithin !== document.body ? document.body.getBoundingClientRect().y : 0);\n\n                x = localX - (proxyRect.width / 2);\n                y = localY - (proxyRect.height / 2);\n\n                // When proxy is centered, update to not use original mousedown coordinates, but the first mouse move triggering the drag\n                context.startPageX = event.pageX;\n                context.startPageY = event.pageY;\n            }\n\n            me.setXY(element, x, y);\n\n            grabbed.classList.add('b-drag-original');\n\n            if (me.hideOriginalElement) {\n                grabbed.classList.add('b-hidden');\n            }\n        }\n\n        element.classList.add(me.draggingCls);\n\n        Object.assign(context, {\n            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n            element,\n\n            // The original element upon which the mousedown event triggered a drag operation\n            grabbed,\n\n            // The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedParent,\n\n            // The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedNextSibling : element.nextElementSibling,\n\n            // elements position within parent element\n            elementStartX : me.getX(element),\n            elementStartY : me.getY(element),\n            elementX      : DomHelper.getOffsetX(element, dragWithin || outerElement),\n            elementY      : DomHelper.getOffsetY(element, dragWithin || outerElement),\n\n            scrollX : 0,\n            scrollY : 0,\n\n            scrollManagerElementContainsDragProxy : !me.cloneTarget || dragWithin === outerElement\n        });\n\n        if (dragWithin) {\n            context.parentElement = element.parentElement;\n\n            if (dragWithin !== element.parentElement) {\n                dragWithin.appendChild(element);\n            }\n            me.updateTranslateProxy(event);\n        }\n    }\n\n    // When drag has started, create proxy versions (if applicable) and store original positions of all related elements\n    // to be able to animate back to these positions in case of an aborted drag\n    onTranslateDragStarted() {\n        const\n            me          = this,\n            { context } = me;\n\n        let { relatedElements } = context;\n\n        // For unified proxy mode - add a CSS class to the 'main' dragging element to be able to have it be on top of related elements with z-index\n        if (me.unifiedProxy) {\n            context.element.classList.add('b-drag-main', 'b-drag-unified-proxy');\n        }\n\n        if (relatedElements?.length > 0) {\n            context.relatedElStartPos    = [];\n            context.relatedElDragFromPos = [];\n\n            const { proxySelector } = me;\n\n            let [elementStartX, elementStartY] = [context.elementStartX, context.elementStartY];\n\n            // Store reference to original elements (may need cleanup to remove CSS classes after drop)\n            context.originalRelatedElements = relatedElements;\n            // Create clone proxy elements of all related elements\n            relatedElements                 = context.relatedElements = relatedElements.map((relatedEl, i) => {\n                const\n                    proxyTemplateElement    = proxySelector ? relatedEl.querySelector(proxySelector) : relatedEl,\n                    { x, y, width, height } = Rectangle.from(proxyTemplateElement, me.dragWithin),\n                    relatedElementToDrag    = me.cloneTarget ? me.createProxy(relatedEl) : relatedEl;\n\n                relatedElementToDrag.classList.add(me.draggingCls);\n                // Remove some irrelevant CSS classes\n                relatedElementToDrag.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n                if (me.cloneTarget) {\n                    // Match the original related element's position.\n                    me.setXY(relatedElementToDrag, x, y);\n                    me.dragWithin.appendChild(relatedElementToDrag);\n                    relatedElementToDrag.classList.add(me.dragProxyCls);\n\n                    // Optionally also match the original related element's size\n                    if (me.autoSizeClonedTarget) {\n                        relatedElementToDrag.style.width  = `${width}px`;\n                        relatedElementToDrag.style.height = `${height}px`;\n                    }\n\n                    if (me.hideOriginalElement) {\n                        relatedEl.classList.add('b-hidden');\n                    }\n                    relatedEl.classList.add('b-drag-original');\n                }\n\n                context.relatedElStartPos[i] = context.relatedElDragFromPos[i] = me.getXY(relatedElementToDrag);\n\n                if (me.unifiedProxy) {\n                    relatedElementToDrag.classList.add('b-drag-unified-animation', 'b-drag-unified-proxy');\n                    // Move into cascade and cache the dragFrom pos\n                    elementStartX += me.unifiedOffset;\n                    elementStartY += me.unifiedOffset;\n                    me.setXY(relatedElementToDrag, elementStartX, elementStartY);\n                    context.relatedElDragFromPos[i]   = [elementStartX, elementStartY];\n                    relatedElementToDrag.style.zIndex = 100 - i;\n                }\n\n                return relatedElementToDrag;\n            });\n\n            // Move the selected events into a unified cascade.\n            if (me.unifiedProxy && relatedElements && relatedElements.length > 0) {\n                // Animate related elements should into the position\n                EventHelper.onTransitionEnd({\n                    element  : relatedElements[0],\n                    property : 'transform',\n                    handler() {\n                        relatedElements.forEach(el => el.classList.remove('b-drag-unified-animation'));\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    /**\n     * Limit translation to outer bounds and specified constraints\n     * @private\n     * @param element\n     * @param x\n     * @param y\n     * @returns {{constrainedX: *, constrainedY: *}}\n     */\n    applyConstraints(element, x, y) {\n        const\n            me                           = this,\n            { constrain, dragWithin }    = me,\n            { pageXOffset, pageYOffset } = dragWithin === document.body ? globalThis : noScroll;\n\n        // limit to outer elements edges\n        if (dragWithin && constrain) {\n            if (x < 0) {\n                x = 0;\n            }\n            if (x + element.offsetWidth > dragWithin.scrollWidth) {\n                x = dragWithin.scrollWidth - element.offsetWidth;\n            }\n\n            if (y < 0) {\n                y = 0;\n            }\n            if (y + element.offsetHeight > dragWithin.scrollHeight) {\n                y = dragWithin.scrollHeight - element.offsetHeight;\n            }\n        }\n\n        // limit horizontally\n        if (typeof me.minX === 'number') {\n            x = Math.max(me.minX + pageXOffset, x);\n        }\n        if (typeof me.maxX === 'number') {\n            x = Math.min(me.maxX + pageXOffset, x);\n        }\n\n        // limit vertically\n        if (typeof me.minY === 'number') {\n            y = Math.max(me.minY + pageYOffset, y);\n        }\n        if (typeof me.maxY === 'number') {\n            y = Math.min(me.maxY + pageYOffset, y);\n        }\n\n        return { constrainedX : x, constrainedY : y };\n    }\n\n    /**\n     * Update elements translation on mouse move.\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} scrollManagerConfig\n     */\n    updateTranslateProxy(event, scrollManagerConfig) {\n        const\n            me                                        = this,\n            { lockX, lockY, context }                 = me,\n            element                                   = context.dragProxy || context.element,\n            { relatedElements, relatedElDragFromPos } = context;\n\n        // If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need\n        // to take the scrollManager scroll values into account since it is only relevant when dragProxy is inside\n        // the Grid (where scroll manager operates).\n        if (context.scrollManagerElementContainsDragProxy && scrollManagerConfig) {\n            context.scrollX = scrollManagerConfig.getRelativeLeftScroll(element);\n            context.scrollY = scrollManagerConfig.getRelativeTopScroll(element);\n        }\n\n        context.pageX   = event.pageX;\n        context.pageY   = event.pageY;\n        context.clientX = event.clientX;\n        context.clientY = event.clientY;\n\n        let\n            newX = context.elementStartX + event.pageX - context.startPageX + context.scrollX,\n            newY = context.elementStartY + event.pageY - context.startPageY + context.scrollY;\n\n        // First let outside world apply snapping\n        if (me.snapCoordinates) {\n            const snapped = me.snapCoordinates({ element, newX, newY });\n\n            newX = snapped.x;\n            newY = snapped.y;\n        }\n\n        // Now constrain coordinates\n        const { constrainedX, constrainedY } = me.applyConstraints(element, newX, newY);\n\n        if (context.started || constrainedX !== newX || constrainedY !== newY) {\n            me.setXY(element, lockX ? undefined : constrainedX, lockY ? undefined : constrainedY);\n        }\n\n        if (relatedElements) {\n            const\n                deltaX = lockX ? 0 : constrainedX - context.elementStartX,\n                deltaY = lockY ? 0 : constrainedY - context.elementStartY;\n\n            relatedElements.forEach((r, i) => {\n                const [x, y] = relatedElDragFromPos[i];\n\n                me.setXY(r, x + deltaX, y + deltaY);\n            });\n        }\n\n        context.newX = constrainedX;\n        context.newY = constrainedY;\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    async finishTranslateDrag(event) {\n        const\n            me                  = this,\n            context             = me.context,\n            { target }          = event,\n            xChanged            = !me.lockX && Math.round(context.newX) !== Math.round(context.elementStartX),\n            yChanged            = !me.lockY && Math.round(context.newY) !== Math.round(context.elementStartY),\n            element             = context.dragProxy || context.element,\n            { relatedElements } = context;\n\n        if (!me.ignoreSamePositionDrop || xChanged || yChanged) {\n            if (context.valid === false) {\n                await me.abortTranslateDrag(true, event);\n            }\n            else  {\n                const targetRect = !me.allowDropOutside && Rectangle.from(me.dragWithin || me.outerElement);\n\n                if (targetRect && ((typeof me.minX !== 'number' && me.minX !== true && (event.pageX < targetRect.left)) ||\n                    (typeof me.maxX !== 'number' && me.maxX !== true && (event.pageX > targetRect.right)) ||\n                    (typeof me.minY !== 'number' && me.minY !== true && (event.pageY < targetRect.top)) ||\n                    (typeof me.maxY !== 'number' && me.maxY !== true && (event.pageY > targetRect.bottom)))) {\n                    // revert location when dropped outside allowed element\n                    await me.abortTranslateDrag(true, event);\n                }\n                else {\n                    context.finalize = async(valid = context.valid) => {\n                        // In case someone tries to finalize twice\n                        if (context.finalized) {\n                            console.warn('DragHelper: Finalizing already finalized drag');\n                            return;\n                        }\n\n                        context.finalized = true;\n\n                        // abort if invalid (and context still exists, might have been aborted from outside)\n                        if (!valid && me.context) {\n                            // abort if flagged as invalid, without triggering abort or drop again\n                            await me.abortTranslateDrag(true, null, true);\n                        }\n\n                        if (!me.isDestroyed) {\n                            me.trigger('dropFinalized', { context, event, target });\n                            me.reset();\n                        }\n\n                        if (!me.cloneTarget && element.parentElement !== context.grabbedParent) {\n                            // If the dragged element was moved to another parent element, remove the transform style\n                            [element, ...(relatedElements || [])].forEach(el => el.style.transform = '');\n\n                        }\n                    };\n\n                    // allow async finalization by setting async to true on context in drop handler,\n                    // requires implementer to call context.finalize later to finish the drop\n                    context.async = false;\n\n                    await me.trigger('drop', { context, event, target });\n\n                    if (!context.async) {\n                        // finalize immediately\n                        await context.finalize();\n                    }\n                }\n            }\n        }\n        else {\n            // no change, abort\n            me.abortTranslateDrag(false, event);\n        }\n    }\n\n    /**\n     * Abort translation\n     * @private\n     * @param invalid\n     * @fires abort\n     */\n    async abortTranslateDrag(invalid = false, event = null, silent = false) {\n        const\n            me                                              = this,\n            {\n                cloneTarget,\n                context,\n                proxySelector,\n                dragWithin,\n                draggingCls\n            }                                               = me,\n            { relatedElements, relatedElStartPos, grabbed } = context,\n            element                                         = context.dragProxy || context.element;\n\n        context.valid = false;\n\n        me.scrollManager?.stopMonitoring();\n\n        if (context.aborted) {\n            console.warn('DragHelper: Aborting already aborted drag');\n            return;\n        }\n\n        let { elementStartX, elementStartY } = context;\n        const proxyMoved = elementStartX !== me.getX(element) ||\n                elementStartY !== me.getY(element);\n\n        if (element && context.started) {\n            // Put the dragged element back where it was\n            if (!cloneTarget && dragWithin && dragWithin !== context.grabbedParent) {\n                context.grabbedParent.insertBefore(element, context.grabbedNextSibling);\n            }\n\n            // Align the now visible grabbed element with the clone, so that it looks like it's\n            // sliding back into place when the clone is removed\n            if (cloneTarget) {\n                if (proxySelector) {\n                    const\n                        animateTo = grabbed.querySelector(proxySelector) || grabbed,\n                        { x, y }  = Rectangle.from(animateTo);\n\n                    elementStartX = x;\n                    elementStartY = y;\n                }\n\n                // <remove-on-release>\n                // TODO:\n                // if (me.hideOriginalElement) {\n                //     [elementStartX, elementStartY] = DomHelper.getTranslateXY(grabbed);\n                //     DomHelper.alignTo(grabbed, element);\n                //\n                //     // The getBoundingClientRect is important. The aligning above must be processed\n                //     // by a forced synchronous layout *before* the b-aborting class is added below.\n                //     me.grabbed.getBoundingClientRect();\n                // }\n                // </remove-on-release>\n            }\n\n            // animated restore of position.\n            element.classList.add('b-aborting');\n\n            // Move the main element back to its original position.\n            me.setXY(element, elementStartX, elementStartY);\n\n            // Move any related elements back to their original positions.\n            relatedElements?.forEach((element, i) => {\n                element.classList.remove(draggingCls);\n                element.classList.add('b-aborting');\n\n                me.setXY(element, relatedElStartPos[i][0], relatedElStartPos[i][1]);\n            });\n\n            if (!silent) {\n                me.trigger(invalid ? 'drop' : 'abort', { context, event });\n            }\n\n            // Element may have been scrolled out of view, or otherwise removed while dragging\n            if (element.isConnected && !me.isDestroying && proxyMoved) {\n                await EventHelper.waitForTransitionEnd({\n                    element,\n                    property     : DomHelper.getPropertyTransitionDuration(element, 'transform') ? 'transform' : 'all',\n                    thisObj      : me,\n                    once         : true,\n                    runOnDestroy : true\n                });\n            }\n\n            if (!me.isDestroyed) {\n                // Trigger event after transition has completed for UIs to redraw with stable DOM\n                me.trigger('abortFinalized', { context, event });\n            }\n        }\n\n        if (me.context?.started) {\n            me.reset();\n        }\n    }\n\n    // Restore state of all mutated elements\n    cleanUp() {\n        const\n            me                                                    = this,\n            { context, cloneTarget, draggingCls, dragProxyCls }   = me,\n            element                                               = context.dragProxy || context.element,\n            { relatedElements, originalRelatedElements, grabbed } = context,\n            removeClonedProxies                                   = cloneTarget && (me.removeProxyAfterDrop || !context.valid),\n            cssClassesToRemove                                    = [draggingCls, 'b-aborting', dragProxyCls, 'b-drag-main', 'b-drag-unified-proxy'];\n\n        element.classList.remove(...cssClassesToRemove);\n\n        if (removeClonedProxies) {\n            element.remove();\n        }\n        relatedElements?.forEach(element => {\n            if (removeClonedProxies) {\n                element.remove();\n            }\n            else {\n                element.classList.remove(...cssClassesToRemove);\n            }\n        });\n\n        // Restore originallly grabbed elements\n        grabbed.classList.remove('b-drag-original', 'b-hidden');\n        originalRelatedElements?.forEach(element => element.classList.remove('b-hidden', 'b-drag-original'));\n    }\n\n    //endregion\n};\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport DragHelperContainer from './mixin/DragHelperContainer.js';\nimport DragHelperTranslate from './mixin/DragHelperTranslate.js';\nimport DomHelper from './DomHelper.js';\nimport EventHelper from './EventHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n/**\n * @module Core/helper/DragHelper\n */\n\nconst rootElementListeners = {\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : 'onTouchStart',\n    touchmove  : 'onTouchMove',\n    touchend   : 'onTouchEnd',\n    keydown    : 'onKeyDown'\n};\n\n/**\n * ## Intro\n * A drag drop helper class which lets you move elements in page. It supports:\n *\n *  * Dragging the actual element\n *  * Dragging a cloned version of the element\n *  * Dragging extra `relatedElements` along with the main element\n *  * Firing useful events {@link #event-beforeDragStart}, {@link #event-dragStart}, {@link #event-drag}, {@link #event-drop}, {@link #event-abort}\n *  * Validation by setting a `valid` Boolean on the drag context object provided to event listeners\n *  * Aborting drag with ESCAPE key\n *  * Constraining drag to be only horizontal or vertical using {@link #config-lockX} and {@link #config-lockY}\n *  * Defining X / Y boundaries using {@link #config-minX}, {@link #config-maxX} and {@link #config-minY}, {@link #config-maxY}\n *  * Async finalization (e.g. to show confirmation prompts)\n *  * Animated final transition after mouse up of a valid drop (see {@link #function-animateProxyTo})\n *  * Animated abort transition after an invalid or aborted drop\n *\n * {@inlineexample Core/helper/DragHelper.js}\n *\n * ## Two modes\n *\n * DragHelper supports two {@link #config-mode modes}:\n *\n * * `container` - moving / rearranging elements within and between specified containers\n * * `translateXY` - freely repositioning an element, either using the element or a cloned version of it - a \"drag proxy\" (default mode)\n *\n * ## Container drag mode\n *\n * Container drag should be used when moving or rearranging child elements within and between specified containers\n *\n * Example:\n * ```javascript\n * // dragging element between containers\n * let dragHelper = new DragHelper({\n *   mode       : 'container',\n *   containers : [ container1, container2 ]\n * });\n *```\n *\n * ## Translate drag mode\n *\n * Use translate drag to reposition an element within its container using transform CSS.\n *\n * Example:\n * ```javascript\n * // dragging element within container\n * let dragHelper = new DragHelper({\n *   mode           : 'translateXY',\n *   targetSelector : 'div.movable'\n * });\n * ```\n *\n * ## Observable events\n * In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful `context` about the drag operation:\n *\n * ```javascript\n *  myDrag.on({\n *      drag : ({event , context}) {\n *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n *           const element = context.element;\n *\n *           // The original mousedown element upon which triggered the drag operation\n *           const grabbed = context.grabbed;\n *\n *           // The target under the current mouse / pointer / touch position\n *           const target = context.target;\n *       }\n *  });\n * ```\n *\n * ## Simple drag helper subclass with a drop target specified:\n * ```javascript\n * export default class MyDrag extends DragHelper {\n *      static get defaultConfig() {\n *          return {\n *              // Don't drag the actual cell element, clone it\n *              cloneTarget        : true,\n *              mode               : 'translateXY',\n *              // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n *              dropTargetSelector : '.yourDropTarget',\n *\n *              // Only allow dragging elements with the 'draggable' CSS class\n *              targetSelector : '.draggable'\n *          };\n *      }\n *\n *      construct(config) {\n *          const me = this;\n *\n *          super.construct(config);\n *\n *          me.on({\n *              dragstart : me.onDragStart\n *          });\n *      }\n *\n *      onDragStart({ event, context }) {\n *          const target = context.target;\n *\n *          // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n *          // data model. You can store your data on the context object which is available to you in all drag-related events\n *          context.userId = target.dataset.userId;\n *      }\n *\n *      onEquipmentDrop({ context, event }) {\n *          const me = this;\n *\n *          if (context.valid) {\n *              const userId   = context.userId,\n *                    droppedOnTarget = context.target;\n *\n *              console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n *\n *              // Dropped on a scheduled event, display toast\n *              Toast.show(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n *          }\n *      }\n *  };\n * ```\n *\n * ## Dragging multiple elements\n *\n * You can tell the DragHelper to also move additional `relatedElements` when a drag operation is starting. Simply\n * provide an array of elements on the context object:\n *\n * ```javascript\n * new DragHelper ({\n *     callOnFunctions : true,\n *\n *     onDragStart({ context }) {\n *          // Let drag helper know about extra elements to drag\n *          context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n *     }\n * });\n * ```\n *\n * ## Creating a custom drag proxy\n *\n * Using the {@link #function-createProxy} you can create any markup structure to use when dragging cloned targets.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    }\n * });\n * ```\n *\n * ## Animating a cloned drag proxy to a point before finalizing\n *\n * To provide users with the optimal user experience, you can set a `transitionTo` object (with `target` element and\n * `align` spec) on the DragHelper´s `context` object inside a {@link #event-drop} listener (only applies to translate\n * {@link #config-mode mode} operations). This will trigger a final animation of the drag proxy which should represent\n * the change of data state that will be triggered by the drop.\n *\n * You can see this in action in Gantt´s `drag-resource-from-grid` demo.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    },\n *\n *    async onDrop({ context, event }) {\n *       // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n *      if (context.valid) {\n *          await this.animateProxyTo(someElement, {\n *               // align left side of drag proxy to right side of the someElement\n *               align  : 'l0-r0'\n *          });\n *      }\n *      else {\n *          Toast.show(`You cannot drop here`);\n *      }\n *   }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class DragHelper extends Base.mixin(Events, DragHelperContainer, DragHelperTranslate) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Drag proxy CSS class\n             * @config {String}\n             * @default\n             * @private\n             */\n            dragProxyCls : 'b-drag-proxy',\n\n            /**\n             * CSS class added when drag is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-drag-invalid',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            draggingCls : 'b-dragging',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            dropPlaceholderCls : 'b-drop-placeholder',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)\n             * @config {HTMLElement}\n             * @default\n             */\n            outerElement : document.body,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             */\n            dragWithin : null,\n\n            /**\n             * Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\n             * using translate {@link #config-mode} with {@link #config-cloneTarget}\n             * @config {Boolean}\n             */\n            unifiedProxy : null,\n\n            monitoringConfig : null,\n\n            /**\n             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to \"overlap\" edges)\n             * @config {Boolean}\n             * @default\n             */\n            constrain : true,\n\n            /**\n             * Smallest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            minX : null,\n\n            /**\n             * Largest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            maxX : null,\n\n            /**\n             * Smallest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            minY : null,\n\n            /**\n             * Largest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            maxY : null,\n\n            /**\n             * Enabled dragging, specify mode:\n             * <table>\n             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n             * <tr><td>translateXY<td>Allows dragging within a parent container\n             * </table>\n             * @config {'container'|'translateXY'}\n             * @default\n             */\n            mode : 'translateXY',\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             */\n            isElementDraggable : null,\n\n            /**\n             * A CSS selector used to determine if dragging an element is allowed.\n             * @config {String}\n             */\n            targetSelector : null,\n\n            /**\n             * A CSS selector used to determine if a drop is allowed at the current position.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n\n            /**\n             * A CSS selector added to each drop target element while dragging.\n             * @config {String}\n             */\n            dropTargetCls : null,\n\n            /**\n             * A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\n             * Applies to translate {@link #config-mode mode} when using {@link #config-cloneTarget}.\n             * @config {String}\n             */\n            proxySelector : null,\n\n            /**\n             * Set to `true` to clone the dragged target, and not move the actual target DOM node.\n             * @config {Boolean}\n             * @default\n             */\n            cloneTarget : false,\n\n            /**\n             * Set to `false` to not apply width/height of cloned drag proxy elements.\n             * @config {Boolean}\n             * @default\n             */\n            autoSizeClonedTarget : true,\n\n            /**\n             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).\n             * @config {Boolean}\n             * @default\n             */\n            hideOriginalElement : false,\n\n            /**\n             * Containers whose elements can be rearranged (and moved between the containers). Used when\n             * mode is set to \"container\".\n             * @config {HTMLElement[]}\n             */\n            containers : null,\n\n            /**\n             * A CSS selector used to exclude elements when using container mode\n             * @config {String}\n             */\n            ignoreSelector : null,\n\n            startEvent : null,\n\n            /**\n             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.\n             * @config {Boolean}\n             * @default\n             */\n            lockX : false,\n\n            /**\n             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.\n             * @config {Boolean}\n             * @default\n             */\n            lockY : false,\n\n            /**\n             * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300,\n\n            /**\n             * Scroll manager of the target. If specified, scrolling while dragging is supported.\n             * @config {Core.util.ScrollManager}\n             */\n            scrollManager : null,\n\n            /**\n             * A method provided to snap coordinates to fixed points as you drag\n             * @config {Function}\n             * @internal\n             */\n            snapCoordinates : null,\n\n            /**\n             * When using {@link #config-unifiedProxy}, use this amount of pixels to offset each extra element when dragging multiple items\n             * @config {Number}\n             * @default\n             */\n            unifiedOffset : 5,\n\n            /**\n             * Configure as `false` to take ownership of the proxy element after a valid drop (advanced usage).\n             * @config {Boolean}\n             * @default\n             */\n            removeProxyAfterDrop : true,\n\n            clickSwallowDuration : 50,\n\n            ignoreSamePositionDrop : true,\n\n            // true to allow drops outside the dragWithin element\n            allowDropOutside : null,\n            // for container mode\n            floatRootOwner   : null,\n\n            mouseMoveListenerElement   : document,\n            externalDropTargetSelector : null,\n\n            testConfig : {\n                transitionDuration   : 10,\n                clickSwallowDuration : 50,\n                touchStartDelay      : 100\n            },\n\n            rtlSource : null,\n\n            /**\n             * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n             * Provide your custom {@link #function-createProxy} function to be used for creating drag proxy.\n             * @param {HTMLElement} element The element from which the drag operation originated\n             * @config {Function}\n             * @typings {Function(HTMLElement): HTMLElement}\n             */\n            createProxy : null\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired before dragging starts, return `false` to prevent the drag operation.\n     * @preventable\n     * @event beforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired when dragging starts. The event includes a `context` object. If you want to drag additional elements you can\n     * provide these as an array of elements assigned to the `relatedElements` property of the context object.\n     * @event dragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements Array of extra elements to include in the drag.\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`\n     * @event drag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired after a drop at an invalid position\n     * @event abort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fires after {@link #event-abort} and after drag proxy has animated back to its original position\n     * @private\n     * @event abortFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent} event\n     */\n    //endregion\n\n    //region Init\n\n    /**\n     * Initializes a new DragHelper.\n     * @param {DragHelperConfig} config Configuration object, accepts options specified under Configs above\n     * @example\n     * new DragHelper({\n     *   containers: [div1, div2],\n     *   isElementDraggable: element => element.className.contains('handle'),\n     *   outerElement: topParent,\n     *   listeners: {\n     *     drop: onDrop,\n     *     thisObj: this\n     *   }\n     * });\n     * @function constructor\n     */\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.initListeners();\n\n        if (me.isContainerDrag) {\n            me.initContainerDrag();\n        }\n        else {\n            me.initTranslateDrag();\n        }\n\n        me.onScrollManagerScrollCallback = me.onScrollManagerScrollCallback.bind(me);\n    }\n\n    doDestroy() {\n        this.reset(true);\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize listener\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            { outerElement }   = me,\n            dragStartListeners = {\n                element     : outerElement,\n                pointerdown : 'onPointerDown',\n                thisObj     : me\n            };\n\n        me.mouseMoveListenerElement = me.getMouseMoveListenerTarget(outerElement);\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    // Salesforce hook: we override this method to move listener from the body (which is default root node) to element\n    // inside of LWC\n    getMouseMoveListenerTarget(element) {\n        const root = element.getRootNode();\n\n        let result = this.mouseMoveListenerElement;\n\n        // If we are inside a closed shadow root and we are a child of a Widget, listen to mouse moves only inside outermost el\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && root.mode === 'closed') {\n            result = element.closest('.b-outer') || result;\n        }\n\n        return result;\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional\n     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.\n     *\n     * You can signal that the drop is valid or invalid by setting `context.valid = false;`\n     *\n     * For translate type drags with {@link #config-cloneTarget}, you can also set `transitionTo` if you want to animate\n     * the dragged proxy to a position before finalizing the operation. See class intro text for example usage.\n     *\n     * @event drop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid true if the drop position is valid\n     */\n\n    /**\n     * Fires after {@link #event-drop} and after drag proxy has animated to its final position (if setting `transitionTo`\n     * on the drag context object).\n     * @private\n     * @event dropFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     */\n\n    onPointerDown(event) {\n        const me = this;\n\n        if (\n            // Left button or touch allowed\n            event.button !== 0 ||\n            // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if pointerup happened\n            // when current window wasn't focused - tab switch or window switch). Also handles the edge case of trying to\n            // start a new drag while previous is awaiting finalization, in which case it just bails out.\n            me.context\n        ) {\n            return;\n        }\n\n        // Check that element is draggable\n        if (me.isElementDraggable && !me.isElementDraggable(event.target, event)) {\n            return;\n        }\n\n        me.startEvent = event;\n\n        const handled = me.isContainerDrag ? me.grabContainerDrag(event) : me.grabTranslateDrag(event);\n\n        if (handled) {\n            me.blurDetacher = EventHelper.on({\n                element : globalThis,\n                blur    : me.onWindowBlur,\n                thisObj : me\n            });\n\n            const dragListeners = {\n                element : me.mouseMoveListenerElement,\n                thisObj : me,\n                capture : true,\n                keydown : rootElementListeners.keydown\n            };\n\n            if (event.pointerType === 'touch') {\n                me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n\n                dragListeners.touchmove = {\n                    handler : rootElementListeners.touchmove,\n                    passive : false // We need to be able to preventDefault on the touchmove\n                };\n\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n                // iOS do fire touchend\n                dragListeners.touchend = dragListeners.pointerup = rootElementListeners.touchend;\n            }\n            else {\n                dragListeners.pointermove = rootElementListeners.move;\n                dragListeners.pointerup = rootElementListeners.up;\n            }\n\n            // A listener detacher is returned;\n            me.dragListenersDetacher = EventHelper.on(dragListeners);\n\n            if (me.dragWithin && me.dragWithin !== me.outerElement && me.outerElement.contains(me.dragWithin)) {\n                const\n                    box = Rectangle.from(me.dragWithin, me.outerElement);\n\n                me.minY = box.top;\n                me.maxY = box.bottom;\n\n                me.minX = box.left;\n                me.maxX = box.right;\n            }\n        }\n    }\n\n    async internalMove(event) {\n        // Ignore events used to mimic pointer movement on scroll, those should not affect dragging\n        if (event.scrollInitiated) {\n            return;\n        }\n\n        const\n            me             = this,\n            { context }    = me,\n            distance       = EventHelper.getDistanceBetween(me.startEvent, event),\n            abortTouchDrag = me.touchStartTimer && distance > me.dragThreshold;\n\n        if (abortTouchDrag) {\n            me.abort(true);\n            return;\n        }\n\n        if (\n            !me.touchStartTimer && context?.element && (context.started || distance >= me.dragThreshold) &&\n            // Ignore text nodes\n            event.target?.nodeType === Node.ELEMENT_NODE\n        ) {\n\n            if (!context.started) {\n                if (me.trigger('beforeDragStart', { context, event }) === false) {\n                    return me.abort();\n                }\n\n                if (me.isContainerDrag) {\n                    me.startContainerDrag(event);\n                }\n                else {\n                    me.startTranslateDrag(event);\n                }\n\n                context.started = true;\n\n                // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement\n                        }\n                    ],\n                    callback : me.onScrollManagerScrollCallback\n                }, me.monitoringConfig));\n\n                // Global informational class for when DragHelper is dragging\n                context.outermostEl = DomHelper.getOutermostElement(event.target);\n                context.outermostEl.classList.add('b-draghelper-active');\n\n                if (me.dropTargetSelector && me.dropTargetCls) {\n                    DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                        el => el.classList.add(me.dropTargetCls)\n                    );\n                }\n\n                // This event signals that the drag is started, observers could then provide relatedElements that should\n                // be dragged along with the mousedowned element\n                const result = me.trigger('dragStart', { context, event });\n\n                // Try to keep the drag flow synchronous unless listener returns a promise\n                if (ObjectHelper.isPromise(result)) {\n                    await result;\n                }\n\n                context.moveUnblocked = true;\n\n                if (me.isContainerDrag) {\n                    me.onContainerDragStarted(event);\n                }\n                else {\n                    me.onTranslateDragStarted(event);\n                }\n\n                // This event is used to set visibility of the original events in case drag is started\n                // in copy mode\n                me.trigger('afterDragStart', { context, event });\n            }\n\n            // Drag is started asynchronously, meaning this code path may be invoked several times before flag is set.\n            // We queue move events to trigger them afterwards. Used by `PercentBar` feature in SchedulerPro. Normal usage\n            // should not be affected because microtasks won't appear unless there is asynchronous handler.\n            if (context.moveUnblocked) {\n                // Use cached event, if there was one\n                if (me._cachedMouseEvent) {\n                    // some tests expect 2+ events\n                    me.update(event);\n\n                    me.update(me._cachedMouseEvent);\n                    delete me._cachedMouseEvent;\n                }\n                else {\n                    me.update(event);\n                }\n            }\n            else {\n                // Save last triggered event while we were waiting for promise to resolve\n                me._cachedMouseEvent = event;\n            }\n\n            // to prevent view drag (scroll) on ipad\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\n\n    onScrollManagerScrollCallback(config) {\n        const { lastMouseMoveEvent } = this;\n\n        if (this.context?.element && lastMouseMoveEvent) {\n            // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n            lastMouseMoveEvent.isScroll = true;\n\n            this.update(lastMouseMoveEvent, config);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Move drag element with mouse.\n     * @param event\n     * @fires beforeDragStart\n     * @fires dragStart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Updates drag, called when an element is grabbed and mouse moves\n     * @private\n     * @fires drag\n     */\n    update(event, scrollManagerConfig) {\n        const\n            me                   = this,\n            { context }          = me,\n            scrollingPageElement = document.scrollingElement || document.body; // two different modes used\n\n        // In case of scrolling need to update target element based on [X, Y] of the mouse event\n        // Salesforce workaround: we're listening on the document body and salesforce won't report correct target, so\n        // we try to get it from composed path\n        let target = me.getMouseMoveEventTarget(event);\n\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n\n            target = DomHelper.elementFromPoint(touch.clientX + scrollingPageElement.scrollLeft, touch.clientY + scrollingPageElement.scrollTop);\n        }\n\n        context.target = target;\n\n        let internallyValid = me.allowDropOutside || !me.dragWithin || me.dragWithin.contains(event.target);\n\n        if (internallyValid && me.dropTargetSelector) {\n            internallyValid = internallyValid && Boolean(target?.closest(me.dropTargetSelector));\n        }\n\n        // Move the drag proxy or dragged element before triggering the drag event\n        if (me.isContainerDrag) {\n            me.updateContainerProxy(event, scrollManagerConfig);\n        }\n        else {\n            // Note, if you drag an element from Container A to Container B which is scrollable (handled by ScrollManager),\n            // and you notice that the proxy element follows the scroll and goes away from the cursor,\n            // make sure you set `outerElement` to the container of the source element (Container A)\n            // and set `constrain` to `false`.\n            me.updateTranslateProxy(event, scrollManagerConfig);\n        }\n\n        context.valid = internallyValid;\n\n        // Allow external code to validate the context before updating a container drag\n        me.trigger('drag', { context, event });\n\n        // Move the placeholder element into its new place.\n        // This will see the new state of context if mutated by a drag listener.\n        if (me.isContainerDrag) {\n            me.updateContainerDrag(event, scrollManagerConfig);\n        }\n\n        context.valid = context.valid && internallyValid;\n\n        for (const element of me.draggedElements) {\n            element.classList.toggle(me.invalidCls, !context.valid);\n        }\n\n        if (event) {\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    get draggedElements() {\n        const { context } = this;\n        return [context.dragProxy || context.element, ...(context.relatedElements ?? [])];\n    }\n\n    /**\n     * Abort dragging\n     * @fires abort\n     */\n    async abort(silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.scrollManager?.stopMonitoring?.();\n        me.removeListeners();\n\n        if (context?.started && !context.aborted) {\n            // Force a synchronous layout so that transitions from this point will work.\n            context.element.getBoundingClientRect();\n\n            // Aborted drag not considered valid\n            context.valid = false;\n\n            if (me.isContainerDrag) {\n                me.abortContainerDrag(undefined, undefined, silent);\n            }\n            else {\n                me.abortTranslateDrag(undefined, undefined, silent);\n            }\n\n            context.aborted = true;\n        }\n        else {\n            me.reset(true);\n        }\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeListeners() {\n        this.dragListenersDetacher?.();\n        this.blurDetacher?.();\n    }\n\n    // Called when a drag operation is completed, or aborted\n    // Removes DOM listeners and resets context\n    reset(silent) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context?.started) {\n            for (const element of me.draggedElements) {\n                element.classList.remove(me.invalidCls);\n            }\n\n            context.outermostEl.classList.remove('b-draghelper-active');\n\n            if (me.isContainerDrag) {\n                context.dragProxy.remove();\n            }\n            else {\n                me.cleanUp();\n            }\n\n            if (me.dropTargetSelector && me.dropTargetCls) {\n                DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                    el => el.classList.remove(me.dropTargetCls)\n                );\n            }\n        }\n\n        me.removeListeners();\n\n        /**\n         * Fired after a drag operation is completed or aborted\n         * @event reset\n         * @private\n         * @param {Core.helper.DragHelper} dragHelper\n         */\n        if (!silent) {\n            me.trigger('reset');\n        }\n\n        me.context = me.lastMouseMoveEvent = null;\n    }\n\n    onTouchEnd(event) {\n        this.onMouseUp(event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param event\n     * @private\n     */\n    onMouseUp(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.removeListeners();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                if (context.moveUnblocked) {\n                    // Nobody else must get to process the pointerup event of a drag.\n                    // We are using capture : true, so we see it first\n                    event.stopPropagation();\n\n                    context.finalizing = true;\n                    if (me.isContainerDrag) {\n                        me.finishContainerDrag(event);\n                    }\n                    else {\n                        me.finishTranslateDrag(event);\n                    }\n\n                    // Prevent the impending document click from the mouseup event from propagating\n                    // into a click on our element.\n                    EventHelper.on({\n                        element : document,\n                        thisObj : me,\n                        click   : rootElementListeners.docclick,\n                        capture : true,\n                        expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                        once    : true\n                    });\n                }\n                // If move has not yet started (due to async listener) and we've received a mouseup event, we need to\n                // listen to the next `drag` event to handle mouseup at the correct app state\n                else {\n                    me.ion({\n                        drag() {\n                            me.onMouseUp(event);\n                        },\n                        once : true\n                    });\n                }\n            }\n            else {\n                me.reset(true);\n            }\n        }\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param event\n     * @private\n     */\n    onKeyDown(event) {\n        if (this.context?.started && event.key === 'Escape') {\n            // Nobody else must get to process the ESCAPE key event of a drag.\n            // We are using capture : true, so we see it first\n            event.stopImmediatePropagation();\n            this.abort();\n        }\n    }\n\n    onWindowBlur() {\n        // If window blur occurs while we are dragging (tab is switched, another window steals focus from browser)\n        // pointer might be released and current window will not know about that. Thus allowing to pointerdown again\n        // when focus comes back. In this case we want to let drag helper know that next pointerdown should be ignored.\n        if (this.context && !this.context.finalizing) {\n            this.abort();\n        }\n    }\n\n    /**\n     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n     * Override it to provide your own custom HTML element structure to be used as the drag proxy.\n     * @param {HTMLElement} element The element from which the drag operation originated\n     * @returns {HTMLElement}\n     */\n    createProxy(element) {\n        if (this.proxySelector) {\n            element = element.querySelector(this.proxySelector) || element;\n        }\n\n        const proxy = element.cloneNode(true);\n\n        proxy.removeAttribute('id');\n\n        return proxy;\n    }\n\n    //endregion\n\n    get isContainerDrag() {\n        return this.mode === 'container';\n    }\n\n    /**\n     * Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\n     * DOM transition completes. Only applies to 'translateXY' mode.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The target element or a Rectangle\n     * @param {Object} [alignSpec] An object describing how to the align drag proxy to the target element\n     * @param {String} [alignSpec.align] The alignment specification string, `[trbl]n-[trbl]n`.\n     * @param {Number|Number[]} [alignSpec.offset] The 'x' and 'y' offset values to create an extra margin round the target\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     */\n    async animateProxyTo(targetElement, alignSpec = { align : 'c-c' }) {\n        const\n            { context, draggedElements } = this,\n            { element }                  = context,\n            targetRect                   = targetElement.isRectangle ? targetElement : Rectangle.from(targetElement);\n\n        draggedElements.forEach(el => {\n            el.classList.add('b-drag-final-transition');\n\n            DomHelper.alignTo(el, targetRect, alignSpec);\n        });\n\n        await EventHelper.waitForTransitionEnd({\n            element,\n            property : 'all',\n            thisObj  : this,\n            once     : true\n        });\n\n        draggedElements.forEach(el => el.classList.remove('b-drag-final-transition'));\n    }\n\n    /**\n     * Returns true if a drag operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isDragging() {\n        return Boolean(this.context?.started);\n    }\n\n    //#region Salesforce hooks\n\n    getMouseMoveEventTarget(event) {\n        return !event.isScroll ? event.target : DomHelper.elementFromPoint(event.clientX, event.clientY);\n    }\n\n    //#endregion\n}\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport EventHelper from './EventHelper.js';\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n// <remove-on-release>\n// TODO: add pointer events support\n// </remove-on-release>\n\nconst documentListeners = {\n    down       : 'onMouseDown',\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : {\n        handler : 'onTouchStart',\n        // We preventDefault touchstart so as not to scroll. Must not be passive.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        passive : false\n    },\n    touchmove : 'onTouchMove',\n    touchend  : 'onTouchEnd',\n    keydown   : 'onKeyDown'\n};\n\n/**\n * @module Core/helper/ResizeHelper\n */\n\n/**\n * Contextual information available during a resize.\n *\n * @typedef {Object} ResizeContext\n * @property {HTMLElement} element Element being resized\n * @property {'top'|'right'|'bottom'|'left'} edge Edge being dragged\n * @property {Boolean} valid `true` if the resize is valid, `false` if it is not\n * @property {Boolean} async Set to `true` in a `resize` listener to allow asynchronous finalization of the resize\n * @property {Function} finalize Call this function to finalize the resize, required if it was flagged as `async` in a\n * `resize` listener\n * @property {Number} newWidth New width of the element\n * @property {Number} newHeight New height of the element\n * @property {Number} newX New x coordinate of the element, when dragging left edge\n * @property {Number} newY New y coordinate of the element, when dragging top edge\n */\n\n/**\n * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\n * area on elements left and right edges.\n *\n * ```javascript\n * // enable resizing all elements with class 'resizable'\n * let resizer = new ResizeHelper({\n *   targetSelector: '.resizable'\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @internal\n */\nexport default class ResizeHelper extends Events(Base) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CSS class added when resizing\n             * @config {String}\n             * @default\n             */\n            resizingCls : 'b-resizing',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * Resizing handle size\n             * @config {Number}\n             * @default\n             */\n            handleSize : 10,\n\n            /**\n             * Automatically shrink virtual handles when available space < handleSize. The virtual handles will\n             * decrease towards width/height 1, reserving space between opposite handles to for example leave room for\n             * dragging. To configure reserved space, see {@link #config-reservedSpace}.\n             * @config {Boolean}\n             * @default false\n             */\n            dynamicHandleSize : null,\n\n            //\n            /**\n             * Room in px to leave unoccupied by handles when shrinking them dynamically (see\n             * {@link #config-dynamicHandleSize}).\n             * @config {Number}\n             * @default\n             */\n            reservedSpace : 10,\n\n            /**\n             * Resizing handle size on touch devices\n             * @config {Number}\n             * @default\n             */\n            touchHandleSize : 30,\n\n            /**\n             * Minimum width when resizing\n             * @config {Number}\n             * @default\n             */\n            minWidth : 1,\n\n            /**\n             * Max width when resizing.\n             * @config {Number}\n             * @default\n             */\n            maxWidth : 0,\n\n            /**\n             * Minimum height when resizing\n             * @config {Number}\n             * @default\n             */\n            minHeight : 1,\n\n            /**\n             * Max height when resizing\n             * @config {Number}\n             * @default\n             */\n            maxHeight : 0,\n\n            // outerElement, attach events to it and use as outer limit when looking for ancestors\n            outerElement : document.body,\n\n            /**\n             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.\n             * @config {Core.helper.util.Scroller}\n             */\n            scroller : null,\n\n            /**\n             * Assign a function to determine if a hovered element can be resized or not\n             * @config {Function}\n             * @default\n             */\n            allowResize : null,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             * @default\n             */\n            dragWithin : null,\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             * @default\n             */\n            isElementResizable : null,\n\n            /**\n             * A CSS selector used to determine if resizing an element is allowed.\n             * @config {String}\n             * @default\n             */\n            targetSelector : null,\n\n            /**\n             * Use left handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n\n            leftHandle : true,\n\n            /**\n             * Use right handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            rightHandle : true,\n\n            /**\n             * Use top handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n\n            topHandle : true,\n\n            /**\n             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            bottomHandle : true,\n\n            /**\n             * A CSS selector used to determine where handles should be \"displayed\" when resizing. Defaults to\n             * targetSelector if unspecified\n             * @config {String}\n             */\n            handleSelector : null,\n\n            /**\n             * A CSS selector used to determine which inner element contains handles.\n             * @config {String}\n             */\n            handleContainerSelector : null,\n\n            startEvent : null,\n\n            /*\n             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately\n             * @config {Object}\n             * @private\n             */\n            grab : null,\n\n            /**\n             * CSS class added when the resize state is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-resize-invalid',\n\n            // A number that controls whether or not the element is wide enough for it to make sense to show resize handles\n            // e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit\n            handleVisibilityThreshold : null,\n\n            // Private config that disables translation when resizing left edge. Useful for example in cases when element\n            // being resized is part of a flex layout\n            skipTranslate : false,\n\n            /**\n             * Direction to resize in, either 'horizontal' or 'vertical'\n             * @config {'horizontal'|'vertical'}\n             * @default\n             */\n            direction : 'horizontal',\n\n            clickSwallowDuration : 50,\n\n            rtlSource : null\n        };\n    }\n\n    static configurable = {\n        // Private config that disables updating elements width and position, for when data is live updated during\n        // resize, leading to element being redrawn\n        skipUpdatingElement : null\n    };\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired while dragging\n     * @event resizing\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event resizeStart\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n\n    /**\n     * Fires after resize, and allows for asynchronous finalization by setting 'async' to `true` on the context object.\n     * @event resize\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Context about the resize operation. Set 'async' to `true` to indicate asynchronous\n     * validation of the resize flow (for showing a confirmation dialog etc)\n     */\n\n    /**\n     * Fires when a resize is canceled (width is unchanged)\n     * @event cancel\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        // Larger draggable zones on pure touch devices with no mouse\n        if (!me.handleSelector && !BrowserHelper.isHoverableDevice) {\n            me.handleSize = me.touchHandleSize;\n        }\n\n        me.handleVisibilityThreshold = me.handleVisibilityThreshold || 2 * me.handleSize;\n\n        me.initListeners();\n\n        me.initResize();\n    }\n\n    doDestroy() {\n        this.abort(true);\n        super.doDestroy();\n    }\n\n    updateSkipUpdatingElement(skip) {\n        if (skip) {\n            this.skipTranslate = true;\n        }\n    }\n\n    /**\n     * Initializes resizing\n     * @private\n     */\n    initResize() {\n        const me = this;\n\n        if (!me.isElementResizable && me.targetSelector) {\n            me.isElementResizable = element => element.closest(me.targetSelector);\n        }\n\n        if (me.grab) {\n            const { edge, element, event } = me.grab;\n\n            me.startEvent = event;\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(event, element, edge);\n\n            // emulates mousedown & grabResize\n            me.context = {\n                element,\n                edge,\n                valid         : true,\n                async         : false,\n                elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract x from translate\n                newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                elementWidth  : element.offsetWidth,\n                elementHeight : element.offsetHeight,\n                cursorOffset,\n                startX        : event.clientX + cursorOffset.x + me.scrollLeft,\n                startY        : event.clientY + cursorOffset.y + me.scrollTop,\n                finalize      : () => me.reset?.()\n            };\n\n            element.classList.add(me.resizingCls);\n\n            me.internalStartResize(me.isTouch);\n        }\n    }\n\n    /**\n     * Initialize listeners\n     * @private\n     */\n    initListeners() {\n        const\n            me = this,\n            dragStartListeners = {\n                element    : me.outerElement,\n                mousedown  : documentListeners.down,\n                touchstart : documentListeners.touchstart,\n                thisObj    : me\n            };\n\n        if (!me.handleSelector && BrowserHelper.isHoverableDevice) {\n            dragStartListeners.mousemove = {\n                handler : documentListeners.move,\n\n                // Filter events for checkResizeHandles so we only get called if the mouse\n                // is over one of our targets.\n                delegate : me.targetSelector\n            };\n\n            // We need to clean up when we exit one of our targets\n            dragStartListeners.mouseleave = {\n                handler  : 'onMouseLeaveTarget',\n                delegate : me.targetSelector,\n                capture  : true\n            };\n        }\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Scroll helpers\n\n    get scrollLeft() {\n        if (this.scroller) {\n            return this.scroller.x;\n        }\n\n        return this.outerElement.scrollLeft;\n    }\n\n    get scrollTop() {\n        if (this.scroller) {\n            return this.scroller.y;\n        }\n\n        return this.outerElement.scrollTop;\n    }\n\n    //endregion\n\n    //region Events\n\n    internalStartResize(isTouch) {\n        const dragListeners = {\n            element : document,\n            keydown : documentListeners.keydown,\n            thisObj : this\n        };\n\n        if (isTouch) {\n            dragListeners.touchmove = documentListeners.touchmove;\n            // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n            // iOS do fire touchend\n            dragListeners.touchend = dragListeners.pointerup = documentListeners.touchend;\n        }\n        else {\n            dragListeners.mousemove = documentListeners.move;\n            dragListeners.mouseup = documentListeners.up;\n        }\n\n        // A listener detacher is returned\n        this.removeDragListeners = EventHelper.on(dragListeners);\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeDragListeners() {}\n\n    reset() {\n        this.removeDragListeners?.();\n        this.context = null;\n        this.trigger('reset');\n    }\n\n    canResize(element, event) {\n        return !this.isElementResizable || this.isElementResizable(element, event);\n    }\n\n    onPointerDown(isTouch, event) {\n        const me = this;\n\n        me.startEvent = event;\n\n        if (me.canResize(event.target, event) && me.grabResizeHandle(isTouch, event)) {\n            // Stop event if resize handle was grabbed (resize started)\n            event.stopImmediatePropagation();\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            me.internalStartResize(isTouch);\n        }\n    }\n\n    onTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length > 1) {\n            return;\n        }\n\n        this.onPointerDown(true, event);\n    }\n\n    /**\n     * Grab draggable element on mouse down.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    onMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button !== 0) {\n            return;\n        }\n\n        this.onPointerDown(false, event);\n    }\n\n    internalMove(isTouch, event) {\n        const\n            me                     = this,\n            { context, direction } = me;\n\n        if (context?.element && (context.started || EventHelper.getDistanceBetween(me.startEvent, event) >= me.dragThreshold)) {\n            if (!context.started) {\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement,\n                            // <remove-on-release>\n                            // TODO: Update this then when we add support for resizing in both directions simultaneously\n                            // </remove-on-release>\n                            direction\n                        }\n                    ],\n                    callback : config => me.context?.element && me.lastMouseMoveEvent && me.update(me.lastMouseMoveEvent, config)\n                }, me.monitoringConfig));\n\n                me.trigger('resizeStart', { context, event });\n\n                context.started = true;\n            }\n\n            me.update(event);\n        }\n        // If a mousemove, and we are using zones, and not handles, we have to\n        // programmatically check whether we are over a handle, and add/remove\n        // classes to change the mouse cursor to resize.\n        // If we are using handles, their CSS will set the mouse cursor.\n        else if (!isTouch && !me.handleSelector) {\n            me.checkResizeHandles(event);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(true, event);\n    }\n\n    /**\n     * Move grabbed element with mouse.\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resizestart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(false, event);\n    }\n\n    onPointerUp(isTouch, event) {\n        const\n            me      = this,\n            context = me.context;\n\n        me.removeDragListeners?.();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : documentListeners.docclick,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    capture : true,\n                    once    : true\n                });\n            }\n            me.finishResize(event);\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    onTouchEnd(event) {\n        this.onPointerUp(true, event);\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param {MouseEvent|PointerEvent} event\n     * @private\n     */\n    onMouseUp(event) {\n        this.onPointerUp(false, event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    onKeyDown(event) {\n        if (event.key === 'Escape') {\n            this.abort();\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Updates resize, called when an element is grabbed and mouse moves\n     * @private\n     * @fires resizing\n     */\n    update(event) {\n        const\n            me              = this,\n            context         = me.context,\n            parentRectangle = Rectangle.from(me.outerElement);\n\n        // Calculate the current pointer X. Do not allow overflowing either edge\n        context.currentX = Math.max(Math.min(event.clientX + context.cursorOffset.x, parentRectangle.right), parentRectangle.x) + me.scrollLeft;\n        context.currentY = Math.max(Math.min(event.clientY + context.cursorOffset.y, parentRectangle.bottom), parentRectangle.y) + me.scrollTop;\n\n        if (event) {\n            if (me.updateResize(event)) {\n                me.trigger('resizing', { context, event });\n                context.element.classList.toggle(me.invalidCls, context.valid === false);\n            }\n\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    /**\n     * Abort dragging\n     */\n    abort(silent = false) {\n        const me = this;\n\n        me.scrollManager?.stopMonitoring?.();\n\n        if (me.context) {\n            me.abortResize(null, silent);\n        }\n        else if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    /**\n     * Starts resizing, updates ResizeHelper#context with relevant info.\n     * @private\n     * @param {Boolean} isTouch\n     * @param {MouseEvent} event\n     * @returns {Boolean} True if handled, false if not\n     */\n    grabResizeHandle(isTouch, event) {\n        const me = this;\n\n        if (me.allowResize && !me.allowResize(event.target, event)) {\n            return false;\n        }\n\n        const\n            handleSelector = me.handleSelector,\n            coordsFrom = event.type === 'touchstart' ? event.changedTouches[0] : event,\n            clientX = coordsFrom.clientX,\n            clientY = coordsFrom.clientY,\n            // go up from \"handle\" to resizable element\n            element = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        if (element) {\n            let edge;\n\n            // Calculate which edge to resize\n            // If there's a handle selector, see if it's anchored on the left or the right\n            if (handleSelector) {\n                if (event.target.matches(handleSelector)) {\n                    if (me.direction === 'horizontal') {\n                        if (event.pageX < DomHelper.getPageX(element) + element.offsetWidth / 2) {\n                            edge = me.isRTL ? 'right' : 'left';\n                        }\n                        else {\n                            edge =  me.isRTL ? 'left' : 'right';\n                        }\n\n                    }\n                    else {\n                        if (event.pageY < DomHelper.getPageY(element) + element.offsetHeight / 2) {\n                            edge = 'top';\n                        }\n                        else {\n                            edge = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            // If we're not using handles, but just active zones\n            // then test whether the event position is in an active resize zone.\n            else {\n                if (me.direction === 'horizontal') {\n                    if (me.overLeftHandle(event, element)) {\n                        edge = me.isRTL ? 'right' : 'left';\n                    }\n                    else if (me.overRightHandle(event, element)) {\n                        edge =  me.isRTL ? 'left' : 'right';\n                    }\n                }\n                else {\n                    if (me.overTopHandle(event, element)) {\n                        edge = 'top';\n                    }\n                    else if (me.overBottomHandle(event, element)) {\n                        edge = 'bottom';\n                    }\n                }\n\n                if (!edge) {\n                    me.context = null;\n                    // not over an edge, abort\n                    return false;\n                }\n            }\n\n            // If resizing is initiated by a touch, we must preventDefault on the touchstart\n            // so that scrolling is not invoked when dragging. This is in lieu of a functioning\n            // touch-action style on iOS Safari. When that's fixed, this will not be needed.\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(coordsFrom, element, edge);\n\n            if (me.trigger('beforeResizeStart', { element, event }) !== false) {\n                // store initial size\n                me.context = {\n                    element,\n                    edge,\n                    isTouch,\n                    valid         : true,\n                    async         : false,\n                    direction     : me.direction,\n                    elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                    elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract y from translate\n                    newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                    newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                    elementWidth  : element.offsetWidth,\n                    elementHeight : element.offsetHeight,\n                    cursorOffset,\n                    startX        : clientX + cursorOffset.x + me.scrollLeft,\n                    startY        : clientY + cursorOffset.y + me.scrollTop,\n                    finalize      : () => me.reset?.()\n                };\n\n                element.classList.add(me.resizingCls);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getCursorOffsetToElementEdge(event, element, edge) {\n        const rectEl = Rectangle.from(element);\n\n        let x = 0,\n            y = 0;\n\n        switch (edge) {\n            case 'left':\n                x = rectEl.x - (this.isRTL ? rectEl.width : 0) - event.clientX; // negative\n                break;\n            case 'right':\n                x = rectEl.x + (this.isRTL ? 0 : rectEl.width) - event.clientX; // positive\n                break;\n            case 'top':\n                y = rectEl.y - event.clientY; // negative\n                break;\n            case 'bottom':\n                y = rectEl.y + rectEl.height - event.clientY; // positive\n                break;\n        }\n\n        return { x, y };\n    }\n\n    /**\n     * Check if mouse is over a resize handle (virtual). If so, highlight.\n     * @private\n     * @param {MouseEvent} event\n     */\n    checkResizeHandles(event) {\n        const\n            me     = this,\n            target = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        // mouse over a target element and allowed to resize?\n        if (target && (!me.allowResize || me.allowResize(event.target, event))) {\n            me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n            if (me.currentElement) {\n                let over;\n\n                if (me.direction === 'horizontal') {\n                    over = me.overLeftHandle(event, target) || me.overRightHandle(event, target);\n                }\n                else {\n                    over = me.overTopHandle(event, target) || me.overBottomHandle(event, target);\n                }\n\n                if (over) {\n                    me.highlightHandle(); // over handle\n                }\n                else {\n                    me.unHighlightHandle(); // not over handle\n                }\n            }\n        }\n        else if (me.currentElement) {\n            me.unHighlightHandle(); // outside element\n        }\n    }\n\n    onMouseLeaveTarget(event) {\n        const me = this;\n\n        me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n        if (me.currentElement) {\n            me.unHighlightHandle();\n        }\n    }\n\n    /**\n     * Updates size of target (on mouse move).\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    updateResize(event) {\n        const\n            me = this,\n            {\n                context,\n                allowEdgeSwitch,\n                skipTranslate,\n                skipUpdatingElement\n            }  = me;\n\n        let updated;\n\n        // flip which edge is being dragged depending on whether we're to the right or left of the mousedown\n        if (allowEdgeSwitch) {\n            if (me.direction === 'horizontal') {\n                context.edge = context.currentX > context.startX ? 'right' : 'left';\n            }\n            else {\n                context.edge = context.currentY > context.startY ? 'bottom' : 'top';\n            }\n        }\n\n        const\n            {\n                element,\n                elementStartX,\n                elementStartY,\n                elementWidth,\n                elementHeight,\n                edge\n            }         = context,\n            { style } = element,\n            // limit to outerElement if set\n            deltaX    = context.currentX - context.startX,\n            deltaY    = context.currentY - context.startY,\n            minWidth  = DomHelper.getExtremalSizePX(element, 'minWidth') || me.minWidth,\n            maxWidth  = DomHelper.getExtremalSizePX(element, 'maxWidth') || me.maxWidth,\n            minHeight = DomHelper.getExtremalSizePX(element, 'minHeight') || me.minHeight,\n            maxHeight = DomHelper.getExtremalSizePX(element, 'maxHeight') || me.maxHeight,\n            // dragging the right edge right increases the width, dragging left edge right decreases width\n            sign      = (edge === 'right' && !me.isRTL) || edge === 'bottom' ? 1 : -1,\n            // new width, not allowed to go below minWidth\n            newWidth  = elementWidth + deltaX * sign,\n            newHeight = elementHeight + deltaY * sign;\n\n        let\n            width  = Math.max(minWidth, newWidth),\n            height = Math.max(minHeight, newHeight);\n\n        if (maxWidth > 0) {\n            width = Math.min(width, maxWidth);\n        }\n\n        if (maxHeight > 0) {\n            height = Math.min(height, maxHeight);\n        }\n\n        // remove flex when resizing\n        if (style.flex) {\n            style.flex = '';\n        }\n\n        if (me.direction === 'horizontal' && elementWidth !== width) {\n            if (!skipUpdatingElement) {\n                style.width = Math.abs(width) + 'px';\n            }\n            context.newWidth = width;\n\n            // when dragging left edge, also update position (so that right edge remains in place)\n            if (edge === 'left' || width < 0) {\n                const newX = Math.max(Math.min(elementStartX + elementWidth - me.minWidth, elementStartX + deltaX), 0);\n\n                if (!skipTranslate) {\n                    DomHelper.setTranslateX(element, Math.round(newX));\n                }\n\n                context.newX = newX;\n            }\n            // When dragging the right edge and we're allowed to flip the drag from left to right\n            // through the start point (eg drag event creation) the element must be at its initial X position\n            else if (edge === 'right' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateX(element, elementStartX);\n            }\n            updated = true;\n        }\n        else if (me.direction === 'vertical' && elementHeight !== newHeight) {\n            if (!skipUpdatingElement) {\n                style.height = Math.abs(height) + 'px';\n            }\n            context.newHeight = height;\n\n            // when dragging top edge, also update position (so that bottom edge remains in place)\n            if (edge === 'top' || height < 0) {\n                context.newY = Math.max(Math.min(elementStartY + elementHeight - me.minHeight, elementStartY + deltaY), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateY(element, context.newY);\n                }\n            }\n            // When dragging the bottom edge and we're allowed to flip the drag from top to bottom\n            // through the start point (eg drag event creation) the element must be at its initial Y position\n            else if (edge === 'bottom' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateY(element, elementStartY);\n            }\n            updated = true;\n        }\n\n        return updated;\n    }\n\n    /**\n     * Finalizes resize, fires drop.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resize\n     * @fires cancel\n     */\n    finishResize(event) {\n        const\n            me          = this,\n            context     = me.context,\n            eventObject = { context, event };\n\n        context.element.classList.remove(me.resizingCls);\n\n        if (context.started) {\n            let changed = false;\n\n            if (me.direction === 'horizontal') {\n                changed = context.newWidth && context.newWidth !== context.elementWidth;\n            }\n            else {\n                changed = context.newHeight && context.newHeight !== context.elementHeight;\n            }\n            me.trigger(changed ? 'resize' : 'cancel', eventObject);\n\n            if (!context.async) {\n                context.finalize();\n            }\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    /**\n     * Abort resizing\n     * @private\n     * @fires cancel\n     */\n    abortResize(event = null, silent = false) {\n        const\n            me      = this,\n            context = me.context;\n\n        context.element.classList.remove(me.resizingCls);\n        if (me.direction === 'horizontal') {\n            // With these statements, no x pos is changed when resizing. Should therefor not reset it when cancelling\n            if (context.edge === 'left' || (context.allowEdgeSwitch && !context.skipTranslate)) {\n                DomHelper.setTranslateX(context.element, context.elementStartX);\n            }\n            context.element.style.width = context.elementWidth + 'px';\n        }\n        else {\n            DomHelper.setTranslateY(context.element, context.elementStartY);\n            context.element.style.height = context.elementHeight + 'px';\n        }\n\n        !silent && me.trigger('cancel', { context, event });\n\n        if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    //endregion\n\n    //region Handles\n\n    // /**\n    //  * Constrain resize to outerElements bounds\n    //  * @private\n    //  * @param x\n    //  * @returns {*}\n    //  */\n    // constrainResize(x) {\n    //     const me = this;\n    //\n    //     if (me.outerElement) {\n    //         const box = me.outerElement.getBoundingClientRect();\n    //         if (x < box.left) x = box.left;\n    //         if (x > box.right) x = box.right;\n    //     }\n    //\n    //     return x;\n    // }\n\n    /**\n     * Highlights handles (applies css that changes cursor).\n     * @private\n     */\n    highlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        // over a handle, add cls to change cursor\n        me.currentElement.classList.add('b-resize-handle');\n        target.classList.add('b-over-resize-handle');\n    }\n\n    /**\n     * Unhighlight handles (removes css).\n     * @private\n     */\n    unHighlightHandle() {\n        const\n            me = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        target && target.classList.remove('b-over-resize-handle');\n        me.currentElement.classList.remove('b-resize-handle');\n        me.currentElement = null;\n    }\n\n    overAnyHandle(event, target) {\n        return this.overStartHandle(event, target) || this.overEndHandle(event, target);\n    }\n\n    overStartHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overLeftHandle(event, target) : this.overTopHandle(event, target);\n    }\n\n    overEndHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overRightHandle(event, target) : this.overBottomHandle(event, target);\n    }\n\n    getDynamicHandleSize(opposite, offsetWidth) {\n        const\n            handleCount = opposite ? 2 : 1,\n            { handleSize } = this;\n\n        // Shrink handle size when configured to do so, preserving reserved space between handles\n        if (this.dynamicHandleSize && handleSize * handleCount > offsetWidth - this.reservedSpace) {\n            return Math.max(Math.floor((offsetWidth - this.reservedSpace) / handleCount), 0);\n        }\n\n        return handleSize;\n    }\n\n    /**\n     * Check if over left handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overLeftHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.leftHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const leftHandle = Rectangle.from(target);\n\n            leftHandle.width = me.getDynamicHandleSize(me.rightHandle, offsetWidth);\n\n            return leftHandle.width > 0 && leftHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over right handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overRightHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.rightHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const rightHandle = Rectangle.from(target);\n\n            rightHandle.x = rightHandle.right - me.getDynamicHandleSize(me.leftHandle, offsetWidth);\n\n            return rightHandle.width > 0 && rightHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over top handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false\n     */\n    overTopHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.topHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const topHandle = Rectangle.from(target);\n\n            topHandle.height = me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return topHandle.height > 0 && topHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over bottom handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false\n     */\n    overBottomHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.bottomHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const bottomHandle = Rectangle.from(target);\n\n            bottomHandle.y = bottomHandle.bottom - me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return bottomHandle.height > 0 && bottomHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    //endregion\n}\n", "import ObjectHelper from './ObjectHelper.js';\nimport Widget from '../widget/Widget.js';\nimport Toast from '../widget/Toast.js';\nimport Mask from '../widget/Mask.js';\nimport Point from './util/Point.js';\n\n/**\n * @module Core/helper/WidgetHelper\n */\n\n/**\n * Helper for creating widgets.\n */\nexport default class WidgetHelper {\n    //region Querying\n\n    /**\n     * Returns the widget with the specified id.\n     * @param {String} Id of widget to find\n     * @returns {Core.widget.Widget} The widget if any\n     * @category Querying\n     */\n    static getById(id) {\n        return Widget.getById(id);\n    }\n\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Querying\n     */\n    static fromElement(element, type, limit) {\n        return Widget.fromElement(element, type, limit);\n    }\n\n    //endregion\n\n    //region Widgets\n\n    /**\n     * Create a widget.\n     * @example\n     * WidgetHelper.createWidget({\n     *   type: 'button',\n     *   icon: 'user',\n     *   text: 'Edit user'\n     * });\n     * @param {ContainerItemConfig} config Widget config\n     * @returns {Core.widget.Widget} The widget\n     * @category Widgets\n     */\n    static createWidget(config = {}) {\n        return config.isWidget ? config : Widget.create(config);\n    }\n\n    /**\n     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\n     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\n     * applied to all passed widgets.\n     *\n     * Usage:\n     *\n     * ```javascript\n     * // Will append button as last item to element with id 'container'\n     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');\n     *\n     * // Same as above, but will add two buttons\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], { appendTo : 'container' });\n     *\n     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n     * // additional class 'my-cls'\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], {\n     *         insertBefore : 'someElement',\n     *         cls          : 'my-cls'\n     *     });\n     * ```\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]} widget Widget config or array of such configs\n     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to\n     * apply to all passed widgets\n     * @returns {Core.widget.Widget[]} Array or widgets\n     * @category Widgets\n     */\n    static append(widget, config) {\n        widget = Array.isArray(widget) && widget || [widget];\n\n        if (config instanceof HTMLElement || typeof config === 'string') {\n            config = {\n                appendTo : config\n            };\n        }\n\n        // We want to fix position to insert into to keep order of passed widgets\n        if (config.insertFirst) {\n            const target = typeof config.insertFirst === 'string' ? document.getElementById(config.insertFirst) : config.insertFirst;\n\n            if (target.firstChild) {\n                config.insertBefore = target.firstChild;\n            }\n            else {\n                config.appendTo = target;\n            }\n        }\n\n        return widget.map(item => Widget.create(ObjectHelper.assign({}, config || {}, item)));\n    }\n\n    //endregion\n\n    //region Popups\n\n    /**\n     * Shows a popup (~tooltip) containing widgets connected to specified element.\n     * @example\n     * WidgetHelper.openPopup(element, {\n     *   position: 'bottom center',\n     *   items: [\n     *      { widgetConfig }\n     *   ]\n     * });\n     * @param {HTMLElement} element Element to connect popup to\n     * @param {PopupConfig} config Config object, or string to use as html in popup\n     * @returns {*|{close, widgets}}\n     * @category Popups\n     */\n    static openPopup(element, config) {\n        return Widget.create(ObjectHelper.assign({\n            forElement : element\n        }, typeof config === 'string' ? {\n            html : config\n        } : config), 'popup');\n    }\n\n    /**\n     * Shows a context menu connected to the specified element.\n     * @example\n     * WidgetHelper.showContextMenu(element, {\n     *   items: [\n     *      { id: 'addItem', icon: 'add', text: 'Add' },\n     *      ...\n     *   ],\n     *   onItem: item => alert('Clicked ' + item.text)\n     * });\n     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for\n     * @param {MenuItemConfig} config Context menu config, see example\n     * @returns {Core.widget.Menu}\n     * @category Popups\n     */\n    static showContextMenu(element, config) {\n        const me = this;\n\n        if (me.currentContextMenu) {\n            me.currentContextMenu.destroy();\n        }\n\n        if (element instanceof HTMLElement) {\n            config.forElement = element;\n        }\n        else {\n            config.forElement = document.body;\n            if (Array.isArray(element)) {\n                element = new Point(...element);\n            }\n            if (element instanceof Point) {\n                config.align = {\n                    position : element\n                };\n            }\n        }\n        config.internalListeners = { destroy : me.currentContextMenu = null };\n\n        return me.currentContextMenu = Widget.create(config, 'menu');\n    }\n\n    /**\n     * Attached a tooltip to the specified element.\n     * @example\n     * WidgetHelper.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {String|TooltipConfig} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Popups\n     */\n    static attachTooltip(element, configOrText) {\n        return Widget.attachTooltip(element, configOrText);\n    }\n\n    /**\n     * Checks if element has tooltip attached\n     *\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     * @category Popups\n     */\n    static hasTooltipAttached(element) {\n        return Widget.resolveType('tooltip').hasTooltipAttached(element);\n    }\n\n    /**\n     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\n     * on the element.\n     *\n     * @param {HTMLElement} element Element to remove tooltip from\n     * @category Popups\n     */\n    static destroyTooltipAttached(element) {\n        return Widget.resolveType('tooltip').destroyTooltipAttached(element);\n    }\n\n    //endregion\n\n    //region Mask\n\n    /**\n     * Masks the specified element, showing a message in the mask.\n     * @param {HTMLElement} element Element to mask\n     * @param {String} msg Message to show in the mask\n     * @category Mask\n     */\n    static mask(element, msg = 'Loading') {\n        if (element) {\n            // Config object normalization\n            if (element instanceof HTMLElement) {\n                element = {\n                    target : element,\n                    text   : msg\n                };\n            }\n\n            return Mask.mask(element, element.target);\n        }\n    }\n\n    /**\n     * Unmask the specified element.\n     * @param {HTMLElement} element\n     * @category Mask\n     */\n    static unmask(element, close = true) {\n        if (element.mask) {\n            if (close) {\n                element.mask.close();\n            }\n            else {\n                element.mask.hide();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toast\n\n    /**\n     * Show a toast\n     * @param {String} msg message to show in the toast\n     * @category Mask\n     */\n    static toast(msg) {\n        return Toast.show(msg);\n    }\n\n    //endregion\n}\n", "const hasOwnProperty = Object.prototype.hasOwnProperty;\n\nlet cacheKey = null;\n\nfunction setParser(me, parser) {\n    Object.defineProperty(me, 'parser', {\n        value : parser\n    });\n\n    return parser;\n}\n\nclass Default {\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n\n    format(value) {\n        return this.formatter.defaultFormat(value);\n    }\n\n    parse(value, strict) {\n        return this.formatter.defaultParse(value, strict);\n    }\n\n    resolvedOptions() {\n        return null;\n    }\n}\n\n// This class does not extend Core.Base because instances are not reconfigurable (making\n// setConfig harmful) nor destroyable. Instead, they get frozen and cached according to\n// their \"config\" definition.\n/**\n * Abstract base class for formatters.\n * @private\n */\nexport default class Formatter {\n    static get(format) {\n        if (format == null) {\n            return this.NULL;\n        }\n        if (format instanceof this) {\n            return format;\n        }\n\n        const\n            key = (typeof format === 'string') ? format : JSON.stringify(format),\n            cache = this.cache;\n\n        let fmt = cache.get(key);\n\n        if (!fmt) {\n            cacheKey = key;  // this is grabbed by our constructor below...\n            fmt = new this(format);\n\n            cache.set(key, fmt);\n        }\n\n        return fmt;\n    }\n\n    static get cache() {\n        return (hasOwnProperty.call(this, '_cache') && this._cache) || (this._cache = new Map());\n    }\n\n    static get NULL() {\n        return hasOwnProperty.call(this, '_null') ? this._null : (this._null = new this(null));\n    }\n\n    constructor(config) {\n        const me = this;\n\n        // This is done in a funny way so as not to complicate the derived constructor's\n        // desire to maintain a single argument signature, as well as it's calling of\n        // Object.freeze() to ensure immutability in dev mode.\n        me.cacheKey = cacheKey;\n\n        cacheKey = null;\n\n        me.initialize();\n\n        if (config === null) {\n            me.formatter = new Default(me);\n        }\n        else {\n            me.configure(config);\n\n            // Bring locale and other defaulted options back onto this object:\n            for (const [key, value] of Object.entries(me.resolvedOptions())) {\n                // For some reason (locale-specific perhaps), resolvedOptions returns\n                // with 'undefined' in some keys (e.g., min/maximumFractionDigits) when\n                // we specified 0.\n                //\n                // The second check is to only bring back values that we understand.\n                if (value != null && (key in me.defaults)) {\n                    me[key] = value;\n                }\n            }\n        }\n    }\n\n    get parser() {\n        // Replace this property w/the actual instance:\n        return setParser(this, new this.constructor.Parser(this));\n    }\n\n    defaultFormat(value) {\n        return (value == null) ? value : String(value);\n    }\n\n    defaultParse(value) {\n        return value;\n    }\n\n    format(value) {\n        return (value == null) ? value : this.formatter.format(value);\n    }\n\n    parse(value, strict) {\n        return (value == null) ? value : this.parser.parse(value, strict);\n    }\n\n    parseStrict(value) {\n        return this.parse(value, true);\n    }\n\n    resolvedOptions() {\n        return this.formatter.resolvedOptions();\n    }\n}\n", "import Formatter from './Formatter.js';\nimport StringHelper from '../StringHelper.js';\nimport LocaleManager from '../../localization/LocaleManager.js';\nimport '../../localization/En.js';\n\n/**\n * @module Core/helper/util/NumberFormat\n */\n\nconst\n    escapeRegExp = StringHelper.escapeRegExp,\n    digitsRe = /[\\d+-]/g,\n    // We cannot pass locale=null:\n    newFormatter = (locale, config) => new Intl.NumberFormat(locale || undefined, config),\n    numFormatRe = /^(?:([$])\\s*)?(?:(\\d+)>)?\\d+(,\\d+)?(?:\\.((\\d*)(?:#*)|[*]))?(?:\\s*([%])?)?$/,\n    unicodeMinus = '\\u2212';\n\nclass NumberParser {\n    constructor(formatter) {\n        const\n            me = this,\n            locale = formatter.locale,\n            // We need a formatter for this locale that has decimals and grouping:\n            numFmt = newFormatter(locale, {\n                maximumFractionDigits : 3\n            }),\n            currency = formatter.is.currency ? me._decodeStyle(locale, {\n                style           : 'currency',\n                currency        : formatter.currency,\n                currencyDisplay : formatter.currencyDisplay\n            }) : null,\n            percent = formatter.is.percent ? me._decodeStyle(locale, {\n                style : 'percent'\n            }) : null,\n            decimal = numFmt.format(1.2).replace(digitsRe, '')[0],\n            grouper = numFmt.format(1e9).replace(digitsRe, '')[0] || '';\n\n        Object.assign(me, { currency, decimal, formatter, grouper, percent });\n\n        me.decimal = decimal;\n        me.decimalRe = escapeRegExp(decimal, 'g');\n        me.grouper = grouper;\n\n        // The stripRe removes whitespace, currency text, percent text and grouping chars:\n        me.stripRe = new RegExp(\n            `(?:\\\\s+|${escapeRegExp(grouper)})` +\n            (currency ? `|(?:${escapeRegExp(currency.text)})` : '') +\n            (percent ? `|(?:${escapeRegExp(percent.text)})` : ''),\n            'g');\n\n        //<debug>\n        Object.freeze(me);\n        Object.freeze(currency);\n        Object.freeze(percent);\n        //</debug>\n    }\n\n    decimalPlaces(value) {\n        value = value.replace(this.stripRe, '');\n\n        const dot = value.indexOf(this.decimal) + 1;\n\n        return dot && (value.length - dot);\n    }\n\n    parse(value, strict) {\n        if (typeof value === 'string') {\n            value = value.replace(this.stripRe, '').replace(this.decimalRe, '.').replace(unicodeMinus, '-');\n\n            value = strict ? Number(value) : parseFloat(value);\n\n            if (this.formatter.is.percent) {\n                value /= 100;\n            }\n        }\n        // else, a number is already parsed but could be null...\n\n        return value;\n    }\n\n    _decodeStyle(locale, fmtDef) {\n        const\n            fmt = newFormatter(locale, fmtDef),\n            decFmt = newFormatter(locale, Object.assign(\n                fmt.resolvedOptions(),\n                { style : 'decimal' }\n            )),\n            zero = fmt.format(0),  // = '0%' or '$0.00' in en-US\n            zeroDec = decFmt.format(0);  // = '0' or '0.00' in en-US\n\n        return {\n            suffix : zero.startsWith(zeroDec),\n            text   : zero.replace(zeroDec, '').trim()\n        };\n    }\n}\n\n/**\n * This class is an enhancement to `Intl.NumberFormat` that has a more flexible\n * constructor as well as other features such as `parse()`.\n *\n * All constructor forms take a single argument. The most common is to pass a format\n * {@link #config-template} string:\n *```\n *  const formatter = new NumberFormat('9,999.99##');\n *```\n * The above is equivalent to:\n *```\n *  const formatter = new Intl.NumberFormat({\n *      useGrouping           : true,\n *      minimumFractionDigits : 2,\n *      maximumFractionDigits : 4\n *  });\n *```\n * The `formatter` created above is used as follows (in the `en-US` locale):\n *```\n *  console.log(formatter.format(12345.54321));\n *  console.log(formatter.format(42));\n *\n *  // 12,345.5432\n *  // 42.00\n *```\n * When a format template is insufficient, a config object can be provided, similar to\n * `Intl.NumberFormat`'s `options` parameter. While all options from `Intl.NumberFormat`\n * are valid properties for this class's config object, additional properties are\n * supported.\n *\n * For example:\n *```\n *  new NumberFormat({\n *      locale      : 'en-US',\n *      template    : '$9,999',\n *      currency    : 'USD',\n *      significant : 5\n *  });\n *```\n * The `locale` option takes the place of the first positional parameter to the\n * `Intl.NumberFormat` constructor. The `template` config is the same string that can be\n * passed by itself.\n *\n * The shorthand properties `fraction`, `integer`, and `significant` set the standard\n * options `minimumFractionDigits`, `maximumFractionDigits`, `minimumIntegerDigits`,\n * `minimumSignificantDigits`, and `maximumSignificantDigits`.\n *\n * NOTE: Instances of `NumberFormat` are immutable after construction.\n *\n * For details about `Intl.NumberFormat` see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).\n */\nexport default class NumberFormat extends Formatter {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{locale}',\n        'L{currency}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'NumberFormat';\n    }\n\n    //<debug>\n    constructor(options) {\n        super(options);\n\n        this.parse('0');  // throw away parse just to get us freezable\n\n        Object.freeze(this.is);\n        Object.freeze(this);\n    }\n    //</debug>\n\n    initialize() {\n        this._as = {\n            // cacheKey : cachedInstance\n        };\n\n        this.is = {\n            decimal  : false,\n            currency : false,\n            percent  : false,\n            null     : true,\n            from     : null\n        };\n    }\n\n    get truncator() {\n        const scale = this.maximumFractionDigits;\n\n        return (scale == null)\n            ? null\n            : this.as({ style : 'decimal', maximumFractionDigits : Math.min(20, scale + 1) }, 'truncator');\n    }\n\n    configure(options) {\n        const me = this;\n\n        if (typeof options !== 'string') {\n            Object.assign(me, options);\n        }\n        else {\n            me.template = options;\n        }\n\n        const\n            config = {},\n            loc = me.locale ? LocaleManager.locales[me.locale] : LocaleManager.locale,\n            defaults = loc && loc.NumberFormat,\n            template = me.template;\n\n        if (defaults) {\n            for (const key in defaults) {\n                if (me[key] == null && typeof defaults[key] !== 'function') {\n                    me[key] = defaults[key];\n                }\n            }\n        }\n\n        if (template) {\n            const\n                match = numFormatRe.exec(template),\n                m2 = match[2],\n                m4 = match[4];\n\n            me.useGrouping = !!match[3];\n            me.style = match[1] ? 'currency' : (match[6] ? 'percent' : 'decimal');\n\n            if (m2) {\n                me.integer = +m2;\n            }\n\n            if (m4 === '*') {\n                me.fraction = [0, 20];\n            }\n            else if (m4 != null) {\n                me.fraction = [match[5].length, m4.length];\n            }\n        }\n\n        me._minMax('fraction', true, true);\n        me._minMax('integer', true, false);\n        me._minMax('significant', false, true);\n\n        for (const key in me.defaults) {\n            if (me[key] != null) {\n                config[key] = me[key];\n            }\n        }\n\n        me.is.from = me.from && me.from.is;\n        me.is[me.style] = !(me.is.null = false);\n\n        me.formatter = newFormatter(me.locale, config);\n    }\n\n    /**\n     * Creates a derived `NumberFormat` from this instance, with a different `style`. This is useful for processing\n     * currency and percentage styles without the symbols being injected in the formatting.\n     *\n     * @param {String|Object} change The new style (if a string) or a set of properties to update.\n     * @param {String} [cacheAs] A key by which to cache this derived formatter.\n     * @returns {Core.helper.util.NumberFormat}\n     */\n    as(change, cacheAs = null) {\n        const\n            config = this.resolvedOptions() || { template : '9.*' },\n            cache = this._as;\n\n        let ret = cacheAs && cache[cacheAs];\n\n        if (!ret) {\n            if (typeof change === 'string') {\n                config.style = change;\n            }\n            else {\n                Object.assign(config, change);\n            }\n\n            config.from = this;\n\n            ret = new NumberFormat(config);\n        }\n\n        if (cacheAs) {\n            cache[cacheAs] = ret;\n        }\n\n        return ret;\n    }\n\n    defaultParse(value, strict) {\n        return (value == null) ? value : (strict ? Number(value) : parseFloat(value));\n    }\n\n    /**\n     * Returns the given `value` formatted in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number} value\n     * @returns {String}\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            const v = Number(value);\n\n            value = isNaN(v) ? this.parse(value) : v;\n        }\n\n        return super.format(value);\n    }\n\n    // The parse() method is inherited but the base class implementation\n    // cannot properly document the parameter and return types:\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * Pass `strict` as `true` to require all text to convert. In essence, the default is\n     * in line with JavaScript's `parseFloat` while `strict=true` behaves like the `Number`\n     * constructor:\n     *```\n     *  parseFloat('1.2xx');  // = 1.2\n     *  Number('1.2xx')       // = NaN\n     *```\n     * @method parse\n     * @param {String} value\n     * @param {Boolean} [strict=false]\n     * @returns {Number}\n     */\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * This method simply passes the `value` to `parse()` and passes `true` for the second\n     * argument.\n     *\n     * @method parseStrict\n     * @param {String} value\n     * @returns {Number}\n     */\n\n    /**\n     * Returns the given `Number` rounded in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    round(value) {\n        return this.parse(this.format(value));\n    }\n\n    /**\n     * Returns the given `Number` truncated to the `maximumFractionDigits` in accordance\n     * with the specified locale and formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    truncate(value) {\n        const\n            me = this,\n            scale = me.maximumFractionDigits,\n            { truncator } = me;\n\n        let v = me.parse(value),\n            dot;\n\n        if (truncator) {\n            v = truncator.format(v);\n            dot = v.indexOf(truncator.parser.decimal);\n\n            if (dot > -1 && v.length - dot  - 1 > scale) {\n                v = v.substr(0, dot + scale + 1);\n            }\n\n            v = truncator.parse(v);\n        }\n\n        return v;\n    }\n\n    resolvedOptions() {\n        const options = super.resolvedOptions();\n\n        for (const key in options) {\n            // For some reason, on TeamCity, tests get undefined for some properties...\n            // maybe a locale issue?\n            if (options[key] === undefined) {\n                options[key] = this[key];\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Expands the provided shorthand into the \"minimum*Digits\" and \"maximum*Digits\".\n     * @param {String} name\n     * @param {Boolean} setMin\n     * @param {Boolean} setMax\n     * @private\n     */\n    _minMax(name, setMin, setMax) {\n        const\n            me = this,\n            value = me[name];\n\n        if (value != null) {\n            const\n                capName = StringHelper.capitalize(name),\n                max = `maximum${capName}Digits`,\n                min = `minimum${capName}Digits`;\n\n            if (typeof value === 'number') {\n                if (setMin) {\n                    me[min] = value;\n                }\n\n                if (setMax) {\n                    me[max] = value;\n                }\n            }\n            else {\n                me[min] = value[0];\n                me[max] = value[1];\n            }\n        }\n    }\n}\n\nNumberFormat.Parser = NumberParser;\n\nObject.assign(NumberFormat.prototype, {\n    // This object holds only those properties that Intl.NumberFormat accepts in its\n    // \"options\" parameter. Only these options will be copied from the NumberFormat\n    // and passed to the Intl.NumberFormat constructor and only these will be copied\n    // back from its resolvedOptions:\n    defaults : {\n        /**\n         * The formatting style.\n         *\n         * Valid values are: `'decimal'` (the default), `'currency'`, and `'percent'`.\n         * @config {'decimal'|'currency'|'percent'}\n         * @default\n         */\n        style : 'decimal',\n\n        /**\n         * The currency to use when using `style: 'currency'`. For example, `'USD'` (US dollar)\n         * or `'EUR'` for the euro.\n         *\n         * If not provided, the {@link Core.localization.LocaleManager} default will be used.\n         * @config {Boolean}\n         */\n        currency : null,\n\n        /**\n         * The format in which to display the currency value when using `style: 'currency'`.\n         *\n         * Valid values are: `'symbol'` (the default), `'code'`, and `'name'`.\n         * @config {'symbol'|'code'|'name'}\n         * @default\n         */\n        currencyDisplay : 'symbol',\n\n        /**\n         * The name of the locale. For example, `'en-US'`. This config is the same as the\n         * first argument to the `Intl.NumberFormat` constructor.\n         *\n         * Defaults to the browser's default locale.\n         * @config {String}\n         */\n        locale : null,\n\n        /**\n         * The maximum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        maximumFractionDigits : null,\n\n        /**\n         * The minimum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        minimumFractionDigits : null,\n\n        /**\n         * The minimum number of digits preceding the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-integer} config.\n         * @config {Number}\n         */\n        minimumIntegerDigits : null,\n\n        /**\n         * The maximum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        maximumSignificantDigits : null,\n\n        /**\n         * The minimum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        minimumSignificantDigits : null,\n\n        /**\n         * Specify `false` to disable thousands separators.\n         * @config {Boolean}\n         * @default\n         */\n        useGrouping : true\n    },\n\n    /**\n     * Specifies the `minimumFractionDigits` and `minimumFractionDigits` in a compact\n     * way. If this value is a `Number`, it sets both the minimum and maximum to that\n     * value. If this value is an array, `[0]` sets the minimum and `[1]` sets the\n     * maximum.\n     * @config {Number|Number[]}\n     */\n    fraction : null,\n\n    from : null,\n\n    /**\n     * An alias for `minimumIntegerDigits`.\n     * @config {Number}\n     */\n    integer : null,\n\n    /**\n     * Specifies the `minimumSignificantDigits` and `minimumSignificantDigits` in a compact\n     * format. If this value is a `Number`, it sets only the maximum to that value. If this\n     * value is an array, `[0]` sets the minimum and `[1]` sets the maximum.\n     *\n     * If this value (or `minimumSignificantDigits` or `minimumSignificantDigits`) is set,\n     * `integer` (and `minimumIntegerDigits`) and `fraction` (and `minimumFractionDigits`\n     * and `minimumFractionDigits`) are ignored.\n     *\n     * @config {Number|Number[]}\n     */\n    significant : null,\n\n    /**\n     * A format template consisting of the following parts:\n     *```\n     *  [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n     *```\n     * If the template begins with a `'$'`, the formatter's `style` option is set to\n     * `'currency'`. If the template ends with `'%'`, `style` is set to `'percent'`.\n     * It is invalid to include both characters. When using `'$'`, the `currency` symbol\n     * defaults to what is provided by the {@link Core.localization.LocaleManager}.\n     *\n     * To set the `minimumIntegerDigits`, the desired minimum comes before the first\n     * digits in the template and is followed by a `'>'` (greater-than). For example:\n     *```\n     *  5>9,999.00\n     *```\n     * The above sets `minimumIntegerDigits` to 5.\n     *\n     * The `useGrouping` option is enabled if there is a `','` (comma) present and is\n     * disabled otherwise.\n     *\n     * If there is a `'.'` (decimal) present, it may be followed by either of:\n     *\n     *  - Zero or more digits which may then be followed by zero or more `'#'` characters.\n     *    The number of digits determines the `minimumFractionDigits`, while the total\n     *    number of digits and `'#'`s determines the `maximumFractionDigits`.\n     *  - A single `'*'` (asterisk) indicating any number of fractional digits (no minimum\n     *    or maximum).\n     *\n     * @config {String}\n     */\n    template : null\n});\n\nObject.assign(NumberFormat.prototype, NumberFormat.prototype.defaults);\n\n// <remove-on-release>\n// TODO: is this the \"right\" way to do this?\n// </remove-on-release>\nFormatter.number = (format, value) => NumberFormat.format(format, value);\n", "import Base from '../Base.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Events from './Events.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n\n/**\n * @module Core/mixin/Clipboardable\n */\n\n/**\n * This class is used internally in Clipboardable to create a shared clipboard that can be used from multiple instances\n * of different widgets.\n *\n * Can read and write to native Clipboard API if allowed, but always holds a local `clipboard` as a fallback.\n * @extends Core/Base\n * @private\n * @mixes Events\n */\nclass Clipboard extends Base.mixin(Events) {\n\n    // Defaults to true, so to set this lazy on first read/write\n    hasNativeAccess = true;\n    _content = null;\n\n    /**\n     * Write to the native Clipboard API or a local clipboard as a fallback.\n     * @param text Only allows string values\n     * @param allowNative `true` will try writing to the Clipboard API once\n     * @private\n     */\n    async writeText(text, allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                await navigator.clipboard.writeText(text);\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        if (_content !== text) {\n            // Always writes to local clipboard\n            me._content = text;\n            me.triggerContentChange(_content, false, true);\n        }\n    }\n\n    /**\n     * Reads from the native Clipboard API or a local clipboard as a fallback.\n     * @param allowNative `true` will try reading from the Clipboard API once\n     * @private\n     */\n    async readText(allowNative) {\n        const\n            me           = this,\n            { _content } = me;\n\n        if (allowNative && me.hasNativeAccess) {\n            try {\n                const text = await navigator.clipboard.readText();\n\n                if (_content !== text) {\n                    me._content = text;\n                    me.triggerContentChange(_content, true);\n                }\n                return text;\n            }\n            catch (e) {\n                me.hasNativeAccess = false;\n            }\n        }\n        return _content;\n    }\n\n    /**\n     * Call this to let other instances know that data has been pasted\n     * @param source\n     */\n    triggerPaste(source) {\n        this.trigger('paste', { source, text : this._content });\n    }\n\n    triggerContentChange(oldText, fromRead = false, fromWrite = false) {\n        this.trigger('contentChange', { fromRead, fromWrite, oldText, newText : this._content });\n    }\n\n    async clear(allowNative) {\n        await this.writeText('', allowNative);\n    }\n\n}\n\n/**\n * Mixin for handling clipboard data.\n * @mixin\n */\nexport default Target => class Clipboardable extends (Target || Base) {\n\n    static $name = 'Clipboardable';\n\n    static configurable = {\n\n        /**\n         * Set this to `true` to use native Clipboard API if it is available\n         * @config {Boolean}\n         * @default\n         * @private\n         */\n        useNativeClipboard : false\n    };\n\n    construct(...args) {\n        super.construct(...args);\n\n        if (!globalThis.bryntum.clipboard) {\n            globalThis.bryntum.clipboard = new Clipboard();\n        }\n\n        globalThis.bryntum.clipboard.ion({\n            paste         : 'onClipboardPaste',\n            contentChange : 'onClipboardContentChange',\n            thisObj       : this\n        });\n    }\n\n    /**\n     * Gets the current shared Clipboard instance\n     * @private\n     */\n    get clipboard() {\n        return globalThis.bryntum.clipboard;\n    }\n\n    // Called when someone triggers a paste event on the shared Clipboard\n    onClipboardPaste({ text, source }) {\n        const\n            me                       = this,\n            { clipboardText, isCut } = me,\n            isOwn                    = me.compareClipboardText(clipboardText, text);\n\n        // If \"my\" data has been pasted somewhere\n        if (isOwn && isCut) {\n            // Hook to be able to handle data that has been cut out. Remove for example.\n            me.handleCutData?.({ text, source });\n            me.isCut = false;\n            me.cutData = null;\n        }\n        // If any data other data has been pasted, clear \"my\" clipboard\n        else if (!isOwn) {\n            me.clearClipboard(false);\n        }\n    }\n\n    // Calls when the shared clipboard writes or reads a new string value\n    onClipboardContentChange({ newText }) {\n        // If clipboard has new data, clear \"my\" clipboard\n        if (!this.compareClipboardText(this.clipboardText, newText)) {\n            this.clearClipboard(false);\n        }\n    }\n\n    // When a cut is done, or a cut is deactivated\n    set cutData(data) {\n        const me = this;\n\n        // Call hook for each current item in data\n        me._cutData?.forEach(r => me.setIsCut(r, false));\n        // Set and call again for new data\n        me._cutData = ArrayHelper.asArray(data);\n        me._cutData?.forEach(r => me.setIsCut(r, true));\n    }\n\n    get cutData() {\n        return this._cutData;\n    }\n\n    setIsCut() {}\n\n    /**\n     * Writes string data to the shared/native clipboard. Also saves a local copy of the string and the unconverted\n     * data.\n     *\n     * But firstly, it will call beforeCopy function and wait for a response. If false, the copy will be prevented.\n     *\n     * @param data\n     * @param isCut\n     * @param params Will be passed to beforeCopy function\n     * @returns {String} String data that was written to the clipboard\n     * @private\n     */\n    async writeToClipboard(data, isCut, params = {}) {\n        // Hook to be able to send event for example\n        if (await this.beforeCopy({ data, isCut, ...params }) === false) {\n            return;\n        }\n\n        const\n            me         = this,\n            isString   = typeof data === 'string',\n            stringData = isString\n                // If data is string, use that\n                ? data\n                // If not, and there is a stringConverter, use that. Otherwise, just encode it as JSON\n                : (me.stringConverter ? me.stringConverter(data) : StringHelper.safeJsonStringify(data));\n\n        // This must be before calling the clipboard, as to be able to ignore this change in onClipboardContentChange\n        me.clipboardText = stringData;\n\n        await me.clipboard.writeText(stringData, me.useNativeClipboard);\n\n        // Saves a local copy of the original data\n        me.clipboardData = data;\n        me.isCut = isCut;\n        // Saves a local copy of cut out original data\n        me.cutData = isCut && !isString ? data : null;\n\n        return stringData;\n    }\n\n    /**\n     * Reads string data from the shared/native clipboard. If string matches current instance local clipboard data, a\n     * non-modified version will be return. Otherwise, a stringParser function will be called.\n     *\n     * But firstly, it will call beforePaste function and wait for a response. If false, the paste will be prevented.\n     *\n     * This function will also trigger a paste event on the clipboard instance.\n     *\n     * @param params Will be passed to beforePaste function\n     * @param skipPasteTrigger Set to `true` not trigger a paste when paste completes\n     * @returns {Object}\n     * @private\n     */\n    async readFromClipboard(params = {}, skipPasteTrigger = false) {\n        const\n            me              = this,\n            { clipboard }   = me,\n            text            = await clipboard.readText(me.useNativeClipboard),\n            { isOwn, data } = me.transformClipboardText(text),\n            isCut           = text && isOwn && me.isCut;\n\n        if (data == null || (Array.isArray(data) && data.length == 0) ||\n            // Hook to trigger event or something like that\n            await me.beforePaste?.({ data, text, ...params, isCut }) === false\n        ) {\n            return;\n        }\n\n        if (!isOwn) {\n            // If we got something from outside, clear our internal data\n            me.clearClipboard(false);\n        }\n\n        // Trigger a paste event on the shared clipboard, for other instances to listen to\n        skipPasteTrigger || clipboard.triggerPaste(me);\n\n        return data;\n\n    }\n\n    /**\n     * Clears the clipboard data\n     * @privateparam clearShared Set to `false` not to clear the internally shared and native clipboard\n     * @category Common\n     */\n    async clearClipboard(clearShared = true) {\n        const me = this;\n\n        me.clipboardData = me.clipboardText = me.cutData = null;\n        me.isCut = false;\n\n        if (clearShared) {\n            await me.clipboard.clear(me.useNativeClipboard);\n        }\n    }\n\n    compareClipboardText(a, b) {\n        const regex = /\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/g;\n        return a?.replace(regex, '\\n') === b?.replace(regex, '\\n');\n    }\n\n    /**\n     * Takes a clipboard text and returns an object with an `isOwn` property and the parsed `data`\n     * @param text The text string that was read from the clipboard\n     * @returns Object\n     * @private\n     */\n    transformClipboardText(text) {\n        const\n            me    = this,\n            isOwn = me.compareClipboardText(me.clipboardText, text), // Does the clipboard content originate from this instance\n            // Read from original data if isOwn, otherwise use the stringParser if it exists.\n            data  = isOwn ? me.clipboardData : (me.stringParser && text ? me.stringParser(text) : text);\n\n        return {\n            isOwn,\n            data\n        };\n    }\n\n    /**\n     * Checks local clipboard if there is clipboard data present. If native clipboard API is available, this function\n     * will return `undefined`\n     * @returns Object\n     * @private\n     */\n    hasClipboardData() {\n        const\n            { clipboard } = this,\n            { _content }  = clipboard;\n\n        if (this.useNativeClipboard && clipboard.hasNativeAccess) {\n            // In this case, we have no clue what's inside the clipboard\n            return;\n        }\n\n        return Boolean(_content && this.transformClipboardText(_content).data);\n    }\n\n};\n", "import Base from '../Base.js';\nimport DayTime from './DayTime.js';\nimport Events from '../mixin/Events.js';\nimport DH from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/util/Month\n */\n\n/**\n * A class which encapsulates a calendar view of a month, and offers information about\n * the weeks and days within that calendar view.\n *\n * ```javascript\n *   // December 2018 using Monday as week start\n *   const m = new Month({\n *       date         : '2018-12-01',\n *       weekStartDay : 1\n *   });\n *\n *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n * ```\n */\nexport default class Month  extends Events(Base) {\n\n    static $name = 'Month';\n\n    static get configurable() {\n        return {\n            /**\n             * The date which the month should encapsulate. May be a `Date` object, or a\n             * `YYYY-MM-DD` format string.\n             *\n             * Mutating a passed `Date` after initializing a `Month` object has no effect on\n             * the `Month` object.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : DH.clearTime(new Date())\n            },\n\n            month : null,\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to have the visibleDayColumnIndex and visibleColumnCount properties\n             * respect the configured {@link #config-nonWorkingDays}.\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<String,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * Configure as `true` to always have the month encapsulate six weeks.\n             * This is useful for UIs which must be a fixed height.\n             * @prp {Boolean}\n             */\n            sixWeeks : null\n        };\n    }\n\n    //region events\n\n    /**\n     * Fired when setting the {@link #config-date} property causes the encapsulated date to change\n     * in **any** way, date, week, month or year.\n     * @event dateChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of week. Note that\n     * weeks are calculated in the ISO standard form such that if there are fewer than four\n     * days in the first week of a year, then that week is owned by the previous year.\n     *\n     * The {@link #config-weekStartDay} is honoured when making this calculation and this is a\n     * locale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\n     * locales and 0 (Sunday) in the provided US English locale.\n     * @event weekChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of month. This\n     * will fire when changing to the same month in a different year.\n     * @event monthChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of year.\n     * @event yearChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    //endRegion\n\n    /**\n     * For use when this Month's `weekStartDay` is non-zero.\n     *\n     * An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\n     * used by the Javascript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n     * @member {Number[]} canonicalDayNumbers\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a *visible* column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, and non working days as\n     * Wednesday, and `hideNonWorkingDays : true`, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 5, 0, 1, undefined, 2, 3, 4]`\n     * @member {Number[]} visibleDayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a 0-6 column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | We | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 6, 0, 1, 2, 3, 4, 5]`\n     * @member {Number[]} dayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * The number of visible days in the week as defined by the `nonWorkingDays` and\n     * `hideNonWorkingDays` options.\n     * @member {Number} weekLength\n     * @readonly\n     */\n\n    configure(config) {\n        super.configure(config);\n\n        this.updateDayNumbers();\n\n        // The set is rejected during configuration because everything else has to be set up.\n        if (config.date) {\n            this.date = config.date;\n        }\n        this.generation = 0;\n    }\n\n    changeDate(date) {\n        // Date has to be set after we know everything else\n        if (this.isConfiguring) {\n            return;\n        }\n\n        date = typeof date === 'string' ? DH.parse(date, 'YYYY-MM-DD') : new Date(date);\n\n        if (isNaN(date)) {\n            throw new Error('Month date ingestion must be passed a Date, or a valid YYYY-MM-DD date string');\n        }\n\n        return date;\n    }\n\n    updateDate(newDate, oldDate) {\n        const\n            me            = this,\n            {\n                dayColumnIndex,\n                weekCount\n            }             = me,\n            monthStart    = DH.getFirstDateOfMonth(newDate),\n            monthEnd      = DH.getLastDateOfMonth(monthStart),\n            startWeekDay  = dayColumnIndex[monthStart.getDay()],\n            endWeekDay    = dayColumnIndex[monthEnd.getDay()],\n            yearChanged   = !oldDate || (newDate.getFullYear() !== oldDate.getFullYear()),\n            monthChanged  = !oldDate || (newDate.getMonth() !== oldDate.getMonth()),\n            // Collect changes as bitwise flags if we have any listeners:\n            // 0001 = date has changed.\n            // 0010 = week has changed.\n            // 0100 = month has changed.\n            // 1000 = year has changed.\n            // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n            // and a monthChange in addition to the yearChange.\n            // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n            changes = me.eventListeners && (oldDate ? (newDate.getDate() !== oldDate.getDate()) |\n            (me.getWeekId(newDate) !== me.getWeekId(oldDate)) << 1 |\n            monthChanged << 2 |\n            yearChanged << 3 : 15);\n\n        // Keep our properties in sync with reality.\n        // Access the private properties directly to avoid recursion.\n        me._year = newDate.getFullYear();\n        me._month = newDate.getMonth();\n\n        // These comments assume ISO standard of Monday as week start day.\n        //\n        // This is the date of month that is the beginning of the first week row.\n        // So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first\n        // cell on the calendar which is the -4th of December. Note that the 0th\n        // of December was 31st of November, so needs -4 to get back to the 26th.\n        me.startDayOfMonth = 1 - startWeekDay;\n\n        // This is the date of month that is the end of the last week row.\n        // So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last\n        // cell on the calendar which is the 37th of December.\n        me.endDayOfMonth = monthEnd.getDate() + (6 - endWeekDay);\n\n        if (me.sixWeeks) {\n            me.endDayOfMonth += (6 - me.weekCount) * 7;\n        }\n\n        // Calculate the start point of where we calculate weeks from if we need to.\n        // It's either the first \"weekStartDay\" in this year if this year's\n        // first week is last year's, and so should work out as zero,\n        // or the \"weekStartDay\" of the week before, so that dates in the first week\n        // the Math.floor(DH.diff(weekBase, date, 'day') / 7) calculates as 1.\n        if (!me.weekBase || yearChanged) {\n            me.calculateWeekBase();\n        }\n\n        // Allow calling code to detect whether a set date operation resulted in a change\n        // of month.\n        if (monthChanged || yearChanged) {\n            me.generation++;\n        }\n\n        if (changes) {\n            const event = {\n                newDate,\n                oldDate,\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : me.weekCount !== weekCount\n                }\n            };\n\n            // If either date, month or year changes, we fire a dateChange\n            me.trigger('dateChange', event);\n\n            // If the week has changed, fire a weekChange\n            if (changes & 2) {\n                me.trigger('weekChange', event);\n            }\n\n            // If month or year changed, we fire a monthChange\n            if (changes & 12) {\n                me.trigger('monthChange', event);\n            }\n\n            // If the year has changed, fire a yearChange\n            if (changes & 8) {\n                me.trigger('yearChange', event);\n            }\n        }\n    }\n\n    calculateWeekBase() {\n        const\n            me      = this,\n            {\n                dayColumnIndex\n            }       = me,\n            jan1    = new Date(me.year, 0, 1),\n            dec31   = new Date(me.year, 11, 31),\n            january = me.month ? me.getOtherMonth(jan1) : me;\n\n        // First 7 days are in last week of previous year if the year\n        // starts after our 4th day of week.\n        if (me.dayColumnIndex[jan1.getDay()] > 3) {\n            // Week base is calculated from the year start\n            me.weekBase = january.startDate;\n        }\n        // First 7 days are in week 1 of this year\n        else {\n            // Week base is the start of week before\n            me.weekBase = new Date(me.year, 0, january.startDayOfMonth - 7);\n        }\n\n        const dec31Week = Math.floor(DH.diff(me.weekBase, dec31, 'day') / 7);\n\n        // Our year only has a 53rd week if 53rd week ends after our week's 3rd day\n        me.has53weeks = dec31Week === 53 && dayColumnIndex[dec31.getDay()] > 2;\n    }\n\n    /**\n     * Returns the week start date, based on the configured {@link #config-weekStartDay} of the\n     * passed week.\n     * @param {Number| Number[]} week The week number in the current year, or an array containing\n     * `[year, weekOfYear]` for any year.\n     *\n     * Week numbers greater than the number of weeks in the year just wrap into the following year.\n     */\n    getWeekStart(week) {\n        // Week number n of current year\n        if (typeof week === 'number') {\n            return DH.add(this.weekBase, Math.max(week, 1) * 7, 'day');\n        }\n\n        // Week n of year nnnn\n        const\n            me = this,\n            [year, weekOfYear] = week;\n\n        // nnnn is our year, so we know it\n        if (year === me.year) {\n            return me.getWeekStart(weekOfYear);\n        }\n\n        return me.getOtherMonth(new Date(year, 0, 1)).getWeekStart(weekOfYear);\n    }\n\n    getOtherMonth(date) {\n        const\n            me     = this,\n            result = (me === otherMonth) ? new Month(null) : otherMonth;\n\n        result.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : new Date(date.getFullYear(), 0, 1) // Make it easy to calculate its own weekBase\n        });\n\n        result.date = date;\n\n        // in this case, the date config ignores changes w/=== getTime so we have to force the update because we\n        // also cleared weekBase above\n        result.updateDate(result.date, result.date);\n\n        return result;\n    }\n\n    changeYear(year) {\n        const newDate = new Date(this.date);\n\n        newDate.setFullYear(year);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    changeMonth(month) {\n        const newDate = new Date(this.date);\n\n        newDate.setMonth(month);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay() {\n        const me = this;\n\n        me.updateDayNumbers();\n\n        if (!me.isConfiguring && me.date) {\n            me.weekBase = null;  // force a calculateWeekBase\n            me.updateDate(me.date, me.date);\n        }\n        // else date will be set soon and weekBase is null so calculateWeekBase will be called by updateDate\n    }\n\n    get nonWorkingDays() {\n        return this._nonWorkingDays || DH.nonWorkingDays;\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateHideNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateSixWeeks() {\n        if (!this.isConfiguring) {\n            this.updateDate(this.date, this.date);\n        }\n    }\n\n    /**\n     * The number of days in the calendar for this month. This will always be\n     * a multiple of 7, because this represents the number of calendar cells\n     * occupied by this month.\n     * @property {Number}\n     * @readonly\n     */\n    get dayCount() {\n        // So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018\n        // to Sun 6th Jan (37th Dec) 2019\n        return (this.endDayOfMonth + 1) - this.startDayOfMonth;\n    }\n\n    /**\n     * The number of weeks in the calendar for this month.\n     * @property {Number}\n     * @readonly\n     */\n    get weekCount() {\n        return this.dayCount / 7;\n    }\n\n    /**\n     * The date of the first cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.startDayOfMonth);\n        }\n    }\n\n    /**\n     * The date of the last cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.endDayOfMonth);\n        }\n    }\n\n    /**\n     * Iterates through all calendar cells in this month, calling the passed function for each date.\n     * @param {Function} fn The function to call.\n     * @param {Date} fn.date The date for the cell.\n     */\n    eachDay(fn) {\n        for (let dayOfMonth = this.startDayOfMonth; dayOfMonth <= this.endDayOfMonth; dayOfMonth++) {\n            fn(new Date(this.year, this.month, dayOfMonth));\n        }\n    }\n\n    /**\n     * Iterates through all weeks in this month, calling the passed function\n     * for each week.\n     * @param {Function} fn The function to call.\n     * @param {Number[]} fn.week An array containing `[year, weekNumber]`\n     * @param {Date[]} fn.dates The dates for the week.\n     */\n    eachWeek(fn) {\n        const me = this,\n            { weekCount } = me;\n\n        for (let dayOfMonth = me.startDayOfMonth, week = 0; week < weekCount; week++) {\n            const weekDates  = [],\n                weekOfYear = me.getWeekNumber(new Date(me.year, me.month, dayOfMonth));\n\n            for (let day = 0; day < 7; day++, dayOfMonth++) {\n                weekDates.push(new Date(me.year, me.month, dayOfMonth));\n            }\n            fn(weekOfYear, weekDates);\n        }\n    }\n\n    /**\n     * Returns the week of the year for the passed date. This returns an array containing *two* values,\n     * the year **and** the week number are returned.\n     *\n     * The week number is calculated according to ISO rules, meaning that if the first week of the year\n     * contains less than four days, it is considered to be the last week of the preceding year.\n     *\n     * The configured {@link #config-weekStartDay} is honoured in this calculation. So if the weekStartDay\n     * is **NOT** the ISO standard of `1`, (Monday), then the weeks do not coincide with ISO weeks.\n     * @param {Date} date The date to calculate the week for.\n     * @returns {Number[]} A numeric array: `[year, week]`\n     */\n    getWeekNumber(date) {\n        const me = this;\n\n        date = DH.clearTime(date);\n\n        // If it's a date in another year, use our otherMonth to find the answer.\n        if (date.getFullYear() !== me.year) {\n            return me.getOtherMonth(new Date(date.getFullYear(), 0, 1)).getWeekNumber(date);\n        }\n\n        let weekNo = Math.floor(DH.diff(me.weekBase, date, 'day') / 7),\n            year = date.getFullYear();\n\n        // No week 0. It's the last week of last year\n        if (!weekNo) {\n            // Week is the week of last year's 31st Dec\n            return me.getOtherMonth(new Date(me.year - 1, 0, 1)).getWeekNumber(new Date(me.year, 0, 0));\n        }\n        // Only week 53 if year ends before our week's 5th day\n        else if (weekNo === 53 && !me.has53weeks) {\n            weekNo = 1;\n            year++;\n        }\n        // 54 wraps round to 2 of next year\n        else if (weekNo > 53) {\n            weekNo = weekNo % 52;\n        }\n\n        // Return array of year and week number\n        return [year, weekNo];\n    }\n\n    getWeekId(date) {\n        const week = this.getWeekNumber(date);\n\n        return week[0] * 100 + week[1];\n    }\n\n    getCellData(date, ownerMonth, dayTime = DayTime.MIDNIGHT) {\n        const\n            me                 = this,\n            day                = date.getDay(),\n            visibleColumnIndex = me.visibleDayColumnIndex[day],\n            isNonWorking       = me.nonWorkingDays[day],\n            isHiddenDay        = me.hideNonWorkingDays && isNonWorking;\n\n        // Automatically move to required month\n        if (date < me.startDate || date > me.endDate) {\n            me.month = date.getMonth();\n        }\n\n        return  {\n            day,\n            dayTime,\n            visibleColumnIndex,\n            isNonWorking,\n            week        : me.getOtherMonth(date).getWeekNumber(date),\n            key         : DH.format(date, 'YYYY-MM-DD'),\n            columnIndex : me.dayColumnIndex[day],\n            date        : new Date(date),\n            dayEnd      : dayTime.duration('s'),\n            tomorrow    : dayTime.dayOfDate(DH.add(date, 1, 'day')),\n\n            // These two properties are only significant when used by a CalendarPanel which encapsulates\n            // a single month.\n            isOtherMonth : Math.sign((date.getMonth() + date.getFullYear() * 12) - (ownerMonth.month + ownerMonth.year * 12)),\n            visible      : !isHiddenDay && (date >= ownerMonth.startDate && date < DH.add(ownerMonth.endDate, 1, 'day')),\n            isRowStart   : visibleColumnIndex === 0,\n            isRowEnd     : visibleColumnIndex === me.visibleColumnCount - 1\n        };\n    }\n\n    updateDayNumbers() {\n        const\n            me                    = this,\n            {\n                weekStartDay,\n                nonWorkingDays,\n                hideNonWorkingDays\n            }                     = me,\n            dayColumnIndex        = me.dayColumnIndex = [],\n            canonicalDayNumbers   = me.canonicalDayNumbers = [],\n            visibleDayColumnIndex = me.visibleDayColumnIndex = [];\n\n        // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n        // have mapping of internal day number to canonical day number (as used by Date class)\n        // and to abbreviated day name like this:\n        // canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number\n        //\n        // Also, we need a map from canonical day number to *visible* cell index.\n        // for example, if we have weekStartDay as Monday which is 1, and non working days as\n        // Wednesday, and hideNonWorkingDays:true, then the calendar would look like\n        // +----+----+----+----+----+----+\n        // | Mo | Tu | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 5, 0, 1, undefined, 2, 3, 4]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      4 : 2,\n        //      5 : 3,\n        //      6 : 4,\n        //      0 : 5\n        // }\n        // To be able to ascertain the cell index directly from the canonical day number.\n        //\n        // We also need a logical column map which would be\n        // +----+----+----+----+----+----+----+\n        // | Mo | Tu | We | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 6, 0, 1, 2, 3, 4, 5]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      3 : 2\n        //      4 : 3,\n        //      5 : 4,\n        //      6 : 5,\n        //      0 : 6\n        // }\n\n        // We use this to cache the number of visible columns so that cell renderers can tell whether\n        // they are on the last visible column.\n        let visibleColumnIndex = 0;\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const canonicalDay = (weekStartDay + columnIndex) % 7;\n\n            canonicalDayNumbers[columnIndex] = canonicalDay;\n            dayColumnIndex[canonicalDay] = columnIndex;\n\n            // If this day is going to have visible representation, we need to\n            // map it to a columnIndex;\n            if (!hideNonWorkingDays || !nonWorkingDays[canonicalDay]) {\n                visibleDayColumnIndex[canonicalDay] = visibleColumnIndex++;\n            }\n        }\n        me.visibleColumnCount = visibleColumnIndex;\n        me.weekLength = hideNonWorkingDays ? 7 - ObjectHelper.keys(nonWorkingDays).length : 7;\n    }\n}\n\n// Instance needed for internal tasks\nconst otherMonth = new Month(null);\n", "import Container from './Container.js';\nimport Rotatable from './mixin/Rotatable.js';\n\nimport './Button.js';\n\n/**\n * @module Core/widget/ButtonGroup\n */\n\n/**\n * A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them\n * stick together.\n *\n * Trying to add other widgets than buttons will throw an exception.\n *\n * ```javascript\n * new ButtonGroup({\n *     items : [\n *         { icon : 'b-fa b-fa-kiwi-bird' },\n *         { icon : 'b-fa b-fa-kiwi-otter' },\n *         { icon : 'b-fa b-fa-kiwi-rabbit' },\n *         ...\n *     ]\n * });\n * ```\n *\n * @inlineexample Core/widget/ButtonGroup.js\n * @classType buttonGroup\n * @extends Core/widget/Container\n * @widget\n */\nexport default class ButtonGroup extends Container.mixin(Rotatable) {\n\n    /**\n     * Fires when a button in the group is clicked\n     * @event click\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n\n    /**\n     * Fires when the default action is performed on a button in the group (the button is clicked)\n     * @event action\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n\n    /**\n     * Fires when a button in the group is toggled (the {@link Core.widget.Button#property-pressed} state is changed).\n     * If you need to process the pressed button only, consider using {@link #event-click} event or {@link #event-action} event.\n     * @event toggle\n     * @param {Core.widget.Button} source Toggled button\n     * @param {Boolean} pressed New pressed state\n     * @param {Event} event DOM event\n     */\n\n    static $name = 'ButtonGroup';\n\n    static type = 'buttongroup';\n\n    static configurable = {\n        defaultType : 'button',\n\n        /**\n         * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\n         * will look nicer if you also set that cls on the group.\n         *\n         * ```\n         * new ButtonGroup({\n         *   cls : 'b-raised,\n         *   items : [\n         *       { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },\n         *       ...\n         *   ]\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category CSS\n         */\n        cls : null,\n\n        /**\n         * An array of Buttons or typed Button config objects.\n         * @config {ButtonConfig[]|Core.widget.Button[]}\n         */\n        items : null,\n\n        /**\n         * Default color to apply to all contained buttons, see {@link Core.widget.Button#config-color Button#color}.\n         * Individual buttons can override the default.\n         * @config {String}\n         */\n        color : null,\n\n        /**\n         * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\n         * buttons {@link Core.widget.Button#config-toggleGroup toggleGroup config}. Individual buttons can\n         * override the default.\n         * @config {Boolean}\n         */\n        toggleGroup : null,\n\n        valueSeparator : ',',\n\n        columns : null,\n\n        hideWhenEmpty : true,\n\n        defaultBindProperty : 'value'\n    };\n\n    onChildAdd(item) {\n        super.onChildAdd(item);\n\n        item.ion({\n            click   : 'resetValueCache',\n            toggle  : 'onItemToggle',\n            thisObj : this,\n            // This needs to run before the 'click' event is relayed by this button group, in such listener\n            // the `value` must already be updated\n            prio    : 10000\n        });\n    }\n\n    onChildRemove(item) {\n        item.un({\n            toggle  : 'resetValueCache',\n            click   : 'resetValueCache',\n            thisObj : this\n        });\n        super.onChildRemove(item);\n    }\n\n    onItemToggle(event) {\n        const me = this;\n\n        me.resetValueCache();\n\n        if (!me.isSettingValue && (!me.toggleGroup || event.pressed)) {\n            me.triggerFieldChange({ value : me.value, userAction : true, event });\n        }\n    }\n\n    resetValueCache() {\n        // reset cached value to revalidate next time it's requested\n        this._value = null;\n    }\n\n    createWidget(widget) {\n        const\n            me   = this,\n            type = me.constructor.resolveType(widget.type || 'button');\n\n        if (type.isButton) {\n            if (me.color && !widget.color) {\n                widget.color = me.color;\n            }\n\n            if (me.toggleGroup && !widget.toggleGroup) {\n                if (typeof me.toggleGroup === 'boolean') {\n                    me.toggleGroup = ButtonGroup.generateId('toggleGroup');\n                }\n\n                widget.toggleGroup = me.toggleGroup;\n            }\n        }\n\n        if (me.columns) {\n            widget.width = `${100 / me.columns}%`;\n        }\n\n        widget = super.createWidget(widget);\n\n        me.relayEvents(widget, ['click', 'action', 'toggle']);\n\n        return widget;\n    }\n\n    updateRotate(rotate) {\n        this.eachWidget(btn => {\n            if (btn.rotate !== false) {\n                btn.rotate = rotate;\n            }\n        });\n    }\n\n    get value() {\n        // if we don't have cached value\n        // let's calculate it based on item values\n        if (!this._value) {\n            const values = [];\n\n            // collect pressed item values\n            this.items.forEach(w => {\n                if (w.pressed && w.value !== undefined) {\n                    values.push(w.value);\n                }\n            });\n\n            // build a string\n            this._value = values.join(this.valueSeparator);\n        }\n\n        return this._value;\n    }\n\n    set value(value) {\n        const\n            me       = this,\n            oldValue = me.value;\n\n        if (!Array.isArray(value)) {\n            if (value === undefined || value === null) {\n                value = [];\n            }\n            else if (typeof value == 'string') {\n                value = value.split(me.valueSeparator);\n            }\n            else {\n                value = [value];\n            }\n        }\n\n        me._value = value.join(me.valueSeparator);\n\n        me.isSettingValue = true;\n\n        // Reflect value on items\n        me.items.forEach(w => {\n            if (w.value !== undefined) {\n                w.pressed = value.includes(w.value);\n            }\n        });\n\n        me.isSettingValue = false;\n\n        if (!me.isConfiguring && oldValue !== me.value) {\n            me.triggerFieldChange({ value : me.value, userAction : false });\n        }\n    }\n\n    updateDisabled(disabled) {\n        this.items.forEach(button => button.disabled = disabled || (!button.ignoreParentReadOnly && this.readOnly));\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n\n        this.updateDisabled(this.disabled);\n    }\n\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // if the buttons should be shown in rows\n        this.columns && classList.push('b-columned');\n        return classList;\n    }\n}\n\n// Register this widget type with its Factory\nButtonGroup.initClass();\n", "import Panel from './Panel.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport TimeZoneHelper from '../helper/TimeZoneHelper.js';\nimport Month from '../util/Month.js';\nimport Tooltip from './Tooltip.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/CalendarPanel\n */\n\n/**\n * A Panel which displays a month of date cells.\n *\n * This is a base class for UI widgets like {@link Core.widget.DatePicker} which need to display a calendar layout\n * and should not be used directly.\n * @extends Core/widget/Panel\n */\nexport default class CalendarPanel extends Panel {\n    static get $name() {\n        return 'CalendarPanel';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'calendarpanel';\n    }\n\n    static get configurable() {\n        return {\n            layout : 'vbox',\n\n            textContent : false,\n\n            /**\n             * Gets or sets the date that orientates the panel to display a particular month.\n             * Changing this causes the content to be refreshed.\n             * @member {Date} date\n             */\n            /**\n             * The date which this CalendarPanel encapsulates.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n\n            /**\n             * A {@link Core.util.Month} Month utility object which encapsulates this Panel's month\n             * and provides contextual information and navigation services.\n             * @config {Core.util.Month|MonthConfig}\n             */\n            month : {},\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to always show a six week calendar.\n             * @config {Boolean}\n             * @default\n             */\n            sixWeeks : true,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @deprecated Since 4.0.0. Use {@link #config-showWeekColumn} instead.\n             * @config {Boolean}\n             */\n            showWeekNumber : null,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @config {Boolean}\n             */\n            showWeekColumn : null,\n\n            /**\n             * Either an array of `Date` objects which are to be disabled, or\n             * a function (or the name of a function), which, when passed a `Date` returns `true` if the\n             * date is disabled.\n             * @config {Function|Date[]|String}\n             */\n            disabledDates : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day header element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range 0 to 6.\n             *  - weekDay [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The canonical day number where Monday is 0 and Sunday is.\n             * @config {Function|String}\n             */\n            headerRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - week [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) An array containing `[year, weekNumber]`.\n             * @config {Function|String}\n             */\n            weekRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day cell element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - date [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The date for the cell.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day for the cell (0 to 6 for Sunday to Saturday).\n             *  - rowIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The row index, 0 to month row count (6 if {@link #config-sixWeeks} is `true`).\n             *  _ row [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The row element encapsulating the week which the cell is a part of.\n             *  - cellIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The cell index in the whole panel. May be from 0 to up to 42.\n             *  - columnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The column index, 0 to 6.\n             *  - visibleColumnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The visible column index taking hidden non working days into account.\n             * @config {Function|String}\n             */\n            cellRenderer : null,\n\n            /**\n             * Configure as `true` to render weekends as {@link #config-disabledDates}.\n             * @config {Boolean}\n             */\n            disableWeekends : null,\n\n            hideNonWorkingDays : null,\n\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,\n             * and \"other month\" cells.\n             *\n             * It is the developer's responsibility to hook the `beforeshow` event to either veto the show by returning\n             * `false` or provide contextual content for the date.\n             *\n             * The tip instance will be primed with a `date` property.\n             * @config {TooltipConfig}\n             */\n            tip : null,\n\n            dayCellCls   : 'b-calendar-cell',\n            dayHeaderCls : 'b-calendar-day-header',\n\n            /**\n             * The class name to add to disabled calendar cells.\n             * @config {String}\n             * @private\n             */\n            disabledCls : 'b-disabled-date',\n\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n\n            /**\n             * The class name to add to calendar cells which are weekend dates.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n\n            /**\n             * The class name to add to the calendar cell which contains today's date.\n             * @config {String}\n             * @private\n             */\n            todayCls : 'b-today',\n\n            /**\n             * The class name to add to calendar cells which are {@link #config-nonWorkingDays}.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header row above the calendar cells.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * Set this config if the available height is too small, and the cell height needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             *\n             * May be specified as a number in which case it will be taken to mean pixels,\n             * or a length in standard CSS units.\n             * @config {Number|String}\n             */\n            minRowHeight : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * By default, day cells flex to share available Panel width equally.\n             *\n             * Set this config if the available width is too small, and the cell width needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `X` axis.\n             * @config {Number}\n             */\n            minColumnWidth : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * Configure this as true to disable pointer interaction with cells which are outside the\n             * range of the current month.\n             * @config {Boolean}\n             */\n            disableOtherMonthCells : null,\n\n            disableOtherMonthCellsCls : 'b-disable-othermonth-cells',\n\n            /**\n             * Configure this as `true` to hide cells which are outside the range of the current month.\n             * @config {Boolean}\n             */\n            hideOtherMonthCells : null,\n\n            hideOtherMonthCellsCls : 'b-hide-othermonth-cells',\n\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        if (!this.refreshCount) {\n            this.refresh();\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint?.(...arguments);\n\n        // Invoke the lazy configs when we first hit the visible DOM\n        if (firstPaint) {\n            // The cell structure must exist for the configs to apply to.\n            if (!this.refreshCount) {\n                this.refresh();\n            }\n            this.getConfig('minColumnWidth');\n            this.getConfig('minRowHeight');\n        }\n    }\n\n    get overflowElement() {\n        return this.weeksElement;\n    }\n\n    doDestroy() {\n        this.tip?.destroy();\n\n        super.doDestroy();\n    }\n\n    changeMinRowHeight(minRowHeight) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-row-height'), 10) || 75;\n\n        return isNaN(minRowHeight) ? minRowHeight : Math.max(parseInt(minRowHeight) || 0, minValue);\n    }\n\n    updateMinRowHeight(minRowHeight) {\n        this.weekElements.forEach(w => DomHelper.setLength(w, 'minHeight', minRowHeight));\n\n        this.scrollable = {\n            overflowY : minRowHeight ? 'auto' : false\n        };\n    }\n\n    changeMinColumnWidth(minColumnWidth) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-column-width'), 10) || 75;\n\n        return minColumnWidth == null ? minColumnWidth : Math.max(parseInt(minColumnWidth) || 0, minValue);\n    }\n\n    updateMinColumnWidth(minColumnWidth) {\n        const me = this;\n\n        me.weekdayCells.forEach(c => DomHelper.setLength(c, 'minWidth', minColumnWidth));\n        me.cellElements.forEach(c => c.matches(`.${me.dayCellCls}`) && DomHelper.setLength(c, 'minWidth', minColumnWidth));\n\n        me.scrollable = {\n            overflowX : minColumnWidth ? 'auto' : false\n        };\n        me.overflowElement.classList[minColumnWidth ? 'add' : 'remove']('b-min-columnwidth');\n    }\n\n    getDateFromDomEvent(domEvent) {\n        const element = (domEvent.nodeType === Element.ELEMENT_NODE ? domEvent : domEvent.target).closest(`#${this.id} [data-date]`);\n\n        if (element) {\n            return DateHelper.parseKey(element.dataset.date);\n        }\n    }\n\n    changeTip(tip, existingTip) {\n        const me = this;\n\n        return Tooltip.reconfigure(existingTip, tip, {\n            owner    : me,\n            defaults : {\n                type        : 'tooltip',\n                owner       : me,\n                id          : `${me.id}-cell-tip`,\n                forElement  : me.bodyElement,\n                forSelector : `.${me.dayCellCls}`\n            }\n        });\n    }\n\n    updateTip(tip) {\n        this.detachListeners('tip');\n\n        tip?.ion({\n            pointerOver : 'onTipOverCell',\n\n            name    : 'tip',\n            thisObj : this\n        });\n    }\n\n    updateElement(element, was) {\n        const me = this;\n\n        super.updateElement(element, was);\n\n        me.updateHideNonWorkingDays(me.hideNonWorkingDays);\n        me.weekdayCells = Array.from(element.querySelectorAll('.b-calendar-day-header'));\n        me.weekElements = Array.from(element.querySelectorAll('.b-calendar-week'));\n        me.weekDayElements = Array.from(element.querySelectorAll('.b-calendar-days'));\n        me.cellElements = [];\n\n        for (let i = 0, { length } = me.weekDayElements; i < length; i++) {\n            me.cellElements.push(me.weekDayElements[i].previousSibling, ...me.weekDayElements[i].children);\n        }\n    }\n\n    changeDate(date) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('CalendarPanel date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clearTime(date);\n    }\n\n    /**\n     * The date which this CalendarPanel encapsulates. Setting this causes the\n     * content to be refreshed.\n     * @property {Date}\n     */\n    updateDate(value) {\n        // We respond to Month change events to update the UI\n        this.month.date = value;\n    }\n\n    updateDayNameFormat() {\n        // 4th June 2000 was a Sunday\n        const d = new Date('2000-06-04T12:00:00');\n\n        this.shortDayNames = [];\n\n        // Collect local shortDayNames in default order.\n        for (let date = 4; date < 11; date++) {\n            d.setDate(date);\n            this.shortDayNames.push(DateHelper.format(d, this.dayNameFormat));\n        }\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DateHelper.weekStartDay;\n    }\n\n    /**\n     * Set to 0 for Sunday (the default), 1 for Monday etc.\n     *\n     * Set to `null` to use the default value from {@link Core/helper/DateHelper}.\n     */\n    updateWeekStartDay(weekStartDay) {\n        const me = this;\n\n        if (me._month) {\n            me.month.weekStartDay = weekStartDay;\n\n            me.dayNames = [];\n\n            // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n            // dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n            for (let i = 0; i < 7; i++) {\n                me.dayNames[i] = me.shortDayNames[me.canonicalDayNumbers[i]];\n            }\n\n            if (me.refreshCount) {\n                me.refresh();\n            }\n        }\n    }\n\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.contentElement.classList.toggle(this.hideNonWorkingDaysCls, Boolean(hideNonWorkingDays));\n        this.scrollable?.syncOverflowState();\n        if (this._month) {\n            this.month.hideNonWorkingDays = hideNonWorkingDays;\n        }\n        // First/last visible cell might change\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    updateHideOtherMonthCells(hideOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.hideOtherMonthCellsCls, Boolean(hideOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    updateDisableOtherMonthCells(disableOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.disableOtherMonthCellsCls, Boolean(disableOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    get nonWorkingDays() {\n        // If we were not configured with non working days, ask the locale for them. Once.\n        // The cached value is cleared on locale change.\n        return this._nonWorkingDays || (this._localeNonWorkingDays || (this._localeNonWorkingDays = DateHelper.nonWorkingDays));\n    }\n\n    get weekends() {\n        // Ask the DateHelper which days are weekend days only once.\n        // The cached value is cleared on locale change.\n        return this._localeWeekends || (this._localeWeekends = DateHelper.weekends);\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays(nonWorkingDays) {\n        if (this._month) {\n            this.month.nonWorkingDays = nonWorkingDays;\n            this.refresh();\n            this.scrollable?.syncOverflowState();\n        }\n    }\n\n    get visibleDayColumnIndex() {\n        return this.month.visibleDayColumnIndex;\n    }\n\n    get dayColumnIndex() {\n        return this.month.dayColumnIndex;\n    }\n\n    get canonicalDayNumbers() {\n        return this.month.canonicalDayNumbers;\n    }\n\n    get visibleColumnCount() {\n        return this.month.visibleColumnCount;\n    }\n\n    get weekLength() {\n        return this.month.weekLength;\n    }\n\n    /**\n     * The date of the first day cell in this panel.\n     * Note that this may *not* be the first of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        return this.month.startDate;\n    }\n\n    get duration() {\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return DateHelper.diff(this.month.startDate, this.month.endDate, 'day') + 1;\n    }\n\n    /**\n     * The end date of this view. Note that in terms of full days, this is exclusive,\n     * ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on the 8th.\n     *\n     * Note that this may *not* be the last date of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const { endDate } = this.month;\n\n        if (endDate) {\n            return DateHelper.add(endDate, 1, 'day');\n        }\n    }\n\n    changeMonth(month, currentMonth) {\n        const me = this;\n\n        if (!(month instanceof Month)) {\n\n            // Setting month to a number when we already have a Month means\n            // just updating the month number of our Month\n            if (typeof month === 'number') {\n                if (currentMonth) {\n                    currentMonth.month = month;\n                    return;\n                }\n                const date = me.date || DateHelper.clearTime(new Date());\n\n                date.setMonth(month);\n                month = {\n                    date\n                };\n            }\n            month = Month.new({\n                weekStartDay       : me.weekStartDay,\n                nonWorkingDays     : me.nonWorkingDays,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                sixWeeks           : me.sixWeeks\n            }, month);\n        }\n\n        month.ion({\n            dateChange : 'onMonthDateChange',\n            thisObj    : me\n        });\n\n        return month;\n    }\n\n    onMonthDateChange({ source : month, newDate, oldDate, changes }) {\n        const me = this;\n\n        // Ensure we're always in sync with the data our Month holds\n        me.year = month.year;\n\n        if (!me.isConfiguring) {\n            // Only refresh if we don't contain a cell for the new date\n            // or if, internally, the Month we are mapping to the UI is different.\n            if (!me.getCell(newDate) || (changes.m || changes.y)) {\n                // Interrogate DOM *before* mutating it with a refresh.\n                const { isVisible } = me;\n\n                me.refresh();\n\n                if (me.animateTimeShift && isVisible) {\n                    DomHelper.slideIn(me.contentElement, newDate > oldDate ? 1 : -1);\n                }\n            }\n\n            /**\n             * Fires when the date of this CalendarPanel is set.\n             * @event dateChange\n             * @param {Date} value The new date.\n             * @param {Date} oldValue The old date.\n             * @param {Object} changes An object which contains properties which indicate what part of the date changed.\n             * @param {Boolean} changes.d True if the date changed in any way.\n             * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n             * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n             * @param {Boolean} changes.y True if the year changed.\n             */\n            me.trigger('dateChange', {\n                changes,\n                value    : newDate,\n                oldValue : oldDate\n            });\n        }\n    }\n\n    updateYear(year) {\n        this.month.year = year;\n    }\n\n    updateShowWeekNumber(showWeekNumber) {\n        this.updateShowWeekColumn(showWeekNumber);\n    }\n\n    updateShowWeekColumn(showWeekColumn) {\n        const me = this;\n\n        me.element.classList[showWeekColumn ? 'add' : 'remove']('b-show-week-column');\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n\n    updateSixWeeks(sixWeeks) {\n        if (this.month) {\n            this.month.sixWeeks = sixWeeks;\n            this.refresh();\n        }\n    }\n\n    /**\n     * Refreshes the UI after changing a config that would affect the UI.\n     */\n    refresh() {\n        // This method may be overridden by subclasses to add things like refresh scheduling.\n        this.doRefresh();\n    }\n\n    /**\n     * Implementation of the UI refresh.\n     * @private\n     */\n    doRefresh() {\n        // Ensure sub elements are all present\n        this.getConfig('element');\n        const\n            me       = this,\n            timeZone = me.timeZone != null ? me.timeZone : me.project?.timeZone,\n            today    = timeZone != null ? TimeZoneHelper.toTimeZone(new Date(), timeZone) : new Date(),\n            {\n                weekElements,\n                weekDayElements,\n                date,\n                month,\n                dayCellCls,\n                dayHeaderCls,\n                disabledCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                nonWorkingDays,\n                canonicalDayNumbers,\n                sixWeeks\n            } = me;\n\n        today.setHours(0, 0, 0, 0);\n\n        // If we have not been initialized with a current date, use today\n        if (!date) {\n            me.date = today;\n            return;\n        }\n\n        /**\n         * Fires before this CalendarPanel refreshes in response to changes in its month.\n         * @event beforeRefresh\n         * @param {Core.widget.DatePicker} source This DatePicker.\n         */\n        me.trigger('beforeRefresh');\n\n        // Make sure we've calculated our shortDayNames\n        me.getConfig('dayNameFormat');\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const\n                cell          = me.weekdayCells[columnIndex],\n                cellDay       = me.canonicalDayNumbers[columnIndex],\n                cellClassList = {\n                    [dayHeaderCls]     : 1,\n                    [weekendCls]       : DateHelper.weekends[cellDay],\n                    [nonWorkingDayCls] : nonWorkingDays[cellDay]\n                };\n\n            if (me.headerRenderer) {\n                cell.innerHTML = '';\n                me.callback(me.headerRenderer, me, [cell, columnIndex, cellDay]);\n            }\n            else {\n                DomHelper.setInnerText(cell, me.shortDayNames[cellDay]);\n            }\n\n            // Sync day name cell classes with its calculated status\n            DomHelper.syncClassList(cell, cellClassList);\n\n            cell.dataset.columnIndex = columnIndex;\n            cell.dataset.cellDay = cellDay;\n        }\n\n        // Create cell content\n        let rowIndex = 0,\n            cellIndex = 0,\n            lastWorkingColumn = 6;\n\n        // Which column is the last working day so it can be tagged with an identifying class\n        for (let columnIndex = 6; columnIndex >= 0; columnIndex--) {\n            if (!nonWorkingDays[canonicalDayNumbers[columnIndex]]) {\n                lastWorkingColumn = columnIndex;\n                break;\n            }\n        }\n\n        // Hide or show the \"other month\" week row depending on our sixWeeks setting\n        weekElements[4].classList.toggle('b-hide-display', month.weekCount < 5 && !sixWeeks);\n        weekElements[5].classList.toggle('b-hide-display', month.weekCount < 6 && !sixWeeks);\n\n        month.eachWeek((week, dates) => {\n            const\n                weekDayElement = weekDayElements[rowIndex],\n                weekCells = [weekDayElement.previousSibling, ...weekDayElement.children];\n\n            // Stamp week into week row's dataset\n            weekElements[rowIndex].dataset.week = `${week[0]},${week[1]}`;\n\n            if (me.weekRenderer) {\n                me.callback(me.weekRenderer, me, [weekCells[0], week]);\n            }\n            else {\n                weekCells[0].innerText = week[1];\n            }\n\n            for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                const\n                    date          = dates[columnIndex],\n                    day           = date.getDay(),\n                    key           = DateHelper.makeKey(date),\n                    isNonWorking  = nonWorkingDays[day],\n                    cell          = weekCells[columnIndex + 1],\n                    cellClassList = {\n                        [dayCellCls]             : 1,\n                        [disabledCls]            : me.isDisabledDate(date),\n                        [otherMonthCls]          : date.getMonth() !== month.month,\n                        [weekendCls]             : DateHelper.weekends[day],\n                        [todayCls]               : date.getTime() === today.getTime(),\n                        [nonWorkingDayCls]       : isNonWorking,\n                        'b-last-working-day'     : columnIndex === lastWorkingColumn,\n                        'b-first-visible-cell'   : !(date - (me.firstVisibleDate || -1)),\n                        'b-last-visible-cell'    : !(date - (me.lastVisibleDate || -1)),\n                        [`b-day-of-week-${day}`] : 1\n                    };\n\n                // Sync day cell classes with its calculated status\n                DomHelper.syncClassList(cell, cellClassList);\n\n                cell.dataset.date = key;\n                cell.dataset.cellIndex = cellIndex;\n                cell.dataset.columnIndex = columnIndex;\n\n                // Since we manipulate the classList/Name directly, we need to trick DomSync's config comparison logic or it\n                // may think the class has not changed.\n                if (cell.lastDomConfig) {\n                    delete cell.lastDomConfig.class;\n                    delete cell.lastDomConfig.className;\n                }\n\n                if (me.cellRenderer) {\n                    me.callback(me.cellRenderer, me, [{\n                        cell,\n                        date,\n                        day,\n                        row                : weekElements[rowIndex],\n                        rowIndex,\n                        cellIndex,\n                        columnIndex,\n                        visibleColumnIndex : me.visibleDayColumnIndex[day],\n                        week,\n                        key\n                    }]);\n                }\n                else {\n                    cell.innerHTML = date.getDate();\n                }\n                cellIndex++;\n            }\n\n            rowIndex++;\n        });\n\n        /**\n         * The number of rows displayed in this month. If {@link #config-sixWeeks} is not set,\n         * this may be from 4 to 6.\n         * @member {Number} visibleWeekCount\n         * @readonly\n         */\n        me.visibleWeekCount = rowIndex;\n\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n\n        me.refreshCount = (me.refreshCount || 0) + 1;\n\n        /**\n         * Fires when this CalendarPanel refreshes.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n\n    isDisabledDate(date) {\n        const\n            day = date.getDay(),\n            {\n                disabledDates,\n                nonWorkingDays\n            }   = this;\n\n        if (this.disableWeekends && nonWorkingDays[day]) {\n            return true;\n        }\n\n        if (disabledDates) {\n            if (Array.isArray(disabledDates)) {\n                date = DateHelper.clearTime(date, true);\n                return disabledDates.some(d => !(DateHelper.clearTime(d, true) - date));\n            }\n            else {\n                return this.callback(this.disabledDates, this, [date]);\n            }\n        }\n    }\n\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            weeksContainerChildren = [];\n\n        result.children = [{\n            tag       : 'div',\n            className : 'b-calendar-row b-calendar-weekdays',\n            reference : 'weekdaysHeader',\n            children  : [\n                { class : 'b-week-number-cell' },\n                ...ArrayHelper.fill(7, { class : this.dayHeaderCls }),\n                DomHelper.scrollBarPadElement\n            ]\n        }, {\n            // `notranslate` prevents google translate messing up the DOM, https://github.com/facebook/react/issues/11538\n            className : 'b-weeks-container notranslate',\n            reference : 'weeksElement',\n            children  : weeksContainerChildren\n        }];\n\n        for (let i = 0; i < 6; i++) {\n            const weekRow = {\n                className : 'b-calendar-row b-calendar-week',\n                dataset   : {\n                    rowIndex : i\n                },\n                children : [{\n                    className : 'b-week-number-cell'\n                }, {\n                    className   : 'b-calendar-days',\n                    children    : [{}, {}, {}, {}, {}, {}, {}],\n                    syncOptions : {\n                        ignoreRefs : true,\n                        strict     : false  // allow complete replacement of classes w/o matching lastDomConfig\n                    }\n                }]\n            };\n\n            weeksContainerChildren.push(weekRow);\n        }\n\n        return result;\n    }\n\n    get firstVisibleDate() {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n\n            return new Date(year, month, 1);\n        }\n        for (const me = this, date = me.month.startDate; ; date.setDate(date.getDate() + 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    get lastVisibleDate() {\n        const lastDate = DateHelper.add(this.endDate, -1, 'd');\n\n        if (this.hideOtherMonthCells) {\n            return lastDate;\n        }\n        for (const me = this, date = lastDate; ; date.setDate(date.getDate() - 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * To exclude dates which are outside of the panel's current month, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date.\n     * @returns {HTMLElement} The cell for the passed date if it exists\n     */\n    getCell(date, strict) {\n        if (!(typeof date === 'string')) {\n            date = DateHelper.makeKey(date);\n        }\n        const cell = this.weeksElement.querySelector(`[data-date=\"${date}\"]`);\n\n        if (cell && (!strict || !cell.classList.contains(this.otherMonthCls))) {\n            return cell;\n        }\n    }\n\n    onTipOverCell({ source : tip, target }) {\n        tip.date = DateHelper.parseKey(target.dataset.date);\n    }\n\n    updateLocalization() {\n        // Uncache the cached locale data\n        this._localeNonWorkingDays = this._localeWeekends = null;\n\n        this.updateDayNameFormat();\n        this.updateWeekStartDay(this.weekStartDay);\n        super.updateLocalization();\n    }\n}\n\n// Register this widget type with its Factory\nCalendarPanel.initClass();\n", "import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/YearPicker\n */\n\n/**\n * A Panel subclass which allows a year to be selected from a range of 12 displayed years.\n *\n * The panel can be configured with {@link #config-startYear} to specify the first year in the\n * displayed range.\n *\n * The {@link #property-year} indicates and sets the currently selected year.\n *\n * The {@link #event-select} event is fired when a new year is selected.\n *\n * {@inlineexample Core/widget/YearPicker.js}\n *\n * @extends Core/widget/Panel\n *\n * @classType yearpicker\n * @widget\n */\nexport default class YearPicker extends Panel {\n    static $name = 'YearPicker';\n\n    // Factoryable type name\n    static type = 'yearpicker';\n\n    static configurable = {\n        textContent : false,\n\n        /**\n         * The definition of the top toolbar which displays the title and \"previous\" and\n         * \"next\" buttons.\n         *\n         * This contains the following predefined `items` which may be reconfigured by\n         * application code:\n         *\n         * - `title` A widget which displays the visible year range. Weight 100.\n         * - `previous` A button which navigates to the previous block. Weight 200.\n         * - `next` A button which navigates to the next block. Weight 300.\n         *\n         * These may be reordered:\n         *\n         * ```javascript\n         * new YearPicker({\n         *     appendTo : targetElement,\n         *     tbar     : {\n         *         items : {\n         *             // Move title to centre\n         *             title : {\n         *                 weight : 250\n         *             }\n         *         }\n         *     },\n         *     width    : '24em'\n         * });\n         * ```\n         * @config {ToolbarConfig}\n         */\n        tbar : {\n            overflow : null,\n            items    : {\n                previous : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-previous',\n                    onAction : 'up.previous',\n                    weight   : 100\n                },\n                title : {\n                    type     : 'button',\n                    cls      : 'b-yearpicker-title',\n                    weight   : 200,\n                    onAction : 'up.handleTitleClick'\n                },\n                next : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-next',\n                    onAction : 'up.next',\n                    weight   : 300\n                }\n            }\n        },\n\n        itemCls : 'b-year-container',\n\n        /**\n         * The number of clickable year buttons to display in the widget.\n         *\n         * It may be useful to change this if a non-standard shape or size is used.\n         * @config {Number}\n         * @default\n         */\n        yearButtonCount : 12,\n\n        /**\n         * The currently selected year.\n         * @member {Number} year\n         */\n        /**\n         * The year to use as the selected year. Defaults to the current year.\n         * @config {Number}\n         */\n        year : null,\n\n        /**\n         * The lowest year to allow.\n         * @config {Number}\n         */\n        minYear : null,\n\n        /**\n         * The highest year to allow.\n         * @config {Number}\n         */\n        maxYear : null,\n\n        /**\n         * The starting year displayed in the widget.\n         * @member {Number} startYear\n         */\n        /**\n         * The year to show at the start of the widget\n         * @config {Number}\n         */\n        startYear : null\n    };\n\n    construct(config) {\n        super.construct({\n            year : new Date().getFullYear(),\n            ...config\n        });\n\n        EventHelper.on({\n            element  : this.contentElement,\n            click    : 'onYearClick',\n            delegate : '.b-yearpicker-year',\n            thisObj  : this\n        });\n    }\n\n    get focusElement() {\n        return this.getYearButton(this.year) || this.getYearButton(this.startYear);\n    }\n\n    getYearButton(y) {\n        return this.contentElement.querySelector(`.b-yearpicker-year[data-year=\"${y}\"]`);\n    }\n\n    /**\n     * The currently selected year.\n     * @member {Number} value\n     */\n    get value() {\n        return this.year;\n    }\n\n    set value(year) {\n        this.year = year;\n    }\n\n    onYearClick({ target }) {\n        const clickedYear = Math.min(Math.max(parseInt(target.innerText), this.minYear || 1), this.maxYear || 9999);\n\n        // The updater won't run, so fire the select event here.\n        if (this.year === clickedYear) {\n            this.trigger('select', { oldValue : clickedYear, value : clickedYear });\n        }\n        else {\n            this.year = clickedYear;\n        }\n    }\n\n    handleTitleClick(e) {\n        this.trigger('titleClick', e);\n    }\n\n    previous() {\n        this.startYear = this.startYear - this.yearButtonCount;\n    }\n\n    next() {\n        this.startYear = this.endYear + 1;\n    }\n\n    ingestYear(year) {\n        if (!isNaN(year)) {\n            return ObjectHelper.isDate(year) ? year.getFullYear() : year;\n        }\n    }\n\n    changeYear(year) {\n        // ingestYear returns undefined if invalid input\n        if ((year = this.ingestYear(year))) {\n            return Math.min(Math.max(year, this.minYear || 1), this.maxYear || 9999);\n        }\n    }\n\n    updateYear(year, oldValue) {\n        const me = this;\n\n        if (!me.startYear || year > me.endYear) {\n            me.startYear = year;\n        }\n        else if (year < me.startYear) {\n            me.startYear = year - (me.yearButtonCount - 1);\n        }\n        if (!me.isConfiguring) {\n            /**\n             * Fired when a year is selected.\n             * @event select\n             * @param {Number} value The previously selected year.\n             * @param {Core.widget.YearPicker} source This YearPicker\n             */\n            me.trigger('select', { oldValue, value : year });\n        }\n    }\n\n    /**\n     * The ending year displayed in the widget.\n     * @member {Number} endYear\n     * @readonly\n     */\n    get endYear() {\n        return this.startYear + this.yearButtonCount - 1;\n    }\n\n    changeStartYear(startYear) {\n        // ingestYear returns undefined if invalid input\n        if ((startYear = this.ingestYear(startYear))) {\n            startYear = this.minYear ? Math.max(startYear, this.minYear) : startYear;\n            return this.maxYear ? Math.min(startYear, this.maxYear - (this.yearButtonCount - 1)) : startYear;\n        }\n    }\n\n    async updateStartYear(startYear, oldStartYear) {\n        if (this.isVisible) {\n            DomHelper.slideIn(this.contentElement, Math.sign(startYear - oldStartYear));\n        }\n    }\n\n    composeBody() {\n        // Must be ingested before first compose.\n        this.getConfig('year');\n\n        const\n            { startYear } = this,\n            result        = super.composeBody(),\n            children      = result.children[this.tbar ? 1 : 0].children = [];\n\n        this.widgetMap.title.text = `${`000${startYear}`.slice(-4)} - ${`000${this.endYear}`.slice(-4)}`;\n\n        for (let i = 0, y = startYear; i < this.yearButtonCount; i++, y++) {\n            children.push({\n                tag     : 'button',\n                dataset : {\n                    year : y\n                },\n                class : {\n                    'b-yearpicker-year' : 1,\n                    'b-selected'        : y === this.year\n                },\n                text : `000${y}`.slice(-4)\n            });\n        }\n\n        return result;\n    }\n}\n\n// Register this widget type with its Factory\nYearPicker.initClass();\n", "import TextField from './TextField.js';\nimport StringHelper from '../helper/StringHelper.js';\n\n/**\n * @module Core/widget/DisplayField\n */\n\n/**\n * A widget used to show a read only value. Can also use a {@link #config-template template string} to show custom\n * markup inside a Container.\n *\n * @extends Core/widget/Field\n *\n * @example\n * let displayField = new DisplayField({\n *   appendTo : document.body,\n *   label: 'name',\n *   value : 'John Doe',\n *   // or use a template\n *   // template : name => `${name} is the name`\n * });\n *\n * @classType displayField\n * @inlineexample Core/widget/DisplayField.js\n * @widget\n * @inputfield\n */\nexport default class DisplayField extends TextField {\n    static get $name() {\n        return 'DisplayField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'displayfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'display';\n    }\n\n    static get configurable() {\n        return {\n            readOnly : true,\n            editable : false,\n            cls      : 'b-display-field',\n\n            /**\n             * A template string used to render the value of this field. Please note you are responsible for encoding\n             * any strings protecting against XSS.\n             *\n             * ```javascript\n             * new DisplayField({\n             *     appendTo : document.body,\n             *     name     : 'age',\n             *     label    : 'Age',\n             *     template : data => `${data.value} years old`\n             * })\n             * ```\n             * @config {Function}\n             */\n            template : null,\n\n            ariaElement : 'displayElement'\n        };\n    }\n\n    get focusElement() {\n        // we're not focusable.\n    }\n\n    changeReadOnly() {\n        return true;\n    }\n\n    changeEditable() {\n        return false;\n    }\n\n    get inputElement() {\n        return {\n            tag       : 'span',\n            id        : `${this.id}-input`,\n            reference : 'displayElement',\n            html      : this.template ? this.template(this.value) : StringHelper.encodeHtml(this.value)\n        };\n    }\n}\n\n// Register this widget type with its Factory\nDisplayField.initClass();\n", "import CalendarPanel from './CalendarPanel.js';\nimport YearPicker from './YearPicker.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Combo from './Combo.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport './DisplayField.js';\n\nconst\n    generateMonthNames = () => DateHelper.getMonthNames().map((m, i) => [i, m]),\n    dateSort           = (lhs, rhs) => lhs.valueOf() - rhs.valueOf(),\n    emptyArray         = Object.freeze([]);\n\nclass ReadOnlyCombo extends Combo {\n    static get $name() {\n        return 'ReadOnlyCombo';\n    }\n\n    static get type() {\n        return 'readonlycombo';\n    }\n\n    static get configurable() {\n        return {\n            editable        : false,\n            inputAttributes : {\n                tag      : 'div',\n                tabIndex : -1\n            },\n            inputValueAttr          : 'innerHTML',\n            highlightExternalChange : false,\n            monitorResize           : false,\n            triggers                : {\n                expand : false\n            },\n            picker : {\n                align : {\n                    align     : 't-b',\n                    axisLock  : true,\n                    matchSize : false\n                },\n                cls        : 'b-readonly-combo-list',\n                scrollable : {\n                    overflowX : false\n                }\n            }\n        };\n    }\n}\n\nReadOnlyCombo.initClass();\n\n/**\n * @module Core/widget/DatePicker\n */\n\n/**\n * A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\n * actions, optionally navigates to other months in response to UI gestures, and optionally displays information about\n * each date cell.\n *\n * A date is selected (meaning a single value is selected if {@link #config-multiSelect} is not set, or\n * added to the {@link #property-selection} if {@link #config-multiSelect if set}) by clicking a cell\n * or by pressing `ENTER` when focused on a cell.\n *\n * The `SHIFT` and `CTRL` keys modify selection behaviour depending on the value of {@link #config-multiSelect}.\n *\n * This class is used as a {@link Core.widget.DateField#config-picker} by the {@link Core.widget.DateField} class.\n *\n * {@inlineexample Core/widget/DatePicker.js}\n *\n * ## Custom cell rendering\n * You can easily control the content of each date cell using the {@link #config-cellRenderer}. The example below shows\n * a view typically seen when booking hotel rooms or apartments.\n *\n * {@inlineexample Core/widget/DatePickerCellRenderer.js}\n *\n * ## Multi selection\n * You can select multiple date ranges or a single date range using the {@link #config-multiSelect} config.\n *\n * {@inlineexample Core/widget/DatePickerMulti.js}\n *\n * ## Configuring toolbar buttons\n *\n * The datepicker includes a few useful navigation buttons by default. Through the DatePicker´s {@link #config-tbar toolbar},\n * you can manipulate these, via the toolbar´s {@link Core/widget/Toolbar#config-items} config.\n *\n * There are four buttons by default, each of which can be reconfigured using\n * an object, or disabled by configuring them as `null`.\n *\n * ```javascript\n * new DatePicker({\n *    tbar : {\n *       // Remove all navigation buttons\n *       items : {\n *           prevYear  : null,\n *           prevMonth : null,\n *           nextYear  : null,\n *           nextMonth : null\n *       }\n *    }\n * })\n * ```\n *\n * Provided toolbar widgets include:\n *\n * - `prevMonth` Navigates to previous month\n * - `nextMonth` Navigates to next month\n * - `prevYear` Navigates to previous year\n * - `nextYear` Navigates to next year\n * @classtype datepicker\n * @extends Core/widget/CalendarPanel\n * @widget\n */\nexport default class DatePicker extends CalendarPanel {\n    static get $name() {\n        return 'DatePicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datepicker';\n    }\n\n    static get delayable() {\n        return {\n            refresh : 'raf'\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The date that the user has navigated to using the UI *prior* to setting the widget's\n             * value by selecting. The initial default is today's date.\n             *\n             * This may be changed using keyboard navigation. The {@link Core.widget.CalendarPanel#property-date} is set\n             * by pressing `ENTER` when the desired date is reached.\n             *\n             * Programmatically setting the {@link Core.widget.CalendarPanel#config-date}, or using the UI to select the date\n             * by clicking it also sets the `activeDate`\n             * @config {Date}\n             */\n            activeDate : {\n                value   : new Date(),\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            focusable   : true,\n            textContent : false,\n            tbar        : {\n                overflow : null,\n                items    : {\n                    prevYear : {\n                        cls      : 'b-icon b-icon-first',\n                        onAction : 'up.gotoPrevYear',\n                        tooltip  : 'L{DatePicker.gotoPrevYear}'\n                    },\n                    prevMonth : {\n                        cls      : 'b-icon b-icon-previous',\n                        onAction : 'up.gotoPrevMonth',\n                        tooltip  : 'L{DatePicker.gotoPrevMonth}'\n                    },\n                    fields : {\n                        type  : 'container',\n                        cls   : 'b-datepicker-title',\n                        items : {\n                            monthField : {\n                                type              : 'readonlycombo',\n                                cls               : 'b-datepicker-monthfield',\n                                items             : generateMonthNames(),\n                                internalListeners : {\n                                    select : 'up.onMonthPicked'\n                                }\n                            },\n                            yearButton : {\n                                type              : 'button',\n                                cls               : 'b-datepicker-yearbutton',\n                                internalListeners : {\n                                    click : 'up.onYearPickerRequested'\n                                }\n                            }\n                        }\n                    },\n                    nextMonth : {\n                        cls      : 'b-icon b-icon-next',\n                        onAction : 'up.gotoNextMonth',\n                        tooltip  : 'L{DatePicker.gotoNextMonth}'\n                    },\n                    nextYear : {\n                        cls      : 'b-icon b-icon-last',\n                        onAction : 'up.gotoNextYear',\n                        tooltip  : 'L{DatePicker.gotoNextYear}'\n                    }\n                }\n            },\n\n            yearPicker : {\n                value : {\n                    type              : 'YearPicker',\n                    yearButtonCount   : 16,\n                    trapFocus         : true,\n                    positioned        : true,\n                    hidden            : true,\n                    internalListeners : {\n                        titleClick : 'up.onYearPickerTitleClick',\n                        select     : 'up.onYearPicked'\n                    }\n                },\n                $config : 'lazy'\n            },\n\n            /**\n             * The initially selected date.\n             * @config {Date}\n             */\n            date : null,\n\n            /**\n             * The minimum selectable date. Selection of and navigation to dates prior\n             * to this date will not be possible.\n             * @config {Date}\n             */\n            minDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * The maximum selectable date. Selection of and navigation to dates after\n             * this date will not be possible.\n             * @config {Date}\n             */\n            maxDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * By default, disabled dates cannot be navigated to, and they are skipped over\n             * during keyboard navigation. Configure this as `true` to enable navigation to\n             * disabled dates.\n             * @config {Boolean}\n             * @default\n             */\n            focusDisabledDates : null,\n\n            /**\n             * Configure as `true` to enable selecting multiple discontiguous date ranges using\n             * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.\n             *\n             * Configure as `'range'` to enable selecting a single date range by selecting a\n             * start and end date. Hold \"SHIFT\" button to select date range. Ctrl+click may add\n             * or remove dates to/from either end of the range.\n             * @config {Boolean|'range'}\n             * @default\n             */\n            multiSelect : false,\n\n            /**\n             * If {@link #config-multiSelect} is configured as `true`, this is an array of dates\n             * which are selected. There may be multiple, discontiguous date ranges.\n             *\n             * If {@link #config-multiSelect} is configured as `'range'`, this is a two element array\n             * specifying the first and last selected dates in a range.\n             * @config {Date[]}\n             */\n            selection : {\n                $config : {\n                    equal : (v1, v2) => v1 && v1.equals(v2)\n                },\n                value : null\n            },\n\n            /**\n             * By default, the month and year are editable. Configure this as `false` to prevent that.\n             * @config {Boolean}\n             * @default\n             */\n            editMonth : true,\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'dd',\n\n            trapFocus : true,\n\n            role : 'grid',\n\n            focusDescendant : true,\n\n            /**\n             * By default, when the {@link #property-date} changes, the UI will only refresh\n             * if it doesn't contain a cell for that date, so as to keep a stable UI when\n             * navigating.\n             *\n             * Configure this as `true` to refresh the UI whenever the month changes, even if\n             * the UI already shows that date.\n             * @config {Boolean}\n             * @internal\n             */\n            alwaysRefreshOnMonthChange : null\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The class name to add to the calendar cell whose date which is outside of the\n             * {@link #config-minDate}/{@link #config-maxDate} range.\n             * @config {String}\n             * @private\n             */\n            outOfRangeCls : 'b-out-of-range',\n\n            /**\n             * The class name to add to the currently focused calendar cell.\n             * @config {String}\n             * @private\n             */\n            activeCls : 'b-active-date',\n\n            /**\n             * The class name to add to selected calendar cells.\n             * @config {String}\n             * @private\n             */\n            selectedCls : 'b-selected-date'\n        };\n    }\n\n    // region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.externalCellRenderer = me.cellRenderer;\n        me.cellRenderer         = me.internalCellRenderer;\n\n        me.element.setAttribute('aria-activedescendant', `${me.id}-active-day`);\n        me.weeksElement.setAttribute('role', 'grid');\n        me.weekElements.forEach(w => w.setAttribute('role', 'row'));\n        me.element.setAttribute('ariaLabelledBy', me.widgetMap.fields.id);\n\n        EventHelper.on({\n            element : me.weeksElement,\n            click   : {\n                handler  : 'onCellClick',\n                delegate : `.${me.dayCellCls}:not(.${me.disabledCls}):not(.${me.outOfRangeCls})`\n            },\n            mousedown : {\n                handler  : 'onCellMousedown',\n                delegate : `.${me.dayCellCls}`\n            },\n            thisObj : me\n        });\n\n        me.widgetMap.monthField.readOnly = me.widgetMap.yearButton.disabled = !me.editMonth;\n\n        // Ensure the DatePicker is immediately ready for use.\n        me.refresh.flush();\n    }\n\n    afterHide() {\n        this._yearPicker?.hide();\n        super.afterHide(...arguments);\n    }\n\n    doDestroy() {\n        this.yearButton?.destroy();\n        this.monthField?.destroy();\n        super.doDestroy();\n    }\n\n    // endregion\n\n    get focusElement() {\n        return this.weeksElement.querySelector(`.${this.dayCellCls}[tabIndex=\"0\"]`);\n    }\n\n    doRefresh() {\n        const\n            me             = this,\n            oldActiveCell  = me.focusElement,\n            // Coerce the active date to be in the visible range.\n            // Do not use the setter, the sync is done below\n            activeDate     = DateHelper.betweenLesser(me.activeDate, me.month.startDate, me.month.endDate) ? me.activeDate : (me._activeDate = me.date);\n\n        super.doRefresh(...arguments);\n\n        // The focused cell will have been repurposed for a new date\n        const dateOfOldActiveCell = DateHelper.parseKey(oldActiveCell?.dataset.date);\n\n        // The position of the cell may have changed, so the \"from\" cell must\n        // be identified by the date that is stamped into it *after* the refresh..\n        if (activeDate - dateOfOldActiveCell) {\n            me.syncActiveDate(activeDate, dateOfOldActiveCell);\n        }\n    }\n\n    internalCellRenderer({ cell, date }) {\n        const\n            me            = this,\n            {\n                activeCls,\n                selectedCls,\n                externalCellRenderer\n            }             = me,\n            isSelected    = me.isSelectedDate(date),\n            cellClassList = {\n                [activeCls]        : activeCls && me.isActiveDate(date),\n                [selectedCls]      : isSelected,\n                [me.outOfRangeCls] : (me.minDate && date < me.minDate) || (me.maxDate && date > me.maxDate)\n            };\n\n        if (isSelected) {\n            // Fix up start/inner/end range classes\n            if (me.multiSelect) {\n                const\n                    isStart = !me.isSelectedDate(DateHelper.add(date, -1, 'd')),\n                    isEnd   = !me.isSelectedDate(DateHelper.add(date, 1, 'd'));\n\n                cellClassList['b-range-start'] = isStart;\n                cellClassList['b-range-end'] = isEnd;\n                cellClassList['b-in-range'] = !isStart && !isEnd;\n            }\n        }\n\n        DomHelper.updateClassList(cell, cellClassList);\n\n        // Must replace entire content in case we have an externalCellRenderer\n        cell.innerHTML = `<div class=\"b-datepicker-cell-inner\">${date.getDate()}</div>`;\n        cell.setAttribute('role', 'gridcell');\n        cell.setAttribute('aria-label', DateHelper.format(date, 'MMMM D, YYYY'));\n\n        if (me.isActiveDate(date)) {\n            cell.id = `${me.id}-active-day`;\n        }\n        else {\n            cell.removeAttribute('id');\n        }\n\n        if (externalCellRenderer) {\n            arguments[0].cell = cell.firstChild;\n            me.callback(externalCellRenderer, this, arguments);\n        }\n    }\n\n    onCellMousedown(event) {\n        const cell = event.target.closest('[data-date]');\n\n        event.preventDefault();\n        cell.focus();\n\n        this.activeDate = DateHelper.parseKey(cell.dataset.date);\n    }\n\n    onCellClick(event) {\n        const cell = event.target.closest('[data-date]');\n        this.onUIDateSelect(DateHelper.parseKey(cell.dataset.date), event);\n    }\n\n    onMonthDateChange({ newDate, changes }) {\n        // toolbar widgets must have been instantiated.\n        this.getConfig('tbar');\n\n        super.onMonthDateChange(...arguments);\n\n        // Keep header widgets synced with our month\n        if (changes.m || changes.y) {\n            this.widgetMap.monthField.value = newDate.getMonth();\n            this.widgetMap.yearButton.text  = newDate.getFullYear();\n        }\n    }\n\n    /**\n     * Called when the user uses the UI to select the current activeDate. So ENTER when focused\n     * or clicking a date cell.\n     * @param {Date} date The active date to select\n     * @param {Event} event the instigating event, either a `click` event or a `keydown` event.\n     * @internal\n     */\n    onUIDateSelect(date, event) {\n        const\n            me = this,\n            {\n                lastClickedDate,\n                multiSelect\n            }  = me;\n\n        me.lastClickedDate = date;\n\n        if (!me.isDisabledDate(date)) {\n            me.activatingEvent = event;\n\n            // Handle multi selecting.\n            // * single contiguous date range, eg: an event start and end\n            // * multiple discontiguous ranges\n            if (multiSelect) {\n                me.handleMultiSelect(lastClickedDate, date, event);\n            }\n            else {\n                me.selection = date;\n                if (me.floating) {\n                    me.hide();\n                }\n            }\n\n            me.activatingEvent = null;\n        }\n    }\n\n    // Calls updateSelection if the selection is mutated\n    handleMultiSelect(lastClickedDate, date, event) {\n        const\n            me          = this,\n            {\n                multiSelect\n            }           = me,\n            _selection  = me._selection || (me._selection = new DateSet()),\n            selection   = _selection.dates,\n            singleRange = multiSelect === 'range',\n            {\n                size,\n                generation\n            }           = _selection,\n            rangeEnds   = size && {\n                [DateHelper.makeKey(DateHelper.add(selection[0], -1, 'd'))]                   : 1,\n                [DateHelper.makeKey(selection[0])]                                            : 1,\n                [DateHelper.makeKey(selection[selection.length - 1])]                         : 1,\n                [DateHelper.makeKey(DateHelper.add(selection[selection.length - 1], 1, 'd'))] : 1\n            },\n            isSelected  = _selection.has(date),\n            toggleFn    = isSelected ? 'delete' : 'add';\n\n        // If we're allowed to create one range and they clicked on a togglable date of a range\n        const clickedRangeEnd = singleRange && rangeEnds?.[DateHelper.makeKey(date)];\n\n        // Ctrl+click means toggle the date, leaving remaining selection unchanged\n        if (event.ctrlKey) {\n            // Allow individual date toggling if we are allowing multi ranges\n            // or there's no current selection, or they are on, or adjacent to the range end\n            if (multiSelect === true || !size || clickedRangeEnd) {\n                _selection[toggleFn](date);\n\n                // Check that the start hasn't been deselected\n                if (singleRange && !_selection.has(me.rangeStartDate)) {\n                    me.rangeStartDate.setDate(me.rangeStartDate.getDate() + (date < selection[1] ? 1 : -1));\n                }\n            }\n        }\n        // Shift+click means add a range\n        else if (event.shiftKey && size) {\n            const [start, end] = [\n                new Date(singleRange ? (me.rangeStartDate || (me.rangeStartDate = selection[0])) : lastClickedDate),\n                date\n            ].sort(dateSort);\n\n            // If we can only have one range\n            if (singleRange) {\n                _selection.clear();\n            }\n\n            // Add all dates in the range\n            for (const d = start; d <= end; d.setDate(d.getDate() + 1)) {\n                _selection.add(d);\n            }\n        }\n        // Make the clicked date the only selected date.\n        // Avoid a no-op which would still cause a generation change\n        else if (!(_selection.has(date) && _selection.size === 1)) {\n            _selection.clear();\n            _selection.add(date);\n        }\n\n        const newSize = _selection.size;\n\n        // Keep track of the range start date. The first selected date is the start and the end then\n        // can move to either side of that.\n        if (newSize === 1) {\n            me.rangeStartDate = date;\n        }\n        else if (!newSize) {\n            me.rangeStartDate = null;\n        }\n\n        // Process selection change if we changed the selection.\n        if (_selection.generation !== generation) {\n            me.updateSelection(_selection);\n        }\n    }\n\n    changeSelection(selection) {\n        // We always need a _selection property to be a DateSet.\n        // Falsy selection value means empty DateSet.\n        const me = this;\n\n        let result, rangeStartDate;\n\n        if (selection) {\n            // Convert single Date into Array\n            if (!selection.forEach) {\n                selection = [selection];\n            }\n\n            // Clamp selection into range. May duplicate, but the Set will dedupe.\n            selection.forEach((d, i) => selection[i] = me.changeDate(d));\n\n            // Cache the first date, regardless of sort order for use as the \"clicked date\"\n            // around which the range revolves when shift+click is used.\n            rangeStartDate = selection[0];\n            selection.sort(dateSort);\n\n            // A two element array means a start and end\n            if (me.multiSelect === 'range' && selection.length === 2) {\n                result = new DateSet();\n                for (const d = new Date(selection[0]); d <= selection[1]; d.setDate(d.getDate() + 1)) {\n                    result.add(d);\n                }\n            }\n            else {\n                // Multi dates may be in any order, so use the temporally first date as range start\n                rangeStartDate = selection[0];\n                result = new DateSet(selection);\n            }\n        }\n        else {\n            result = new DateSet();\n        }\n\n        if (rangeStartDate) {\n            me.activeDate = me.rangeStartDate = DateHelper.clearTime(rangeStartDate);\n        }\n\n        return result;\n    }\n\n    updateMultiSelect(multiSelect) {\n        this.element.classList.toggle('b-multiselect', Boolean(multiSelect));\n        if (!multiSelect) {\n            this.selection = [...this.selection][0];\n        }\n    }\n\n    updateSelection(dateSet) {\n        const\n            me        = this,\n            { dates } = dateSet,\n            selection = me.multiSelect === 'range' ? [dates[0], dates[dates.length - 1]] : dates;\n\n        // \"date\" property must be seen to be the selected date.\n        dates.length && (me.date = dates[0]);\n\n        if (!me.isConfiguring) {\n            // We're going to announce the change. UI must be up to date\n            me.refresh.now();\n\n            /**\n             * Fires when a date or date range is selected. If {@link #config-multiSelect} is specified,\n             * this will fire upon deselection and selection of dates.\n             * @event selectionChange\n             * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified\n             * this may be a two element array specifying start and end dates.\n             * @param {Boolean} userAction This will be `true` if the change was caused by user interaction\n             * as opposed to programmatic setting.\n             */\n            me.trigger('selectionChange', {\n                selection,\n                userAction : Boolean(me.activatingEvent)\n            });\n        }\n    }\n\n    /**\n     * The selected Date(s).\n     *\n     * When {@link #config-multiSelect} is `'range'`, then this yields a two element array\n     * representing the start and end of the selected range.\n     *\n     * When {@link #config-multiSelect} is `true`, this yields an array containing every selected\n     * Date.\n     * @member {Date[]} selection\n     */\n    get selection() {\n        const\n            { _selection } = this,\n            dates          = _selection ? _selection.dates : emptyArray;\n\n        return this.multiSelect === 'range' && dates.length ? [dates[0], dates[dates.length - 1]] : dates;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const\n            me         = this,\n            keyName    = keyEvent.key.trim() || keyEvent.code,\n            activeDate = me.activeDate;\n\n        let newDate    = new Date(activeDate);\n\n        if (keyName === 'Escape' && me.floating) {\n            return me.hide();\n        }\n\n        // Only navigate if not focused on one of our child widgets.\n        // We have a prevMonth and nextMonth tool and possibly month and year pickers.\n        if (activeDate && me.weeksElement.contains(keyEvent.target)) {\n            do {\n                switch (keyName) {\n                    case 'ArrowLeft':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowLeft navigates back.\n                        // ArrowLeft scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoPrevMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() - 1);\n                        }\n                        break;\n                    case 'ArrowUp':\n                        // Disable browser use of this key.\n                        // ArrowUp scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() - 7);\n                        break;\n                    case 'ArrowRight':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowRight navigates forwards.\n                        // ArrowRight scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoNextMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() + 1);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        // Disable browser use of this key.\n                        // ArrowDown scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() + 7);\n                        break;\n                    case 'Enter':\n                        return me.onUIDateSelect(activeDate, keyEvent);\n                }\n            } while (me.isDisabledDate(newDate) && !me.focusDisabledDates);\n\n            // Don't allow navigation to outside of date bounds.\n            if (me.minDate && newDate < me.minDate) {\n                return;\n            }\n            if (me.maxDate && newDate > me.maxDate) {\n                return;\n            }\n            me.activeDate = newDate;\n        }\n    }\n\n    changeMinDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMinDate(minDate) {\n        this._yearpicker && (this._yearpicker.minYear = minDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeMaxDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMaxDate(maxDate) {\n        this._yearpicker && (this._yearpicker.maxYear = maxDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeDate(date) {\n        return DateHelper.clamp(super.changeDate(date), this.minDate, this.maxDate);\n    }\n\n    updateDate(date) {\n        const me = this;\n\n        // Directly configuring a date creates the selection\n        me.isConfiguring && !me.initializingActiveDate && (me.selection = date);\n\n        // Only change the month's date if it is within our current month\n        // or we have to because we don't have a cell for it.\n        // If it's a date in the \"otherMonth\" part of the grid, do not update.\n        if (!me.month.date || date.getMonth() === me.month.month || !me.getCell(date) || me.alwaysRefreshOnMonthChange || me.isNavigating) {\n            super.updateDate(date);\n        }\n    }\n\n    changeActiveDate(activeDate, oldActiveDate) {\n        if (this.trigger('beforeActiveDateChange', { activeDate, oldActiveDate }) === false) {\n            return;\n        }\n\n        activeDate = activeDate ? this.changeDate(activeDate) : this.date || (this.date = DateHelper.clearTime(new Date()));\n\n        if (isNaN(activeDate)) {\n            throw new Error('DatePicker date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clamp(activeDate, this.minDate, this.maxDate);\n    }\n\n    updateActiveDate(activeDate, wasActiveDate) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n\n        if (isConfiguring || !me.getCell(activeDate)) {\n            me.initializingActiveDate = isConfiguring;\n            me.date = activeDate;\n            me.initializingActiveDate = false;\n        }\n        if (!isConfiguring && !me.refresh.isPending) {\n            me.syncActiveDate(activeDate, wasActiveDate);\n        }\n    }\n\n    syncActiveDate(activeDate, wasActiveDate) {\n        const\n            me            = this,\n            { activeCls } = me,\n            activeCell    = me.getCell(activeDate),\n            wasActiveCell = wasActiveDate && me.getCell(wasActiveDate),\n            activeElement = DomHelper.getActiveElement(me.element);\n\n        activeCell.setAttribute('tabIndex', 0);\n        activeCls && activeCell.classList.add(activeCls);\n        activeCell.id = `${me.id}-active-day`;\n\n        if (me.weeksElement.contains(activeElement) /*|| me.owner?.element.contains(activeElement)*/) {\n            activeCell.focus();\n        }\n\n        if (wasActiveCell && wasActiveCell !== activeCell) {\n            wasActiveCell.removeAttribute('tabIndex');\n            activeCls && wasActiveCell.classList.remove(activeCls);\n            wasActiveCell.removeAttribute('id');\n        }\n    }\n\n    set value(value) {\n        const\n            me = this,\n            {\n                selection,\n                duration\n            }  = me;\n\n        if (value) {\n            value = me.changeDate(value, me.value);\n\n            // If we're maintaining a single date range, move the range\n            if (me.multiSelect === 'range' && selection?.length === 2) {\n                if (!DateHelper.betweenLesserEqual(value, ...selection)) {\n                    // Move range back to encapsulate date\n                    if (value < selection[0]) {\n                        me.selection = [value, DateHelper.add(value, duration - 1, 'd')];\n                    }\n                    // Move range forwards to encapsulate date\n                    else {\n                        me.selection = [DateHelper.add(value, -(duration - 1), 'd'), value];\n                    }\n                }\n                me.date = me.activeDate = value;\n                return;\n            }\n\n            // Undefined return value means no change\n            if (value !== undefined) {\n                me.selection = value;\n            }\n        }\n        else {\n            // Clearing the value - go to today's calendar\n            me.date = new Date();\n            me.selection = null;\n        }\n    }\n\n    get value() {\n        return this.selection[this.selection.length - 1];\n    }\n\n    get duration() {\n        return this.multiSelect === 'range' ? DateHelper.diff(...this.selection, 'd') + 1 : 1;\n    }\n\n    gotoPrevYear() {\n        return this.goto(-1, 'year');\n    }\n\n    gotoPrevMonth() {\n        return this.goto(-1, 'month');\n    }\n\n    gotoNextMonth() {\n        return this.goto(1, 'month');\n    }\n\n    gotoNextYear() {\n        return this.goto(1, 'year');\n    }\n\n    goto(direction, unit) {\n        const\n            me                  = this,\n            { activeDate }      = me,\n            activeCell          = activeDate && me.getCell(activeDate);\n\n        let newDate;\n\n        // If active date is already in the month we're going to, use it\n        if (unit === 'month' && activeCell && activeDate?.getMonth() === me.month.month + direction) {\n            newDate = activeDate;\n        }\n        // Move the date by the requested unit\n        else {\n            newDate = DateHelper.add(activeCell ? activeDate : me.date, direction, unit);\n        }\n        const firstDateOfNewMonth = new Date(newDate);\n\n        firstDateOfNewMonth.setDate(1);\n\n        const lastDateOfNewMonth  = DateHelper.add(DateHelper.add(firstDateOfNewMonth, 1, 'month'), -1, 'day');\n\n        // Don't navigate if month is outside bounds\n        if ((me.minDate && direction < 0 && lastDateOfNewMonth < me.minDate) || (me.maxDate && direction > 0 && firstDateOfNewMonth > me.maxDate)) {\n            return;\n        }\n\n        // We need to force a UI change even if the UI contains the target date.\n        // updateDate always calls super and CalendarPanel will refresh\n        me.isNavigating = true;\n\n        const result = me.date = newDate;\n\n        if (activeCell) {\n            me.activeDate = newDate;\n        }\n        me.isNavigating = false;\n        return result;\n    }\n\n    isActiveDate(date) {\n        return !(date - this.activeDate);\n    }\n\n    isSelectedDate(date) {\n        return this._selection?.has(date);\n    }\n\n    onMonthPicked({ record, userAction }) {\n        if (userAction) {\n            this.activeDate = DateHelper.add(this.activeDate, record.value - this.activeDate.getMonth(), 'month');\n            this.focusElement?.focus();\n        }\n    }\n\n    onYearPickerRequested() {\n        const { yearPicker } = this;\n\n        if (yearPicker.isVisible) {\n            yearPicker.hide();\n        }\n        else {\n            yearPicker.year = yearPicker.startYear = this.activeDate.getFullYear();\n            yearPicker.show();\n            yearPicker.focus();\n        }\n    }\n\n    onYearPickerTitleClick() {\n        this.yearPicker.hide();\n    }\n\n    onYearPicked({ value, source }) {\n        const newDate = new Date(this.activeDate);\n\n        newDate.setFullYear(value);\n        this.activeDate = newDate;\n\n        // Move focus without scroll *before* focus reversion from the hide.\n        // Browser behaviour of scrolling to focused element would break animation.\n        this.focusElement && DomHelper.focusWithoutScrolling(this.focusElement);\n        source.hide();\n    }\n\n    changeYearPicker(yearPicker, oldYearPicker) {\n        return YearPicker.reconfigure(oldYearPicker, yearPicker ? YearPicker.mergeConfigs({\n            owner    : this,\n            appendTo : this.element,\n            minYear  : this.minDate?.getFullYear(),\n            maxYear  : this.maxDate?.getFullYear()\n        }, yearPicker) : null, this);\n    }\n\n    get childItems() {\n        const\n            { _yearPicker } = this,\n            result          = super.childItems;\n\n        if (_yearPicker) {\n            result.push(_yearPicker);\n        }\n\n        return result;\n    }\n\n    updateLocalization() {\n        const\n            {\n                monthField\n            }          = this.widgetMap,\n            newData    = generateMonthNames();\n\n        if (!this.isConfiguring && !newData.every((d, i) => d[1] === monthField.store.getAt(i).text)) {\n            newData[monthField.value].selected = true;\n            monthField.items = newData;\n        }\n\n        super.updateLocalization();\n    }\n}\n\n// Dates are never equal, so raw Set won't work.\nclass DateSet extends Set {\n    add(d) {\n        d = DateHelper.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.add(d);\n    }\n\n    delete(d) {\n        d = DateHelper.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d);\n    }\n\n    has(d) {\n        return super.has(DateHelper.makeKey(d));\n    }\n\n    clear() {\n        if (this.size) {\n            this.generation++;\n        }\n        return super.clear();\n    }\n\n    equals(other) {\n        Array.isArray(other) && (other = new DateSet(other));\n\n        return (other.size === this.size) && [...this].every(s => other.has(s));\n    }\n\n    get dates() {\n        return [...this].sort().map(k => DateHelper.parseKey(k));\n    }\n}\n\n// Register this widget type with its Factory\nDatePicker.initClass();\n", "import PickerField from './PickerField.js';\nimport DatePicker from './DatePicker.js';\nimport DH from '../helper/DateHelper.js';\n\n// <remove-on-release>\n// TODO: picker icon (calendar) should show day number\n// </remove-on-release>\n\n/**\n * @module Core/widget/DateField\n */\n\n/**\n * Date field widget (text field + date picker).\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.DateColumn DateColumn}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the date picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * // minimal DateField config with date format specified\n * let dateField = new DateField({\n *   format: 'YYMMDD'\n * });\n *\n * @classType datefield\n * @inlineexample Core/widget/DateField.js\n * @inputfield\n */\nexport default class DateField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'DateField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'date';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get / set format for date displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)\n             * @config {String}\n             * @default\n             */\n            format : 'L',\n\n            /**\n             * A flag which indicates whether the date parsing should be strict - meaning if the date\n             * is missing a year/month/day part - parsing fails.\n             *\n             * Turned off by default, meaning default values are substituted for missing parts.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            strictParsing : false,\n\n            // same for all languages\n            fallbackFormat : 'YYYY-MM-DD',\n            timeFormat     : 'HH:mm:ss:SSS',\n\n            /**\n             * A flag which indicates what time should be used for selected date.\n             * `false` by default which means time is reset to midnight.\n             *\n             * Possible options are:\n             * - `false` to reset time to midnight\n             * - `true` to keep original time value\n             * - `'17:00'` a string which is parsed automatically\n             * - `new Date(2020, 0, 1, 17)` a date object to copy time from\n             * - `'entered'` to keep time value entered by user (in case {@link #config-format} includes time info)\n             *\n             * @config {Boolean|Date|String}\n             * @default\n             */\n            keepTime : false,\n\n            /**\n             * Format for date in the {@link #config-picker}. Uses localized format per default\n             * @config {String}\n             */\n            pickerFormat : null,\n\n            /**\n             * Set to true to first clear time of the field's value before comparing it to the max value\n             * @internal\n             * @config {Boolean}\n             */\n            validateDateOnly : null,\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-calendar',\n                    handler : 'onTriggerClick',\n                    weight  : 200\n                },\n\n                back : {\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick',\n                    align   : 'start',\n                    weight  : 100\n                },\n\n                forward : {\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick',\n                    align   : 'end',\n                    weight  : 100\n                }\n            },\n\n            // An optional extra CSS class to add to the picker container element\n            calendarContainerCls : '',\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the step's current unit is used (or `day` if no current step set) and just the\n             * magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'1d'`, `'1 d'`, `'1 day'`, or `'1 day'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing\n             * two properties: `magnitude`, a Number, and `unit`, a String\n             * @config {String|Number|DurationConfig}\n             */\n            step : false,\n\n            stepTriggers : null,\n\n            /**\n             * The week start day in the {@link #config-picker}, 0 meaning Sunday, 6 meaning Saturday.\n             * Uses localized value per default.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * A config object used to configure the {@link Core.widget.DatePicker datePicker}.\n             * ```javascript\n             * dateField = new DateField({\n             *      picker    : {\n             *          multiSelect : true\n             *      }\n             *  });\n             * ```\n             * @config {DatePickerConfig}\n             */\n            picker : {\n                type         : 'datepicker',\n                role         : 'dialog',\n                floating     : true,\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\n             * specified, it will be converted using the specified {@link #config-format}\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me       = this,\n            defaults = {\n                owner        : me,\n                forElement   : me[me.pickerAlignElement],\n                minDate      : me.min,\n                maxDate      : me.max,\n                weekStartDay : me._weekStartDay, // need to pass the raw value to let the component to use its default value\n\n                align : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onSelectionChange : ({ selection, source : picker }) => {\n                    // We only care about what DatePicker does if it has been opened\n                    if (picker.isVisible) {\n                        me._isUserAction = me._isPickerInput = true;\n                        me.value = selection[0];\n                        me._isPickerInput = me._isUserAction = false;\n                        picker.hide();\n                    }\n                }\n            };\n\n        if (me.calendarContainerCls) {\n            defaults.cls = me.calendarContainerCls;\n        }\n\n        // If we are in cleared state, the picker will also have no value.\n        // But have it focused on today as a default.\n        if (me.value) {\n            defaults.value = me.value;\n        }\n        else {\n            defaults.activeDate = new Date();\n        }\n\n        const result = DatePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults\n        });\n\n        // Cells must exist early\n        result?.refresh.flush();\n\n        return result;\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    get backShiftDate() {\n        return DH.add(this.value, -1 * this._step.magnitude, this._step.unit);\n    }\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.backShiftDate;\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    get forwardShiftDate() {\n        return DH.add(this.value, this._step.magnitude, this._step.unit);\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.forwardShiftDate;\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    showPicker(focusPicker) {\n        if (this.readOnly) {\n            return;\n        }\n\n        const\n            me           = this,\n            { _picker }  = me;\n\n        // If it's already instanced, navigate it to our date, or default of today.\n        // It will be initialized correctly if not.\n        if (_picker) {\n            // In case a subclass uses a min getter (which does not update our min value) - ensure picker is correctly configured\n            const pickerConfig = {\n                minDate : me.min,\n                maxDate : me.max\n            };\n\n            if (me.value) {\n                pickerConfig.value = me.value;\n            }\n            // If the field is cleared, show today's Calendar in the picker\n            // unless it's already been navigated elsewhere.\n            else if (!_picker.activeDate) {\n                pickerConfig.activeDate = new Date();\n            }\n\n            // Config dependencies are correctly processed by setConfig\n            _picker.setConfig(pickerConfig);\n        }\n\n        super.showPicker(focusPicker);\n    }\n\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            const { min, max, validateDateOnly } = me;\n\n            // Validation of the date should only care about the date part\n            if (validateDateOnly) {\n                value = DH.clearTime(value, false);\n            }\n\n            if (min && value < min) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (max && value > max) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    //endregion\n\n    //region Getters/setters\n    transformDateValue(value) {\n        const me = this;\n\n        if (value != null) {\n            if (!DH.isDate(value)) {\n                if (typeof value === 'string') {\n                    // If date cannot be parsed with set format, try fallback - the more general one\n                    value = DH.parse(value, me.format, me.strictParsing) || DH.parse(value, me.fallbackFormat, me.strictParsing);\n                }\n                else {\n                    value = new Date(value);\n                }\n            }\n\n            // We insist on a *valid* Date as the value\n            if (DH.isValidDate(value)) {\n                if ((!me.min || (value - me.min > -DH.MS_PER_DAY)) && (!me.max || value <= me.max)) {\n                    return me.transformTimeValue(value);\n                }\n\n                return value;\n            }\n        }\n        return null;\n    }\n\n    transformTimeValue(value) {\n        const\n            me = this,\n            { keepTime } = me;\n\n        value = DH.clone(value);\n\n        if (!keepTime) {\n            DH.clearTime(value, false);\n        }\n        // change time if keepTime !== 'entered'\n        else if (keepTime !== 'entered') {\n            const timeValue = DH.parse(keepTime, me.timeFormat);\n\n            // if this.keepTime is a valid date or a string describing valid time copy from it\n            if (DH.isValidDate(timeValue)) {\n                DH.copyTimeValues(value, timeValue);\n            }\n            // otherwise try to copy from the current value\n            else if (DH.isValidDate(me.value)) {\n                DH.copyTimeValues(value, me.value);\n            }\n        }\n        // if keepTime === 'entered' and picker is used apply current value time\n        else if (me._isPickerInput && DH.isValidDate(me.value)) {\n            DH.copyTimeValues(value, me.value);\n        }\n        // else don't change time\n\n        return value;\n    }\n\n    changeMin(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMin(min) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (min == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = min;\n            }\n        }\n\n        // See if our lazy config has been realized...\n        if (_picker) {\n            _picker.minDate = min;\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMax(max) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (max == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = max;\n            }\n        }\n\n        if (_picker) {\n            _picker.maxDate = max;\n        }\n\n        this.syncInvalid();\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay(weekStartDay) {\n        if (this._picker) {\n            this._picker.weekStartDay = weekStartDay;\n        }\n    }\n\n    changeValue(value, oldValue) {\n        const\n            me = this,\n            newValue = me.transformDateValue(value);\n\n        // A value we could not parse\n        if (value && !newValue) {\n            // setError uses localization\n            me.setError('L{invalidDate}');\n            return;\n        }\n\n        me.clearError('L{invalidDate}');\n\n        // Reject non-change\n        if (me.hasChanged(oldValue, newValue)) {\n            return super.changeValue(newValue, oldValue);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n\n    updateValue(value, oldValue) {\n        const picker = this._picker;\n\n        if (picker && !this.inputting) {\n            picker.value = picker.activeDate = value;\n        }\n\n        super.updateValue(value, oldValue);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'day'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value && value.unit && value.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    hasChanged(oldValue, newValue) {\n        // if both dates are provided and the field does not has time info in its format\n        if (oldValue?.getTime && newValue?.getTime && this.keepTime !== 'entered') {\n            // Only compare date part\n            return !DH.isEqual(DH.clearTime(oldValue), DH.clearTime(newValue));\n        }\n\n        return super.hasChanged(oldValue && oldValue.getTime(), newValue && newValue.getTime());\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        const date = this.value;\n\n        return date ? DH.format(date, this.format) : '';\n    }\n\n    updateFormat() {\n        if (!this.isConfiguring) {\n            this.syncInputFieldValue(true);\n        }\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n\n    //region Other\n\n    internalOnKeyEvent(event) {\n        super.internalOnKeyEvent(event);\n\n        if (event.key === 'Enter' && this.isValid) {\n            this.picker.hide();\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nDateField.initClass();\n", "import Field from './Field.js';\nimport NumberFormat from '../helper/util/NumberFormat.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\n\n/**\n * @module Core/widget/NumberField\n */\nconst preventDefault = e => e.ctrlKey && e.preventDefault();\n\n/**\n * Number field widget. Similar to native `<input type=\"number\">`, but implemented as `<input type=\"text\">` to support\n * formatting.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Grid/column/NumberColumn},\n * {@link Grid/column/PercentColumn}, {@link Grid/column/AggregateColumn}.\n *\n * ```javascript\n * const number = new NumberField({\n *     min   : 1,\n *     max   : 5,\n *     value : 3\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n *\n * ```javascript\n * new NumberField({\n *   format : {\n *      style    : 'currency',\n *      currency : 'USD'\n *   }\n * });\n * ```\n *\n * @extends Core/widget/Field\n * @classType numberfield\n * @inlineexample Core/widget/NumberField.js\n * @inputfield\n */\nexport default class NumberField extends Field {\n\n    //region Config\n\n    static get $name() {\n        return 'NumberField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'numberfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'number';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Min value\n             * @config {Number}\n             */\n            min : null,\n\n            /**\n             * Max value\n             * @config {Number}\n             */\n            max : null,\n\n            /**\n\n             * Step size for spin button clicks.\n             * @member {Number} step\n             */\n            /**\n             * Step size for spin button clicks. Also used when pressing up/down keys in the field.\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n\n            /**\n             * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or\n             * using keyboard.\n             * @config {Number}\n             * @default 10\n             */\n            largeStep : 0,\n\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : null,\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * For example:\n             * ```\n             *  format: '9,999.00##'\n             * ```\n             * The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.\n             * @config {String|NumberFormatConfig}\n             * @default\n             */\n            format : '',\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  decimalPrecision : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '9.###'\n             *```\n             * To set both `decimalPrecision` and `leadingZeroes` (say to `3`), do this:\n             *```\n             *  format : '3>9.###'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            decimalPrecision : null,\n\n            /**\n             * The maximum number of leading zeroes to show. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  leadingZeros : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '3>9'\n             *```\n             * To set both `leadingZeroes` and `decimalPrecision` (say to `2`), do this:\n             *```\n             *  format : '3>9.##'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            leadingZeroes : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            /**\n             * Controls how change events are triggered when stepping the value up or down using either spinners or\n             * arrow keys.\n             *\n             * Configure with:\n             * * `true` to trigger a change event per step\n             * * `false` to not trigger change while stepping. Will trigger on blur/Enter\n             * * A number of milliseconds to buffer the change event, triggering when no steps are performed during that\n             *   period of time.\n             *\n             * @config {Boolean|Number}\n             * @default\n             */\n            changeOnSpin : true,\n\n            // NOTE: using type=\"number\" has several trade-offs:\n            //\n            // Negatives:\n            //   - No access to caretPos/textSelection. This causes anomalies when replacing\n            //     the input value with a formatted version of that value (the caret moves to\n            //     the end of the input el on each character typed).\n            //   - The above also prevents Siesta/synthetic events from mimicking typing.\n            //   - Thousand separators cannot be displayed (input.value = '1,000' throws an\n            //     exception).\n            // Positives:\n            //   - On mobile, the virtual keyboard only shows digits et al.\n            //   - validity property on DOM node that handles min/max checks.\n            //\n            // The above may not be exhaustive, but there is not a compelling reason to\n            // use type=\"number\" except on mobile.\n\n            /**\n             * This can be set to `'number'` to enable the numeric virtual keyboard on\n             * mobile devices. Doing so limits this component's ability to handle keystrokes\n             * and format properly as the user types, so this is not recommended for\n             * desktop applications. This will also limit similar features of automated\n             * testing tools that mimic user input.\n             * @config {String}\n             * @default text\n             */\n            inputType : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        // Support for selecting all by double click in empty input area\n        // Browsers work differently at this case\n        me.input.addEventListener('dblclick', () => {\n            me.select();\n        });\n\n        if (typeof me.changeOnSpin === 'number') {\n            me.bufferedSpinChange = me.buffer(me.triggerChange, me.changeOnSpin);\n        }\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    acceptValue(value, rawValue) {\n        let accept = !isNaN(value);\n\n        // https://github.com/bryntum/support/issues/1349\n        // Pass through if there is a text selection in the field. This fixes the case when\n        // valid value is typed already and we are replacing it by selecting complete string and typing over it.\n        // Cannot be tested in siesta, see ticket for more info.\n        if (accept && !this.hasTextSelection) {\n            accept = false;\n\n            const\n                raw = this.input.value,\n                current = parseFloat(raw);\n\n            if (raw !== rawValue) {\n                // The new value is out of range, but we accept it if the current value\n                // is also problematic. Consider the case where the input is empty and the\n                // minimum value is 100. The user must first type \"1\" and we must accept it\n                // if they are to get the opportunity to type the \"0\"s.\n                accept = !this.acceptValue(current, raw);\n\n                // Also, if we are checking the current value, be sure not to infinitely\n                // recurse here.\n            }\n        }\n\n        return accept;\n    }\n\n    okMax(value) {\n        return isNaN(this.max) || value <= this.max;\n    }\n\n    okMin(value) {\n        return isNaN(this.min) || value >= this.min;\n    }\n\n    internalOnKeyEvent(e) {\n        if (e.type === 'keydown') {\n            const\n                me = this,\n                key = e.key;\n\n            let block;\n\n            // Native arrow key spin behaviour differs between browsers, so we replace\n            // the native spinners w/our own triggers and handle arrows keys as well.\n            if (key === 'ArrowUp') {\n                me.doSpinUp(e.shiftKey);\n                block = true;\n            }\n            else if (key === 'ArrowDown') {\n                me.doSpinDown(e.shiftKey);\n                block = true;\n            }\n            else if (!e.altKey && !e.ctrlKey && key && key.length === 1) {\n                // The key property contains the character or key name... so ignore\n                // keys that aren't a single character.\n                const\n                    after      = me.getAfterValue(key),\n                    afterValue = me.formatter.parseStrict(after),\n                    // no need to check if typing same value or - if negative numbers are allowed\n                    accepted   = afterValue === me.value || (after === '-' && (isNaN(me.min) || me.min < 0));\n\n                block = !accepted && !me.acceptValue(afterValue, after);\n            }\n\n            if (key === 'Enter' && me._changedBySilentSpin) {\n                me.triggerChange(e, true);\n\n                // reset the flag\n                me._changedBySilentSpin = false;\n            }\n\n            if (block) {\n                e.preventDefault();\n            }\n        }\n\n        super.internalOnKeyEvent(e);\n    }\n\n    doSpinUp(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) + (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    doSpinDown(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) - (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    applySpinChange(newValue) {\n        const me = this;\n\n        me._isUserAction = true;\n\n        // Should not trigger change immediately?\n        if (me.changeOnSpin !== true) {\n            me._changedBySilentSpin = true;\n            // Silence the change\n            me.silenceChange = true;\n            // Optionally buffer the change\n            me.bufferedSpinChange && me.bufferedSpinChange(null, true);\n        }\n\n        me.value = newValue;\n\n        me._isUserAction = false;\n        me.silenceChange = false;\n    }\n\n    triggerChange() {\n        if (!this.silenceChange) {\n            super.triggerChange(...arguments);\n        }\n    }\n\n    onFocusOut(e) {\n        super.onFocusOut(...arguments);\n\n        const\n            me = this,\n            { input } = me,\n            raw = input.value,\n            value = me.formatter.truncate(raw),\n            formatted = isNaN(value) ? raw : me.formatValue(value);\n\n        // Triggers may have been reconfigured\n        me.triggers?.spin?.clickRepeater?.cancel();\n\n        me.lastTouchmove = null;\n\n        if (raw !== formatted) {\n            input.value = formatted;\n        }\n\n        if (me._changedBySilentSpin) {\n            me.triggerChange(e, true);\n\n            // reset the flag\n            me._changedBySilentSpin = false;\n        }\n    }\n\n    internalOnInput(event) {\n        const\n            me = this,\n            { formatter, input } = me,\n            { parser } = formatter,\n            raw = input.value,\n            decimals = parser.decimalPlaces(raw);\n\n        if (formatter.truncator && decimals) {\n            let value = raw;\n\n            const trunc = formatter.truncate(raw);\n\n            if (!isNaN(trunc)) {\n                value = me.formatValue(trunc);\n\n                if (parser.decimalPlaces(value) < decimals) {\n                    // If typing has caused truncation or rounding, reset. To best preserve\n                    // the caret pos (which is reset by assigning input.value), we grab and\n                    // restore the distance from the end. This allows special things to format\n                    // into the string (such as thousands separators) since they always go to\n                    // the front of the input.\n                    const pos = raw.length - me.caretPos;\n\n                    input.value = value;\n\n                    me.caretPos = value.length - pos;\n                }\n            }\n        }\n\n        super.internalOnInput(event);\n    }\n\n    formatValue(value) {\n        return this.formatter.format(value);\n    }\n\n    changeFormat(format) {\n        const me = this;\n\n        if (format === '') {\n            const { leadingZeroes, decimalPrecision } = me;\n\n            format = leadingZeroes ? `${leadingZeroes}>9` : null;\n\n            if (decimalPrecision != null) {\n                format = `${format || ''}9.${'#'.repeat(decimalPrecision)}`;\n            }\n            else if (format) {\n                // When we only have leadingZeroes, we'll have a format like \"4>9\", but\n                // that will default to 3 decimal digits. Prior behavior implied no limit\n                // on decimal digits unless decimalPrecision was specified.\n                format += '.*';\n            }\n        }\n\n        return format;\n    }\n\n    get formatter() {\n        const\n            me = this,\n            format = me.format;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n\n            // <remove-on-release>\n            // TODO: use this.formatter.is.from.currency/percent visually...\n            // if (!formatter.is.decimal) {\n            //     formatter = formatter.as('decimal');\n            // }\n            // </remove-on-release>\n\n            me._formatter = formatter;\n        }\n\n        return formatter;\n    }\n\n    //endregion\n\n    //region Getters/Setters\n\n    updateStep(step) {\n        const me = this;\n\n        me.element.classList.toggle('b-hide-spinner', !step);\n        me._step = step;\n\n        if (step && BrowserHelper.isMobile) {\n            if (!me.touchMoveListener) {\n                me.touchMoveListener = EventHelper.on({\n                    element   : me.input,\n                    touchmove : 'onInputSwipe',\n                    thisObj   : me,\n                    throttled : {\n                        buffer : 150,\n                        alt    : preventDefault\n                    }\n                });\n            }\n        }\n        else {\n            me.touchMoveListener?.();\n        }\n    }\n\n    onInputSwipe(e) {\n        const { lastTouchmove } = this;\n\n        if (lastTouchmove) {\n            const\n                // Swipe right/up means spin up, left/down means spin down\n                deltaX = e.screenX - lastTouchmove.screenX,\n                deltaY = lastTouchmove.screenY - e.screenY,\n                delta  = Math.abs(deltaX) > Math.abs(deltaY) ? deltaX : deltaY;\n\n            this[`doSpin${delta > 0 ? 'Up' : 'Down'}`]();\n        }\n\n        // Disable touch-scrolling\n        e.preventDefault();\n        this.lastTouchmove = e;\n    }\n\n    changeLargeStep(largeStep) {\n        return largeStep || (this.step * 10);\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    /**\n     * Get/set the NumberField's value, or `undefined` if the input field is empty\n     * @property {Number}\n     */\n    changeValue(value, was) {\n        const me = this;\n\n        if (value || value === 0) {\n            let valueIsNaN;\n\n            // We insist on a number as the value\n            if (typeof value !== 'number') {\n                value = (typeof value === 'string') ? me.formatter.parse(value) : Number(value);\n\n                valueIsNaN = isNaN(value);\n                if (valueIsNaN) {\n                    value = '';\n                }\n            }\n\n            if (!valueIsNaN && me.format) {\n                value = me.formatter.round(value);\n            }\n        }\n        else {\n            value = undefined;\n        }\n\n        return super.changeValue(value, was);\n    }\n\n    get inputValue() {\n        let value = this.value;\n\n        if (value != null && this.format) {\n            value = this.formatValue(value);\n        }\n\n        return value;\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nNumberField.initClass();\n", "// Needs to be a panel for focus management in Safari\nimport Panel from './Panel.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './ButtonGroup.js';\nimport './NumberField.js';\n\n/**\n * @module Core/widget/TimePicker\n */\n\n/**\n * A Panel which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     // Configure the time picker\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Contained widgets\n *\n * The default widgets contained in this picker are:\n *\n * | Widget ref | Type                            | Description                             |\n * |------------|---------------------------------|-----------------------------------------|\n * | `hour`     | {@link Core.widget.NumberField} | The hour field                          |\n * | `minute`   | {@link Core.widget.NumberField} | The minute field                        |\n * | `second`   | {@link Core.widget.NumberField} | The second field                        |\n * | `amPm`     | {@link Core.widget.ButtonGroup} | ButtonGroup holding the am & pm buttons |\n * | `amButton` | {@link Core.widget.Button}      | The am button                           |\n * | `pmButton` | {@link Core.widget.Button}      | The pm button                           |\n *\n * This class is not intended for use in applications. It is used internally by the {@link Core.widget.TimeField} class.\n *\n * @classType timepicker\n * @extends Core/widget/Panel\n * @widget\n */\nexport default class TimePicker extends Panel {\n\n    //region Config\n\n    static $name = 'TimePicker';\n\n    static type = 'timepicker';\n\n    static configurable = {\n        floating : true,\n        layout   : 'hbox',\n        items    : {\n            hour : {\n                label                   : 'L{TimePicker.hour}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 23,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            minute : {\n                label                   : 'L{TimePicker.minute}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            second : {\n                hidden                  : true,\n                label                   : 'L{TimePicker.second}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            amPm : {\n                type  : 'buttongroup',\n                items : {\n                    amButton : {\n                        type        : 'button',\n                        text        : 'AM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    },\n                    pmButton : {\n                        type        : 'button',\n                        text        : 'PM',\n                        toggleGroup : 'am-pm',\n                        cls         : 'b-blue',\n                        onClick     : 'up.onAmPmButtonClick'\n                    }\n                }\n            }\n        },\n\n        autoShow : false,\n\n        trapFocus : true,\n\n        /**\n         * By default the seconds field is not displayed. If you require seconds to be visible,\n         * configure this as `true`\n         * @config {Boolean}\n         * @default false\n         */\n        seconds : null,\n\n        /**\n         * Time value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        value : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n\n        /**\n         * Time format. Used to set appropriate 12/24 hour format to display.\n         * See {@link Core.helper.DateHelper#function-format-static DateHelper} for formatting options.\n         * @prp {String}\n         */\n        format : null,\n\n        /**\n         * Max value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        max : null,\n\n        /**\n         * Min value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        min : null,\n\n        /**\n         * Initial value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}. Initial value is restored on Escape click\n         * @member {Date} initialValue\n         * @accepts {Date|String}\n         */\n        initialValue : null // Not documented as config on purpose, API was that way\n    };\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.refresh();\n    }\n\n    updateSeconds(seconds) {\n        this.widgetMap.second[seconds ? 'show' : 'hide']();\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Automatically called by Widget's triggerFieldChange which announces changes to all ancestors\n    onFieldChange() {\n        if (!this.isConfiguring && !this.isRefreshing) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onAmPmButtonClick({ source }) {\n        this._pm = source.ref === 'pmButton';\n        if (this._value) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const me = this;\n\n        switch (keyEvent.key) {\n            case 'Escape':\n                // Support for undefined initial time\n                me.triggerTimeChange(me._initialValue);\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n            case 'Enter':\n                me.value = me.pickerToTime();\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n        }\n\n        super.onInternalKeyDown?.(keyEvent);\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    pickerToTime() {\n        const\n            me               = this,\n            pm               = me._pm,\n            { hour, minute, second } = me.widgetMap;\n\n        hour.format = me._is24Hour ? '2>9' : null;\n\n        let hours    = hour.value,\n            newValue = new Date(me.value);\n\n        if (!me._is24Hour) {\n            if (pm && hours < 12) hours = hours + 12;\n            if (!pm && hours === 12) hours = 0;\n        }\n\n        newValue.setHours(hours);\n        newValue.setMinutes(minute.value);\n        if (me.seconds) {\n            newValue.setSeconds(second.value);\n        }\n\n        if (me._min) {\n            newValue = DateHelper.max(me._min, newValue);\n        }\n        if (me._max) {\n            newValue = DateHelper.min(me._max, newValue);\n        }\n\n        return newValue;\n    }\n\n    triggerTimeChange(time) {\n        /**\n         * Fires when a time is changed.\n         * @event timeChange\n         * @param {Date} time The selected time.\n         */\n        this.trigger('timeChange', { time });\n    }\n\n    //endregion\n\n    //region Getters / Setters\n\n    updateInitialValue(initialValue) {\n        this.value = initialValue;\n    }\n\n    changeValue(value) {\n        if (value) {\n            value = typeof value === 'string' ? DateHelper.parse(value, this.format) : value;\n        }\n        if (!this.isVisible) {\n            this._initialValue = value;\n        }\n        return value ?? DateHelper.getTime(0);\n    }\n\n    updateValue(value) {\n        if (this.isVisible) {\n            this.triggerTimeChange(value);\n        }\n        this.refresh();\n    }\n\n    updateFormat(format) {\n        this._is24Hour = DateHelper.is24HourFormat(format);\n        this.refresh();\n    }\n\n    changeMin(min) {\n        return typeof min === 'string' ? DateHelper.parse(min, this.format) : min;\n    }\n\n    changeMax(max) {\n        return typeof max === 'string' ? DateHelper.parse(max, this.format) : max;\n    }\n\n    //endregion\n\n    //region Display\n\n    refresh() {\n        const me = this;\n\n        if (!me.isConfiguring && me.value) {\n            me.isRefreshing = true;\n            const\n                { hour, minute, second, amButton, pmButton } = me.widgetMap,\n                time                                 = me.value,\n                is24                                 = me._is24Hour,\n                hours                                = time.getHours(),\n                pm                                   = me._pm = hours >= 12;\n\n            me.element.classList[is24 ? 'add' : 'remove']('b-24h');\n\n            hour.min         = is24 ? 0 : 1;\n            hour.max         = is24 ? 23 : 12;\n            hour.value       = is24 ? hours : (hours % 12) || 12;\n            minute.value     = time.getMinutes();\n            second.value     = time.getSeconds();\n            amButton.pressed = !pm;\n            pmButton.pressed = pm;\n            amButton.hidden  = pmButton.hidden = is24;\n            me.isRefreshing  = false;\n        }\n    }\n\n    //endregion\n\n}\n\n// Register this widget type with its Factory\nTimePicker.initClass();\n", "import DH from '../helper/DateHelper.js';\nimport PickerField from './PickerField.js';\nimport TimePicker from './TimePicker.js';\n\n/**\n * @module Core/widget/TimeField\n */\n\n/**\n * The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\n * decrease time by the {@link #config-step step value}.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.TimeColumn TimeColumn}.\n *\n * ## Configuring the picker hour / minute fields\n *\n * You can easily configure the fields in the drop-down picker, to control the increment of the up/down step arrows:\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the time picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * let field = new TimeField({\n *   format: 'HH'\n * });\n *\n * @classType timefield\n * @inlineexample Core/widget/TimeField.js\n * @inputfield\n */\nexport default class TimeField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'TimeField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'time';\n    }\n\n    static get configurable() {\n        return {\n            picker : {\n                type  : 'timepicker',\n                align : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/Set format for time displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\n             * options).\n             * @config {String}\n             * @default\n             */\n            format : 'LT',\n\n            triggers : {\n                expand : {\n                    align   : 'end',\n                    handler : 'onTriggerClick',\n                    compose : () => ({\n                        children : [{\n                            class : {\n                                'b-icon-clock-live' : 1\n                            }\n                        }]\n                    })\n                },\n\n                back : {\n                    align   : 'start',\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick'\n                },\n\n                forward : {\n                    align   : 'end',\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick'\n                }\n            },\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min time value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max time value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in Object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the steps's current unit is used and just the magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'5m'`, `'5 m'`, `'5 min'`, `'5 minutes'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. Defaults to 5 minutes.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `\"10m\"` or `\"5min\"` or `\"2 hours\"`\n             * @config {String}\n             */\n            step : '5m',\n\n            stepTriggers : null,\n\n            /**\n             * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}.\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null,\n\n            /**\n             * Set to true to not clean up the date part of the passed value. Set to false to reset the date part to\n             * January 1st\n             * @prp {Boolean}\n             * @default\n             */\n            keepDate : false\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n\n        return TimePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n\n            defaults : {\n                value      : me.value,\n                forElement : me[me.pickerAlignElement],\n                owner      : me,\n                align      : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onTimeChange({ time }) {\n                    me._isUserAction = true;\n                    me.value = time;\n                    me._isUserAction = false;\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, -1 * me.step.magnitude, me.step.unit);\n\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, me.step.magnitude, me.step.unit);\n\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            value = value.getTime();\n            if (me._min && me._min.getTime() > value) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (me._max && me._max.getTime() < value) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    hasChanged(oldValue, newValue) {\n        if (oldValue?.getTime && newValue?.getTime) {\n            // Only care about the time part\n            return oldValue.getHours() !== newValue.getHours() ||\n                oldValue.getMinutes() !== newValue.getMinutes() ||\n                oldValue.getSeconds() !== newValue.getSeconds() ||\n                oldValue.getMilliseconds() !== newValue.getMilliseconds();\n        }\n\n        return super.hasChanged(oldValue, newValue);\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    /**\n     * Show picker\n     */\n    showPicker() {\n        const\n            me = this,\n            {\n                picker,\n                value\n            }  = me;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        picker.value = value;\n        picker.format = me.format;\n        picker.maxTime = me.max;\n        picker.minTime = me.min;\n\n        // If we had no value initially.\n        if (!value) {\n            me.value = picker.value;\n        }\n\n        super.showPicker(true);\n    }\n\n    onPickerShow() {\n        super.onPickerShow();\n\n        // Remove PickerField key listener\n        this.pickerKeyDownRemover = this.pickerKeyDownRemover?.();\n    }\n\n    /**\n     * Focus time picker\n     */\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    transformTimeValue(value) {\n        if (value != null) {\n            if (typeof value === 'string') {\n                value = DH.parse(value, this.format);\n\n                if (this.keepDate) {\n                    value = DH.copyTimeValues(new Date(this.value), value);\n                }\n            }\n            else {\n                value = new Date(value);\n            }\n\n            // We insist on a *valid* Time as the value\n            if (DH.isValidDate(value)) {\n                if (!this.keepDate) {\n                    // Clear date part back to zero so that all we have is the time part of the epoch.\n                    return DH.getTime(value);\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        return null;\n    }\n\n    changeMin(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMin(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMax(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeValue(value, was) {\n        const\n            me = this,\n            newValue = me.transformTimeValue(value);\n\n        // A value we could not parse\n        if (value && !newValue || (me.isRequired && value === '')) {\n            // setError uses localization\n            me.setError('L{invalidTime}');\n            return;\n        }\n\n        me.clearError('L{invalidTime}');\n\n        // Reject non-change\n        if (me.hasChanged(was, newValue)) {\n            return super.changeValue(newValue, was);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue(true);\n        }\n    }\n\n    updateValue(value, was) {\n        const { expand } = this.triggers;\n\n        // This makes to clock icon show correct time\n        if (expand && value) {\n            expand.element.firstElementChild.style.animationDelay =\n                -((value.getHours() * 60 + value.getMinutes()) / 10) + 's';\n        }\n\n        super.updateValue(value, was);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'hour'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value?.unit && value?.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    updateFormat() {\n        this.syncInputFieldValue(true);\n    }\n\n    get inputValue() {\n        return DH.format(this.value, this.format);\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nTimeField.initClass();\n", "import TextField from './TextField.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\n\n/**\n * @module Core/widget/DurationField\n */\n\n/**\n * A specialized field allowing a user to also specify duration unit when editing the duration value.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the `DurationColumn`.\n *\n * @extends Core/widget/TextField\n * @classType durationfield\n * @inlineexample Core/widget/DurationField.js\n * @inputfield\n */\nexport default class DurationField extends TextField {\n    static get $name() {\n        return 'DurationField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'durationfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'duration';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The `value` config may be set in Object form specifying two properties,\n             * `magnitude`, a Number, and `unit`, a String.\n             *\n             * If a String is passed, it is parsed in accordance with current locale rules.\n             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\n             * the unit.\n             * @config {DurationConfig|String}\n             * @category Common\n             */\n            value : null,\n\n            /**\n             * Step size for spin button clicks.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            step : 1,\n\n            /**\n             * The duration unit to use with the current magnitude value.\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Common\n             */\n            unit : null,\n\n            defaultUnit : 'day',\n\n            /**\n             * The duration magnitude to use with the current unit value. Can be either an integer or a float value.\n             * Both \",\" and \".\" are valid decimal separators.\n             * @config {Number}\n             * @category Common\n             */\n            magnitude : null,\n\n            /**\n             * When set to `true` the field will use short names of unit durations\n             * (as returned by {@link Core.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the\n             * input field's display value.\n             * @config {Boolean}\n             * @category Common\n             */\n            useAbbreviation : false,\n\n            /**\n             * Set to `true` to allow negative duration\n             * @config {Boolean}\n             * @category Common\n             */\n            allowNegative : false,\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            decimalPrecision : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            nullValue : null\n        };\n    }\n\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    /**\n     * User performed default action (typed into this field or hit the triggers).\n     * @event action\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set the min value (e.g. 1d)\n             * @member {String} min\n             * @category Common\n             */\n            /**\n             * Minimum duration value (e.g. 1d)\n             * @config {String}\n             * @category Common\n             */\n            min : null,\n\n            /**\n             * Get/set the max value\n             * @member {String} max (e.g. 10d)\n             * @category Common\n             */\n            /**\n             * Max duration value (e.g. 10d)\n             * @config {String}\n             * @category Common\n             */\n            max : null,\n\n            /**\n             * Get/set the allowed units, e.g. \"day,hour,year\".\n             * @member {String} allowedUnits\n             * @category Common\n             */\n            /**\n             * Comma-separated list of units to allow in this field, e.g. \"day,hour,year\". Leave blank to allow all\n             * valid units (the default)\n             * @config {String}\n             * @category Common\n             */\n            allowedUnits : null\n        };\n    }\n\n    changeMin(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeMax(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeAllowedUnits(units) {\n        if (typeof units === 'string') {\n            units = units.split(',');\n        }\n\n        return units;\n    }\n\n    updateAllowedUnits(units) {\n        this.allowedUnitsRe = new RegExp(`(${units.join('|')})`, 'i');\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.calcValue(true).toString(this.useAbbreviation);\n    }\n\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     * @category Common\n     */\n    set unit(unit) {\n        this._unit = unit;\n        this.value = this.calcValue();\n    }\n\n    get unit() {\n        return this._unit;\n    }\n\n    get unitWithDefault() {\n        return this._unit || DurationField.defaultConfig.defaultUnit;\n    }\n\n    /**\n     * Get/Set numeric magnitude `value` to use with the current unit value.\n     * @property {Number}\n     * @category Common\n     */\n    set magnitude(magnitude) {\n        this.clearError('L{invalidUnit}');\n\n        this._magnitude = magnitude;\n        super.value = this.calcValue();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n    }\n\n    roundMagnitude(value) {\n        return value && this.decimalPrecision != null ? ObjectHelper.round(value, this.decimalPrecision) : value;\n    }\n\n    get allowDecimals() {\n        return this.decimalPrecision !== 0;\n    }\n\n    get isValid() {\n        const\n            me      = this,\n            isEmpty = me.value == null || (me.value && me.value.magnitude == null);\n\n        return super.isValid && ((isEmpty && !me.required) || !isEmpty && (me.allowNegative || me.value.magnitude >= 0));\n    }\n\n    internalOnChange(event) {\n        const\n            me     = this,\n            value  = me.value,\n            oldVal = me._lastValue;\n\n        if (me.hasChanged(oldVal, value)) {\n            me._lastValue = value;\n            me.triggerFieldChange({ value, event, userAction : true, valid : me.isValid });\n        }\n    }\n\n    onFocusOut(e) {\n        this.syncInputFieldValue(true);\n\n        this.triggers?.spin?.clickRepeater?.cancel();\n\n        return super.onFocusOut(e);\n    }\n\n    /**\n     * The `value` property may be set in Object form specifying two properties, `magnitude`, a Number, and `unit`, a\n     * String.\n     *\n     * If a Number is passed, the field's current unit is used and just the magnitude is changed.\n     *\n     * If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\n     * numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.\n     *\n     * Upon read, the value is always a {@link Core.data.Duration} object containing `magnitude` and `unit`.\n     *\n     * @property {Core.data.Duration}\n     * @accepts {String|Number|DurationConfig|Core.data.Duration}\n     * @category Common\n     */\n    set value(value) {\n        const\n            me = this;\n        let newMagnitude, newUnit;\n\n        this.clearError('L{invalidUnit}');\n\n        if (typeof value === 'number') {\n            // A number means preserving existing unit value\n            newMagnitude = value;\n            newUnit = me._unit;\n        }\n        else if (typeof value === 'string') {\n            if (/^\\s*$/.test(value)) {\n                // special case of \"empty\" (in user meaning) string - set to `null` to allow unscheduling of tasks\n                newMagnitude = null;\n            }\n            else {\n                // Parse as a string\n                const\n                    parsedDuration = DateHelper.parseDuration(value, me.allowDecimals, me.unitWithDefault);\n\n                if (parsedDuration) {\n                    if (!me.allowedUnitsRe || me.allowedUnitsRe.test(parsedDuration.unit)) {\n                        newUnit = parsedDuration.unit;\n                        newMagnitude = parsedDuration.magnitude;\n                    }\n                    else {\n                        me.setError('L{invalidUnit}');\n                    }\n                }\n            }\n        }\n        else {\n            // Using value object with unit and magnitude\n            if (value && 'unit' in value && 'magnitude' in value) {\n                newUnit = value.unit;\n                newMagnitude = value.magnitude;\n            }\n            else {\n                newUnit = null;\n                newMagnitude = null;\n            }\n        }\n\n        if (me._magnitude !== newMagnitude || me._unit != newUnit) {\n            me._magnitude = newMagnitude;\n\n            // Once we have unit, do not clear it if setting clearing value\n            if (newUnit) {\n                me._unit = newUnit;\n            }\n            super.value = me.calcValue();\n        }\n    }\n\n    okMax(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.max == null || value <= this.max;\n    }\n\n    okMin(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n\n        return this.min == null || value >= this.min;\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow  = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    calcValue(round = false) {\n        const\n            me = this;\n\n        if ((!me._unit || me._magnitude == null) && me.clearable) {\n            return null;\n        }\n        else {\n            return new Duration(round ? this.roundMagnitude(me._magnitude) : this._magnitude, me.unitWithDefault);\n        }\n    }\n\n    hasChanged(oldValue, newValue) {\n        return newValue && !oldValue ||\n            !newValue && oldValue ||\n            newValue && oldValue && !oldValue.isEqual(newValue);\n    }\n\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this field's\n     * value\n     * @member {Number} milliseconds\n     * @readonly\n     */\n    get milliseconds() {\n        // For reasons unknown documenting as @property did not work\n\n        return this.value ? this.value.milliseconds : 0;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        if (keyEvent.key === 'ArrowUp') {\n            this.doSpinUp();\n        }\n        else if (keyEvent.key === 'ArrowDown') {\n            this.doSpinDown();\n        }\n    }\n\n    doSpinUp() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) + me.step;\n\n        me._isUserAction = true;\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.value = newValue;\n        }\n\n        me._isUserAction = false;\n    }\n\n    doSpinDown() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) - me.step;\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue) && (me.allowNegative || (me.magnitude || 0) > 0)) {\n            me._isUserAction = true;\n            me.value         = newValue;\n\n            me._isUserAction = false;\n        }\n    }\n}\n\n// Register this widget type with its Factory\nDurationField.initClass();\n", "import Container from './Container.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './Combo.js';\nimport './Checkbox.js';\nimport './NumberField.js';\nimport './TextField.js';\nimport './DateField.js';\nimport './DurationField.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n\n/**\n * @module Core/widget/FieldFilterPicker\n */\n\nexport const SUPPORTED_FIELD_DATA_TYPES = ['number', 'boolean', 'string', 'date', 'duration'];\n\nexport const isSupportedDurationField = field => field.column?.type === 'duration';\n\nconst\n    emptyString = '',\n    typeName = 'fieldfilterpicker',\n    clsBase = `b-${typeName}`,\n    multiValueOperators = {\n        between         : true,\n        notBetween      : true,\n        isIncludedIn    : true,\n        isNotIncludedIn : true\n    },\n    valueInputTypes = {\n        textfield     : true,\n        datefield     : true,\n        numberfield   : true,\n        durationfield : true,\n        combo         : true\n    };\n\n/**\n * A field that is available for selection when defining filters.\n *\n * @typedef {Object} FieldOption\n * @property {'string'|'number'|'date'|'boolean'} type The data type of the values in this field in the data source\n * @property {String} title The human-friendly display name for the field, as might be displayed in a data column header\n */\n\n/**\n * A dictionary of value field placeholder strings, keyed by data type.\n *\n * @typedef {Object} ValueFieldPlaceholders\n * @property {String} string Placeholder text for text value fields\n * @property {String} number Placeholder text for number value fields\n * @property {String} date Placeholder text for date value fields\n * @property {String} list Placeholder text for multi-select list values, e.g. for the 'is one of' operator\n */\n\n/**\n * Widget for defining a {@link Core.util.CollectionFilter} for use in filtering a {@link Core.data.Store}.\n * Filters consist of `property` (the name of the data field whose values are checked), `operator`\n * (the type of comparison to use), and `value` (the pre-defined value against which to compare the\n * data field value during filtering).\n *\n * {@inlineexample Core/widget/FieldFilterPicker.js}\n *\n * For example:\n *\n * ```javascript\n * new FieldFilterPicker({\n *     appendTo : domElement,\n *\n *     fields: {\n *         // Allow filters to be defined against the 'age' and 'role' fields in our data\n *         age       : { title: 'Age', type: 'number' },\n *         startDate : { title: 'Start Date', type: 'date' }\n *     },\n *\n *     filter : {\n *         property : 'startDate',\n *         operator : '<',\n *         value    : new Date()\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Container\n * @demo Grid/fieldfilters\n * @classtype fieldfilterpicker\n * @widget\n */\nexport default class FieldFilterPicker extends Container {\n\n    //region Config\n    static get $name() {\n        return 'FieldFilterPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return typeName;\n    }\n\n    static operators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}' },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}' }\n    };\n\n    static defaultOperators = {\n        string : [\n            // In display order\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : 'includes', text : 'L{contains}' },\n            { value : 'doesNotInclude', text : 'L{doesNotContain}' },\n            { value : 'startsWith', text : 'L{startsWith}' },\n            { value : 'endsWith', text : 'L{endsWith}' },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        number : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        date : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : '<', text : 'L{isBefore}' },\n            { value : '>', text : 'L{isAfter}' },\n            this.operators.between,\n            { value : 'isToday', text : 'L{isToday}', argCount : 0 },\n            { value : 'isTomorrow', text : 'L{isTomorrow}', argCount : 0 },\n            { value : 'isYesterday', text : 'L{isYesterday}', argCount : 0 },\n            { value : 'isThisWeek', text : 'L{isThisWeek}', argCount : 0 },\n            { value : 'isNextWeek', text : 'L{isNextWeek}', argCount : 0 },\n            { value : 'isLastWeek', text : 'L{isLastWeek}', argCount : 0 },\n            { value : 'isThisMonth', text : 'L{isThisMonth}', argCount : 0 },\n            { value : 'isNextMonth', text : 'L{isNextMonth}', argCount : 0 },\n            { value : 'isLastMonth', text : 'L{isLastMonth}', argCount : 0 },\n            { value : 'isThisYear', text : 'L{isThisYear}', argCount : 0 },\n            { value : 'isNextYear', text : 'L{isNextYear}', argCount : 0 },\n            { value : 'isLastYear', text : 'L{isLastYear}', argCount : 0 },\n            { value : 'isYearToDate', text : 'L{isYearToDate}', argCount : 0 },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        boolean : [\n            { value : 'isTrue', text : 'L{isTrue}', argCount : 0 },\n            { value : 'isFalse', text : 'L{isFalse}', argCount : 0 }\n        ],\n        duration : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        relation : [\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ]\n    };\n\n    static get defaultValueFieldPlaceholders() {\n        return {\n            string   : 'L{enterAValue}',\n            number   : 'L{enterANumber}',\n            date     : 'L{selectADate}',\n            list     : 'L{selectOneOrMoreValues}',\n            duration : 'L{enterAValue}'\n        };\n    };\n\n    static configurable = {\n        /**\n         * Dictionary of {@link #typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * <div class=\"note\">5.3.0 Syntax accepting FieldOption[] was deprecated in favor of dictionary and will be removed in 6.0</div>\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { title: 'Age', type: 'number' },\n         *     role : { title: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         */\n        fields : null,\n\n        /**\n         * Make the entire picker disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Make the entire picker read-only.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * Make only the property selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        propertyLocked : false,\n\n        /**\n         * Make only the operator selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        operatorLocked : false,\n\n        /**\n         * Configuration object for the {@link Core.util.CollectionFilter} displayed\n         * and editable in this picker.\n         *\n         * Example:\n         *\n         * ```javascript\n         * {\n         *     property: 'age',\n         *     operator: '=',\n         *     value: 25\n         * }\n         * ```\n         *\n         * @config {CollectionFilterConfig}\n         */\n        filter : null,\n\n        /**\n         * Optional configuration for the property selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         */\n        propertyFieldConfig : null,\n\n        /**\n         * Optional configuration for the operator selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         * @private\n         */\n        operatorFieldConfig : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * @private\n         */\n        items : {\n            inputs : {\n                type   : 'container',\n                layout : 'hbox',\n                cls    : `${clsBase}-inputs`,\n                items  : {\n                    propertyPicker : {\n                        type        : 'combo',\n                        items       : {},\n                        cls         : `${clsBase}-property`,\n                        placeholder : 'L{FieldFilterPicker.selectAProperty}'\n                    },\n                    operatorPicker : {\n                        type        : 'combo',\n                        editable    : false,\n                        items       : {},\n                        cls         : `${clsBase}-operator`,\n                        placeholder : 'L{FieldFilterPicker.selectAnOperator}'\n                    },\n                    valueFields : {\n                        type  : 'container',\n                        cls   : `${clsBase}-values`,\n                        items : {}\n                    }\n                }\n            },\n            caseSensitive : {\n                type : 'checkbox',\n                text : 'L{FieldFilterPicker.caseSensitive}',\n                cls  : `${clsBase}-case-sensitive`\n            }\n        },\n\n        /**\n         * Overrides the built-in list of operators that are available for selection. Specify operators as\n         * an object with data types as keys and lists of operators as values, like this:\n         *\n         * ```javascript\n         * operators : {\n         *     string : [\n         *         { value : 'empty', text : 'is empty', argCount : 0 },\n         *         { value : 'notEmpty', text : 'is not empty', argCount : 0 }\n         *     ],\n         *     number : [\n         *         { value : '=', text : 'equals' },\n         *         { value : '!=', text : 'does not equal' }\n         *     ],\n         *     date : [\n         *         { value : '<', text : 'is before' }\n         *     ]\n         * }\n         * ```\n         *\n         * Here `value` is what will be stored in the `operator` field in the filter when selected, `text` is the text\n         * displayed in the Combo for selection, and `argCount` is the number of arguments (comparison values) the\n         * operator requires. The default argCount if not specified is 1.\n         *\n         * @config {Object}\n         */\n        operators : FieldFilterPicker.defaultOperators,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}',\n\n        /**\n         * Optional {Core.data.Store} against which filters are being defined. This is used to supply options to filter against\n         * when using the 'is one of' and 'is not one of' operators.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * Optional {@link ValueFieldPlaceholders} object specifying custom placeholder text for value input fields.\n         *\n         * @config {ValueFieldPlaceholders}\n         */\n        valueFieldPlaceholders : null,\n\n        /**\n         * Optional function that modifies the configuration of value fields shown for a filter. The default configuration\n         * is received as an argument and the returned value will be used as the final configuration. For example:\n         *\n         * ```javascript\n         * getValueFieldConfig : (filter, fieldConfig) => {\n         *     return {\n         *         ...fieldConfig,\n         *         title : fieldName    // Override the `title` config for the field\n         *     };\n         * }\n         * ```\n         *\n         * The supplied function should accept the following arguments:\n         *\n         * @param {Core.util.CollectionFilter} filter The filter being displayed\n         * @param {ContainerItemConfig} fieldConfig Configuration object for the value field\n         *\n         * @config {Function}\n         */\n        getValueFieldConfig : null\n    };\n\n    //endregion\n\n    // Make lookup of operator arity (arg count) by [fieldType][operator]\n    static buildOperatorArgCountLookup = operators =>\n        ArrayHelper.keyBy(Object.entries(operators),\n            ([fieldType])   => fieldType,\n            ([, operators]) => ArrayHelper.keyBy(operators,\n                ({ value }) => value,\n                ({ argCount }) => argCount === undefined ? 1 : argCount\n            ));\n\n    afterConstruct() {\n        const me = this;\n        if (!me._fields) {\n            throw new Error(`${FieldFilterPicker.name} requires 'fields' to be configured.`);\n        }\n        if (!me._filter) {\n            throw new Error(`${FieldFilterPicker.name} requires 'filter' to be configured.`);\n        }\n        super.afterConstruct();\n        const { widgetMap: { propertyPicker, operatorPicker, caseSensitive } } = me;\n        propertyPicker.ion({ select : 'onPropertySelect', thisObj : me });\n        operatorPicker.ion({ select : 'onOperatorSelect', thisObj : me });\n        caseSensitive.ion({ change : 'onCaseSensitiveChange', thisObj : me });\n        me.propertyFieldConfig && propertyPicker.setConfig(me.propertyFieldConfig);\n        me.operatorFieldConfig && operatorPicker.setConfig(me.operatorFieldConfig);\n        propertyPicker.cls = me.allPropertyPickerClasses;\n        operatorPicker.cls = me.allOperatorPickerClasses;\n        me.populateUIFromFilter();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    get allChildInputs() {\n        const { propertyPicker, operatorPicker, caseSensitive } = this.widgetMap;\n        return [propertyPicker, operatorPicker, ...this.valueFields, caseSensitive];\n    }\n\n    updateDisabled(newDisabled) {\n        this.allChildInputs.forEach(field => field.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        const { propertyPicker, operatorPicker } = this.widgetMap;\n        this.allChildInputs.forEach(field => field.readOnly = newReadOnly);\n        // Respect these individual configs when un-setting global readOnly\n        propertyPicker.readOnly = propertyPicker.readOnly || newReadOnly;\n        operatorPicker.readOnly = operatorPicker.readOnly || newReadOnly;\n    }\n\n    updatePropertyLocked(newPropertyLocked) {\n        this.widgetMap.propertyPicker.readOnly = newPropertyLocked || this.readOnly;\n        this.widgetMap.propertyPicker.cls = this.allPropertyPickerClasses;\n    }\n\n    updateOperatorLocked(newOperatorLocked) {\n        this.widgetMap.operatorPicker.readOnly = newOperatorLocked || this.readOnly;\n        this.widgetMap.operatorPicker.cls = this.allOperatorPickerClasses;\n    }\n\n    changeOperators(newOperators) {\n        const operators = (newOperators ?? FieldFilterPicker.defaultOperators);\n        return Object.keys(operators).reduce((outOperators, dataType) => ({\n            ...outOperators,\n            [dataType] : operators[dataType].map(op => ({ ...op, text : this.L(op.text) }))\n        }), {});\n    }\n\n    changeFields(newFields) {\n        let fields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            fields = ArrayHelper.keyBy(fields, 'name');\n        }\n        return fields;\n    }\n\n    get isMultiSelectValueField() {\n        return ['isIncludedIn', 'isNotIncludedIn'].includes(this._filter?.operator);\n    }\n\n    get allPropertyPickerClasses() {\n        return new DomClassList(`${clsBase}-property`, this.propertyFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.propertyLocked\n        });\n    }\n\n    get allOperatorPickerClasses() {\n        return new DomClassList(`${clsBase}-operator`, this.operatorFieldConfig?.cls, {\n            [`${clsBase}-combo-locked`] : this.operatorLocked\n        });\n    }\n\n    getValueFieldConfigs() {\n        const\n            me = this,\n            {\n                valueFieldCls,\n                fieldType,\n                _filter: { operator },\n                onValueChange,\n                filterValues,\n                isMultiSelectValueField,\n                operatorArgCount,\n                getValueFieldConfig\n            } = me,\n            valueFieldPlaceholders = ObjectHelper.merge(\n                {},\n                FieldFilterPicker.defaultValueFieldPlaceholders,\n                me.valueFieldPlaceholders\n            );\n\n        if (!fieldType || !operator || operatorArgCount === 0) {\n            return [];\n        }\n\n        let valueFieldCfg = {\n            type              : 'textfield', // replaced as needed below\n            internalListeners : {\n                change  : onValueChange,\n                input   : onValueChange,\n                thisObj : me\n            },\n            cls     : valueFieldCls,\n            dataset : {\n                type : fieldType\n            },\n            placeholder : me.L(valueFieldPlaceholders[isMultiSelectValueField ? 'list' : fieldType])\n        };\n\n        if (isMultiSelectValueField) {\n            valueFieldCfg = {\n                ...valueFieldCfg,\n                type              : 'combo',\n                multiSelect       : true,\n                createOnUnmatched : true,\n                items             : this.getUniqueDataValues(filterValues),\n                value             : filterValues ?? []\n            };\n        }\n        else if (['number', 'date', 'boolean'].includes(fieldType)) {\n            valueFieldCfg.type = `${fieldType}field`;\n        }\n        else if (fieldType === 'duration') {\n            valueFieldCfg.type = 'durationfield';\n        }\n\n        // Allow client to modify value field config\n        if (getValueFieldConfig) {\n            valueFieldCfg = me.callback(getValueFieldConfig, me, [me.filter, valueFieldCfg]);\n        }\n\n        if (isMultiSelectValueField) {\n            // We only support a single multi-select Combo for now\n            return [valueFieldCfg];\n        }\n\n        return ArrayHelper.populate(operatorArgCount, index => ([{\n            type    : 'widget',\n            tag     : 'div',\n            cls     : `${clsBase}-value-separator`,\n            content : me.L('L{FieldFilterPicker.and}')\n        }, {\n            ...valueFieldCfg,\n            value : filterValues[index]\n        }])).flat().slice(1);\n    }\n\n    /**\n     * Return an array of unique values in the data store for the currently selected field. If no store is\n     * configured or no field is selected, returns an empty array.\n     */\n    getUniqueDataValues(extraValuesToInclude = []) {\n        const\n            me            = this,\n            { fieldType } = me;\n\n        if (!me.store || !me._filter?.property) {\n            return [];\n        }\n\n        const { relatedDisplayField } = me.selectedField;\n        let values,\n            sortedValues;\n\n        if (me.fieldIsRelation) {\n            const { foreignStore } = me.currentPropertyRelationConfig;\n            if (relatedDisplayField) {\n                // Display field specified -- sort by text label;\n                // this bypasses the type-specific sorting for raw data values below\n                values = foreignStore.allRecords.reduce((options, record) => {\n                    if (record.id != null) {\n                        options.push({\n                            text  : record.getValue(relatedDisplayField),\n                            value : record.id\n                        });\n                    }\n                    return options;\n                }, []);\n\n                // Currently only support getting text from remote field and sorting as text\n                sortedValues = values.sort((a, b) => me.sortStrings(a.text, b.text));\n            }\n            else {\n                // If no display field, fall back to only data values\n                values = foreignStore.allRecords.map(record => record.id);\n            }\n        }\n        else {\n            // Local data field\n            values = me.store.allRecords.map(record => record.getValue(me._filter.property));\n        }\n\n        if (!sortedValues) {\n            values.push(...extraValuesToInclude);\n            const uniqueValues = ArrayHelper.unique(values.reduce((primitiveValues, value) => {\n                if (value != null && String(value).trim() !== '') {\n                    // Get primitive values from complex types, for deduping\n                    if (fieldType === 'date') {\n                        primitiveValues.push(value.valueOf());\n                    }\n                    else if (fieldType === 'duration') {\n                        primitiveValues.push(value.toString());\n                    }\n                    else {\n                        primitiveValues.push(value);\n                    }\n                }\n                return primitiveValues;\n            }, []));\n\n            // Sort\n            if (fieldType === 'string') {\n                sortedValues = uniqueValues.sort(me.sortStrings);\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = uniqueValues\n                    .map(durationStr => new Duration(durationStr))\n                    .filter(duration => duration.isValid)\n                    .sort(me.sortDurations);\n            }\n            else {\n                sortedValues = uniqueValues.sort(me.sortNumerics);\n            }\n\n            // Provide labels for complex value types\n            if (fieldType === 'date') {\n                sortedValues = sortedValues.map(timestamp => {\n                    const date = new Date(timestamp);\n                    return {\n                        text  : DateHelper.format(date, me.dateFormat),\n                        value : timestamp\n                    };\n                });\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = sortedValues.map(duration => duration.toString());\n            }\n        }\n\n        return sortedValues;\n    }\n\n    sortStrings(a, b) {\n        return (a ?? emptyString).localeCompare(b ?? emptyString);\n    }\n\n    sortNumerics(a, b) {\n        return a - b;\n    }\n\n    sortDurations(a, b) {\n        return a.valueOf() - b.valueOf();\n    }\n\n    get fieldType() {\n        return this.selectedField?.type;\n    }\n\n    get selectedField() {\n        return this.fields?.[this._filter?.property];\n    }\n\n    get propertyOptions() {\n        return Object.entries(this.fields ?? {})\n            .filter(([, fieldDef]) =>\n                SUPPORTED_FIELD_DATA_TYPES.includes(fieldDef.type) ||\n                isSupportedDurationField(fieldDef)\n            )\n            .map(([fieldName, { title }]) => ({ value : fieldName, text : title ?? fieldName }))\n            .sort((a, b) => a.text.localeCompare(b.text));\n    }\n\n    get operatorOptions() {\n        return this.operators[this.fieldIsRelation ? 'relation' : this.fieldType];\n    }\n\n    get fieldIsRelation() {\n        return Boolean(this.currentPropertyRelationConfig);\n    }\n\n    get currentPropertyRelationConfig() {\n        return this.store?.modelRelations?.find(({ foreignKey }) => foreignKey === this._filter?.property);\n    }\n\n    updateOperators() {\n        delete this._operatorArgCountLookup;\n    }\n\n    /**\n     * @internal\n     */\n    get operatorArgCountLookup() {\n        return this._operatorArgCountLookup ||\n            (this._operatorArgCountLookup = FieldFilterPicker.buildOperatorArgCountLookup(this.operators));\n    }\n\n    updateFilter() {\n        if (this._filter) {\n            this.onFilterChange();\n        }\n    }\n\n    updateStore(newStore) {\n        this._store?.un(this);\n        newStore?.ion({ refresh : 'onStoreRefresh', thisObj : this });\n    }\n\n    onStoreRefresh({ action }) {\n        if (this.isMultiSelectValueField && ['dataset', 'create', 'update', 'delete'].includes(action)) {\n            this.valueFields[0].items = this.getUniqueDataValues(this.filterValues);\n        }\n    }\n\n    refreshValueFields() {\n        const\n            me = this,\n            { valueFields } = me.widgetMap,\n            {\n                fieldType,\n                operatorArgCount,\n                _filter: { property, operator }\n            } = me,\n            isMultiValue = multiValueOperators[operator],\n            isString = fieldType === 'string';\n\n        // Put value fields on own row if appropriate, or at least bigger if string\n        valueFields.element.className = new DomClassList(valueFields.cls, {\n            [`${clsBase}-values-multiple`] : isMultiValue,\n            [`${clsBase}-values-string`]   : isString,\n            'b-hidden'                     : property == undefined || operator == undefined || operatorArgCount === 0\n        });\n        valueFields.removeAll();\n        valueFields.add(me.getValueFieldConfigs());\n        delete me._valueFields;\n        me.refreshCaseSensitive();\n    }\n\n    refreshCaseSensitive() {\n        const\n            me = this,\n            { fieldType, operatorArgCount, isMultiSelectValueField } = me,\n            operator = me._filter?.operator,\n            { caseSensitive } = me.widgetMap;\n        caseSensitive.hidden =\n            fieldType !== 'string' ||\n            !operator ||\n            isMultiSelectValueField ||\n            operatorArgCount === 0;\n        caseSensitive.checked = me._filter?.caseSensitive !== false;\n    }\n\n    onPropertySelect(event) {\n        const\n            me = this,\n            { _filter } = me;\n        _filter.property = event.record?.data.value || null;\n        if (me.fieldType !== me._fieldType) {\n            _filter.operator = null;\n            _filter.value = null;\n        }\n        me._fieldType = _filter.type = me.fieldType;\n        me.refreshOperatorPicker();\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    onCaseSensitiveChange({ checked }) {\n        this._filter.caseSensitive = checked;\n        this.triggerChange();\n    }\n\n    onOperatorSelect(event) {\n        const\n            me = this,\n            wasMultiSelectValueField = me.isMultiSelectValueField;\n        const prevArgCount = this.operatorArgCount;\n        me._filter.operator = event.record?.data.value || null;\n        if (me.operatorArgCount !== prevArgCount) {\n            me._filter.value = null;\n        }\n        if (me.isMultiSelectValueField && !wasMultiSelectValueField) {\n            me._filter.value = [];\n        }\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    triggerChange() {\n        const { filter, isValid } = this;\n        /**\n         * Fires when the filter is modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {Array} filter The {@link Core.util.CollectionFilter} configuration object for the filter represented by this\n         *                       {@link Core.widget.FieldFilterPicker}.\n         * @param {Boolean} isValid Whether the current configuration object represents a complete and valid filter\n         */\n        this.trigger('change', {\n            filter,\n            isValid\n        });\n    }\n\n    onValueChange() {\n        const\n            me = this,\n            { isMultiSelectValueField, fieldType, _filter } = me,\n            values = this.valueFields.map(field => field.value);\n        if (isMultiSelectValueField && fieldType === 'date') {\n            _filter.value = values[0].map(timestamp => new Date(timestamp));\n        }\n        else if (isMultiSelectValueField && fieldType === 'duration') {\n            _filter.value = values[0].map(durationStr => new Duration(durationStr));\n        }\n        else {\n            // Treat end date as inclusive by setting time to end of day\n            if (fieldType === 'date' && _filter.operator === 'between' && DateHelper.isValidDate(values[1])) {\n                values[1].setHours(23, 59, 59, 999);\n            }\n            _filter.value = values.length === 1 ? values[0] : values;\n        }\n        me.triggerChange();\n    }\n\n    refreshOperatorPicker() {\n        const\n            { operatorPicker } = this.widgetMap,\n            { _filter: { operator, property }, operatorOptions } = this;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.value = operator;\n        operatorPicker.hidden = property === null;\n    }\n\n    populateUIFromFilter(forceRefreshValueFields = false) {\n        const\n            me = this,\n            {\n                filterValues,\n                widgetMap: { propertyPicker, operatorPicker },\n                _filter: { property, operator, disabled },\n                propertyOptions,\n                operatorOptions,\n                isMultiSelectValueField\n            } = me;\n        propertyPicker.items = propertyOptions;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.hidden = property === null;\n        let refreshValueFields = forceRefreshValueFields;\n        if (propertyPicker.value !== property) {\n            propertyPicker.value = property;\n            me.refreshOperatorPicker();\n            refreshValueFields = true;\n        }\n        if (operatorPicker.value !== operator) {\n            if (operator === null || !operatorPicker.items.find(({ value }) => value === operator)) {\n                operatorPicker.clear();\n            }\n            else {\n                operatorPicker.value = operator;\n            }\n            refreshValueFields = true;\n        }\n        if (refreshValueFields) {\n            me.refreshValueFields();\n        }\n        me.refreshCaseSensitive();\n        me.valueFields.forEach((valueField, fieldIndex) => {\n            if (isMultiSelectValueField && (valueField.value.length > 0 || filterValues.length > 0)) {\n                if (me.fieldType === 'date') {\n                    valueField.value = filterValues.map(date => date?.valueOf());\n                }\n                else if (me.fieldType === 'duration') {\n                    valueField.value = filterValues.map(duration => duration?.toString());\n                }\n                else {\n                    valueField.value = filterValues;\n                }\n            }\n            else if (fieldIndex >= filterValues.length) {\n                valueField.clear();\n            }\n            else {\n                valueField.value = filterValues[fieldIndex];\n            }\n        });\n        // Grey out all inputs if filter is disabled\n        me.allChildInputs.forEach(widget => widget.disabled = me.disabled || disabled);\n    }\n\n    get valueFields() {\n        return this._valueFields ||\n            (this._valueFields = this.widgetMap.valueFields.queryAll(\n                w => valueInputTypes[w.type]));\n    }\n\n    get filterValues() {\n        if (this._filter?.value == null) {\n            return [];\n        }\n        return ArrayHelper.asArray(this._filter.value);\n    }\n\n    // Must be called manually when filter modified externally\n    onFilterChange() {\n        const\n            me = this,\n            newFieldType = me.fieldType,\n            forceRefreshValueFields = newFieldType !== me._fieldType;\n        me._fieldType = me._filter.type = newFieldType;\n        me.populateUIFromFilter(forceRefreshValueFields);\n    }\n\n    get operatorArgCount() {\n        const { fieldType, filter: { operator }, operatorArgCountLookup } = this;\n        return (fieldType && operator) ? operatorArgCountLookup[fieldType][operator] : 1;\n    }\n\n    get isValid() {\n        const\n            me = this,\n            { filter, fieldType, filterValues, isMultiSelectValueField, operatorArgCount } = me,\n            { operator } = filter,\n            missingValue = operatorArgCount > 0 && filter?.value == null;\n        return (\n            // fieldType here validates that we have a matching field\n            fieldType &&\n            operator &&\n            !missingValue &&\n            (\n                (isMultiSelectValueField && filterValues.length > 0) ||\n                (filterValues.length === operatorArgCount)\n            ) &&\n            filterValues.every(value => value != null &&\n                (fieldType !== 'duration' || value.isValid))\n        );\n    }\n}\n\nFieldFilterPicker.initClass();\n", "import Widget from './Widget.js';\n\nexport default class Label extends Widget {\n    static $name = 'Label';\n    static type = 'label';\n\n    static configurable = {\n        text : null,\n\n        localizableProperties : ['text']\n    };\n\n    compose() {\n        const { text, html } = this;\n\n        return {\n            tag : 'label',\n            text,\n            html\n        };\n    }\n}\n\nLabel.initClass();\n", "import './Checkbox.js';\nimport Container from './Container.js';\nimport './Label.js';\nimport './FieldFilterPicker.js';\n\n/**\n * @module Core/widget/FieldFilterPickerGroup\n */\n\n/**\n * A set of {@link Core.widget.FieldFilterPicker}s, representing an array\n * of {@link Core.util.CollectionFilter}s. The filters are provided to the\n * picker as an array of filter configuration objects.\n *\n * {@inlineexample Core/widget/FieldFilterPickerGroup.js}\n *\n * When {@link #config-store} is provided in the configuration, the picker group will\n * read filters from the store and monitor for filter changes, and reflect any changes. It is\n * possible to synchronize multiple {@link Core.widget.FieldFilterPickerGroup}s by configuring\n * them with the same store.\n *\n * Does not support modifying filters defined as custom functions.\n *\n * @classtype fieldfilterpickergroup\n * @extends Core/widget/Container\n * @widget\n */\nexport default class FieldFilterPickerGroup extends Container {\n    //region Config\n    static get $name() {\n        return 'FieldFilterPickerGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldfilterpickergroup';\n    }\n\n    /**\n     * @private\n     */\n    static addFilterButtonDefaultText = 'L{FieldFilterPickerGroup.addFilter}';\n\n    static configurable = {\n        /**\n         * Array of {@link Core.util.CollectionFilter} configuration objects. One\n         * {@link Core.widget.FieldFilterPicker} will be created\n         * for each object in the array.\n         *\n         * When {@link #config-store} is provided, any filters in the store will\n         * be automatically added and do not need to be provided explicitly.\n         *\n         * Example:\n         * ```javascript\n         * filters: [{\n         *     // Filter properties should exist among field names configured\n         *     // via `fields` or `store`\n         *     property: 'age',\n         *     operator: '<',\n         *     value: 30\n         * },{\n         *     property: 'title',\n         *     operator: 'startsWith',\n         *     value: 'Director'\n         * }]\n         * ```\n         *\n         * @config\n         * @type {CollectionFilterConfig[]}\n         */\n        filters : [],\n\n        /**\n         * Dictionary of {@link Core.widget.FieldFilterPicker#typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOptions[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n\n        /**\n         * Whether the picker group is disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Whether the picker group is read-only.\n         *\n         * Example:\n         * fields: [\n         *    { name: 'age', type: 'number' },\n         *    { name: 'title', type: 'string' }\n         * ]\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * The {@link Core.data.Store} whose records will be filtered. The store's {@link Core.data.Store#property-modelClass}\n         * will be used to determine field types.\n         *\n         * This store will be kept in sync with the filters defined in the picker group, and new filters added to the store\n         * via other means will appear in this filter group when they are able to be modified by it. (Some types of filters,\n         * like arbitrary filter functions, cannot be managed through this widget.)\n         *\n         * As a corollary, multiple `FieldFilterPickerGroup`s configured with the same store will stay in sync, showing the\n         * same filters as the store's filters change.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * When `limitToProperty` is set to the name of an available field (as specified either\n         * explicitly in {@link #config-fields} or implicitly in the\n         * {@link #config-store}'s model), it has the following effects:\n         *\n         * - the picker group will only show filters defined on the specified property\n         * - it will automatically set the `property` to the specified property for all newly added\n         *   filters where the property is not already set\n         * - the property selector is made read-only\n         *\n         * @config {String}\n         */\n        limitToProperty : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * Show a button at the bottom of the group that adds a new, blank filter to the group.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        showAddFilterButton : true,\n\n        /**\n         * Optional predicate that returns whether a given filter can be deleted. When `canDeleteFilter` is provided,\n         * it will be called for each filter and will not show the delete button for those for which the\n         * function returns false.\n         *\n         * @config {Function}\n         */\n        canDeleteFilter : null,\n\n        /**\n         * Optional function that returns {@link Core.widget.FieldFilterPicker} configuration properties for\n         * a given filter. When `getFieldFilterPickerConfig` is provided, it will be called for each filter and the returned\n         * object will be merged with the configuration properties for the individual\n         * {@link Core.widget.FieldFilterPicker} representing that filter.\n         *\n         * The supplied function should accept a single argument, the {@link Core.util.CollectionFilter} whose picker\n         * is being created.\n         *\n         * @config {Function}\n         */\n        getFieldFilterPickerConfig : null,\n\n        /**\n         * Optional predicate that returns whether a given filter can be managed by this widget. When `canManageFilter`\n         * is provided, it will be used to decide whether to display filters found in the configured\n         * {@link #config-store}.\n         *\n         * @config {Function}\n         */\n        canManageFilter : null,\n\n        /**\n         * Sets the text displayed in the 'add filter' button if one is present.\n         *\n         * @config {String}\n         */\n        addFilterButtonText : null,\n\n        /**\n         * @private\n         */\n        items : {\n            pickers : {\n                type       : 'container',\n                layout     : 'vbox',\n                scrollable : true,\n                items      : {}\n            },\n            addFilterButton : {\n                type   : 'button',\n                text   : FieldFilterPickerGroup.addFilterButtonDefaultText,\n                cls    : `b-${FieldFilterPickerGroup.type}-add-button`,\n                hidden : true\n            }\n        },\n\n        /**\n         * When specified, overrides the built-in list of available operators. See\n         * {@link Core.widget.FieldFilterPicker#config-operators}.\n         *\n         * @config {Object}\n         */\n        operators : null,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}'\n    };\n\n    // endregion\n\n    static childPickerType = 'fieldfilterpicker';\n\n    afterConstruct() {\n        const me = this;\n        me.validateConfig();\n        const { addFilterButton } = me.widgetMap;\n        addFilterButton.ion({ click : 'addFilter', thisObj : me });\n        // <remove-on-release>\n        // TODO: not sure why we have to do this. Not doing L() in the static initializer because then the localization sanity test\n        //  doesn't find it\n        // </remove-on-release>\n        addFilterButton.text = me.L(addFilterButton.text);\n        me.store && me.updateStore(me.store);\n        super.afterConstruct();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    validateConfig() {\n        if (!this.fields && !this.store) {\n            throw new Error(\n                `FieldFilterPickerGroup requires either a 'fields' or 'store' config property.`\n            );\n        }\n    }\n\n    updateFields(newFields) {\n        this.widgetMap.pickers.childItems.forEach(picker => picker.fields = newFields);\n    }\n\n    updateFilters(newFilters, oldFilters) {\n        const me = this;\n        if (oldFilters) {\n            oldFilters\n                .filter(filter => !newFilters.find(newFilter => newFilter.id === filter.id))\n                .forEach(filter => me.store?.removeFilter(filter.id));\n        }\n        newFilters.forEach(filter => filter.id = filter.id || me.nextFilterId);\n        me.widgetMap.pickers.items = newFilters?.map(filter => me.getPickerRowConfig(filter)) || [];\n    }\n\n    changeFilters(newFilters) {\n        const { canManageFilter } = this;\n        return (newFilters && canManageFilter)\n            ? newFilters.filter(filter => this.callback(canManageFilter, this, [filter]))\n            : newFilters;\n    }\n\n    updateStore(newStore) {\n        const me = this;\n        me.detachListeners('store');\n        if (newStore) {\n            // Make sure the store has all of our configured filters\n            me.widgetMap.pickers.childItems.forEach(({ widgetMap: { filterPicker: { filter, isValid } } }) => {\n                newStore.removeFilter(filter.id, true);\n                if (isValid) {\n                    newStore.addFilter(filter, true);\n                }\n            });\n            newStore.filter();\n            me.appendFiltersFromStore();\n            newStore.ion({\n                name    : 'store',\n                filter  : 'onStoreFilter',\n                thisObj : me\n            });\n        }\n        me.widgetMap.pickers.childItems.forEach(picker => picker.store = newStore);\n    }\n\n    updateShowAddFilterButton(newShow) {\n        this.widgetMap.addFilterButton.hidden = !newShow;\n    }\n\n    updateAddFilterButtonText(newText) {\n        this.widgetMap.addFilterButton.text = newText ?? FieldFilterPickerGroup.addFilterButtonDefaultText;\n    }\n\n    /**\n     * Find any filters the store has that we don't know about yet, and add to our list\n     * @private\n     */\n    appendFiltersFromStore() {\n        const\n            me = this;\n        me.store.filters.forEach(filter => {\n            const\n                canManage = me.canManage(filter),\n                { property, operator, value, id, disabled = false, caseSensitive } = filter;\n            if (canManage && property && operator &&\n                !me.filters?.find(filter => filter.id === id)\n            ) {\n                me.appendFilter({\n                    id,\n                    property,\n                    operator,\n                    value,\n                    disabled,\n                    caseSensitive\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return !me.canManageFilter || (me.callback(me.canManageFilter, me, [filter]) === true);\n    }\n\n    /**\n     * Get the configuration object for one child FieldFilterPicker.\n     * @param {Core.util.CollectionFilter} filter The filter represented by the child FieldFilterPicker\n     * @returns {Object} The FieldFilterPicker configuration\n     */\n    getFilterPickerConfig(filter) {\n        const\n            me = this,\n            {\n                fields, store, disabled, readOnly, valueFieldCls, operators, limitToProperty, dateFormat,\n                getFieldFilterPickerConfig\n            } = me;\n        return {\n            type              : me.constructor.childPickerType,\n            fields            : fields ?? me.getFieldsFromStore(store),\n            filter,\n            store,\n            disabled,\n            readOnly,\n            propertyLocked    : Boolean(limitToProperty),\n            valueFieldCls,\n            operators,\n            dateFormat,\n            internalListeners : {\n                change  : 'onFilterPickerChange',\n                thisObj : me\n            },\n            flex : 1,\n            ...(getFieldFilterPickerConfig ? me.callback(getFieldFilterPickerConfig, me, [filter]) : undefined)\n        };\n    }\n\n    /**\n     * Get store fields as {@link Core.widget.FieldFilterPicker#typedef-FieldOption}s in a dictionary keyed by name.\n     * @private\n     */\n    getFieldsFromStore(store) {\n        return Object.fromEntries(store.fields?.map(({ name, type }) => [name, { type }]) ?? []);\n    }\n\n    getPickerRowConfig(filter) {\n        const\n            me = this,\n            { disabled, readOnly, canDeleteFilter } = me,\n            canDelete = !(canDeleteFilter && (me.callback(canDeleteFilter, me, [filter]) === false));\n        return {\n            type   : 'container',\n            layout : 'box',\n            cls    : {\n                [`b-${FieldFilterPickerGroup.type}-row`]           : true,\n                [`b-${FieldFilterPickerGroup.type}-row-removable`] : canDelete\n            },\n            dataset : {\n                separatorText : me.L('L{FieldFilterPicker.and}')\n            },\n            items : {\n                activeCheckbox : {\n                    type              : 'checkbox',\n                    disabled,\n                    readOnly,\n                    checked           : !Boolean(filter.disabled),\n                    internalListeners : {\n                        change  : 'onFilterActiveChange',\n                        thisObj : me\n                    },\n                    cls : `b-${FieldFilterPickerGroup.type}-filter-active`\n                },\n                filterPicker : me.getFilterPickerConfig(filter),\n                removeButton : {\n                    type              : 'button',\n                    ref               : 'removeButton',\n                    disabled,\n                    readOnly,\n                    hidden            : !canDelete,\n                    cls               : `b-transparent b-${FieldFilterPickerGroup.type}-remove`,\n                    icon              : 'b-fa-trash',\n                    internalListeners : {\n                        click   : 'removeFilter',\n                        thisObj : me\n                    }\n                }\n            }\n        };\n    }\n\n    get allInputs() {\n        const childInputTypes = [this.constructor.childPickerType, 'button', 'checkbox'];\n        return this.queryAll(w => childInputTypes.includes(w.type));\n    }\n\n    updateDisabled(newDisabled) {\n        this.allInputs.forEach(input => input.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        this.allInputs.forEach(input => input.readOnly = newReadOnly);\n    }\n\n    onFilterActiveChange({ source, checked }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            filterPicker = me.getFilterPicker(filterIndex);\n        filter.disabled = !checked;\n        filterPicker.onFilterChange();\n        if (me.store && filterPicker.isValid) {\n            me.store.addFilter(filter, true);\n        }\n        me.updateStoreFilter();\n        me.triggerChange();\n    }\n\n    onFilterPickerChange({ source, filter, isValid }) {\n        const\n            me = this,\n            { store } = me,\n            filterIndex = me.getFilterIndex(source);\n        if (store) {\n            store.removeFilter(filter.id, true);\n            if (isValid) {\n                store.addFilter(filter, true);\n            }\n            me.updateStoreFilter();\n        }\n        Object.assign(me.filters[filterIndex], filter);\n        me.triggerChange();\n    }\n\n    getFilterIndex(eventSource) {\n        return this.widgetMap.pickers.childItems.indexOf(\n            eventSource.containingWidget\n        );\n    }\n\n    getPickerRow(index) {\n        return this.widgetMap.pickers.childItems[index];\n    }\n\n    /**\n     * Return the {@link Core.widget.FieldFilterPicker} for the filter at the specified index.\n     * @param {Number} filterIndex\n     * @returns {Core.widget.FieldFilterPicker}\n     */\n    getFilterPicker(filterIndex) {\n        return this.getPickerRow(filterIndex).widgetMap.filterPicker;\n    }\n\n    get nextFilterId() {\n        this._nextId = (this._nextId || 0) + 1;\n        return `${this.id}-filter-${this._nextId}`;\n    }\n\n    removeFilter({ source }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            pickerRow = me.getPickerRow(filterIndex),\n            // <remove-on-release>\n            // TODO: Would like a better solution than this. Setting focus to any other element in the group\n            //  to prevent a containing popup from closing due to focusOut (in the Grid Filter feature)\n            // </remove-on-release>\n            newFocusWidget = me.query(w => w.isFocusable && w.type !== 'container' && !pickerRow.contains(w));\n\n        if (newFocusWidget) {\n            newFocusWidget.focus();\n        }\n        me.removeFilterAt(filterIndex);\n        if (me.store) {\n            me.store.removeFilter(filter.id, true);\n            me.updateStoreFilter();\n        }\n        me.trigger('remove', { filter });\n        me.triggerChange();\n    }\n\n    /**\n     * Appends a filter at the bottom of the list\n     * @param {CollectionFilterConfig} [filter={}] Configuration object for the {@link Core.util.CollectionFilter} to\n     * add. Defaults to an empty filter.\n     */\n    addFilter({ property = null, operator = null, value = null } = {}) {\n        const\n            me = this,\n            { filters } = me,\n            newFilter = {\n                property      : me.limitToProperty || property,\n                operator,\n                value,\n                disabled      : false,\n                id            : me.nextFilterId,\n                caseSensitive : false\n            };\n        me.appendFilter(newFilter);\n        if (me.getFilterPicker(filters.length - 1).isValid) {\n            me.store?.addFilter(newFilter, true);\n            me.store && me.updateStoreFilter();\n        }\n        me.trigger('add', { filter : newFilter });\n        me.triggerChange();\n    }\n\n    /**\n     * @private\n     */\n    appendFilter(filter) {\n        const me = this;\n        if (!me.limitToProperty || filter.property === me.limitToProperty) {\n            me.filters.push(filter);\n            me.widgetMap.pickers.add(\n                me.getPickerRowConfig(filter, me.filters.length - 1)\n            );\n        }\n    }\n\n    onStoreFilter(event) {\n        const me = this;\n        if (me._isUpdatingStore) {\n            return;\n        }\n        const\n            { filters } = event,\n            storeFiltersById = filters.values.reduce((byId, filter) =>\n                ({ ...byId, [filter.id] : filter }), {});\n        for (\n            let filterIndex = me.filters.length - 1;\n            filterIndex >= 0;\n            filterIndex--\n        ) {\n            const\n                filter = me.filters[filterIndex],\n                storeFilter = storeFiltersById[filter.id],\n                filterRow = me.getPickerRow(filterIndex);\n            if (filterRow) {\n                const { filterPicker, activeCheckbox } = filterRow.widgetMap;\n                if (!storeFilter && filterPicker.isValid) {\n                    me.removeFilterAt(filterIndex);\n                }\n                else if (storeFilter !== undefined) {\n                    const\n                        { operator, value, property, disabled, caseSensitive } = storeFilter;\n                    if (filter !== storeFilter) {\n                        Object.assign(filter, { operator, value, property, disabled, caseSensitive });\n                    }\n                    filterPicker.filter = filter;\n                    filterPicker.onFilterChange();\n                    activeCheckbox.checked = !disabled;\n                }\n            }\n        }\n        me.appendFiltersFromStore();\n        me.triggerChange();\n    }\n\n    /**\n     * Remove the filter at the given index.\n     * @param {Number} filterIndex The index of the filter to remove\n     */\n    removeFilterAt(filterIndex) {\n        const { widgetMap: { pickers }, filters } = this;\n        pickers.remove(pickers.childItems[filterIndex]);\n        filters.splice(filterIndex, 1);\n        this.triggerChange();\n    }\n\n    /**\n     * Trigger a store re-filter after filters have been silently modified.\n     * @private\n     */\n    updateStoreFilter() {\n        this._isUpdatingStore = true;\n        this.store?.filter();\n        this._isUpdatingStore = false;\n    }\n\n    /**\n     * Returns the array of filter configuration objects currently represented by this picker group.\n     * @type {CollectionFilterConfig[]}\n     */\n    get value() {\n        return this.filters;\n    }\n\n    triggerChange() {\n        const\n            { filters } = this,\n            validFilters = filters.filter((f, index) => this.getPickerRow(index).widgetMap.filterPicker.isValid);\n        /**\n         * Fires when any filter in the group is added, removed, or modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPickerGroup} source The FieldFilterPickerGroup instance that fired the event.\n         * @param {CollectionFilterConfig[]} filters The array of {@link Core.util.CollectionFilter} configuration\n         * objects currently represented by the FieldFilterPickerGroup. **IMPORTANT:** Note that this includes all filters\n         * currently present in the UI, including partially completed ones that may not be ready to apply to a Store.\n         * To retrieve only valid filters, use the `validFilters` parameter on this event, or filter out incomplete filters\n         * in your own code.\n         * @param {CollectionFilterConfig[]} validFilters The subset of {@link Core.util.CollectionFilter} configuration\n         * objects in the `filters` parameter on this event that are complete and valid for application to a Store.\n         */\n        this.trigger('change', {\n            filters,\n            validFilters\n        });\n    }\n\n    /**\n     * Sets all current filters to enabled and checks their checkboxes.\n     */\n    activateAll() {\n        this.setAllActiveStatus(true);\n    }\n\n    /**\n     * Sets all current filters to disabled and clears their checkboxes.\n     */\n    deactivateAll() {\n        this.setAllActiveStatus(false);\n    }\n\n    /**\n     * @private\n     */\n    setAllActiveStatus(newActive) {\n        const\n            me = this,\n            { _filters, store } = me;\n        _filters.forEach((filter, filterIndex) => {\n            // Only do anything if status is changing\n            if (newActive === filter.disabled) {\n                const { filterPicker, activeCheckbox } = me.getPickerRow(filterIndex).widgetMap;\n                filter.disabled = !newActive;\n                filterPicker.onFilterChange();\n                activeCheckbox.checked = newActive;\n                if (newActive && store && filterPicker.isValid) {\n                    store.addFilter(filter, true);\n                }\n            }\n        });\n        me.updateStoreFilter();\n    }\n\n}\n\nFieldFilterPickerGroup.initClass();\n", "import Popup from './Popup.js';\nimport './Button.js';\nimport './TextField.js';\nimport Widget from './Widget.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/MessageDialog\n */\n\nconst items = [\n    {\n        ref     : 'cancelButton',\n        cls     : 'b-messagedialog-cancelbutton b-gray',\n        text    : 'L{Object.Cancel}',\n        onClick : 'up.onCancelClick'\n    },\n    {\n        ref     : 'okButton',\n        cls     : 'b-messagedialog-okbutton b-raised b-blue',\n        text    : 'L{Object.Ok}',\n        onClick : 'up.onOkClick'\n    }\n];\n\n// Windows has OK button to the left, Mac / Ubuntu to the right\nif (BrowserHelper.isWindows) {\n    items.reverse();\n}\n\nclass MessageDialogConstructor extends Popup {\n\n    static get $name() {\n        return 'MessageDialog';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'messagedialog';\n    }\n\n    static get configurable() {\n        return {\n            centered    : true,\n            modal       : true,\n            hidden      : true,\n            autoShow    : false,\n            closeAction : 'hide',\n            title       : '\\xa0',\n\n            lazyItems : {\n                $config : ['lazy'],\n                value   : [{\n                    cls : 'b-messagedialog-message',\n                    ref : 'message'\n                }, {\n                    type : 'textfield',\n                    cls  : 'b-messagedialog-input',\n                    ref  : 'input'\n                }]\n            },\n\n            showClass : null,\n\n            bbar : {\n                overflow : null,\n                items\n            }\n        };\n    }\n\n    construct() {\n        /**\n         * The enum value for the OK button\n         * @member {Number} okButton\n         * @readOnly\n         */\n        this.okButton = this.yesButton = 1;\n\n        /**\n         * The enum value for the Cancel button\n         * @member {Number} cancelButton\n         * @readOnly\n         */\n        this.cancelButton = 3;\n\n        super.construct(...arguments);\n    }\n\n    // Protect from queryAll -> destroy\n    destroy() {}\n\n    /**\n     * Shows a confirm dialog with \"Ok\" and \"Cancel\" buttons. The returned promise resolves passing the button identifier\n     * of the button that was pressed ({@link #property-okButton} or {@link #property-cancelButton}).\n     * @function confirm\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async confirm() {\n        return this.showDialog('confirm', ...arguments);\n    }\n\n    /**\n     * Shows an alert popup with a message. The returned promise resolves when the button is clicked.\n     * @function alert\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async alert() {\n        return this.showDialog('alert', ...arguments);\n    }\n\n    /**\n     * Shows a popup with a basic {@link Core.widget.TextField} along with a message. The returned promise resolves when\n     * the dialog is closed and yields an Object with a `button` ({@link #property-okButton} or {@link #property-cancelButton})\n     * and a `text` property with the text the user provided\n     * @function prompt\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {TextFieldConfig} [options.textField] A config object to apply to the TextField.\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed. The promise yields an Object with\n     * a `button` ({@link #property-okButton} or {@link #property-cancelButton}) and a `text` property with the text the\n     * user provided\n     */\n    async prompt({\n        textField\n    }) {\n        const field = this.widgetMap.input;\n\n        Widget.reconfigure(field, textField);\n        field.value = '';\n\n        return this.showDialog('prompt', ...arguments);\n    }\n\n    showDialog(mode, {\n        message = '',\n        title = '\\xa0',\n        cancelButton,\n        okButton,\n        rootElement = document.body\n    }) {\n        const me = this;\n\n        me.rootElement = rootElement;\n\n        // Ensure our child items are instanced\n        me.getConfig('lazyItems');\n\n        me.title                  = me.optionalL(title);\n        me.widgetMap.message.html = me.optionalL(message);\n        me.showClass              = `b-messagedialog-${mode}`;\n\n        // Normalize string input to config object\n        if (okButton) {\n            okButton = typeof okButton === 'string' ? { text : okButton } : okButton;\n        }\n\n        if (cancelButton) {\n            cancelButton = typeof cancelButton === 'string' ? { text : cancelButton } : cancelButton;\n        }\n\n        // Ensure default configs are applied\n        okButton = Object.assign({}, me.widgetMap.okButton.initialConfig, okButton);\n        cancelButton = Object.assign({}, me.widgetMap.cancelButton.initialConfig, cancelButton);\n\n        // Ensure strings are localized\n        okButton.text = me.optionalL(okButton.text);\n        cancelButton.text = me.optionalL(cancelButton.text);\n\n        Widget.reconfigure(me.widgetMap.okButton, okButton);\n        Widget.reconfigure(me.widgetMap.cancelButton, cancelButton);\n\n        me.show();\n\n        return me.promise = new Promise(resolve => {\n            me.resolve = resolve;\n        });\n    }\n\n    show() {\n        const activeElement = DomHelper.getActiveElement(this.element);\n\n        // So that when we focus, we don't close an autoClose popup, but temporarily become\n        // part of its ownership tree.\n        this.owner = this.element.contains(activeElement) ? null : MessageDialogConstructor.fromElement(document.activeElement);\n\n        return super.show(...arguments);\n    }\n\n    updateShowClass(showClass, oldShowClass) {\n        const { classList } = this.element;\n\n        if (oldShowClass) {\n            classList.remove(oldShowClass);\n        }\n        if (showClass) {\n            classList.add(showClass);\n        }\n    }\n\n    doResolve(value) {\n        const\n            me          = this,\n            { resolve } = me;\n\n        if (resolve) {\n            const isPrompt = me.showClass === 'b-messagedialog-prompt';\n\n            if (isPrompt && value === me.okButton && !me.widgetMap.input.isValid) {\n                return;\n            }\n\n            me.resolve = me.reject = me.promise = null;\n            resolve(isPrompt ? { button : value, text : me.widgetMap.input.value } : value);\n            me.hide();\n        }\n    }\n\n    onInternalKeyDown(event) {\n        // Cancel on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            this.onCancelClick();\n        }\n        if (event.key === 'Enter') {\n            event.stopImmediatePropagation();\n            event.preventDefault(); // Needed to not spill over into next MessageDialog if closing this opens another\n            this.onOkClick();\n        }\n        super.onInternalKeyDown(event);\n    }\n\n    onOkClick() {\n        this.doResolve(MessageDialog.okButton);\n    }\n\n    onCancelClick() {\n        this.doResolve(MessageDialog.cancelButton);\n    }\n}\n\n// Register this widget type with its Factory\nMessageDialogConstructor.initClass();\n\n// Instantiate MessgeDialog Widget on first use.\nconst MessageDialog = new Proxy({}, {\n    get(target, prop) {\n        const\n            instance = target.instance || (target.instance = new MessageDialogConstructor({\n                rootElement : document.body\n            })),\n            result = instance[prop];\n\n        return typeof result === 'function' ? result.bind(instance) : result;\n    }\n});\n\n/**\n * A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):\n * - {@link Core.widget.MessageDialog#function-confirm} shows a confirmation dialog with Ok / Cancel buttons\n * - {@link Core.widget.MessageDialog#function-alert} shows an dialog with a message\n * - {@link Core.widget.MessageDialog#function-prompt} shows a dialog with a text input field\n *\n * @class\n * @singleton\n * @inlineexample Core/widget/MessageDialog.js\n * @extends Core/widget/Popup\n */\nexport default MessageDialog;\n"],
  "mappings": "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",
  "names": ["DragHelperContainer", "Target", "Base", "$name", "initContainerDrag", "me", "mode", "containers", "Error", "grabContainerDrag", "event", "ignoreSelector", "target", "closest", "element", "DomHelper", "getAncestor", "outerElement", "box", "getBoundingClientRect", "context", "valid", "action", "offsetX", "pageX", "left", "offsetY", "pageY", "top", "originalPosition", "parent", "parentElement", "prev", "previousElementSibling", "next", "nextElementSibling", "startContainerDrag", "_outerWidgetEl$parent", "floatRootOwner", "dragElement", "clonedNode", "cloneNode", "outerWidgetEl", "classList", "add", "dragProxyCls", "draggingCls", "floatRoot", "getRootElement", "appendChild", "dragProxy", "dragging", "dropPlaceholderCls", "matches", "style", "zIndex", "floatRootMaxZIndex", "onContainerDragStarted", "autoSizeClonedTarget", "width", "height", "setTranslateXY", "proxyBox", "Object", "assign", "clientX", "clientY", "updateContainerDrag", "_context$dragging", "started", "targetElement", "containerElement", "willLoseFocus", "contains", "getActiveElement", "isDescendant", "GlobalEvents", "suspendFocusEvents", "moveNextTo", "revertPosition", "resumeFocusEvents", "preventDefault", "finishContainerDrag", "draggedTo", "insertBefore", "Boolean", "externalDropTargetSelector", "finalize", "remove", "reset", "async", "trigger", "abortContainerDrag", "invalid", "silent", "updateContainerProxy", "proxy", "newX", "newY", "minX", "Math", "max", "maxX", "min", "offsetWidth", "minY", "maxY", "offsetHeight", "lockX", "setTranslateY", "lockY", "setTranslateX", "type", "touch", "changedTouches", "elementFromPoint", "centerX", "Rectangle", "from", "center", "x", "isRTL", "lastElementChild", "previousSibling", "lastChild", "noScroll", "pageXOffset", "pageYOffset", "DragHelperTranslate", "Delayable", "configurable", "positioning", "skipUpdatingElement", "initTranslateDrag", "isElementDraggable", "targetSelector", "grabTranslateDrag", "getTarget", "startPageX", "startPageY", "startClientX", "startClientY", "getX", "parseFloat", "getTranslateX", "getY", "getTranslateY", "getXY", "offsetLeft", "offsetTop", "getTranslateXY", "setXY", "y", "startTranslateDrag", "proxySelector", "dragWithin", "cloneTarget", "document", "body", "grabbed", "grabbedParent", "elementToClone", "querySelector", "proxyX", "proxyY", "createProxy", "proxyRect", "dragWithinX", "dragWithinY", "localX", "localY", "hideOriginalElement", "grabbedNextSibling", "elementStartX", "elementStartY", "elementX", "getOffsetX", "elementY", "getOffsetY", "scrollX", "scrollY", "scrollManagerElementContainsDragProxy", "updateTranslateProxy", "onTranslateDragStarted", "_relatedElements", "relatedElements", "unifiedProxy", "length", "relatedElStartPos", "relatedElDragFromPos", "originalRelatedElements", "map", "relatedEl", "i", "proxyTemplateElement", "relatedElementToDrag", "unifiedOffset", "EventHelper", "onTransitionEnd", "property", "handler", "forEach", "el", "thisObj", "once", "applyConstraints", "constrain", "globalThis", "scrollWidth", "scrollHeight", "constrainedX", "constrainedY", "scrollManagerConfig", "getRelativeLeftScroll", "getRelativeTopScroll", "snapCoordinates", "snapped", "undefined", "deltaX", "deltaY", "r", "finishTranslateDrag", "xChanged", "round", "yChanged", "ignoreSamePositionDrop", "abortTranslateDrag", "targetRect", "allowDropOutside", "right", "bottom", "finalized", "console", "warn", "isDestroyed", "transform", "_me$scrollManager", "_me$context", "scrollManager", "stopMonitoring", "aborted", "proxyMoved", "animateTo", "isConnected", "isDestroying", "waitForTransitionEnd", "getPropertyTransitionDuration", "runOnDestroy", "cleanUp", "removeClonedProxies", "removeProxyAfterDrop", "cssClassesToRemove", "rootElementListeners", "move", "up", "docclick", "touchstart", "touchmove", "touchend", "keydown", "DragHelper", "mixin", "Events", "defaultConfig", "invalidCls", "dragThreshold", "monitoringConfig", "dropTargetSelector", "dropTargetCls", "startEvent", "touchStartDelay", "clickSwallowDuration", "mouseMoveListenerElement", "testConfig", "transitionDuration", "rtlSource", "construct", "config", "initListeners", "isContainerDrag", "onScrollManagerScrollCallback", "bind", "doDestroy", "dragStartListeners", "pointerdown", "getMouseMoveListenerTarget", "on", "root", "getRootNode", "result", "nodeType", "Node", "DOCUMENT_FRAGMENT_NODE", "_this$rtlSource", "rtl", "onPointerDown", "button", "blurDetacher", "blur", "onWindowBlur", "dragListeners", "capture", "pointerType", "touchStartTimer", "setTimeout", "passive", "pointerup", "pointermove", "dragListenersDetacher", "internalMove", "_event$target", "scrollInitiated", "distance", "getDistanceBetween", "abort", "ELEMENT_NODE", "startMonitoring", "ObjectHelper", "merge", "scrollables", "callback", "outermostEl", "getOutermostElement", "querySelectorAll", "isPromise", "moveUnblocked", "_cachedMouseEvent", "update", "stopImmediatePropagation", "_this$context", "lastMouseMoveEvent", "isScroll", "onTouchMove", "onMouseMove", "scrollingPageElement", "scrollingElement", "getMouseMoveEventTarget", "scrollLeft", "scrollTop", "internallyValid", "_target", "draggedElements", "toggle", "_me$scrollManager2", "_me$scrollManager2$st", "call", "removeListeners", "_this$dragListenersDe", "_this$blurDetacher", "onTouchEnd", "onMouseUp", "onDocumentClick", "stopPropagation", "_me$scrollManager3", "finalizing", "click", "expires", "ion", "drag", "onKeyDown", "_this$context2", "key", "removeAttribute", "animateProxyTo", "alignSpec", "align", "isRectangle", "alignTo", "isDragging", "_this$context3", "_$name", "documentListeners", "down", "ResizeHelper", "resizingCls", "handleSize", "dynamicHandleSize", "reservedSpace", "touchHandleSize", "minWidth", "maxWidth", "minHeight", "maxHeight", "scroller", "allowResize", "isElementResizable", "leftHandle", "rightHandle", "topHandle", "bottomHandle", "handleSelector", "handleContainerSelector", "grab", "handleVisibilityThreshold", "skipTranslate", "direction", "BrowserHelper", "isHoverableDevice", "initResize", "updateSkipUpdatingElement", "skip", "edge", "cursorOffset", "getCursorOffsetToElementEdge", "elementWidth", "elementHeight", "startX", "startY", "_me$reset", "internalStartResize", "isTouch", "mousedown", "mousemove", "delegate", "mouseleave", "mouseup", "removeDragListeners", "_this$removeDragListe", "canResize", "grabResizeHandle", "onTouchStart", "touches", "onMouseDown", "checkResizeHandles", "onPointerUp", "_me$removeDragListene", "finishResize", "_me$reset2", "parentRectangle", "currentX", "currentY", "updateResize", "_me$scrollManager3$st", "abortResize", "coordsFrom", "getPageX", "getPageY", "overLeftHandle", "overRightHandle", "overTopHandle", "overBottomHandle", "_me$reset3", "rectEl", "currentElement", "over", "highlightHandle", "unHighlightHandle", "onMouseLeaveTarget", "allowEdgeSwitch", "updated", "getExtremalSizePX", "sign", "newWidth", "newHeight", "flex", "abs", "eventObject", "changed", "_me$reset4", "overAnyHandle", "overStartHandle", "overEndHandle", "getDynamicHandleSize", "opposite", "handleCount", "floor", "getPagePoint", "__publicField", "WidgetHelper", "getById", "id", "Widget", "fromElement", "limit", "createWidget", "isWidget", "create", "append", "widget", "Array", "isArray", "HTMLElement", "appendTo", "insertFirst", "getElementById", "firstChild", "item", "openPopup", "forElement", "html", "showContextMenu", "currentContextMenu", "destroy", "Point", "position", "internalListeners", "attachTooltip", "configOrText", "hasTooltipAttached", "resolveType", "destroyTooltipAttached", "mask", "msg", "text", "Mask", "unmask", "close", "hide", "toast", "Toast", "show", "hasOwnProperty", "prototype", "cacheKey", "setParser", "parser", "defineProperty", "value", "Default", "constructor", "formatter", "format", "defaultFormat", "parse", "strict", "defaultParse", "resolvedOptions", "Formatter", "get", "NULL", "JSON", "stringify", "cache", "fmt", "set", "_cache", "Map", "_null", "initialize", "configure", "entries", "defaults", "Parser", "String", "parseStrict", "escapeRegExp", "StringHelper", "digitsRe", "newFormatter", "locale", "Intl", "NumberFormat", "numFormatRe", "unicodeMinus", "NumberParser", "numFmt", "maximumFractionDigits", "currency", "is", "_decodeStyle", "currencyDisplay", "percent", "decimal", "replace", "grouper", "decimalRe", "stripRe", "RegExp", "decimalPlaces", "dot", "indexOf", "Number", "fmtDef", "decFmt", "zero", "zeroDec", "suffix", "startsWith", "trim", "_as", "null", "truncator", "scale", "as", "options", "template", "loc", "LocaleManager", "locales", "match", "exec", "m2", "m4", "useGrouping", "integer", "fraction", "_minMax", "change", "cacheAs", "ret", "v", "isNaN", "truncate", "substr", "name", "setMin", "setMax", "capName", "capitalize", "minimumFractionDigits", "minimumIntegerDigits", "maximumSignificantDigits", "minimumSignificantDigits", "significant", "number", "Clipboard", "hasNativeAccess", "_content", "writeText", "allowNative", "navigator", "clipboard", "e", "triggerContentChange", "readText", "triggerPaste", "source", "oldText", "fromRead", "fromWrite", "newText", "clear", "Clipboardable", "_a", "args", "bryntum", "paste", "contentChange", "onClipboardPaste", "clipboardText", "isCut", "isOwn", "compareClipboardText", "_me$handleCutData", "handleCutData", "cutData", "clearClipboard", "onClipboardContentChange", "data", "_me$_cutData", "_me$_cutData2", "_cutData", "setIsCut", "ArrayHelper", "asArray", "writeToClipboard", "params", "beforeCopy", "isString", "stringData", "stringConverter", "safeJsonStringify", "useNativeClipboard", "clipboardData", "readFromClipboard", "skipPasteTrigger", "_me$beforePaste", "transformClipboardText", "beforePaste", "clearShared", "a", "b", "regex", "stringParser", "hasClipboardData", "Month", "date", "$config", "equal", "DH", "clearTime", "Date", "month", "year", "weekStartDay", "hideNonWorkingDays", "nonWorkingDays", "sixWeeks", "updateDayNumbers", "generation", "changeDate", "isConfiguring", "updateDate", "newDate", "oldDate", "dayColumnIndex", "weekCount", "monthStart", "getFirstDateOfMonth", "monthEnd", "getLastDateOfMonth", "startWeekDay", "getDay", "endWeekDay", "yearChanged", "getFullYear", "monthChanged", "getMonth", "changes", "eventListeners", "getDate", "getWeekId", "_year", "_month", "startDayOfMonth", "endDayOfMonth", "weekBase", "calculateWeekBase", "d", "w", "m", "jan1", "dec31", "january", "getOtherMonth", "startDate", "dec31Week", "diff", "has53weeks", "getWeekStart", "week", "weekOfYear", "otherMonth", "changeYear", "setFullYear", "changeMonth", "setMonth", "_weekStartDay", "updateWeekStartDay", "_nonWorkingDays", "changeNonWorkingDays", "updateNonWorkingDays", "updateHideNonWorkingDays", "updateSixWeeks", "dayCount", "endDate", "eachDay", "fn", "dayOfMonth", "eachWeek", "weekDates", "getWeekNumber", "day", "push", "weekNo", "getCellData", "ownerMonth", "dayTime", "DayTime", "MIDNIGHT", "visibleColumnIndex", "visibleDayColumnIndex", "isNonWorking", "isHiddenDay", "columnIndex", "dayEnd", "duration", "tomorrow", "dayOfDate", "isOtherMonth", "visible", "isRowStart", "isRowEnd", "visibleColumnCount", "canonicalDayNumbers", "canonicalDay", "weekLength", "keys", "_Month", "ButtonGroup", "Container", "Rotatable", "onChildAdd", "prio", "onChildRemove", "un", "onItemToggle", "resetValueCache", "isSettingValue", "toggleGroup", "pressed", "triggerFieldChange", "userAction", "_value", "isButton", "color", "generateId", "columns", "relayEvents", "updateRotate", "rotate", "eachWidget", "btn", "values", "items", "join", "valueSeparator", "oldValue", "split", "includes", "updateDisabled", "disabled", "ignoreParentReadOnly", "readOnly", "updateReadOnly", "widgetClassList", "_ButtonGroup", "defaultType", "cls", "hideWhenEmpty", "defaultBindProperty", "initClass", "CalendarPanel", "Panel", "layout", "textContent", "showWeekNumber", "showWeekColumn", "disabledDates", "headerRenderer", "weekRenderer", "cellRenderer", "disableWeekends", "hideNonWorkingDaysCls", "tip", "dayCellCls", "dayHeaderCls", "disabledCls", "otherMonthCls", "weekendCls", "todayCls", "nonWorkingDayCls", "dayNameFormat", "minRowHeight", "minColumnWidth", "disableOtherMonthCells", "disableOtherMonthCellsCls", "hideOtherMonthCells", "hideOtherMonthCellsCls", "animateTimeShift", "refreshCount", "refresh", "onPaint", "firstPaint", "_super$onPaint", "arguments", "getConfig", "overflowElement", "weeksElement", "_this$tip", "changeMinRowHeight", "minValue", "parseInt", "getStyleValue", "updateMinRowHeight", "weekElements", "setLength", "scrollable", "overflowY", "changeMinColumnWidth", "updateMinColumnWidth", "weekdayCells", "c", "cellElements", "overflowX", "getDateFromDomEvent", "domEvent", "Element", "DateHelper", "parseKey", "dataset", "changeTip", "existingTip", "Tooltip", "reconfigure", "owner", "bodyElement", "forSelector", "updateTip", "detachListeners", "pointerOver", "updateElement", "was", "weekDayElements", "children", "updateDayNameFormat", "shortDayNames", "setDate", "dayNames", "_this$scrollable", "contentElement", "syncOverflowState", "updateHideOtherMonthCells", "_this$scrollable2", "updateDisableOtherMonthCells", "_this$scrollable3", "_localeNonWorkingDays", "weekends", "_localeWeekends", "_this$scrollable4", "currentMonth", "new", "dateChange", "onMonthDateChange", "getCell", "isVisible", "slideIn", "updateYear", "updateShowWeekNumber", "updateShowWeekColumn", "floating", "isAligning", "realign", "doRefresh", "_me$project", "timeZone", "project", "today", "TimeZoneHelper", "toTimeZone", "setHours", "cell", "cellDay", "cellClassList", "innerHTML", "setInnerText", "syncClassList", "rowIndex", "cellIndex", "lastWorkingColumn", "dates", "weekDayElement", "weekCells", "innerText", "makeKey", "isDisabledDate", "getTime", "firstVisibleDate", "lastVisibleDate", "lastDomConfig", "class", "className", "row", "visibleWeekCount", "some", "bodyConfig", "weeksContainerChildren", "tag", "reference", "fill", "scrollBarPadElement", "weekRow", "syncOptions", "ignoreRefs", "lastDate", "onTipOverCell", "updateLocalization", "YearPicker", "focusElement", "getYearButton", "startYear", "onYearClick", "clickedYear", "minYear", "maxYear", "handleTitleClick", "previous", "yearButtonCount", "endYear", "ingestYear", "isDate", "changeStartYear", "updateStartYear", "oldStartYear", "composeBody", "tbar", "widgetMap", "title", "slice", "overflow", "onAction", "weight", "itemCls", "DisplayField", "TextField", "alias", "editable", "ariaElement", "changeReadOnly", "changeEditable", "inputElement", "encodeHtml", "generateMonthNames", "getMonthNames", "dateSort", "lhs", "rhs", "valueOf", "emptyArray", "freeze", "ReadOnlyCombo", "Combo", "inputAttributes", "tabIndex", "inputValueAttr", "highlightExternalChange", "monitorResize", "triggers", "expand", "picker", "axisLock", "matchSize", "DatePicker", "delayable", "activeDate", "focusable", "prevYear", "tooltip", "prevMonth", "fields", "monthField", "select", "yearButton", "nextMonth", "nextYear", "yearPicker", "trapFocus", "positioned", "hidden", "titleClick", "minDate", "maxDate", "focusDisabledDates", "multiSelect", "selection", "v1", "v2", "equals", "editMonth", "role", "focusDescendant", "alwaysRefreshOnMonthChange", "prototypeProperties", "outOfRangeCls", "activeCls", "selectedCls", "externalCellRenderer", "internalCellRenderer", "setAttribute", "flush", "afterHide", "_this$_yearPicker", "_yearPicker", "_this$yearButton", "_this$monthField", "oldActiveCell", "betweenLesser", "_activeDate", "dateOfOldActiveCell", "syncActiveDate", "isSelected", "isSelectedDate", "isActiveDate", "isStart", "isEnd", "updateClassList", "onCellMousedown", "focus", "onCellClick", "onUIDateSelect", "lastClickedDate", "activatingEvent", "handleMultiSelect", "_selection", "DateSet", "singleRange", "size", "rangeEnds", "has", "toggleFn", "clickedRangeEnd", "ctrlKey", "rangeStartDate", "shiftKey", "start", "end", "sort", "newSize", "updateSelection", "changeSelection", "updateMultiSelect", "dateSet", "now", "onInternalKeyDown", "keyEvent", "keyName", "code", "gotoPrevMonth", "gotoNextMonth", "changeMinDate", "apply", "updateMinDate", "_yearpicker", "changeMaxDate", "updateMaxDate", "clamp", "initializingActiveDate", "isNavigating", "changeActiveDate", "oldActiveDate", "updateActiveDate", "wasActiveDate", "isPending", "activeCell", "wasActiveCell", "activeElement", "betweenLesserEqual", "gotoPrevYear", "goto", "gotoNextYear", "unit", "firstDateOfNewMonth", "lastDateOfNewMonth", "_this$_selection", "onMonthPicked", "record", "_this$focusElement", "onYearPickerRequested", "onYearPickerTitleClick", "onYearPicked", "focusWithoutScrolling", "changeYearPicker", "oldYearPicker", "_this$minDate", "_this$maxDate", "mergeConfigs", "childItems", "newData", "every", "store", "getAt", "selected", "Set", "delete", "other", "s", "k", "DateField", "PickerField", "strictParsing", "fallbackFormat", "timeFormat", "keepTime", "pickerFormat", "validateDateOnly", "back", "forward", "calendarContainerCls", "step", "stepTriggers", "scrollAction", "changePicker", "oldPicker", "pickerAlignElement", "anchor", "overlayAnchor", "onSelectionChange", "_isUserAction", "_isPickerInput", "backShiftDate", "_step", "magnitude", "onBackClick", "newValue", "forwardShiftDate", "onForwardClick", "showPicker", "focusPicker", "_picker", "pickerConfig", "setConfig", "isValid", "clearError", "setError", "transformDateValue", "isValidDate", "MS_PER_DAY", "transformTimeValue", "clone", "timeValue", "copyTimeValues", "changeMin", "updateMin", "input", "syncInvalid", "changeMax", "updateMax", "changeValue", "hasChanged", "inputting", "syncInputFieldValue", "updateValue", "changeStep", "parseDuration", "updateStep", "isEqual", "inputValue", "updateFormat", "internalOnKeyEvent", "NumberField", "Field", "largeStep", "decimalPrecision", "leadingZeroes", "spin", "changeOnSpin", "inputType", "addEventListener", "bufferedSpinChange", "buffer", "triggerChange", "acceptValue", "rawValue", "accept", "hasTextSelection", "raw", "current", "okMax", "okMin", "block", "doSpinUp", "doSpinDown", "altKey", "after", "getAfterValue", "afterValue", "_changedBySilentSpin", "applySpinChange", "silenceChange", "onFocusOut", "_me$triggers", "_me$triggers$spin", "_me$triggers$spin$cli", "formatted", "formatValue", "clickRepeater", "cancel", "lastTouchmove", "internalOnInput", "decimals", "trunc", "pos", "caretPos", "changeFormat", "repeat", "_formatter", "_lastFormat", "isMobile", "touchMoveListener", "throttled", "alt", "_me$touchMoveListener", "onInputSwipe", "screenX", "screenY", "delta", "changeLargeStep", "validity", "rangeUnderflow", "rangeOverflow", "valueIsNaN", "TimePicker", "updateSeconds", "seconds", "second", "onFieldChange", "isRefreshing", "pickerToTime", "onAmPmButtonClick", "_pm", "ref", "_super$onInternalKeyD", "triggerTimeChange", "_initialValue", "pm", "hour", "minute", "_is24Hour", "hours", "setMinutes", "setSeconds", "_min", "_max", "time", "updateInitialValue", "initialValue", "is24HourFormat", "amButton", "pmButton", "is24", "getHours", "getMinutes", "getSeconds", "label", "amPm", "onClick", "autoShow", "TimeField", "compose", "keepDate", "onTimeChange", "getMilliseconds", "maxTime", "minTime", "onPickerShow", "_this$pickerKeyDownRe", "pickerKeyDownRemover", "isRequired", "firstElementChild", "animationDelay", "_value2", "DurationField", "defaultUnit", "useAbbreviation", "allowNegative", "nullValue", "allowedUnits", "Duration", "changeAllowedUnits", "units", "updateAllowedUnits", "allowedUnitsRe", "calcValue", "toString", "_unit", "unitWithDefault", "_magnitude", "roundMagnitude", "allowDecimals", "isEmpty", "required", "internalOnChange", "oldVal", "_lastValue", "_this$triggers", "_this$triggers$spin", "_this$triggers$spin$c", "newMagnitude", "newUnit", "test", "parsedDuration", "clearable", "milliseconds", "SUPPORTED_FIELD_DATA_TYPES", "isSupportedDurationField", "field", "_field$column", "column", "emptyString", "typeName", "clsBase", "multiValueOperators", "between", "notBetween", "isIncludedIn", "isNotIncludedIn", "valueInputTypes", "textfield", "datefield", "numberfield", "durationfield", "combo", "FieldFilterPicker", "defaultValueFieldPlaceholders", "string", "list", "afterConstruct", "_fields", "_filter", "propertyPicker", "operatorPicker", "caseSensitive", "propertyFieldConfig", "operatorFieldConfig", "allPropertyPickerClasses", "allOperatorPickerClasses", "populateUIFromFilter", "changeDateFormat", "dateFormat", "L", "allChildInputs", "valueFields", "newDisabled", "newReadOnly", "updatePropertyLocked", "newPropertyLocked", "updateOperatorLocked", "newOperatorLocked", "changeOperators", "newOperators", "operators", "defaultOperators", "reduce", "outOperators", "dataType", "op", "changeFields", "newFields", "VersionHelper", "deprecate", "keyBy", "isMultiSelectValueField", "_this$_filter", "operator", "_this$propertyFieldCo", "DomClassList", "propertyLocked", "_this$operatorFieldCo", "operatorLocked", "getValueFieldConfigs", "valueFieldCls", "fieldType", "onValueChange", "filterValues", "operatorArgCount", "getValueFieldConfig", "valueFieldPlaceholders", "valueFieldCfg", "placeholder", "createOnUnmatched", "getUniqueDataValues", "filter", "populate", "index", "content", "flat", "extraValuesToInclude", "_me$_filter", "relatedDisplayField", "selectedField", "sortedValues", "fieldIsRelation", "foreignStore", "currentPropertyRelationConfig", "allRecords", "getValue", "sortStrings", "uniqueValues", "unique", "primitiveValues", "durationStr", "sortDurations", "sortNumerics", "timestamp", "localeCompare", "_this$selectedField", "_this$fields", "_this$_filter2", "propertyOptions", "fieldDef", "fieldName", "operatorOptions", "_this$store", "_this$store$modelRela", "modelRelations", "find", "foreignKey", "_this$_filter3", "updateOperators", "_operatorArgCountLookup", "operatorArgCountLookup", "buildOperatorArgCountLookup", "updateFilter", "onFilterChange", "updateStore", "newStore", "_this$_store", "_store", "onStoreRefresh", "refreshValueFields", "isMultiValue", "removeAll", "_valueFields", "refreshCaseSensitive", "_me$_filter2", "_me$_filter3", "checked", "onPropertySelect", "_event$record", "_fieldType", "refreshOperatorPicker", "onCaseSensitiveChange", "onOperatorSelect", "_event$record2", "wasMultiSelectValueField", "prevArgCount", "forceRefreshValueFields", "valueField", "fieldIndex", "queryAll", "_this$_filter4", "newFieldType", "missingValue", "_FieldFilterPicker", "empty", "argCount", "notEmpty", "boolean", "relation", "inputs", "Label", "localizableProperties", "FieldFilterPickerGroup", "validateConfig", "addFilterButton", "updateFields", "pickers", "updateFilters", "newFilters", "oldFilters", "newFilter", "_me$store", "removeFilter", "nextFilterId", "getPickerRowConfig", "changeFilters", "canManageFilter", "filterPicker", "addFilter", "appendFiltersFromStore", "updateShowAddFilterButton", "newShow", "updateAddFilterButtonText", "addFilterButtonDefaultText", "filters", "_me$filters", "canManage", "appendFilter", "getFilterPickerConfig", "limitToProperty", "getFieldFilterPickerConfig", "childPickerType", "getFieldsFromStore", "_store$fields", "fromEntries", "canDeleteFilter", "canDelete", "separatorText", "activeCheckbox", "removeButton", "icon", "allInputs", "childInputTypes", "onFilterActiveChange", "filterIndex", "getFilterIndex", "getFilterPicker", "updateStoreFilter", "onFilterPickerChange", "eventSource", "containingWidget", "getPickerRow", "_nextId", "pickerRow", "newFocusWidget", "query", "isFocusable", "removeFilterAt", "_me$store2", "onStoreFilter", "_isUpdatingStore", "storeFiltersById", "byId", "storeFilter", "filterRow", "splice", "validFilters", "f", "activateAll", "setAllActiveStatus", "deactivateAll", "newActive", "_filters", "_FieldFilterPickerGroup", "showAddFilterButton", "addFilterButtonText", "isWindows", "reverse", "MessageDialogConstructor", "Popup", "centered", "modal", "closeAction", "lazyItems", "showClass", "bbar", "okButton", "yesButton", "cancelButton", "confirm", "showDialog", "alert", "prompt", "textField", "message", "rootElement", "optionalL", "initialConfig", "promise", "Promise", "resolve", "updateShowClass", "oldShowClass", "doResolve", "isPrompt", "reject", "onCancelClick", "onOkClick", "MessageDialog", "Proxy", "prop", "instance"]
}
