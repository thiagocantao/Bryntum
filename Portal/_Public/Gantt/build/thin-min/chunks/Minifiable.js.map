{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/mixin/Hoverable.js", "../../../../Core/lib/Core/util/drag/DragTipProxy.js", "../../../../Core/lib/Core/widget/panel/PanelCollapserOverlay.js", "../../../../Core/lib/Core/widget/mixin/Minifiable.js"],
  "sourcesContent": ["import Delayable from './Delayable.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport EventHelper from '../helper/EventHelper.js';\n\n/**\n * @module Core/mixin/Hoverable\n */\n\nconst\n    EDGES = {\n        e : 'b-hover-edge',\n        t : 'b-hover-top',\n        r : 'b-hover-right',\n        b : 'b-hover-bottom',\n        l : 'b-hover-left'\n    },\n    EDGE_CLASSES = {\n        [EDGES.e] : 1,\n        [EDGES.t] : 1,\n        [EDGES.r] : 1,\n        [EDGES.b] : 1,\n        [EDGES.l] : 1\n    },\n    ZONES = {\n        t  : [EDGES.e, EDGES.t],\n        r  : [EDGES.e, EDGES.r],\n        b  : [EDGES.e, EDGES.b],\n        l  : [EDGES.e, EDGES.l],\n        tr : [EDGES.e, EDGES.t, EDGES.r],\n        bl : [EDGES.e, EDGES.b, EDGES.l],\n        tl : [EDGES.e, EDGES.t, EDGES.l],\n        br : [EDGES.e, EDGES.b, EDGES.r]\n    };\n\n/**\n * This mixin provides mouse hover tracking.\n *\n * ```javascript\n *  class Tracker extends Base.mixin(Hoverable) {\n *      hoverEnter(leaving) {\n *          // this.hoverTarget has been entered from \"leaving\"\n *          // this.hoverTarget will never be null, but leaving may be null\n *      }\n *\n *      hoverLeave(leaving) {\n *          // this.hoverTarget has been entered from \"leaving\"\n *          // this.hoverTarget may be null, but leaving will never be null\n *      }\n *\n *      hoverMove(event) {\n *          // called when a mousemove is made within a hover target\n *          // this.hoverTarget will never be null\n *      }\n *  }\n *\n *  let tracker = new Tracker({\n *      hoverRootElement : document.body,\n *      hoverSelector    : '.hoverable'\n *  });\n * ```\n *\n * @mixin\n * @internal\n */\nexport default Target => class Hoverable extends Target.mixin(Delayable) {\n    static get $name() {\n        return 'Hoverable';\n    }\n\n    //region Configs\n\n    static get configurable() {\n        return {\n            /**\n             * A CSS class to add to the {@link #config-hoverTarget target} element.\n             * @config {String}\n             */\n            hoverCls : null,\n\n            /**\n             * A CSS class to add to the {@link #config-hoverTarget target} element to enable CSS animations. This class\n             * is added after calling {@link #function-hoverEnter}.\n             * @config {String}\n             */\n            hoverAnimationCls : null,\n\n            /**\n             * A CSS class to add to the {@link #config-hoverRootElement root} element.\n             * @config {String}\n             */\n            hoverRootCls : null,\n\n            /**\n             * A CSS class to add to the {@link #config-hoverRootElement root} element when there is an active\n             * {@link #config-hoverTarget target}.\n             * @config {String}\n             */\n            hoverRootActiveCls : null,\n\n            /**\n             * The number of milliseconds to delay notification of changes in the {@link #config-hoverTarget}.\n             * @config {Number}\n             */\n            hoverDelay : null,\n\n            /**\n             * The current element that the cursor is inside as determined by `mouseover` and `mouseout`. Changes in\n             * this config trigger re-evaluation of the {@link #config-hoverSelector} to determine if there is a\n             * {@link #config-hoverTarget}.\n             * @config {HTMLElement}\n             * @private\n             */\n            hoverElement : null,\n\n            /**\n             * An element to ignore. Mouse entry into this element will not trigger a change in either of the\n             * {@link #config-hoverElement} or {@link #config-hoverTarget} values.\n             * @config {HTMLElement}\n             */\n            hoverIgnoreElement : null,\n\n            /**\n             * This property is a string containing one character for each edge that is hoverable. For example, a\n             * value of \"tb\" indicates that the top and bottom edges are hoverable.\n             * @config {String}\n             */\n            hoverEdges : null,\n\n            /**\n             * When {@link #config-hoverEdges} is used, this value determines the size (in pixels) of the edge. When\n             * the cursor is within this number of pixels of an edge listed in `hoverEdges`, the appropriate CSS class\n             * is added to the {@link #config-hoverTarget}:\n             *\n             *  - `b-hover-top`\n             *  - `b-hover-right`\n             *  - `b-hover-bottom`\n             *  - `b-hover-left`\n             *\n             * Depending on the values of `hoverEdges`, it is possible to have at most two of these classes present at\n             * any one time (when the cursor is in a corner).\n             * @config {Number}\n             * @default\n             */\n            hoverEdgeSize : 10,\n\n            /**\n             * The outer element where hover tracking will operate (attach events to it and use as root limit when\n             * looking for ancestors).\n             *\n             * A common choice for this will be `document.body`.\n             * @config {HTMLElement}\n             */\n            hoverRootElement : {\n                $config : 'nullify',\n\n                value : null\n            },\n\n            /**\n             * A selector for the [closest](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest) API to\n             * determine the actual element of interest. This selector is used to process changes to the\n             * {@link #config-hoverElement} to determine the {@link #config-hoverTarget}.\n             * @config {String}\n             */\n            hoverSelector : null,\n\n            /**\n             * The currently active hover target. This will be the same as {@link #config-hoverElement} unless there is\n             * a {@link #config-hoverSelector}.\n             * @config {HTMLElement}\n             */\n            hoverTarget : {\n                $config : 'nullify',\n\n                value : null\n            },\n\n            /**\n             * Set to `true` to include tracking of `mousemove` events for the active {@link #config-hoverTarget}. This\n             * is required for the {@link #function-hoverMove} method to be called.\n             * @config {Boolean}\n             * @default false\n             */\n            hoverTrack : null,\n\n            /**\n             * A string value containing one character per active edge (e.g., \"tr\").\n             * @config {String}\n             * @private\n             */\n            hoverZone : null\n        };\n    }\n\n    static get delayable() {\n        return {\n            setHoverTarget : 0\n        };\n    }\n\n    //endregion\n    //region State Handling\n\n    /**\n     * This method is called when the cursor enters the {@link #config-hoverTarget}. The `hoverTarget` will not be\n     * `null`.\n     * @param {HTMLElement} leaving The element that was previously the `hoverTarget`. This value may be null.\n     */\n    hoverEnter(leaving) {\n        // template\n    }\n\n    /**\n     * This method should return true if the given `element` should be ignored. By default, this is `true` if the\n     * `element` is contained inside the {@link #config-hoverIgnoreElement}.\n     * @param {HTMLElement} element\n     * @returns {Boolean}\n     * @protected\n     */\n    hoverIgnore(element) {\n        return this.hoverIgnoreElement?.contains(element);\n    }\n\n    /**\n     * This method is called when the cursor leaves the {@link #config-hoverTarget}. The `hoverTarget` may be `null`\n     * or refer to the new `hoverTarget`\n     * @param {HTMLElement} leaving The element that was previously the `hoverTarget`. This value will not be null.\n     */\n    hoverLeave(leaving) {\n        // template\n    }\n\n    /**\n     * This method is called when the mouse moves within a {@link #config-hoverTarget}, but only if enabled by the\n     * {@link #config-hoverTrack} config.\n     * @param {Event} event\n     */\n    hoverMove(event) {\n        // template\n    }\n\n    //endregion\n    //region Events\n\n    onHoverMouseMove(event) {\n        const\n            me = this,\n            { hoverEdges, hoverEdgeSize, hoverTarget } = me;\n\n        if (hoverTarget) {\n            if (hoverEdges) {\n                const\n                    { top, left, width, height, right, bottom } = hoverTarget.getBoundingClientRect(),\n                    { clientX, clientY } = event,\n                    centerX = left + width / 2,\n                    centerY = top + height / 2,\n                    t = clientY <  (hoverEdgeSize ? top    + hoverEdgeSize : centerY),\n                    r = clientX >= (hoverEdgeSize ? right  - hoverEdgeSize : centerX),\n                    b = clientY >= (hoverEdgeSize ? bottom - hoverEdgeSize : centerY),\n                    l = clientX <  (hoverEdgeSize ? left   + hoverEdgeSize : centerX),\n                    tb = ((t || b) ? (t ? 't' : 'b') : ''),\n                    rl = ((r || l) ? (r ? 'r' : 'l') : '');\n\n                me.hoverZone = (hoverEdges.includes(tb) ? tb : '') + (hoverEdges.includes(rl) ? rl : '');\n            }\n\n            me.hoverEvent = event;\n            me.hoverTrack && me.hoverMove(event);\n        }\n    }\n\n    onHoverMouseOver(event) {\n        this.hoverEvent = event;\n        this.hoverElement = event.target;\n    }\n\n    onHoverMouseOut(event) {\n        this.hoverEvent = event;\n        this.hoverElement = event.relatedTarget;\n    }\n\n    //endregion\n    //region Configs\n\n    // hoverDelay\n\n    updateHoverDelay(delay) {\n        this.setHoverTarget.delay = delay;\n    }\n\n    // hoverEdges\n\n    changeHoverEdges(edges) {\n        return (edges === true) ? 'trbl' : (edges || '').replace('v', 'tb').replace('h', 'lr');\n    }\n\n    updateHoverEdges() {\n        this.syncHoverListeners();\n    }\n\n    // hoverElement\n\n    changeHoverElement(element) {\n        if (!this.hoverIgnore(element)) {\n            return element;\n        }\n    }\n\n    updateHoverElement(hoverEl) {\n        const { hoverSelector } = this;\n\n        if (hoverSelector) {\n            hoverEl = hoverEl?.closest(hoverSelector);\n        }\n\n        this.setHoverTarget(hoverEl);  // this may be delayed\n    }\n\n    // hoverRootElement\n\n    updateHoverRootElement(rootEl, was) {\n        const { hoverRootCls } = this;\n\n        if (hoverRootCls) {\n            was?.classList.remove(hoverRootCls);\n            rootEl?.classList.add(hoverRootCls);\n        }\n\n        this.syncHoverListeners();\n    }\n\n    // hoverTarget\n\n    changeHoverTarget(hoverEl, was) {\n        if (was) {\n            this.hoverZone = null;\n        }\n\n        return hoverEl;\n    }\n\n    updateHoverTarget(hoverEl, was) {\n        const\n            me = this,\n            { hoverCls, hoverAnimationCls, hoverRootActiveCls, hoverRootElement } = me;\n\n        if (hoverRootActiveCls) {\n            hoverRootElement?.classList[hoverEl ? 'add' : 'remove'](hoverRootActiveCls);\n        }\n\n        if (was) {\n            hoverCls && was.classList.remove(hoverCls);\n            hoverAnimationCls && was.classList.remove(hoverAnimationCls);\n\n            me.hoverLeave(was);\n        }\n\n        if (hoverEl) {\n            hoverCls && hoverEl.classList.add(hoverCls);\n\n            me.hoverEnter(was);\n\n            if (me.hoverTrack) {\n                me.hoverMove(me.hoverEvent);\n            }\n\n            if (hoverAnimationCls) {\n                hoverEl.getBoundingClientRect();   // force layout so next change starts animation\n                hoverEl.classList.add(hoverAnimationCls);\n            }\n        }\n    }\n\n    // hoverTrack\n\n    updateHoverTrack() {\n        this.syncHoverListeners();\n    }\n\n    // hoverZone\n\n    updateHoverZone(zone) {\n        const { hoverAnimationCls, hoverTarget } = this;\n\n        if (hoverTarget) {\n            const\n                { className } = hoverTarget,\n                cls = DomClassList.change(className, /* add= */zone ? ZONES[zone] : null, /* remove= */EDGE_CLASSES);\n\n            if (className !== cls) {\n                hoverTarget.className = cls;\n\n                if (zone && hoverAnimationCls) {\n                    hoverTarget.classList.remove(hoverAnimationCls);\n                    hoverTarget.getBoundingClientRect();   // force layout so next change starts animation\n                    hoverTarget.classList.add(hoverAnimationCls);\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Misc\n\n    setHoverTarget(target) {\n        // this method runs later based on the hoverDelay\n        this.hoverTarget = target;\n    }\n\n    syncHoverListeners() {\n        const\n            me = this,\n            element = me.hoverRootElement,\n            listeners = {\n                element,\n                thisObj   : me,\n                mouseover : 'onHoverMouseOver',\n                mouseout  : 'onHoverMouseOut'\n            };\n\n        if (me.hoverTrack || me.hoverEdges) {\n            listeners.mousemove = 'onHoverMouseMove';\n        }\n\n        me._hoverRootDetacher?.();\n        me._hoverRootDetacher = element && EventHelper.on(listeners);\n    }\n\n    //endregion\n};\n", "import DragProxy from './DragProxy.js';\nimport Widget from '../../widget/Widget.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n\nimport '../../widget/Tooltip.js';\n\n/**\n * @module Core/util/drag/DragTipProxy\n */\n\n/**\n * This drag proxy manages a {@link #config-tooltip} (or derived class) and aligns the tooltip to the current drag\n * position adjusted by the {@link #config-align} config.\n * @extends Core/util/drag/DragProxy\n * @classtype tip\n * @internal\n */\nexport default class DragTipProxy extends DragProxy {\n    static get type() {\n        return 'tip';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Controls how the tooltip will be aligned to the current drag position.\n             *\n             * See {@link Core.helper.util.Rectangle#function-alignTo} for details.\n             * @config {String}\n             * @default\n             */\n            align : 't10-b50',\n\n            /**\n             * The number of pixels to offset from the drag position.\n             * @config {Number}\n             * @default\n             */\n            offset : 20,\n\n            /**\n             * The tooltip to be shown, hidden and repositioned to track the drag position.\n             * @config {Core.widget.Tooltip}\n             */\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n\n                value : {\n                    type : 'tooltip'\n                }\n            }\n        };\n    }\n\n    open() {\n        this.getConfig('tooltip');  // trigger creation\n    }\n\n    close() {\n        this.tooltip?.hide();\n    }\n\n    dragMove(drag) {\n        const\n            { offset, tooltip } = this,\n            { event } = drag;\n\n        if (tooltip) {\n            if (!tooltip.isVisible) {\n                tooltip.show();\n            }\n\n            tooltip.alignTo({\n                align  : this.align,\n                target : new Rectangle(event.clientX - offset, event.clientY - offset, offset * 2, offset * 2)\n            });\n        }\n    }\n\n    changeTooltip(config, existing) {\n        return Widget.reconfigure(existing, config, /* owner = */ this);\n    }\n}\n\nDragTipProxy.initClass();\n", "import Animator from '../../util/Animator.js';\nimport PanelCollapser from './PanelCollapser.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport EventHelper from '../../helper/EventHelper.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport DomClassList from '../../helper/util/DomClassList.js';\n\n/**\n * @module Core/widget/panel/PanelCollapserOverlay\n */\n\nconst\n    { dockIsHorz } = PanelCollapser.maps,\n    collapseExposeEdge = {\n        top    : 0,\n        down   : 0,\n        left   : 1,\n        bottom : 2,\n        up     : 2,\n        right  : 3\n    },\n    translateByDir = {\n        up : {\n            from : `translate(0,0)`,\n            to   : 'translate(0,-100%)'\n        },\n        down : {\n            from : `translate(0,0)`,\n            to   : 'translate(0,100%)'\n        },\n        left : {\n            from : `translate(0,0)`,\n            to   : 'translate(-100%,0)'\n        },\n        right : {\n            from : `translate(0,0)`,\n            to   : 'translate(100%,0)'\n        }\n    };\n\n/**\n * A panel collapse implementation that adds the ability to reveal the collapsed panel as a floating overlay.\n * @extends Core/widget/panel/PanelCollapser\n * @classtype overlay\n */\nexport default class PanelCollapserOverlay extends PanelCollapser.mixin(Delayable) {\n    static get $name() {\n        return 'PanelCollapserOverlay';\n    }\n\n    static get type() {\n        return 'overlay';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The number of milliseconds to wait once the mouse leaves a {@link Core.widget.Panel#config-revealed}\n             * panel before returning to an unrevealed state. Clicking outside the revealed panel will immediately\n             * return the panel to its collapsed state.\n             *\n             * This may be disabled by configuring {@link #config-autoClose} as `null`.\n             *\n             * If this value is negative, the panel will not automatically recollapse due to the mouse leaving, however,\n             * clicks outside the panel will still recollapse it.\n             *\n             * If this value is `null`, the panel will not automatically recollapse for either outside clicks or if\n             * the mouse leaves the panel.\n             * @config {Number}\n             * @default\n             */\n            autoCloseDelay : 1000,\n\n            /**\n             * By default, clicking outside the revealed overlay hides the revealed overlay.\n             *\n             * If the revealed overlay was shown using the {@link #property-recollapseTool}\n             * then moving the mouse outside of the revealed overlay hides the revealed overlay.\n             *\n             * Configure this as `false` to disable auto hiding, making overlayed\n             * state permanent, and changeable using the {@link #function-toggleReveal} method.\n             * @config {Boolean}\n             * @default\n             */\n            autoClose : true,\n\n            revealing : {\n                value   : null,\n                $config : null,\n                default : false\n            },\n\n            /**\n             * The reveal/hide tool which slides the collapsed panel over the top of the UI.\n             * @member {Core.widget.Tool} recollapseTool\n             */\n            /**\n             * The reveal/hide tool which slides the collapsed panel over the top of the UI.\n             *\n             * The `type` of this instance should not be changed but the tool instance can be\n             * configured in other ways via this config property.\n             * @config {ToolConfig|Core.widget.Tool}\n             */\n            recollapseTool : {\n                type       : 'collapsetool',\n                cls        : 'b-recollapse',\n                collapsify : 'overlay',\n\n                handler() {\n                    // NOTE: As a tool, our this pointer is the Panel so we use it to access the current collapser\n                    this.collapsible?.toggleReveal();\n                }\n            }\n        };\n    }\n\n    static get delayable() {\n        return {\n            doAutoClose : 0\n        };\n    }\n\n    doAutoClose() {\n        this.toggleReveal(false);\n    }\n\n    updateAutoCloseDelay(delay) {\n        const { doAutoClose } = this;\n\n        if (!(doAutoClose.suspended = delay == null || delay < 0)) {\n            doAutoClose.delay = delay;\n            doAutoClose.immediate = !delay;\n        }\n    }\n\n    changeRecollapseTool(tool) {\n        const\n            me = this,\n            { panel } = me;\n\n        if (me.isConfiguring || me.isDestroying || !panel || panel.isDestroying) {\n            return tool;\n        }\n\n        panel.tools = {\n            recollapse : tool\n        };\n    }\n\n    beforeCollapse(operation) {\n        if (super.beforeCollapse(operation) === false) {\n            return false;\n        }\n\n        if (this.panel.revealed) {\n            operation.animation = null;\n        }\n    }\n\n    applyHeaderDock(collapsed, flush = true) {\n        this.panel?.recompose();\n\n        super.applyHeaderDock(collapsed, flush);\n    }\n\n    collapseBegin(operation) {\n        const\n            me = this,\n            { collapseDir, innerElement } = me,\n            { animation } = operation,\n            { collapseTool, panel } = me;\n\n        me.configuredWidth = panel._lastWidth;\n        me.configuredHeight = panel._lastHeight;\n\n        me.applyHeaderDock(true);\n\n        // const innerElementRect = me.lockInnerSize();\n        me.lockInnerSize();\n\n        collapseTool?.element.classList.add('b-collapsed');\n\n        if (animation) {\n            panel.element.classList.add('b-collapsing');\n\n            animation.element = innerElement;\n            animation.transform = translateByDir[collapseDir];\n            operation.animation = Animator.run(animation);\n        }\n    }\n\n    onComplete(action) {\n        super.onComplete(action);\n\n        const\n            me          = this,\n            { panel }   = me,\n            { element } = panel;\n\n        me.autoCloseLeaveDetacher = me.autoCloseLeaveDetacher?.();\n        me.autoCloseClickDetacher = me.autoCloseClickDetacher?.();\n\n        // The act of hiding the revealed panel (\"unrevealing\") causes a mouseleave event (once the panel slides out\n        // from under the cursor) and that starts the autoClose timer. If the user then reveals the panel again within\n        // the 1sec delay (by default), the autoClose timer will still fire and unreveal the panel.\n        me.doAutoClose.cancel();\n\n        if (action === 'reveal' && me.autoClose) {\n            // Only listen for mouseleave to close if we contain focus.\n            // If we do not, then we have been revealed using the API from some other\n            // part of the UI, so mouseleave closing would not be appropriate.\n            if (panel.containsFocus) {\n                me.autoCloseLeaveDetacher = EventHelper.on({\n                    element,\n\n                    mouseenter : ev => {\n                        me.doAutoClose.cancel();\n                    },\n\n                    mouseleave : ev => {\n                        me.doAutoClose();\n                    }\n                });\n            }\n\n            me.autoCloseClickDetacher = EventHelper.on({\n                element   : document.body,\n                thisObj   : panel,\n                mousedown : ev => {\n                    // If it's a click outside of the revealed Panel, but *not* on the element which\n                    // was active when the reveal was done (because that's the toggle button)\n                    // then unreveal.\n                    if (!panel.owns(ev) && !me.revealer?.contains(ev.target) && me.autoCloseDelay != null) {\n                        me.doAutoClose.now();\n                    }\n                }\n            });\n        }\n    }\n\n    expandBegin(operation) {\n        const\n            me = this,\n            { animation } = operation,\n            { collapseDir, collapseTool, innerElement, panel } = me,\n            { element } = panel;\n\n        element.classList.remove('b-collapsed', 'b-collapsing');\n        me.restoreConfiguredSize();\n        me.lockInnerSize(false);\n        me.lockInnerSize();\n\n        collapseTool?.element.classList.remove('b-collapsed');\n\n        if (animation) {\n            element.classList.add('b-collapsed', 'b-expanding');\n\n            animation.element = innerElement;\n            animation.transform = {\n                from : translateByDir[collapseDir].to,\n                to   : translateByDir[collapseDir].from\n            };\n\n            operation.animation = Animator.run(animation);\n        }\n    }\n\n    expandEnd(operation) {\n        super.expandEnd(operation);\n\n        const { panel } = this;\n\n        if (operation.completed) {\n            panel.revealed = false;\n        }\n\n        panel.element.classList.remove('b-expanding');\n    }\n\n    expandRevert(operation) {\n        super.expandRevert(operation);\n\n        this.panel.element.classList.add('b-expanding');\n    }\n\n    get innerElement() {\n        return this.panel.overlayElement;\n    }\n\n    get innerSizeElement() {\n        return this.panel.element;\n    }\n\n    get toolsConfig() {\n        const\n            me = this,\n            { direction } = me,\n            config = super.toolsConfig,\n            tool = me.recollapseTool;\n\n        if (tool) {\n            return {\n                ...config,\n\n                recollapse : tool && ObjectHelper.assign({\n                    direction : direction.toLowerCase()\n                }, tool)\n            };\n        }\n\n        return config;\n    }\n\n    lockInnerSize(lock = true) {\n        const\n            me = this,\n            { panel } = me,\n            panelRect = lock && panel.rectangle(),  // must read this before we call super\n            inset = lock ? [0, 0, 0, 0] : '',\n            // now we can call super:\n            innerRect = super.lockInnerSize(lock);\n\n        // The panel overlay is visible because we switch to \"overflow:visible\" in collapsed state. By doing this,\n        // however, the header animation undesirably escapes as well. Fortunately, we can use the clip-path to hide\n        // this by only allowing the desired side to escape while all other sides remain clipped. Even more fortunate\n        // for us is that clip-path is expressed as an inset from the normal rectangle of the element (so we don't\n        // need to adjust it if the collapsed panel is resized), and further, unlike CSS path style, clip-path works\n        // for all elements not only absolutely positioned ones.\n        if (lock) {\n            // <remove-on-release>\n            // TODO: see if there's a way to read the box-shadow style to pick up the right value (10 is the default)\n            // </remove-on-release>\n            inset[collapseExposeEdge[me.collapseDir]] = `-${panelRect[me.collapseDim] + 10}px`;\n        }\n\n        panel.element.style.clipPath = lock ? `inset(${inset.join(' ')})` : '';\n\n        return innerRect;\n    }\n\n    onOverlayTransitionDone(ev) {\n        const\n            me = this,\n            { panel } = me;\n\n        if (ev.srcElement === panel.overlayElement && me.revealing) {\n            me.revealing = false;\n\n            me.onComplete(panel.revealed ? 'reveal' : 'unreveal');\n        }\n    }\n\n    onRevealerClick() {\n        this.toggleReveal();\n    }\n\n    /**\n     * Toggles the revealed state of the Panel to match the passed boolean flag.\n     * @param {Boolean} [state]  If not specified, this method toggles current state. Otherwise, pass `true` to reveal\n     * the overlay, or `false` to hide it.\n     */\n    toggleReveal(state) {\n        const\n            { panel }   = this,\n            { element } = panel;\n\n        if (panel.collapsed) {\n            this.revealer = DomHelper.getActiveElement(element);\n\n            if (state == null) {\n                state = !panel.revealed;\n            }\n\n            if (panel.revealed !== state && panel.trigger('beforeToggleReveal', { reveal : state }) !== false) {\n                // This is essentially a hide, so move focus back to whence it came\n                if (!state && element.contains(this.revealer)) {\n                    panel.revertFocus(true);\n                }\n                this.revealing = true;\n                panel.revealed = state;\n            }\n        }\n    }\n\n    updateRevealing(value) {\n        const\n            me = this,\n            horzDirRe = /left|right/i,\n            { panel } = me,\n            dim = horzDirRe.test(me.collapseDir) ? 'height' : 'width';\n\n        if (panel) {\n            me.innerElement.style[dim] = '0px';\n            me.innerElement.style[`min-${dim}`] = '100%';\n\n            panel.element.classList[value ? 'add' : 'remove']('b-panel-overlay-revealing');\n        }\n    }\n\n    wrapCollapser(key, body) {\n        const\n            me = this,\n            { collapseDir, panel } = me,\n            { expandedHeaderDock, header, uiClassList } = panel,\n            recollapse = panel.tools?.recollapse,\n            [before, after] = me.splitHeaderItems({ as : 'element', dock : me.collapseDock }),\n            horz = dockIsHorz[expandedHeaderDock],\n            title = panel.hasHeader ? (panel.title || header?.title || '\\xA0') : null;\n\n        if (recollapse) {\n            recollapse.direction = collapseDir;\n        }\n\n        return [\n            'overlayElement',\n            {\n                class : {\n                    ...uiClassList,\n                    [`b-panel-overlay-header-${expandedHeaderDock}`] : 1,\n                    [`b-panel-overlay-${collapseDir}`]               : 1,\n                    [`b-${horz ? 'h' : 'v'}box`]                     : 1,\n                    'b-panel-overlay'                                : 1,\n                    'b-box-center'                                   : 1\n                },\n\n                // internalListeners is not correct for element listeners in domConfigs\n                listeners : {  // eslint-disable-line bryntum/no-listeners-in-lib\n                    transitionend : ev => me.onOverlayTransitionDone(ev)\n                },\n\n                children : {\n                    overlayHeaderElement : title && {\n                        tag   : 'header',\n                        class : new DomClassList({\n                            ...uiClassList,\n                            [`b-dock-${expandedHeaderDock}`] : 1,\n                            'b-panel-header'                 : 1,\n                            'b-panel-overlay-header'         : 1\n                        }, header?.cls),\n\n                        children : [\n                            ...before,\n                            {\n                                reference : 'overlayTitleElement',\n                                html      : title,\n                                class     : {\n                                    ...uiClassList,\n                                    [`b-align-${header?.titleAlign || 'start'}`] : 1,\n                                    'b-header-title'                             : 1\n                                }\n                            },\n                            ...after\n                        ]\n                    },\n\n                    [key] : body\n                }\n            }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nPanelCollapserOverlay.initClass();\n", "import Base from '../../Base.js';\n\n/**\n * @module Core/widget/mixin/Minifiable\n */\n\n/**\n * Mixin for widgets that can present in a full and minified form. This behavior is used in\n * {@link Core.widget.Toolbar#config-overflow} handling.\n *\n * @mixin\n * @internal\n */\nexport default Target => class Minifiable extends (Target || Base) {\n    static $name = 'Minifiable';\n\n    static configurable = {\n        /**\n         * Set to `false` to prevent this widget from assuming its {@link #config-minified} form automatically (for\n         * example, due to {@link Core.widget.Toolbar#config-overflow} handling.\n         *\n         * When this value is `true` (the default), the minifiable widget's {@link #config-minified} config may be\n         * set to `true` to reduce toolbar overflow.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        minifiable : true,\n\n        /**\n         * Set to `true` to present this widget in its minimal form.\n         * @config {Boolean}\n         * @default false\n         */\n        minified : null\n    };\n\n    compose() {\n        const { minified } = this;\n\n        return {\n            class : {\n                'b-minified' : minified\n            }\n        };\n    }\n\n    get widgetClass() {}\n};\n"],
  "mappings": "4YAMA,MACIA,EAAQ,CACJC,EAAI,eACJC,EAAI,cACJC,EAAI,gBACJC,EAAI,iBACJC,EAAI,gBAERC,EAAe,CACX,CAACN,EAAMC,CAAC,EAAI,EACZ,CAACD,EAAME,CAAC,EAAI,EACZ,CAACF,EAAMG,CAAC,EAAI,EACZ,CAACH,EAAMI,CAAC,EAAI,EACZ,CAACJ,EAAMK,CAAC,EAAI,GAEhBE,EAAQ,CACJL,EAAK,CAACF,EAAMC,EAAGD,EAAME,CAAC,EACtBC,EAAK,CAACH,EAAMC,EAAGD,EAAMG,CAAC,EACtBC,EAAK,CAACJ,EAAMC,EAAGD,EAAMI,CAAC,EACtBC,EAAK,CAACL,EAAMC,EAAGD,EAAMK,CAAC,EACtBG,GAAK,CAACR,EAAMC,EAAGD,EAAME,EAAGF,EAAMG,CAAC,EAC/BM,GAAK,CAACT,EAAMC,EAAGD,EAAMI,EAAGJ,EAAMK,CAAC,EAC/BK,GAAK,CAACV,EAAMC,EAAGD,EAAME,EAAGF,EAAMK,CAAC,EAC/BM,GAAK,CAACX,EAAMC,EAAGD,EAAMI,EAAGJ,EAAMG,CAAC,GAgCvC,IAAAS,EAAeC,GAAU,cAAwBA,EAAOC,MAAMC,CAAS,CAAE,CACrE,WAAWC,OAAQ,CACf,MAAO,WACX,CAEA,WAAWC,cAAe,CACtB,MAAO,CAKHC,SAAW,KAMXC,kBAAoB,KAKpBC,aAAe,KAMfC,mBAAqB,KAKrBC,WAAa,KAQbC,aAAe,KAMfC,mBAAqB,KAMrBC,WAAa,KAgBbC,cAAgB,GAQhBC,iBAAmB,CACfC,QAAU,UACVC,MAAQ,MAQZC,cAAgB,KAMhBC,YAAc,CACVH,QAAU,UACVC,MAAQ,MAQZG,WAAa,KAMbC,UAAY,KAEpB,CACA,WAAWC,WAAY,CACnB,MAAO,CACHC,eAAiB,EAEzB,CAQAC,WAAWC,EAAS,CAChB,CASJC,YAAYC,EAAS,CAAA,IAAAC,EACjB,OAAAA,EAAO,KAAKhB,sBAAkB,MAAAgB,IAAA,OAAA,OAAvBA,EAAyBC,SAASF,CAAO,CACpD,CAMAG,WAAWL,EAAS,CAChB,CAOJM,UAAUC,EAAO,CACb,CAIJC,iBAAiBD,EAAO,CACpB,MACIE,EAAK,KACL,CAAErB,WAAAA,EAAYC,cAAAA,EAAeK,YAAAA,CAAY,EAAIe,EACjD,GAAIf,EAAa,CACb,GAAIN,EAAY,CACZ,KACI,CAAEsB,IAAAA,EAAKC,KAAAA,EAAMC,MAAAA,EAAOC,OAAAA,EAAQC,MAAAA,EAAOC,OAAAA,CAAO,EAAIrB,EAAYsB,sBAAqB,EAC/E,CAAEC,QAAAA,EAASC,QAAAA,CAAQ,EAAIX,EACvBY,EAAUR,EAAOC,EAAQ,EACzBQ,EAAUV,EAAMG,EAAS,EACzBhD,EAAIqD,GAAY7B,EAAgBqB,EAASrB,EAAgB+B,GACzDtD,EAAImD,IAAY5B,EAAgByB,EAASzB,EAAgB8B,GACzDpD,EAAImD,IAAY7B,EAAgB0B,EAAS1B,EAAgB+B,GACzDpD,EAAIiD,GAAY5B,EAAgBsB,EAAStB,EAAgB8B,GACzDE,EAAOxD,GAAKE,EAAMF,EAAI,IAAM,IAAO,GACnCyD,EAAOxD,GAAKE,EAAMF,EAAI,IAAM,IAAO,GACvC2C,EAAGb,WAAaR,EAAWmC,SAASF,CAAE,EAAIA,EAAK,KAAOjC,EAAWmC,SAASD,CAAE,EAAIA,EAAK,IAEzFb,EAAGe,WAAajB,EAChBE,EAAGd,YAAcc,EAAGH,UAAUC,CAAK,EAE3C,CACAkB,iBAAiBlB,EAAO,CACpB,KAAKiB,WAAajB,EAClB,KAAKrB,aAAeqB,EAAMmB,MAC9B,CACAC,gBAAgBpB,EAAO,CACnB,KAAKiB,WAAajB,EAClB,KAAKrB,aAAeqB,EAAMqB,aAC9B,CAIAC,iBAAiBC,EAAO,CACpB,KAAKhC,eAAegC,MAAQA,CAChC,CAEAC,iBAAiBC,EAAO,CACpB,OAAQA,IAAU,GAAQ,QAAUA,GAAS,IAAIC,QAAQ,IAAK,IAAI,EAAEA,QAAQ,IAAK,IAAI,CACzF,CACAC,kBAAmB,CACf,KAAKC,mBAAkB,CAC3B,CAEAC,mBAAmBlC,EAAS,CACxB,GAAI,CAAC,KAAKD,YAAYC,CAAO,EACzB,OAAOA,CAEf,CACAmC,mBAAmBC,EAAS,CACxB,KAAM,CAAE7C,cAAAA,CAAc,EAAI,KAC1B,GAAIA,EAAe,CAAA,IAAA8C,EACfD,GAAOC,EAAGD,KAAOC,MAAAA,IAAPA,OAAAA,OAAAA,EAASC,QAAQ/C,CAAa,EAE5C,KAAKK,eAAewC,CAAO,CAC/B,CAEAG,uBAAuBC,EAAQC,EAAK,CAChC,KAAM,CAAE5D,aAAAA,CAAa,EAAI,KACrBA,IACA4D,GAAG,MAAHA,EAAKC,UAAUC,OAAO9D,CAAY,EAClC2D,GAAM,MAANA,EAAQE,UAAUE,IAAI/D,CAAY,GAEtC,KAAKoD,mBAAkB,CAC3B,CAEAY,kBAAkBT,EAASK,EAAK,CAC5B,OAAIA,IACA,KAAK/C,UAAY,MAEd0C,CACX,CACAU,kBAAkBV,EAASK,EAAK,CAC5B,MACIlC,EAAK,KACL,CAAE5B,SAAAA,EAAUC,kBAAAA,EAAmBE,mBAAAA,EAAoBM,iBAAAA,CAAiB,EAAImB,EACxEzB,IACAM,GAAAA,MAAAA,EAAkBsD,UAAUN,EAAU,MAAQ,QAAQ,EAAEtD,CAAkB,GAE1E2D,IACA9D,GAAY8D,EAAIC,UAAUC,OAAOhE,CAAQ,EACzCC,GAAqB6D,EAAIC,UAAUC,OAAO/D,CAAiB,EAC3D2B,EAAGJ,WAAWsC,CAAG,GAEjBL,IACAzD,GAAYyD,EAAQM,UAAUE,IAAIjE,CAAQ,EAC1C4B,EAAGV,WAAW4C,CAAG,EACblC,EAAGd,YACHc,EAAGH,UAAUG,EAAGe,UAAU,EAE1B1C,IACAwD,EAAQtB,sBAAqB,EAC7BsB,EAAQM,UAAUE,IAAIhE,CAAiB,GAGnD,CAEAmE,kBAAmB,CACf,KAAKd,mBAAkB,CAC3B,CAEAe,gBAAgBC,EAAM,CAClB,KAAM,CAAErE,kBAAAA,EAAmBY,YAAAA,CAAY,EAAI,KAC3C,GAAIA,EAAa,CACb,KACI,CAAE0D,UAAAA,CAAU,EAAI1D,EAChB2D,EAAMC,EAAaC,OAAOH,EAAqBD,EAAOjF,EAAMiF,CAAI,EAAI,KAAmBlF,CAAY,EACnGmF,IAAcC,IACd3D,EAAY0D,UAAYC,EACpBF,GAAQrE,IACRY,EAAYkD,UAAUC,OAAO/D,CAAiB,EAC9CY,EAAYsB,sBAAqB,EACjCtB,EAAYkD,UAAUE,IAAIhE,CAAiB,IAI3D,CAGAgB,eAAe4B,EAAQ,CAEnB,KAAKhC,YAAcgC,CACvB,CACAS,oBAAqB,CAAA,IAAAqB,EACjB,MACI/C,EAAK,KACLP,EAAUO,EAAGnB,iBACbmE,EAAY,CACRvD,QAAAA,EACAwD,QAAYjD,EACZkD,UAAY,mBACZC,SAAY,oBAEhBnD,EAAGd,YAAcc,EAAGrB,cACpBqE,EAAUI,UAAY,qBAE1BL,EAAA/C,EAAGqD,sBAAkB,MAAAN,IAAA,QAArBA,EAAAO,KAAAtD,CAAwB,EACxBA,EAAGqD,mBAAqB5D,GAAW8D,EAAYC,GAAGR,CAAS,CAC/D,CAEJ,ECvVe,MAAMS,UAAqBC,CAAU,CAChD,WAAWC,MAAO,CACd,MAAO,KACX,CACA,WAAWxF,cAAe,CACtB,MAAO,CAQHyF,MAAQ,UAMRC,OAAS,GAKTC,QAAU,CACNhF,QAAU,CAAC,OAAQ,SAAS,EAC5BC,MAAQ,CACJ4E,KAAO,SACX,CACJ,EAER,CACAI,MAAO,CACH,KAAKC,UAAU,SAAS,CAC5B,CACAC,OAAQ,CAAA,IAAAC,GACJA,EAAI,KAACJ,WAAO,MAAAI,IAAA,QAAZA,EAAcC,KAAI,CACtB,CACAC,SAASC,EAAM,CACX,KACI,CAAER,OAAAA,EAAQC,QAAAA,CAAQ,EAAI,KACtB,CAAEhE,MAAAA,CAAM,EAAIuE,EACZP,IACKA,EAAQQ,WACTR,EAAQS,KAAI,EAEhBT,EAAQU,QAAQ,CACZZ,MAAS,KAAKA,MACd3C,OAAS,IAAIwD,EAAU3E,EAAMU,QAAUqD,EAAQ/D,EAAMW,QAAUoD,EAAQA,EAAS,EAAGA,EAAS,CAAC,CACjG,CAAC,EAET,CACAa,cAAcC,EAAQC,EAAU,CAC5B,OAAOC,EAAOC,YAAYF,EAAUD,EAAsB,IAAI,CAClE,CACJ,CACAlB,EAAasB,UAAS,EACtBtB,EAAauB,OAAS,eC7DtB,KACI,CAAEC,WAAAA,GAAeC,EAAeC,KAChCC,EAAqB,CACjBnF,IAAS,EACToF,KAAS,EACTnF,KAAS,EACTI,OAAS,EACTgF,GAAS,EACTjF,MAAS,GAEbkF,EAAiB,CACbD,GAAK,CACDE,KAAQ,iBACRC,GAAO,sBAEXJ,KAAO,CACHG,KAAQ,iBACRC,GAAO,qBAEXvF,KAAO,CACHsF,KAAQ,iBACRC,GAAO,sBAEXpF,MAAQ,CACJmF,KAAQ,iBACRC,GAAO,mBACX,GAOO,MAAMC,UAA8BR,EAAelH,MAAMC,CAAS,CAAE,CAC/E,WAAWC,OAAQ,CACf,MAAO,uBACX,CACA,WAAWyF,MAAO,CACd,MAAO,SACX,CACA,WAAWxF,cAAe,CACtB,MAAO,CAgBHwH,eAAiB,IAYjBC,UAAY,GACZC,UAAY,CACR9G,MAAU,KACVD,QAAU,KACVgH,QAAU,IAadC,eAAiB,CACbpC,KAAa,eACbf,IAAa,eACboD,WAAa,UACbC,SAAU,CAAA,IAAAC,GAENA,EAAI,KAACC,eAAW,MAAAD,IAAA,QAAhBA,EAAkBE,aAAY,CAClC,CACJ,EAER,CACA,WAAWhH,WAAY,CACnB,MAAO,CACHiH,YAAc,EAEtB,CACAA,aAAc,CACV,KAAKD,aAAa,EAAK,CAC3B,CACAE,qBAAqBjF,EAAO,CACxB,KAAM,CAAEgF,YAAAA,CAAY,EAAI,MAClBA,EAAYE,UAAYlF,GAAS,MAAQA,EAAQ,KACnDgF,EAAYhF,MAAQA,EACpBgF,EAAYG,UAAY,CAACnF,EAEjC,CACAoF,qBAAqBC,EAAM,CACvB,MACI1G,EAAK,KACL,CAAE2G,MAAAA,CAAM,EAAI3G,EAChB,GAAIA,EAAG4G,eAAiB5G,EAAG6G,cAAgB,CAACF,GAASA,EAAME,aACvD,OAAOH,EAEXC,EAAMG,MAAQ,CACVC,WAAaL,EAErB,CACAM,eAAeC,EAAW,CACtB,GAAI,MAAMD,eAAeC,CAAS,IAAM,GACpC,MAAO,GAEP,KAAKN,MAAMO,WACXD,EAAUE,UAAY,KAE9B,CACAC,gBAAgBC,EAAWC,EAAQ,GAAM,CAAA,IAAAC,GACrCA,EAAI,KAACZ,SAAK,MAAAY,IAAA,QAAVA,EAAYC,UAAS,EACrB,MAAMJ,gBAAgBC,EAAWC,CAAK,CAC1C,CACAG,cAAcR,EAAW,CACrB,MACIjH,EAAK,KACL,CAAE0H,YAAAA,EAAaC,aAAAA,CAAa,EAAI3H,EAChC,CAAEmH,UAAAA,CAAU,EAAIF,EAChB,CAAEW,aAAAA,EAAcjB,MAAAA,CAAM,EAAI3G,EAC9BA,EAAG6H,gBAAkBlB,EAAMmB,WAC3B9H,EAAG+H,iBAAmBpB,EAAMqB,YAC5BhI,EAAGoH,gBAAgB,EAAI,EAEvBpH,EAAGiI,cAAa,EAChBL,GAAAA,MAAAA,EAAcnI,QAAQ0C,UAAUE,IAAI,aAAa,EAC7C8E,IACAR,EAAMlH,QAAQ0C,UAAUE,IAAI,cAAc,EAC1C8E,EAAU1H,QAAUkI,EACpBR,EAAUe,UAAY3C,EAAemC,CAAW,EAChDT,EAAUE,UAAYgB,EAASC,IAAIjB,CAAS,EAEpD,CACAkB,WAAWC,EAAQ,CAAA,IAAAC,EAAAC,EACf,MAAMH,WAAWC,CAAM,EACvB,MACItI,EAAc,KACd,CAAE2G,MAAAA,CAAM,EAAM3G,EACd,CAAEP,QAAAA,CAAQ,EAAIkH,EAClB3G,EAAGyI,wBAAsBF,EAAGvI,EAAGyI,0BAAsBF,MAAAA,IAAA,OAAA,OAAzBA,EAAAjF,KAAAtD,CAA4B,EACxDA,EAAG0I,wBAAsBF,EAAGxI,EAAG0I,0BAAsBF,MAAAA,IAAA,OAAA,OAAzBA,EAAAlF,KAAAtD,CAA4B,EAIxDA,EAAGqG,YAAYsC,OAAM,EACjBL,IAAW,UAAYtI,EAAG4F,YAItBe,EAAMiC,gBACN5I,EAAGyI,uBAAyBlF,EAAYC,GAAG,CACvC/D,QAAAA,EACAoJ,WAAaC,GAAM,CACf9I,EAAGqG,YAAYsC,OAAM,GAEzBI,WAAaD,GAAM,CACf9I,EAAGqG,YAAW,CAClB,CACJ,CAAC,GAELrG,EAAG0I,uBAAyBnF,EAAYC,GAAG,CACvC/D,QAAYuJ,SAASC,KACrBhG,QAAY0D,EACZuC,UAAYJ,GAAM,CAAA,IAAAK,EAIV,CAACxC,EAAMyC,KAAKN,CAAE,GAAK,GAAAK,EAACnJ,EAAGqJ,YAAQ,MAAAF,IAAA,QAAXA,EAAaxJ,SAASmJ,EAAG7H,MAAM,IAAKjB,EAAG2F,gBAAkB,MAC7E3F,EAAGqG,YAAYiD,IAAG,CAE1B,CACJ,CAAC,EAET,CACAC,YAAYtC,EAAW,CACnB,MACIjH,EAAK,KACL,CAAEmH,UAAAA,CAAU,EAAIF,EAChB,CAAES,YAAAA,EAAaE,aAAAA,EAAcD,aAAAA,EAAchB,MAAAA,CAAM,EAAI3G,EACrD,CAAEP,QAAAA,CAAQ,EAAIkH,EAClBlH,EAAQ0C,UAAUC,OAAO,cAAe,cAAc,EACtDpC,EAAGwJ,sBAAqB,EACxBxJ,EAAGiI,cAAc,EAAK,EACtBjI,EAAGiI,cAAa,EAChBL,GAAAA,MAAAA,EAAcnI,QAAQ0C,UAAUC,OAAO,aAAa,EAChD+E,IACA1H,EAAQ0C,UAAUE,IAAI,cAAe,aAAa,EAClD8E,EAAU1H,QAAUkI,EACpBR,EAAUe,UAAY,CAClB1C,KAAOD,EAAemC,CAAW,EAAEjC,GACnCA,GAAOF,EAAemC,CAAW,EAAElC,MAEvCyB,EAAUE,UAAYgB,EAASC,IAAIjB,CAAS,EAEpD,CACAsC,UAAUxC,EAAW,CACjB,MAAMwC,UAAUxC,CAAS,EACzB,KAAM,CAAEN,MAAAA,CAAM,EAAI,KACdM,EAAUyC,YACV/C,EAAMO,SAAW,IAErBP,EAAMlH,QAAQ0C,UAAUC,OAAO,aAAa,CAChD,CACAuH,aAAa1C,EAAW,CACpB,MAAM0C,aAAa1C,CAAS,EAC5B,KAAKN,MAAMlH,QAAQ0C,UAAUE,IAAI,aAAa,CAClD,CACA,IAAIsF,cAAe,CACf,OAAO,KAAKhB,MAAMiD,cACtB,CACA,IAAIC,kBAAmB,CACnB,OAAO,KAAKlD,MAAMlH,OACtB,CACA,IAAIqK,aAAc,CACd,MACI9J,EAAK,KACL,CAAE+J,UAAAA,CAAU,EAAI/J,EAChB2E,EAAS,MAAMmF,YACfpD,EAAO1G,EAAG+F,eACd,OAAIW,EACO,CACH,GAAG/B,EACHoC,WAAaL,GAAQsD,EAAaC,OAAO,CACrCF,UAAYA,EAAUG,YAAW,CACrC,EAAGxD,CAAI,GAGR/B,CACX,CACAsD,cAAckC,EAAO,GAAM,CACvB,MACInK,EAAK,KACL,CAAE2G,MAAAA,CAAM,EAAI3G,EACZoK,EAAYD,GAAQxD,EAAM0D,UAAS,EACnCC,EAAQH,EAAO,CAAC,EAAG,EAAG,EAAG,CAAC,EAAI,GAE9BI,EAAY,MAAMtC,cAAckC,CAAI,EAOxC,OAAIA,IACAG,EAAMlF,EAAmBpF,EAAG0H,WAAW,CAAC,EAAK,IAAG0C,EAAUpK,EAAGwK,WAAW,EAAI,QAEhF7D,EAAMlH,QAAQgL,MAAMC,SAAWP,EAAQ,SAAQG,EAAMK,KAAK,GAAG,KAAO,GAC7DJ,CACX,CACAK,wBAAwB9B,EAAI,CACxB,MACI9I,EAAK,KACL,CAAE2G,MAAAA,CAAM,EAAI3G,EACZ8I,EAAG+B,aAAelE,EAAMiD,gBAAkB5J,EAAG6F,YAC7C7F,EAAG6F,UAAY,GACf7F,EAAGqI,WAAW1B,EAAMO,SAAW,SAAW,UAAU,EAE5D,CACA4D,iBAAkB,CACd,KAAK1E,aAAY,CACrB,CAMAA,aAAa2E,EAAO,CAChB,KACI,CAAEpE,MAAAA,CAAM,EAAM,KACd,CAAElH,QAAAA,CAAQ,EAAIkH,EACdA,EAAMU,YACN,KAAKgC,SAAW2B,EAAUC,iBAAiBxL,CAAO,EAC9CsL,GAAS,OACTA,EAAQ,CAACpE,EAAMO,UAEfP,EAAMO,WAAa6D,GAASpE,EAAMuE,QAAQ,qBAAsB,CAAEC,OAASJ,EAAO,IAAM,KAEpF,CAACA,GAAStL,EAAQE,SAAS,KAAK0J,QAAQ,GACxC1C,EAAMyE,YAAY,EAAI,EAE1B,KAAKvF,UAAY,GACjBc,EAAMO,SAAW6D,GAG7B,CACAM,gBAAgBtM,EAAO,CACnB,MACIiB,EAAK,KACLsL,EAAY,cACZ,CAAE3E,MAAAA,CAAM,EAAI3G,EACZuL,EAAMD,EAAUE,KAAKxL,EAAG0H,WAAW,EAAI,SAAW,QAClDf,IACA3G,EAAG2H,aAAa8C,MAAMc,CAAG,EAAI,MAC7BvL,EAAG2H,aAAa8C,MAAO,OAAMc,GAAK,EAAI,OACtC5E,EAAMlH,QAAQ0C,UAAUpD,EAAQ,MAAQ,QAAQ,EAAE,2BAA2B,EAErF,CACA0M,cAAcC,EAAKzC,EAAM,CAAA,IAAA0C,EACrB,MACI3L,EAAK,KACL,CAAE0H,YAAAA,EAAaf,MAAAA,CAAM,EAAI3G,EACzB,CAAE4L,mBAAAA,EAAoBC,OAAAA,EAAQC,YAAAA,CAAY,EAAInF,EAC9CI,GAAU4E,EAAGhF,EAAMG,SAAK,MAAA6E,IAAA,OAAA,OAAXA,EAAa5E,WAC1B,CAACgF,EAAQC,CAAK,EAAIhM,EAAGiM,iBAAiB,CAAEC,GAAK,UAAWC,KAAOnM,EAAGoM,YAAa,CAAC,EAChFC,EAAOpH,EAAW2G,CAAkB,EACpCU,EAAQ3F,EAAM4F,UAAa5F,EAAM2F,QAAST,GAAAA,KAAM,OAANA,EAAQS,QAAS,OAAU,KACzE,OAAIvF,IACAA,EAAWgD,UAAYrC,GAEpB,CACH,iBACA,CACI8E,MAAQ,CACJ,GAAGV,EACH,CAAE,0BAAyBF,GAAoB,EAAI,EACnD,CAAE,mBAAkBlE,GAAa,EAAkB,EACnD,CAAE,KAAI2E,EAAO,IAAM,QAAQ,EAAwB,EACnD,kBAAmD,EACnD,eAAmD,GAGvDrJ,UAAY,CACRyJ,cAAgB3D,GAAM9I,EAAG4K,wBAAwB9B,CAAE,GAEvD4D,SAAW,CACPC,qBAAuBL,GAAS,CAC5BM,IAAQ,SACRJ,MAAQ,IAAI3J,EAAa,CACrB,GAAGiJ,EACH,CAAE,UAASF,GAAoB,EAAI,EACnC,iBAAmC,EACnC,yBAAmC,GACpCC,GAAAA,KAAM,OAANA,EAAQjJ,GAAG,EACd8J,SAAW,CACP,GAAGX,EACH,CACIc,UAAY,sBACZC,KAAYR,EACZE,MAAY,CACR,GAAGV,EACH,CAAE,YAAUD,GAAM,KAAA,OAANA,EAAQkB,aAAc,SAAS,EAAI,EAC/C,iBAA+C,CACnD,GAEJ,GAAGf,CAAK,GAGhB,CAACN,CAAG,EAAIzC,CACZ,CACJ,CAAC,CAET,CACJ,CAEAvD,EAAsBX,UAAS,EAC/BW,EAAsBV,OAAS,wBCvX/B,IAAAgI,EAAejP,GAAM,OAAI,OAAAkP,EAAA,cAA0BlP,GAAUmP,EAAM,CAqB/DC,SAAU,CACN,KAAM,CAAEC,SAAAA,CAAS,EAAI,KACrB,MAAO,CACHZ,MAAQ,CACJ,aAAeY,CACnB,EAER,CACA,IAAIC,aAAc,CAAA,CACtB,EA7BIC,EADqBL,EACd/O,QAAQ,cACfoP,EAFqBL,EAEd9O,eAAe,CAWlBoP,WAAa,GAMbH,SAAW,OAnBMH",
  "names": ["EDGES", "e", "t", "r", "b", "l", "EDGE_CLASSES", "ZONES", "tr", "bl", "tl", "br", "Hoverable", "Target", "mixin", "Delayable", "$name", "configurable", "hoverCls", "hoverAnimationCls", "hoverRootCls", "hoverRootActiveCls", "hoverDelay", "hoverElement", "hoverIgnoreElement", "hoverEdges", "hoverEdgeSize", "hoverRootElement", "$config", "value", "hoverSelector", "hoverTarget", "hoverTrack", "hoverZone", "delayable", "setHoverTarget", "hoverEnter", "leaving", "hoverIgnore", "element", "_this$hoverIgnoreElem", "contains", "hoverLeave", "hoverMove", "event", "onHoverMouseMove", "me", "top", "left", "width", "height", "right", "bottom", "getBoundingClientRect", "clientX", "clientY", "centerX", "centerY", "tb", "rl", "includes", "hoverEvent", "onHoverMouseOver", "target", "onHoverMouseOut", "relatedTarget", "updateHoverDelay", "delay", "changeHoverEdges", "edges", "replace", "updateHoverEdges", "syncHoverListeners", "changeHoverElement", "updateHoverElement", "hoverEl", "_hoverEl", "closest", "updateHoverRootElement", "rootEl", "was", "classList", "remove", "add", "changeHoverTarget", "updateHoverTarget", "updateHoverTrack", "updateHoverZone", "zone", "className", "cls", "DomClassList", "change", "_me$_hoverRootDetache", "listeners", "thisObj", "mouseover", "mouseout", "mousemove", "_hoverRootDetacher", "call", "EventHelper", "on", "DragTipProxy", "DragProxy", "type", "align", "offset", "tooltip", "open", "getConfig", "close", "_this$tooltip", "hide", "dragMove", "drag", "isVisible", "show", "alignTo", "Rectangle", "changeTooltip", "config", "existing", "Widget", "reconfigure", "initClass", "_$name", "dockIsHorz", "PanelCollapser", "maps", "collapseExposeEdge", "down", "up", "translateByDir", "from", "to", "PanelCollapserOverlay", "autoCloseDelay", "autoClose", "revealing", "default", "recollapseTool", "collapsify", "handler", "_this$collapsible", "collapsible", "toggleReveal", "doAutoClose", "updateAutoCloseDelay", "suspended", "immediate", "changeRecollapseTool", "tool", "panel", "isConfiguring", "isDestroying", "tools", "recollapse", "beforeCollapse", "operation", "revealed", "animation", "applyHeaderDock", "collapsed", "flush", "_this$panel", "recompose", "collapseBegin", "collapseDir", "innerElement", "collapseTool", "configuredWidth", "_lastWidth", "configuredHeight", "_lastHeight", "lockInnerSize", "transform", "Animator", "run", "onComplete", "action", "_me$autoCloseLeaveDet", "_me$autoCloseClickDet", "autoCloseLeaveDetacher", "autoCloseClickDetacher", "cancel", "containsFocus", "mouseenter", "ev", "mouseleave", "document", "body", "mousedown", "_me$revealer", "owns", "revealer", "now", "expandBegin", "restoreConfiguredSize", "expandEnd", "completed", "expandRevert", "overlayElement", "innerSizeElement", "toolsConfig", "direction", "ObjectHelper", "assign", "toLowerCase", "lock", "panelRect", "rectangle", "inset", "innerRect", "collapseDim", "style", "clipPath", "join", "onOverlayTransitionDone", "srcElement", "onRevealerClick", "state", "DomHelper", "getActiveElement", "trigger", "reveal", "revertFocus", "updateRevealing", "horzDirRe", "dim", "test", "wrapCollapser", "key", "_panel$tools", "expandedHeaderDock", "header", "uiClassList", "before", "after", "splitHeaderItems", "as", "dock", "collapseDock", "horz", "title", "hasHeader", "class", "transitionend", "children", "overlayHeaderElement", "tag", "reference", "html", "titleAlign", "Minifiable", "_a", "Base", "compose", "minified", "widgetClass", "__publicField", "minifiable"]
}
