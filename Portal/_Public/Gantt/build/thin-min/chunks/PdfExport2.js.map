{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/column/ResourceInfoColumn.js", "../../../../Scheduler/lib/Scheduler/feature/Labels.js", "../../../../Scheduler/lib/Scheduler/feature/RowReorder.js", "../../../../Scheduler/lib/Scheduler/feature/TimelineSummary.js", "../../../../Scheduler/lib/Scheduler/feature/export/Utils.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/SchedulerExporterMixin.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageExporter.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/MultiPageVerticalExporter.js", "../../../../Scheduler/lib/Scheduler/view/export/field/ScheduleRangeCombo.js", "../../../../Scheduler/lib/Scheduler/view/export/SchedulerExportDialog.js", "../../../../Scheduler/lib/Scheduler/feature/export/exporter/SinglePageExporter.js", "../../../../Scheduler/lib/Scheduler/feature/export/PdfExport.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module Scheduler/column/ResourceInfoColumn\n */\n\n/**\n * Displays basic resource information. Defaults to showing an image + name + event count (all configurable).\n *\n * If a resource has no image, you can either provide an icon using `iconCls` in the data (you then need to specify\n * `image === false` in your data) or the resource initials will be shown.\n *\n * Be sure to specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImagePath} to instruct the\n * column where to look for the images.\n *\n * If an image fails to load or if a resource lacks an image, the resource name initials will be rendered. If the\n * resource has an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the\n * background color of the initials.\n *\n * @inlineexample Scheduler/column/ResourceInfoColumn.js\n * @classType resourceInfo\n * @extends Grid/column/Column\n * @column\n */\nexport default class ResourceInfoColumn extends Column {\n\n    static get $name() {\n        return 'ResourceInfoColumn';\n    }\n\n    static get type() {\n        return 'resourceInfo';\n    }\n\n    static get fields() {\n        return ['showEventCount', 'showRole', 'showMeta', 'showImage', 'validNames', 'autoScaleThreshold', 'useNameAsImageName'];\n    }\n\n    static get defaults() {\n        return {\n            /** @hideconfigs renderer */\n\n            /**\n             * Show image. Looks for image name in fields on the resource in the following order: 'imageUrl', 'image',\n             * 'name'. Set `showImage` to a field name to use a custom field. Set `Scheduler.resourceImagePath` to\n             * specify where to load images from. If no extension found, defaults to\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-resourceImageExtension}.\n             * @config {Boolean}\n             * @default\n             */\n            showImage : true,\n\n            /**\n             * Show number of events assigned to the resource below the name.\n             * @config {Boolean}\n             * @default\n             */\n            showEventCount : true,\n\n            /**\n             * A template string to render any extra information about the resource below the name\n             * @config {Function}\n             * @param {Scheduler.model.ResourceModel} resourceRecord The record representing the current row\n             */\n            showMeta : null,\n\n            /**\n             * Show resource role below the name. Specify `true` to display data from the `role` field, or specify a field\n             * name to read this value from.\n             * @config {Boolean|String}\n             * @default\n             */\n            showRole : false,\n\n            /**\n             * Valid image names. Set to `null` to allow all names.\n             * @deprecated This will be removed in 6.0\n             * @config {String[]}\n             */\n            validNames : null,\n\n            /**\n             * Specify 0 to prevent the column from adapting its content according to the used row height, or specify a\n             * threshold (row height) at which scaling should start.\n             * @config {Number}\n             * @default\n             */\n            autoScaleThreshold : 40,\n\n            /**\n             * Use the resource name as the image name when no `image` is specified on the resource.\n             * @config {Boolean}\n             * @default\n             */\n            useNameAsImageName : true,\n\n            field      : 'name',\n            htmlEncode : false,\n            width      : 140,\n            cellCls    : 'b-resourceinfo-cell',\n            editor     : VersionHelper.isTestEnv ? false : 'text'\n        };\n    }\n\n    construct(...args) {\n        super.construct(...args);\n\n        this.avatarRendering = new AvatarRendering({\n            element : this.grid.element\n        });\n    }\n\n    doDestroy() {\n        super.doDestroy();\n\n        this.avatarRendering.destroy();\n    }\n\n    getImageURL(imageName) {\n        const\n            resourceImagePath = this.grid.resourceImagePath || '',\n            parts             = resourceImagePath.split('//'),\n            urlPart           = parts.length > 1 ? parts[1] : resourceImagePath,\n            joined            = StringHelper.joinPaths([urlPart || '', imageName || '']);\n\n        return parts.length > 1 ? parts[0] + '//' + joined : joined;\n    }\n\n    template(resourceRecord, value) {\n        const me        = this,\n            {\n                showImage,\n                showRole,\n                showMeta,\n                showEventCount,\n                grid\n            }         = me,\n            {\n                timeAxis,\n                resourceImageExtension = '',\n                defaultResourceImageName\n            }         = grid,\n            roleField = typeof showRole === 'string' ? showRole : 'role',\n            count     = showEventCount && resourceRecord.eventStore.getEvents({\n                includeOccurrences : grid.enableRecurringEvents,\n                resourceRecord,\n                startDate          : timeAxis.startDate,\n                endDate            : timeAxis.endDate\n            }).length;\n\n        let imageUrl;\n\n        if (showImage && resourceRecord.image !== false) {\n            if (resourceRecord.imageUrl) {\n                imageUrl = resourceRecord.imageUrl;\n            }\n            else {\n                // record.image is supposed to be a file name, located at resourceImagePath\n                const\n                    imageName = typeof showImage === 'string'\n                        ? showImage\n                        : (resourceRecord.image || value && me.useNameAsImageName && (value.toLowerCase() + resourceImageExtension) || defaultResourceImageName) || '';\n\n                imageUrl = imageName && me.getImageURL(imageName);\n\n                // Image name should have an extension\n                if (imageUrl && !imageName.includes('.')) {\n                    // If validNames is specified, check that imageName is valid\n                    if (!me.validNames || me.validNames.includes(imageName)) {\n                        imageUrl += resourceImageExtension;\n                    }\n                }\n            }\n        }\n\n        return {\n            class    : 'b-resource-info',\n            children : [\n                showImage && me.avatarRendering.getResourceAvatar({\n                    resourceRecord,\n                    initials        : resourceRecord.initials,\n                    color           : resourceRecord.eventColor,\n                    iconCls         : resourceRecord.iconCls,\n                    imageUrl,\n                    defaultImageUrl : defaultResourceImageName && this.getImageURL(defaultResourceImageName)\n                }),\n                showRole || showEventCount || showMeta ? {\n                    tag      : 'dl',\n                    children : [\n                        {\n                            tag  : 'dt',\n                            text : value\n                        },\n                        showRole ? {\n                            tag   : 'dd',\n                            class : 'b-resource-role',\n                            text  : resourceRecord.getValue(roleField)\n                        } : null,\n\n                        showEventCount ? {\n                            tag   : 'dd',\n                            class : 'b-resource-events',\n                            html  : me.L('L{eventCountText}', count)\n                        } : null,\n\n                        showMeta ? {\n                            tag   : 'dd',\n                            class : 'b-resource-meta',\n                            html  : me.showMeta(resourceRecord)\n                        } : null\n                    ]\n                } : value // This becomes a text node, no HTML encoding needed\n            ]\n        };\n\n    }\n\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        let result;\n\n        if (record.isSpecialRow) {\n            result = '';\n        }\n        else if (isExport) {\n            result = value;\n        }\n        else {\n            if (this.autoScaleThreshold && grid.rowHeight < this.autoScaleThreshold) {\n                cellElement.style.fontSize = (grid.rowHeight / 40) + 'em';\n            }\n            else {\n                cellElement.style.fontSize = '';\n            }\n\n            result = this.template(record, value);\n        }\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(ResourceInfoColumn);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\n\n/**\n * @module Scheduler/feature/Labels\n */\n\nconst\n    sides       = [\n        'top',\n        'before',\n        'after',\n        'bottom'\n    ],\n    editorAlign = (side, client) => {\n        switch (side) {\n            case 'top' :\n                return 'b-b';\n            case 'after' :\n                return client.rtl ? 'r-r' : 'l-l';\n            case 'right' :\n                return 'l-l';\n            case 'bottom' :\n                return 't-t';\n            case 'before' :\n                return client.rtl ? 'l-l' : 'r-r';\n            case 'left' :\n                return 'r-r';\n        }\n    },\n    topBottom   = {\n        top    : 1,\n        bottom : 1\n    },\n    layoutModes = {\n        estimate : 1,\n        measure  : 1\n    },\n    layoutSides = {\n        before : 1,\n        after  : 1\n    };\n\n/**\n * Configuration object for a label used by the Labels feature.\n * @typedef {Object} SchedulerLabelConfig\n * @property {String} field The name of a field in one of the associated records, {@link Scheduler.model.EventModel} or\n * {@link Scheduler.model.ResourceModel}. The record from which the field value is drawn will be ascertained by checking\n * for field definitions by the specified name.\n * @property {Function} renderer A function, which when passed an object containing `eventRecord`, `resourceRecord`,\n * `assignmentRecord` and `domConfig` properties, returns the HTML to display as the label\n * @property {Scheduler.model.EventModel} renderer.eventRecord\n * @property {Scheduler.model.ResourceModel} renderer.resourceRecord\n * @property {Scheduler.model.AssignmentModel} renderer.assignmentRecord\n * @property {DomConfig} renderer.domConfig\n * @property {Object} thisObj The `this` reference to use in the `renderer`.\n * @property {FieldConfig|Core.widget.Field} editor If the label is to be editable, a field configuration object with a\n * `type` property, or an instantiated Field. **The `field` property is mandatory for editing to work**.\n */\n\n/**\n * Displays labels at positions {@link #config-top}, {@link #config-right}, {@link #config-bottom} and\n * {@link #config-left}.\n *\n * Text in labels can be set from a field on the {@link Scheduler.model.EventModel} or the\n * {@link Scheduler.model.ResourceModel} or using a custom renderer.\n *\n * Since `top` and `bottom` labels occupy space that would otherwise be used by the event we recommend using bigger\n * rowHeights (>55px for both labels with default styling) and zero barMargins because `top`/`bottom` labels give space\n * around events anyway.\n *\n * To prevent labels from being overlapped by other events, see {@link #config-labelLayoutMode}.\n *\n * This feature is **off** by default. It is **not** supported in vertical mode.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Scheduler/labels\n * @inlineexample Scheduler/feature/Labels.js\n * @classtype labels\n * @feature\n */\nexport default class Labels extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'Labels';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * CSS class to apply to label elements\n             * @config {String}\n             * @default\n             */\n            labelCls : 'b-sch-label',\n\n            /**\n             * Top label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            top : null,\n\n            /**\n             * Configuration object for the label which appears *after* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            after : null,\n\n            /**\n             * Right label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            right : null,\n\n            /**\n             * Bottom label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            bottom : null,\n\n            /**\n             * Configuration object for the label which appears *before* the event bar in the current writing direction.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            before : null,\n\n            /**\n             * Left label configuration object.\n             * @config {SchedulerLabelConfig}\n             * @default\n             */\n            left : null,\n\n            thisObj : null,\n\n            /**\n             * What action should be taken when focus moves leaves the cell editor, for example when clicking outside.\n             * May be `'complete'` or `'cancel`'.\n             * @config {'complete'|'cancel'}\n             * @default\n             */\n            blurAction : 'cancel',\n\n            /**\n             * How to handle labels during event layout. Options are:\n             *\n             * * default - Labels do not affect event layout, events will overlap labels\n             * * estimate - Label width is estimated by multiplying text length with {@link #config-labelCharWidth}\n             * * measure - Label width is determined by measuring the label, precise but slow\n             *\n             * Note that this only applies to the left and right labels, top and bottom labels does not take part in the\n             * event layout process.\n             *\n             * @config {'default'|'estimate'|'measure'}\n             * @default\n             */\n            labelLayoutMode : 'default',\n\n            /**\n             * Factor representing the average char width in pixels used to determine label width when configured\n             * with `labelLayoutMode: 'estimate'`.\n             * @config {Number}\n             * @default\n             */\n            labelCharWidth : 7\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(scheduler, config) {\n        const me = this;\n\n        if (scheduler.isVertical) {\n            throw new Error('Labels feature is not supported in vertical mode');\n        }\n\n        me.scheduler = scheduler;\n\n        super.construct(scheduler, config);\n\n        if (me.top || me.bottom || me.before || me.after) {\n            me.updateHostClasslist();\n\n            // rowHeight warning, not in use\n            //const labelCount = !!me.topLabel + !!me.bottomLabel;\n            //if (scheduler.rowHeight < 60 - labelCount * 12) console.log('')\n        }\n    }\n\n    updateHostClasslist() {\n        const\n            { top, bottom } = this,\n            { classList }   = this.scheduler.element;\n\n        classList.remove('b-labels-topbottom');\n        classList.remove('b-labels-top');\n        classList.remove('b-labels-bottom');\n\n        // OR is correct. This means that there are labels above OR below.\n        if (top || bottom) {\n            classList.add('b-labels-topbottom');\n            if (top) {\n                classList.add('b-labels-top');\n            }\n            if (bottom) {\n                classList.add('b-labels-bottom');\n            }\n        }\n    }\n\n    onLabelDblClick(event) {\n        const\n            me        = this,\n            target    = event.target;\n\n        if (target && !me.scheduler.readOnly) {\n            const\n                { side }          = target.dataset,\n                labelConfig       = me[side],\n                { editor, field } = labelConfig;\n\n            if (editor) {\n                const eventRecord = this.scheduler.resolveEventRecord(event.target);\n\n                if (eventRecord.readOnly) {\n                    return;\n                }\n\n                if (!(editor instanceof Editor)) {\n                    labelConfig.editor = new Editor({\n                        blurAction   : me.blurAction,\n                        inputField   : editor,\n                        scrollAction : 'realign'\n                    });\n                }\n\n                // Editor removes itself from the DOM after being hidden\n                labelConfig.editor.render(me.scheduler.element);\n\n                labelConfig.editor.startEdit({\n                    target,\n                    align     : editorAlign(side, me.client),\n                    matchSize : false,\n                    record    : eventRecord,\n                    field\n                });\n\n                event.stopImmediatePropagation();\n                return false;\n            }\n        }\n    }\n\n    changeTop(top) {\n        return this.processLabelSpec(top, 'top');\n    }\n\n    updateTop() {\n        this.updateHostClasslist();\n    }\n\n    changeAfter(after) {\n        return this.processLabelSpec(after, 'after');\n    }\n\n    updateAfter() {\n        this.updateHostClasslist();\n    }\n\n    changeRight(right) {\n        this[this.client.rtl ? 'before' : 'after'] = right;\n    }\n\n    changeBottom(bottom) {\n        return this.processLabelSpec(bottom, 'bottom');\n    }\n\n    updateBottom() {\n        this.updateHostClasslist();\n    }\n\n    changeBefore(before) {\n        return this.processLabelSpec(before, 'before');\n    }\n\n    updateBefore() {\n        this.updateHostClasslist();\n    }\n\n    changeLeft(left) {\n        this[this.client.rtl ? 'after' : 'before'] = left;\n    }\n\n    processLabelSpec(labelSpec, side) {\n        if (typeof labelSpec === 'function') {\n            labelSpec = {\n                renderer : labelSpec\n            };\n        }\n        else if (typeof labelSpec === 'string') {\n            labelSpec = {\n                field : labelSpec\n            };\n        }\n        // Allow us to mutate ownProperties in the labelSpec without mutating outside object\n        else if (labelSpec) {\n            labelSpec = Object.setPrototypeOf({}, labelSpec);\n        }\n        // Clear label\n        else {\n            return null;\n        }\n\n        const\n            { scheduler }                                = this,\n            { eventStore, resourceStore, taskStore, id } = scheduler,\n            { field, editor }                            = labelSpec;\n\n        // If there are milestones, and we are changing the available height\n        // either by adding a top/bottom label, or adding a top/bottom label\n        // then during the next dependency refresh, milestone width must be recalculated.\n        if (topBottom[side]) {\n            scheduler.milestoneWidth = null;\n        }\n\n        if (eventStore && !taskStore) {\n            labelSpec.recordType = 'event';\n        }\n        else {\n            labelSpec.recordType = 'task';\n        }\n\n        // Find the field definition or property from whichever store and cache the type.\n        if (field) {\n            let\n                fieldDef,\n                fieldFound = false;\n\n            if (eventStore && !taskStore) {\n                fieldDef = eventStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(eventStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'event';\n                    fieldFound = true;\n                }\n            }\n\n            if (!fieldDef && taskStore) {\n                fieldDef = taskStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'task';\n                    fieldFound = true;\n                }\n            }\n\n            if (!fieldDef && resourceStore) {\n                fieldDef = resourceStore.modelClass.fieldMap[field];\n                if (fieldDef) {\n                    labelSpec.fieldDef = fieldDef;\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n                // Check if it references a property\n                else if (Reflect.has(resourceStore.modelClass.prototype, field)) {\n                    labelSpec.recordType = 'resource';\n                    fieldFound = true;\n                }\n            }\n            //<debug>\n            // We couldn't find the requested field in the modelClass\n            // for either of the stores.\n            if (!fieldFound) {\n                throw new Error(`Scheduler ${id} labels ${side} field ${field} does not exist in either eventStore or resourceStore`);\n            }\n            //</debug>\n\n            if (editor) {\n                if (typeof editor === 'boolean') {\n                    scheduler.editor = {\n                        type : 'textfield'\n                    };\n                }\n                else if (typeof editor === 'string') {\n                    scheduler.editor = {\n                        type : editor\n                    };\n                }\n                EventHelper.on({\n                    element  : scheduler.timeAxisSubGrid.element,\n                    delegate : '.b-sch-label',\n                    dblclick : 'onLabelDblClick',\n                    thisObj  : this\n                });\n            }\n        }\n\n        //<debug>\n        if (!labelSpec.field && !labelSpec.renderer) {\n            throw new Error(`Scheduler ${scheduler.id} labels ${side} must either have a field or a renderer`);\n        }\n        //</debug>\n\n        return labelSpec;\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this.client.isPainted) {\n            this.client.refresh();\n        }\n    }\n\n    //endregion\n\n    generateLabelConfigs(data) {\n        const\n            me      = this,\n            configs = [];\n\n        // Insert all configured labels\n        for (const side of sides) {\n            if (me[side]) {\n                const\n                    {\n                        field,\n                        fieldDef,\n                        recordType,\n                        renderer,\n                        thisObj\n                    }  = me[side],\n                    domConfig = {\n                        tag       : 'label',\n                        className : {\n                            [me.labelCls]              : 1,\n                            [`${me.labelCls}-${side}`] : 1\n                        },\n                        dataset : {\n                            side,\n                            taskFeature : `label-${side}`\n                        }\n                    };\n\n                let value;\n\n                const\n                    eventRecordProperty = `${recordType}Record`,\n                    eventRecord         = data[eventRecordProperty];\n\n                // If there's a renderer, use that by preference\n                if (renderer) {\n                    value = renderer.call(thisObj || me.thisObj || me, {\n                        [eventRecordProperty] : eventRecord,\n                        resourceRecord        : data.resourceRecord,\n                        assignmentRecord      : data.assignmentRecord,\n                        domConfig\n                    });\n                }\n                else {\n                    value = eventRecord.getValue(field);\n\n                    // If it's a date, format it according to the Scheduler's defaults\n                    if (fieldDef?.type === 'date' && !renderer) {\n                        value = DateHelper.format(value, me.client.displayDateFormat);\n                    }\n                    else {\n                        value = StringHelper.encodeHtml(value);\n                    }\n                }\n\n                domConfig.html = value || '\\xa0';\n\n                configs.push(domConfig);\n            }\n        }\n\n        return configs;\n    }\n\n    measureLabels(configs, data) {\n        const\n            me      = this,\n            pxPerMS = me.client.timeAxisViewModel.getSingleUnitInPixels('millisecond');\n\n        for (const config of configs) {\n            if (layoutSides[config.dataset.side]) {\n                let { html } = config;\n\n                let length = 0;\n\n                // Calculate length based on string length\n                if (me.labelLayoutMode === 'estimate') {\n                    // Strip tags before estimating\n                    if (html.includes('<')) {\n                        html = DomHelper.stripTags(html);\n                    }\n\n                    length = (html.length * me.labelCharWidth) + 18; // 18 = 1.5em, margin from event\n                }\n                // Measure\n                else {\n                    const element = me.labelMeasureElement || (me.labelMeasureElement = DomHelper.createElement({\n                        className : 'b-sch-event-wrap b-measure-label',\n                        parent    : me.client.foregroundCanvas\n                    }));\n\n                    // Outer DomSync should not remove\n                    element.retainElement = true;\n\n                    DomSync.sync({\n                        targetElement : element,\n                        childrenOnly  : true,\n                        domConfig     : {\n                            children : [\n                                config\n                            ]\n                        }\n                    });\n\n                    length = element.firstElementChild.offsetWidth;\n                }\n\n                // Convert from px to ms\n                const ms = length / pxPerMS;\n\n                // Adjust values used for event layout (not event position)\n                switch (config.dataset.side) {\n                    case 'before':\n                        data.startMS -= ms;\n                        break;\n                    case 'after':\n                        data.endMS += ms;\n                        break;\n                }\n            }\n        }\n    }\n\n    onEventDataGenerated(data) {\n        if (!this.disabled && !data.eventRecord?.isResourceTimeRange) {\n            const configs = this.generateLabelConfigs(data);\n\n            if (layoutModes[this.labelLayoutMode]) {\n                this.measureLabels(configs, data);\n            }\n\n            data.wrapperChildren.push(...configs);\n        }\n    }\n\n    updateLabelLayoutMode() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n\n    updateLabelCharWidth() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n}\n\n// <remove-on-release>\n// TODO: Refactor the SASS, so that the auto-generated class name of b-' + cls.name.toLowerCase() can be used.\n// </remove-on-release>\nLabels.featureClass = 'b-sch-labels';\n\nGridFeatureManager.registerFeature(Labels, false, 'Scheduler');\n", "import GridRowReorder from '../../Grid/feature/RowReorder.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TransactionalFeature from './mixin/TransactionalFeature.js';\n\n/**\n * @module Scheduler/feature/RowReorder\n */\n\n/**\n * This feature implement support for project transactions and used by default in Gantt. For general RowReorder feature\n * documentation see {@link Grid.feature.RowReorder}.\n * @extends Grid/feature/RowReorder\n * @classtype rowReorder\n * @feature\n *\n * @typings Grid.feature.RowReorder -> Grid.feature.GridRowReorder\n */\nexport default class RowReorder extends TransactionalFeature(GridRowReorder) {\n    static $name = 'RowReorder';\n\n    onDragStart(...args) {\n        super.onDragStart(...args);\n\n        if (this.client.transactionalFeaturesEnabled) {\n            return this.startFeatureTransaction();\n        }\n    }\n\n    onDrop(...args) {\n        // Actual reorder will happen in a wrapper function to `tryPropagateWithChanges`, meaning reorder will be a\n        // transaction. This transaction will not even have any changes in it. So we can reject it.\n        this.rejectFeatureTransaction();\n\n        return super.onDrop(...args);\n    }\n\n    onAbort(...args) {\n        this.rejectFeatureTransaction();\n\n        return super.onAbort(...args);\n    }\n}\n\nGridFeatureManager.registerFeature(RowReorder, false, 'Scheduler');\nGridFeatureManager.registerFeature(RowReorder, true, 'Gantt');\n", "import GridSummary from '../../Grid/feature/Summary.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Scheduler/feature/TimelineSummary\n */\n\n// noinspection JSClosureCompilerSyntax\n/**\n * Base class, not to be used directly.\n * @extends Grid/feature/Summary\n * @abstract\n */\nexport default class TimelineSummary extends GridSummary {\n    //region Config\n\n    static get $name() {\n        return 'TimelineSummary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Show tooltip containing summary values and labels\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : true\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'updateProject']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        const me = this;\n\n        super.construct(client, config);\n\n        if (!me.summaries) {\n            me.summaries = [{ renderer : me.renderer }];\n        }\n\n        // Feature might be run from Grid (in docs), should not crash\n        // https://app.assembla.com/spaces/bryntum/tickets/6801/details\n        if (client.isTimelineBase) {\n            me.updateProject(client.project);\n\n            client.ion({\n                timeAxisViewModelUpdate : me.renderRows,\n                thisObj                 : me\n            });\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    updateProject(project) {\n        this.detachListeners('summaryProject');\n\n        project.ion({\n            name      : 'summaryProject',\n            dataReady : 'updateTimelineSummaries',\n            thisObj   : this\n        });\n    }\n\n    renderRows() {\n        if (this.client.isHorizontal) {\n            this.client.timeAxisSubGrid.footer.element.querySelector('.b-grid-footer').classList.add('b-sch-summarybar');\n        }\n\n        super.renderRows();\n\n        if (!this.disabled) {\n            this.render();\n        }\n    }\n\n    get summaryBarElement() {\n        return this.client.element.querySelector('.b-sch-summarybar');\n    }\n\n    render() {\n        const\n            me                   = this,\n            { client: timeline } = me,\n            sizeProp             = timeline.isHorizontal ? 'width' : 'height',\n            colCfg               = timeline.timeAxisViewModel.columnConfig,\n            summaryContainer     = me.summaryBarElement;\n\n        if (summaryContainer) {\n            // if any sum config has a label, init tooltip\n            if (!me._tip && me.showTooltip && me.summaries.some(config => config.label)) {\n                me._tip = new Tooltip({\n                    id             : `${timeline.id}-summary-tip`,\n                    cls            : 'b-timeaxis-summary-tip',\n                    hoverDelay     : 0,\n                    hideDelay      : 100,\n                    forElement     : summaryContainer,\n                    anchorToTarget : true,\n                    trackMouse     : false,\n                    forSelector    : '.b-timeaxis-tick',\n                    getHtml        : ({ activeTarget }) => activeTarget._tipHtml\n                });\n            }\n\n            summaryContainer.innerHTML = colCfg[colCfg.length - 1].map(col => `<div class=\"b-timeaxis-tick\" style=\"${sizeProp}: ${col.width}px\"></div>`).join('');\n\n            me.updateTimelineSummaries();\n        }\n    }\n\n    //endregion\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        super.refresh();\n        this.updateTimelineSummaries();\n    }\n\n    doDisable(disable) {\n        const { isConfiguring } = this.client;\n\n        super.doDisable(disable);\n\n        this.summaryColumn?.toggle(!disable);\n\n        if (!isConfiguring && !disable) {\n            this.render();\n        }\n    }\n\n    doDestroy() {\n        this._tip?.destroy();\n        super.doDestroy();\n    }\n}\n", "export const ScheduleRange = {\n    completeview : 'completeview',\n    // completedata : 'completedata',\n    currentview  : 'currentview',\n    daterange    : 'daterange'\n};\n", "import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\nimport { ScheduleRange } from '../Utils.js';\n\nconst immediatePromise = Promise.resolve();\n\nexport default base => class SchedulerExporterMixin extends base {\n    async scrollRowIntoView(client, index) {\n        const\n            {\n                rowManager,\n                scrollable\n            }    = client,\n            oldY = scrollable.y;\n\n        // If it's a valid index to scroll to, then try it.\n        if (index < client.store.count) {\n            // Scroll the requested row to the viewport top\n            scrollable.scrollTo(null, rowManager.calculateTop(index));\n\n            // If that initiated a scroll, we need to wait for the row to be rendered, so return\n            // a Promise which resolves when that happens.\n            if (scrollable.y !== oldY) {\n                // GridBase adds listener to vertical scroll to update rows. Rows might be or might not be updated,\n                // but at the end of each scroll grid will trigger `scroll` event. So far this is the only scroll event\n                // triggered by the grid itself and it is different from `scroll` event on scrollable.\n                return new Promise(resolve => {\n                    const detacher = client.ion({\n                        scroll({ scrollTop }) {\n                            // future-proof: only react to scroll event with certain argument\n                            if (scrollTop != null && rowManager.getRow(index)) {\n                                detacher();\n                                resolve();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n\n        // No scroll occurred. Promise must be resolved immediately\n        return immediatePromise;\n    }\n\n    async scrollToDate(client, date) {\n        let scrollFired = false;\n\n        const promises    = [];\n\n        // Time axis is updated on element scroll, which is async event. We need to synchronize this logic.\n        // If element horizontal scroll is changed then sync event is fired. We add listener to that one specific event\n        // and remove it right after scrollToDate sync code, keeping listeners clean. If scrolling occurred, we need\n        // to wait until time header is updated.\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                if (x != null) {\n                    scrollFired = true;\n                }\n            }\n        });\n\n        // added `block: start` to do scrolling faster\n        // it moves data to begin of visible area that is longer section for re-render\n        promises.push(client.scrollToDate(date, { block : 'start' }));\n\n        detacher();\n\n        if (scrollFired) {\n            // We have to wait for scrollEnd event before moving forward. When exporting large view we might have to scroll\n            // extensively and it might occur that requested scroll position would not be reached because concurrent\n            // scrollEnd events would move scroll back.\n            // scrollEnd is on a 100ms timer *after* the last scroll event fired, so all necessary\n            // updated will have occurred.\n            // Covered by Gantt/tests/feature/export/MultiPageVertical.t.js\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n\n        await Promise.all(promises);\n    }\n\n    cloneElement(element, target, clear) {\n        super.cloneElement(element, target, clear);\n\n        const clonedEl = this.element.querySelector('.b-schedulerbase');\n\n        // Remove default animation classes\n        clonedEl?.classList.remove(...['fade-in', 'slide-from-left', 'slide-from-top', 'zoom-in'].map(name => `b-initial-${name}`));\n    }\n\n    async prepareComponent(config) {\n        const\n            me                     = this,\n            { client }             = config,\n            { currentOrientation } = client,\n            includeTimeline        = client.timeAxisSubGrid.width > 0;\n\n        switch (config.scheduleRange) {\n            case ScheduleRange.completeview:\n                config.rangeStart = client.startDate;\n                config.rangeEnd   = client.endDate;\n                break;\n            case ScheduleRange.currentview: {\n                const { startDate, endDate } = client.visibleDateRange;\n                config.rangeStart = startDate;\n                config.rangeEnd = endDate;\n                break;\n            }\n        }\n\n        await client.waitForAnimations();\n\n        // Disable infinite scroll before export, so it doesn't change time span\n        config.infiniteScroll = client.infiniteScroll;\n        client.infiniteScroll = false;\n\n        // Don't change timespan if time axis subgrid is not visible\n        if (includeTimeline) {\n            // set new timespan before calling parent to get proper scheduler header/content size\n            client.setTimeSpan(config.rangeStart, config.rangeEnd);\n\n            // Access svgCanvas el to create dependency canvas early\n            client.svgCanvas;\n        }\n\n        // Disable event animations during export\n        me._oldEnableEventAnimations = client.enableEventAnimations;\n        client.enableEventAnimations = false;\n\n        // Add scroll buffer for the horizontal rendering\n        if (currentOrientation.isHorizontalRendering) {\n            me._oldScrollBuffer = currentOrientation.scrollBuffer;\n            me._oldVerticalBuffer = currentOrientation.verticalBufferSize;\n            currentOrientation.scrollBuffer = 100;\n            currentOrientation.verticalBufferSize = -1;\n        }\n\n        // Raise flag on the client to render all suggested dependencies\n        client.ignoreViewBox = true;\n\n        await super.prepareComponent(config);\n\n        const\n            { exportMeta, element } = me,\n            fgCanvasEl              = element.querySelector('.b-sch-foreground-canvas'),\n            timeAxisEl              = element.querySelector('.b-horizontaltimeaxis');\n\n        exportMeta.includeTimeline = includeTimeline;\n\n        if (includeTimeline && config.scheduleRange !== ScheduleRange.completeview) {\n            // If we are exporting subrange of dates we need to change subgrid size accordingly\n            exportMeta.totalWidth -= exportMeta.subGrids.normal.width;\n            exportMeta.totalWidth += exportMeta.subGrids.normal.width = client.timeAxisViewModel.getDistanceBetweenDates(config.rangeStart, config.rangeEnd);\n\n            const\n                horizontalPages = Math.ceil(exportMeta.totalWidth / exportMeta.pageWidth),\n                totalPages      = horizontalPages * exportMeta.verticalPages;\n\n            exportMeta.horizontalPages = horizontalPages;\n            exportMeta.totalPages = totalPages;\n\n            // store left scroll to imitate normal grid/header scroll using margin\n            exportMeta.subGrids.normal.scrollLeft = client.getCoordinateFromDate(config.rangeStart);\n        }\n\n        exportMeta.timeAxisHeaders = [];\n        exportMeta.timeAxisPlaceholders = [];\n        exportMeta.headersColleted = false;\n\n        DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', headerRow => {\n            exportMeta.timeAxisPlaceholders.push(me.createPlaceholder(headerRow));\n            exportMeta.timeAxisHeaders.push(new Map());\n        });\n\n        // Add placeholder for events, clear all event elements, but not the entire elements as it contains svg canvas\n        exportMeta.subGrids.normal.eventsPlaceholder = me.createPlaceholder(fgCanvasEl, false);\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-sch-event-wrap,.b-sch-resourcetimerange');\n\n        DomHelper.removeEachSelector(me.element, '.b-released');\n\n        exportMeta.eventsBoxes = new Map();\n        exportMeta.client = client;\n\n        if (client.hasActiveFeature('columnLines')) {\n            const columnLinesCanvas = element.querySelector('.b-column-lines-canvas');\n\n            exportMeta.columnLinesPlaceholder = me.createPlaceholder(columnLinesCanvas);\n\n            exportMeta.columnLines = { lines : new Map(), majorLines : new Map() };\n        }\n\n        if (client.hasActiveFeature('timeRanges')) {\n            const\n                timeRangesHeaderCanvas = element.querySelector('.b-sch-timeaxiscolumn .b-sch-timeranges-canvas'),\n                timeRangesBodyCanvas = element.querySelector('.b-sch-foreground-canvas .b-sch-timeranges-canvas');\n\n            exportMeta.timeRanges = {};\n\n            // header is optional\n            if (timeRangesHeaderCanvas) {\n                exportMeta.timeRanges.header = config.enableDirectRendering ? '' : {};\n                exportMeta.timeRangesHeaderPlaceholder = me.createPlaceholder(timeRangesHeaderCanvas);\n            }\n\n            exportMeta.timeRanges.body = config.enableDirectRendering ? '' : {};\n            exportMeta.timeRangesBodyPlaceholder = me.createPlaceholder(timeRangesBodyCanvas);\n        }\n\n        if (client.hasActiveFeature('dependencies')) {\n            client.features.dependencies.fillDrawingCache();\n\n            const svgCanvasEl = element.querySelector(`[id=\"${client.svgCanvas.getAttribute('id')}\"]`);\n\n            // Same as above, clear only dependency lines, because there might be markers added by user\n            if (svgCanvasEl) {\n                exportMeta.dependencyCanvasEl = svgCanvasEl;\n\n                exportMeta.dependenciesPlaceholder = me.createPlaceholder(svgCanvasEl, false, {\n                    ns  : 'http://www.w3.org/2000/svg',\n                    tag : 'path'\n                });\n                DomHelper.removeEachSelector(svgCanvasEl, '.b-sch-dependency');\n            }\n        }\n\n        // We need to scroll component to date to calculate correct start margin\n        if (includeTimeline && !DateHelper.betweenLesser(config.rangeStart, client.startDate, client.endDate)) {\n            await me.scrollToDate(client, config.rangeStart);\n        }\n    }\n\n    async restoreState(config) {\n        let waitForHorizontalScroll = false;\n\n        const\n            { client } = config,\n            promises = [];\n\n        // If scroll will be changed during restoring state (and it will likely be), raise a flag that exporter should\n        // wait for scrollEnd event before releasing control\n        const detacher = client.timeAxisSubGrid.scrollable.ion({\n            scrollStart({ x }) {\n                // HACK: scrollStart might actually fire when scroll is set to existing value\n                if (this.element.scrollLeft !== x) {\n                    waitForHorizontalScroll = true;\n                }\n            }\n        });\n\n        promises.push(super.restoreState(config));\n\n        // Scroll start will be fired synchronously\n        detacher();\n\n        if (waitForHorizontalScroll) {\n            promises.push(client.timeAxisSubGrid.header.scrollable.await('scrollEnd', { checkLog : false }));\n        }\n\n        await Promise.all(promises);\n    }\n\n    async restoreComponent(config) {\n        const\n            { client }             = config,\n            { currentOrientation } = client;\n\n        client.ignoreViewBox = false;\n\n        client.infiniteScroll = config.infiniteScroll;\n\n        client.enableEventAnimations = this._oldEnableEventAnimations;\n\n        if (currentOrientation.isHorizontalRendering) {\n            currentOrientation.scrollBuffer = this._oldScrollBuffer;\n            currentOrientation.verticalBufferSize = this._oldVerticalBuffer;\n        }\n\n        await super.restoreComponent(config);\n    }\n\n    async onRowsCollected(rows, config) {\n        const me = this;\n\n        await super.onRowsCollected(rows, config);\n\n        // Only collect this data if timeline is visible\n        if (me.exportMeta.includeTimeline) {\n            const\n                { client, enableDirectRendering } = config,\n                { timeView }                      = client,\n                { pageRangeStart, pageRangeEnd }  = me.getCurrentPageDateRange(config);\n\n            if (enableDirectRendering) {\n                // If first page does not include timeline we don't need to render anything for it\n                if (pageRangeStart && pageRangeEnd) {\n                    me.renderHeaders(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderLines(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderRanges(config, pageRangeStart, pageRangeEnd);\n\n                    me.renderEvents(config, rows, pageRangeStart, pageRangeEnd);\n                }\n            }\n            else {\n                // Exported page may not contain timeline view, in which case we need to fall through\n                if (pageRangeStart) {\n                    let rangeProcessed = false;\n\n                    await me.scrollToDate(client, pageRangeStart);\n\n                    // Time axis and events are only rendered for the visible time span\n                    // we need to scroll the view and gather events/timeline elements\n                    // while (timeView.endDate <= config.rangeEnd) {\n                    while (!rangeProcessed) {\n                        me.collectLines(config);\n\n                        me.collectHeaders(config);\n\n                        me.collectRanges(config);\n\n                        me.collectEvents(rows, config);\n\n                        if (DateHelper.timeSpanContains(timeView.startDate, timeView.endDate, pageRangeStart, pageRangeEnd)) {\n                            rangeProcessed = true;\n                        }\n                        else if (timeView.endDate.getTime() >= pageRangeEnd.getTime()) {\n                            rangeProcessed = true;\n                        }\n                        else {\n                            const endDate = timeView.endDate;\n\n                            await me.scrollToDate(client, timeView.endDate);\n\n                            // If timeview end date is same as before scroll it means client is not able to scroll to date\n                            // and will go into infinite loop unless we stop it\n                            if (endDate.getTime() === timeView.endDate.getTime()) {\n                                throw new Error('Could not scroll to date');\n                            }\n                        }\n                    }\n                }\n\n                await me.scrollToDate(client, config.rangeStart);\n            }\n        }\n    }\n\n    getCurrentPageDateRange({ rangeStart, rangeEnd, enableDirectRendering, client }) {\n        const\n            me = this,\n            { exportMeta } = me,\n            { horizontalPages, horizontalPosition, pageWidth, subGrids } = exportMeta;\n\n        let pageRangeStart, pageRangeEnd;\n\n        // when exporting to multiple pages we only need to scroll sub-range within visible time span\n        if (horizontalPages > 1) {\n            const\n                pageStartX = horizontalPosition * pageWidth,\n                pageEndX   = (horizontalPosition + 1) * pageWidth,\n                // Assuming normal grid is right next to right side of the locked grid\n                // There is also a default splitter\n                normalGridX = subGrids.locked.width + subGrids.locked.splitterWidth;\n\n            if (pageEndX <= normalGridX) {\n                pageRangeEnd = pageRangeStart = null;\n            }\n            else {\n                const { scrollLeft = 0 } = subGrids.normal;\n\n                pageRangeStart = client.getDateFromCoordinate(Math.max(pageStartX - normalGridX + scrollLeft, 0));\n\n                // Extend visible schedule by 20% to cover up possible splitter\n                const multiplier = enableDirectRendering ? 1 : 1.2;\n\n                pageRangeEnd = client.getDateFromCoordinate((pageEndX - normalGridX + scrollLeft) * multiplier) || rangeEnd;\n            }\n        }\n        else {\n            pageRangeStart = rangeStart;\n            pageRangeEnd   = rangeEnd;\n        }\n\n        return {\n            pageRangeStart,\n            pageRangeEnd\n        };\n    }\n\n    prepareExportElement() {\n        const\n            { element, exportMeta }                = this,\n            { id, headerId, footerId, scrollLeft } = exportMeta.subGrids.normal,\n            el                                     = element.querySelector(`[id=\"${id}\"]`);\n\n        ['.b-sch-background-canvas', '.b-sch-foreground-canvas'].forEach(selector => {\n            const canvasEl = el.querySelector(selector);\n\n            if (canvasEl) {\n                // Align canvases to last exported row bottom. If no such property exists - remove inline height\n                if (exportMeta.lastExportedRowBottom) {\n                    canvasEl.style.height = `${exportMeta.lastExportedRowBottom}px`;\n                }\n                else {\n                    canvasEl.style.height = '';\n                }\n\n                // Simulate horizontal scroll\n                if (scrollLeft) {\n                    canvasEl.style.marginLeft = `-${scrollLeft}px`;\n                }\n            }\n        });\n\n        if (scrollLeft) {\n            [headerId, footerId].forEach(id => {\n                const el = element.querySelector(`[id=\"${id}\"] .b-widget-scroller`);\n                if (el) {\n                    el.style.marginLeft = `-${scrollLeft}px`;\n                }\n            });\n        }\n\n        return super.prepareExportElement();\n    }\n\n    collectHeaders(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me;\n\n        // We only need to collect headers once, this flag is raised once they are collected along all exported range\n        if (!exportMeta.headersCollected) {\n            const\n                timeAxisEl = client.timeView.element,\n                timeAxisHeaders = exportMeta.timeAxisHeaders;\n\n            DomHelper.forEachSelector(timeAxisEl, '.b-sch-header-row', (headerRow, index, headerRows) => {\n                const headersMap = timeAxisHeaders[index];\n\n                DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                    if (!headersMap.has(el.dataset.tickIndex)) {\n                        headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                    }\n                });\n\n                if (index === headerRows.length - 1 && headersMap.has(String(client.timeAxis.count - 1))) {\n                    exportMeta.headersCollected = true;\n                }\n            });\n        }\n    }\n\n    collectRanges(config) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n\n        if (!exportMeta.headersCollected && timeRanges) {\n            const\n                { headerCanvas, bodyCanvas } = client.features.timeRanges;\n\n            if (headerCanvas) {\n                DomHelper.forEachSelector(headerCanvas, '.b-sch-timerange', el => {\n                    timeRanges.header[el.dataset.id] = el.outerHTML;\n                });\n            }\n\n            DomHelper.forEachSelector(bodyCanvas, '.b-sch-timerange', el => {\n                timeRanges.body[el.dataset.id] = el.outerHTML;\n            });\n        }\n    }\n\n    collectLines(config) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n\n        if (!exportMeta.headersCollected && columnLines) {\n            const bgCanvas = client.backgroundCanvas;\n\n            DomHelper.forEachSelector(bgCanvas, '.b-column-line, .b-column-line-major', (lineEl) => {\n                if (lineEl.classList.contains('b-column-line')) {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/line-/, ''));\n\n                    columnLines.lines.set(lineIndex, lineEl.outerHTML);\n                }\n                else {\n                    const lineIndex = Number(lineEl.dataset.line.replace(/major-/, ''));\n\n                    columnLines.majorLines.set(lineIndex, lineEl.outerHTML);\n                }\n            });\n        }\n    }\n\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                resource  = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n\n            resource.events?.forEach(event => {\n                if (event.isScheduled) {\n                    let el = client.getElementFromEventRecord(event, resource);\n\n                    if (el && (el = el.parentElement) && !eventsMap.has(event.id)) {\n                        eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                    }\n                }\n            });\n\n            resource.timeRanges?.forEach(timeRange => {\n                const\n                    elId = client.features.resourceTimeRanges?.generateElementId(timeRange) || '',\n                    el   = client.foregroundCanvas.syncIdMap[elId];\n\n                if (el && !eventsMap.has(elId)) {\n                    eventsMap.set(elId, [el.outerHTML, Rectangle.from(el, el.offsetParent)]);\n                }\n            });\n        });\n    }\n\n    //#region Direct rendering\n\n    renderHeaders(config, start, end) {\n        const\n            me               = this,\n            { exportMeta }   = me,\n            { client }       = config,\n            timeAxisHeaders  = exportMeta.timeAxisHeaders,\n            // Get the time axis view reference that we will use to build cells for specific time ranges\n            { timeAxisView } = client.timeAxisColumn,\n            domConfig        = timeAxisView.buildCells(start, end),\n            targetElement    = document.createElement('div');\n\n        DomSync.sync({\n            targetElement,\n            domConfig\n        });\n\n        DomHelper.forEachSelector(targetElement, '.b-sch-header-row', (headerRow, index) => {\n            const headersMap = timeAxisHeaders[index];\n\n            DomHelper.forEachSelector(headerRow, '.b-sch-header-timeaxis-cell', el => {\n                if (!headersMap.has(el.dataset.tickIndex)) {\n                    headersMap.set(el.dataset.tickIndex, el.outerHTML);\n                }\n            });\n        });\n    }\n\n    renderEvents(config, rows, start, end) {\n        const\n            me         = this,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig      = normalRows[index],\n                eventsMap      = rowConfig[3],\n                resource       = client.store.getAt(row.dataIndex),\n                resourceLayout = client.currentOrientation.getResourceLayout(resource),\n                left           = client.getCoordinateFromDate(start),\n                right          = client.getCoordinateFromDate(end),\n                eventDOMConfigs = client.currentOrientation.getEventDOMConfigForCurrentView(resourceLayout, row, left, right),\n                targetElement   = document.createElement('div');\n\n            eventDOMConfigs.forEach(domConfig => {\n                const\n                    { eventId }                  = domConfig.dataset,\n                    { left, top, width, height } = domConfig.style;\n\n                DomSync.sync({\n                    targetElement,\n                    domConfig\n                });\n\n                eventsMap.set(eventId, [targetElement.outerHTML, new Rectangle(left, top, width, height)]);\n            });\n        });\n    }\n\n    renderLines(config, start, end) {\n        const\n            me              = this,\n            { client }      = config,\n            { exportMeta }  = me,\n            { columnLines } = exportMeta;\n\n        if (columnLines) {\n            const\n                domConfigs    = client.features.columnLines.getColumnLinesDOMConfig(start, end),\n                targetElement = document.createElement('div');\n\n            DomSync.sync({\n                targetElement,\n                domConfig : {\n                    children : domConfigs\n                },\n                onlyChildren : true\n            });\n\n            // Put all lines HTML to a single key in the set. That allows us to share code path with legacy export mode\n            columnLines.lines.set(0, targetElement.innerHTML);\n        }\n    }\n\n    renderRanges(config, start, end) {\n        const\n            me             = this,\n            { client }     = config,\n            { exportMeta } = me,\n            { timeRanges } = exportMeta;\n\n        if (timeRanges) {\n            const\n                domConfigs    = client.features.timeRanges.getDOMConfig(start, end),\n                targetElement = document.createElement('div');\n\n            // domConfigs is an array of two elements - first includes time range configs for body, second - for head\n            domConfigs.forEach((children, i) => {\n                DomSync.sync({\n                    targetElement,\n                    domConfig : {\n                        children,\n                        onlyChildren : true\n                    }\n                });\n\n                // body configs\n                if (i === 0) {\n                    timeRanges.body = targetElement.innerHTML;\n                }\n                // header configs\n                else {\n                    timeRanges.header = targetElement.innerHTML;\n                }\n            });\n        }\n    }\n\n    //#endregion\n\n    buildPageHtml(config) {\n        const\n            me = this,\n            {\n                subGrids,\n                timeAxisHeaders,\n                timeAxisPlaceholders,\n                columnLines,\n                columnLinesPlaceholder,\n                timeRanges,\n                timeRangesHeaderPlaceholder,\n                timeRangesBodyPlaceholder\n            }  = me.exportMeta,\n            { enableDirectRendering } = config;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, eventsPlaceholder, rows, mergedCellsHtml }) => {\n            const\n                placeHolderText       = placeHolder.outerHTML,\n                // Rows can be repositioned, in which case event related to that row should also be translated\n                { resources, events } = me.positionRows(rows, config);\n\n            let contentHtml =  resources.join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n\n            if (eventsPlaceholder) {\n                html = html.replace(eventsPlaceholder.outerHTML, events.join(''));\n            }\n        });\n\n        timeAxisHeaders.forEach((headers, index) => {\n            html = html.replace(timeAxisPlaceholders[index].outerHTML, Array.from(headers.values()).join(''));\n        });\n\n        if (columnLines) {\n            const lineElements = Array.from(columnLines.lines.values()).concat(Array.from(columnLines.majorLines.values()));\n\n            html = html.replace(columnLinesPlaceholder.outerHTML, lineElements.join(''));\n\n            // Lines are collected once for old mode, don't clear them\n            if (enableDirectRendering) {\n                me.exportMeta.columnLines.lines.clear();\n                me.exportMeta.columnLines.majorLines.clear();\n            }\n        }\n\n        if (timeRanges) {\n            if (enableDirectRendering) {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, timeRanges.body);\n\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, timeRanges.header);\n                }\n\n                me.exportMeta.timeRanges = {};\n            }\n            else {\n                html = html.replace(timeRangesBodyPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n\n                // time ranges header element is optional\n                if (timeRangesHeaderPlaceholder) {\n                    html = html.replace(timeRangesHeaderPlaceholder.outerHTML, Object.values(timeRanges.body).join(''));\n                }\n            }\n        }\n\n        html = me.buildDependenciesHtml(html);\n\n        return html;\n    }\n\n    getEventBox(event) {\n        const\n            me = this,\n            {\n                eventsBoxes,\n                enableDirectRendering\n            } = me.exportMeta;\n\n        const box = event && eventsBoxes.get(String(event.id));\n\n        // In scheduler milestone box left edge is aligned with milestone start date. Later element is rotated and\n        // shifted by CSS by 50% of its width. Dependency feature relies on actual element sizes, but pdf export\n        // does not render actual elements. Therefore, we need to adjust the box.\n        // <remove-on-release>\n        // TODO: RTL support?\n        // </remove-on-release>\n        if (enableDirectRendering && box && event.isMilestone) {\n            box.translate(-box.width / 2, 0);\n        }\n\n        return box;\n    }\n\n    renderDependencies() {\n        const\n            me                = this,\n            {\n                client,\n                eventsBoxes\n            }                 = me.exportMeta,\n            { dependencies }  = client,\n            dependencyFeature = client.features.dependencies,\n            targetElement     = DomHelper.createElement();\n\n        let draw = false;\n\n        dependencies.forEach(dependency => {\n            if ((!eventsBoxes.has(String(dependency.from)) &&\n                !eventsBoxes.has(String(dependency.to))) ||\n                !dependencyFeature.isDependencyVisible(dependency)) {\n                return;\n            }\n\n            const\n                fromBox = me.getEventBox(dependency.fromEvent),\n                toBox   = me.getEventBox(dependency.toEvent);\n\n            dependencyFeature.drawDependency(dependency, true, { from : fromBox?.clone(), to : toBox?.clone() });\n            draw = true;\n        });\n\n        // Force dom sync\n        if (draw) {\n            dependencyFeature.domSync(targetElement);\n        }\n\n        return targetElement.innerHTML;\n    }\n\n    buildDependenciesHtml(html) {\n        const { dependenciesPlaceholder, includeTimeline } = this.exportMeta;\n\n        if (dependenciesPlaceholder && includeTimeline) {\n            const placeholder = dependenciesPlaceholder.outerHTML;\n            html = html.replace(placeholder, this.renderDependencies());\n        }\n\n        return html;\n    }\n};\n", "import GridMultiPageExporter from '../../../../Grid/feature/export/exporter/MultiPageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n\n/**\n * @module Scheduler/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to multiple pages.\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/MultiPageExporter\n *\n * @typings Grid.feature.export.exporter.MultiPageExporter -> Grid.feature.export.exporter.GridMultiPageExporter\n */\nexport default class MultiPageExporter extends SchedulerExporterMixin(GridMultiPageExporter) {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n\n        this.exportMeta.eventsBoxes.clear();\n    }\n\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, top, height, eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n\n        return { resources, events };\n    }\n}\n", "import GridMultiPageVerticalExporter from '../../../../Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\nimport { ScheduleRange } from '../Utils.js';\n\n/**\n * @module Scheduler/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to\n * multiple pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/MultiPageVerticalExporter\n *\n * @typings Grid.feature.export.exporter.MultiPageVerticalExporter -> Grid.feature.export.exporter.GridMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends SchedulerExporterMixin(GridMultiPageVerticalExporter) {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    async stateNextPage(config) {\n        await super.stateNextPage(config);\n\n        this.exportMeta.eventsBoxes.clear();\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        // Scheduler exporter mixin can update totalWidth, so we need to adjust pages and scale here again\n        if (config.scheduleRange !== ScheduleRange.completeview) {\n            this.estimateTotalPages(config);\n        }\n    }\n\n    positionRows(rows) {\n        const\n            resources   = [],\n            events      = [];\n\n        // In case of variable row height row vertical position is not guaranteed to increase\n        // monotonously. Position row manually instead\n        rows.forEach(([html, , , eventsHtml]) => {\n            resources.push(html);\n            eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                events.push(html + extras.join(''));\n\n                // Store event box to render dependencies later\n                this.exportMeta.eventsBoxes.set(String(key), box);\n            });\n        });\n\n        return { resources, events };\n    }\n}\n", "import { ScheduleRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ScheduleRangeCombo extends Combo {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{completeview}',\n        'L{currentview}',\n        'L{daterange}',\n        'L{completedata}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'ScheduleRangeCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'schedulerangecombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable              : false,\n            localizeDisplayFields : true,\n            displayField          : 'text',\n            buildItems() {\n                return Object.entries(ScheduleRange).map(([id, text]) => ({ value : id, text : 'L{' + text + '}' }));\n            }\n        };\n    }\n}\n\n// Register this widget type with its Factory\nScheduleRangeCombo.initClass();\n", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport GridExportDialog from '../../../Grid/view/export/ExportDialog.js';\nimport { ScheduleRange } from '../../feature/export/Utils.js';\nimport '../../view/export/field/ScheduleRangeCombo.js';\nimport Field from '../../../Core/widget/Field.js';\n\n/**\n * @module Scheduler/view/export/SchedulerExportDialog\n */\n\n/**\n * Extends the Grid's {@link Grid.view.export.ExportDialog} and adds a few extra fields specific to the scheduler.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core.widget.Combo Combo}          | 100    | Choose columns to export                             |\n * | `scheduleRangeField`   | {@link Core.widget.Combo Combo}          | 150    | Choose date range to export                          |\n * | `rangesContainer`      | {@link Core.widget.Container Container}  | 151    | Container for range fields                           |\n * | \\>`rangeStartField`    | {@link Core.widget.DateField DateField}  | 10     | Choose date range start                              |\n * | \\>`rangeEndField`      | {@link Core.widget.DateField DateField}  | 30     | Choose date range end                                |\n * | `rowsRangeField`       | {@link Core.widget.Combo Combo}          | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core.widget.Combo Combo}          | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core.widget.Checkbox Checkbox}    | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core.widget.Checkbox Checkbox}    | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core.widget.Combo Combo}          | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core.widget.Combo Combo}          | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core.widget.Combo Combo}          | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                                     | Weight | Description                                          |\n * |------------------------|------------------------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core.widget.Button Button}        | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core.widget.Button Button}        | 200    | Cancel export                                        |\n *\n * *\\> nested items*\n *\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Scheduler.feature.export.PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' },\n *\n *                     // Configure nested fields\n *                     rangesContainer : {\n *                         items : {\n *                             rangeStartField : { value : new Date() },\n *                             rangeEndField : { value : new Date() }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Using DateTime fields for range start/end\n *\n * This config system is also capable (but not limited to) of changing layout of the container and replacing widget type:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     rangesContainer : {\n *                         // DateTime fields are longer, so we better lay them out\n *                         // vertically\n *                         layoutStyle : {\n *                             flexDirection : 'column'\n *                         },\n *                         items : {\n *                             rangeStartField : {\n *                                 // Use DateTime widget for ranges\n *                                 type       : 'datetime',\n *\n *                                 // Sync label width with other fields\n *                                 labelWidth : '12em'\n *                             },\n *                             rangeEndField : {\n *                                 type       : 'datetime',\n *                                 labelWidth : '12em'\n *                             },\n *                             // Add a filler widget that would add a margin at the bottom\n *                             filler : {\n *                                 height : '0.6em',\n *                                 weight : 900\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * scheduler.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * naming pattern - it should have `ref` config ending with `Field`, see other fields for reference - `orientationField`,\n * `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from the dialog, `Field`\n * part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField` becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * scheduler.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Grid/view/export/ExportDialog\n */\nexport default class SchedulerExportDialog extends GridExportDialog {\n\n    //region Config\n\n    static get $name() {\n        return 'SchedulerExportDialog';\n    }\n\n    static get type() {\n        return 'schedulerexportdialog';\n    }\n\n    static get configurable() {\n        return {\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                scheduleRangeField : {\n                    type   : 'schedulerangecombo',\n                    label  : 'L{Schedule range}',\n                    value  : 'completeview',\n                    weight : 150,\n                    onChange({ value }) {\n                        this.parent.widgetMap.rangesContainer.hidden = value !== ScheduleRange.daterange;\n                    }\n                },\n                rangesContainer : {\n                    type     : 'container',\n                    flex     : '1 0 100%',\n                    weight   : 151,\n                    hidden   : true,\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        filler : {\n                            // Filler widget to align date fields\n                            weight : 0,\n                            type   : 'widget',\n                            style  : 'margin-inline-end: -1em;'\n                        },\n                        rangeStartField : {\n                            type       : 'datefield',\n                            label      : 'L{Export from}',\n                            labelWidth : '3em',\n                            flex       : '1 0 25%',\n                            weight     : 10,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeEndField.min = DateHelper.add(value, 1, 'd');\n                            }\n                        },\n                        rangeEndField : {\n                            type       : 'datefield',\n                            label      : 'L{Export to}',\n                            labelWidth : '1em',\n                            flex       : '1 0 25%',\n                            weight     : 30,\n                            onChange({ value }) {\n                                this.parent.widgetMap.rangeStartField.max = DateHelper.add(value, -1, 'd');\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('labelWidth');\n\n        this.width = this.L('L{width}');\n\n        this.items.forEach(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n            else if (widget.ref === 'rangesContainer') {\n                widget.items[0].width = labelWidth;\n            }\n        });\n    }\n\n    applyInitialValues(config) {\n        super.applyInitialValues(config);\n\n        const\n            me                   = this,\n            {\n                client,\n                scheduleRange\n            }                    = config,\n            items                = config.items = config.items || {},\n            scheduleRangeField   = items.scheduleRangeField = items.scheduleRangeField || {},\n            rangesContainer      = items.rangesContainer = items.rangesContainer || {},\n            rangesContainerItems = rangesContainer.items = rangesContainer.items || {},\n            filler               = rangesContainerItems.filler = rangesContainerItems.filler || {},\n            rangeStartField      = rangesContainerItems.rangeStartField = rangesContainerItems.rangeStartField || {},\n            rangeEndField        = rangesContainerItems.rangeEndField = rangesContainerItems.rangeEndField || {};\n\n        filler.width = me.L('labelWidth');\n\n        scheduleRangeField.value = scheduleRangeField.value || scheduleRange;\n\n        if (scheduleRangeField.value === ScheduleRange.daterange) {\n            rangesContainer.hidden = false;\n        }\n\n        const rangeStart = rangeStartField.value = rangeStartField.value || client.startDate;\n        rangeStartField.max = DateHelper.max(client.startDate, DateHelper.add(client.endDate, -1, 'd'));\n\n        let rangeEnd = rangeEndField.value || client.endDate;\n\n        // This is the only place where we can validate date range before it gets to export feature\n        if (rangeEnd <= rangeStart) {\n            rangeEnd = DateHelper.add(rangeStart, 1, 'd');\n        }\n\n        rangeEndField.value = rangeEnd;\n        rangeEndField.min   = DateHelper.min(client.endDate, DateHelper.add(client.startDate, 1, 'd'));\n    }\n}\n", "import GridSinglePageExporter from '../../../../Grid/feature/export/exporter/SinglePageExporter.js';\nimport SchedulerExporterMixin from './SchedulerExporterMixin.js';\n\n/**\n * @module Scheduler/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Scheduler.feature.export.PdfExport} feature to export to single page.\n * Content will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * scheduler.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/SinglePageExporter\n *\n * @typings Grid.feature.export.exporter.SinglePageExporter -> Grid.feature.export.exporter.GridSinglePageExporter\n */\nexport default class SinglePageExporter extends SchedulerExporterMixin(GridSinglePageExporter) {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    // We should not collect dependencies per each page, instead we'd render them once\n    collectDependencies() {}\n\n    positionRows(rows, config) {\n        const\n            resources   = [],\n            events      = [],\n            translateRe = /translate\\((\\d+.?\\d*)px, (\\d+.?\\d*)px\\)/,\n            topRe       = /top:.+?px/;\n\n        if (config.enableDirectRendering) {\n            rows.forEach(([html, , , eventsHtml]) => {\n                resources.push(html);\n\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box, extras = []]]) => {\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n\n                    events.push(html + extras.join(''));\n                });\n            });\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            rows.forEach(([html, top, height, eventsHtml]) => {\n                // Adjust row vertical position by changing `translate` style\n                resources.push(html.replace(translateRe, `translate($1px, ${currentTop}px)`));\n\n                const rowTopDelta = currentTop - top;\n\n                eventsHtml && Array.from(eventsHtml.entries()).forEach(([key, [html, box]]) => {\n                    // Fix event vertical position according to the row top\n                    box.translate(0, rowTopDelta);\n\n                    // Store event box to render dependencies later\n                    this.exportMeta.eventsBoxes.set(String(key), box);\n\n                    // Adjust event vertical position by replacing `top` style\n                    events.push(html.replace(topRe, `top: ${box.y}px`));\n                });\n\n                currentTop += height;\n            });\n        }\n\n        return { resources, events };\n    }\n}\n", "import GridPdfExport from '../../../Grid/feature/export/PdfExport.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport SchedulerExportDialog from '../../view/export/SchedulerExportDialog.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Scheduler component.\n *\n * <img src=\"Scheduler/export-dialog.png\" style=\"max-width : 300px\" alt=\"Scheduler Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * scheduler.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * scheduler.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : scheduler.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * Appends configs related to exporting time axis: {@link #config-scheduleRange}, {@link #config-rangeStart},\n * {@link #config-rangeEnd}\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Grid/feature/export/PdfExport\n * @classtype pdfExport\n * @feature\n *\n * @typings Grid.feature.export.PdfExport -> Grid.feature.export.GridPdfExport\n */\nexport default class PdfExport extends GridPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get defaultConfig() {\n        return {\n            exporters     : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n            dialogClass   : SchedulerExportDialog,\n            /**\n             * Specifies how to export time span.\n             *  * completeview - Complete configured time span, from scheduler start date to end date\n             *  * currentview  - Currently visible time span\n             *  * daterange    - Use specific date range, provided additionally in config. See {@link #config-rangeStart}/\n             *  {@link #config-rangeEnd}\n             * @config {'completeview'|'currentview'|'daterange'}\n             * @default\n             * @category Export file config\n             */\n            scheduleRange : 'completeview',\n\n            /**\n             * Exported time span range start. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeStart : null,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Scheduler.view.export.SchedulerExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Scheduler.view.export.SchedulerExportDialog} widget.\n             * @config {SchedulerExportDialogConfig} exportDialog\n             */\n\n            /**\n             * Exported time span range end. Used with `daterange` config of the {@link #config-scheduleRange}\n             * @config {Date}\n             * @category Export file config\n             */\n            rangeEnd : null\n        };\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties(super.defaultExportDialogConfig, this, ['scheduleRange']);\n    }\n\n    buildExportConfig(config) {\n        config = super.buildExportConfig(config);\n\n        const {\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        } = this;\n\n        // Time axis is filtered from UI, need to append it\n        if (config.columns && !config.columns.find(col => col.type === 'timeAxis')) {\n            config.columns.push(config.client.timeAxisColumn.id);\n        }\n\n        return ObjectHelper.assign({\n            scheduleRange,\n            rangeStart,\n            rangeEnd\n        }, config);\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Scheduler');\n"],
  "mappings": "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",
  "names": ["ResourceInfoColumn", "Column", "$name", "type", "fields", "defaults", "showImage", "showEventCount", "showMeta", "showRole", "validNames", "autoScaleThreshold", "useNameAsImageName", "field", "htmlEncode", "width", "cellCls", "editor", "VersionHelper", "isTestEnv", "construct", "args", "avatarRendering", "AvatarRendering", "element", "grid", "doDestroy", "destroy", "getImageURL", "imageName", "resourceImagePath", "parts", "split", "urlPart", "length", "joined", "StringHelper", "joinPaths", "template", "resourceRecord", "value", "me", "timeAxis", "resourceImageExtension", "defaultResourceImageName", "roleField", "count", "eventStore", "getEvents", "includeOccurrences", "enableRecurringEvents", "startDate", "endDate", "imageUrl", "image", "toLowerCase", "includes", "class", "children", "getResourceAvatar", "initials", "color", "eventColor", "iconCls", "defaultImageUrl", "tag", "text", "getValue", "html", "L", "defaultRenderer", "record", "cellElement", "isExport", "result", "isSpecialRow", "rowHeight", "style", "fontSize", "ColumnStore", "registerColumnType", "_$name", "sides", "editorAlign", "side", "client", "rtl", "topBottom", "top", "bottom", "layoutModes", "estimate", "measure", "layoutSides", "before", "after", "Labels", "InstancePlugin", "configurable", "labelCls", "right", "left", "thisObj", "blurAction", "labelLayoutMode", "labelCharWidth", "pluginConfig", "chain", "scheduler", "config", "isVertical", "Error", "updateHostClasslist", "classList", "remove", "add", "onLabelDblClick", "event", "target", "readOnly", "dataset", "labelConfig", "eventRecord", "resolveEventRecord", "Editor", "inputField", "scrollAction", "render", "startEdit", "align", "matchSize", "stopImmediatePropagation", "changeTop", "processLabelSpec", "updateTop", "changeAfter", "updateAfter", "changeRight", "changeBottom", "updateBottom", "changeBefore", "updateBefore", "changeLeft", "labelSpec", "renderer", "Object", "setPrototypeOf", "resourceStore", "taskStore", "id", "milestoneWidth", "recordType", "fieldDef", "modelClass", "fieldMap", "Reflect", "has", "prototype", "EventHelper", "on", "timeAxisSubGrid", "delegate", "dblclick", "doDisable", "disable", "isPainted", "refresh", "generateLabelConfigs", "data", "configs", "domConfig", "className", "taskFeature", "eventRecordProperty", "call", "assignmentRecord", "DateHelper", "format", "displayDateFormat", "encodeHtml", "push", "measureLabels", "pxPerMS", "timeAxisViewModel", "getSingleUnitInPixels", "DomHelper", "stripTags", "labelMeasureElement", "createElement", "parent", "foregroundCanvas", "retainElement", "DomSync", "sync", "targetElement", "childrenOnly", "firstElementChild", "offsetWidth", "ms", "startMS", "endMS", "onEventDataGenerated", "_data$eventRecord", "disabled", "isResourceTimeRange", "wrapperChildren", "updateLabelLayoutMode", "isConfiguring", "refreshWithTransition", "updateLabelCharWidth", "featureClass", "GridFeatureManager", "registerFeature", "RowReorder", "TransactionalFeature", "GridRowReorder", "onDragStart", "transactionalFeaturesEnabled", "startFeatureTransaction", "onDrop", "rejectFeatureTransaction", "onAbort", "__publicField", "TimelineSummary", "GridSummary", "showTooltip", "summaries", "isTimelineBase", "updateProject", "project", "ion", "timeAxisViewModelUpdate", "renderRows", "detachListeners", "name", "dataReady", "isHorizontal", "footer", "querySelector", "summaryBarElement", "timeline", "sizeProp", "colCfg", "columnConfig", "summaryContainer", "_tip", "some", "label", "Tooltip", "cls", "hoverDelay", "hideDelay", "forElement", "anchorToTarget", "trackMouse", "forSelector", "getHtml", "activeTarget", "_tipHtml", "innerHTML", "map", "col", "join", "updateTimelineSummaries", "_this$summaryColumn", "summaryColumn", "toggle", "_this$_tip", "ScheduleRange", "completeview", "currentview", "daterange", "immediatePromise", "Promise", "resolve", "SchedulerExporterMixin", "base", "scrollRowIntoView", "index", "rowManager", "scrollable", "oldY", "y", "store", "scrollTo", "calculateTop", "detacher", "scroll", "scrollTop", "getRow", "scrollToDate", "date", "scrollFired", "promises", "scrollStart", "x", "block", "header", "await", "checkLog", "all", "cloneElement", "clear", "clonedEl", "prepareComponent", "currentOrientation", "includeTimeline", "scheduleRange", "rangeStart", "rangeEnd", "visibleDateRange", "waitForAnimations", "infiniteScroll", "setTimeSpan", "svgCanvas", "_oldEnableEventAnimations", "enableEventAnimations", "isHorizontalRendering", "_oldScrollBuffer", "scrollBuffer", "_oldVerticalBuffer", "verticalBufferSize", "ignoreViewBox", "exportMeta", "fgCanvasEl", "timeAxisEl", "totalWidth", "subGrids", "normal", "getDistanceBetweenDates", "horizontalPages", "Math", "ceil", "pageWidth", "totalPages", "verticalPages", "scrollLeft", "getCoordinateFromDate", "timeAxisHeaders", "timeAxisPlaceholders", "headersColleted", "forEachSelector", "headerRow", "createPlaceholder", "Map", "eventsPlaceholder", "removeEachSelector", "eventsBoxes", "hasActiveFeature", "columnLinesCanvas", "columnLinesPlaceholder", "columnLines", "lines", "majorLines", "timeRangesHeaderCanvas", "timeRangesBodyCanvas", "timeRanges", "enableDirectRendering", "timeRangesHeaderPlaceholder", "body", "timeRangesBodyPlaceholder", "features", "dependencies", "fillDrawingCache", "svgCanvasEl", "getAttribute", "dependencyCanvasEl", "dependenciesPlaceholder", "ns", "betweenLesser", "restoreState", "waitForHorizontalScroll", "restoreComponent", "onRowsCollected", "rows", "timeView", "pageRangeStart", "pageRangeEnd", "getCurrentPageDateRange", "renderHeaders", "renderLines", "renderRanges", "renderEvents", "rangeProcessed", "collectLines", "collectHeaders", "collectRanges", "collectEvents", "timeSpanContains", "getTime", "horizontalPosition", "pageStartX", "pageEndX", "normalGridX", "locked", "splitterWidth", "getDateFromCoordinate", "max", "multiplier", "prepareExportElement", "headerId", "footerId", "el", "forEach", "selector", "canvasEl", "lastExportedRowBottom", "height", "marginLeft", "headersCollected", "headerRows", "headersMap", "tickIndex", "set", "outerHTML", "String", "headerCanvas", "bodyCanvas", "bgCanvas", "backgroundCanvas", "lineEl", "contains", "lineIndex", "Number", "line", "replace", "addedRows", "normalRows", "row", "_resource$events", "_resource$timeRanges", "rowConfig", "resource", "getAt", "dataIndex", "eventsMap", "events", "isScheduled", "getElementFromEventRecord", "parentElement", "Rectangle", "from", "offsetParent", "timeRange", "_client$features$reso", "elId", "resourceTimeRanges", "generateElementId", "syncIdMap", "start", "end", "timeAxisView", "timeAxisColumn", "buildCells", "document", "resourceLayout", "getResourceLayout", "eventDOMConfigs", "getEventDOMConfigForCurrentView", "eventId", "domConfigs", "getColumnLinesDOMConfig", "onlyChildren", "getDOMConfig", "i", "buildPageHtml", "values", "placeHolder", "mergedCellsHtml", "placeHolderText", "resources", "positionRows", "contentHtml", "headers", "Array", "lineElements", "concat", "buildDependenciesHtml", "getEventBox", "box", "get", "isMilestone", "translate", "renderDependencies", "dependencyFeature", "draw", "dependency", "to", "isDependencyVisible", "fromBox", "fromEvent", "toBox", "toEvent", "drawDependency", "clone", "domSync", "placeholder", "MultiPageExporter", "GridMultiPageExporter", "stateNextPage", "eventsHtml", "entries", "key", "extras", "MultiPageVerticalExporter", "GridMultiPageVerticalExporter", "estimateTotalPages", "ScheduleRangeCombo", "Combo", "defaultConfig", "editable", "localizeDisplayFields", "displayField", "buildItems", "initClass", "SchedulerExportDialog", "GridExportDialog", "localeClass", "items", "scheduleRangeField", "weight", "onChange", "widgetMap", "rangesContainer", "hidden", "flex", "filler", "rangeStartField", "labelWidth", "rangeEndField", "min", "onLocaleChange", "widget", "Field", "ref", "applyInitialValues", "rangesContainerItems", "SinglePageExporter", "GridSinglePageExporter", "collectDependencies", "translateRe", "topRe", "currentTop", "rowTopDelta", "PdfExport", "GridPdfExport", "exporters", "dialogClass", "defaultExportDialogConfig", "ObjectHelper", "copyProperties", "buildExportConfig", "columns", "find", "assign"]
}
