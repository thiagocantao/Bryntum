{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/preset/ViewPreset.js", "../../../../Scheduler/lib/Scheduler/localization/En.js", "../../../../Scheduler/lib/Scheduler/preset/PresetStore.js", "../../../../Scheduler/lib/Scheduler/preset/PresetManager.js", "../../../../Scheduler/lib/Scheduler/data/TimeAxis.js", "../../../../Scheduler/lib/Scheduler/view/model/TimeAxisViewModel.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineDateMapper.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineDomEvents.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineViewPresets.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineZoomable.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceConfirmationPopup.js", "../../../../Scheduler/lib/Scheduler/view/mixin/RecurringEvents.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineEventRendering.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineScroll.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TimelineState.js", "../../../../Scheduler/lib/Scheduler/view/Header.js", "../../../../Scheduler/lib/Scheduler/view/TimeAxisSubGrid.js", "../../../../Scheduler/lib/Scheduler/view/TimelineBase.js", "../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js", "../../../../Scheduler/lib/Scheduler/data/CrudManager.js", "../../../../Scheduler/lib/Scheduler/view/mixin/CurrentConfig.js", "../../../../Scheduler/lib/Scheduler/view/mixin/Describable.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerDom.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerDomEvents.js", "../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayout.js", "../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayoutStack.js", "../../../../Scheduler/lib/Scheduler/eventlayout/PackMixin.js", "../../../../Scheduler/lib/Scheduler/eventlayout/HorizontalLayoutPack.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerResourceRendering.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerEventRendering.js", "../../../../Scheduler/lib/Scheduler/data/mixin/ProjectConsumer.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerStores.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerScroll.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerRegions.js", "../../../../Scheduler/lib/Scheduler/view/mixin/SchedulerState.js", "../../../../Scheduler/lib/Scheduler/view/mixin/EventSelection.js", "../../../../Scheduler/lib/Scheduler/view/mixin/EventNavigation.js", "../../../../Scheduler/lib/Scheduler/view/mixin/TransactionalFeatureMixin.js", "../../../../Scheduler/lib/Scheduler/data/mixin/AttachToProjectMixin.js", "../../../../Scheduler/lib/Scheduler/view/orientation/HorizontalRendering.js", "../../../../Scheduler/lib/Scheduler/eventlayout/VerticalLayout.js", "../../../../Scheduler/lib/Scheduler/view/orientation/VerticalRendering.js", "../../../../Scheduler/lib/Scheduler/view/TimeAxisBase.js", "../../../../Scheduler/lib/Scheduler/view/HorizontalTimeAxis.js", "../../../../Scheduler/lib/Scheduler/view/ResourceHeader.js", "../../../../Scheduler/lib/Scheduler/column/TimeAxisColumn.js", "../../../../Scheduler/lib/Scheduler/view/VerticalTimeAxis.js", "../../../../Scheduler/lib/Scheduler/column/VerticalTimeAxisColumn.js", "../../../../Scheduler/lib/Scheduler/view/SchedulerBase.js", "../../../../Scheduler/lib/Scheduler/widget/EventColorPicker.js", "../../../../Scheduler/lib/Scheduler/tooltip/ClockTemplate.js", "../../../../Scheduler/lib/Scheduler/feature/mixin/TaskEditStm.js", "../../../../Scheduler/lib/Scheduler/feature/base/TimeSpanMenuBase.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceFrequencyCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceDaysCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceDaysButtonGroup.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceMonthDaysButtonGroup.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceMonthsButtonGroup.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceStopConditionCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrencePositionsCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceEditorPanel.js", "../../../../Scheduler/lib/Scheduler/widget/EventColorField.js", "../../../../Scheduler/lib/Scheduler/feature/EventMenu.js", "../../../../Scheduler/lib/Scheduler/feature/ScheduleMenu.js"],
  "sourcesContent": ["import Model from '../../Core/data/Model.js';\nimport IdHelper from '../../Core/helper/IdHelper.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/preset/ViewPreset\n */\n\n/**\n * An object containing a unit identifier and an increment variable, used to define the `timeResolution` of a\n * `ViewPreset`.\n * @typedef {Object} ViewPresetTimeResolution\n * @property {String} unit The unit of the resolution, e.g. 'minute'\n * @property {Number} increment The increment of the resolution, e.g. 15\n */\n\n/**\n * Defines a header level for a ViewPreset.\n *\n * A sample header configuration can look like below\n * ```javascript\n * headers    : {\n *     {\n *         unit        : \"month\",\n *         renderer : function(start, end, headerConfig, index) {\n *             var month = start.getMonth();\n *             // Simple alternating month in bold\n *             if (start.getMonth() % 2) {\n *                 return '<strong>' + month + '</strong>';\n *             }\n *             return month;\n *         },\n *         align       : 'start' // `start` or `end`, omit to center content (default)\n *     },\n *     {\n *         unit        : \"week\",\n *         increment   : 1,\n *         renderer    : function(start, end, headerConfig, index) {\n *             return 'foo';\n *         }\n *     },\n * }\n * ```\n *\n * @typedef {Object} ViewPresetHeaderRow\n * @property {'start'|'center'|'end'} align The text alignment for the cell. Valid values are `start` or `end`, omit\n * this to center text content (default). Can also be added programmatically in `the renderer`.\n * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit The unit of time\n * represented by each cell in this header row. See also increment property. Valid values are \"millisecond\", \"second\",\n * \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n * @property {String} headerCellCls A CSS class to add to the cells in the time axis header row. Can also be added\n * programmatically in the `renderer`.\n * @property {Number} increment The number of units each header cell will represent (e.g. 30 together with unit:\n * \"minute\" for 30 minute cells)\n * @property {String} dateFormat Defines how the cell date will be formatted\n * @property {Function} renderer A custom renderer function used to render the cell content. It should return text/HTML\n * to put in the header cell.\n *\n * ```javascript\n * function (startDate, endDate, headerConfig, i) {\n *   // applies special CSS class to align header left\n *   headerConfig.align = \"start\";\n *   // will be added as a CSS class of the header cell DOM element\n *   headerConfig.headerCellCls = \"myClass\";\n *\n *   return DateHelper.format(startDate, 'YYYY-MM-DD');\n * }\n * ```\n *\n * The render function is called with the following parameters:\n *\n * @property {Date} renderer.startDate The start date of the cell.\n * @property {Date} renderer.endDate The end date of the cell.\n * @property {Object} renderer.headerConfig An object containing the header config.\n * @property {'start'|'center'|'end'} [renderer.headerConfig.align] The text alignment for the cell. See `align` above.\n * @property {String} [renderer.headerConfig.headerCellCls] A CSS class to add to the cells in the time axis header row.\n * See `headerCellCls` above.\n * @property {Number} renderer.index The index of the cell in the row.\n * @property {Object} thisObj `this` reference for the renderer function\n * @property {Function} cellGenerator A function that should return an array of objects containing 'start', 'end' and\n * 'header' properties. Use this if you want full control over how the header rows are generated.\n *\n * **Note:** `cellGenerator` cannot be used for the bottom level of your headers.\n *\n * Example :\n * ```javascript\n * viewPreset : {\n *     displayDateFormat : 'H:mm',\n *     shiftIncrement    : 1,\n *     shiftUnit         : 'WEEK',\n *     timeResolution    : {\n *         unit      : 'MINUTE',\n *         increment : 10\n *     },\n *     headers           : [\n *         {\n *             unit          : 'year',\n *             // Simplified scenario, assuming view will always just show one US fiscal year\n *             cellGenerator : (viewStart, viewEnd) => [{\n *                 start  : viewStart,\n *                 end    : viewEnd,\n *                 header : `Fiscal Year ${viewStart.getFullYear() + 1}`\n *             }]\n *         },\n *         {\n *             unit : 'quarter',\n *             renderer(start, end, cfg) {\n *                 const\n *                     quarter       = Math.floor(start.getMonth() / 3) + 1,\n *                     fiscalQuarter = quarter === 4 ? 1 : (quarter + 1);\n *\n *                 return `FQ${fiscalQuarter} ${start.getFullYear() + (fiscalQuarter === 1 ? 1 : 0)}`;\n *             }\n *         },\n *         {\n *             unit       : 'month',\n *             dateFormat : 'MMM Y'\n *         }\n *     ]\n *  },\n * ```\n */\n\n/**\n * A ViewPreset is a record of {@link Scheduler.preset.PresetStore PresetStore} which describes the granularity\n * of the timeline view of a {@link Scheduler.view.Scheduler Scheduler} and the layout and subdivisions of the timeline header.\n *\n * You can create a new instance by specifying all fields:\n *\n * ```javascript\n * const myViewPreset = new ViewPreset({\n *     id   : 'myPreset',              // Unique id value provided to recognize your view preset. Not required, but having it you can simply set new view preset by id: scheduler.viewPreset = 'myPreset'\n *\n *     name : 'My view preset',        // A human-readable name provided to be used in GUI, e.i. preset picker, etc.\n *\n *     tickWidth  : 24,                // Time column width in horizontal mode\n *     tickHeight : 50,                // Time column height in vertical mode\n *     displayDateFormat : 'HH:mm',    // Controls how dates will be displayed in tooltips etc\n *\n *     shiftIncrement : 1,             // Controls how much time to skip when calling shiftNext and shiftPrevious.\n *     shiftUnit      : 'day',         // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.\n *     defaultSpan    : 12,            // By default, if no end date is supplied to a view it will show 12 hours\n *\n *     timeResolution : {              // Dates will be snapped to this resolution\n *         unit      : 'minute',       // Valid values are 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'.\n *         increment : 15\n *     },\n *\n *     headers : [                     // This defines your header rows from top to bottom\n *         {                           // For each row you can define 'unit', 'increment', 'dateFormat', 'renderer', 'align', and 'thisObj'\n *             unit       : 'day',\n *             dateFormat : 'ddd DD/MM'\n *         },\n *         {\n *             unit       : 'hour',\n *             dateFormat : 'HH:mm'\n *         }\n *     ],\n *\n *     columnLinesFor : 1              // Defines header level column lines will be drawn for. Defaults to the last level.\n * });\n * ```\n *\n * Or you can extend one of view presets registered in {@link Scheduler.preset.PresetManager PresetManager}:\n *\n * ```javascript\n * const myViewPreset2 = new ViewPreset({\n *     id   : 'myPreset',                  // Unique id value provided to recognize your view preset. Not required, but having it you can simply set new view preset by id: scheduler.viewPreset = 'myPreset'\n *     name : 'My view preset',            // A human-readable name provided to be used in GUI, e.i. preset picker, etc.\n *     base : 'hourAndDay',                // Extends 'hourAndDay' view preset provided by PresetManager. You can pick out any of PresetManager's view presets: PresetManager.records\n *\n *     timeResolution : {                  // Override time resolution\n *         unit      : 'minute',\n *         increment : 15                  // Make it increment every 15 mins\n *     },\n *\n *     headers : [                         // Override headers\n *         {\n *             unit       : 'day',\n *             dateFormat : 'DD.MM.YYYY'   // Use different date format for top header 01.10.2020\n *         },\n *         {\n *             unit       : 'hour',\n *             dateFormat : 'LT'\n *         }\n *     ]\n * });\n * ```\n *\n * See {@link Scheduler.preset.PresetManager PresetManager} for the list of base presets. You may add your own\n * presets to this global list:\n *\n * ```javascript\n * PresetManager.add(myViewPreset);     // Adds new preset to the global scope. All newly created scheduler instances will have it too.\n *\n * const scheduler = new Scheduler({\n *     viewPreset : 'myPreset'\n *     // other configs...\n * });\n * ```\n *\n * Or add them on an individual basis to Scheduler instances:\n *\n * ```javascript\n * const scheduler = new Scheduler({...});\n *\n * scheduler.presets.add(myViewPreset); // Adds new preset to the scheduler instance only. All newly created scheduler instances will **not** have it.\n *\n * scheduler.viewPreset = 'myPreset';\n * ```\n *\n * ## Defining custom header rows\n *\n * You can have any number of header rows by specifying {@link #field-headers}, see {@link #typedef-ViewPresetHeaderRow}\n * for the config object format and {@link Core.helper.DateHelper} for the supported date formats, or use to render\n * custom contents into the row cells.\n *\n * ```javascript\n *  headers : [\n *      {\n *          unit       : 'month',\n *          dateFormat : 'MM.YYYY'\n *      },\n *      {\n *          unit       : 'week',\n *          renderer   : ({ startDate }) => `Week ${DateHelper.format(startDate, 'WW')}`\n *      }\n *  ]\n * ```\n *\n * {@inlineexample Scheduler/preset/CustomHeader.js}\n *\n * This live demo shows a custom ViewPreset with AM/PM time format:\n * @inlineexample Scheduler/preset/amPmPreset.js\n * @extends Core/data/Model\n */\nexport default class ViewPreset extends Model {\n\n    static $name = 'ViewPreset';\n\n    static get fields() {\n        return [\n            /**\n             * The name of an existing view preset to extend\n             * @field {String} base\n             */\n            { name : 'base', type : 'string' },\n\n            /**\n             * The name of the view preset\n             * @field {String} name\n             */\n            { name : 'name', type : 'string' },\n\n            /**\n             * The height of the row in horizontal orientation\n             * @field {Number} rowHeight\n             * @default\n             */\n            {\n                name         : 'rowHeight',\n                defaultValue : 24\n            },\n\n            /**\n             * The width of the time tick column in horizontal orientation\n             * @field {Number} tickWidth\n             * @default\n             */\n            {\n                name         : 'tickWidth',\n                defaultValue : 50\n            },\n\n            /**\n             * The height of the time tick column in vertical orientation\n             * @field {Number} tickHeight\n             * @default\n             */\n            {\n                name         : 'tickHeight',\n                defaultValue : 50\n            },\n\n            /**\n             * Defines how dates will be formatted in tooltips etc\n             * @field {String} displayDateFormat\n             * @default\n             */\n            {\n                name         : 'displayDateFormat',\n                defaultValue : 'HH:mm'\n            },\n\n            /**\n             * The unit to shift when calling shiftNext/shiftPrevious to navigate in the chart.\n             * Valid values are \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} shiftUnit\n             * @default\n             */\n            {\n                name         : 'shiftUnit',\n                defaultValue : 'hour'\n            },\n\n            /**\n             * The amount to shift (in shiftUnits)\n             * @field {Number} shiftIncrement\n             * @default\n             */\n            {\n                name         : 'shiftIncrement',\n                defaultValue : 1\n            },\n\n            /**\n             * The amount of time to show by default in a view (in the unit defined by {@link #field-mainUnit})\n             * @field {Number} defaultSpan\n             * @default\n             */\n            {\n                name         : 'defaultSpan',\n                defaultValue : 12\n            },\n\n            /**\n             * Initially set to a unit. Defaults to the unit defined by the middle header.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} mainUnit\n             */\n            {\n                name : 'mainUnit'\n            },\n\n            /**\n             * Note: Currently, this field only applies when changing viewPreset with the {@link Scheduler.widget.ViewPresetCombo}.\n             *\n             * Set to a number and that amount of {@link #field-mainUnit} will be added to the startDate. For example: A\n             * start value of `5` together with the mainUnit `hours` will add 5 hours to the startDate. This can achieve\n             * a \"day view\" that starts 5 AM.\n             *\n             * Set to a string unit (for example week, day, month) and the startDate will be the start of that unit\n             * calculated from current startDate. A start value of `week` will result in a startDate in the first day of\n             * the week.\n             *\n             * If set to a number or not set at all, the startDate will be calculated at the beginning of current\n             * mainUnit.\n             * @field {Number|String} start\n             */\n            {\n                name : 'start'\n            },\n\n            /**\n             * An object containing a unit identifier and an increment variable. This value means minimal task duration\n             * you can create using UI. For example when you drag create a task or drag & drop a task, if increment is 5\n             * and unit is 'minute' that means that you can create a 5-minute-long task, or move it 5 min\n             * forward/backward. This config maps to scheduler's\n             * {@link Scheduler.view.mixin.TimelineDateMapper#property-timeResolution} config.\n             *\n             * ```javascript\n             * timeResolution : {\n             *   unit      : 'minute',  //Valid values are \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n             *   increment : 5\n             * }\n             * ```\n             *\n             * @field {ViewPresetTimeResolution} timeResolution\n             */\n            'timeResolution',\n\n            /**\n             * An array containing one or more {@link #typedef-ViewPresetHeaderRow} config objects, each of\n             * which defines a level of headers for the scheduler.\n             * The `main` unit will be the last header's unit, but this can be changed using the\n             * {@link #field-mainHeaderLevel} field.\n             * @field {ViewPresetHeaderRow[]} headers\n             */\n            'headers',\n\n            /**\n             * Index of the {@link #field-headers} array to define which header level is the `main` header.\n             * Defaults to the bottom header.\n             * @field {Number} mainHeaderLevel\n             */\n            'mainHeaderLevel',\n\n            /**\n             * Index of a header level in the {@link #field-headers} array for which column lines are drawn. See\n             * {@link Scheduler.feature.ColumnLines}.\n             * Defaults to the bottom header.\n             * @field {Number} columnLinesFor\n             */\n            'columnLinesFor'\n        ];\n    }\n\n    construct() {\n        super.construct(...arguments);\n        this.normalizeUnits();\n    }\n\n    generateId(owner) {\n        const\n            me    = this,\n            {\n                headers\n            }     = me,\n            parts = [];\n\n        // If we were subclassed from a base, use that id as the basis of our.\n        let result = Object.getPrototypeOf(me.data).id;\n\n        if (!result) {\n            for (let { length } = headers, i = length - 1; i >= 0; i--) {\n                const\n                    { unit, increment } = headers[i],\n                    multiple            = increment > 1;\n\n                parts.push(`${multiple ? increment : ''}${i ? unit : StringHelper.capitalize(unit)}${multiple ? 's' : ''}`);\n            }\n\n            // Use upwards header units so eg \"monthAndYear\"\n            result = parts.join('And');\n        }\n\n        // If duplicate, decorate the generated by adding details.\n        // For example make it \"hourAndDay-50by80\"\n        // Only interrogate the store if it is loaded. If consulted during\n        // a load, the idMap will be created empty\n        if (owner.count && owner.includes(result)) {\n            result += `-${me.tickWidth}by${me.tickHeight || me.tickWidth}`;\n            // If still duplicate use increment\n            if (owner.includes(result)) {\n                result += `-${me.bottomHeader.increment}`;\n                // And if STILL duplicate, make it unique with a suffix\n                if (owner.includes(result)) {\n                    result = IdHelper.generateId(`${result}-`);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    normalizeUnits() {\n        const\n            me                                     = this,\n            { timeResolution, headers, shiftUnit } = me;\n\n        if (headers) {\n            // Make sure date \"unit\" constant specified in the preset are resolved\n            for (let i = 0, { length } = headers; i < length; i++) {\n                const header = headers[i];\n\n                header.unit = DH.normalizeUnit(header.unit);\n                if (header.splitUnit) {\n                    header.splitUnit = DH.normalizeUnit(header.splitUnit);\n                }\n                if (!('increment' in header)) {\n                    headers[i] = Object.assign({\n                        increment : 1\n                    }, header);\n                }\n            }\n        }\n\n        if (timeResolution) {\n            timeResolution.unit = DH.normalizeUnit(timeResolution.unit);\n        }\n\n        if (shiftUnit) {\n            me.shiftUnit = DH.normalizeUnit(shiftUnit);\n        }\n    }\n\n    // Process legacy columnLines config into a headers array.\n    static normalizeHeaderConfig(data) {\n        const\n            { headerConfig, columnLinesFor, mainHeaderLevel } = data,\n            headers                                           = data.headers = [];\n\n        if (headerConfig.top) {\n            if (columnLinesFor === 'top') {\n                data.columnLinesFor = 0;\n            }\n            if (mainHeaderLevel === 'top') {\n                data.mainHeaderLevel = 0;\n            }\n            headers[0] = headerConfig.top;\n        }\n        if (headerConfig.middle) {\n            if (columnLinesFor === 'middle') {\n                data.columnLinesFor = headers.length;\n            }\n            if (mainHeaderLevel === 'middle') {\n                data.mainHeaderLevel = headers.length;\n            }\n            headers.push(headerConfig.middle);\n        }\n        else {\n            throw new Error('ViewPreset.headerConfig must be configured with a middle');\n        }\n        if (headerConfig.bottom) {\n            // Main level is middle when using headerConfig object.\n            data.mainHeaderLevel = headers.length - 1;\n\n            // There *must* be a middle above this bottom header\n            // so that is the columnLines one by default.\n            if (columnLinesFor == null) {\n                data.columnLinesFor = headers.length - 1;\n            }\n            else if (columnLinesFor === 'bottom') {\n                data.columnLinesFor = headers.length;\n            }\n\n            // There *must* be a middle above this bottom header\n            // so that is the main one by default.\n            if (mainHeaderLevel == null) {\n                data.mainHeaderLevel = headers.length - 1;\n            }\n            if (mainHeaderLevel === 'bottom') {\n                data.mainHeaderLevel = headers.length;\n            }\n\n            headers.push(headerConfig.bottom);\n        }\n    }\n\n    // These are read-only once configured.\n    set() {}\n\n    inSet() {}\n\n    get columnLinesFor() {\n        return ('columnLinesFor' in this.data) ? this.data.columnLinesFor : this.headers.length - 1;\n    }\n\n    get tickSize() {\n        return this._tickSize || this.tickWidth;\n    }\n\n    get tickWidth() {\n        return ('tickWidth' in this.data) ? this.data.tickWidth : 50;\n    }\n\n    get tickHeight() {\n        return ('tickHeight' in this.data) ? this.data.tickHeight : 50;\n    }\n\n    get headerConfig() {\n        // Configured in the legacy manner, just return the configured value.\n        if (this.data.headerConfig) {\n            return this.data.headerConfig;\n        }\n\n        // Rebuild the object based upon the configured headers array.\n        const\n            result      = {},\n            { headers } = this,\n            { length }  = headers;\n\n        switch (length) {\n            case 1 :\n                result.middle = headers[0];\n                break;\n            case 2:\n                if (this.mainHeaderLevel === 0) {\n                    result.middle = headers[0];\n                    result.bottom = headers[1];\n                }\n                else {\n                    result.top    = headers[0];\n                    result.middle = headers[1];\n                }\n                break;\n            case 3:\n                result.top    = headers[0];\n                result.middle = headers[1];\n                result.bottom = headers[2];\n                break;\n            default:\n                throw new Error('headerConfig object not supported for >3 header levels');\n        }\n\n        return result;\n    }\n\n    set mainHeaderLevel(mainHeaderLevel) {\n        this.data.mainHeaderLevel = mainHeaderLevel;\n    }\n\n    get mainHeaderLevel() {\n        if ('mainHeaderLevel' in this.data) {\n            return this.data.mainHeaderLevel;\n        }\n\n        // 3 headers, then it's the middle\n        if (this.data.headers.length === 3) {\n            return 1;\n        }\n\n        // Assume it goes top, middle.\n        // If it's middle, top, use mainHeaderLevel : 0\n        return this.headers.length - 1;\n    }\n\n    get mainHeader() {\n        return this.headers[this.mainHeaderLevel];\n    }\n\n    get topHeader() {\n        return this.headers[0];\n    }\n\n    get topUnit() {\n        return this.topHeader.unit;\n    }\n\n    get topIncrement() {\n        return this.topHeader.increment;\n    }\n\n    get bottomHeader() {\n        return this.headers[this.headers.length - 1];\n    }\n\n    get leafUnit() {\n        return this.bottomHeader.unit;\n    }\n\n    get leafIncrement() {\n        return this.bottomHeader.increment;\n    }\n\n    get mainUnit() {\n        if ('mainUnit' in this.data) {\n            return this.data.mainUnit;\n        }\n        return this.mainHeader.unit;\n    }\n\n    get msPerPixel() {\n        const { bottomHeader } = this;\n\n        return Math.round(DH.asMilliseconds(bottomHeader.increment || 1, bottomHeader.unit) / this.tickWidth);\n    }\n\n    get isValid() {\n        const me = this;\n\n        let valid = true;\n\n        // Make sure all date \"unit\" constants are valid\n        for (const header of me.headers) {\n            valid = valid && Boolean(DH.normalizeUnit(header.unit));\n        }\n\n        if (me.timeResolution) {\n            valid = valid && DH.normalizeUnit(me.timeResolution.unit);\n        }\n\n        if (me.shiftUnit) {\n            valid = valid && DH.normalizeUnit(me.shiftUnit);\n        }\n\n        return valid;\n    }\n}\n", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../Grid/localization/En.js';\n\nconst locale = {\n\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n\n    Object : {\n        newEvent : 'New event'\n    },\n\n    ResourceInfoColumn : {\n        eventCountText : data => data + ' event' + (data !== 1 ? 's' : '')\n    },\n\n    Dependencies : {\n        from    : 'From',\n        to      : 'To',\n        valid   : 'Valid',\n        invalid : 'Invalid'\n    },\n\n    DependencyType : {\n        SS           : 'SS',\n        SF           : 'SF',\n        FS           : 'FS',\n        FF           : 'FF',\n        StartToStart : 'Start-to-Start',\n        StartToEnd   : 'Start-to-Finish',\n        EndToStart   : 'Finish-to-Start',\n        EndToEnd     : 'Finish-to-Finish',\n        short        : [\n            'SS',\n            'SF',\n            'FS',\n            'FF'\n        ],\n        long : [\n            'Start-to-Start',\n            'Start-to-Finish',\n            'Finish-to-Start',\n            'Finish-to-Finish'\n        ]\n    },\n\n    DependencyEdit : {\n        From              : 'From',\n        To                : 'To',\n        Type              : 'Type',\n        Lag               : 'Lag',\n        'Edit dependency' : 'Edit dependency',\n        Save              : 'Save',\n        Delete            : 'Delete',\n        Cancel            : 'Cancel',\n        StartToStart      : 'Start to Start',\n        StartToEnd        : 'Start to End',\n        EndToStart        : 'End to Start',\n        EndToEnd          : 'End to End'\n    },\n\n    EventEdit : {\n        Name         : 'Name',\n        Resource     : 'Resource',\n        Start        : 'Start',\n        End          : 'End',\n        Save         : 'Save',\n        Delete       : 'Delete',\n        Cancel       : 'Cancel',\n        'Edit event' : 'Edit event',\n        Repeat       : 'Repeat'\n    },\n\n    EventDrag : {\n        eventOverlapsExisting : 'Event overlaps existing event for this resource',\n        noDropOutsideTimeline : 'Event may not be dropped completely outside the timeline'\n    },\n\n    SchedulerBase : {\n        'Add event'      : 'Add event',\n        'Delete event'   : 'Delete event',\n        'Unassign event' : 'Unassign event',\n        color            : 'Color'\n    },\n\n    TimeAxisHeaderMenu : {\n        pickZoomLevel   : 'Zoom',\n        activeDateRange : 'Date range',\n        startText       : 'Start date',\n        endText         : 'End date',\n        todayText       : 'Today'\n    },\n\n    EventCopyPaste : {\n        copyEvent  : 'Copy event',\n        cutEvent   : 'Cut event',\n        pasteEvent : 'Paste event'\n    },\n\n    EventFilter : {\n        filterEvents : 'Filter tasks',\n        byName       : 'By name'\n    },\n\n    TimeRanges : {\n        showCurrentTimeLine : 'Show current timeline'\n    },\n\n    PresetManager : {\n        secondAndMinute : {\n            displayDateFormat : 'll LTS',\n            name              : 'Seconds'\n        },\n        minuteAndHour : {\n            topDateFormat     : 'ddd MM/DD, hA',\n            displayDateFormat : 'll LST'\n        },\n        hourAndDay : {\n            topDateFormat     : 'ddd MM/DD',\n            middleDateFormat  : 'LST',\n            displayDateFormat : 'll LST',\n            name              : 'Day'\n        },\n        day : {\n            name : 'Day/hours'\n        },\n        week : {\n            name : 'Week/hours'\n        },\n        dayAndWeek : {\n            displayDateFormat : 'll LST',\n            name              : 'Week/days'\n        },\n        dayAndMonth : {\n            name : 'Month'\n        },\n        weekAndDay : {\n            displayDateFormat : 'll LST',\n            name              : 'Week'\n        },\n        weekAndMonth : {\n            name : 'Weeks'\n        },\n        weekAndDayLetter : {\n            name : 'Weeks/weekdays'\n        },\n        weekDateAndMonth : {\n            name : 'Months/weeks'\n        },\n        monthAndYear : {\n            name : 'Months'\n        },\n        year : {\n            name : 'Years'\n        },\n        manyYears : {\n            name : 'Multiple years'\n        }\n    },\n\n    RecurrenceConfirmationPopup : {\n        'delete-title'              : 'You are deleting an event',\n        'delete-all-message'        : 'Do you want to delete all occurrences of this event?',\n        'delete-further-message'    : 'Do you want to delete this and all future occurrences of this event, or only the selected occurrence?',\n        'delete-further-btn-text'   : 'Delete All Future Events',\n        'delete-only-this-btn-text' : 'Delete Only This Event',\n        'update-title'              : 'You are changing a repeating event',\n        'update-all-message'        : 'Do you want to change all occurrences of this event?',\n        'update-further-message'    : 'Do you want to change only this occurrence of the event, or this and all future occurrences?',\n        'update-further-btn-text'   : 'All Future Events',\n        'update-only-this-btn-text' : 'Only This Event',\n        Yes                         : 'Yes',\n        Cancel                      : 'Cancel',\n        width                       : 600\n    },\n\n    RecurrenceLegend : {\n        ' and '                         : ' and ',\n        Daily                           : 'Daily',\n        'Weekly on {1}'                 : ({ days }) => `Weekly on ${days}`,\n        'Monthly on {1}'                : ({ days }) => `Monthly on ${days}`,\n        'Yearly on {1} of {2}'          : ({ days, months }) => `Yearly on ${days} of ${months}`,\n        'Every {0} days'                : ({ interval }) => `Every ${interval} days`,\n        'Every {0} weeks on {1}'        : ({ interval, days }) => `Every ${interval} weeks on ${days}`,\n        'Every {0} months on {1}'       : ({ interval, days }) => `Every ${interval} months on ${days}`,\n        'Every {0} years on {1} of {2}' : ({ interval, days, months }) => `Every ${interval} years on ${days} of ${months}`,\n        position1                       : 'the first',\n        position2                       : 'the second',\n        position3                       : 'the third',\n        position4                       : 'the fourth',\n        position5                       : 'the fifth',\n        'position-1'                    : 'the last',\n        day                             : 'day',\n        weekday                         : 'weekday',\n        'weekend day'                   : 'weekend day',\n        daysFormat                      : ({ position, days }) => `${position} ${days}`\n    },\n\n    RecurrenceEditor : {\n        'Repeat event'      : 'Repeat event',\n        Cancel              : 'Cancel',\n        Save                : 'Save',\n        Frequency           : 'Frequency',\n        Every               : 'Every',\n        DAILYintervalUnit   : 'day(s)',\n        WEEKLYintervalUnit  : 'week(s)',\n        MONTHLYintervalUnit : 'month(s)',\n        YEARLYintervalUnit  : 'year(s)',\n        Each                : 'Each',\n        'On the'            : 'On the',\n        'End repeat'        : 'End repeat',\n        'time(s)'           : 'time(s)'\n    },\n\n    RecurrenceDaysCombo : {\n        day           : 'day',\n        weekday       : 'weekday',\n        'weekend day' : 'weekend day'\n    },\n\n    RecurrencePositionsCombo : {\n        position1    : 'first',\n        position2    : 'second',\n        position3    : 'third',\n        position4    : 'fourth',\n        position5    : 'fifth',\n        'position-1' : 'last'\n    },\n\n    RecurrenceStopConditionCombo : {\n        Never     : 'Never',\n        After     : 'After',\n        'On date' : 'On date'\n    },\n\n    RecurrenceFrequencyCombo : {\n        None    : 'No repeat',\n        Daily   : 'Daily',\n        Weekly  : 'Weekly',\n        Monthly : 'Monthly',\n        Yearly  : 'Yearly'\n    },\n\n    RecurrenceCombo : {\n        None   : 'None',\n        Custom : 'Custom...'\n    },\n\n    Summary : {\n        'Summary for' : date => `Summary for ${date}`\n    },\n\n    ScheduleRangeCombo : {\n        completeview : 'Complete schedule',\n        currentview  : 'Visible schedule',\n        daterange    : 'Date range',\n        completedata : 'Complete schedule (for all events)'\n    },\n\n    SchedulerExportDialog : {\n        'Schedule range' : 'Schedule range',\n        'Export from'    : 'From',\n        'Export to'      : 'To'\n    },\n\n    ExcelExporter : {\n        'No resource assigned' : 'No resource assigned'\n    },\n\n    CrudManagerView : {\n        serverResponseLabel : 'Server response:'\n    },\n\n    DurationColumn : {\n        Duration : 'Duration'\n    }\n};\n\nexport default LocaleHelper.publishLocale(locale);\n", "import { unitMagnitudes } from '../../Core/helper/DateHelper.js';\nimport ViewPreset from './ViewPreset.js';\nimport Localizable from '../../Core/localization/Localizable.js';\nimport '../../Scheduler/localization/En.js';\nimport Store from '../../Core/data/Store.js';\nimport PresetManager from './PresetManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/preset/PresetStore\n */\n\n/**\n * A special Store subclass which holds {@link Scheduler.preset.ViewPreset ViewPresets}.\n * Each ViewPreset in this store represents a zoom level. The store data is sorted in special\n * zoom order. That is zoomed out to zoomed in. The first Preset will produce the narrowest event bars\n * the last one will produce the widest event bars.\n *\n * To specify view presets (zoom levels) please provide set of view presets to the scheduler:\n *\n * ```javascript\n * const myScheduler = new Scheduler({\n *     presets : [\n *         {\n *             base : 'hourAndDay',\n *             id   : 'MyHourAndDay',\n *             // other preset configs....\n *         },\n *         {\n *             base : 'weekAndMonth',\n *             id   : 'MyWeekAndMonth',\n *             // other preset configs....\n *         }\n *     ],\n *     viewPreset : 'MyHourAndDay',\n *     // other scheduler configs....\n *     });\n * ```\n *\n * @extends Core/data/Store\n */\nexport default class PresetStore extends Localizable(Store) {\n\n    static get $name() {\n        return 'PresetStore';\n    }\n\n    static get defaultConfig() {\n        return {\n            useRawData : true,\n\n            modelClass : ViewPreset,\n\n            /**\n             * Specifies the sort order of the presets in the store.\n             * By default they are in zoomed out to zoomed in order. That is\n             * presets which will create widest event bars to presets\n             * which will produce narrowest event bars.\n             *\n             * Configure this as `-1` to reverse this order.\n             * @config {Number}\n             * @default\n             */\n            zoomOrder : 1\n        };\n    }\n\n    set storage(storage) {\n        super.storage = storage;\n\n        // Maintained in order automatically while adding.\n        this.storage.addSorter((lhs, rhs) => {\n            const\n                leftBottomHeader  = lhs.bottomHeader,\n                rightBottomHeader = rhs.bottomHeader;\n\n            // Sort order:\n            //  Milliseconds per pixel.\n            //  Tick size.\n            //  Unit magnitude.\n            //  Increment size.\n            const\n                order = rhs.msPerPixel - lhs.msPerPixel ||\n                unitMagnitudes[leftBottomHeader.unit] - unitMagnitudes[rightBottomHeader.unit] ||\n                leftBottomHeader.increment - rightBottomHeader.increment;\n\n            return order * this.zoomOrder;\n        });\n    }\n\n    get storage() {\n        return super.storage;\n    }\n\n    getById(id) {\n        // If we do not know about the id, inherit it from the PresetManager singleton\n        return super.getById(id) || !this.isPresetManager && PresetManager.getById(id);\n    }\n\n    createRecord(data, ...args) {\n        let result;\n\n        if (data.isViewPreset) {\n            return data;\n        }\n        if (typeof data === 'string') {\n            result = this.getById(data);\n        }\n        else if (typeof data === 'number') {\n            result = this.getAt(data);\n        }\n        // Its a ViewPreset data object\n        else {\n            // If it's extending an existing ViewPreset, inherit then override\n            // the data from the base.\n            if (data.base) {\n                data = this.copyBaseValues(data);\n            }\n\n            // Model constructor will call generateId if no id is provided\n            return super.createRecord(data, ...args);\n        }\n        if (!result) {\n            throw new Error(`ViewPreset ${data} does not exist`);\n        }\n        return result;\n    }\n\n    updateLocalization() {\n        super.updateLocalization();\n\n        const me = this;\n\n        // Collect presets from store...\n        let presets = me.allRecords;\n\n        // and basePresets if we are the PresetManager\n        if (me.isPresetManager) {\n            presets = new Set(presets.concat(Object.values(me.basePresets)));\n        }\n\n        presets.forEach(preset => {\n            let localePreset = me.optionalL(`L{PresetManager.${preset.id}}`, null, true);\n\n            // Default presets generated from base presets use localization of base if they have no own\n            if (typeof localePreset === 'string' && preset.baseId) {\n                localePreset = me.optionalL(`L{PresetManager.${preset.baseId}}`, null, true);\n            }\n\n            // Apply any custom format defined in locale, or the original format if none exists\n            if (localePreset && typeof localePreset === 'object') {\n                if (!preset.originalDisplayDateFormat) {\n                    preset.originalDisplayDateFormat = preset.displayDateFormat;\n                }\n\n                // <remove-on-release>\n                // TODO: work around to work topDateFormat for weekAndDay viewPreset localization.\n                //  it must be fixed on: https://github.com/bryntum/support/issues/1775\n                // </remove-on-release>\n                // it there is a topDateFormat but preset.mainHeaderLevel is 0, means the middle header is the top header actually,\n                // so convert property to middle (if middle doesn't exists) to localization understand (topDateFormat for weekAndDay for example)\n                // topDateFormat doesn't work when mainHeaderLevel is 0 because it doesn't have top config\n                // but has top header visually (Check on get headerConfig method in ViewPreset class)\n                if (preset.mainHeaderLevel === 0 && localePreset.topDateFormat) {\n                    localePreset.middleDateFormat = localePreset.middleDateFormat || localePreset.topDateFormat;\n                }\n\n                preset.setData('displayDateFormat', localePreset.displayDateFormat || preset.originalDisplayDateFormat);\n\n                ['top', 'middle', 'bottom'].forEach(level => {\n                    const\n                        levelConfig           = preset.headerConfig[level],\n                        localeLevelDateFormat = localePreset[level + 'DateFormat'];\n\n                    if (levelConfig) {\n                        if (!levelConfig.originalDateFormat) {\n                            levelConfig.originalDateFormat = levelConfig.dateFormat;\n                        }\n\n                        // if there was defined topDateFormat on locale file for example, use it instead of renderer from basePresets (https://github.com/bryntum/support/issues/1307)\n                        if (localeLevelDateFormat && levelConfig.renderer) {\n                            levelConfig.renderer = null;\n                        }\n\n                        levelConfig.dateFormat = localeLevelDateFormat || levelConfig.originalDateFormat;\n\n                    }\n                });\n\n                // The preset names are used in ViewPresetCombo and are localized by default\n                if (localePreset.name) {\n                    if (!preset.unlocalizedName) {\n                        preset.unlocalizedName = preset.name;\n                    }\n                    preset.setData('name', localePreset.name);\n                }\n                else if (preset.unlocalizedName && preset.unlocalizedName !== preset.name) {\n                    preset.name = preset.unlocalizedName;\n                    preset.unlocalizedName = null;\n                }\n            }\n        });\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // Preset config on Scheduler/Gantt expects array of presets and not store config\n    getCurrentConfig(options) {\n        return super.getCurrentConfig(options).data;\n    }\n\n    copyBaseValues(presetData) {\n        let base = this.getById(presetData.base);\n\n        if (!base) {\n            throw new Error(`ViewPreset base '${presetData.base}' does not exist.`);\n        }\n        base = ObjectHelper.clone(base.data);\n        delete base.id;\n\n        if (presetData.name) {\n            delete base.name;\n        }\n\n        // Merge supplied data into a clone of the base ViewPreset's data\n        // so that the new one overrides the base.\n        return ObjectHelper.merge(base, presetData);\n    }\n\n    add(preset) {\n        preset = Array.isArray(preset) ? preset : [preset];\n\n        preset.forEach(preset => {\n            // If a ViewPreset instance that extends another preset was added\n            // Only in add we can apply the base data\n            if (preset.isViewPreset && preset.base) {\n                preset.data = this.copyBaseValues(preset.originalData);\n            }\n        });\n        return super.add(...arguments);\n    }\n}\n", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport ViewPreset from './ViewPreset.js';\nimport PresetStore from './PresetStore.js';\n\n// No module tag here. That stops the singleton from being included by the docs.\n\n/**\n * ## Intro\n * This is a global Store of {@link Scheduler.preset.ViewPreset ViewPresets}, required to supply initial data to\n * Scheduler's {@link Scheduler.view.mixin.TimelineViewPresets#config-presets}.\n *\n * You can provide new view presets globally or for a specific scheduler.\n *\n * **NOTE:** You **cannot** modify existing records in the PresetManager store. You can either remove\n * preset records from the store or add new records to the store.\n * Also please keep in mind, all changes provided to the PresetManager store are not reflected to the\n * {@link Scheduler.view.mixin.TimelineViewPresets#config-presets} of schedulers that already exist!\n *\n * If you want to have just a few presets (also known as zoom levels) in your Scheduler, you can slice corresponding records\n * from the `PresetManager` and apply them to the Scheduler `presets` config.\n * ```javascript\n * const newPresets = PresetManager.records.slice(10, 12);\n *\n * const scheduler = new Scheduler({\n *     presets    : newPresets, // Only 2 zoom levels are available\n *     viewPreset : newPresets[0].id\n * });\n * ```\n *\n * If you want to adjust all default presets and assign to a specific scheduler you are going to create,\n * you can extend them and pass as an array to the Scheduler `presets` config.\n * Here is an example of how to set the same `timeResolution` to all `ViewPresets`.\n * ```javascript\n * const newPresets = PresetManager.map(preset => {\n *     return {\n *         id             : 'my_' + preset.id,\n *         base           : preset.id, // Based on an existing preset\n *         timeResolution : {\n *             unit      : 'day',\n *             increment : 1\n *         }\n *     };\n * });\n *\n * const scheduler = new Scheduler({\n *     presets     : newPresets,\n *     viewPreset : 'my_hourAndDay'\n * });\n * ```\n *\n * If you want to do the same for **all** schedulers which will be created next, you can register new presets in a loop.\n * ```javascript\n * PresetManager.records.forEach(preset => {\n *     // Pass the same ID, so when a new preset is added to the store,\n *     // it will replace the current one.\n *     PresetManager.registerPreset(preset.id, {\n *        id             : preset.id,\n *        base           : preset.id,\n *        timeResolution : {\n *            unit      : 'day',\n *            increment : 1\n *        }\n *    });\n * });\n * ```\n *\n * Here is an example of how to add a new `ViewPreset` to the global `PresetManager` store and to the already created\n * scheduler `presets`.\n * ```javascript\n * const scheduler = new Scheduler({...});\n *\n * const newGlobalPresets = PresetManager.add({\n *     id              : 'myNewPreset',\n *     base            : 'hourAndDay', // Based on an existing preset\n *     columnLinesFor  : 0,\n *     // Override headers\n *     headers : [\n *         {\n *             unit       : 'day',\n *             // Use different date format for top header 01.10.2020\n *             dateFormat : 'DD.MM.YYYY'\n *         },\n *         {\n *             unit       : 'hour',\n *             dateFormat : 'LT'\n *         }\n *     ]\n * });\n *\n * // Add new presets to the scheduler that has been created before changes\n * // to PresetManager are applied\n * scheduler.presets.add(newGlobalPresets);\n * ```\n *\n * ## Predefined presets\n *\n * Predefined presets are:\n *\n * - `secondAndMinute` - creates a 2 level header - minutes and seconds:\n * {@inlineexample Scheduler/preset/secondAndMinute.js}\n * - `minuteAndHour` - creates a 2 level header - hours and minutes:\n * {@inlineexample Scheduler/preset/minuteAndHour.js}\n * - `hourAndDay` - creates a 2 level header - days and hours:\n * {@inlineexample Scheduler/preset/hourAndDay.js}\n * - `dayAndWeek` - creates a 2 level header - weeks and days:\n * {@inlineexample Scheduler/preset/dayAndWeek.js}\n * - `dayAndMonth` - creates a 2 level header - months and days:\n * {@inlineexample Scheduler/preset/dayAndMonth.js}\n * - `weekAndDay` - just like `dayAndWeek` but with different formatting:\n * {@inlineexample Scheduler/preset/weekAndDay.js}\n * - `weekAndDayLetter` - creates a 2 level header - weeks and day letters:\n * {@inlineexample Scheduler/preset/weekAndDayLetter.js}\n * - `weekAndMonth` - creates a 2 level header - months and weeks:\n * {@inlineexample Scheduler/preset/weekAndMonth.js}\n * - `weekDateAndMonth` - creates a 2 level header - months and weeks (weeks shown by first day only):\n * {@inlineexample Scheduler/preset/weekDateAndMonth.js}\n * - `monthAndYear` - creates a 2 level header - years and months:\n * {@inlineexample Scheduler/preset/monthAndYear.js}\n * - `year` - creates a 2 level header - years and quarters:\n * {@inlineexample Scheduler/preset/year.js}\n * - `manyYears` - creates a 2 level header - 5-years and years:\n * {@inlineexample Scheduler/preset/manyYears.js}\n *\n * See the {@link Scheduler.preset.ViewPreset} and {@link Scheduler.preset.ViewPresetHeaderRow} classes for a\n * description of the view preset properties.\n *\n * ## Localizing View Presets\n * Bryntum Scheduler uses locales for translations including date formats for view presets.\n *\n * To translate date format for view presets just define the date format for the specified region\n * for your locale file, like this:\n * ```javascript\n * const locale = {\n *\n *     localeName : 'En',\n *\n *     // ... Other translations here ...\n *\n *     PresetManager : {\n *         // Translation for the \"weekAndDay\" ViewPreset\n *         weekAndDay : {\n *             // Change the date format for the top and middle levels\n *             topDateFormat    : 'MMM',\n *             middleDateFormat : 'D'\n *         },\n *         // Translation for the \"dayAndWeek\" ViewPreset\n *         dayAndWeek : {\n *             // Change the date format for the top level\n *             topDateFormat : 'MMMM YYYY'\n *         }\n *     }\n * }\n *\n * LocaleManager.applyLocale(locale);\n * ```\n *\n * Check the <a target=\"_blank\" href=\"../examples/localization/\">localization demo</a> and [this guide](#Scheduler/guides/customization/localization.md) for more details.\n *\n * @singleton\n * @extends Scheduler/preset/PresetStore\n */\nclass PresetManager extends PresetStore {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{secondAndMinute}',\n        'L{minuteAndHour}',\n        'L{hourAndDay}',\n        'L{dayAndWeek}',\n        'L{weekAndDay}',\n        'L{day}',\n        'L{week}',\n        'L{dayAndMonth}',\n        'L{weekAndMonth}',\n        'L{weekAndDayLetter}',\n        'L{weekDateAndMonth}',\n        'L{monthAndYear}',\n        'L{year}',\n        'L{manyYears}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'PresetManager';\n    }\n\n    static get defaultConfig() {\n        return {\n            // To not break CSP demo\n            preventSubClassingModel : true,\n\n            basePresets : {\n                secondAndMinute : {\n                    name              : 'Seconds',\n                    tickWidth         : 30,   // Time column width\n                    tickHeight        : 40,\n                    displayDateFormat : 'll LTS', // Controls how dates will be displayed in tooltips etc\n                    shiftIncrement    : 10,     // Controls how much time to skip when calling shiftNext and shiftPrevious.\n                    shiftUnit         : 'minute', // Valid values are \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n                    defaultSpan       : 24,    // By default, if no end date is supplied to a view it will show 24 hours\n                    timeResolution    : {      // Dates will be snapped to this resolution\n                        unit      : 'second',  // Valid values are \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n                        increment : 5\n                    },\n                    // This defines your header rows.\n                    // For each row you can define \"unit\", \"increment\", \"dateFormat\", \"renderer\", \"align\", and \"thisObj\"\n                    headers : [\n                        {\n                            unit       : 'minute',\n                            dateFormat : 'lll'\n                        },\n                        {\n                            unit       : 'second',\n                            increment  : 10,\n                            dateFormat : 'ss'\n                        }\n                    ]\n                },\n                minuteAndHour : {\n                    name              : 'Minutes',\n                    tickWidth         : 60,    // Time column width\n                    tickHeight        : 60,\n                    displayDateFormat : 'll LT', // Controls how dates will be displayed in tooltips etc\n                    shiftIncrement    : 1,     // Controls how much time to skip when calling shiftNext and shiftPrevious.\n                    shiftUnit         : 'hour', // Valid values are \"MILLI\", \"SECOND\", \"minute\", \"HOUR\", \"DAY\", \"WEEK\", \"MONTH\", \"QUARTER\", \"YEAR\".\n                    defaultSpan       : 24,    // By default, if no end date is supplied to a view it will show 24 hours\n                    timeResolution    : {      // Dates will be snapped to this resolution\n                        unit      : 'minute',  // Valid values are \"MILLI\", \"SECOND\", \"minute\", \"HOUR\", \"DAY\", \"WEEK\", \"MONTH\", \"QUARTER\", \"YEAR\".\n                        increment : 15\n                    },\n                    headers : [\n                        {\n                            unit       : 'hour',\n                            dateFormat : 'ddd MM/DD, hA'\n                        },\n                        {\n                            unit       : 'minute',\n                            increment  : 30,\n                            dateFormat : 'mm'\n                        }\n                    ]\n                },\n                hourAndDay : {\n                    name              : 'Day',\n                    tickWidth         : 70,\n                    tickHeight        : 40,\n                    displayDateFormat : 'll LT',\n                    shiftIncrement    : 1,\n                    shiftUnit         : 'day',\n                    defaultSpan       : 24,\n                    timeResolution    : {\n                        unit      : 'minute',\n                        increment : 30\n                    },\n                    headers : [\n                        {\n                            unit       : 'day',\n                            dateFormat : 'ddd DD/MM' //Mon 01/10\n                        },\n                        {\n                            unit       : 'hour',\n                            dateFormat : 'LT'\n                        }\n                    ]\n                },\n                day : {\n                    name              : 'Day/hours',\n                    displayDateFormat : 'LT',\n                    shiftIncrement    : 1,\n                    shiftUnit         : 'day',\n                    defaultSpan       : 1,\n                    timeResolution    : {\n                        unit      : 'minute',\n                        increment : 30\n                    },\n                    mainHeaderLevel : 0,\n                    headers         : [\n                        {\n                            unit       : 'day',\n                            dateFormat : 'ddd DD/MM', // Mon 01/02\n                            splitUnit  : 'day'\n                        },\n                        {\n                            unit : 'hour',\n                            renderer(value) {\n                                return `\n                                    <div class=\"b-sch-calendarcolumn-ct\"><span class=\"b-sch-calendarcolumn-hours\">${DateHelper.format(value, 'HH')}</span>\n                                    <span class=\"b-sch-calendarcolumn-minutes\">${DateHelper.format(value, 'mm')}</span></div>\n                                `;\n                            }\n                        }\n                    ]\n                },\n                week : {\n                    name              : 'Week/hours',\n                    displayDateFormat : 'LT',\n                    shiftIncrement    : 1,\n                    shiftUnit         : 'week',\n                    defaultSpan       : 24,\n                    timeResolution    : {\n                        unit      : 'minute',\n                        increment : 30\n                    },\n                    mainHeaderLevel : 0,\n                    headers         : [\n                        {\n                            unit       : 'week',\n                            dateFormat : 'D d',\n                            splitUnit  : 'day'\n                        },\n                        {\n                            unit       : 'hour',\n                            dateFormat : 'LT',    // will be overridden by renderer\n                            renderer(value) {\n                                return `\n                                    <div class=\"sch-calendarcolumn-ct\">\n                                    <span class=\"sch-calendarcolumn-hours\">${DateHelper.format(value, 'HH')}</span>\n                                    <span class=\"sch-calendarcolumn-minutes\">${DateHelper.format(value, 'mm')}</span>\n                                    </div>\n                                `;\n                            }\n                        }\n                    ]\n                },\n                dayAndWeek : {\n                    name              : 'Days & Weeks',\n                    tickWidth         : 100,\n                    tickHeight        : 80,\n                    displayDateFormat : 'll LT',\n                    shiftUnit         : 'day',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 5,\n                    timeResolution    : {\n                        unit      : 'hour',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit : 'week',\n                            renderer(start) {\n                                return DateHelper.getShortNameOfUnit('week') + '.' + DateHelper.format(start, 'WW MMM YYYY');\n                            }\n                        },\n                        {\n                            unit       : 'day',\n                            dateFormat : 'dd DD'\n                        }\n                    ]\n                },\n                // dayAndMonth : {\n                //     name              : 'Days & Months',\n                //     tickWidth         : 100,\n                //     tickHeight        : 80,\n                //     displayDateFormat : 'll LT',\n                //     shiftUnit         : 'day',\n                //     shiftIncrement    : 1,\n                //     defaultSpan       : 5,\n                //     timeResolution    : {\n                //         unit      : 'hour',\n                //         increment : 1\n                //     },\n                //     headers : [\n                //         {\n                //             unit       : 'month',\n                //             dateFormat : 'MMMM YYYY',\n                //             align      : 'start'\n                //         },\n                //         {\n                //             unit       : 'day',\n                //             dateFormat : 'dd DD'\n                //         }\n                //     ]\n                // },\n                dayAndMonth : {\n                    name              : 'Month',\n                    tickWidth         : 100,\n                    tickHeight        : 80,\n                    displayDateFormat : 'll LT',\n                    shiftUnit         : 'month',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 1,\n                    mainUnit          : 'month',\n                    timeResolution    : {\n                        unit      : 'hour',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit       : 'month',\n                            dateFormat : 'MMMM YYYY'\n                        },\n                        {\n                            unit       : 'day',\n                            dateFormat : 'DD'\n                        }\n                    ]\n                },\n                weekAndDay : {\n                    name              : 'Week',\n                    tickWidth         : 100,\n                    tickHeight        : 80,\n                    displayDateFormat : 'll hh:mm A',\n                    shiftUnit         : 'week',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 1,\n                    timeResolution    : {\n                        unit      : 'day',\n                        increment : 1\n                    },\n                    mainHeaderLevel : 0,\n                    headers         : [\n                        {\n                            unit       : 'week',\n                            dateFormat : 'YYYY MMMM DD' // 2017 January 01\n                        },\n                        {\n                            unit       : 'day',\n                            increment  : 1,\n                            dateFormat : 'DD MMM'\n                        }\n                    ]\n                },\n                weekAndMonth : {\n                    name              : 'Weeks',\n                    tickWidth         : 100,\n                    tickHeight        : 105,\n                    displayDateFormat : 'll',\n                    shiftUnit         : 'week',\n                    shiftIncrement    : 5,\n                    defaultSpan       : 6,\n                    timeResolution    : {\n                        unit      : 'day',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit       : 'month',\n                            dateFormat : 'MMM YYYY' //Jan 2017\n                        },\n                        {\n                            unit       : 'week',\n                            dateFormat : 'DD MMM'\n                        }\n                    ]\n                },\n                weekAndDayLetter : {\n                    name              : 'Weeks/weekdays',\n                    tickWidth         : 20,\n                    tickHeight        : 50,\n                    displayDateFormat : 'll',\n                    shiftUnit         : 'week',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 10,\n                    timeResolution    : {\n                        unit      : 'day',\n                        increment : 1\n                    },\n                    mainHeaderLevel : 0,\n                    headers         : [\n                        {\n                            unit                : 'week',\n                            dateFormat          : 'ddd DD MMM YYYY',\n                            verticalColumnWidth : 115\n                        },\n                        {\n                            unit                : 'day',\n                            dateFormat          : 'd1',\n                            verticalColumnWidth : 25\n                        }\n                    ]\n                },\n                weekDateAndMonth : {\n                    name              : 'Months/weeks',\n                    tickWidth         : 30,\n                    tickHeight        : 40,\n                    displayDateFormat : 'll',\n                    shiftUnit         : 'week',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 10,\n                    timeResolution    : {\n                        unit      : 'day',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit       : 'month',\n                            dateFormat : 'YYYY MMMM'\n                        },\n                        {\n                            unit       : 'week',\n                            dateFormat : 'DD'\n                        }\n                    ]\n                },\n                monthAndYear : {\n                    name              : 'Months',\n                    tickWidth         : 110,\n                    tickHeight        : 110,\n                    displayDateFormat : 'll',\n                    shiftIncrement    : 3,\n                    shiftUnit         : 'month',\n                    defaultSpan       : 12,\n                    timeResolution    : {\n                        unit      : 'day',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit       : 'year',\n                            dateFormat : 'YYYY' //2017\n                        },\n                        {\n                            unit       : 'month',\n                            dateFormat : 'MMM YYYY' //Jan 2017\n                        }\n                    ]\n                },\n                year : {\n                    name                : 'Years',\n                    tickWidth           : 100,\n                    tickHeight          : 100,\n                    resourceColumnWidth : 100,\n                    displayDateFormat   : 'll',\n                    shiftUnit           : 'year',\n                    shiftIncrement      : 1,\n                    defaultSpan         : 1,\n                    timeResolution      : {\n                        unit      : 'month',\n                        increment : 1\n                    },\n                    headers : [\n                        {\n                            unit       : 'year',\n                            dateFormat : 'YYYY'\n                        },\n                        {\n                            unit : 'quarter',\n                            renderer(start, end, cfg) {\n                                return DateHelper.getShortNameOfUnit('quarter').toUpperCase() + (Math.floor(start.getMonth() / 3) + 1);\n                            }\n                        }\n                    ]\n                },\n                manyYears : {\n                    name              : 'Multiple years',\n                    tickWidth         : 40,\n                    tickHeight        : 50,\n                    displayDateFormat : 'll',\n                    shiftUnit         : 'year',\n                    shiftIncrement    : 1,\n                    defaultSpan       : 10,\n                    timeResolution    : {\n                        unit      : 'year',\n                        increment : 1\n                    },\n                    mainHeaderLevel : 0,\n                    headers         : [\n                        {\n                            unit      : 'year',\n                            increment : 5,\n                            renderer  : (start, end) => start.getFullYear() + ' - ' + end.getFullYear()\n                        },\n                        {\n                            unit       : 'year',\n                            dateFormat : 'YY',\n                            increment  : 1\n                        }\n                    ]\n                }\n            },\n\n            // This is a list of bryntum-supplied preset adjustments used to create the Scheduler's\n            // default initial set of ViewPresets.\n            defaultPresets : [\n                // Years over years\n                'manyYears',\n                { width : 80, increment : 1, resolution : 1, base : 'manyYears', resolutionUnit : 'YEAR' },\n\n                // Years over quarters\n                'year',\n                { width : 30,  increment : 1, resolution : 1, base : 'year', resolutionUnit : 'MONTH' },\n                { width : 50,  increment : 1, resolution : 1, base : 'year', resolutionUnit : 'MONTH' },\n                { width : 200, increment : 1, resolution : 1, base : 'year', resolutionUnit : 'MONTH' },\n\n                // Years over months\n                'monthAndYear',\n\n                // Months over weeks\n                'weekDateAndMonth',\n\n                // Months over weeks\n                'weekAndMonth',\n\n                // Months over weeks\n                'weekAndDayLetter',\n\n                // Months over days\n                'dayAndMonth',\n\n                // Weeks over days\n                'weekAndDay',\n                { width : 54, increment : 1, resolution : 1, base : 'weekAndDay', resolutionUnit : 'HOUR' },\n\n                // Days over hours\n                'hourAndDay',\n                { width : 64,  increment : 6, resolution : 30, base : 'hourAndDay', resolutionUnit : 'MINUTE' },\n                { width : 100, increment : 6, resolution : 30, base : 'hourAndDay', resolutionUnit : 'MINUTE' },\n                { width : 64,  increment : 2, resolution : 30, base : 'hourAndDay', resolutionUnit : 'MINUTE' },\n\n                // Hours over minutes\n                'minuteAndHour',\n                { width : 60,  increment : 15, resolution : 5, base : 'minuteAndHour' },\n                { width : 130, increment : 15, resolution : 5, base : 'minuteAndHour' },\n                { width : 60,  increment : 5,  resolution : 5, base : 'minuteAndHour' },\n                { width : 100, increment : 5,  resolution : 5, base : 'minuteAndHour' },\n\n                // Minutes over seconds\n                'secondAndMinute',\n                { width : 60,  increment : 10, resolution : 5, base : 'secondAndMinute' },\n                { width : 130, increment : 5,  resolution : 5, base : 'secondAndMinute' }\n            ],\n\n            internalListeners : {\n                locale : 'updateLocalization'\n            }\n        };\n    }\n\n    set basePresets(basePresets) {\n        const presetCache = this._basePresets = {};\n\n        for (const id in basePresets) {\n            basePresets[id].id = id;\n            presetCache[id] = this.createRecord(basePresets[id]);\n        }\n    }\n\n    get basePresets() {\n        return this._basePresets;\n    }\n\n    set defaultPresets(defaultPresets) {\n        for (let i = 0, { length } = defaultPresets; i < length; i++) {\n            const\n                presetAdjustment   = defaultPresets[i],\n                isBase             = typeof presetAdjustment === 'string',\n                baseType           = isBase ? presetAdjustment : presetAdjustment.base;\n\n            let preset;\n\n            // The default was just a string, so it's an unmodified instance of a base type.\n            if (isBase) {\n                preset = this.basePresets[baseType];\n            }\n            // If it's an object, it's an adjustment to a base type\n            else {\n                const\n                    config             = Object.setPrototypeOf(ObjectHelper.clone(this.basePresets[baseType].data), { id : baseType }),\n                    { timeResolution } = config,\n                    bottomHeader       = config.headers[config.headers.length - 1];\n\n                config.id = undefined;\n\n                if ('width' in presetAdjustment) {\n                    config.tickWidth = presetAdjustment.width;\n                }\n                if ('height' in presetAdjustment) {\n                    config.tickHeight = presetAdjustment.height;\n                }\n                if ('increment' in presetAdjustment) {\n                    bottomHeader.increment = presetAdjustment.increment;\n                }\n                if ('resolution' in presetAdjustment) {\n                    timeResolution.increment = presetAdjustment.resolution;\n                }\n                if ('resolutionUnit' in presetAdjustment) {\n                    timeResolution.unit = DateHelper.getUnitByName(presetAdjustment.resolutionUnit);\n                }\n\n                preset = this.createRecord(config);\n\n                // Keep id of original preset around, used with localization in PresetStore\n                preset.baseId = baseType;\n            }\n            this.add(preset);\n        }\n    }\n\n    getById(id) {\n        // Look first in the default set, and if it's one of the base types that is not imported into the\n        // default set, then look at the bases.\n        return super.getById(id) || this.basePresets[id];\n    }\n\n    /**\n     * Registers a new view preset base to be used by any scheduler grid or tree on the page.\n     * @param {String} id The unique identifier for this preset\n     * @param {ViewPresetConfig} config The configuration properties of the view preset (see\n     * {@link Scheduler.preset.ViewPreset} for more information)\n     * @returns {Scheduler.preset.ViewPreset} A new ViewPreset based upon the passed configuration.\n     */\n    registerPreset(id, config) {\n        const\n            preset = this.createRecord(Object.assign({\n                id\n            }, config)),\n            existingDuplicate = this.find(p => p.equals(preset));\n\n        if (existingDuplicate) {\n            return existingDuplicate;\n        }\n\n        if (preset.isValid) {\n            this.add(preset);\n        }\n        else {\n            throw new Error('Invalid preset, please check your configuration');\n        }\n\n        return preset;\n    }\n\n    getPreset(preset) {\n        if (typeof preset === 'number') {\n            preset = this.getAt(preset);\n        }\n        if (typeof preset === 'string') {\n            preset = this.getById(preset);\n        }\n        else if (!(preset instanceof ViewPreset)) {\n            preset = this.createRecord(preset);\n        }\n        return preset;\n    }\n\n    /**\n     * Applies preset customizations or fetches a preset view preset using its name.\n     * @param {String|ViewPresetConfig} presetOrId Id of a predefined preset or a preset config object\n     * @returns {Scheduler.preset.ViewPreset} Resulting ViewPreset instance\n     */\n    normalizePreset(preset) {\n        const me = this;\n\n        if (!(preset instanceof ViewPreset)) {\n            if (typeof preset === 'string') {\n                preset = me.getPreset(preset);\n                if (!preset) {\n                    throw new Error('You must define a valid view preset. See PresetManager for reference');\n                }\n            }\n            else if (typeof preset === 'object') {\n                // Look up any existing ViewPreset that it is based upon.\n                if (preset.base) {\n                    const base = this.getById(preset.base);\n\n                    if (!base) {\n                        throw new Error(`ViewPreset base '${preset.base}' does not exist`);\n                    }\n                    // The config is based upon the base's data with the new config object merged in.\n                    preset = ObjectHelper.merge(ObjectHelper.clone(base.data), preset);\n                }\n\n                // Ensure the new ViewPreset has a legible, logical id which does not already\n                // exist in our store.\n                if (preset.id) {\n                    preset = me.createRecord(preset);\n                }\n                else {\n                    preset = me.createRecord(ObjectHelper.assign({}, preset));\n                    preset.id = preset.generateId(preset);\n                }\n            }\n        }\n\n        return preset;\n    }\n\n    /**\n     * Deletes a view preset\n     * @param {String} id The id of the preset, or the preset instance.\n     */\n    deletePreset(presetOrId) {\n        if (typeof presetOrId === 'string') {\n            presetOrId = this.getById(presetOrId);\n        }\n        else if (typeof presetOrId === 'number') {\n            presetOrId = this.getAt(presetOrId);\n        }\n\n        if (presetOrId) {\n            this.remove(presetOrId);\n\n            // ALso remove it from our base list\n            delete this.basePresets[presetOrId.id];\n        }\n    }\n}\n\nconst pm = new PresetManager();\n\nexport { pm as default };\n", "import Store from '../../Core/data/Store.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport TimeSpan from '../model/TimeSpan.js';\nimport ViewPreset from '../preset/ViewPreset.js';\nimport PresetManager from '../preset/PresetManager.js';\n\n/**\n * @module Scheduler/data/TimeAxis\n */\n\n// Micro-optimized version of TimeSpan for faster reading. Hit a lot and since it is internal fields are guaranteed to\n// not be remapped and changes won't be batches, so we can always return raw value from data avoiding all additional\n// checks and logic\nclass Tick extends TimeSpan {\n    // Only getters on purpose, we do not support manipulating ticks\n\n    get startDate() {\n        return this.data.startDate;\n    }\n\n    get endDate() {\n        return this.data.endDate;\n    }\n}\n\n/**\n * A class representing the time axis of the scheduler. The scheduler timescale is based on the ticks generated by this\n * class. This is a pure \"data\" (model) representation of the time axis and has no UI elements.\n *\n * The time axis can be {@link #config-continuous} or not. In continuous mode, each timespan starts where the previous\n * ended, and in non-continuous mode there can be gaps between the ticks.\n * A non-continuous time axis can be used when want to filter out certain periods of time (like weekends) from the time\n * axis.\n *\n * To create a non-continuous time axis you have 2 options. First, you can create a time axis containing only the time\n * spans of interest. To do that, subclass this class and override the {@link #property-generateTicks} method.\n *\n * The other alternative is to call the {@link #function-filterBy} method, passing a function to it which should return\n * `false` if the time tick should be filtered out. Calling {@link Core.data.mixin.StoreFilter#function-clearFilters}\n * will return you to a full time axis.\n *\n * @extends Core/data/Store\n */\nexport default class TimeAxis extends Store {\n    //region Events\n\n    /**\n     * Fires before the timeaxis is about to be reconfigured (e.g. new start/end date or unit/increment). Return `false`\n     * to abort the operation.\n     * @event beforeReconfigure\n     * @param {Scheduler.data.TimeAxis} source The time axis instance\n     * @param {Date} startDate The new time axis start date\n     * @param {Date} endDate The new time axis end date\n     */\n\n    /**\n     * Event that is triggered when we end reconfiguring and everything UI-related should be done\n     * @event endReconfigure\n     * @private\n     */\n\n    /**\n     * Fires when the timeaxis has been reconfigured (e.g. new start/end date or unit/increment)\n     * @event reconfigure\n     * @param {Scheduler.data.TimeAxis} source The time axis instance\n     */\n\n    /**\n     * Fires if all the ticks in the timeaxis are filtered out. After firing the filter is temporarily disabled to\n     * return the time axis to a valid state. A disabled filter will be re-enabled the next time ticks are regenerated\n     * @event invalidFilter\n     * @param {Scheduler.data.TimeAxis} source The time axis instance\n     */\n\n    //endregion\n\n    //region Default config\n\n    static get defaultConfig() {\n        return {\n            modelClass : Tick,\n\n            /**\n             * Set to false if the timeline is not continuous, e.g. the next timespan does not start where the previous ended (for example skipping weekends etc).\n             * @config {Boolean}\n             * @default\n             */\n            continuous : true,\n\n            originalContinuous : null,\n\n            /**\n             * Include only certain hours or days in the time axis (makes it `continuous : false`). Accepts and object\n             * with `day` and `hour` properties:\n             * ```\n             * const scheduler = new Scheduler({\n             *     timeAxis : {\n             *         include : {\n             *              // Do not display hours after 17 or before 9 (only display 9 - 17). The `to´ value is not\n             *              // included in the time axis\n             *              hour : {\n             *                  from : 9,\n             *                  to   : 17\n             *              },\n             *              // Do not display sunday or saturday\n             *              day : [0, 6]\n             *         }\n             *     }\n             * }\n             * ```\n             * In most cases we recommend that you use Scheduler's workingTime config instead. It is easier to use and\n             * makes sure all parts of the Scheduler gets updated.\n             * @config {Object}\n             */\n            include : null,\n\n            /**\n             * Automatically adjust the timespan when generating ticks with {@link #property-generateTicks} according to\n             * the `viewPreset` configuration. Setting this to false may lead to shifting time/date of ticks.\n             * @config {Boolean}\n             * @default\n             */\n            autoAdjust : true,\n\n            //isConfigured : false,\n\n            // in case of `autoAdjust : false`, the 1st and last ticks can be truncated, containing only part of the normal tick\n            // these dates will contain adjusted start/end (like if the tick has not been truncated)\n            adjustedStart    : null,\n            adjustedEnd      : null,\n            // the visible position in the first tick, can actually be > 1 because the adjustment is done by the `mainUnit`\n            visibleTickStart : null,\n            // the visible position in the first tick, is always ticks count - 1 < value <= ticks count, in case of autoAdjust, always = ticks count\n            visibleTickEnd   : null,\n\n            tickCache : {},\n\n            viewPreset       : null,\n            maxTraverseTries : 100,\n            useRawData       : {\n                disableDuplicateIdCheck : true,\n                disableDefaultValue     : true,\n                disableTypeConversion   : true\n            }\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:\n             * ```\n             * {\n             *    startDate : ..., // start date\n             *    endDate   : ...  // end date\n             * }\n             * ```\n             * Take notice, that this function either has to be called with `start`/`end` parameters, or create those variables.\n             *\n             * To see it in action please check out our [TimeAxis](https://bryntum.com/products/scheduler/examples/timeaxis/) example and navigate to \"Compressed non-working time\" tab.\n             *\n             * @param {Date} axisStartDate The start date of the interval\n             * @param {Date} axisEndDate The end date of the interval\n             * @param {String} unit The unit of the time axis\n             * @param {Number} increment The increment for the unit specified.\n             * @returns {Array} ticks The ticks representing the time axis\n             * @config {Function}\n             */\n            generateTicks : null,\n\n            unit                : null,\n            increment           : null,\n            resolutionUnit      : null,\n            resolutionIncrement : null,\n            mainUnit            : null,\n            shiftUnit           : null,\n            shiftIncrement      : 1,\n            defaultSpan         : 1,\n\n            weekStartDay : null,\n\n            // Used to force resolution to match whole ticks, to snap accordingly when using fillTicks in the UI\n            forceFullTicks : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    // private\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.originalContinuous = me.continuous;\n\n        me.ion({\n            change : ({ action }) => {\n                // If the change was due to filtering, there will be a refresh event\n                // arriving next, so do not reconfigure\n                if (action !== 'filter') {\n                    me.trigger('reconfigure', { supressRefresh : false });\n                }\n            },\n            refresh        : () => me.trigger('reconfigure', { supressRefresh : false }),\n            endreconfigure : event => me.trigger('reconfigure', event)\n        });\n\n        if (me.startDate) {\n            me.internalOnReconfigure();\n            me.trigger('reconfigure');\n        }\n        else if (me.viewPreset) {\n            const range  = me.getAdjustedDates(new Date());\n            me.startDate = range.startDate;\n            me.endDate   = range.endDate;\n        }\n    }\n\n    get isTimeAxis() {\n        return true;\n    }\n\n    //endregion\n\n    //region Configuration (reconfigure & consumePreset)\n\n    /**\n     * Reconfigures the time axis based on the config object supplied and generates the new 'ticks'.\n     * @param {Object} config\n     * @param {Boolean} [suppressRefresh]\n     * @private\n     */\n    reconfigure(config, suppressRefresh = false, preventThrow = false) {\n        const\n            me         = this,\n            normalized = me.getAdjustedDates(config.startDate, config.endDate),\n            oldConfig  = {};\n\n        if (me.trigger('beforeReconfigure', { startDate : normalized.startDate, endDate : normalized.endDate, config }) !== false) {\n            me.trigger('beginReconfigure');\n\n            me._configuredStartDate = config.startDate;\n            me._configuredEndDate   = config.endDate;\n\n            // Collect old values for end event\n            for (const propName in config) {\n                oldConfig[propName] = me[propName];\n            }\n\n            const viewPresetChanged = config.viewPreset && config.viewPreset !== me.viewPreset;\n\n            // If changing viewPreset, try to gracefully recover if an applied filter results in an empty view\n            if (viewPresetChanged) {\n                preventThrow = me.isFiltered;\n\n                me.filters.forEach(f => f.disabled = false);\n            }\n            Object.assign(me, config);\n\n            if (me.internalOnReconfigure(preventThrow, viewPresetChanged) === false) {\n                return false;\n            }\n\n            me.trigger('endReconfigure', { suppressRefresh, config, oldConfig });\n        }\n    }\n\n    internalOnReconfigure(preventThrow = false, viewPresetChanged) {\n        const me = this;\n\n        me.isConfigured = true;\n\n        const\n            adjusted   = me.getAdjustedDates(me.startDate, me.endDate, true),\n            normalized = me.getAdjustedDates(me.startDate, me.endDate),\n            start      = normalized.startDate,\n            end        = normalized.endDate;\n\n        if (start >= end) {\n            throw new Error(`Invalid start/end dates. Start date must be less than end date. Start date: ${start}. End date: ${end}.`);\n        }\n\n        const\n            { unit, increment = 1 } = me,\n            ticks                   = me.generateTicks(start, end, unit, increment);\n\n        // Suspending to be able to detect an invalid filter\n        me.suspendEvents();\n        me.maintainFilter = preventThrow;\n        me.data           = ticks;\n        me.maintainFilter = false;\n\n        const { count } = me;\n\n        if (count === 0) {\n            if (preventThrow) {\n                if (viewPresetChanged) {\n                    me.disableFilters();\n                }\n                me.resumeEvents();\n                return false;\n            }\n            throw new Error('Invalid time axis configuration or filter, please check your input data.');\n        }\n\n        // start date is cached, update it to fill after generated ticks\n        me.startDate = me.first.startDate;\n        me.endDate   = me.last.endDate;\n\n        me.resumeEvents();\n\n        if (me.isContinuous) {\n            me.adjustedStart = adjusted.startDate;\n            me.adjustedEnd   = DH.getNext(count > 1 ? ticks[count - 1].startDate : adjusted.startDate, unit, increment, me.weekStartDay);\n        }\n        else {\n            me.adjustedStart = me.startDate;\n            me.adjustedEnd   = me.endDate;\n        }\n\n        me.updateVisibleTickBoundaries();\n\n        me.updateTickCache(true);\n    }\n\n    updateVisibleTickBoundaries() {\n        const\n            me = this,\n            {\n                count,\n                unit,\n                startDate,\n                endDate,\n                weekStartDay,\n                increment = 1\n            }  = me;\n\n        // Denominator is amount of milliseconds in a full tick (unit * increment). Normally we use 30 days in a month\n        // and 365 days in a year. But if month is 31 day long or year is a leap one standard formula might calculate\n        // wrong value. e.g. if we're rendering 1 day from August, formula goes like (2021-08-31 - 2021-08-02) / 30 = 1\n        // and renders full tick which is incorrect. For such cases we need to adjust denominator to a correct one.\n        // Thankfully there are only a few of them - month, year and day with DST transition.\n        const\n            startDenominator = DH.getNormalizedUnitDuration(startDate, unit) * increment,\n            endDenominator   = DH.getNormalizedUnitDuration(endDate, unit) * increment;\n\n        // if visibleTickStart > 1 this means some tick is fully outside of the view - we are not interested in it and want to\n        // drop it and adjust \"adjustedStart\" accordingly\n        do {\n            me.visibleTickStart = (startDate - me.adjustedStart) / startDenominator;\n\n            // <remove-on-release>\n            // TODO: Changed from round to floor which seems to work, but this is not needed in ExtScheduler. Need to step and see what is different\n            // </remove-on-release>\n            if (me.autoAdjust) me.visibleTickStart = Math.floor(me.visibleTickStart);\n\n            if (me.visibleTickStart >= 1) me.adjustedStart = DH.getNext(me.adjustedStart, unit, increment, weekStartDay);\n        } while (me.visibleTickStart >= 1);\n\n        do {\n            me.visibleTickEnd = count - (me.adjustedEnd - endDate) / endDenominator;\n\n            if (count - me.visibleTickEnd >= 1) me.adjustedEnd = DH.getNext(me.adjustedEnd, unit, -1, weekStartDay);\n        } while (count - me.visibleTickEnd >= 1);\n\n        // This flag indicates that the time axis starts exactly on a tick boundary and finishes on a tick boundary\n        // This is used as an optimization flag by TimeAxisViewModel.createHeaderRow\n        me.fullTicks = !me.visibleTickStart && me.visibleTickEnd === count;\n    }\n\n    /**\n     * Get the currently used time unit for the ticks\n     * @readonly\n     * @member {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit\n     */\n\n    /**\n     * Get/set currently used preset\n     * @property {Scheduler.preset.ViewPreset}\n     */\n    get viewPreset() {\n        return this._viewPreset;\n    }\n\n    set viewPreset(preset) {\n        const me = this;\n\n        preset = PresetManager.getPreset(preset);\n\n        if (!(preset instanceof ViewPreset)) {\n            throw new Error('TimeAxis must be configured with the ViewPreset instance that the Scheduler is using');\n        }\n\n        me._viewPreset = preset;\n\n        Object.assign(me, {\n            unit      : preset.bottomHeader.unit,\n            increment : preset.bottomHeader.increment || 1,\n\n            resolutionUnit      : preset.timeResolution.unit,\n            resolutionIncrement : preset.timeResolution.increment,\n\n            mainUnit       : preset.mainHeader.unit,\n            shiftUnit      : preset.shiftUnit || preset.mainHeader.unit,\n            shiftIncrement : preset.shiftIncrement || 1,\n\n            defaultSpan : preset.defaultSpan || 1,\n            presetName  : preset.id,\n\n            // Weekview columns are updated upon 'datachanged' event on this object.\n            // We have to pass headers in order to render them correctly (timeAxisViewModel is incorrect in required time)\n            headers : preset.headers\n        });\n    }\n\n    //endregion\n\n    //region Getters & setters\n\n    get weekStartDay() {\n        return this._weekStartDay ?? DH.weekStartDay;\n    }\n\n    // private\n    get resolution() {\n        return {\n            unit      : this.resolutionUnit,\n            increment : this.resolutionIncrement\n        };\n    }\n\n    // private\n    set resolution(resolution) {\n        this.resolutionUnit      = resolution.unit;\n        this.resolutionIncrement = resolution.increment;\n    }\n\n    get resolutionUnit() {\n        return this.forceFullTicks ? this.unit : this._resolutionUnit;\n    }\n\n    get resolutionIncrement() {\n        return this.forceFullTicks ? this.increment : this._resolutionIncrement;\n    }\n\n    //endregion\n\n    //region Timespan & resolution\n\n    /**\n     * Changes the time axis timespan to the supplied start and end dates.\n     *\n     * **Note** This does **not** preserve the temporal scroll position. You may use\n     * {@link Scheduler.view.Scheduler#function-setTimeSpan} to set the time axis and\n     * maintain temporal scroll position (if possible).\n     * @param {Date} newStartDate The new start date\n     * @param {Date} [newEndDate] The new end date\n     */\n    setTimeSpan(newStartDate, newEndDate, preventThrow = false) {\n        // If providing a 0 span range, add default range\n        if (newEndDate && newStartDate - newEndDate === 0) {\n            newEndDate = null;\n        }\n\n        const\n            me                     = this,\n            { startDate, endDate } = me.getAdjustedDates(newStartDate, newEndDate);\n\n        if (me.startDate - startDate !== 0 || me.endDate - endDate !== 0) {\n            return me.reconfigure({\n                startDate,\n                endDate\n            }, false, preventThrow);\n        }\n    }\n\n    /**\n     * Moves the time axis by the passed amount and unit.\n     *\n     * NOTE: When using a filtered TimeAxis the result of `shift()` cannot be guaranteed, it might shift into a\n     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\n     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly\n     * instead.\n     *\n     * @param {Number} amount The number of units to jump\n     * @param {String} [unit] The unit (Day, Week etc)\n     */\n    shift(amount, unit = this.shiftUnit) {\n        const me = this;\n\n        let { startDate, endDate } = me;\n\n        // Use unfiltered start and end dates when shifting a filtered time axis, to lessen risk of messing it up.\n        // Still not guaranteed to work though\n        if (me.isFiltered) {\n            startDate = me.allRecords[0].startDate;\n            endDate   = me.allRecords[me.allCount - 1].endDate;\n        }\n\n        // Hack for filtered time axis, for example if weekend is filtered out and you shiftPrev() day from monday\n        let tries = 0;\n        do {\n            startDate = DH.add(startDate, amount, unit);\n            endDate   = DH.add(endDate, amount, unit);\n        } while (tries++ < me.maxTraverseTries && me.setTimeSpan(startDate, endDate, {\n            preventThrow : true\n        }) === false);\n    }\n\n    /**\n     * Moves the time axis forward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement`\n     * config of the current view preset.\n     *\n     * NOTE: When using a filtered TimeAxis the result of `shiftNext()` cannot be guaranteed, it might shift into a\n     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\n     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly\n     * instead.\n     *\n     * @param {Number} [amount] The number of units to jump forward\n     */\n    shiftNext(amount = this.shiftIncrement) {\n        this.shift(amount);\n    }\n\n    /**\n     * Moves the time axis backward in time in units specified by the view preset `shiftUnit`, and by the amount specified by the `shiftIncrement` config of the current view preset.\n     *\n     * NOTE: When using a filtered TimeAxis the result of `shiftPrev()` cannot be guaranteed, it might shift into a\n     * filtered out span. It tries to be smart about it by shifting from unfiltered start and end dates.\n     * If that solution does not work for your filtering setup, please call {@link #function-setTimeSpan} directly\n     * instead.\n     *\n     * @param {Number} [amount] The number of units to jump backward\n     */\n    shiftPrevious(amount = this.shiftIncrement) {\n        this.shift(-amount);\n    }\n\n    //endregion\n\n    //region Filter & continuous\n\n    /**\n     * Filter the time axis by a function (and clears any existing filters first). The passed function will be called with each tick in time axis.\n     * If the function returns `true`, the 'tick' is included otherwise it is filtered. If all ticks are filtered out\n     * the time axis is considered invalid, triggering `invalidFilter` and then removing the filter.\n     * @param {Function} fn The function to be called, it will receive an object with `startDate`/`endDate` properties, and `index` of the tick.\n     * @param {Object} [thisObj] `this` reference for the function\n     * @typings {Promise<any|null>}\n     */\n    filterBy(fn, thisObj = this) {\n        const me = this;\n\n        me.filters.clear();\n\n        super.filterBy((tick, index) => fn.call(thisObj, tick.data, index));\n    }\n\n    filter() {\n        const\n            me     = this,\n            retVal = super.filter(...arguments);\n\n        if (!me.maintainFilter && me.count === 0) {\n            me.resumeEvents();\n            me.trigger('invalidFilter');\n            me.disableFilters();\n        }\n\n        return retVal;\n    }\n\n    disableFilters() {\n        this.filters.forEach(f => f.disabled = true);\n\n        this.filter();\n    }\n\n    triggerFilterEvent(event) {\n        const me = this;\n\n        if (!event.filters.count) {\n            me.continuous = me.originalContinuous;\n        }\n        else {\n            me.continuous = false;\n        }\n\n        // Filters has been applied (or cleared) but listeners are not informed yet, update tick cache to have start and\n        // end dates correct when later redrawing events & header\n        me.updateTickCache();\n\n        super.triggerFilterEvent(event);\n    }\n\n    /**\n     * Returns `true` if the time axis is continuous (will return `false` when filtered)\n     * @property {Boolean}\n     */\n    get isContinuous() {\n        return this.continuous !== false && !this.isFiltered;\n    }\n\n    //endregion\n\n    //region Dates\n\n    getAdjustedDates(startDate, endDate, forceAdjust = false) {\n        const me = this;\n\n        // If providing a 0 span range, add default range\n        if (endDate && startDate - endDate === 0) {\n            endDate = null;\n        }\n\n        startDate = startDate || me.startDate;\n        endDate   = endDate || DH.add(startDate, me.defaultSpan, me.mainUnit);\n\n        return me.autoAdjust || forceAdjust ? {\n            startDate : me.floorDate(startDate, false, me.autoAdjust ? me.mainUnit : me.unit, 1),\n            endDate   : me.ceilDate(endDate, false, me.autoAdjust ? me.mainUnit : me.unit, 1)\n        } : {\n            startDate,\n            endDate\n        };\n    }\n\n    /**\n     * Method to get the current start date of the time axis.\n     * @property {Date}\n     */\n    get startDate() {\n        // <remove-on-release>\n        // TODO: added _start as caching, might mess something up when reconfiguring? change here if tests fail\n        // </remove-on-release>\n        return this._start || (this.first ? new Date(this.first.startDate) : null);\n    }\n\n    set startDate(start) {\n        this._start = DH.parse(start);\n    }\n\n    /**\n     * Method to get a the current end date of the time axis\n     * @property {Date}\n     */\n    get endDate() {\n        return this._end || (this.last ? new Date(this.last.endDate) : null);\n    }\n\n    set endDate(end) {\n        if (end) this._end = DH.parse(end);\n    }\n\n    // used in performance critical code for comparisons\n    get startMS() {\n        return this._startMS;\n    }\n\n    // used in performance critical code for comparisons\n    get endMS() {\n        return this._endMS;\n    }\n\n    // Floors a date and optionally snaps it to one of the following resolutions:\n    // 1. 'resolutionUnit'. If param 'resolutionUnit' is passed, the date will simply be floored to this unit.\n    // 2. If resolutionUnit is not passed: If date should be snapped relative to the timeaxis start date,\n    // the resolutionUnit of the timeAxis will be used, or the timeAxis 'mainUnit' will be used to snap the date\n    //\n    // returns a copy of the original date\n    // private\n    floorDate(date, relativeToStart, resolutionUnit, incr) {\n        relativeToStart = relativeToStart !== false;\n\n        const\n            me         = this,\n            relativeTo = relativeToStart ? DH.clone(me.startDate) : null,\n            increment  = incr || me.resolutionIncrement,\n            unit       = resolutionUnit || (relativeToStart ? me.resolutionUnit : me.mainUnit),\n            snap       = (value, increment) => Math.floor(value / increment) * increment;\n\n        if (relativeToStart) {\n            const snappedDuration = snap(DH.diff(relativeTo, date, unit), increment);\n            // <remove-on-release>\n            // TODO: used to be small unit multiplied with factor (minute = seconds, minutes * 60)\n            // </remove-on-release>\n            return DH.add(relativeTo, snappedDuration, unit, false);\n        }\n\n        const dt = DH.clone(date);\n\n        if (unit === 'week') {\n            const\n                day      = dt.getDay() || 7,\n                startDay = me.weekStartDay || 7;\n\n            DH.add(DH.startOf(dt, 'day', false), day >= startDay ? startDay - day : -(7 - startDay + day), 'day', false);\n\n            // Watch out for Brazil DST craziness (see test 028_timeaxis_dst.t.js)\n            if (dt.getDay() !== startDay && dt.getHours() === 23) {\n                DH.add(dt, 1, 'hour', false);\n            }\n        }\n        else {\n            // removes \"smaller\" units from date (for example minutes; removes seconds and milliseconds)\n            DH.startOf(dt, unit, false);\n\n            // day and year are 1-based so need to make additional adjustments\n            const\n                modifier     = ['day', 'year'].includes(unit) ? 1 : 0,\n                useUnit      = unit === 'day' ? 'date' : unit,\n                snappedValue = snap(DH.get(dt, useUnit) - modifier, increment) + modifier;\n\n            DH.set(dt, useUnit, snappedValue);\n        }\n\n        return dt;\n    }\n\n    /**\n     * Rounds the date to nearest unit increment\n     * @private\n     */\n    roundDate(date, relativeTo, resolutionUnit = this.resolutionUnit, increment = this.resolutionIncrement || 1) {\n        const\n            me = this,\n            dt = DH.clone(date);\n\n        relativeTo = DH.clone(relativeTo || me.startDate);\n\n        switch (resolutionUnit) {\n            case 'week': {\n                DH.startOf(dt, 'day', false);\n\n                let distanceToWeekStartDay = dt.getDay() - me.weekStartDay,\n                    toAdd;\n\n                if (distanceToWeekStartDay < 0) {\n                    distanceToWeekStartDay = 7 + distanceToWeekStartDay;\n                }\n\n                if (Math.round(distanceToWeekStartDay / 7) === 1) {\n                    toAdd = 7 - distanceToWeekStartDay;\n                }\n                else {\n                    toAdd = -distanceToWeekStartDay;\n                }\n\n                return DH.add(dt, toAdd, 'day', false);\n            }\n\n            case 'month': {\n                const\n                    nbrMonths     = DH.diff(relativeTo, dt, 'month') + DH.as('month', dt.getDay() / DH.daysInMonth(dt)), //*/DH.as('month', DH.diff(relativeTo, dt)) + (dt.getDay() / DH.daysInMonth(dt)),\n                    snappedMonths = Math.round(nbrMonths / increment) * increment;\n                return DH.add(relativeTo, snappedMonths, 'month', false);\n            }\n\n            case 'quarter':\n                DH.startOf(dt, 'month', false);\n                return DH.add(dt, 3 - (dt.getMonth() % 3), 'month', false);\n\n            default: {\n                const\n                    duration        = DH.as(resolutionUnit, DH.diff(relativeTo, dt)),\n                    // Need to find the difference of timezone offsets between relativeTo and original dates. 0 if timezone offsets are the same.\n                    offset          = DH.as(resolutionUnit, relativeTo.getTimezoneOffset() - dt.getTimezoneOffset(), 'minute'),\n                    // Need to add the offset to the whole duration, so the divided value will take DST into account\n                    snappedDuration = Math.round((duration + offset) / increment) * increment;\n\n                // <remove-on-release>\n                // TODO: used to add one res unit lower * factor, minutes = add seconds, minutes * 60\n                // </remove-on-release>\n                // Now when the round is done, we need to subtract the offset, so the result also will take DST into account\n                return DH.add(relativeTo, snappedDuration - offset, resolutionUnit, false);\n            }\n        }\n    }\n\n    // private\n    ceilDate(date, relativeToStart, resolutionUnit, increment) {\n        const me = this;\n\n        relativeToStart = relativeToStart !== false;\n        increment       = increment || (relativeToStart ? me.resolutionIncrement : 1);\n\n        const\n            unit = resolutionUnit || (relativeToStart ? me.resolutionUnit : me.mainUnit),\n            dt   = DH.clone(date);\n\n        let doCall = false;\n\n        switch (unit) {\n            case 'minute':\n                doCall = !DH.isStartOf(dt, 'minute');\n                break;\n\n            case 'hour':\n                doCall = !DH.isStartOf(dt, 'hour');\n                break;\n\n            case 'day':\n            case 'date':\n                doCall = !DH.isStartOf(dt, 'day');\n                break;\n\n            case 'week':\n                DH.startOf(dt, 'day', false);\n                doCall = (dt.getDay() !== me.weekStartDay || !DH.isEqual(dt, date));\n                break;\n\n            case 'month':\n                DH.startOf(dt, 'day', false);\n                doCall = (dt.getDate() !== 1 || !DH.isEqual(dt, date));\n                break;\n\n            case 'quarter':\n                DH.startOf(dt, 'day', false);\n                doCall = (dt.getMonth() % 3 !== 0 || dt.getDate() !== 1 || !DH.isEqual(dt, date));\n                break;\n\n            case 'year':\n                DH.startOf(dt, 'day', false);\n                doCall = (dt.getMonth() !== 0 || dt.getDate() !== 1 || !DH.isEqual(dt, date));\n                break;\n        }\n\n        if (doCall) {\n            return DH.getNext(dt, unit, increment, me.weekStartDay);\n        }\n\n        return dt;\n    }\n\n    //endregion\n\n    //region Ticks\n\n    get include() {\n        return this._include;\n    }\n\n    set include(include) {\n        const me = this;\n\n        me._include   = include;\n        me.continuous = !include;\n\n        if (!me.isConfiguring) {\n            me.startDate = me._configuredStartDate;\n            me.endDate   = me._configuredEndDate;\n            me.internalOnReconfigure();\n            me.trigger('includeChange');\n        }\n    }\n\n    // Check if a certain date is included based on timeAxis.include rules\n    processExclusion(startDate, endDate, unit) {\n        const { include } = this;\n\n        if (include) {\n            return Object.entries(include).some(([includeUnit, rule]) => {\n\n                if (!rule) {\n                    return false;\n                }\n\n                const { from, to } = rule;\n\n                // Including the closest smaller unit with a { from, to} rule should affect start & end of the\n                // generated tick. Currently only works for days or smaller.\n                if (DH.compareUnits('day', unit) >= 0 && DH.getLargerUnit(includeUnit) === unit) {\n                    if (from) {\n                        DH.set(startDate, includeUnit, from);\n                    }\n\n                    if (to) {\n                        let stepUnit = unit;\n                        // Stepping back base on date, not day\n                        if (unit === 'day') {\n                            stepUnit = 'date';\n                        }\n                        // Since endDate is not inclusive it points to the next day etc.\n                        // Turns for example 2019-01-10T00:00 -> 2019-01-09T18:00\n                        DH.set(endDate, {\n                            [stepUnit]    : DH.get(endDate, stepUnit) - 1,\n                            [includeUnit] : to\n                        });\n                    }\n                }\n\n                // \"Greater\" unit being included? Then we need to care about it\n                // (for example excluding day will also affect hour, minute etc)\n                if (DH.compareUnits(includeUnit, unit) >= 0) {\n                    const datePart = (includeUnit === 'day' ? startDate.getDay() : DH.get(startDate, includeUnit));\n\n                    if ((from && datePart < from) || (to && datePart >= to)) {\n                        return true;\n                    }\n                }\n            });\n        }\n\n        return false;\n    }\n\n    // Calculate constants used for exclusion when scaling within larger ticks\n    initExclusion() {\n        Object.entries(this.include).forEach(([unit, rule]) => {\n            if (rule) {\n                const { from, to } = rule;\n\n                // For example for hour:\n                // 1. Get the next bigger unit -> day, get ratio -> 24\n                // 2. to 20 - from 8 = 12 hours visible each day. lengthFactor 24 / 12 = 2 means that each hour used\n                // needs to represent 2 hours when drawn (to stretch)\n                // |    ████    | -> |  ████████  |\n                rule.lengthFactor = DH.getUnitToBaseUnitRatio(unit, DH.getLargerUnit(unit)) / (to - from);\n                // <remove-on-release>\n                // TODO: Since `to` is exclusive this should be the correct one... but cannot get it to work throughout\n                // </remove-on-release>\n                rule.lengthFactorExcl = DH.getUnitToBaseUnitRatio(unit, DH.getLargerUnit(unit)) / (to - from - 1);\n\n                // Calculate weighted center to stretch around |   ██x█ |\n                rule.center = from + from / (rule.lengthFactor - 1);\n            }\n        });\n    }\n\n    /**\n     * Method generating the ticks for this time axis. Should return an array of ticks. Each tick is an object of the following structure:\n     * ```\n     * {\n     *    startDate : ..., // start date\n     *    endDate   : ...  // end date\n     * }\n     * ```\n     * Take notice, that this function either has to be called with `start`/`end` parameters, or create those variables.\n     *\n     * To see it in action please check out our [TimeAxis](https://bryntum.com/products/scheduler/examples/timeaxis/) example and navigate to \"Compressed non-working time\" tab.\n     *\n     * @member {Function} generateTicks\n     * @param {Date} axisStartDate The start date of the interval\n     * @param {Date} axisEndDate The end date of the interval\n     * @param {String} unit The unit of the time axis\n     * @param {Number} increment The increment for the unit specified.\n     * @returns {Array} ticks The ticks representing the time axis\n     */\n\n    updateGenerateTicks() {\n        if (!this.isConfiguring) {\n            this.reconfigure(this);\n        }\n    }\n\n    _generateTicks(axisStartDate, axisEndDate, unit = this.unit, increment = this.increment) {\n        const\n            me            = this,\n            ticks         = [],\n            usesExclusion = Boolean(me.include);\n\n        let intervalEnd,\n            tickEnd,\n            isExcluded,\n            dstDiff                = 0,\n            { startDate, endDate } = me.getAdjustedDates(axisStartDate, axisEndDate);\n\n        me.tickCache = {};\n\n        if (usesExclusion) {\n            me.initExclusion();\n        }\n\n        while (startDate < endDate) {\n            intervalEnd = DH.getNext(startDate, unit, increment, me.weekStartDay);\n\n            if (!me.autoAdjust && intervalEnd > endDate) {\n                intervalEnd = endDate;\n            }\n\n            // Handle hourly increments crossing DST boundaries to keep the timescale looking correct\n            // Only do this for HOUR resolution currently, and only handle it once per tick generation.\n            if (unit === 'hour' && increment > 1 && ticks.length > 0 && dstDiff === 0) {\n                const prev = ticks[ticks.length - 1];\n\n                dstDiff = ((prev.startDate.getHours() + increment) % 24) - prev.endDate.getHours();\n\n                if (dstDiff !== 0) {\n                    // A DST boundary was crossed in previous tick, adjust this tick to keep timeaxis \"symmetric\".\n                    intervalEnd = DH.add(intervalEnd, dstDiff, 'hour');\n                }\n            }\n\n            isExcluded = false;\n\n            if (usesExclusion) {\n                tickEnd    = new Date(intervalEnd.getTime());\n                isExcluded = me.processExclusion(startDate, intervalEnd, unit);\n            }\n            else {\n                tickEnd = intervalEnd;\n            }\n\n            if (!isExcluded) {\n                ticks.push({\n                    id      : (ticks.length + 1),\n                    startDate,\n                    endDate : intervalEnd\n                });\n                me.tickCache[startDate.getTime()] = ticks.length - 1;\n            }\n\n            startDate = tickEnd;\n        }\n\n        return ticks;\n    }\n\n    /**\n     * How many ticks are visible across the TimeAxis.\n     *\n     * Usually, this is an integer because {@link #config-autoAdjust} means that the start and end\n     * dates are adjusted to be on tick boundaries.\n     * @property {Number}\n     * @internal\n     */\n    get visibleTickTimeSpan() {\n        const me = this;\n        return me.isContinuous ? me.visibleTickEnd - me.visibleTickStart : me.count;\n    }\n\n    /**\n     * Gets a tick \"coordinate\" representing the date position on the time scale. Returns -1 if the date is not part of the time axis.\n     * @param {Date} date the date\n     * @returns {Number} the tick position on the scale or -1 if the date is not part of the time axis\n     */\n    getTickFromDate(date) {\n        const\n            me     = this,\n            ticks  = me.records,\n            dateMS = date.getTime?.() ?? date;\n\n        let begin = 0,\n            end   = ticks.length - 1,\n            middle, tick, tickStart, tickEnd;\n\n        // Quickly eliminate out of range dates or if we have not been set up with a time range yet\n        if (!ticks.length || dateMS < ticks[0].startDateMS || dateMS > ticks[end].endDateMS) {\n            return -1;\n        }\n        if (me.isContinuous) {\n            // <remove-on-release>\n            // TODO: This is the code from ExtScheduler, it is a calculation without iteration so it should perform better,\n            //  we should consider using it...\n            // if (date - ticks[0].startDate === 0) return this.visibleTickStart;\n            // if (date - ticks[end].endDate === 0) return this.visibleTickEnd;\n            //\n            // const { adjustedStart, adjustedEnd }     = this;\n            //\n            // let tickIndex       = Math.floor(ticks.length * (date - adjustedStart) / (adjustedEnd - adjustedStart));\n            //\n            // // for the date == adjustedEnd case\n            // if (tickIndex > end) {\n            //     tickIndex = end;\n            // }\n            //\n            // const tickStart           = tickIndex === 0 ? adjustedStart : ticks[tickIndex].startDate;\n            // const tickEnd             = tickIndex === end ? adjustedEnd : ticks[tickIndex].endDate;\n            //\n            // tick                = tickIndex + (date - tickStart) / (tickEnd - tickStart);\n            //\n            // // in case of `autoAdjust : false` the actual visible timespan starts not from 0 tick coordinate, but\n            // // from `visibleTickStart` coordinate, this check generally repeats the \"quick bailout\" check in the beginning of the method,\n            // // but still\n            // if (tick < this.visibleTickStart || tick > this.visibleTickEnd) {\n            //     return -1;\n            // }\n            //\n            // return tick;\n            // </remove-on-release>\n\n            // Chop tick cache in half until we find a match\n            while (begin < end) {\n                middle = (begin + end + 1) >> 1;\n                if (dateMS > ticks[middle].endDateMS) {\n                    begin = middle + 1;\n                }\n                else if (dateMS < ticks[middle].startDateMS) {\n                    end = middle - 1;\n                }\n                else {\n                    begin = middle;\n                }\n            }\n            tick      = ticks[begin];\n            tickStart = tick.startDateMS;\n\n            // Part way though, calculate the fraction\n            if (dateMS > tickStart) {\n                tickEnd = tick.endDateMS;\n                begin += (dateMS - tickStart) / (tickEnd - tickStart);\n            }\n\n            return Math.min(Math.max(begin, me.visibleTickStart), me.visibleTickEnd);\n        }\n        else {\n            for (let i = 0; i <= end; i++) {\n                tickEnd = ticks[i].endDateMS;\n\n                if (dateMS <= tickEnd) {\n                    tickStart = ticks[i].startDateMS;\n\n                    // date < tickStart can occur in filtered case\n                    tick = i + (dateMS > tickStart ? (dateMS - tickStart) / (tickEnd - tickStart) : 0);\n\n                    return tick;\n                }\n            }\n        }\n\n    }\n\n    getSnappedTickFromDate(date) {\n        const\n            startTickIdx = Math.floor(this.getTickFromDate(date));\n        return this.getAt(startTickIdx);\n    }\n\n    /**\n     * Gets the time represented by a tick \"coordinate\".\n     * @param {Number} tick the tick \"coordinate\"\n     * @param {'floor'|'round'|'ceil'} [roundingMethod] Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @returns {Date} The date to represented by the tick \"coordinate\", or null if invalid.\n     */\n    getDateFromTick(tick, roundingMethod) {\n        const me = this;\n\n        if (tick === me.visibleTickEnd) {\n            return me.endDate;\n        }\n\n        const\n            wholeTick = Math.floor(tick),\n            fraction  = tick - wholeTick,\n            t         = me.getAt(wholeTick);\n\n        if (!t) {\n            return null;\n        }\n\n        const\n            // if we've filtered timeaxis using filterBy, then we cannot trust to adjustedStart property and should use tick start\n            start = wholeTick === 0 && me.isContinuous ? me.adjustedStart : t.startDate,\n            // if we've filtered timeaxis using filterBy, then we cannot trust to adjustedEnd property and should use tick end\n            end   = (wholeTick === me.count - 1) && me.isContinuous ? me.adjustedEnd : t.endDate;\n\n        let date = DH.add(start, fraction * (end - start), 'millisecond');\n\n        if (roundingMethod) {\n            date = me[roundingMethod + 'Date'](date);\n        }\n\n        return date;\n    }\n\n    /**\n     * Returns the ticks of the timeaxis in an array of objects with a \"startDate\" and \"endDate\".\n     * @property {Scheduler.model.TimeSpan[]}\n     */\n    get ticks() {\n        return this.records;\n    }\n\n    /**\n     * Caches ticks and start/end dates for faster processing during rendering of events.\n     * @private\n     */\n    updateTickCache(onlyStartEnd = false) {\n        const me = this;\n\n        if (me.count) {\n            me._start   = me.first.startDate;\n            me._end     = me.last.endDate;\n            me._startMS = me.startDate.getTime();\n            me._endMS   = me.endDate.getTime();\n        }\n        else {\n            me._start = me._end = me._startMs = me._endMS = null;\n        }\n\n        // onlyStartEnd is true prior to clearing filters, to get start and end dates correctly during that process.\n        // No point in filling tickCache yet in that case, it will be done after the filters are cleared\n        if (!onlyStartEnd) {\n            me.tickCache = {};\n            me.forEach((tick, i) => me.tickCache[tick.startDate.getTime()] = i);\n        }\n    }\n\n    //endregion\n\n    //region Axis\n\n    /**\n     * Returns true if the passed date is inside the span of the current time axis.\n     * @param {Date} date The date to query for\n     * @returns {Boolean} true if the date is part of the time axis\n     */\n    dateInAxis(date, inclusiveEnd = false) {\n        const\n            me        = this,\n            axisStart = me.startDate,\n            axisEnd   = me.endDate;\n\n        // Date is between axis start/end and axis is not continuous - need to perform better lookup\n        if (me.isContinuous) {\n            return inclusiveEnd ? DH.betweenLesserEqual(date, axisStart, axisEnd) : DH.betweenLesser(date, axisStart, axisEnd);\n        }\n        else {\n            const length = me.getCount();\n\n            let tickStart, tickEnd, tick;\n\n            for (let i = 0; i < length; i++) {\n                tick      = me.getAt(i);\n                tickStart = tick.startDate;\n                tickEnd   = tick.endDate;\n\n                if ((inclusiveEnd && date <= tickEnd) || (!inclusiveEnd && date < tickEnd)) {\n                    return date >= tickStart;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns true if the passed timespan is part of the current time axis (in whole or partially).\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @returns {Boolean} true if the timespan is part of the timeaxis\n     */\n    timeSpanInAxis(start, end) {\n        const me = this;\n\n        if (!end || end.getTime() === start.getTime()) {\n            return this.dateInAxis(start, true);\n        }\n\n        if (me.isContinuous) {\n            return DH.intersectSpans(start, end, me.startDate, me.endDate);\n        }\n\n        return (start < me.startDate && end > me.endDate) || me.getTickFromDate(start) !== me.getTickFromDate(end);\n    }\n\n    // Accepts a TimeSpan model (uses its cached MS values to be a bit faster during rendering)\n    isTimeSpanInAxis(timeSpan) {\n        const\n            me                         = this,\n            { startMS, endMS }         = me,\n            { startDateMS }            = timeSpan,\n            endDateMS                  = timeSpan.endDateMS ?? timeSpan.meta.endDateCached;\n\n        // only consider fully scheduled ranges\n        if (!startDateMS || !endDateMS) return false;\n\n        if (endDateMS === startDateMS) {\n            return me.dateInAxis(timeSpan.startDate, true);\n        }\n\n        if (me.isContinuous) {\n            return endDateMS > startMS && startDateMS < endMS;\n        }\n\n        const\n            startTick = me.getTickFromDate(timeSpan.startDate),\n            endTick   = me.getTickFromDate(timeSpan.endDate);\n\n        // endDate is not inclusive\n        // <remove-on-release>\n        // TODO: Handle in getTickFromDate() somehow?\n        // </remove-on-release>\n        if (\n            (startTick === me.count && DH.isEqual(timeSpan.startDate, me.last.endDate)) ||\n            (endTick === 0 && DH.isEqual(timeSpan.endDate, me.first.startDate))\n        ) {\n            return false;\n        }\n\n        return (\n            // Spanning entire axis\n            (startDateMS < startMS && endDateMS > endMS) ||\n            // Unintentionally 0 wide (ticks excluded or outside)\n            startTick !== endTick\n        );\n    }\n\n    //endregion\n\n    //region Iteration\n\n    /**\n     * Calls the supplied iterator function once per interval. The function will be called with four parameters, startDate endDate, index, isLastIteration.\n     * @internal\n     * @param {String} unit The unit to use when iterating over the timespan\n     * @param {Number} increment The increment to use when iterating over the timespan\n     * @param {Function} iteratorFn The function to call\n     * @param {Object} [thisObj] `this` reference for the function\n     */\n    forEachAuxInterval(unit, increment = 1, iteratorFn, thisObj = this) {\n        const end = this.endDate;\n\n        let dt = this.startDate,\n            i  = 0,\n            intervalEnd;\n\n        if (dt > end) throw new Error('Invalid time axis configuration');\n\n        while (dt < end) {\n            intervalEnd = DH.min(DH.getNext(dt, unit, increment, this.weekStartDay), end);\n            iteratorFn.call(thisObj, dt, intervalEnd, i, intervalEnd >= end);\n            dt = intervalEnd;\n            i++;\n        }\n    }\n\n    //endregion\n}\n", "import DH from '../../../Core/helper/DateHelper.js';\nimport Events from '../../../Core/mixin/Events.js';\nimport PresetManager from '../../preset/PresetManager.js';\nimport ViewPreset from '../../preset/ViewPreset.js';\nimport '../../data/TimeAxis.js';\n\n/**\n * @module Scheduler/view/model/TimeAxisViewModel\n */\n\n/**\n * This class is an internal view model class, describing the visual representation of a {@link Scheduler.data.TimeAxis}.\n * The config for the header rows is described in the {@link Scheduler.preset.ViewPreset#field-headers headers}.\n * To calculate the size of each cell in the time axis, this class requires:\n *\n * - availableSpace  - The total width or height available for the rendering\n * - tickSize       - The fixed width or height of each cell in the lowest header row. This value is normally read from the\n * {@link Scheduler.preset.ViewPreset viewPreset} but this can also be updated programmatically using the {@link #property-tickSize} setter\n *\n * Normally you should not interact with this class directly.\n *\n * @extends Core/mixin/Events\n */\nexport default class TimeAxisViewModel extends Events() {\n    //region Default config\n\n    // <remove-on-release>\n    // TODO: replace _availableSpace etc. with availableSpace in config and make setters work during config phase\n    // </remove-on-release>\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The time axis providing the underlying data to be visualized\n             * @config {Scheduler.data.TimeAxis}\n             * @internal\n             */\n            timeAxis : null,\n\n            /**\n             * The available width/height, this is normally not known by the consuming UI component using this model\n             * class until it has been fully rendered. The consumer of this model should set\n             * {@link #property-availableSpace} when its width has changed.\n             * @config {Number}\n             * @internal\n             */\n            availableSpace : null,\n\n            /**\n             * The \"tick width\" for horizontal mode or \"tick height\" for vertical mode, to use for the cells in the\n             * bottom most header row.\n             * This value is normally read from the {@link Scheduler.preset.ViewPreset viewPreset}\n             * @config {Number}\n             * @default\n             * @internal\n             */\n            tickSize : 100,\n\n            /**\n             * true if there is a requirement to be able to snap events to a certain view resolution.\n             * This has implications of the {@link #config-tickSize} that can be used, since all widths must be in even pixels.\n             * @config {Boolean}\n             * @default\n             * @internal\n             */\n            snap : false,\n\n            /**\n             * true if cells in the bottom-most row should be fitted to the {@link #property-availableSpace available space}.\n             * @config {Boolean}\n             * @default\n             * @internal\n             */\n            forceFit : false,\n\n            headers : null,\n\n            mode : 'horizontal', // or 'vertical'\n\n            //used for Exporting. Make sure the tick columns are not recalculated when resizing.\n            suppressFit : false,\n\n            // cache of the config currently used.\n            columnConfig : [],\n\n            // the view preset name to apply initially\n            viewPreset : null,\n\n            // The default header level to draw column lines for\n            columnLinesFor : null,\n\n            originalTickSize : null,\n\n            headersDatesCache : []\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(config) {\n        const me = this;\n\n        // getSingleUnitInPixels results are memoized because of frequent calls during rendering.\n        me.unitToPixelsCache = {};\n\n        super.construct(config);\n\n        const viewPreset = me.timeAxis.viewPreset || me.viewPreset;\n\n        if (viewPreset) {\n            if (viewPreset instanceof ViewPreset) {\n                me.consumeViewPreset(viewPreset);\n            }\n            else {\n                const preset = PresetManager.getPreset(viewPreset);\n                preset && me.consumeViewPreset(preset);\n            }\n        }\n\n        // When time axis is changed, reconfigure the model\n        me.timeAxis.ion({ reconfigure : 'onTimeAxisReconfigure', thisObj : me });\n\n        me.configured = true;\n    }\n\n    doDestroy() {\n        this.timeAxis.un('reconfigure', this.onTimeAxisReconfigure, this);\n        super.doDestroy();\n    }\n\n    /**\n     * Used to calculate the range to extend the TimeAxis to during infinite scroll.\n     * @param {Date} date\n     * @param {Boolean} centered\n     * @param {Scheduler.preset.ViewPreset} [preset] Optional, the preset for which to calculate the range.\n     * defaults to the currently active ViewPreset\n     * @returns {Object} `{ startDate, endDate }`\n     * @internal\n     */\n    calculateInfiniteScrollingDateRange(date, centered, preset = this.viewPreset) {\n        const\n            {\n                timeAxis,\n                availableSpace\n            } = this,\n            {\n                bufferCoef\n            } = this.owner,\n            {\n                leafUnit,\n                leafIncrement,\n                topUnit,\n                topIncrement,\n                tickSize\n            } = preset,\n            // If the units are the same and the increments are integer, snap to the top header's unit & increment\n            useTop    = leafUnit === topUnit && Math.round(topIncrement) === topIncrement && Math.round(leafIncrement) === leafIncrement,\n            snapSize  = useTop ? topIncrement : leafIncrement,\n            snapUnit  = useTop ? topUnit      : leafUnit;\n\n        // if provided date is the central point on the timespan\n        if (centered) {\n            const halfSpan = Math.ceil((availableSpace * bufferCoef + (availableSpace / 2)) / tickSize);\n\n            return {\n                startDate : timeAxis.floorDate(DH.add(date, -halfSpan * leafIncrement, leafUnit), false, snapUnit, snapSize),\n                endDate   : timeAxis.ceilDate(DH.add(date, halfSpan * leafIncrement, leafUnit), false, snapUnit, snapSize)\n            };\n        }\n        // if provided date is the left coordinate of the visible timespan area\n        else {\n            const bufferedTicks = Math.ceil(availableSpace * bufferCoef / tickSize);\n\n            return {\n                startDate : timeAxis.floorDate(DH.add(date, -bufferedTicks * leafIncrement, leafUnit), false, snapUnit, snapSize),\n                endDate   : timeAxis.ceilDate(DH.add(date, Math.ceil((availableSpace / tickSize + bufferedTicks) * leafIncrement), leafUnit), false, snapUnit, snapSize)\n            };\n        }\n    }\n\n    /**\n     * Returns an array representing the headers of the current timeAxis. Each element is an array representing the cells for that level in the header.\n     * @returns {Object[]} An array of headers, each element being an array representing each cell (with start date and end date) in the timeline representation.\n     * @internal\n     */\n    get columnConfig() {\n        return this._columnConfig;\n    }\n\n    set columnConfig(config) {\n        this._columnConfig = config;\n    }\n\n    get headers() {\n        return this._headers;\n    }\n\n    set headers(headers) {\n        if (headers && headers.length && headers[headers.length - 1].cellGenerator) {\n            throw new Error('`cellGenerator` cannot be used for the bottom level of your headers. Use TimeAxis#generateTicks() instead.');\n        }\n\n        this._headers = headers;\n    }\n\n    get isTimeAxisViewModel() {\n        return true;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires after the model has been updated.\n     * @event update\n     * @param {Scheduler.view.model.TimeAxisViewModel} source The model instance\n     */\n\n    /**\n     * Fires after the model has been reconfigured.\n     * @event reconfigure\n     * @param {Scheduler.view.model.TimeAxisViewModel} source The model instance\n     */\n\n    //endregion\n\n    //region Mode\n\n    /**\n     * Using horizontal mode?\n     * @returns {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isHorizontal() {\n        return this.mode !== 'vertical';\n    }\n\n    /**\n     * Using vertical mode?\n     * @returns {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isVertical() {\n        return this.mode === 'vertical';\n    }\n\n    /**\n     * Gets/sets the forceFit value for the model. Setting it will cause it to update its contents and fire the\n     * {@link #event-update} event.\n     * @property {Boolean}\n     * @internal\n     */\n    set forceFit(value) {\n        if (value !== this._forceFit) {\n            this._forceFit = value;\n            this.update();\n        }\n    }\n\n    //endregion\n\n    //region Reconfigure & update\n\n    reconfigure(config) {\n        // clear the cached headers\n        this.headers = null;\n\n        // Ensure correct ordering\n        this.setConfig(config);\n\n        this.trigger('reconfigure');\n    }\n\n    onTimeAxisReconfigure({ source : timeAxis, suppressRefresh }) {\n        if (this.viewPreset !== timeAxis.viewPreset) {\n            this.consumeViewPreset(timeAxis.viewPreset);\n        }\n        if (!suppressRefresh && timeAxis.count > 0) {\n            this.update();\n        }\n    }\n\n    /**\n     * Updates the view model current timeAxis configuration and available space.\n     * @param {Number} [availableSpace] The available space for the rendering of the axis (used in forceFit mode)\n     * @param {Boolean} [silent] Pass `true` to suppress the firing of the `update` event.\n     * @param {Boolean} [forceUpdate] Pass `true` to fire the `update` event even if the size has not changed.\n     * @internal\n     */\n    update(availableSpace, silent = false, forceUpdate = false) {\n        const\n            me                    = this,\n            { timeAxis, headers } = me,\n            spaceAvailable        = availableSpace !== 0;\n\n        // We're in configuration, or no change, quit\n        if (me.isConfiguring || (spaceAvailable && me._availableSpace === availableSpace)) {\n            if (forceUpdate) {\n                me.trigger('update');\n            }\n            return;\n        }\n\n        me._availableSpace = Math.max(availableSpace || me.availableSpace || 0, 0);\n\n        if (typeof me.availableSpace !== 'number') {\n            throw new Error('Invalid available space provided to TimeAxisModel');\n        }\n\n        me.columnConfig = [];\n\n        // The \"column width\" is considered to be the width of each tick in the lowest header row and this width\n        // has to be same for all cells in the lowest row.\n        const tickSize = me._tickSize = me.calculateTickSize(me.originalTickSize);\n\n        if (typeof tickSize !== 'number' || tickSize <= 0) {\n            throw new Error('Invalid timeAxis tick size');\n        }\n\n        // getSingleUnitInPixels results are memoized because of frequent calls during rendering.\n        me.unitToPixelsCache = {};\n\n        // totalSize is cached because of frequent calls which calculate it.\n        me._totalSize = null;\n\n        // Generate the underlying date ranges for each header row, which will provide input to the cell rendering\n        for (let pos = 0, { length } = headers; pos < length; pos++) {\n            const header = headers[pos];\n\n            if (header.cellGenerator) {\n                const headerCells = header.cellGenerator.call(me, timeAxis.startDate, timeAxis.endDate);\n\n                me.columnConfig[pos] = me.createHeaderRow(pos, header, headerCells);\n            }\n            else {\n                me.columnConfig[pos] = me.createHeaderRow(pos, header);\n            }\n        }\n\n        if (!silent) {\n            me.trigger('update');\n        }\n    }\n\n    //endregion\n\n    //region Date / position mapping\n\n    /**\n     * Returns the distance in pixels for a timespan with the given start and end date.\n     * @param {Date} start start date\n     * @param {Date} end end date\n     * @returns {Number} The length of the time span\n     * @category Date mapping\n     */\n    getDistanceBetweenDates(start, end) {\n        return this.getPositionFromDate(end) - this.getPositionFromDate(start);\n    }\n\n    /**\n     * Returns the distance in pixels for a time span\n     * @param {Number} durationMS Time span duration in ms\n     * @returns {Number} The length of the time span\n     * @category Date mapping\n     */\n    getDistanceForDuration(durationMs) {\n        return this.getSingleUnitInPixels('millisecond') * durationMs;\n    }\n\n    /**\n     * Gets the position of a date on the projected time axis or -1 if the date is not in the timeAxis.\n     * @param {Date} date the date to query for.\n     * @returns {Number} the coordinate representing the date\n     * @category Date mapping\n     */\n    getPositionFromDate(date, options = {}) {\n        const tick = this.getScaledTick(date, options);\n\n        if (tick === -1) {\n            return -1;\n        }\n\n        return this.tickSize * (tick - this.timeAxis.visibleTickStart);\n    }\n\n    // Translates a tick along the time axis to facilitate scaling events when excluding certain days or hours\n    getScaledTick(date, { respectExclusion, snapToNextIncluded, isEnd, min, max }) {\n        const\n            { timeAxis }      = this,\n            { include, unit } = timeAxis;\n\n        let tick = timeAxis.getTickFromDate(date);\n\n        if (tick !== -1 && respectExclusion && include) {\n            let tickChanged = false;\n\n            // Stretch if we are using a larger unit than 'hour', except if it is 'day'. If so, it is already handled\n            // by a cheaper reconfiguration of the ticks in `generateTicks`\n            if (include.hour && DH.compareUnits(unit, 'hour') > 0 && unit !== 'day') {\n                const\n                    { from, to, lengthFactor, center } = include.hour,\n                    // Original hours\n                    originalHours                      = date.getHours(),\n                    // Crop to included hours\n                    croppedHours                       = Math.min(Math.max(originalHours, from), to);\n\n                // If we are not asked to snap (when other part of span is not included) any cropped away hour\n                // should be considered excluded\n                if (!snapToNextIncluded && croppedHours !== originalHours) {\n                    return -1;\n                }\n\n                const\n                    // Should scale hour and smaller units (seconds will hardly affect visible result...)\n                    fractionalHours = croppedHours + date.getMinutes() / 60,\n                    // Number of hours from the center    |xxxx|123c----|xxx|\n                    hoursFromCenter = center - fractionalHours,\n                    // Step from center to stretch event  |x|112233c----|xxx|\n                    newHours        = center - hoursFromCenter * lengthFactor;\n\n                // Adding instead of setting to get a clone of the date, to not affect the original\n                date = DH.add(date, newHours - originalHours, 'h');\n\n                tickChanged = true;\n            }\n\n            if (include.day && DH.compareUnits(unit, 'day') > 0) {\n                const { from, to, lengthFactor, center } = include.day;\n\n                //region Crop\n                let checkDay = date.getDay();\n\n                // End date is exclusive, check the day before if at 00:00\n                if (isEnd && date.getHours() === 0 && date.getMinutes() === 0 && date.getSeconds() === 0 && date.getMilliseconds() === 0) {\n                    if (--checkDay < 0) {\n                        checkDay = 6;\n                    }\n                }\n                let addDays = 0;\n\n                if (checkDay < from || checkDay >= to) {\n                    // If end date is in view but start date is excluded, snap to next included day\n                    if (snapToNextIncluded) {\n\n                        // Step back to \"to-1\" (not inclusive) for end date\n                        if (isEnd) {\n                            addDays = (to - checkDay - 8) % 7;\n                        }\n                        // Step forward to \"from\" for start date\n                        else {\n                            addDays = (from - checkDay + 7) % 7;\n                        }\n\n                        date = DH.add(date, addDays, 'd');\n                        date = DH.startOf(date, 'd', false);\n\n                        // Keep end after start and vice versa\n                        if (\n                            (max && date.getTime() >= max) ||\n                            (min && date.getTime() <= min)\n                        ) {\n                            return -1;\n                        }\n                    }\n                    else {\n                        // day excluded at not snapping to next\n                        return -1;\n                    }\n                }\n                //endregion\n\n                const\n                    { weekStartDay } = timeAxis,\n                    // Center to stretch around, for some reason pre-calculated cannot be used for sundays :)\n                    fixedCenter      = date.getDay() === 0 ? 0 : center,\n                    // Should scale day and smaller units (minutes will hardly affect visible result...)\n                    fractionalDay    = date.getDay() + date.getHours() / 24, //+ dateClone.getMinutes() / (24 * 1440),\n                    // Number of days from the calculated center\n                    daysFromCenter   = fixedCenter - fractionalDay,\n                    // Step from center to stretch event\n                    newDay           = fixedCenter - daysFromCenter * lengthFactor;\n\n                // Adding instead of setting to get a clone of the date, to not affect the original\n                date = DH.add(date, newDay - fractionalDay + weekStartDay, 'd');\n\n                tickChanged = true;\n            }\n\n            // Now the date might start somewhere else (fraction of ticks)\n            if (tickChanged) {\n                // When stretching date might end up outside of time axis, making it invalid to use. Clip it to time axis\n                // to circumvent this\n                date = DH.constrain(date, timeAxis.startDate, timeAxis.endDate);\n\n                // Get a new tick based on the \"scaled\" date\n                tick = timeAxis.getTickFromDate(date);\n            }\n        }\n\n        return tick;\n    }\n\n    /**\n     * Gets the date for a position on the time axis\n     * @param {Number} position The page X or Y coordinate\n     * @param {'floor'|'round'|'ceil'} [roundingMethod] Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @param {Boolean} [allowOutOfRange=false] By default, this returns `null` if the position is outside\n     * of the time axis. Pass `true` to attempt to calculate a date outside of the time axis.\n     * @returns {Date} the Date corresponding to the xy coordinate\n     * @category Date mapping\n     */\n    getDateFromPosition(position, roundingMethod, allowOutOfRange = false) {\n        const\n            me           = this,\n            { timeAxis } = me,\n            tick         = me.getScaledPosition(position) / me.tickSize + timeAxis.visibleTickStart;\n\n        if (tick < 0 || tick > timeAxis.count) {\n            if (allowOutOfRange) {\n                let result;\n\n                // Subtract the correct number of tick units from the start date\n                if (tick < 0) {\n                    result = DH.add(timeAxis.startDate, tick, timeAxis.unit);\n                }\n                else {\n                    // Add the correct number of tick units to the end date\n                    result = DH.add(timeAxis.endDate, tick - timeAxis.count, timeAxis.unit);\n                }\n\n                // Honour the rounding requested\n                if (roundingMethod) {\n                    result = timeAxis[roundingMethod + 'Date'](result);\n                }\n                return result;\n            }\n            return null;\n        }\n\n        return timeAxis.getDateFromTick(tick, roundingMethod);\n    }\n\n    // Translates a position along the time axis to facilitate scaling events when excluding certain days or hours\n    getScaledPosition(position) {\n        const { include, unit, weekStartDay } = this.timeAxis;\n\n        // Calculations are\n\n        if (include) {\n            const dayWidth = this.getSingleUnitInPixels('day');\n\n            // Have to calculate day before hour to get end result correct\n            if (include.day && DH.compareUnits(unit, 'day') > 0) {\n                const { from, lengthFactor } = include.day,\n                    // Scaling happens within a week, determine position within it\n                    positionInWeek         = position % (dayWidth * 7),\n                    // Store were the week starts to be able to re-add it after scale\n                    weekStartPosition      = position - positionInWeek;\n                // Scale position using calculated length per day factor, adding the width of excluded days\n                position                     = positionInWeek / lengthFactor + (from - weekStartDay) * dayWidth + weekStartPosition;\n            }\n\n            // Hours are not taken into account when viewing days, since the day ticks are reconfigured in\n            // `generateTicks` instead\n            if (include.hour && DH.compareUnits(unit, 'hour') > 0 && unit !== 'day') {\n                const { from, lengthFactorExcl } = include.hour,\n                    hourWidth                  = this.getSingleUnitInPixels('hour'),\n                    // Scaling happens within a day, determine position within it\n                    positionInDay              = position % dayWidth,\n                    // Store were the day starts to be able to re-add it after scale\n                    dayStartPosition           = position - positionInDay;\n                // Scale position using calculated length per day factor, adding the width of excluded hours\n                position                         = positionInDay / lengthFactorExcl + from * hourWidth + dayStartPosition;\n            }\n        }\n\n        return position;\n    }\n\n    /**\n     * Returns the amount of pixels for a single unit\n     * @internal\n     * @returns {Number} The unit in pixel\n     */\n    getSingleUnitInPixels(unit) {\n        const me = this;\n\n        return me.unitToPixelsCache[unit] || (me.unitToPixelsCache[unit] = DH.getUnitToBaseUnitRatio(me.timeAxis.unit, unit, true) * me.tickSize / me.timeAxis.increment);\n    }\n\n    /**\n     * Returns the pixel increment for the current view resolution.\n     * @internal\n     * @returns {Number} The increment\n     */\n    get snapPixelAmount() {\n        if (this.snap) {\n            const { resolution } = this.timeAxis;\n            return (resolution.increment || 1) * this.getSingleUnitInPixels(resolution.unit);\n        }\n        return 1;\n    }\n\n    //endregion\n\n    //region Sizes\n\n    /**\n     * Get/set the current time column size (the width or height of a cell in the bottom-most time axis header row,\n     * depending on mode)\n     * @internal\n     * @property {Number}\n     */\n    get tickSize() {\n        return this._tickSize;\n    }\n\n    set tickSize(size) {\n        this.setTickSize(size, false);\n    }\n\n    setTickSize(size, suppressEvent) {\n        this._tickSize = this.originalTickSize = size;\n\n        this.update(undefined, suppressEvent);\n    }\n\n    get timeResolution() {\n        return this.timeAxis.resolution;\n    }\n\n    // Calculates the time column width/height based on the value defined viewPreset \"tickWidth/tickHeight\". It also\n    // checks for the forceFit view option and the snap, both of which impose constraints on the time column width\n    // configuration.\n    calculateTickSize(proposedSize) {\n        const\n            me                                  = this,\n            { forceFit, timeAxis, suppressFit } = me,\n            timelineUnit                        = timeAxis.unit;\n\n        let size  = 0,\n            ratio = 1; //Number.MAX_VALUE;\n\n        if (me.snap) {\n            const resolution = timeAxis.resolution;\n            ratio            = DH.getUnitToBaseUnitRatio(timelineUnit, resolution.unit) * resolution.increment;\n        }\n\n        if (!suppressFit) {\n            const fittingSize = me.availableSpace / timeAxis.visibleTickTimeSpan;\n\n            size = (forceFit || proposedSize < fittingSize) ? fittingSize : proposedSize;\n\n            if (ratio > 0 && (!forceFit || ratio < 1)) {\n                size = Math.max(1, ratio * size) / ratio;\n            }\n        }\n        else {\n            size = proposedSize;\n        }\n\n        return size;\n    }\n\n    /**\n     * Returns the total width/height of the time axis representation, depending on mode.\n     * @returns {Number} The width or height\n     * @internal\n     * @readonly\n     */\n    get totalSize() {\n        // Floor the space to prevent spurious overflow\n        return this._totalSize || (this._totalSize = Math.floor(this.tickSize * this.timeAxis.visibleTickTimeSpan));\n    }\n\n    /**\n     * Get/set the available space for the time axis representation. If size changes it will cause it to update its\n     * contents and fire the {@link #event-update} event.\n     * @internal\n     * @property {Number}\n     */\n    get availableSpace() {\n        return this._availableSpace;\n    }\n\n    set availableSpace(space) {\n        const me = this;\n        // We should only need to repaint fully if the tick width has changed (which will happen if forceFit is set, or if the full size of the time axis doesn't\n        // occupy the available space - and gets stretched\n        me._availableSpace = Math.max(0, space);\n\n        if (me._availableSpace > 0) {\n            const newTickSize = me.calculateTickSize(me.originalTickSize);\n\n            if (newTickSize > 0 && newTickSize !== me.tickSize) {\n                me.update();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Fitting & snapping\n\n    /**\n     * Returns start dates for ticks at the specified level in format { date, isMajor }.\n     * @param {Number} level Level in headers array, `0` meaning the topmost...\n     * @param {Boolean} useLowestHeader Use lowest level\n     * @param getEnd\n     * @returns {Array}\n     * @internal\n     */\n    getDates(level = this.columnLinesFor, useLowestHeader = false, getEnd = false) {\n        const\n            me            = this,\n            ticks         = [],\n            linesForLevel = useLowestHeader ? me.lowestHeader : level,\n            majorLevel    = me.majorHeaderLevel,\n            levelUnit     = me.headers && me.headers[level].unit,\n            majorUnit     = majorLevel != null && me.headers && me.headers[majorLevel].unit,\n            validMajor    = majorLevel != null && DH.doesUnitsAlign(majorUnit, levelUnit),\n            hasGenerator  = !!(me.headers && me.headers[linesForLevel].cellGenerator);\n\n        if (hasGenerator) {\n            const cells = me.columnConfig[linesForLevel];\n\n            for (let i = 1, l = cells.length; i < l; i++) {\n                ticks.push({ date : cells[i].startDate });\n            }\n        }\n        else {\n            me.forEachInterval(linesForLevel, (start, end) => {\n                ticks.push({\n                    date    : getEnd ? end : start,\n                    // do not want to consider tick to be major tick, hence the check for majorHeaderLevel\n                    isMajor : majorLevel !== level && validMajor && me.isMajorTick(getEnd ? end : start)\n                });\n            });\n        }\n\n        return ticks;\n    }\n\n    get forceFit() {\n        return this._forceFit;\n    }\n\n    /**\n     * This function fits the time columns into the available space in the time axis column.\n     * @param {Boolean} suppressEvent `true` to skip firing the 'update' event.\n     * @internal\n     */\n    fitToAvailableSpace(suppressEvent) {\n        const proposedSize = Math.floor(this.availableSpace / this.timeAxis.visibleTickTimeSpan);\n        this.setTickSize(proposedSize, suppressEvent);\n    }\n\n    get snap() {\n        return this._snap;\n    }\n\n    /**\n     * Gets/sets the snap value for the model. Setting it will cause it to update its contents and fire the\n     * {@link #event-update} event.\n     * @property {Boolean}\n     * @internal\n     */\n    set snap(value) {\n        if (value !== this._snap) {\n            this._snap = value;\n            if (this.configured) {\n                this.update();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Headers\n\n    // private\n    createHeaderRow(position, headerRowConfig, headerCells) {\n        const\n            me                            = this,\n            cells                         = [],\n            { align, headerCellCls = '' } = headerRowConfig,\n            today                         = DH.clearTime(new Date()),\n            { timeAxis }                  = me,\n            tickLevel                     = me.headers.length - 1,\n            createCellContext             = (start, end, i, isLast, data) => {\n                let value = DH.format(start, headerRowConfig.dateFormat);\n\n                const\n                    // So that we can use shortcut tickSize as the tickLevel cell width.\n                    // We can do this if the TimeAxis is aligned to start and end on tick boundaries\n                    // or if it's not the first or last tick.\n                    // getDistanceBetweenDates is an expensive operation.\n                    isInteriorTick = i > 0 && !isLast,\n                    cellData       = {\n                        align,\n                        start,\n                        end,\n                        value : data ? data.header : value,\n                        headerCellCls,\n                        width : tickLevel === position && me.owner && (timeAxis.fullTicks || isInteriorTick) ? me.owner.tickSize : me.getDistanceBetweenDates(start, end),\n                        index : i\n                    };\n                if (cellData.width === 0) {\n                    return;\n                }\n\n                // Vertical mode uses absolute positioning for header cells\n                cellData.coord = size - 1;\n                size += cellData.width;\n\n                me.headersDatesCache[position][start.getTime()] = 1;\n\n                if (headerRowConfig.renderer) {\n                    value = headerRowConfig.renderer.call(headerRowConfig.thisObj || me, start, end, cellData, i);\n\n                    cellData.value = value == null ? '' : value;\n                }\n\n                // To be able to style individual day cells, weekends or other important days\n                if (headerRowConfig.unit === 'day' && (!headerRowConfig.increment || headerRowConfig.increment === 1)) {\n                    cellData.headerCellCls += ' b-sch-dayheadercell-' + start.getDay();\n\n                    if (DH.clearTime(start, true) - today === 0) {\n                        cellData.headerCellCls += ' b-sch-dayheadercell-today';\n                    }\n                }\n\n                cells.push(cellData);\n            };\n\n        let size = 0;\n\n        me.headersDatesCache[position] = {};\n\n        if (headerCells) {\n            headerCells.forEach((cellData, i) => createCellContext(cellData.start, cellData.end, i, i === headerCells.length - 1, cellData));\n        }\n        else {\n            me.forEachInterval(position, createCellContext);\n        }\n\n        return cells;\n    }\n\n    get mainHeader() {\n        return ('mainHeaderLevel' in this) ? this.headers[this.mainHeaderLevel] : this.bottomHeader;\n    }\n\n    get bottomHeader() {\n        return this.headers[this.headers.length - 1];\n    }\n\n    get lowestHeader() {\n        return this.headers.length - 1;\n    }\n\n    /**\n     * This method is meant to return the level of the header which 2nd lowest.\n     * It is used for {@link #function-isMajorTick} method\n     * @returns {String}\n     * @private\n     */\n    get majorHeaderLevel() {\n        const { headers } = this;\n\n        if (headers) {\n            return Math.max(headers.length - 2, 0);\n        }\n\n        return null;\n    }\n\n    //endregion\n\n    //region Ticks\n\n    /**\n     * For vertical view (and column lines plugin) we sometimes want to know if current tick starts along with the\n     * upper header level.\n     * @param {Date} date\n     * @returns {Boolean}\n     * @private\n     */\n    isMajorTick(date) {\n        const nextLevel = this.majorHeaderLevel;\n        // if forceFit is used headersDatesCache won´t have been generated yet on the first call here,\n        // since no size is set yet\n        return nextLevel != null && this.headersDatesCache[nextLevel] && this.headersDatesCache[nextLevel][date.getTime()] || false;\n    }\n\n    /**\n     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.\n     * Return false to break the iteration.\n     * @param {Number} position The index of the header in the headers array.\n     * @param {Function} iteratorFn The function to call, will be called with start date, end date and \"tick index\"\n     * @param {Object} [thisObj] `this` reference for the function\n     * @internal\n     */\n    forEachInterval(position, iteratorFn, thisObj = this) {\n        const { headers, timeAxis } = this;\n\n        if (headers) {\n            // This is the lowest header row, which should be fed the data in the tickStore (or a row above using same unit)\n            if (position === headers.length - 1) {\n                timeAxis.forEach((r, index) =>\n                    iteratorFn.call(thisObj, r.startDate, r.endDate, index, index === timeAxis.count - 1)\n                );\n            }\n            // All other rows\n            else {\n                const header = headers[position];\n\n                timeAxis.forEachAuxInterval(header.unit, header.increment, iteratorFn, thisObj);\n            }\n        }\n    }\n\n    /**\n     * Calls the supplied iterator function once per interval. The function will be called with three parameters, start date and end date and an index.\n     * Return false to break the iteration.\n     * @internal\n     * @param {Function} iteratorFn The function to call\n     * @param {Object} [thisObj] `this` reference for the function\n     */\n    forEachMainInterval(iteratorFn, thisObj) {\n        this.forEachInterval(this.mainHeaderLevel, iteratorFn, thisObj);\n    }\n\n    //endregion\n\n    //region ViewPreset\n\n    consumeViewPreset(preset) {\n        const me = this;\n\n        // clear the cached headers\n        me.headers = null;\n\n        me.getConfig('tickSize');\n\n        // Since we are bypassing the tickSize setter below, ensure that\n        // the config initial setter has been removed by referencing the property.\n        // We only do this to avoid multiple updates from this.\n        // <remove-on-release>\n        // TODO: Fix this issue, and do not bypass setters.\n        // </remove-on-release>\n        me.viewPreset = preset;\n\n        Object.assign(me, {\n            headers         : preset.headers,\n            columnLinesFor  : preset.columnLinesFor,\n            mainHeaderLevel : preset.mainHeaderLevel,\n            _tickSize       : me.isHorizontal ? preset.tickWidth : preset.tickHeight\n        });\n\n        me.originalTickSize = me.tickSize;\n    }\n\n    //endregion\n}\n", "import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n\n// Used to avoid having to create huge amounts of Date objects\nconst tempDate = new Date();\n\n/**\n * @module Scheduler/view/mixin/TimelineDateMapper\n */\n\n/**\n * Mixin that contains functionality to convert between coordinates and dates etc.\n *\n * @mixin\n */\nexport default Target => class TimelineDateMapper extends (Target || Base) {\n    static $name = 'TimelineDateMapper';\n\n    static configurable = {\n        /**\n         * Set to `true` to snap to the current time resolution increment while interacting with scheduled events.\n         *\n         * The time resolution increment is either determined by the currently applied view preset, or it can be\n         * overridden using {@link #property-timeResolution}.\n         *\n         * <div class=\"note\">When the {@link Scheduler/view/mixin/TimelineEventRendering#config-fillTicks} option is\n         * enabled, snapping will align to full ticks, regardless of the time resolution.</div>\n         *\n         * @prp {Boolean}\n         * @default\n         * @category Scheduled events\n         */\n        snap : false\n    };\n\n    //region Coordinate <-> Date\n\n    getRtlX(x) {\n        if (this.rtl && this.isHorizontal) {\n            x = this.timeAxisViewModel.totalSize - x;\n        }\n        return x;\n    }\n\n    /**\n     * Gets the date for an X or Y coordinate, either local to the view element or the page based on the 3rd argument.\n     * If the coordinate is not in the currently rendered view, null will be returned unless the `allowOutOfRange`\n     * parameter is passed a `true`.\n     * @param {Number} coordinate The X or Y coordinate\n     * @param {'floor'|'round'|'ceil'} [roundingMethod] Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @param {Boolean} [local] true if the coordinate is local to the scheduler view element\n     * @param {Boolean} [allowOutOfRange] By default, this returns `null` if the position is outside\n     * of the time axis. Pass `true` to attempt to calculate a date outside of the time axis.\n     * @returns {Date} The Date corresponding to the X or Y coordinate\n     * @category Dates\n     */\n    getDateFromCoordinate(coordinate, roundingMethod, local = true, allowOutOfRange = false, ignoreRTL = false) {\n        if (!local) {\n            coordinate = this.currentOrientation.translateToScheduleCoordinate(coordinate);\n        }\n\n        // Time axis is flipped for RTL\n        if (!ignoreRTL) {\n            coordinate = this.getRtlX(coordinate);\n        }\n\n        return this.timeAxisViewModel.getDateFromPosition(coordinate, roundingMethod, allowOutOfRange);\n    }\n\n    getDateFromCoord(options) {\n        return this.getDateFromCoordinate(options.coord, options.roundingMethod, options.local, options.allowOutOfRange, options.ignoreRTL);\n    }\n\n    /**\n     * Gets the date for an XY coordinate regardless of the orientation of the time axis.\n     * @param {Array} xy The page X and Y coordinates\n     * @param {'floor'|'round'|'ceil'} [roundingMethod] Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @param {Boolean} [local] true if the coordinate is local to the scheduler element\n     * @param {Boolean} [allowOutOfRange] By default, this returns `null` if the position is outside\n     * of the time axis. Pass `true` to attempt to calculate a date outside of the time axis.\n     * @returns {Date} the Date corresponding to the xy coordinate\n     * @category Dates\n     */\n    getDateFromXY(xy, roundingMethod, local = true, allowOutOfRange = false) {\n        return this.currentOrientation.getDateFromXY(xy, roundingMethod, local, allowOutOfRange);\n    }\n\n    /**\n     * Gets the time for a DOM event such as 'mousemove' or 'click' regardless of the orientation of the time axis.\n     * @param {Event} e the Event instance\n     * @param {'floor'|'round'|'ceil'} [roundingMethod] Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @param {Boolean} [allowOutOfRange] By default, this returns `null` if the position is outside\n     * of the time axis. Pass `true` to attempt to calculate a date outside of the time axis.\n     * @returns {Date} The date corresponding to the EventObject's position along the orientation of the time axis.\n     * @category Dates\n     */\n    getDateFromDomEvent(e, roundingMethod, allowOutOfRange = false) {\n        return this.getDateFromXY([e.pageX, e.pageY], roundingMethod, false, allowOutOfRange);\n    }\n\n    /**\n     * Gets the start and end dates for an element Region\n     * @param {Core.helper.util.Rectangle} rect The rectangle to map to start and end dates\n     * @param {'floor'|'round'|'ceil'} roundingMethod Rounding method to use. 'floor' to take the tick (lowest header\n     * in a time axis) start date, 'round' to round the value to nearest increment or 'ceil' to take the tick end date\n     * @param {Number} duration The duration in MS of the underlying event\n     * @returns {Object} an object containing start/end properties\n     */\n    getStartEndDatesFromRectangle(rect, roundingMethod, duration, allowOutOfRange = false) {\n        const\n            me               = this,\n            { isHorizontal } = me,\n            startPos         = isHorizontal ? rect.x : rect.top,\n            endPos           = isHorizontal ? rect.right : rect.bottom;\n\n        let start, end;\n\n        // Element within bounds\n        if (startPos >= 0 && endPos < me.timeAxisViewModel.totalSize) {\n            start = me.getDateFromCoordinate(startPos, roundingMethod, true);\n            end = me.getDateFromCoordinate(endPos, roundingMethod, true);\n        }\n        // Starts before, start is worked backwards from end\n        else if (startPos < 0) {\n            end = me.getDateFromCoordinate(endPos, roundingMethod, true, allowOutOfRange);\n            start = end && DateHelper.add(end, -duration, 'ms');\n        }\n        // Ends after, end is calculated from the start\n        else {\n            start = me.getDateFromCoordinate(startPos, roundingMethod, true, allowOutOfRange);\n            end = start && DateHelper.add(start, duration, 'ms');\n        }\n\n        return {\n            start, end\n        };\n    }\n\n    //endregion\n\n    //region Date display\n\n    /**\n     * Method to get a displayed end date value, see {@link #function-getFormattedEndDate} for more info.\n     * @private\n     * @param {Date} endDate The date to format\n     * @param {Date} startDate The start date\n     * @returns {Date} The date value to display\n     */\n    getDisplayEndDate(endDate, startDate) {\n        if (\n            // If time is midnight,\n            endDate.getHours() === 0 && endDate.getMinutes() === 0 &&\n\n            // and end date is greater then start date\n            (!startDate || !(endDate.getYear() === startDate.getYear() && endDate.getMonth() === startDate.getMonth() && endDate.getDate() === startDate.getDate())) &&\n\n            // and UI display format doesn't contain hour info (in this case we'll just display the exact date)\n            !DateHelper.formatContainsHourInfo(this.displayDateFormat)\n        ) {\n            // format the date inclusively as 'the whole previous day'.\n            endDate = DateHelper.add(endDate, -1, 'day');\n        }\n\n        return endDate;\n    }\n\n    /**\n     * Method to get a formatted end date for a scheduled event, the grid uses the \"displayDateFormat\" property defined in the current view preset.\n     * End dates are formatted as 'inclusive', meaning when an end date falls on midnight and the date format doesn't involve any hour/minute information,\n     * 1ms will be subtracted (e.g. 2010-01-08T00:00:00 will first be modified to 2010-01-07 before being formatted).\n     * @private\n     * @param {Date} endDate The date to format\n     * @param {Date} startDate The start date\n     * @returns {String} The formatted date\n     */\n    getFormattedEndDate(endDate, startDate) {\n        return this.getFormattedDate(this.getDisplayEndDate(endDate, startDate));\n    }\n\n    //endregion\n\n    //region Other date functions\n\n    /**\n     * Gets the x or y coordinate relative to the scheduler element, or page coordinate (based on the 'local' flag)\n     * If the coordinate is not in the currently rendered view, -1 will be returned.\n     * @param {Date|Number} date the date to query for (or a date as ms)\n     * @param {Boolean|Object} options true to return a coordinate local to the scheduler view element (defaults to true),\n     * also accepts a config object like { local : true }.\n     * @returns {Number} the x or y position representing the date on the time axis\n     * @category Dates\n     */\n    getCoordinateFromDate(date, options = true) {\n        const\n            me                    = this,\n            { timeAxisViewModel } = me,\n            {\n                isContinuous,\n                startMS,\n                endMS,\n                startDate,\n                endDate,\n                unit\n            }                     = me.timeAxis,\n            dateMS                = date.valueOf();\n\n        // Avoiding to break the API while allowing passing options through to getPositionFromDate()\n        if (options === true) {\n            options = {\n                local : true\n            };\n        }\n        else if (!options) {\n            options = {\n                local : false\n            };\n        }\n        else if (!('local' in options)) {\n            options.local = true;\n        }\n\n        let pos;\n\n        // <remove-on-release>\n        // TODO: for 6.0 try to normalize and just use dates as input for this method,\n        //  then this if-statement would not be needed\n        // </remove-on-release>\n        if (!(date instanceof Date)) {\n            tempDate.setTime(date);\n            date = tempDate;\n        }\n\n        // Shortcut for continuous time axis that is using a unit that can be reliably translated to days (or smaller)\n        if (isContinuous &&\n            date.getTimezoneOffset() === startDate.getTimezoneOffset() &&\n            startDate.getTimezoneOffset() === endDate.getTimezoneOffset() &&\n            DateHelper.getUnitToBaseUnitRatio(unit, 'day') !== -1\n        ) {\n            if (dateMS < startMS || dateMS > endMS) {\n                return -1;\n            }\n            pos = (dateMS - startMS) / (endMS - startMS) * timeAxisViewModel.totalSize;\n        }\n        // Non-continuous or using for example months (vary in length)\n        else {\n            pos = timeAxisViewModel.getPositionFromDate(date, options);\n        }\n\n        // RTL coords from the end of the time axis\n        if (me.rtl && me.isHorizontal && !options?.ignoreRTL) {\n            pos = timeAxisViewModel.totalSize - pos;\n        }\n\n        if (!options.local) {\n            pos = me.currentOrientation.translateToPageCoordinate(pos);\n        }\n\n        return pos;\n    }\n\n    /**\n     * Returns the distance in pixels for the time span in the view.\n     * @param {Date} startDate The start date of the span\n     * @param {Date} endDate The end date of the span\n     * @returns {Number} The distance in pixels\n     * @category Dates\n     */\n    getTimeSpanDistance(startDate, endDate) {\n        return this.timeAxisViewModel.getDistanceBetweenDates(startDate, endDate);\n    }\n\n    /**\n     * Returns the center date of the currently visible timespan of scheduler.\n     *\n     * @property {Date}\n     * @readonly\n     * @category Dates\n     */\n    get viewportCenterDate() {\n        const { timeAxis, timelineScroller } = this;\n\n        // Take the easy way if the axis is continuous.\n        // We can just work out how far along the time axis the viewport center is.\n        if (timeAxis.isContinuous) {\n            // The offset from the start of the whole time axis\n            const timeAxisOffset = (timelineScroller.position + timelineScroller.clientSize / 2) / timelineScroller.scrollSize;\n\n            return new Date(timeAxis.startMS + (timeAxis.endMS - timeAxis.startMS) * timeAxisOffset);\n        }\n        return this.getDateFromCoordinate(timelineScroller.position + timelineScroller.clientSize / 2);\n    }\n\n    get viewportCenterDateCached() {\n        return this.cachedCenterDate || (this.cachedCenterDate = this.viewportCenterDate);\n    }\n\n    //endregion\n\n    //region TimeAxis getters/setters\n\n    /**\n     * Gets/sets the current time resolution object, which contains a unit identifier and an increment count\n     * `{ unit, increment }`. This value means minimal task duration you can create using UI.\n     *\n     * For example when you drag create a task or drag & drop a task, if increment is 5 and unit is 'minute'\n     * that means that you can create tasks in 5 minute increments, or move it in 5 minute steps.\n     *\n     * This value is taken from viewPreset {@link Scheduler.preset.ViewPreset#field-timeResolution timeResolution}\n     * config by default. When supplying a `Number` to the setter only the `increment` is changed and the `unit` value\n     * remains untouched.\n     *\n     * ```javascript\n     * timeResolution : {\n     *   unit      : 'minute',  //Valid values are \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\".\n     *   increment : 5\n     * }\n     * ```\n     *\n     * <div class=\"note\">When the {@link Scheduler/view/mixin/TimelineEventRendering#config-fillTicks} option is\n     * enabled, the resolution will be in full ticks regardless of configured value.</div>\n     *\n     * @property {Object|Number}\n     * @category Dates\n     */\n    get timeResolution() {\n        return this.timeAxis.resolution;\n    }\n\n    set timeResolution(resolution) {\n        this.timeAxis.resolution = (typeof resolution === 'number') ? {\n            increment : resolution,\n            unit      : this.timeAxis.resolution.unit\n        } : resolution;\n    }\n\n    //endregion\n\n    //region Snap\n\n    get snap() {\n        return this._timeAxisViewModel?.snap ?? this._snap;\n    }\n\n    updateSnap(snap) {\n        if (!this.isConfiguring) {\n            this.timeAxisViewModel.snap = snap;\n            this.timeAxis.forceFullTicks = snap && this.fillTicks;\n        }\n    }\n\n    //endregion\n\n    onSchedulerHorizontalScroll({ subGrid, scrollLeft, scrollX }) {\n        // Invalidate cached center date unless we are scrolling to center on it.\n        if (!this.scrollingToCenter) {\n            this.cachedCenterDate = null;\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport DomDataStore from '../../../Core/data/DomDataStore.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineDomEvents\n */\n\nconst { eventNameMap } = EventHelper;\n\n/**\n * An object which encapsulates a schedule timeline tick context based on a DOM event. This will include\n * the row and resource information and the tick and time information for a DOM pointer event detected\n * in the timeline.\n * @typedef {Object} TimelineContext\n * @property {Event} domEvent The DOM event which triggered the context change.\n * @property {HTMLElement} eventElement If the `domEvent` was on an event bar, this will be the event bar element.\n * @property {HTMLElement} cellElement The cell element under the `domEvent`\n * @property {Date} date The date corresponding to the `domEvent` position in the timeline\n * @property {Scheduler.model.TimeSpan} tick A {@link Scheduler.model.TimeSpan} record which encapsulates the contextual tick\n * @property {Number} tickIndex The contextual tick index. This may be fractional.\n * @property {Number} tickParentIndex The integer contextual tick index.\n * @property {Date} tickStartDate The start date of the contextual tick.\n * @property {Date} tickEndDate The end date of the contextual tick.\n * @property {Grid.row.Row} row The contextual {@link Grid.row.Row}\n * @property {Number} index The contextual row index\n * @property {Scheduler.model.EventModel} [eventRecord] The contextual event record (if any) if the event source is a `Scheduler`\n * @property {Scheduler.model.AssignmentModel} [assignmentRecord] The contextual assignment record (if any) if the event source is a `Scheduler`\n * @property {Scheduler.model.ResourceModel} [resourceRecord] The contextual resource record(if any)  if the event source is a `Scheduler`\n */\n\n/**\n * Mixin that handles dom events (click etc) for scheduler and rendered events.\n *\n * @mixin\n */\nexport default Target => class TimelineDomEvents extends (Target || Base) {\n    /**\n     * Fires after a click on a time axis cell\n     * @event timeAxisHeaderClick\n     * @param {Scheduler.column.TimeAxisColumn|Scheduler.column.VerticalTimeAxisColumn} source The column object\n     * @param {Date} startDate The start date of the header cell\n     * @param {Date} endDate The end date of the header cell\n     * @param {Event} event The event object\n     */\n\n    /**\n     * Fires after a double click on a time axis cell\n     * @event timeAxisHeaderDblClick\n     * @param {Scheduler.column.TimeAxisColumn|Scheduler.column.VerticalTimeAxisColumn} source The column object\n     * @param {Date} startDate The start date of the header cell\n     * @param {Date} endDate The end date of the header cell\n     * @param {Event} event The event object\n     */\n\n    /**\n     * Fires after a right click on a time axis cell\n     * @event timeAxisHeaderContextMenu\n     * @param {Scheduler.column.TimeAxisColumn|Scheduler.column.VerticalTimeAxisColumn} source The column object\n     * @param {Date} startDate The start date of the header cell\n     * @param {Date} endDate The end date of the header cell\n     * @param {Event} event The event object\n     */\n\n    static $name = 'TimelineDomEvents';\n\n    //region Default config\n\n    static configurable = {\n        /**\n         * The currently hovered timeline context. This is updated as the mouse or pointer moves over the timeline.\n         * @member {TimelineContext} timelineContext\n         * @readonly\n         * @category Dates\n         */\n        timelineContext : {\n            $config : {\n                // Reject non-changes so that when set from scheduleMouseMove and EventMouseMove,\n                // we only update the context and fire events when it changes.\n                equal(c1, c2) {\n                    // index is the resource index, tickParentIndex is the\n                    // tick's index in the TimeAxis.\n                    return c1?.index === c2?.index &&\n                        c1?.tickParentIndex === c2?.tickParentIndex &&\n                        !((c1?.tickStartDate || 0) - (c2?.tickStartDate || 0));\n                }\n            }\n        },\n\n        /**\n         * By default, scrolling the schedule will update the {@link #property-timelineContext} to reflect the new\n         * currently hovered context. When displaying a large number of events on screen at the same time, this will\n         * have a slight impact on scrolling performance. In such scenarios, opt out of this behavior by setting\n         * this config to `false`.\n         * @default\n         * @prp {Boolean}\n         * @category Misc\n         */\n        updateTimelineContextOnScroll : true,\n\n        /**\n         * Set to `true` to ignore reacting to DOM events (mouseover/mouseout etc) while scrolling. Useful if you\n         * want to maximize scroll performance.\n         * @config {Boolean}\n         * @default false\n         */\n        ignoreDomEventsWhileScrolling : null\n    };\n\n    static properties = {\n        schedulerEvents : {\n            pointermove : 'handleScheduleEvent',\n            mouseover   : 'handleScheduleEvent',\n            mousedown   : 'handleScheduleEvent',\n            mouseup     : 'handleScheduleEvent',\n            click       : 'handleScheduleEvent',\n            dblclick    : 'handleScheduleEvent',\n            contextmenu : 'handleScheduleEvent',\n            mousemove   : 'handleScheduleEvent',\n            mouseout    : 'handleScheduleEvent'\n        }\n    };\n\n    static delayable = {\n        // Allow the scroll event to complete in its thread, and dispatch the mousemove event next AF\n        onScheduleScroll : 'raf'\n    };\n\n    // Currently hovered events (can be parent + child)\n    hoveredEvents = new Set();\n\n    //endregion\n\n    //region Init\n\n    /**\n     * Adds listeners for DOM events for the scheduler and its events.\n     * Which events is specified in Scheduler#schedulerEvents.\n     * @private\n     */\n    initDomEvents() {\n        const\n            me = this,\n            { schedulerEvents }  = me;\n\n        // Set thisObj and element of the configured listener specs.\n        schedulerEvents.element = me.timeAxisSubGridElement;\n        schedulerEvents.thisObj = me;\n        EventHelper.on(schedulerEvents);\n        EventHelper.on({\n            element    : me.timeAxisSubGridElement,\n            mouseleave : 'handleScheduleLeaveEvent',\n            capture    : true,\n            thisObj    : me\n        });\n\n        // This is to handle scroll events while the mouse is over the schedule.\n        // For example magic mouse or touchpad scrolls, or scrolls caused by keyboard\n        // navigation while the mouse happens to be over the schedule.\n        // The context must update. We must consider any scroll because the document\n        // or some other wrapping element could be scrolling the Scheduler under the mouse.\n        if (me.updateTimelineContextOnScroll && BrowserHelper.supportsPointerEventConstructor) {\n            EventHelper.on({\n                element : document,\n                scroll  : 'onScheduleScroll',\n                capture : true,\n                thisObj : me\n            });\n        }\n    };\n\n    //endregion\n\n    //region Event handling\n    getTimeSpanMouseEventParams(eventElement, event) {\n        throw new Error('Implement in subclass');\n    }\n\n    getScheduleMouseEventParams(cellData, event) {\n        throw new Error('Implement in subclass');\n    }\n\n    /**\n     * Wraps dom Events for the scheduler and event bars and fires as our events.\n     * For example click -> scheduleClick or eventClick\n     * @private\n     * @param event\n     */\n    handleScheduleEvent(event) {\n        const me = this;\n\n        if (me.ignoreDomEventsWhileScrolling && (me.scrolling || me.timeAxisSubGrid.scrolling)) {\n            return;\n        }\n\n        const timelineContext = me.getTimelineEventContext(event);\n\n        // Cache the last pointer event so that  when scrolling below the mouse\n        // we can inject mousemove events at that point.\n        me.lastPointerEvent = event;\n\n        // We are over the schedule region\n        if (timelineContext) {\n            // Only fire a scheduleXXXX event if we are *not* over an event.\n            // If over an event fire (event|task)XXXX.\n            me.trigger(`${timelineContext.eventElement ? me.scheduledEventName : 'schedule'}${eventNameMap[event.type] || StringHelper.capitalize(event.type)}`, timelineContext);\n        }\n\n        // If the context has changed, updateTimelineContext will fire events\n        me.timelineContext = timelineContext;\n    }\n\n    handleScheduleLeaveEvent(event) {\n        if (event.target === this.timeAxisSubGridElement) {\n            this.handleScheduleEvent(event);\n        }\n    }\n\n    /**\n     * This handles the scheduler being scrolled below the mouse by trackpad or keyboard events.\n     * The context, if present needs to be recalculated.\n     * @private\n     */\n    onScheduleScroll({ target }) {\n        const me = this;\n        // If the latest mouse event resulted in setting a context, we need to reproduce that event at the same clientX,\n        // clientY in order to keep the context up to date while scrolling.\n        // If the scroll is because of a pan feature drag (on us or a partner), we must not do this.\n        // Target might be removed in salesforce by Locker Service if scroll event occurs on body\n        if (\n            target && me.updateTimelineContextOnScroll && !me.features.pan?.isActive &&\n            !me.partners.some(p => p.features.pan?.isActive) &&\n            (target.contains(me.element) || me.bodyElement.contains(target))\n        ) {\n            const { timelineContext, lastPointerEvent } = me;\n\n            if (timelineContext) {\n                const\n                    targetElement = DomHelper.elementFromPoint(timelineContext.domEvent.clientX, timelineContext.domEvent.clientY),\n                    pointerEvent  = new BrowserHelper.PointerEventConstructor('pointermove', lastPointerEvent),\n                    mouseEvent    = new MouseEvent('mousemove', lastPointerEvent);\n\n                // See https://github.com/bryntum/support/issues/6274\n                // The pointerId does not propagate correctly on the synthetic PointerEvent, but also is readonly, so\n                // redefine the property. This is required by Ext JS gesture publisher which tracks pointer movements\n                // while a pointer is down. Without the correct pointerId, Ext JS would see this move as a \"missed\"\n                // pointerdown and forever await its pointerup (i.e., it would get stuck in the activeTouches). This\n                // would cause all future events to be perceived as part of or the end of a drag and would never again\n                // dispatch pointer events correctly. Finally, lastPointerEvent.pointerId is often incorrect (undefined\n                // in fact), so check the most recent pointerdown/touchstart event and default to 1\n                Object.defineProperty(pointerEvent, 'pointerId', {\n                    value : GlobalEvents.currentPointerDown?.pointerId ?? GlobalEvents.currentTouch?.identifier ?? 1\n                });\n\n                // Drag code should ignore these synthetic events\n                pointerEvent.scrollInitiated = mouseEvent.scrollInitiated = true;\n\n                // Emulate the correct browser sequence for mouse move events\n                targetElement?.dispatchEvent(pointerEvent);\n                targetElement?.dispatchEvent(mouseEvent);\n            }\n        }\n    }\n\n    updateTimelineContext(context, oldContext) {\n        /**\n         * Fired when the pointer-activated {@link #property-timelineContext} has changed.\n         * @event timelineContextChange\n         * @param {TimelineContext} oldContext The tick/resource context being deactivated.\n         * @param {TimelineContext} context The tick/resource context being activated.\n         */\n        this.trigger('timelineContextChange', { oldContext, context });\n\n        if (context && !oldContext) {\n            this.trigger('scheduleMouseEnter', context);\n        }\n        else if (!context) {\n            this.trigger('scheduleMouseLeave', { event : oldContext.event });\n        }\n    }\n\n    /**\n     * Gathers contextual information about the schedule contextual position of the passed event.\n     *\n     * Used by schedule mouse event handlers, but also by the scheduleContext feature.\n     * @param {Event} domEvent The DOM event to gather context for.\n     * @returns {TimelineContext} the schedule DOM event context\n     * @internal\n     */\n    getTimelineEventContext(domEvent) {\n        const\n            me           = this,\n            eventElement = domEvent.target.closest(me.eventInnerSelector),\n            cellElement  = me.getCellElementFromDomEvent(domEvent);\n\n        if (cellElement) {\n            const date = me.getDateFromDomEvent(domEvent, 'floor');\n\n            if (!date) {\n                return;\n            }\n\n            const\n                cellData    = DomDataStore.get(cellElement),\n                mouseParams = eventElement ? me.getTimeSpanMouseEventParams(eventElement, domEvent) : me.getScheduleMouseEventParams(cellData, domEvent);\n\n            if (!mouseParams) {\n                return;\n            }\n\n            const\n                index     = me.isVertical ? me.resourceStore.indexOf(mouseParams.resourceRecord) : cellData.row.dataIndex,\n                tickIndex = me.timeAxis.getTickFromDate(date),\n                tick      = me.timeAxis.getAt(Math.floor(tickIndex));\n\n            if (tick) {\n                return {\n                    isTimelineContext : true,\n                    domEvent,\n                    eventElement,\n                    cellElement,\n                    index,\n                    tick,\n                    tickIndex,\n                    date,\n                    tickStartDate     : tick.startDate,\n                    tickEndDate       : tick.endDate,\n                    tickParentIndex   : tick.parentIndex,\n                    row               : cellData.row,\n                    event             : domEvent,\n                    ...mouseParams\n                };\n            }\n        }\n    }\n\n    getCellElementFromDomEvent({ target, clientY, type }) {\n        const\n            me           = this,\n            {\n                isVertical,\n                foregroundCanvas\n            }            = me,\n            eventElement = target.closest(me.eventSelector);\n\n        // If event was on an event bar, calculate the cell.\n        if (eventElement) {\n            return me.getCell({\n                [isVertical ? 'row' : 'record'] : isVertical ? 0 : me.resolveRowRecord(eventElement),\n                column                          : me.timeAxisColumn\n            });\n        }\n        // If event was triggered by an element in the foreground canvas, but not an event element\n        // we need to ascertain the cell \"behind\" that element to be able to create the context.\n        else if (foregroundCanvas.contains(target)) {\n            // Only trigger a Scheduler event if the event was on the background itself.\n            // Otherwise, we will trigger unexpected events on things like dependency lines which historically\n            // have never triggered scheduleXXXX events. The exception to this is the mousemove event which\n            // needs to always fire so that timelineContext and scheduleTooltip correctly track the mouse\n            if (target === foregroundCanvas || type === 'mousemove') {\n                return me.rowManager.getRowAt(clientY, false)?.getCell(me.timeAxisColumn.id);\n            }\n        }\n        else {\n            // Event was inside a row, or on a row border.\n            return target.matches('.b-grid-row') ? target.firstElementChild : target.closest(me.timeCellSelector);\n        }\n    }\n\n    // Overridden by ResourceTimeRanges to \"pass events through\" to the schedule\n    matchScheduleCell(element) {\n        return element.closest(this.timeCellSelector);\n    }\n\n    onElementMouseButtonEvent(event) {\n        const targetCell = event.target.closest('.b-sch-header-timeaxis-cell');\n        if (targetCell) {\n            const\n                me           = this,\n                position     = targetCell.parentElement.dataset.headerPosition,\n                headerCells  = me.timeAxisViewModel.columnConfig[position],\n                index        = me.timeAxis.isFiltered ? headerCells.findIndex(cell => cell.index == targetCell.dataset.tickIndex) : targetCell.dataset.tickIndex,\n                cellConfig   = headerCells[index],\n                contextMenu  = me.features.contextMenu;\n\n            // Skip same events with Grid context menu triggerEvent\n            if (!contextMenu || event.type !== contextMenu.triggerEvent) {\n                this.trigger(`timeAxisHeader${StringHelper.capitalize(event.type)}`, {\n                    startDate : cellConfig.start,\n                    endDate   : cellConfig.end,\n                    event\n                });\n            }\n        }\n    }\n\n    onElementMouseDown(event) {\n        this.onElementMouseButtonEvent(event);\n        super.onElementMouseDown(event);\n    }\n\n    onElementClick(event) {\n        this.onElementMouseButtonEvent(event);\n        super.onElementClick(event);\n    }\n\n    onElementDblClick(event) {\n        this.onElementMouseButtonEvent(event);\n        super.onElementDblClick(event);\n    }\n\n    onElementContextMenu(event) {\n        this.onElementMouseButtonEvent(event);\n        super.onElementContextMenu(event);\n    }\n\n    /**\n     * Relays mouseover events as eventmouseenter if over rendered event.\n     * Also adds Scheduler#overScheduledEventClass to the hovered element.\n     * @private\n     */\n    onElementMouseOver(event) {\n        const\n            me                = this;\n\n        if (me.ignoreDomEventsWhileScrolling && (me.scrolling || me.timeAxisSubGrid.scrolling)) {\n            return;\n        }\n\n        super.onElementMouseOver(event);\n\n        const\n            { target }        = event,\n            { hoveredEvents } = me;\n\n        // We must be over the event bar\n        if (target.closest(me.eventInnerSelector) && !me.features.eventDrag?.isDragging) {\n            const eventElement = target.closest(me.eventSelector);\n\n            if (!hoveredEvents.has(eventElement) && !me.preventOverCls) {\n                hoveredEvents.add(eventElement);\n                eventElement.classList.add(me.overScheduledEventClass);\n\n                const params = me.getTimeSpanMouseEventParams(eventElement, event);\n                if (params) {\n                    // do not fire this event if model cannot be found\n                    // this can be the case for \"b-sch-dragcreator-proxy\" elements for example\n                    me.trigger(`${me.scheduledEventName}MouseEnter`, params);\n                }\n            }\n        }\n        else if (hoveredEvents.size) {\n            me.unhoverAll(event);\n        }\n    }\n\n    /**\n     * Relays mouseout events as eventmouseleave if out from rendered event.\n     * Also removes Scheduler#overScheduledEventClass from the hovered element.\n     * @private\n     */\n    onElementMouseOut(event) {\n        super.onElementMouseOut(event);\n\n        const\n            me                        = this,\n            { target, relatedTarget } = event,\n            eventInner                = target.closest(me.eventInnerSelector),\n            eventWrap                 = target.closest(me.eventSelector),\n            timeSpanRecord            = me.resolveTimeSpanRecord(target);\n\n        // We must be over the event bar\n        // <remove-on-release>\n        // TODO: this isDragging check should be done in the feature (all drag/resize features actually) and here we should have a hook call\n        // </remove-on-release>\n        if (eventInner && timeSpanRecord && me.hoveredEvents.has(eventWrap) && !me.features.eventDrag?.isDragging) {\n            // out to child shouldn't count...\n            if (relatedTarget && DomHelper.isDescendant(eventInner, relatedTarget)) {\n                return;\n            }\n\n            me.unhover(eventWrap, event);\n        }\n    }\n\n    unhover(element, event) {\n        const me = this;\n\n        element.classList.remove(me.overScheduledEventClass);\n        me.trigger(`${me.scheduledEventName}MouseLeave`, me.getTimeSpanMouseEventParams(element, event));\n        me.hoveredEvents.delete(element);\n    }\n\n    unhoverAll(event) {\n        for (const element of this.hoveredEvents) {\n            !element.isReleased && !element.classList.contains('b-released') && this.unhover(element, event);\n        }\n\n        // Might not be empty because of conditional unhover above\n        this.hoveredEvents.clear();\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport PresetManager from '../../preset/PresetManager.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport PresetStore from '../../preset/PresetStore.js';\nimport DateHelper, { unitMagnitudes } from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineViewPresets\n */\n\nconst\n    datesDiffer = (d1 = 0, d2 = 0) => d2 - d1;\n\n/**\n * View preset handling.\n *\n * A Scheduler's {@link #config-presets} are loaded with a default set of {@link Scheduler.preset.ViewPreset ViewPresets}\n * which are defined by the system in the {@link Scheduler.preset.PresetManager PresetManager}.\n *\n * The zooming feature works by reconfiguring the Scheduler with a new {@link Scheduler.preset.ViewPreset ViewPreset} selected\n * from the {@link #config-presets} store.\n *\n * {@link Scheduler.preset.ViewPreset ViewPresets} can be added and removed from the store to change the amount of available steps.\n * Range of zooming in/out can be also modified with {@link Scheduler.view.mixin.TimelineZoomable#config-maxZoomLevel} / {@link Scheduler.view.mixin.TimelineZoomable#config-minZoomLevel} properties.\n *\n * This mixin adds additional methods to the column : {@link Scheduler.view.mixin.TimelineZoomable#property-maxZoomLevel}, {@link Scheduler.view.mixin.TimelineZoomable#property-minZoomLevel}, {@link Scheduler.view.mixin.TimelineZoomable#function-zoomToLevel}, {@link Scheduler.view.mixin.TimelineZoomable#function-zoomIn},\n * {@link Scheduler.view.mixin.TimelineZoomable#function-zoomOut}, {@link Scheduler.view.mixin.TimelineZoomable#function-zoomInFull}, {@link Scheduler.view.mixin.TimelineZoomable#function-zoomOutFull}.\n *\n * **Notice**: Zooming is not supported when `forceFit` option is set to true for the Scheduler or for filtered timeaxis.\n *\n * @mixin\n */\nexport default Target => class TimelineViewPresets extends (Target || Base) {\n    static get $name() {\n        return 'TimelineViewPresets';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * A string key used to lookup a predefined {@link Scheduler.preset.ViewPreset} (e.g. 'weekAndDay', 'hourAndDay'),\n             * managed by {@link Scheduler.preset.PresetManager}. See {@link Scheduler.preset.PresetManager} for more information.\n             * Or a config object for a viewPreset.\n             *\n             * Options:\n             * - 'secondAndMinute'\n             * - 'minuteAndHour'\n             * - 'hourAndDay'\n             * - 'dayAndWeek'\n             * - 'dayAndMonth'\n             * - 'weekAndDay'\n             * - 'weekAndMonth',\n             * - 'monthAndYear'\n             * - 'year'\n             * - 'manyYears'\n             * - 'weekAndDayLetter'\n             * - 'weekDateAndMonth'\n             * - 'day'\n             * - 'week'\n             *\n             * If passed as a config object, the settings from the viewPreset with the provided `base` property will be used along\n             * with any overridden values in your object.\n             *\n             * To override:\n             * ```javascript\n             * viewPreset : {\n             *   base    : 'hourAndDay',\n             *   id      : 'myHourAndDayPreset',\n             *   headers : [\n             *       {\n             *           unit      : \"hour\",\n             *           increment : 12,\n             *           renderer  : (startDate, endDate, headerConfig, cellIdx) => {\n             *               return \"\";\n             *           }\n             *       }\n             *   ]\n             * }\n             * ```\n             * or set a new valid preset config if the preset is not registered in the {@link Scheduler.preset.PresetManager}.\n             *\n             * When you use scheduler in weekview mode, this config is used to pick view preset. If passed view preset is not\n             * supported by weekview (only 2 supported by default - 'day' and 'week') default preset will be used - 'week'.\n             * @config {String|ViewPresetConfig}\n             * @default\n             * @category Common\n             */\n            viewPreset : 'weekAndDayLetter',\n\n            /**\n             * Get the {@link Scheduler.preset.PresetStore} created for the Scheduler,\n             * or set an array of {@link Scheduler.preset.ViewPreset} config objects.\n             * @member {Scheduler.preset.PresetStore|ViewPresetConfig[]} presets\n             * @category Common\n             */\n            /**\n             * An array of {@link Scheduler.preset.ViewPreset} config objects\n             * which describes the available timeline layouts for this scheduler.\n             *\n             * By default, a predefined set is loaded from the {@link Scheduler.preset.PresetManager}.\n             *\n             * A {@link Scheduler.preset.ViewPreset} describes the granularity of the\n             * timeline view and the layout and subdivisions of the timeline header.\n             * @config {ViewPresetConfig[]} presets\n             *\n             * @category Common\n             */\n            presets : true,\n\n            /**\n             * Defines how dates will be formatted in tooltips etc. This config has priority over similar config on the\n             * view preset. For allowed values see {@link Core.helper.DateHelper#function-format-static}.\n             *\n             * By default, this is ingested from {@link Scheduler.preset.ViewPreset} upon change of\n             * {@link Scheduler.preset.ViewPreset} (Such as when zooming in or out). But Setting this\n             * to your own value, overrides that behaviour.\n             * @prp {String}\n             * @category Scheduled events\n             */\n            displayDateFormat : null\n        };\n    }\n\n    //endregion\n\n    /**\n     * Get/set the current view preset\n     * @member {Scheduler.preset.ViewPreset|ViewPresetConfig|String} viewPreset\n     * @param [viewPreset.options]\n     * @param {Date} [viewPreset.options.startDate] A new start date for the time axis\n     * @param {Date} [viewPreset.options.endDate] A new end date for the time axis\n     * @param {Date} [viewPreset.options.centerDate] Where to center the new time axis\n     * @category Common\n    */\n\n    //region Get/set\n\n    changePresets(presets) {\n        const config = {\n            owner : this\n        };\n        let data = [];\n\n        // By default includes all presets\n        if (presets === true) {\n            data = PresetManager.allRecords;\n        }\n        // Accepts an array of presets\n        else if (Array.isArray(presets)) {\n            for (const preset of presets) {\n                // If we got a presetId\n                if (typeof preset === 'string') {\n                    const presetRecord = PresetManager.getById(preset);\n                    if (presetRecord) {\n                        data.push(presetRecord);\n                    }\n                }\n                else {\n                    data.push(preset);\n                }\n            }\n        }\n        // Or a store config object\n        else {\n            ObjectHelper.assign(config, presets);\n        }\n        // Creates store first and then adds data, because data config does not support a mix of raw objects and records.\n        const presetStore = new PresetStore(config);\n        presetStore.add(data);\n\n        return presetStore;\n    }\n\n    changeViewPreset(viewPreset, oldViewPreset) {\n        const\n            me           = this,\n            { presets } = me;\n\n        if (viewPreset) {\n            viewPreset = presets.createRecord(viewPreset);\n\n            // If an existing ViewPreset id is used, this will replace it.\n            if (!presets.includes(viewPreset)) {\n                presets.add(viewPreset);\n            }\n        }\n        else {\n            viewPreset = presets.first;\n        }\n\n        const\n            lastOpts = me.lastViewPresetOptions || {},\n            options  = viewPreset.options || (viewPreset.options = {}),\n            event    = options.event = {\n                startDate : options.startDate,\n                endDate   : options.endDate,\n                from      : oldViewPreset,\n                to        : viewPreset,\n                preset    : viewPreset\n            },\n            presetChanged  = !me._viewPreset || !me._viewPreset.equals(viewPreset),\n            optionsChanged = datesDiffer(options.startDate, lastOpts.startDate) ||\n                datesDiffer(options.endDate, lastOpts.endDate) ||\n                datesDiffer(options.centerDate, lastOpts.centerDate) ||\n                (options.startDate && datesDiffer(options.startDate, me.startDate)) ||\n                (options.endDate && datesDiffer(options.endDate, me.endDate));\n\n        // Only return the value for onward processing if there's a change\n        if (presetChanged || optionsChanged) {\n\n            // Bypass the no-change check if the viewPreset is the same and we only got in here\n            // because different options were asked for.\n            if (!presetChanged) {\n                me._viewPreset = null;\n            }\n\n            /**\n             * Fired before the {@link #config-viewPreset} is changed.\n             * @event beforePresetChange\n             * @param {Scheduler.view.Scheduler} source This Scheduler instance.\n             * @param {Date} startDate The new start date of the timeline.\n             * @param {Date} endDate The new end date of the timeline.\n             * @param {Scheduler.preset.ViewPreset} from The outgoing ViewPreset.\n             * @param {Scheduler.preset.ViewPreset} to The ViewPreset being switched to.\n             * @preventable\n             */\n            // Do not trigger events for the initial preset\n            if (me.isConfiguring || me.trigger('beforePresetChange', event) !== false) {\n                return viewPreset;\n            }\n        }\n    }\n\n    get displayDateFormat() {\n        return this._displayDateFormat || this.viewPreset.displayDateFormat;\n    }\n\n    updateDisplayDateFormat(format) {\n        // Start/EndDateColumn listens for this to change their format to match\n        this.trigger('displayDateFormatChange', { format });\n    }\n\n    /**\n     * Method to get a formatted display date\n     * @private\n     * @param {Date} date The date\n     * @returns {String} The formatted date\n     */\n    getFormattedDate(date) {\n        return DateHelper.format(date, this.displayDateFormat);\n    }\n\n    updateViewPreset(preset) {\n        const\n            me          = this,\n            { options } = preset,\n            {\n                event,\n                startDate,\n                endDate\n            }           = options,\n            {\n                isHorizontal,\n                _timeAxis : timeAxis,    // Do not tickle the getter, we are just peeking to see if it's there yet.\n                _timeAxisViewModel : timeAxisViewModel // Ditto\n            } = me,\n            rtl = isHorizontal && me.rtl;\n\n        let\n            {\n                centerDate,\n                zoomDate,\n                zoomPosition\n            }           = options,\n            forceUpdate = false;\n\n        me.syncSplits?.(split => split.viewPreset = preset);\n\n        // Options must not be reused when this preset is used again.\n        delete preset.options;\n\n        // Raise flag to prevent partner from changing view preset if one is in progress\n        me._viewPresetChanging = true;\n\n        if (timeAxis && !me.isConfiguring) {\n            const { timelineScroller } = me;\n\n            // Cache options only when they are applied so that non-change vetoing in changeViewPreset is accurate\n            me.lastViewPresetOptions = options;\n\n            // Timeaxis may already be configured (in case of sharing with the timeline partner), no need to reconfigure it\n            if (timeAxis.isConfigured) {\n                // None of this reconfiguring should cause a refresh\n                me.suspendRefresh();\n\n                // Set up these configs only if we actually have them.\n                const timeAxisCfg = ObjectHelper.copyProperties({}, me, [\n                    'weekStartDay',\n                    'startTime',\n                    'endTime'\n                ]);\n\n                if (me.infiniteScroll) {\n                    Object.assign(timeAxisCfg, timeAxisViewModel.calculateInfiniteScrollingDateRange(\n                        centerDate || new Date((startDate.getTime() + endDate.getTime()) / 2),\n                        true,\n                        preset\n                    ));\n                }\n                // if startDate is provided we use it and the provided endDate\n                else if (startDate) {\n                    timeAxisCfg.startDate = startDate;\n                    timeAxisCfg.endDate = endDate;\n\n                    // if both dates are provided we can calculate centerDate for the viewport\n                    if (!centerDate && endDate) {\n                        centerDate = new Date((startDate.getTime() + endDate.getTime()) / 2);\n                    }\n\n                    // when no start/end dates are provided we use the current timespan\n                }\n                else {\n                    timeAxisCfg.startDate = timeAxis.startDate;\n                    timeAxisCfg.endDate = endDate || timeAxis.endDate;\n\n                    if (!centerDate) {\n                        centerDate = me.viewportCenterDate;\n                    }\n                }\n\n                timeAxis.isConfigured = false;\n                timeAxisCfg.viewPreset = preset;\n                timeAxis.reconfigure(timeAxisCfg, true);\n\n                timeAxisViewModel.reconfigure({\n                    viewPreset : preset,\n                    headers    : preset.headers,\n\n                    // This was hardcoded to 'middle' prior to the Preset refactor.\n                    // In the old code, the default headers were 'top' and 'middle', which\n                    // meant that 'middle' meant the lowest header.\n                    // So this is now length - 1.\n                    columnLinesFor : preset.columnLinesFor != null ? preset.columnLinesFor : preset.headers.length - 1,\n\n                    tickSize : isHorizontal ? preset.tickWidth : preset.tickHeight || preset.tickWidth || 60\n                });\n\n                // Allow refresh to run after the reconfiguring, without refreshing since we will do that below anyway\n                me.resumeRefresh(false);\n            }\n\n            me.refresh();\n\n            // if view is rendered and scroll is not disabled by \"notScroll\" option\n            if (!options.notScroll && me.isPainted) {\n                if (options.visibleDate) {\n                    me.visibleDate = options.visibleDate;\n                }\n                // If a zoom at a certain date position is being requested, scroll the zoomDate\n                // to the required zoomPosition so that the zoom happens centered where the\n                // pointer events that are driving it targeted.\n                else if (zoomDate && zoomPosition) {\n                    const\n                        unitMagnitude = unitMagnitudes[timeAxis.resolutionUnit],\n                        unit          = unitMagnitude > 3 ? 'hour' : 'minute',\n                        milliseconds  = DateHelper.asMilliseconds((unit === 'minute' ? 15 : 1), unit),\n                        // Round the date to either 15 minutes for fine levels or 1 hour for coarse levels\n                        targetDate    = new Date(Math.round(zoomDate / milliseconds) * milliseconds);\n\n                    // setViewPreset method on partner panels should be executed with same arguments.\n                    // if one partner was provided with zoom info, other one has to be too to generate exact\n                    // header and set same scroll\n                    event.zoomDate = zoomDate;\n                    event.zoomPosition = zoomPosition;\n                    event.zoomLevel = options.zoomLevel;\n\n                    // Move the targetDate back under the mouse position as indicated by zoomPosition.\n                    // That is the offset into the TimeAxisSubGridElement.\n                    if (rtl) {\n                        timelineScroller.position = timelineScroller.scrollWidth - (me.getCoordinateFromDate(targetDate) + zoomPosition);\n                    }\n                    else {\n                        timelineScroller.position = me.getCoordinateFromDate(targetDate) - zoomPosition;\n                    }\n                }\n                // and we have centerDate to scroll to\n                else if (centerDate) {\n                    // remember the central date we scroll to (it gets reset after user scroll)\n                    me.cachedCenterDate = centerDate;\n\n                    // setViewPreset method on partner panels should be executed with same arguments.\n                    // if one partner was provided with a centerDate, other one has to be too to generate exact\n                    // header and set same scroll\n                    event.centerDate = centerDate;\n\n                    const\n                        viewportSize = me.timelineScroller.clientSize,\n                        centerCoord  = rtl ? me.timeAxisViewModel.totalSize - me.getCoordinateFromDate(centerDate, true)\n                            : me.getCoordinateFromDate(centerDate, true),\n                        coord        = Math.max(centerCoord - viewportSize / 2, 0);\n\n                    // The horizontal scroll handler must not invalidate the cached center\n                    // when this scroll event rolls round on the next frame.\n                    me.scrollingToCenter = true;\n\n                    // If preset change does not lead to a scroll we have to \"refresh\" manually at the end\n                    if (coord === (me.isHorizontal ? me.scrollLeft : me.scrollTop)) {\n                        forceUpdate = true;\n                    }\n                    else if (me.isHorizontal) {\n                        me.scrollHorizontallyTo(coord, false);\n                    }\n                    else {\n                        me.scrollVerticallyTo(coord, false);\n                    }\n\n                    // Release the lock on scrolling invalidating the cached center.\n                    me.setTimeout(() => {\n                        me.scrollingToCenter = false;\n                    }, 100);\n                }\n                else {\n                    // If preset change does not lead to a scroll we have to \"refresh\" manually at the end\n                    if ((me.isHorizontal ? me.scrollLeft : me.scrollTop) === 0) {\n                        forceUpdate = true;\n                    }\n                    // If we don't have a center date to scroll to, we reset scroll (this is bw compatible behavior)\n                    else {\n                        me.timelineScroller.scrollTo(0);\n                    }\n                }\n            }\n        }\n\n        // Update Scheduler element showing what preset is applied\n        me.dataset.presetId = preset.id;\n\n        /**\n         * Fired after the {@link #config-viewPreset} has changed.\n         * @event presetChange\n         * @param {Scheduler.view.Scheduler} source This Scheduler instance.\n         * @param {Date} startDate The new start date of the timeline.\n         * @param {Date} centerDate The new center date of the timeline.\n         * @param {Date} endDate The new end date of the timeline.\n         * @param {Scheduler.preset.ViewPreset} from The outgoing ViewPreset.\n         * @param {Scheduler.preset.ViewPreset} to The ViewPreset being switched to.\n         * @preventable\n         */\n        me.trigger('presetChange', event);\n\n        me._viewPresetChanging = false;\n\n        if (forceUpdate) {\n            if (me.isHorizontal) {\n                me.currentOrientation.updateFromHorizontalScroll(me.scrollLeft, true);\n            }\n            else {\n                me.currentOrientation.updateFromVerticalScroll(me.scrollTop);\n            }\n        }\n    }\n\n    //endregion\n\n    doDestroy() {\n        if (this._presets.owner === this) {\n            this._presets.destroy();\n        }\n        super.doDestroy();\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Cannot store name, will not be allowed when reapplying\n        if (result.viewPreset && result.viewPreset.name && !result.viewPreset.base) {\n            delete result.viewPreset.name;\n        }\n\n        return result;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineZoomable\n */\n\n/**\n * Options which may be used when changing the {@link Scheduler.view.Scheduler#property-viewPreset} property.\n *\n * @typedef {Object} ChangePresetOptions\n * @property {VisibleDate} [visibleDate] A `visibleDate` specification to bring into view after the new\n * `ViewPreset` is applied.\n * @property {Date} [startDate] New time frame start. If provided along with end, view will be centered in this\n * time interval, ignoring centerDate config. __Ignored if {@link Scheduler.view.Scheduler#config-infiniteScroll} is used.__\n * @property {Date} [endDate] New time frame end. __Ignored if {@link Scheduler.view.Scheduler#config-infiniteScroll} is used.__\n * @property {Date} [centerDate] Date to keep in center. Is ignored when start and end are provided.\n * @property {Date} [zoomDate] The date that should be positioned at the passed `datePosition` client offset.\n * @property {Number} [zoomPosition] The client offset at which the passed `zoomDate` should be positioned.\n * @property {Number} [width] Lowest tick width. Might be increased automatically\n */\n\n/**\n * Mixin providing \"zooming\" functionality.\n *\n * The zoom levels are stored as instances of {@link Scheduler.preset.ViewPreset}s, and are\n * cached centrally in the {@link Scheduler.preset.PresetManager}.\n *\n * The default presets are loaded into the {@link Scheduler.view.mixin.TimelineViewPresets#config-presets}\n * store upon Scheduler instantiation. Preset selection is covered in the\n * {@link Scheduler.view.mixin.TimelineViewPresets} mixin.\n *\n * To specify custom zoom levels please provide a set of view presets to the global PresetManager store **before**\n * scheduler creation, or provide a set of view presets to a specific scheduler only:\n *\n * ```javascript\n * const myScheduler = new Scheduler({\n *     presets : [\n *         {\n *             base : 'hourAndDay',\n *             id   : 'MyHourAndDay',\n *             // other preset configs....\n *         },\n *         {\n *             base : 'weekAndMonth',\n *             id   : 'MyWeekAndMonth',\n *             // other preset configs....\n *         }\n *     ],\n *     viewPreset : 'MyHourAndDay',\n *     // other scheduler configs....\n *     });\n * ```\n *\n * @mixin\n */\nexport default Target => class TimelineZoomable extends (Target || Base) {\n    static $name = 'TimelineZoomable';\n\n    static defaultConfig = {\n        /**\n         * If true, you can zoom in and out on the time axis using CTRL-key + mouse wheel.\n         * @config {Boolean}\n         * @default\n         * @category Zoom\n         */\n        zoomOnMouseWheel : true,\n\n        /**\n         * True to zoom to time span when double-clicking a time axis cell.\n         * @config {Boolean}\n         * @default\n         * @category Zoom\n         */\n        zoomOnTimeAxisDoubleClick : true,\n\n        /**\n         * The minimum zoom level to which {@link #function-zoomOut} will work. Defaults to 0 (year ticks)\n         * @config {Number}\n         * @category Zoom\n         * @default\n         */\n        minZoomLevel : 0,\n\n        /**\n         * The maximum zoom level to which {@link #function-zoomIn} will work. Defaults to the number of\n         * {@link Scheduler.preset.ViewPreset ViewPresets} available, see {@link Scheduler/view/mixin/TimelineViewPresets#property-presets}\n         * for information. Unless you have modified the collection of available presets, the max zoom level is\n         * milliseconds.\n         * @config {Number}\n         * @category Zoom\n         * @default 23\n         */\n        maxZoomLevel : null,\n\n        /**\n         * Integer number indicating the size of timespan during zooming. When zooming, the timespan is adjusted to make\n         * the scrolling area `visibleZoomFactor` times wider than the timeline area itself. Used in\n         * {@link #function-zoomToSpan} and {@link #function-zoomToLevel} functions.\n         * @config {Number}\n         * @default\n         * @category Zoom\n         */\n        visibleZoomFactor : 5,\n\n        /**\n         * Whether the originally rendered timespan should be preserved while zooming. By default, it is set to `false`,\n         * meaning the timeline panel will adjust the currently rendered timespan to limit the amount of HTML content to\n         * render. When setting this option to `true`, be careful not to allow to zoom a big timespan in seconds\n         * resolution for example. That will cause **a lot** of HTML content to be rendered and affect performance. You\n         * can use {@link #config-minZoomLevel} and {@link #config-maxZoomLevel} config options for that.\n         * @config {Boolean}\n         * @default\n         * @category Zoom\n         */\n        zoomKeepsOriginalTimespan : null\n    };\n\n    // We cache the last mousewheel position, so that during zooming we can\n    // maintain a stable zoom point even if the mouse moves a little.\n    lastWheelTime = -1;\n    lastZoomPosition = -1;\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        if (me.zoomOnMouseWheel) {\n            EventHelper.on({\n                element   : me.timeAxisSubGridElement,\n                wheel     : 'onWheel',\n                // Throttle zooming with the wheel a bit to have greater control of it\n                throttled : {\n                    buffer : 100,\n                    // Prevent events from slipping through the throttle, causing scroll\n                    alt    : e => e.ctrlKey && e.preventDefault()\n                },\n                thisObj : me,\n                capture : true,\n                passive : false\n            });\n        }\n\n        if (me.zoomOnTimeAxisDoubleClick) {\n            me.ion({\n                timeaxisheaderdblclick : ({ startDate, endDate }) => {\n                    if (!me.forceFit) {\n                        me.zoomToSpan({\n                            startDate,\n                            endDate\n                        });\n                    }\n                }\n            });\n        }\n    }\n\n    get maxZoomLevel() {\n        return this._maxZoomLevel || (this.presets.count - 1);\n    }\n\n    /**\n     * Get/set the {@link #config-maxZoomLevel} value\n     * @property {Number}\n     * @category Zoom\n     */\n    set maxZoomLevel(level) {\n        if (typeof level !== 'number') {\n            level = this.presets.count - 1;\n        }\n\n        if (level < 0 || level >= this.presets.count) {\n            throw new Error('Invalid range for `maxZoomLevel`');\n        }\n\n        this._maxZoomLevel = level;\n    }\n\n    get minZoomLevel() {\n        return this._minZoomLevel;\n    }\n\n    /**\n     * Sets the {@link #config-minZoomLevel} value\n     * @property {Number}\n     * @category Zoom\n     */\n    set minZoomLevel(level) {\n        if (typeof level !== 'number') {\n            level = 0;\n        }\n\n        if (level < 0 || level >= this.presets.count) {\n            throw new Error('Invalid range for `minZoomLevel`');\n        }\n\n        this._minZoomLevel = level;\n    }\n\n    /**\n     * Current zoom level, which is equal to the {@link Scheduler.preset.ViewPreset ViewPreset} index\n     * in the provided array of {@link Scheduler.view.mixin.TimelineViewPresets#config-presets zoom levels}.\n     * @property {Number}\n     * @category Zoom\n     */\n    get zoomLevel() {\n        return this.presets.indexOf(this.viewPreset);\n    }\n\n    // noinspection JSAnnotator\n    set zoomLevel(level) {\n        this.zoomToLevel(level);\n    }\n\n    /**\n     * Returns number of milliseconds per pixel.\n     * @param {Object} level Element from array of {@link Scheduler.view.mixin.TimelineViewPresets#config-presets}.\n     * @param {Boolean} ignoreActualWidth If true, then density will be calculated using default zoom level settings.\n     * Otherwise, density will be calculated for actual tick width.\n     * @returns {Number} Return number of milliseconds per pixel.\n     * @private\n     */\n    getMilliSecondsPerPixelForZoomLevel(preset, ignoreActualWidth) {\n        const\n            { bottomHeader } = preset,\n            // Scheduler uses direction independent tickSize, but presets are allowed to define different sizes for\n            // vertical and horizontal -> cant use preset.tickSize here\n            width            = this.isHorizontal ? preset.tickWidth : preset.tickHeight;\n\n        // trying to convert the unit + increment to a number of milliseconds\n        // this number is not fixed (month can be 28, 30 or 31 day), but at least this conversion\n        // will be consistent (should be no DST changes at year 1)\n        return Math.round(\n            (DateHelper.add(new Date(1, 0, 1), bottomHeader.increment || 1, bottomHeader.unit) - new Date(1, 0, 1)) /\n            // `actualWidth` is a column width after view adjustments applied to it (see `calculateTickWidth`)\n            // we use it if available to return the precise index value from `getCurrentZoomLevelIndex`\n            (ignoreActualWidth ? width : preset.actualWidth || width)\n        );\n    }\n\n    /**\n     * Zooms to passed view preset, saving center date. Method accepts config object as a first argument, which can be\n     * reduced to primitive type (string,number) when no additional options required. e.g.:\n     * ```javascript\n     * // zooming to preset\n     * scheduler.zoomTo({ preset : 'hourAndDay' })\n     * // shorthand\n     * scheduler.zoomTo('hourAndDay')\n     *\n     * // zooming to level\n     * scheduler.zoomTo({ level : 0 })\n     * // shorthand\n     * scheduler.zoomTo(0)\n     * ```\n     *\n     * It is also possible to zoom to a time span by omitting `preset` and `level` configs, in which case scheduler sets\n     * the time frame to a specified range and applies zoom level which allows to fit all columns to this range. The\n     * given time span will be centered in the scheduling view (unless `centerDate` config provided). In the same time,\n     * the start/end date of the whole time axis will be extended to allow scrolling for user.\n     * ```javascript\n     * // zooming to time span\n     * scheduler.zoomTo({\n     *     startDate : new Date(..),\n     *     endDate : new Date(...)\n     * });\n     * ```\n     *\n     * @param {ViewPresetConfig|Object|String|Number} config Config object, preset name or zoom level index.\n     * @param {String} [config.preset] Preset name to zoom to. Ignores level config in this case\n     * @param {Number} [config.level] Zoom level to zoom to. Is ignored, if preset config is provided\n     * @param {VisibleDate} [config.visibleDate] A `visibleDate` specification to bring into view after the zoom.\n     * @param {Date} [config.startDate] New time frame start. If provided along with end, view will be centered in this\n     * time interval (unless `centerDate` is present)\n     * @param {Date} [config.endDate] New time frame end\n     * @param {Date} [config.centerDate] Date that should be kept in the center. Has priority over start and end params\n     * @param {Date} [config.zoomDate] The date that should be positioned at the passed `datePosition` client offset.\n     * @param {Number} [config.zoomPosition] The client offset at which the passed `date` should be positioned.\n     * @param {Number} [config.width] Lowest tick width. Might be increased automatically\n     * @param {Number} [config.leftMargin] Amount of pixels to extend span start on (used, when zooming to span)\n     * @param {Number} [config.rightMargin] Amount of pixels to extend span end on (used, when zooming to span)\n     * @param {Number} [config.adjustStart] Amount of units to extend span start on (used, when zooming to span)\n     * @param {Number} [config.adjustEnd] Amount of units to extend span end on (used, when zooming to span)\n     * @category Zoom\n     */\n    zoomTo(config) {\n        const me = this;\n\n        if (typeof config === 'object') {\n            if (config.preset) {\n                me.zoomToLevel(config.preset, config);\n            }\n            else if (config.level != null) {\n                me.zoomToLevel(config.level, config);\n            }\n            else {\n                me.zoomToSpan(config);\n            }\n        }\n        else {\n            me.zoomToLevel(config);\n        }\n    }\n\n    /**\n     * Allows zooming to certain level of {@link Scheduler.view.mixin.TimelineViewPresets#config-presets} array.\n     * Automatically limits zooming between {@link #config-maxZoomLevel} and {@link #config-minZoomLevel}. Can also set\n     * time axis timespan to the supplied start and end dates.\n     *\n     * @param {Number} preset Level to zoom to.\n     * @param {ChangePresetOptions} [options] Object containing options which affect how the new preset is applied.\n     * @returns {Number|null} level Current zoom level or null if it hasn't changed.\n     * @category Zoom\n     */\n    zoomToLevel(preset, options = {}) {\n        if (this.forceFit) {\n            console.warn('Warning: The forceFit setting and zooming cannot be combined');\n            return;\n        }\n        // Sanitize numeric zooming.\n        if (typeof preset === 'number') {\n            preset = Math.min(Math.max(preset, this.minZoomLevel), this.maxZoomLevel);\n        }\n\n        const\n            me                 = this,\n            { presets }       = me,\n            tickSizeProp       = me.isVertical ? 'tickHeight' : 'tickWidth',\n            newPreset          = presets.createRecord(preset),\n            configuredTickSize = newPreset[tickSizeProp],\n            startDate          = options.startDate ? new Date(options.startDate) : null,\n            endDate            = options.endDate ? new Date(options.endDate) : null;\n\n        // If an existing ViewPreset id is used, this will replace it.\n        presets.add(newPreset);\n\n        let span = startDate && endDate ? { startDate, endDate } : null;\n\n        const\n            centerDate             = options.centerDate ? new Date(options.centerDate) : (span ? new Date((startDate.getTime() + endDate.getTime()) / 2) : me.viewportCenterDateCached);\n\n        let scrollableViewportSize = me.isVertical ? me.scrollable.clientHeight : me.timeAxisSubGrid.width;\n\n        if (scrollableViewportSize === 0) {\n            const\n                { _beforeCollapseState } = me.timeAxisSubGrid;\n\n            if (me.isHorizontal && me.timeAxisSubGrid.collapsed && _beforeCollapseState?.width) {\n                scrollableViewportSize = _beforeCollapseState.width;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Always calculate an optimal date range for the new zoom level\n        if (!span) {\n            span = me.calculateOptimalDateRange(centerDate, scrollableViewportSize, newPreset);\n        }\n\n        // Temporarily override tick size while reconfiguring the TimeAxisViewModel\n        if ('width' in options) {\n            newPreset.setData(tickSizeProp, options.width);\n        }\n\n        me.isZooming = true;\n\n        // Passed through to the viewPreset changing method\n        newPreset.options = {\n            ...options,\n            startDate : span.startDate || me.startDate,\n            endDate   : span.endDate || me.endDate,\n            centerDate\n        };\n        me.viewPreset = newPreset;\n\n        // after switching the view preset the `width` config of the zoom level may change, because of adjustments\n        // we will save the real value in the `actualWidth` property, so that `getCurrentZoomLevelIndex` method\n        // will return the exact level index after zooming\n        newPreset.actualWidth = me.timeAxisViewModel.tickSize;\n\n        me.isZooming = false;\n\n        // Restore the tick size because the default presets are shared.\n        newPreset.setData(tickSizeProp, configuredTickSize);\n\n        return me.zoomLevel;\n    }\n\n    /**\n     * Changes the range of the scheduling chart to fit all the events in its event store.\n     * @param {Object} [options] Options object for the zooming operation.\n     * @param {Number} [options.leftMargin] Defines margin in pixel between the first event start date and first visible\n     * date\n     * @param {Number} [options.rightMargin] Defines margin in pixel between the last event end date and last visible\n     * date\n     */\n    zoomToFit(options) {\n        const eventStore = this.eventStore,\n            span       = eventStore.getTotalTimeSpan();\n\n        options = {\n            leftMargin  : 0,\n            rightMargin : 0,\n            ...options,\n            ...span\n        };\n\n        // Make sure we received a time span, event store might be empty\n        if (options.startDate && options.endDate) {\n            if (options.endDate > options.startDate) {\n                this.zoomToSpan(options);\n            }\n            else {\n                // If we only had a zero time span, just scroll it into view\n                this.scrollToDate(options.startDate);\n            }\n        }\n    }\n\n    /**\n     * Sets time frame to specified range and applies zoom level which allows to fit all columns to this range.\n     *\n     * The given time span will be centered in the scheduling view, in the same time, the start/end date of the whole\n     * time axis will be extended in the same way as {@link #function-zoomToLevel} method does, to allow scrolling for\n     * user.\n     *\n     * @param {Object} config The time frame.\n     * @param {Date} config.startDate The time frame start.\n     * @param {Date} config.endDate The time frame end.\n     * @param {Date} [config.centerDate] Date that should be kept in the center. Has priority over start and end params\n     * @param {Number} [config.leftMargin] Amount of pixels to extend span start on\n     * @param {Number} [config.rightMargin] Amount of pixels to extend span end on\n     * @param {Number} [config.adjustStart] Amount of units to extend span start on\n     * @param {Number} [config.adjustEnd] Amount of units to extend span end on\n     *\n     * @returns {Number|null} level Current zoom level or null if it hasn't changed.\n     * @category Zoom\n     */\n    zoomToSpan(config = {}) {\n        if (config.leftMargin || config.rightMargin) {\n            config.adjustStart = 0;\n            config.adjustEnd = 0;\n        }\n\n        if (!config.leftMargin) config.leftMargin = 0;\n        if (!config.rightMargin) config.rightMargin = 0;\n\n        if (!config.startDate || !config.endDate) throw new Error('zoomToSpan: must provide startDate + endDate dates');\n\n        const\n            me           = this,\n            { timeAxis } = me,\n            // this config enables old zoomToSpan behavior which we want to use for zoomToFit in Gantt\n            needToAdjust = config.adjustStart >= 0 || config.adjustEnd >= 0;\n\n        let {\n            startDate,\n            endDate\n        } = config;\n\n        if (needToAdjust) {\n            startDate = DateHelper.add(startDate, -config.adjustStart, timeAxis.mainUnit);\n            endDate   = DateHelper.add(endDate, config.adjustEnd, timeAxis.mainUnit);\n        }\n\n        if (startDate <= endDate) {\n            // get scheduling view width\n            const\n                { availableSpace } = me.timeAxisViewModel,\n                presets = me.presets.allRecords,\n                diffMS  = endDate - startDate || 1;\n\n            // if potential width of col is less than col width provided by zoom level\n            //   - we'll zoom out panel until col width fit into width from zoom level\n            // and if width of column is more than width from zoom level\n            //   - we'll zoom in until col width fit won't fit into width from zoom level\n\n            let currLevel = me.zoomLevel,\n                inc, range;\n\n            // if we zoomed out even more than the highest zoom level - limit it to the highest zoom level\n            if (currLevel === -1) currLevel = 0;\n\n            let msPerPixel             = me.getMilliSecondsPerPixelForZoomLevel(presets[currLevel], true),\n                // increment to get next zoom level:\n                // -1 means that given timespan won't fit the available width in the current zoom level, we need to zoom out,\n                // so that more content will \"fit\" into 1 px\n                //\n                // +1 mean that given timespan will already fit into available width in the current zoom level, but,\n                // perhaps if we'll zoom in a bit more, the fitting will be better\n                candidateLevel         = currLevel + (inc = diffMS / msPerPixel + config.leftMargin + config.rightMargin > availableSpace ? -1 : 1),\n                zoomLevel, levelToZoom = null;\n\n            // loop over zoom levels\n            while (candidateLevel >= 0 && candidateLevel <= presets.length - 1) {\n                // get zoom level\n                zoomLevel = presets[candidateLevel];\n\n                msPerPixel = me.getMilliSecondsPerPixelForZoomLevel(zoomLevel, true);\n                const spanWidth = diffMS / msPerPixel + config.leftMargin + config.rightMargin;\n\n                // if zooming out\n                if (inc === -1) {\n                    // if columns fit into available space, then all is fine, we've found appropriate zoom level\n                    if (spanWidth <= availableSpace) {\n                        levelToZoom = candidateLevel;\n                        // stop searching\n                        break;\n                    }\n                    // if zooming in\n                }\n                else {\n                    // if columns still fits into available space, we need to remember the candidate zoom level as a potential\n                    // resulting zoom level, the indication that we've found correct zoom level will be that timespan won't fit\n                    // into available view\n                    if (spanWidth <= availableSpace) {\n                        // if it's not currently active level\n                        if (currLevel !== candidateLevel - inc) {\n                            // remember this level as applicable\n                            levelToZoom = candidateLevel;\n                        }\n                    }\n                    else {\n                        // Sanity check to find the following case:\n                        // If we're already zoomed in at the appropriate level, but the current zoomLevel is \"too small\" to fit and had to be expanded,\n                        // there is an edge case where we should actually just stop and use the currently selected zoomLevel\n                        break;\n                    }\n                }\n\n                candidateLevel += inc;\n            }\n\n            // If we didn't find a large/small enough zoom level, use the lowest/highest level\n            levelToZoom = levelToZoom != null ? levelToZoom : candidateLevel - inc;\n\n            // presets is the array of all ViewPresets this Scheduler is using\n            zoomLevel = presets[levelToZoom];\n\n            const unitToZoom = zoomLevel.bottomHeader.unit;\n\n            // Extract the correct msPerPixel value for the new zoom level\n            msPerPixel = me.getMilliSecondsPerPixelForZoomLevel(zoomLevel, true);\n\n            if (config.leftMargin || config.rightMargin) {\n                // time axis doesn't yet know about new view preset (zoom level) so it cannot round/ceil date correctly\n                startDate = new Date(startDate.getTime() - msPerPixel * config.leftMargin);\n                endDate   = new Date(endDate.getTime() + msPerPixel * config.rightMargin);\n            }\n\n            const tickCount = DateHelper.getDurationInUnit(startDate, endDate, unitToZoom, true) / zoomLevel.bottomHeader.increment;\n\n            if (tickCount === 0) {\n                return null;\n            }\n\n            const\n                customWidth = Math.floor(availableSpace / tickCount),\n                centerDate  = config.centerDate || new Date((startDate.getTime() + endDate.getTime()) / 2);\n\n            if (needToAdjust) {\n                range = {\n                    startDate,\n                    endDate\n                };\n            }\n            else {\n                range = me.calculateOptimalDateRange(centerDate, availableSpace, zoomLevel);\n            }\n\n            let result = me.zoomLevel;\n\n            // No change of zoom level needed, just move to the date range\n            if (me.zoomLevel === levelToZoom) {\n                timeAxis.reconfigure(range);\n            }\n            else {\n                result = me.zoomToLevel(levelToZoom,\n                    Object.assign(range, {\n                        width : customWidth,\n                        centerDate\n                    })\n                );\n            }\n\n            if (me.infiniteScroll) {\n                me.scrollToDate(startDate, { block : 'start' });\n            }\n\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     * Zooms in the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view\n     * will zoom in by this value. Otherwise, a value of `1` will be used.\n     *\n     * @param {Number} [levels] (optional) amount of levels to zoom in\n     * @param {ChangePresetOptions} [options] Object containing options which affect how the new preset is applied.\n     * @returns {Number|null} currentLevel New zoom level of the panel or null if level hasn't changed.\n     * @category Zoom\n     */\n    zoomIn(levels = 1, options) {\n        // Allow zoomIn({ visibleDate : ... })\n        if (typeof levels === 'object') {\n            options = levels;\n            levels = 1;\n        }\n        const currentZoomLevelIndex = this.zoomLevel;\n\n        if (currentZoomLevelIndex >= this.maxZoomLevel) {\n            return null;\n        }\n\n        return this.zoomToLevel(currentZoomLevelIndex + levels, options);\n    }\n\n    /**\n     * Zooms out the timeline according to the array of zoom levels. If the amount of levels to zoom is given, the view\n     * will zoom out by this value. Otherwise, a value of `1` will be used.\n     *\n     * @param {Number} levels (optional) amount of levels to zoom out\n     * @param {ChangePresetOptions} [options] Object containing options which affect how the new preset is applied.\n     * @returns {Number|null} currentLevel New zoom level of the panel or null if level hasn't changed.\n     * @category Zoom\n     */\n    zoomOut(levels = 1, options) {\n        // Allow zoomOut({ visibleDate : ... })\n        if (typeof levels === 'object') {\n            options = levels;\n            levels = 1;\n        }\n        const currentZoomLevelIndex = this.zoomLevel;\n\n        if (currentZoomLevelIndex <= this.minZoomLevel) {\n            return null;\n        }\n\n        return this.zoomToLevel(currentZoomLevelIndex - levels, options);\n    }\n\n    /**\n     * Zooms in the timeline to the {@link #config-maxZoomLevel} according to the array of zoom levels.\n     *\n     * @param {ChangePresetOptions} [options] Object containing options which affect how the new preset is applied.\n     * @returns {Number|null} currentLevel New zoom level of the panel or null if level hasn't changed.\n     * @category Zoom\n     */\n    zoomInFull(options) {\n        return this.zoomToLevel(this.maxZoomLevel, options);\n    }\n\n    /**\n     * Zooms out the timeline to the {@link #config-minZoomLevel} according to the array of zoom levels.\n     *\n     * @param {ChangePresetOptions} [options] Object containing options which affect how the new preset is applied.\n     * @returns {Number|null} currentLevel New zoom level of the panel or null if level hasn't changed.\n     * @category Zoom\n     */\n    zoomOutFull(options) {\n        return this.zoomToLevel(this.minZoomLevel, options);\n    }\n\n    /*\n     * Adjusts the timespan of the panel to the new zoom level. Used for performance reasons,\n     * as rendering too many columns takes noticeable amount of time so their number is limited.\n     * @category Zoom\n     * @private\n     */\n    calculateOptimalDateRange(centerDate, viewportSize, viewPreset, userProvidedSpan) {\n        // this line allows us to always use the `calculateOptimalDateRange` method when calculating date range for zooming\n        // (even in case when user has provided own interval)\n        // other methods may override/hook into `calculateOptimalDateRange` to insert own processing\n        // (infinite scrolling feature does)\n        if (userProvidedSpan) return userProvidedSpan;\n\n        const\n            me               = this,\n            { timeAxis }     = me,\n            { bottomHeader } = viewPreset,\n            tickWidth        = me.isHorizontal ? viewPreset.tickWidth : viewPreset.tickHeight;\n\n        if (me.zoomKeepsOriginalTimespan) {\n            return {\n                startDate : timeAxis.startDate,\n                endDate   : timeAxis.endDate\n            };\n        }\n\n        const\n            unit       = bottomHeader.unit,\n            difference = Math.ceil(viewportSize / tickWidth * bottomHeader.increment * me.visibleZoomFactor / 2),\n            startDate  = DateHelper.add(centerDate, -difference, unit),\n            endDate    = DateHelper.add(centerDate, difference, unit);\n\n        if (me.infiniteScroll) {\n            return me.timeAxisViewModel.calculateInfiniteScrollingDateRange(centerDate, true);\n        }\n        else {\n            return {\n                startDate : timeAxis.floorDate(startDate, false, unit, bottomHeader.increment),\n                endDate   : timeAxis.ceilDate(endDate, false, unit, bottomHeader.increment)\n            };\n        }\n    }\n\n    onElementMouseMove(event) {\n        const\n            {\n                isHorizontal,\n                zoomContext\n            } = this;\n\n        super.onElementMouseMove(event);\n\n        if (event.isTrusted && zoomContext) {\n            // Invalidate the zoomContext if mouse has strayed away from it\n            if (Math.abs(event[`client${isHorizontal ? 'X' : 'Y'}`] - zoomContext.coordinate) > 10) {\n                this.zoomContext = null;\n            }\n        }\n    }\n\n    async onWheel(event) {\n        if (event.ctrlKey && !this.forceFit) {\n            event.preventDefault();\n\n            const\n                me           = this,\n                {\n                    zoomContext,\n                    isHorizontal,\n                    timelineScroller,\n                    zoomLevel\n                }            = me,\n                now          = performance.now(),\n                coordinate   = event[`client${isHorizontal ? 'X' : 'Y'}`];\n\n            let zoomPosition = coordinate - timelineScroller.viewport[`${isHorizontal ? 'x' : 'y'}`];\n\n            // zoomPosition is the offset into the TimeAxisSubGridElement.\n            if (isHorizontal && me.rtl) {\n                zoomPosition = timelineScroller.viewport.width + timelineScroller.viewport.x - coordinate;\n            }\n\n            // If we are in a fast-arriving stream of wheel events, we use the same zoomDate as last time.\n            // If it's a new zoom gesture or the pointer has strayed away from the context then ascertain\n            // the gesture's center date\n            if (now - me.lastWheelTime > 200 || !zoomContext || Math.abs(coordinate - me.zoomContext.coordinate) > 20) {\n                // We're creating a zoom gesture which lasts as long as the\n                // wheel events keep arriving at the same timeline position\n                me.zoomContext = {\n                    // So we can track if we're going in (to finer resolutions)\n                    zoomLevel,\n\n                    // Pointer client(X|Y)\n                    coordinate,\n\n                    // Full TimeAxis offset position at which to place the date\n                    zoomPosition,\n\n                    // The date to place at the position\n                    zoomDate : me.getDateFromDomEvent(event)\n                };\n            }\n            // Use the current zoomContext's zoomDate, but at each level, the relative position of that date\n            // in the TimeAxis has to be corrected as the TimeAxis grows and scrolls to keep the zoomPosition\n            // stable.\n            else {\n                // If we zoom in to a finer resolution, get a more accurate centering date.\n                // If gesture was started at a years/months level, the date will be inaccurate.\n                if (zoomLevel > zoomContext.zoomLevel) {\n                    zoomContext.zoomDate = me.getDateFromDomEvent(event);\n                    zoomContext.zoomLevel = zoomLevel;\n                }\n                zoomContext.zoomPosition = zoomPosition;\n            }\n\n            me.lastWheelTime = now;\n            me[`zoom${event.deltaY > 0 ? 'Out' : 'In'}`](undefined, me.zoomContext);\n        }\n    }\n\n    /**\n     * Changes the time axis timespan to the supplied start and end dates.\n     * @param {Date} startDate The new start date\n     * @param {Date} [endDate] The new end date. If omitted or equal to startDate, the\n     * {@link Scheduler.preset.ViewPreset#field-defaultSpan} property of the current view preset will be used to\n     * calculate the new end date.\n     */\n    setTimeSpan(startDate, endDate) {\n        this.timeAxis.setTimeSpan(startDate, endDate);\n    }\n\n    /**\n     * Moves the time axis by the passed amount and unit.\n     *\n     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shift} for more information.\n     *\n     * @param {Number} amount The number of units to jump\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} [unit] The unit (Day, Week etc)\n     */\n    shift(amount, unit) {\n        this.timeAxis.shift(amount, unit);\n    }\n\n    /**\n     * Moves the time axis forward in time in units specified by the view preset `shiftUnit`, and by the amount\n     * specified by the `shiftIncrement` config of the current view preset.\n     *\n     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shiftNext} for more information.\n     *\n     * @param {Number} [amount] The number of units to jump forward\n     */\n    shiftNext(amount) {\n        this.timeAxis.shiftNext(amount);\n    }\n\n    /**\n     * Moves the time axis backward in time in units specified by the view preset `shiftUnit`, and by the amount\n     * specified by the `shiftIncrement` config of the current view preset.\n     *\n     * NOTE: If using a filtered time axis, see {@link Scheduler.data.TimeAxis#function-shiftPrevious} for more\n     * information.\n     *\n     * @param {Number} [amount] The number of units to jump backward\n     */\n    shiftPrevious(amount) {\n        this.timeAxis.shiftPrevious(amount);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Popup from '../../../Core/widget/Popup.js';\n\n/**\n * @module Scheduler/view/recurrence/RecurrenceConfirmationPopup\n */\n\n/**\n * A confirmation dialog shown when modifying a recurring event or some of its occurrences.\n * For recurring events, the dialog informs the user that the change will be applied to all occurrences.\n *\n * For occurrences, the dialog lets the user choose if the change should affect all future occurrences,\n * or this occurrence only.\n *\n * Usage example:\n *\n * ```javascript\n * const confirmation = new RecurrenceConfirmationPopup();\n *\n * confirmation.confirm({\n *     eventRecord : recurringEvent,\n *     actionType  : \"delete\",\n *     changerFn   : () => recurringEvent.remove(event)\n * });\n * ```\n *\n * @classType recurrenceconfirmation\n * @extends Core/widget/Popup\n */\nexport default class RecurrenceConfirmationPopup extends Popup {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{delete-further-message}',\n        'L{update-further-message}',\n        'L{delete-all-message}',\n        'L{update-all-message}',\n        'L{delete-further-btn-text}',\n        'L{update-further-btn-text}',\n        'L{delete-only-this-btn-text}',\n        'L{update-only-this-btn-text}',\n        'L{delete-title}',\n        'L{update-title}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'RecurrenceConfirmationPopup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrenceconfirmation';\n    }\n\n    static get defaultConfig() {\n        return {\n            localizableProperties : [],\n            align                 : 'b-t',\n            autoShow              : false,\n            autoClose             : false,\n            closeAction           : 'onRecurrenceClose',\n            modal                 : true,\n            centered              : true,\n            scrollAction          : 'realign',\n            constrainTo           : globalThis,\n            draggable             : true,\n            closable              : true,\n            floating              : true,\n            eventRecord           : null,\n            cls                   : 'b-sch-recurrenceconfirmation',\n            bbar                  : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    changeSingleButton : {\n                        weight  : 100,\n                        cls     : 'b-raised',\n                        color   : 'b-blue',\n                        text    : 'L{update-only-this-btn-text}',\n                        onClick : 'up.onChangeSingleButtonClick'\n                    },\n                    changeMultipleButton : {\n                        weight  : 200,\n                        color   : 'b-green',\n                        text    : 'L{Object.Yes}',\n                        onClick : 'up.onChangeMultipleButtonClick'\n                    },\n                    cancelButton : {\n                        weight  : 300,\n                        color   : 'b-gray',\n                        text    : 'L{Object.Cancel}',\n                        onClick : 'up.onCancelButtonClick'\n                    }\n                }\n            }\n        };\n    }\n\n    /**\n     * Reference to the \"Apply changes to multiple occurrences\" button, if used\n     * @property {Core.widget.Button}\n     * @readonly\n     */\n    get changeMultipleButton() {\n        return this.widgetMap.changeMultipleButton;\n    }\n\n    /**\n     * Reference to the button that causes changing of the event itself only, if used\n     * @property {Core.widget.Button}\n     * @readonly\n     */\n    get changeSingleButton() {\n        return this.widgetMap.changeSingleButton;\n    }\n\n    /**\n     * Reference to the cancel button, if used\n     * @property {Core.widget.Button}\n     * @readonly\n     */\n    get cancelButton() {\n        return this.widgetMap.cancelButton;\n    }\n\n    /**\n     * Handler for \"Apply changes to multiple occurrences\" {@link #property-changeMultipleButton button}.\n     * It calls {@link #function-processMultipleRecords} and then hides the dialog.\n     */\n    onChangeMultipleButtonClick() {\n        this.processMultipleRecords();\n        this.hide();\n    }\n\n    /**\n     * Handler for the {@link #property-changeSingleButton button} that causes changing of the event itself only.\n     * It calls {@link #function-processSingleRecord} and then hides the dialog.\n     */\n    onChangeSingleButtonClick() {\n        this.processSingleRecord();\n        this.hide();\n    }\n\n    /**\n     * Handler for {@link #property-cancelButton cancel button}.\n     * It calls `cancelFn` provided to {@link #function-confirm} call and then hides the dialog.\n     */\n    onCancelButtonClick() {\n        this.cancelFn && this.cancelFn.call(this.thisObj);\n        this.hide();\n    }\n\n    onRecurrenceClose() {\n        if (this.cancelFn) {\n            this.cancelFn.call(this.thisObj);\n        }\n        this.hide();\n    }\n\n    /**\n     * Displays the confirmation.\n     * Usage example:\n     *\n     * ```javascript\n     * const popup = new RecurrenceConfirmationPopup();\n     *\n     * popup.confirm({\n     *     eventRecord,\n     *     actionType : \"delete\",\n     *     changerFn  : () => eventStore.remove(record)\n     * });\n     * ```\n     *\n     * @param {Object} config The following config options are supported:\n     * @param {Scheduler.model.EventModel} config.eventRecord   Event being modified.\n     * @param {'update'|'delete'} config.actionType Type of modification to be applied to the event. Can be\n     * either \"update\" or \"delete\".\n     * @param {Function} config.changerFn A function that should be called to apply the change to the event upon user\n     * choice.\n     * @param {Function} [config.thisObj] `changerFn` and `cancelFn` functions scope.\n     * @param {Function} [config.cancelFn] Function called on `Cancel` button click.\n     */\n    confirm(config = {}) {\n        const me = this;\n\n        //<debug>\n        if (!config || !config.actionType || !config.eventRecord) {\n            throw new Error('actionType and eventRecord must be specified for Scheduler.view.recurrence.RecurrenceConfirmationPopup');\n        }\n        //</debug>\n\n        [\n            'actionType',\n            'eventRecord',\n            'title',\n            'html',\n            'changerFn',\n            'cancelFn',\n            'finalizerFn',\n            'thisObj'\n        ].forEach(prop => {\n            if (prop in config) me[prop] = config[prop];\n        });\n\n        me.updatePopupContent();\n\n        return super.show(config);\n    }\n\n    updatePopupContent() {\n        const\n            me                                                         = this,\n            { changeMultipleButton, changeSingleButton, cancelButton } = me.widgetMap,\n            { eventRecord, actionType = 'update' }                     = me,\n            isMaster                                                   = eventRecord?.isRecurring;\n\n        if (isMaster) {\n            changeMultipleButton.text = me.L('L{Object.Yes}');\n            me.html = me.L(`${actionType}-all-message`);\n        }\n        else {\n            changeMultipleButton.text = me.L(`${actionType}-further-btn-text`);\n            me.html = me.L(`${actionType}-further-message`);\n        }\n\n        changeSingleButton.text = me.L(`${actionType}-only-this-btn-text`);\n        cancelButton.text = me.L('L{Object.Cancel}');\n\n        me.width = me.L('L{width}');\n\n        me.title = me.L(`${actionType}-title`);\n    }\n\n    /**\n     * Applies changes to multiple occurrences as reaction on \"Apply changes to multiple occurrences\"\n     * {@link #property-changeMultipleButton button} click.\n     */\n    processMultipleRecords() {\n        const { eventRecord, changerFn, thisObj, finalizerFn } = this;\n\n        eventRecord.beginBatch();\n        // Apply changes to the occurrence.\n        // It is not joined to any stores, so this has no consequence.\n        changerFn && this.callback(changerFn, thisObj, [eventRecord]);\n\n        // afterChange will promote it to being an new recurring base because there's still recurrence\n        eventRecord.endBatch();\n\n        finalizerFn && this.callback(finalizerFn, thisObj, [eventRecord]);\n    }\n\n    /**\n     * Applies changes to a single record by making it a \"real\" event and adding an exception to the recurrence.\n     * The method is called as reaction on clicking the {@link #property-changeSingleButton button} that causes changing of the event itself only.\n     */\n    processSingleRecord() {\n        const { eventRecord, changerFn, thisObj, finalizerFn } = this;\n\n        eventRecord.beginBatch();\n\n        let firstOccurrence;\n\n        // If that's a master event get its very first occurrence\n        if (eventRecord?.isRecurring) {\n            eventRecord.recurrence.forEachOccurrence(eventRecord.startDate, null, (occurrence, isFirst, index) => {\n                // index 1 is used by to the event itself, > 1 since there might be exceptions\n                if (index > 1) {\n                    firstOccurrence = occurrence;\n                    return false;\n                }\n            });\n        }\n\n        // turn the 1st occurrence into a new \"master\" event\n        firstOccurrence?.convertToRealEvent();\n\n        // When the changes apply, because there's no recurrence, it will become an exception\n        eventRecord.recurrence = null;\n\n        // Apply changes to the occurrence.\n        // It is not joined to any stores, so this has no consequence.\n        changerFn && this.callback(changerFn, thisObj, [eventRecord]);\n\n        // Must also change after the callback in case the callback sets the rule.\n        // This will update the batch update data block to prevent it being set back to recurring.\n        eventRecord.recurrenceRule = null;\n\n        // afterChange will promote it to being an exception because there's no recurrence\n        eventRecord.endBatch();\n\n        finalizerFn && this.callback(finalizerFn, thisObj, [eventRecord]);\n    }\n\n    updateLocalization() {\n        this.updatePopupContent();\n        super.updateLocalization();\n    }\n\n};\n\n// Register this widget type with its Factory\nRecurrenceConfirmationPopup.initClass();\n", "import Base from '../../../Core/Base.js';\nimport '../recurrence/RecurrenceConfirmationPopup.js';\n\n/**\n * @module Scheduler/view/mixin/RecurringEvents\n */\n\n/**\n * A mixin that adds recurring events functionality to the Scheduler.\n *\n * The main purpose of the code in here is displaying a {@link Scheduler.view.recurrence.RecurrenceConfirmationPopup special confirmation}\n * on user mouse dragging/resizing/deleting recurring events and their occurrences.\n *\n * @mixin\n */\nexport default Target => class RecurringEvents extends (Target || Base) {\n    static $name = 'RecurringEvents';\n\n    static configurable = {\n        /**\n         * Enables showing occurrences of recurring events across the scheduler's time axis.\n         *\n         * Enables extra recurrence UI fields in the system-provided event editor (not in Scheduler Pro's task editor).\n         * @config {Boolean}\n         * @default\n         * @category Scheduled events\n         */\n        enableRecurringEvents : false,\n\n        recurrenceConfirmationPopup : {\n            $config : ['lazy'],\n            value   : {\n                type : 'recurrenceconfirmation'\n            }\n        }\n    };\n\n    construct(config) {\n        super.construct(config);\n\n        this.ion({\n            beforeEventDropFinalize   : 'onRecurrableBeforeEventDropFinalize',\n            beforeEventResizeFinalize : 'onRecurrableBeforeEventResizeFinalize',\n            beforeAssignmentDelete    : 'onRecurrableAssignmentBeforeDelete'\n        });\n    }\n\n    changeRecurrenceConfirmationPopup(recurrenceConfirmationPopup, oldRecurrenceConfirmationPopup) {\n        // Widget.reconfigure reither reconfigures an existing instance, or creates a new one, or,\n        // if the configuration is null, destroys the existing instance.\n        const result = this.constructor.reconfigure(oldRecurrenceConfirmationPopup, recurrenceConfirmationPopup, 'recurrenceconfirmation');\n        result.owner = this;\n        return result;\n    }\n\n    findRecurringEventToConfirmDelete(eventRecords) {\n        // show confirmation if we deal with at least one recurring event (or its occurrence)\n        // and if the record is not being edited by event editor (since event editor has its own confirmation)\n        return eventRecords.find(eventRecord => eventRecord.supportsRecurring && (eventRecord.isRecurring || eventRecord.isOccurrence));\n    }\n\n    onRecurrableAssignmentBeforeDelete({ assignmentRecords, context }) {\n        const\n            eventRecords = assignmentRecords.map(as => as.event),\n            eventRecord  = this.findRecurringEventToConfirmDelete(eventRecords);\n\n        if (this.enableRecurringEvents && eventRecord) {\n            this.recurrenceConfirmationPopup.confirm({\n                actionType : 'delete',\n                eventRecord,\n                changerFn() {\n                    context.finalize(true);\n                },\n                cancelFn() {\n                    context.finalize(false);\n                }\n            });\n\n            return false;\n        }\n    }\n\n    onRecurrableBeforeEventDropFinalize({ context }) {\n        if (this.enableRecurringEvents) {\n            const\n                { eventRecords } = context,\n                recurringEvents = eventRecords.filter(eventRecord => eventRecord.supportsRecurring && (eventRecord.isRecurring || eventRecord.isOccurrence));\n\n            if (recurringEvents.length) {\n                context.async = true;\n\n                this.recurrenceConfirmationPopup.confirm({\n                    actionType  : 'update',\n                    eventRecord : recurringEvents[0],\n                    changerFn() {\n                        context.finalize(true);\n                    },\n                    cancelFn() {\n                        context.finalize(false);\n                    }\n                });\n            }\n        }\n    }\n\n    onRecurrableBeforeEventResizeFinalize({ context }) {\n        if (this.enableRecurringEvents) {\n            const\n                { eventRecord } = context,\n                isRecurring     = eventRecord.supportsRecurring && (eventRecord.isRecurring || eventRecord.isOccurrence);\n\n            if (isRecurring) {\n                context.async = true;\n\n                this.recurrenceConfirmationPopup.confirm({\n                    actionType : 'update',\n                    eventRecord,\n                    changerFn() {\n                        context.finalize(true);\n                    },\n                    cancelFn() {\n                        context.finalize(false);\n                    }\n                });\n            }\n        }\n    }\n\n    // Make sure occurrence cache is up-to-date when reassigning events\n    onAssignmentChange({ action, records : assignments }) {\n        if (action !== 'dataset' && Array.isArray(assignments)) {\n            for (const assignment of assignments) {\n                if (assignment.event?.isRecurring && !assignment.event.isBatchUpdating) {\n                    assignment.event.removeOccurrences();\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns occurrences of the provided recurring event across the date range of this Scheduler.\n     * @param  {Scheduler.model.TimeSpan} recurringEvent Recurring event for which occurrences should be retrieved.\n     * @returns {Scheduler.model.TimeSpan[]} Array of the provided timespans occurrences.\n     *\n     * __Empty if the passed event is not recurring, or has no occurrences in the date range.__\n     *\n     * __If the date range encompasses the start point, the recurring event itself will be the first entry.__\n     * @category Data\n     */\n    getOccurrencesFor(recurringEvent) {\n        return this.eventStore.getOccurrencesForTimeSpan(recurringEvent, this.timeAxis.startDate, this.timeAxis.endDate);\n    }\n\n    /**\n     * Internal utility function to remove events. Used when pressing [DELETE] or [BACKSPACE] or when clicking the\n     * delete button in the event editor. Triggers a preventable `beforeEventDelete` or `beforeAssignmentDelete` event.\n     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} eventRecords Records to remove\n     * @param {Function} [callback] Optional callback executed after triggering the event but before deletion\n     * @returns {Boolean} Returns `false` if the operation was prevented, otherwise `true`\n     * @internal\n     * @fires beforeEventDelete\n     * @fires beforeAssignmentDelete\n     */\n    async removeEvents(eventRecords, callback = null, popupOwner = this) {\n        const me = this;\n\n        if (!me.readOnly && eventRecords.length) {\n            const context = {\n                finalize(removeRecord = true) {\n                    if (callback) {\n                        callback(removeRecord);\n                    }\n\n                    if (removeRecord !== false) {\n                        if (eventRecords.some(record => record.isOccurrence || record.event?.isOccurrence)) {\n                            eventRecords.forEach(record => record.isOccurrenceAssignment ? record.event.remove() : record.remove());\n                        }\n                        else {\n                            const store = eventRecords[0].isAssignment ? me.assignmentStore : me.eventStore;\n\n                            store.remove(eventRecords);\n                        }\n                    }\n                }\n            };\n\n            let shouldFinalize;\n\n            if (eventRecords[0].isAssignment) {\n                /**\n                 * Fires before an assignment is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or\n                 * by the event editor. Can for example be used to display a custom dialog to confirm deletion, in which\n                 * case records should be \"manually\" removed after confirmation:\n                 *\n                 * ```javascript\n                 * scheduler.on({\n                 *    beforeAssignmentDelete({ assignmentRecords, context }) {\n                 *        // Show custom confirmation dialog (pseudo code)\n                 *        confirm.show({\n                 *            listeners : {\n                 *                onOk() {\n                 *                    // Remove the assignments on confirmation\n                 *                    context.finalize(true);\n                 *                },\n                 *                onCancel() {\n                 *                    // do not remove the assignments if \"Cancel\" clicked\n                 *                    context.finalize(false);\n                 *                }\n                 *            }\n                 *        });\n                 *\n                 *        // Prevent default behaviour\n                 *        return false;\n                 *    }\n                 * });\n                 * ```\n                 *\n                 * @event beforeAssignmentDelete\n                 * @param {Scheduler.view.Scheduler} source  The Scheduler instance\n                 * @param {Scheduler.model.EventModel[]} eventRecords  The records about to be deleted\n                 * @param {Object} context  Additional removal context:\n                 * @param {Function} context.finalize  Function to call to finalize the removal.\n                 *      Used to asynchronously decide to remove the records or not. Provide `false` to the function to\n                 *      prevent the removal.\n                 * @param {Boolean} [context.finalize.removeRecords = true]   Provide `false` to the function to prevent\n                 *      the removal.\n                 * @preventable\n                 */\n                shouldFinalize = me.trigger('beforeAssignmentDelete', { assignmentRecords : eventRecords, context });\n            }\n            else {\n                /**\n                 * Fires before an event is removed. Can be triggered by user pressing [DELETE] or [BACKSPACE] or by the\n                 * event editor. Return `false` to immediately veto the removal (or a `Promise` yielding `true` or `false`\n                 * for async vetoing).\n                 *\n                 * Can for example be used to display a custom dialog to confirm deletion, in which case\n                 * records should be \"manually\" removed after confirmation:\n                 *\n                 * ```javascript\n                 * scheduler.on({\n                 *    beforeEventDelete({ eventRecords, context }) {\n                 *        // Show custom confirmation dialog (pseudo code)\n                 *        confirm.show({\n                 *            listeners : {\n                 *                onOk() {\n                 *                    // Remove the events on confirmation\n                 *                    context.finalize(true);\n                 *                },\n                 *                onCancel() {\n                 *                    // do not remove the events if \"Cancel\" clicked\n                 *                    context.finalize(false);\n                 *                }\n                 *            }\n                 *        });\n                 *\n                 *        // Prevent default behaviour\n                 *        return false;\n                 *    }\n                 * });\n                 * ```\n                 *\n                 * @event beforeEventDelete\n                 * @param {Scheduler.view.Scheduler} source  The Scheduler instance\n                 * @param {Scheduler.model.EventModel[]} eventRecords  The records about to be deleted\n                 * @param {Object} context  Additional removal context:\n                 * @param {Function} context.finalize  Function to call to finalize the removal.\n                 *      Used to asynchronously decide to remove the records or not. Provide `false` to the function to\n                 *      prevent the removal.\n                 * @param {Boolean} [context.finalize.removeRecords = true]  Provide `false` to the function to prevent\n                 *      the removal.\n                 * @preventable\n                 * @async\n                 */\n                shouldFinalize = await me.trigger('beforeEventDelete', { eventRecords, context });\n            }\n\n            if (shouldFinalize !== false) {\n                const recurringEventRecord = eventRecords.find(eventRecord => eventRecord.isRecurring || eventRecord.isOccurrence);\n\n                if (recurringEventRecord) {\n                    me.recurrenceConfirmationPopup.owner = popupOwner;\n                    me.recurrenceConfirmationPopup.confirm({\n                        actionType  : 'delete',\n                        eventRecord : recurringEventRecord,\n                        changerFn() {\n                            context.finalize(true);\n                        },\n                        cancelFn() {\n                            context.finalize(false);\n                        }\n                    });\n                }\n                else {\n                    context.finalize(true);\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineEventRendering\n */\n\n/**\n * Functions to handle event rendering (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class TimelineEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'TimelineEventRendering';\n    }\n\n    //region Default config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * When `true`, events are sized and positioned based on rowHeight, resourceMargin and barMargin settings.\n             * Set this to `false` if you want to control height and vertical position using CSS instead.\n             *\n             * Note that events always get an absolute top position, but when this setting is enabled that position\n             * will match row's top. To offset within the row using CSS, use `transform : translateY(y)`.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Scheduled events\n             */\n            managedEventSizing : true,\n\n            /**\n             * The CSS class added to an event/assignment when it is newly created\n             * in the UI and unsynced with the server.\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            generatedIdCls : 'b-sch-dirty-new',\n\n            /**\n             * The CSS class added to an event when it has unsaved modifications\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            dirtyCls : 'b-sch-dirty',\n\n            /**\n             * The CSS class added to an event when it is currently committing changes\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            committingCls : 'b-sch-committing',\n\n            /**\n             * The CSS class added to an event/assignment when it ends outside of the visible time range.\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            endsOutsideViewCls : 'b-sch-event-endsoutside',\n\n            /**\n             * The CSS class added to an event/assignment when it starts outside of the visible time range.\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            startsOutsideViewCls : 'b-sch-event-startsoutside',\n\n            /**\n             * The CSS class added to an event/assignment when it is not draggable.\n             * @config {String}\n             * @default\n             * @private\n             * @category CSS\n             */\n            fixedEventCls : 'b-sch-event-fixed'\n        };\n    }\n\n    static configurable = {\n        /**\n         * Controls how much space to leave between stacked event bars in px.\n         *\n         * Value will be constrained by half the row height in horizontal mode.\n         *\n         * @prp {Number}\n         * @default\n         * @category Scheduled events\n         */\n        barMargin : 10,\n\n        /**\n         * Specify `true` to force rendered events/tasks to fill entire ticks. This only affects rendering, start\n         * and end dates retain their value on the data level.\n         *\n         * When enabling `fillTicks` you should consider either disabling EventDrag/TaskDrag and EventResize/TaskResize,\n         * or enabling {@link Scheduler/view/mixin/TimelineDateMapper#config-snap}. Otherwise their behaviour might not\n         * be what a user expects.\n         *\n         * @prp {Boolean}\n         * @default\n         * @category Scheduled events\n         */\n        fillTicks : false,\n\n        resourceMargin : null,\n\n        /**\n         * Event color used by default. Events and resources can specify their own color, with priority order being:\n         * Event -> Resource -> Scheduler default.\n         *\n         * Specify `null` to not apply a default color and take control using custom CSS (an easily overridden color\n         * will be used to make sure events are still visible).\n         *\n         * For available standard colors, see {@link Scheduler.model.mixin.EventModelMixin#typedef-EventColor}.\n         *\n         * @prp {EventColor} eventColor\n         * @category Scheduled events\n         */\n        eventColor : 'green',\n\n        /**\n         * Event style used by default. Events and resources can specify their own style, with priority order being:\n         * Event -> Resource -> Scheduler default. Determines the appearance of the event by assigning a CSS class\n         * to it. Available styles are:\n         *\n         * * `'plain'` (default) - flat look\n         * * `'border'` - has border in darker shade of events color\n         * * `'colored'` - has colored text and wide left border in same color\n         * * `'hollow'` - only border + text until hovered\n         * * `'line'` - as a line with the text below it\n         * * `'dashed'` - as a dashed line with the text below it\n         * * `'minimal'` - as a thin line with small text above it\n         * * `'rounded'` - minimalistic style with rounded corners\n         * * `null` - do not apply a default style and take control using custom CSS (easily overridden basic styling will be used).\n         *\n         * In addition, there are two styles intended to be used when integrating with Bryntum Calendar. To match\n         * the look of Calendar events, you can use:\n         *\n         * * `'calendar'` - a variation of the \"colored\" style matching the default style used by Calendar\n         * * `'interday'` - a variation of the \"plain\" style, for interday events\n         *\n         * @prp {'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null}\n         * @default\n         * @category Scheduled events\n         */\n        eventStyle : 'plain',\n\n        /**\n         * The width/height (depending on vertical / horizontal mode) of all the time columns.\n         *\n         * There is a limit for the tick size value. Its minimal allowed value is calculated so ticks would fit the\n         * available space. Only applicable when {@link Scheduler.view.TimelineBase#config-forceFit} is set to\n         * `false`. To set `tickSize` freely skipping that limitation please set\n         * {@link Scheduler.view.TimelineBase#config-suppressFit} to `true`.\n         *\n         * @prp {Number}\n         * @category Scheduled events\n         */\n        tickSize : null\n    };\n\n    //endregion\n\n    //region Settings\n\n    updateFillTicks(fillTicks) {\n        if (!this.isConfiguring) {\n            this.timeAxis.forceFullTicks = fillTicks && this.snap;\n\n            this.refreshWithTransition();\n\n            this.trigger('stateChange');\n        }\n    }\n\n    changeBarMargin(margin) {\n        ObjectHelper.assertNumber(margin, 'barMargin');\n\n        // bar margin should not exceed half of the row height\n        if (this.isHorizontal && this.rowHeight) {\n            return Math.min(Math.ceil(this.rowHeight / 2), margin);\n        }\n\n        return margin;\n    }\n\n    updateBarMargin() {\n        if (this.rendered) {\n            this.currentOrientation.onBeforeRowHeightChange();\n            this.refreshWithTransition();\n            this.trigger('stateChange');\n        }\n    }\n\n    // Documented in SchedulerEventRendering to not show up in Gantt docs\n    get resourceMargin() {\n        return this._resourceMargin == null ? this.barMargin : this._resourceMargin;\n    }\n\n    changeResourceMargin(margin) {\n        ObjectHelper.assertNumber(margin, 'resourceMargin');\n\n        // resource margin should not exceed half of the row height\n        if (this.isHorizontal && this.rowHeight) {\n            return Math.min(Math.ceil(this.rowHeight / 2), margin);\n        }\n\n        return margin;\n    }\n\n    updateResourceMargin() {\n        if (this.rendered) {\n            this.currentOrientation.onBeforeRowHeightChange();\n            this.refreshWithTransition();\n        }\n    }\n\n    changeTickSize(width) {\n        ObjectHelper.assertNumber(width, 'tickSize');\n\n        return width;\n    }\n\n    updateTickSize(width) {\n        this.timeAxisViewModel.tickSize = width;\n    }\n\n    get tickSize() {\n        return this.timeAxisViewModel.tickSize;\n    }\n\n    /**\n     * Predefined event colors, useful in combos etc.\n     * @type {String[]}\n     * @category Scheduled events\n     */\n    static get eventColors() {\n        // These are the colors available by default for Scheduler and Gantt\n        // They classes are located in eventstyles.scss\n        return ['red', 'pink', 'purple', 'magenta', 'violet', 'indigo', 'blue', 'cyan', 'teal', 'green', 'gantt-green', 'lime', 'yellow', 'orange', 'deep-orange', 'gray', 'light-gray'];\n    }\n\n    /**\n     * Predefined event styles , useful in combos etc.\n     * @type {String[]}\n     * @category Scheduled events\n     */\n    static get eventStyles() {\n        return ['plain', 'border', 'hollow', 'colored', 'line', 'dashed', 'minimal', 'rounded'];\n    }\n\n    updateEventStyle(style) {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n            this.trigger('stateChange');\n        }\n    }\n\n    updateEventColor(color) {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n            this.trigger('stateChange');\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport Scroller from '../../../Core/helper/util/Scroller.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineScroll\n */\nconst\n    maintainVisibleStart = {\n        maintainVisibleStart : true\n    },\n    defaultScrollOptions = {\n        block : 'nearest'\n    };\n\n/**\n * Functions for scrolling to events, dates etc.\n *\n * @mixin\n */\nexport default Target => class TimelineScroll extends (Target || Base) {\n    static get $name() {\n        return 'TimelineScroll';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * This config defines the size of the start and end invisible parts of the timespan when {@link #config-infiniteScroll} set to `true`.\n             *\n             * It should be provided as a coefficient, which will be multiplied by the size of the scheduling area.\n             *\n             * For example, if `bufferCoef` is `5` and the panel view width is 200px then the timespan will be calculated to\n             * have approximately 1000px (`5 * 200`) to the left and 1000px to the right of the visible area, resulting\n             * in 2200px of totally rendered content.\n             *\n             * @config {Number}\n             * @category Infinite scroll\n             * @default\n             */\n            bufferCoef : 5,\n\n            /**\n             * This config defines the scroll limit, which, when exceeded will cause a timespan shift.\n             * The limit is calculated as the `panelWidth * {@link #config-bufferCoef} * bufferThreshold`. During scrolling, if the left or right side\n             * has less than that of the rendered content - a shift is triggered.\n             *\n             * For example if `bufferCoef` is `5` and the panel view width is 200px and `bufferThreshold` is 0.2, then the timespan\n             * will be shifted when the left or right side has less than 200px (5 * 200 * 0.2) of content.\n             * @config {Number}\n             * @category Infinite scroll\n             * @default\n             */\n            bufferThreshold : 0.2,\n\n            /**\n             * Configure as `true` to automatically adjust the panel timespan during scrolling in the time dimension,\n             * when the scroller comes close to the start/end edges.\n             *\n             * The actually rendered timespan in this mode (and thus the amount of HTML in the DOM) is calculated based\n             * on the {@link #config-bufferCoef} option, and is thus not controlled by the {@link Scheduler/view/TimelineBase#config-startDate}\n             * and {@link Scheduler/view/TimelineBase#config-endDate} configs. The moment when the timespan shift\n             * happens is determined by the {@link #config-bufferThreshold} value.\n             *\n             * To specify initial point in time to view, supply the\n             * {@link Scheduler/view/TimelineBase#config-visibleDate} config.\n             *\n             * @config {Boolean} infiniteScroll\n             * @category Infinite scroll\n             * @default\n             */\n            infiniteScroll : false\n        };\n    }\n\n    initScroll() {\n        const\n            me = this,\n            {\n                isHorizontal,\n                visibleDate\n            }  = me;\n\n        super.initScroll();\n\n        const { scrollable } = isHorizontal ? me.timeAxisSubGrid : me;\n\n        scrollable.ion({\n            scroll  : 'onTimelineScroll',\n            thisObj : me\n        });\n\n        // Ensure the TimeAxis starts life at the correct size with buffer zones\n        // outside the visible window.\n        if (me.infiniteScroll) {\n            const\n                setTimeSpanOptions     = visibleDate ? { ...visibleDate, visibleDate : visibleDate.date } : { visibleDate : me.viewportCenterDate, block : 'center' },\n                { startDate, endDate } = me.timeAxisViewModel.calculateInfiniteScrollingDateRange(setTimeSpanOptions.visibleDate, setTimeSpanOptions.block === 'center');\n\n            // Don't ask to maintain visible start - we're initializing - there's no visible start yet.\n            // If there's a visibleDate set, it will execute its scroll on paint.\n            me.setTimeSpan(\n                startDate,\n                endDate,\n                setTimeSpanOptions\n            );\n        }\n    }\n\n    /**\n     * A {@link Core.helper.util.Scroller} which scrolls the time axis in whatever {@link Scheduler.view.Scheduler#config-mode} the\n     * Scheduler is configured, either `horiontal` or `vertical`.\n     *\n     * The width and height dimensions are replaced by `size`. So this will expose the following properties:\n     *\n     *    - `clientSize` The size of the time axis viewport.\n     *    - `scrollSize` The full scroll size of the time axis viewport\n     *    - `position` The position scrolled to along the time axis viewport\n     *\n     * @property {Core.helper.util.Scroller}\n     * @readonly\n     * @category Scrolling\n     */\n    get timelineScroller() {\n        const me = this;\n\n        if (!me.scrollInitialized) {\n            me.initScroll();\n        }\n        return me._timelineScroller || (me._timelineScroller = new TimelineScroller({\n            widget       : me,\n            scrollable   : me.isHorizontal ? me.timeAxisSubGrid.scrollable : me.scrollable,\n            isHorizontal : me.isHorizontal\n        }));\n    }\n\n    doDestroy() {\n        this._timelineScroller?.destroy();\n\n        super.doDestroy();\n    }\n\n    onTimelineScroll({ source }) {\n        // On scroll, check if we are nearing the end to see if the sliding window needs moving.\n        // onSchedulerHorizontalScroll is delayed to animationFrame\n        if (this.infiniteScroll) {\n            this.checkTimeAxisScroll(source[this.isHorizontal ? 'x' : 'y']);\n        }\n    }\n\n    checkTimeAxisScroll(scrollPos) {\n        const\n            me             = this,\n            scrollable     = me.timelineScroller,\n            { clientSize } = scrollable,\n            requiredSize   = clientSize * me.bufferCoef,\n            limit          = requiredSize * me.bufferThreshold,\n            maxScroll      = scrollable.maxPosition,\n            { style }      = me.timeAxisSubGrid.virtualScrollerElement;\n\n        // if scroll violates limits let's shift timespan\n        if ((maxScroll - scrollPos < limit) || scrollPos < limit) {\n            // If they were dragging the thumb, this must be a one-time thing. They *must* lose contact\n            // with the thumb when the window shift occurs and the thumb zooms back to the center.\n            // Changing for a short time to overflow:hidden terminates the thumb drag.\n            // They can start again from the center, the reset happens very quickly.\n            style.overflow = 'hidden';\n            style.pointerEvents = 'none';\n\n            // Avoid content height changing when scrollbar disappears\n            style.paddingBottom = `${DomHelper.scrollBarWidth}px`;\n\n            me.setTimeout(() => {\n                style.overflow = '';\n                style.paddingBottom = '';\n                style.pointerEvents = '';\n            }, 100);\n\n            me.shiftToDate(me.getDateFromCoordinate(scrollPos, null, true, false, true));\n        }\n    }\n\n    shiftToDate(date, centered) {\n        const newRange = this.timeAxisViewModel.calculateInfiniteScrollingDateRange(date, centered);\n\n        // this will trigger a refresh (`refreshKeepingScroll`) which will perform `restoreScrollState` and sync the scrolling position\n        this.setTimeSpan(newRange.startDate, newRange.endDate, maintainVisibleStart);\n    }\n\n    // If we change to infinite scrolling dynamically, it should create the buffer zones.\n    updateInfiniteScroll(infiniteScroll) {\n        // At construction time, this is handled in initScroll.\n        // This is just here to handle dynamic updates.\n        if (!this.isConfiguring && infiniteScroll) {\n            this.checkTimeAxisScroll(this.timelineScroller.position);\n        }\n    }\n\n    //region Scroll to date\n\n    /**\n     * Scrolls the timeline \"tick\" encapsulating the passed `Date` into view according to the passed options.\n     * @param {Date} date The date to which to scroll the timeline\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     */\n    async scrollToDate(date, options = {}) {\n        const\n            me               = this,\n            {\n                timeAxis,\n                visibleDateRange,\n                infiniteScroll\n            }              = me,\n            {\n                unit,\n                increment\n            }              = timeAxis,\n            edgeOffset     = options.edgeOffset || 0,\n            visibleWidth   = DateHelper.ceil(visibleDateRange.endDate, increment + ' ' + unit) - DateHelper.floor(visibleDateRange.startDate, increment + ' ' + unit),\n            direction      = date > me.viewportCenterDate ? 1 : -1,\n            extraScroll    = (infiniteScroll ? visibleWidth * me.bufferCoef * me.bufferThreshold : (options.block === 'center' ? visibleWidth / 2 : (edgeOffset ? me.getMilliSecondsPerPixelForZoomLevel(me.viewPreset) * edgeOffset : 0))) * direction,\n            visibleDate    = new Date(date.getTime() + extraScroll),\n            shiftDirection = visibleDate > timeAxis.endDate ? 1 : visibleDate < timeAxis.startDate ? -1 : 0;\n\n        // Required visible date outside TimeAxis and infinite scrolling, that has opinions about how\n        // much scroll range has to be created after the target date.\n        if (shiftDirection && me.infiniteScroll) {\n            me.shiftToDate(new Date(date - extraScroll), null, true);\n            // shift to date could trigger a native browser async scroll out of our control. If a scroll\n            // happens during scrollToCoordinate, the scrolling is cancelled so we wait a bit here\n            await me.nextAnimationFrame();\n        }\n\n        const\n            scrollerViewport = me.timelineScroller.viewport,\n            localCoordinate  = me.getCoordinateFromDate(date, true),\n            // Available space can be less than tick size (Export.t.js in Gantt)\n            width            = Math.min(me.timeAxisViewModel.tickSize, me.timeAxisViewModel.availableSpace),\n            target           = me.isHorizontal\n                // In RTL coordinate is for the right edge of the tick, so we need to subtract width\n                ? new Rectangle(me.getCoordinateFromDate(date, false) - (me.rtl ? width : 0), scrollerViewport.y, width, scrollerViewport.height)\n                : new Rectangle(scrollerViewport.x, me.getCoordinateFromDate(date, false), scrollerViewport.width, me.timeAxisViewModel.tickSize);\n\n        await me.scrollToCoordinate(localCoordinate, target, date, options);\n    }\n\n    /**\n     * Scrolls to current time.\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     */\n    scrollToNow(options = {}) {\n        return this.scrollToDate(new Date(), options);\n    }\n\n    /**\n     * Used by {@link #function-scrollToDate} to scroll to correct coordinate.\n     * @param {Number} localCoordinate Coordinate to scroll to\n     * @param {Date} date Date to scroll to, used for reconfiguring the time axis\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @private\n     * @category Scrolling\n     */\n    async scrollToCoordinate(localCoordinate, target, date, options = {}) {\n        const me = this;\n\n        // Not currently have this date in a timeaxis. Ignore negative scroll in weekview, it can be just 'filtered' with\n        // startTime/endTime config\n        if (localCoordinate < 0) {\n            // adjust the timeaxis first\n            const\n                visibleSpan         = me.endDate - me.startDate,\n                { unit, increment } = me.timeAxis,\n                newStartDate        = DateHelper.floor(new Date(date.getTime() - (visibleSpan / 2)), increment + ' ' + unit),\n                newEndDate          = DateHelper.add(newStartDate, visibleSpan);\n\n            // We're trying to reconfigure time span to current dates, which means we are as close to center as it\n            // could be. Do nothing then.\n            // covered by 1102_panel_api\n            if (newStartDate - me.startDate !== 0 && newEndDate - me.endDate !== 0) {\n                me.setTimeSpan(newStartDate, newEndDate);\n\n                return me.scrollToDate(date, options);\n            }\n\n            return;\n        }\n\n        await me.timelineScroller.scrollIntoView(target, options);\n\n        // Horizontal scroll is triggered on next frame in SubGrid.js, view is not up to date yet. Resolve on next frame\n        return !me.isDestroyed && me.nextAnimationFrame();\n    }\n\n    //endregion\n\n    //region Relative scrolling\n    // These methods are important to users because although they are mixed into the top level Grid/Scheduler,\n    // for X scrolling the explicitly target the SubGrid that holds the scheduler.\n\n    /**\n     * Get/set the `scrollLeft` value of the SubGrid that holds the scheduler.\n     *\n     * This may be __negative__ when the writing direction is right-to-left.\n     * @property {Number}\n     * @category Scrolling\n     */\n    set scrollLeft(left) {\n        this.timeAxisSubGrid.scrollable.element.scrollLeft = left;\n    }\n\n    get scrollLeft() {\n        return this.timeAxisSubGrid.scrollable.element.scrollLeft;\n    }\n\n    /**\n     * Get/set the writing direction agnostic horizontal scroll position.\n     *\n     * This is always the __positive__ offset from the scroll origin whatever the writing\n     * direction in use.\n     *\n     * Applies to the SubGrid that holds the scheduler\n     * @property {Number}\n     * @category Scrolling\n     */\n    set scrollX(x) {\n        this.timeAxisSubGrid.scrollable.x = x;\n    }\n\n    get scrollX() {\n        return this.timeAxisSubGrid.scrollable.x;\n    }\n\n    /**\n     * Get/set vertical scroll\n     * @property {Number}\n     * @category Scrolling\n     */\n    set scrollTop(top) {\n        this.scrollable.y = top;\n    }\n\n    get scrollTop() {\n        return this.scrollable.y;\n    }\n\n    /**\n     * Horizontal scrolling. Applies to the SubGrid that holds the scheduler\n     * @param {Number} x\n     * @param {ScrollOptions|Boolean} [options] How to scroll. May be passed as `true` to animate.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     * @category Scrolling\n     */\n    scrollHorizontallyTo(coordinate, options = true) {\n        return this.timeAxisSubGrid.scrollable.scrollTo(coordinate, null, options);\n    }\n\n    /**\n     * Vertical scrolling\n     * @param {Number} y\n     * @param {ScrollOptions|Boolean} [options] How to scroll. May be passed as `true` to animate.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     * @category Scrolling\n     */\n    scrollVerticallyTo(y, options = true) {\n        return this.scrollable.scrollTo(null, y, options);\n    }\n\n    /**\n     * Scrolls the subgrid that contains the scheduler\n     * @param {Number} x\n     * @param {ScrollOptions|Boolean} [options] How to scroll. May be passed as `true` to animate.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     * @category Scrolling\n     */\n    scrollTo(x, options = true) {\n        return this.timeAxisSubGrid.scrollable.scrollTo(x, null, options);\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n\n// Internal class used to interrogate and manipulate the timeline scroll position.\n// This delegates all operations to the appropriate Scroller, horizontal or vertical.\nclass TimelineScroller extends Scroller {\n    static get configurable() {\n        return {\n            position : null,\n            x        : null,\n            y        : null\n        };\n    }\n\n    // This class is passive about configuring the element.\n    // It has no opinions about *how* the overflow is handled.\n    updateOverflowX() {}\n    updateOverflowY() {}\n\n    onScroll(e) {\n        super.onScroll(e);\n        this._position = null;\n    }\n\n    syncPartners(force) {\n        this.scrollable.syncPartners(force);\n    }\n\n    updatePosition(position) {\n        this.scrollable[this.isHorizontal ? 'x' : 'y'] = position;\n    }\n\n    get viewport() {\n        return this.scrollable.viewport;\n    }\n\n    get position() {\n        return this._position = this.scrollable[this.isHorizontal ? 'x' : 'y'];\n    }\n\n    get clientSize() {\n        return this.scrollable[`client${this.isHorizontal ? 'Width' : 'Height'}`];\n    }\n\n    get scrollSize() {\n        return this.scrollable[`scroll${this.isHorizontal ? 'Width' : 'Height'}`];\n    }\n\n    get maxPosition() {\n        return this.scrollable[`max${this.isHorizontal ? 'X' : 'Y'}`];\n    }\n\n    scrollTo(position, options) {\n        return this.isHorizontal ? this.scrollable.scrollTo(position, null, options) : this.scrollable.scrollTo(null, position, options);\n    }\n\n    scrollBy(xDelta = 0, yDelta = 0, options = defaultScrollOptions) {\n        // Use the correct delta by default, but if it's zero, accommodate axis error.\n        return this.isHorizontal ? this.scrollable.scrollBy(xDelta || yDelta, 0, options) : this.scrollable.scrollBy(0, yDelta || xDelta, options);\n    }\n\n    scrollIntoView() {\n        return this.scrollable.scrollIntoView(...arguments);\n    }\n\n    // We accommodate mistakes. Setting X and Y sets the appropriate scroll axis position\n    changeX(x) {\n        this.position = x;\n    }\n\n    changeY(y) {\n        this.position = y;\n    }\n\n    get x() {\n        return this.position;\n    }\n\n    set x(x) {\n        this.scrollable[this.isHorizontal ? 'x' : 'y'] = x;\n    }\n\n    get y() {\n        return this.position;\n    }\n\n    set y(y) {\n        this.scroller[this.isHorizontal ? 'x' : 'y'] = y;\n    }\n\n    get clientWidth() {\n        return this.clientSize;\n    }\n\n    get clientHeight() {\n        return this.clientSize;\n    }\n\n    get scrollWidth() {\n        return this.scrollSize;\n    }\n\n    get scrollHeight() {\n        return this.scrollSize;\n    }\n\n    get maxX() {\n        return this.maxPosition;\n    }\n\n    get maxY() {\n        return this.maxPosition;\n    }\n}\n", "import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineState\n */\n\nconst copyProperties = [\n    'barMargin'\n];\n\n/**\n * Mixin for Timeline base that handles state. It serializes the following timeline properties:\n *\n * * barMargin\n * * zoomLevel\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class TimelineState extends (Target || Base) {\n    static get $name() {\n        return 'TimelineState';\n    }\n\n    /**\n     * Gets or sets timeline's state. Check out {@link Scheduler.view.mixin.TimelineState} mixin for details.\n     * @member {Object} state\n     * @property {Object[]} state.columns\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.style\n     * @property {String} state.selectedCell\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @property {Object} state.subGrids\n     * @property {Number} state.barMargin\n     * @property {Number} state.zoomLevel\n     * @category State\n     */\n\n    /**\n     * Get timeline's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\n     * selectedRecordId, column states and store state etc.\n     * @returns {Object} State object to be serialized\n     * @private\n     */\n    getState() {\n        const\n            me    = this,\n            state = ObjectHelper.copyProperties(super.getState(), me, copyProperties);\n\n        state.zoomLevel = me.zoomLevel;\n\n        state.zoomLevelOptions = {\n            startDate  : me.startDate,\n            endDate    : me.endDate,\n            // With infinite scroll reading viewportCenterDate too early will lead to exception\n            centerDate : !me.infiniteScroll || me.timeAxisViewModel.availableSpace ? me.viewportCenterDate : undefined,\n            width      : me.tickSize\n        };\n\n        return state;\n    }\n\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n\n        me.suspendRefresh();\n\n        ObjectHelper.copyProperties(me, state, copyProperties);\n\n        super.applyState(state);\n\n        if (state.zoomLevel != null) {\n            // Do not restore left scroll, infinite scroll should do all the work\n            if (me.infiniteScroll) {\n                if (state?.scroll?.scrollLeft) {\n                    state.scroll.scrollLeft = {};\n                }\n            }\n\n            if (me.isPainted) {\n                me.zoomToLevel(state.zoomLevel, state.zoomLevelOptions);\n            }\n            else {\n                me._zoomAfterPaint = { zoomLevel : state.zoomLevel, zoomLevelOptions : state.zoomLevelOptions };\n            }\n        }\n\n        me.resumeRefresh(true);\n    }\n\n    onPaint(...args) {\n        super.onPaint(...args);\n\n        if (this._zoomAfterPaint) {\n            const { zoomLevel, zoomLevelOptions } = this._zoomAfterPaint;\n\n            this.zoomToLevel(zoomLevel, zoomLevelOptions);\n\n            delete this._zoomAfterPaint;\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import GridHeader from '../../Grid/view/Header.js';\n\n/**\n * @module Scheduler/view/Header\n */\n\n/**\n * Custom header subclass which handles the existence of the special TimeAxisColumn\n *\n * @extends Grid/view/Header\n * @private\n */\nexport default class Header extends GridHeader {\n    static get $name() {\n        return 'SchedulerHeader';\n    }\n\n    refreshContent() {\n        // Only render contents into the header once as it contains the special rendering of the TimeAxisColumn\n        // In case ResizeObserver polyfill is used headers element will have resize monitors inserted and we should\n        // take that into account\n        // https://github.com/bryntum/support/issues/3444\n        if (!this.headersElement?.querySelector('.b-sch-timeaxiscolumn')) {\n            super.refreshContent();\n        }\n    }\n}\n", "import SubGrid from '../../Grid/view/SubGrid.js';\nimport Header from './Header.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/view/TimeAxisSubGrid\n */\n\n/**\n * Widget that encapsulates the SubGrid part of the scheduler which houses the timeline view.\n * @extends Grid/view/SubGrid\n * @private\n */\nexport default class TimeAxisSubGrid extends SubGrid {\n\n    static get $name() {\n        return 'TimeAxisSubGrid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timeaxissubgrid';\n    }\n\n    static get configurable() {\n        return {\n            // A Scheduler's SubGrid doesn't accept external columns moving in\n            sealedColumns : true,\n\n            // Use Scheduler's Header class\n            headerClass : Header\n        };\n    }\n\n    startConfigure(config) {\n        const { grid : scheduler } = config;\n\n        // Scheduler references its TimeAxisSubGrid instance through this property.\n        scheduler.timeAxisSubGrid = this;\n\n        super.startConfigure(config);\n\n        if (scheduler.isHorizontal) {\n            config.header = {\n                cls : {\n                    'b-sticky-headers' : scheduler.stickyHeaders\n                }\n            };\n            // We don't use what the GridSubGrids mixin tells us to.\n            // We use the Sheduler's Header class.\n            delete config.headerClass;\n        }\n\n        // If user have not specified a width or flex for scheduler region, default to flex=1\n        if (!('flex' in config || 'width' in config)) {\n            config.flex = 1;\n        }\n    }\n\n    changeScrollable() {\n        const\n            me         = this,\n            scrollable = super.changeScrollable(...arguments);\n\n        // TimeAxisSubGrid's X axis is stretched by its canvas.\n        // We don't need the Scroller's default stretching implementation.\n        if (scrollable) {\n            Object.defineProperty(scrollable, 'scrollWidth', {\n                get() {\n                    return this.element?.scrollWidth ?? 0;\n                },\n                set() {\n                    // Setting the scroll width to be wide just updates the canvas side in Scheduler.\n                    // We do not need the Scroller's default stretcher element to be added.\n                    // Note that \"me\" here is the TimeAxisSubGrid, so we are calling Scheduler.\n                    me.grid.updateCanvasSize();\n                }\n            });\n        }\n\n        return scrollable;\n    }\n\n    handleHorizontalScroll(addCls = true) {\n        // Swallow scroll syncing calls that happen during view preset changes, that process triggers multiple when\n        // it first changes tickWidth, then scrolls to center and then an additional sync on scroll end\n        if (!this.grid._viewPresetChanging) {\n            super.handleHorizontalScroll(addCls);\n        }\n    }\n\n    /**\n     * This is an event handler triggered when the TimeAxisSubGrid changes size.\n     * Its height changes when content height changes, and that is not what we are\n     * interested in here. If the *width* changes, that means the visible viewport\n     * has changed size.\n     * @param {HTMLElement} element\n     * @param {Number} width\n     * @param {Number} height\n     * @param {Number} oldWidth\n     * @param {Number} oldHeight\n     * @private\n     */\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        const me = this;\n\n        // We, as the TimeAxisSubGrid dictate the scheduler viewport width\n        if (me.isPainted && width !== oldWidth) {\n            const\n                scheduler  = me.grid,\n                bodyHeight = scheduler._bodyRectangle.height;\n\n            // Avoid ResizeObserver errors when this operation may create a scrollbar\n            if (DomHelper.scrollBarWidth && width < oldWidth) {\n                me.monitorResize = false;\n            }\n            scheduler.onSchedulerViewportResize(width, bodyHeight, oldWidth, bodyHeight);\n\n            // Revert to monitoring on the next animation frame.\n            // This is to avoid \"ResizeObserver loop completed with undelivered notifications.\"\n            if (!me.monitorResize) {\n                me.requestAnimationFrame(() => me.monitorResize = true);\n            }\n        }\n\n        super.onInternalResize(...arguments);\n    }\n\n    // When restoring state we need to update time axis size immediately, resize event is not triggered fast enough to\n    // restore center date consistently\n    clearWidthCache() {\n        super.clearWidthCache();\n\n        // Check if we are in horizontal mode\n        if (this.owner.isHorizontal) {\n            this.owner.updateViewModelAvailableSpace(this.width);\n        }\n    }\n\n    async expand() {\n        const { owner } = this;\n\n        await super.expand();\n\n        if (owner.isPainted) {\n            owner.timeAxisViewModel.update(this.width, false, true);\n        }\n    }\n}\n\n// Register this widget type with its Factory\nTimeAxisSubGrid.initClass();\n", "import GlobalEvents from '../../Core/GlobalEvents.js';\nimport GridBase from '../../Grid/view/GridBase.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport ResizeMonitor from '../../Core/helper/ResizeMonitor.js';\nimport Collection from '../../Core/util/Collection.js';\nimport IdHelper from '../../Core/helper/IdHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport TimeAxis from '../data/TimeAxis.js';\n\nimport TimeAxisViewModel from './model/TimeAxisViewModel.js';\nimport TimelineDateMapper from './mixin/TimelineDateMapper.js';\nimport TimelineDomEvents from './mixin/TimelineDomEvents.js';\nimport TimelineViewPresets from './mixin/TimelineViewPresets.js';\nimport TimelineZoomable from './mixin/TimelineZoomable.js';\nimport RecurringEvents from './mixin/RecurringEvents.js';\nimport TimelineEventRendering from './mixin/TimelineEventRendering.js';\nimport TimelineScroll from './mixin/TimelineScroll.js';\nimport TimelineState from './mixin/TimelineState.js';\nimport './TimeAxisSubGrid.js';\n\nconst\n    exitTransition = {\n        fn                : 'exitTransition',\n        delay             : 0,\n        cancelOutstanding : true\n    },\n    inRange = (v, r0, r1) => (r0 == null)\n        ? (r1 == null || v < r1)\n        : (r1 == null)\n            ? v >= r0\n            : (r0 < r1)\n                ? (r0 <= v && v < r1)       // 5 in [1, 10]  (after 1 and before 10)\n                : (v < r1 || r0 <= v),      // 5 in [10, 1]  (after 10 or before 1)\n    isWorkingTime = (d, wt) => inRange(d.getDay(), wt.fromDay, wt.toDay) && inRange(d.getHours(), wt.fromHour, wt.toHour),\n    emptyObject   = {};\n\n/**\n * @module Scheduler/view/TimelineBase\n */\n\n/**\n * Options accepted by the Scheduler's {@link Scheduler.view.Scheduler#config-visibleDate} property.\n *\n * @typedef {Object} VisibleDate\n * @property {Date} date The date to bring into view.\n * @property {'start'|'end'|'center'|'nearest'} [block] How far to scroll the date.\n * @property {Number} [edgeOffset] edgeOffset A margin around the date to bring into view.\n * @property {AnimateScrollOptions|Boolean|Number} [animate] Set to `true` to animate the scroll by 300ms,\n * or the number of milliseconds to animate over, or an animation config object.\n */\n\n/**\n * Abstract base class used by timeline based components such as Scheduler and Gantt. Based on Grid, supplies a \"locked\"\n * region for columns and a \"normal\" for rendering of events etc.\n * @abstract\n *\n * @mixes Scheduler/view/mixin/TimelineDateMapper\n * @mixes Scheduler/view/mixin/TimelineDomEvents\n * @mixes Scheduler/view/mixin/TimelineEventRendering\n * @mixes Scheduler/view/mixin/TimelineScroll\n * @mixes Scheduler/view/mixin/TimelineState\n * @mixes Scheduler/view/mixin/TimelineViewPresets\n * @mixes Scheduler/view/mixin/TimelineZoomable\n * @mixes Scheduler/view/mixin/RecurringEvents\n *\n * @extends Grid/view/Grid\n */\nexport default class TimelineBase extends GridBase.mixin(\n    TimelineDateMapper,\n    TimelineDomEvents,\n    TimelineEventRendering,\n    TimelineScroll,\n    TimelineState,\n    TimelineViewPresets,\n    TimelineZoomable,\n    RecurringEvents\n) {\n    //region Config\n\n    static get $name() {\n        return 'TimelineBase';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timelinebase';\n    }\n\n    static configurable = {\n        partnerSharedConfigs : {\n            value : ['timeAxisViewModel', 'timeAxis', 'viewPreset'],\n\n            $config : {\n                merge : 'distinct'\n            }\n        },\n\n        /**\n         * Get/set startDate. Defaults to current date if none specified.\n         *\n         * When using {@link #config-infiniteScroll}, use {@link #config-visibleDate} to control initially visible date\n         * instead.\n         *\n         * **Note:** If you need to set start and end date at the same time, use {@link #function-setTimeSpan} method.\n         * @member {Date} startDate\n         * @category Common\n         */\n        /**\n         * The start date of the timeline (if not configure with {@link #config-infiniteScroll}).\n         *\n         * If omitted, and a TimeAxis has been set, the start date of the provided {@link Scheduler.data.TimeAxis} will\n         * be used. If no TimeAxis has been configured, it'll use the start/end dates of the loaded event dataset. If no\n         * date information exists in the event data set, it defaults to the current date and time.\n         *\n         * If a string is supplied, it will be parsed using\n         * {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat}.\n         *\n         * When using {@link #config-infiniteScroll}, use {@link #config-visibleDate} to control initially visible date\n         * instead.\n         *\n         * **Note:** If you need to set start and end date at the same time, use the {@link #function-setTimeSpan} method.\n         * @config {Date|String}\n         * @category Common\n         */\n        startDate : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n\n        /**\n         * Get/set endDate. Defaults to startDate + default span of the used ViewPreset.\n         *\n         * **Note:** If you need to set start and end date at the same time, use {@link #function-setTimeSpan} method.\n         * @member {Date} endDate\n         * @category Common\n         */\n        /**\n         * The end date of the timeline (if not configure with {@link #config-infiniteScroll}).\n         *\n         * If omitted, it will be calculated based on the {@link #config-startDate} setting and the 'defaultSpan'\n         * property of the current {@link #config-viewPreset}.\n         *\n         * If a string is supplied, it will be parsed using\n         * {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat}.\n         *\n         * **Note:** If you need to set start and end date at the same time, use the {@link #function-setTimeSpan} method.\n         * @config {Date|String}\n         * @category Common\n         */\n        endDate : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n\n        /**\n         * When set, the text in the major time axis header sticks in the scrolling viewport as long as possible.\n         * @config {Boolean}\n         * @default\n         * @category Time axis\n         */\n        stickyHeaders : true,\n\n        /**\n         * A scrolling `options` object describing the scroll action, including a `date` option\n         * which references a `Date`. See {@link #function-scrollToDate} for details about scrolling options.\n         *\n         * ```javascript\n         *     // The date we want in the center of the Scheduler viewport\n         *     myScheduler.visibleDate = {\n         *         date    : new Date(2023, 5, 17, 12),\n         *         block   : 'center',\n         *         animate : true\n         *     };\n         * ```\n         * @member {Object} visibleDate\n         * @category Common\n         */\n        /**\n         * A date to bring into view initially on the scrollable timeline.\n         *\n         * This may be configured as either a `Date` or a scrolling `options` object describing\n         * the scroll action, including a `date` option which references a `Date`.\n         *\n         * See {@link #function-scrollToDate} for details about scrolling options.\n         *\n         * Note that if a naked `Date` is passed, it will be stored internally as a scrolling options object\n         * using the following defaults:\n         *\n         * ```javascript\n         * {\n         *     date  : <The Date object>,\n         *     block : 'nearest'\n         * }\n         * ```\n         *\n         * This moves the date into view by the shortest scroll, so that it just appears at an edge.\n         *\n         * To bring your date of interest to the center of the viewport, configure your\n         * Scheduler thus:\n         *\n         * ```javascript\n         *     visibleDate : {\n         *         date  : new Date(2023, 5, 17, 12),\n         *         block : 'center'\n         *     }\n         * ```\n         * @config {Date|VisibleDate}\n         * @category Common\n         */\n        visibleDate : null,\n\n        /**\n         * CSS class to add to rendered events\n         * @config {String}\n         * @category CSS\n         * @private\n         */\n        eventCls : null,\n\n        /**\n         * Set to `true` to force the time columns to fit to the available space (horizontal or vertical depends on mode).\n         * Note that setting {@link #config-suppressFit} to `true`, will disable `forceFit` functionality. Zooming\n         * cannot be used when `forceFit` is set.\n         * @prp {Boolean}\n         * @default\n         * @category Time axis\n         */\n        forceFit : false,\n\n        /**\n         * Set to a time zone or a UTC offset. This will set the projects\n         * {@link Scheduler.model.ProjectModel#config-timeZone} config accordingly. As this config is only a referer,\n         * please se project's config {@link Scheduler.model.ProjectModel#config-timeZone documentation} for more\n         * information.\n         *\n         * ```javascript\n         * new Calendar(){\n         *   timeZone : 'America/Chicago'\n         * }\n         * ```\n         * @prp {String|Number} timeZone\n         * @category Misc\n         */\n        timeZone : null\n\n    };\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A valid JS day index between 0-6 (0: Sunday, 1: Monday etc.) to be considered the start day of the week.\n             * When omitted, the week start day is retrieved from the active locale class.\n             * @config {Number} weekStartDay\n             * @category Time axis\n             */\n\n            /**\n             * An object with format `{ fromDay, toDay, fromHour, toHour }` that describes the working days and hours.\n             * This object will be used to populate TimeAxis {@link Scheduler.data.TimeAxis#config-include} property.\n             *\n             * Using it results in a non-continuous time axis. Any ticks not covered by the working days and hours will\n             * be excluded. Events within larger ticks (for example if using week as the unit for ticks) will be\n             * stretched to fill the gap otherwise left by the non working hours.\n             *\n             * As with end dates, `toDay` and `toHour` are exclusive. Thus `toDay : 6` means that day 6 (saturday) will\n             * not be included.\n             *\n             *\n             * **NOTE:** When this feature is enabled {@link Scheduler.view.mixin.TimelineZoomable Zooming feature} is\n             * not supported. It's recommended to disable zooming controls:\n             *\n             * ```javascript\n             * new Scheduler({\n             *     zoomOnMouseWheel          : false,\n             *     zoomOnTimeAxisDoubleClick : false,\n             *     ...\n             * });\n             * ```\n             *\n             * @config {Object}\n             * @category Time axis\n             */\n            workingTime : null,\n\n            /**\n             * A backing data store of 'ticks' providing the input date data for the time axis of timeline panel.\n             * @member {Scheduler.data.TimeAxis} timeAxis\n             * @readonly\n             * @category Time axis\n             */\n\n            /**\n             * A {@link Scheduler.data.TimeAxis} config object or instance, used to create a backing data store of\n             * 'ticks' providing the input date data for the time axis of timeline panel. Created automatically if none\n             * supplied.\n             * @config {TimeAxisConfig|Scheduler.data.TimeAxis}\n             * @category Time axis\n             */\n            timeAxis : null,\n\n            /**\n             * The backing view model for the visual representation of the time axis.\n             * Either a real instance or a simple config object.\n             * @private\n             * @config {Scheduler.view.model.TimeAxisViewModel|TimeAxisViewModelConfig}\n             * @category Time axis\n             */\n            timeAxisViewModel : null,\n\n            /**\n             * You can set this option to `false` to make the timeline panel start and end on the exact provided\n             * {@link #config-startDate}/{@link #config-endDate} w/o adjusting them.\n             * @config {Boolean}\n             * @default\n             * @category Time axis\n             */\n            autoAdjustTimeAxis : true,\n\n            /**\n             * Affects drag drop and resizing of events when {@link Scheduler/view/mixin/TimelineDateMapper#config-snap}\n             * is enabled.\n             *\n             * If set to `true`, dates will be snapped relative to event start. e.g. for a zoom level with\n             * `timeResolution = { unit: \"s\", increment: \"20\" }`, an event that starts at 10:00:03 and is dragged would\n             * snap its start date to 10:00:23, 10:00:43 etc.\n             *\n             * When set to `false`, dates will be snapped relative to the timeAxis startDate (tick start)\n             * - 10:00:03 -> 10:00:20, 10:00:40 etc.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Scheduled events\n             */\n            snapRelativeToEventStartDate : false,\n\n            /**\n             * Set to `true` to prevent auto calculating of a minimal {@link Scheduler.view.mixin.TimelineEventRendering#property-tickSize}\n             * to always fit the content to the screen size. Setting this property on `true` will disable {@link #config-forceFit} behaviour.\n             * @config {Boolean}\n             * @default false\n             * @category Time axis\n             */\n            suppressFit : false,\n\n            /**\n             * CSS class to add to cells in the timeaxis column\n             * @config {String}\n             * @category CSS\n             * @private\n             */\n            timeCellCls : null,\n\n            scheduledEventName : null,\n\n            //dblClickTime : 200,\n\n            /**\n             * A CSS class to apply to each event in the view on mouseover.\n             * @config {String}\n             * @category CSS\n             * @private\n             */\n            overScheduledEventClass : null,\n\n            // allow the panel to prevent adding the hover CSS class in some cases - during drag drop operations\n            preventOverCls : false,\n\n            // This setting is set to true by features that need it\n            useBackgroundCanvas : false,\n\n            /**\n             * Set to `false` if you don't want event bar DOM updates to animate.\n             * @prp {Boolean}\n             * @default true\n             * @category Scheduled events\n             */\n            enableEventAnimations : true,\n\n            disableGridRowModelWarning : true,\n\n            // does not look good with locked columns and also interferes with event animations\n            animateRemovingRows : false,\n\n            /**\n             * Partners this Timeline panel with another Timeline in order to sync their region sizes (sub-grids like locked, normal will get the same width),\n             * start and end dates, view preset, zoom level and scrolling position. All these values will be synced with the timeline defined as the `partner`.\n             *\n             * - To add a new partner dynamically see {@link #function-addPartner} method.\n             * - To remove existing partner see {@link #function-removePartner} method.\n             * - To check if timelines are partners see {@link #function-isPartneredWith} method.\n             *\n             * Column widths and hide/show state are synced between partnered schedulers when the column set is identical.\n             * @config {Scheduler.view.TimelineBase}\n             * @category Time axis\n             */\n            partner : null,\n\n            schedulerRegion : 'normal',\n\n            transitionDuration : 200,\n            // internal timer id reference\n            animationTimeout   : null,\n\n            /**\n             * Region to which columns are added when they have none specified\n             * @config {String}\n             * @default\n             * @category Misc\n             */\n            defaultRegion : 'locked',\n\n            /**\n             * Decimal precision used when displaying durations, used by tooltips and DurationColumn.\n             * Specify `false` to use raw value\n             * @config {Number|Boolean}\n             * @default\n             * @category Common\n             */\n            durationDisplayPrecision : 1,\n\n            /**\n             * An object with configuration for the {@link Scheduler.column.TimeAxisColumn} in horizontal\n             * {@link Scheduler.view.SchedulerBase#config-mode}.\n             *\n             * Example:\n             *\n             * ```javascript\n             * new Scheduler({\n             *     timeAxisColumn : {\n             *         renderer : ({ record, cellElement }) => {\n             *             // output some markup as a layer below the events layer, you can draw a chart for example\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * @config {TimeAxisColumnConfig} timeAxisColumn\n             * @category Time axis\n             */\n\n            asyncEventSuffix : 'PreCommit'\n        };\n    }\n\n    timeCellSelector = null;\n\n    updateTimeZone(timeZone) {\n        if (this.project) {\n            if (this.isConfiguring) {\n                this.project._isConfiguringTimeZone = true;\n            }\n            this.project.timeZone = timeZone;\n        }\n    }\n\n    get timeZone() {\n        return this.project?.timeZone;\n    }\n\n    //endregion\n\n    //region Feature hooks\n\n    /**\n     * Populates the event context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown.\n     * @param {Scheduler.model.EventModel} options.eventRecord The context event.\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord The context resource.\n     * @param {Scheduler.model.AssignmentModel} options.assignmentRecord The context assignment if any.\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items.\n     * @internal\n     */\n    populateEventMenu() {}\n\n    /**\n     * Populates the time axis context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown.\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord The context resource.\n     * @param {Date} options.date The Date corresponding to the mouse position in the time axis.\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items.\n     * @internal\n     */\n    populateScheduleMenu() {}\n\n    // Called when visible date range potentially changes such as when scrolling in\n    // the time axis.\n    onVisibleDateRangeChange(range) {\n        if (!this.handlingVisibleDateRangeChange) {\n            const\n                me                    = this,\n                { _visibleDateRange } = me,\n                dateRangeChange       = !_visibleDateRange || (_visibleDateRange.startDate - range.startDate || _visibleDateRange.endDate - range.endDate);\n\n            if (dateRangeChange) {\n                me.timeView.range                 = range;\n                me.handlingVisibleDateRangeChange = true;\n\n                /**\n                 * Fired when the range of dates visible within the viewport changes. This will be when\n                 * scrolling along a time axis.\n                 *\n                 * __Note__ that this event will fire frequently during scrolling, so any listener\n                 * should probably be added with the `buffer` option to slow down the calls to your\n                 * handler function :\n                 *\n                 * ```javascript\n                 * listeners : {\n                 *     visibleDateRangeChange({ old, new }) {\n                 *         this.updateRangeRequired(old, new);\n                 *     },\n                 *     // Only call once. 300 ms after the last event was detected\n                 *     buffer : 300\n                 * }\n                 * ```\n                 * @event visibleDateRangeChange\n                 * @param {Scheduler.view.Scheduler} source This Scheduler instance.\n                 * @param {Object} old The old date range\n                 * @param {Date} old.startDate the old start date.\n                 * @param {Date} old.endDate the old end date.\n                 * @param {Object} new The new date range\n                 * @param {Date} new.startDate the new start date.\n                 * @param {Date} new.endDate the new end date.\n                 */\n                me.trigger('visibleDateRangeChange', {\n                    old : _visibleDateRange,\n                    new : range\n                });\n                me.handlingVisibleDateRangeChange = false;\n                me._visibleDateRange              = range;\n            }\n        }\n    }\n\n    // Called when visible resource range changes in vertical mode\n    onVisibleResourceRangeChange() {}\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        const me = this;\n\n        super.construct(config);\n\n        me.$firstVerticalOverflow = true;\n\n        me.initDomEvents();\n\n        me.currentOrientation.init();\n\n        me.rowManager.ion({\n            refresh : () => {\n                me.forceLayout = false;\n            }\n        });\n    }\n\n    // Override from Grid.view.GridSubGrids\n    createSubGrid(region, config = {}) {\n        const\n            me                = this,\n            { stickyHeaders } = me;\n\n        // We are creating the TimeAxisSubGrid\n        if (region === (me.schedulerRegion || 'normal')) {\n            config.type = 'timeaxissubgrid';\n        }\n\n        // The assumption is that if we are in vertical mode, the locked SubGrid\n        // is used to house the verticalTimeAxis, and so it must all be overflow:visible\n        else if (region === 'locked' && stickyHeaders && me.isVertical) {\n            config.scrollable = {\n                overflowX : 'visible',\n                overflowY : 'visible'\n            };\n\n            // It's the child of the overflowElement\n            me.bodyContainer.classList.add('b-sticky-headers');\n        }\n\n        return super.createSubGrid(region, config);\n    }\n\n    doDestroy() {\n        const\n            me                                    = this,\n            { partneredWith, currentOrientation } = me;\n\n        currentOrientation?.destroy();\n\n        // Break links between this TimeLine and any partners.\n        if (partneredWith) {\n            partneredWith.forEach(p => {\n                me.removePartner(p);\n            });\n            partneredWith.destroy();\n        }\n        else {\n            me.timeAxisViewModel.destroy();\n            me.timeAxis.destroy();\n        }\n\n        super.doDestroy();\n    }\n\n    startConfigure(config) {\n        super.startConfigure(config);\n\n        // When the body height changes, we must update the SchedulerViewport's height\n        ResizeMonitor.addResizeListener(this.bodyContainer, this.onBodyResize.bind(this));\n\n        // partner needs to be initialized first so that the various shared\n        // configs are assigned first before we default them in.\n        this.getConfig('partner');\n    }\n\n    changeStartDate(startDate) {\n        if (typeof startDate === 'string') {\n            startDate = DateHelper.parse(startDate);\n        }\n        return startDate;\n    }\n\n    onPaint({ firstPaint }) {\n        // Upon first paint we need to pass the forceUpdate flag in case we are sharing the TimAxisViewModel\n        // with another Timeline which will already have done this.\n        if (firstPaint) {\n            // Take height from container element\n            // <remove-on-release>\n            // TODO: make flex element inherit height from parent (min-height: 100% doesn't work)\n            // </remove-on-release>\n            const\n                me             = this,\n                scrollable     = me.isHorizontal ? me.timeAxisSubGrid.scrollable : me.scrollable,\n                // Use exact subpixel available space so that tick size calculation is correct.\n                availableSpace = scrollable.element.getBoundingClientRect()[me.isHorizontal ? 'width' : 'height'];\n\n            // silent = true if infiniteScroll. If that is set, TimelineScroll.initScroll which is\n            // called by the base class's onPaint reconfigures the TAVM when it initializes.\n            me.timeAxisViewModel.update(availableSpace, me.infiniteScroll, true);\n\n            // If infiniteScroll caused the TAVM update to be silent, force the rendering to\n            // get hold of the scroll state and visible range\n            if (me.infiniteScroll) {\n                me.currentOrientation.doUpdateTimeView?.();\n            }\n        }\n\n        super.onPaint(...arguments);\n    }\n\n    onSchedulerHorizontalScroll(subGrid, scrollLeft, scrollX) {\n        // rerender cells in scheduler column on horizontal scroll to display events in view\n        this.currentOrientation.updateFromHorizontalScroll(scrollX);\n\n        super.onSchedulerHorizontalScroll(subGrid, scrollLeft, scrollX);\n    }\n\n    /**\n     * Overrides initScroll from Grid, listens for horizontal scroll to do virtual event rendering\n     * @private\n     */\n    initScroll() {\n        const me = this;\n\n        let frameCount = 0;\n\n        super.initScroll();\n\n        me.ion({\n            horizontalScroll : ({ subGrid, scrollLeft, scrollX }) => {\n                if (me.isPainted && subGrid === me.timeAxisSubGrid && !me.isDestroying && !me.refreshSuspended) {\n                    me.onSchedulerHorizontalScroll(subGrid, scrollLeft, scrollX);\n                }\n                frameCount++;\n            }\n        });\n\n        if (me.testPerformance === 'horizontal') {\n            me.setTimeout(() => {\n                const start     = performance.now();\n                let scrollSpeed = 5,\n                    direction   = 1;\n\n                const scrollInterval = me.setInterval(() => {\n                    scrollSpeed = scrollSpeed + 5;\n\n                    me.scrollX += (10 + Math.floor(scrollSpeed)) * direction;\n\n                    if (direction === 1 && me.scrollX > 5500) {\n                        direction   = -1;\n                        scrollSpeed = 5;\n                    }\n\n                    if (direction === -1 && me.scrollX <= 0) {\n                        const\n                            done    = performance.now(), // eslint-disable-line no-undef\n                            elapsed = done - start;\n\n                        const\n                            timePerFrame = elapsed / frameCount,\n                            fps          = Math.round((1000 / timePerFrame) * 10) / 10;\n\n                        clearInterval(scrollInterval);\n\n                        console.log(me.eventPositionMode, me.eventScrollMode, fps + 'fps');\n                    }\n                }, 0);\n            }, 500);\n        }\n    }\n\n    //endregion\n\n    /**\n     * Calls the specified function (returning its return value) and preserves the timeline center\n     * point. This is a useful way of retaining the user's visual context while making updates\n     * and changes to the view which require major changes or a full refresh.\n     * @param {Function} fn The function to call.\n     * @param {Object} thisObj The `this` context for the function.\n     * @param {...*} args Parameters to the function.\n     */\n    preserveViewCenter(fn, thisObj = this, ...args) {\n        const\n            me             = this,\n            centerDate     = me.viewportCenterDate,\n            result         = fn.apply(thisObj, args),\n            scroller       = me.timelineScroller,\n            { clientSize } = scroller,\n            scrollStart    = Math.max(Math.floor(me.getCoordinateFromDate(centerDate, true) - clientSize / 2), 0);\n\n        me.scrollingToCenter = true;\n        scroller.scrollTo(scrollStart, false).then(() => me.scrollingToCenter = false);\n\n        return result;\n    }\n\n    /**\n     * Changes this Scheduler's time axis timespan to the supplied start and end dates.\n     *\n     * @async\n     * @param {Date} newStartDate The new start date\n     * @param {Date} newEndDate The new end date\n     * @param {Object} [options] An object containing modifiers for the time span change operation.\n     * @param {Boolean} [options.maintainVisibleStart] Specify as `true` to keep the visible start date stable.\n     * @param {Date} [options.visibleDate] The date inside the range to scroll into view\n     */\n    setTimeSpan(newStartDate, newEndDate, options = emptyObject) {\n        const\n            me           = this,\n            { timeAxis } = me,\n            {\n                preventThrow = false, // Private, only used by the shift method.\n                maintainVisibleStart = false,\n                visibleDate\n            }            = options,\n            {\n                startDate,\n                endDate\n            }            = timeAxis.getAdjustedDates(newStartDate, newEndDate),\n            startChanged = timeAxis.startDate - startDate !== 0,\n            endChanged   = timeAxis.endDate - endDate !== 0;\n\n        if (startChanged || endChanged) {\n            if (maintainVisibleStart) {\n                const\n                    {\n                        timeAxisViewModel\n                    }             = me,\n                    { totalSize } = timeAxisViewModel,\n                    oldTickSize   = timeAxisViewModel.tickSize,\n                    scrollable    = me.timelineScroller,\n                    currentScroll = scrollable.position,\n                    visibleStart  = timeAxisViewModel.getDateFromPosition(currentScroll);\n\n                // If the current visibleStart is in the new range, maintain it\n                // So that there is no visual jump.\n                if (visibleStart >= startDate && visibleStart < endDate) {\n                    // We need to correct the scroll position as soon as the TimeAxisViewModel\n                    // has updated itself and before any other UI updates which that may trigger.\n                    timeAxisViewModel.ion({\n                        update() {\n                            const tickSizeChanged = timeAxisViewModel.tickSize !== oldTickSize;\n\n                            // Ensure the canvas element matches the TimeAxisViewModel's new totalSize.\n                            // This creates the required scroll range to be able to have the scroll\n                            // position correct before any further UI updates.\n                            me.updateCanvasSize();\n\n                            // If *only* the start moved, we can keep scroll position the same\n                            // by adjusting it by the amount the start moved.\n                            if (startChanged && !endChanged && !tickSizeChanged) {\n                                scrollable.position += (timeAxisViewModel.totalSize - totalSize);\n                            }\n                            // If only the end has changed, and tick size is same, we can maintain\n                            // the same scroll position.\n                            else if (!startChanged && !tickSizeChanged) {\n                                scrollable.position = currentScroll;\n                            }\n                            // Fall back to restoring the position by restoring the visible start time\n                            else {\n                                scrollable.position = timeAxisViewModel.getPositionFromDate(visibleStart);\n                            }\n\n                            // Force partners to sync with what we've just done to reset the scroll.\n                            // We are now in control.\n                            scrollable.syncPartners(true);\n                        },\n                        prio : 10000,\n                        once : true\n                    });\n                }\n            }\n\n            const returnValue = timeAxis.reconfigure({\n                startDate,\n                endDate\n            }, false, preventThrow);\n\n            if (visibleDate) {\n                return me.scrollToDate(visibleDate, options).then(() => returnValue);\n            }\n\n            return returnValue;\n        }\n    }\n\n    //region Config getters/setters\n\n    /**\n     * Returns `true` if any of the events/tasks or feature injected elements (such as ResourceTimeRanges) are within\n     * the {@link #config-timeAxis}\n     * @property {Boolean}\n     * @readonly\n     * @category Scheduled events\n     */\n    get hasVisibleEvents() {\n        return !this.noFeatureElementsInAxis() || this.eventStore.storage.values.some(t => this.timeAxis.isTimeSpanInAxis(t));\n    }\n\n    // Template function to be chained in features to determine if any elements are in time axis (needed since we cannot\n    // currently chain getters). Negated to not break chain. First feature that has elements visible returns false,\n    // which prevents other features from being queried.\n    noFeatureElementsInAxis() { }\n\n    // Private getter used to piece together event names such as beforeEventDrag / beforeTaskDrag. Could also be used\n    // in templates.\n    get capitalizedEventName() {\n        if (!this._capitalizedEventName) {\n            this._capitalizedEventName = StringHelper.capitalize(this.scheduledEventName);\n        }\n\n        return this._capitalizedEventName;\n    }\n\n    set partner(partner) {\n        this._partner = partner;\n\n        this.addPartner(partner);\n    }\n\n    /**\n     * Partners this Timeline with the passed Timeline in order to sync the horizontal scrolling position and zoom level.\n     *\n     * - To remove existing partner see {@link #function-removePartner} method.\n     * - To get the list of partners see {@link #property-partners} getter.\n     *\n     * @param {Scheduler.view.TimelineBase} otherTimeline The timeline to partner with\n     */\n    addPartner(partner) {\n        const me = this;\n\n        if (!me.isPartneredWith(partner)) {\n            const partneredWith = me.partneredWith || (me.partneredWith = new Collection());\n\n            // Each must know about the other so that they can sync others upon region resize\n            partneredWith.add(partner);\n\n            (partner.partneredWith || (partner.partneredWith = new Collection())).add(me);\n\n            // Flush through viewPreset initGetter so that the setup in setConfig doesn't\n            // take them to be the class's defined getters.\n            me.getConfig('viewPreset');\n\n            partner.ion({\n                presetchange : 'onPartnerPresetChange',\n                thisObj      : me\n            });\n            partner.scrollable.ion({\n                overflowChange : 'onPartnerOverflowChange',\n                thisObj        : me\n            });\n\n            // collect configs that are meant to be shared between partners\n            const partnerSharedConfig = me.partnerSharedConfigs.reduce((config, configName) => {\n                config[configName] = partner[configName];\n                return config;\n            }, {});\n\n            me.setConfig(partnerSharedConfig);\n\n            me.ion({\n                presetchange : 'onPartnerPresetChange',\n                thisObj      : partner\n            });\n            me.scrollable.ion({\n                overflowChange : 'onPartnerOverflowChange',\n                thisObj        : partner\n            });\n\n            if (me.isPainted) {\n                me.scrollable.addPartner(partner.scrollable, me.isHorizontal ? 'x' : 'y');\n\n                partner.syncPartnerSubGrids();\n            }\n            else {\n                // When initScroll comes round, make sure it syncs with the partner\n                me.initScroll = FunctionHelper.createSequence(me.initScroll, () => {\n                    me.scrollable.addPartner(partner.scrollable, me.isHorizontal ? 'x' : 'y');\n                    partner.syncPartnerSubGrids();\n                }, me);\n            }\n        }\n    }\n\n    /**\n     * Breaks the link between current Timeline and the passed Timeline\n     *\n     * - To add a new partner see {@link #function-addPartner} method.\n     * - To get the list of partners see {@link #property-partners} getter.\n     *\n     * @param {Scheduler.view.TimelineBase} otherTimeline The timeline to unlink from\n     */\n    removePartner(partner) {\n        const\n            me                = this,\n            { partneredWith } = me;\n\n        if (me.isPartneredWith(partner)) {\n            partneredWith.remove(partner);\n            me.scrollable.removePartner(partner.scrollable);\n            me.un({\n                presetchange : 'onPartnerPresetChange',\n                thisObj      : partner\n            });\n            me.scrollable.un({\n                overflowChange : 'onPartnerOverflowChange',\n                thisObj        : partner\n            });\n\n            partner.removePartner(me);\n        }\n    }\n\n    /**\n     * Checks whether the passed timeline is partnered with the current timeline.\n     * @param {Scheduler.view.TimelineBase} partner The timeline to check the partnering with\n     * @returns {Boolean} Returns `true` if the timelines are partnered\n     */\n    isPartneredWith(partner) {\n        return Boolean(this.partneredWith?.includes(partner));\n    }\n\n    /**\n     * Called when a partner scheduler changes its overflowing state. The scrollable\n     * of a Grid/Scheduler only handles overflowY, so this will mean the addition\n     * or removal of a vertical scrollbar.\n     *\n     * All partners must stay in sync. If another parter has a vertical scrollbar\n     * and we do not, we must set our overflowY to 'scroll' so that we show an empty\n     * scrollbar to keep widths synchronized.\n     * @param {Object} event A {@link Core.helper.util.Scroller#event-overflowChange} event\n     * @internal\n     */\n    onPartnerOverflowChange({ source : otherScrollable, y }) {\n        const\n            { scrollable } = this,\n            ourY           = scrollable.hasOverflow('y');\n\n        // If we disagree with our partner, the partner which doesn't have\n        // overflow, has to become overflowY : scroll\n        if (ourY !== y) {\n            if (ourY) {\n                otherScrollable.overflowY = 'scroll';\n            }\n            else {\n                otherScrollable.overflowY = true;\n                scrollable.overflowY      = 'scroll';\n                this.refreshVirtualScrollbars();\n            }\n        }\n        // If we agree with our partner, we can reset ourselves to overflowY : auto\n        else {\n            scrollable.overflowY = true;\n        }\n    }\n\n    onPartnerPresetChange({ preset, startDate, endDate, centerDate, zoomDate, zoomPosition, zoomLevel }) {\n        if (!this._viewPresetChanging && this.viewPreset !== preset) {\n\n            // Passed through to the viewPreset changing method\n            preset.options  = {\n                startDate,\n                endDate,\n                centerDate,\n                zoomDate,\n                zoomPosition,\n                zoomLevel\n            };\n            this.viewPreset = preset;\n        }\n    }\n\n    get partner() {\n        return this._partner;\n    }\n\n    /**\n     * Returns the partnered timelines.\n     *\n     * - To add a new partner see {@link #function-addPartner} method.\n     * - To remove existing partner see {@link #function-removePartner} method.\n     *\n     * @readonly\n     * @member {Scheduler.view.TimelineBase[]} partners\n     * @category Time axis\n     */\n    get partners() {\n        const partners = this.partner ? [this.partner] : [];\n\n        if (this.partneredWith) {\n            partners.push.apply(partners, this.partneredWith.allValues);\n        }\n\n        return partners;\n    }\n\n    get timeAxisColumn() {\n        return this.columns && this._timeAxisColumn;\n    }\n\n    changeColumns(columns, currentStore) {\n        const me = this;\n        let timeAxisColumnIndex, timeAxisColumnConfig;\n\n        // No columns means destroy\n        if (columns) {\n            const isArray = Array.isArray(columns);\n\n            let cols = columns;\n\n            if (!isArray) {\n                cols = columns.data;\n            }\n\n            timeAxisColumnIndex = cols && cols.length;\n\n            cols.some((col, index) => {\n                if (col.type === 'timeAxis') {\n                    timeAxisColumnIndex  = index;\n                    timeAxisColumnConfig = ObjectHelper.assign(col, me.timeAxisColumn);\n                    return true;\n                }\n                return false;\n            });\n\n            // <remove-on-release>\n            // TODO: Move to Scheduler\n            // </remove-on-release>\n            if (me.isVertical) {\n                cols = [\n                    ObjectHelper.assign({\n                        type : 'verticalTimeAxis'\n                    }, me.verticalTimeAxisColumn),\n                    // Make space for a regular TimeAxisColumn after the VerticalTimeAxisColumn\n                    cols[timeAxisColumnIndex]\n                ];\n\n                timeAxisColumnIndex = 1;\n            }\n            else {\n                // We're going to mutate this array which we do not own, so copy it first.\n                cols = cols.slice();\n            }\n\n            // Fix up the timeAxisColumn config in place\n            cols[timeAxisColumnIndex] = this._timeAxisColumn || {\n                type    : 'timeAxis',\n                cellCls : me.timeCellCls,\n                mode    : me.mode,\n                ...timeAxisColumnConfig\n            };\n\n            // If we are passed a raw array, or the Store we are passed is owned by another\n            // Scheduler, pass the raw column data ro the Grid's changeColumns\n            if (isArray || (columns.isStore && columns.owner !== this)) {\n                columns = cols;\n            }\n            else {\n                columns.data = cols;\n            }\n        }\n\n        return super.changeColumns(columns, currentStore);\n    }\n\n    updateColumns(columns, was) {\n        super.updateColumns(columns, was);\n\n        // Extract the known columns by type. Sorting will have placed them into visual order.\n        if (columns) {\n            const\n                me             = this,\n                timeAxisColumn = me._timeAxisColumn = me.columns.find(c => c.isTimeAxisColumn);\n\n            if (me.isVertical) {\n                me.verticalTimeAxisColumn = me.columns.find(c => c.isVerticalTimeAxisColumn);\n                me.verticalTimeAxisColumn.relayAll(me);\n            }\n\n            // Set up event relaying early\n            timeAxisColumn.relayAll(me);\n        }\n    }\n\n    onColumnsChanged({ action, changes, record : column, records }) {\n        const { timeAxisColumn, columns } = this;\n        // If someone replaces the column set (syncing leads to batch), ensure time axis is always added\n        if ((action === 'dataset' || action === 'batch') && !columns.includes(timeAxisColumn)) {\n            columns.add(timeAxisColumn, true);\n        }\n        // <remove-on-release>\n        // TODO: Have ResourceHeader call this directly instead of relying on event?\n        // </remove-on-release>\n        else if (column === timeAxisColumn && 'width' in changes) {\n            this.updateCanvasSize();\n        }\n\n        column && this.partneredWith?.forEach(partner => {\n            const partnerColumn = partner.columns.getAt(column.allIndex);\n\n            if (partnerColumn?.shouldSync(column)) {\n                const partnerChanges = {};\n                for (const k in changes) {\n                    partnerChanges[k] = changes[k].value;\n                }\n                partnerColumn.set(partnerChanges);\n            }\n        });\n\n        super.onColumnsChanged(...arguments);\n    }\n\n    get timeView() {\n        const me = this;\n        // Maintainer, we need to ensure that the columns property is initialized\n        // if this getter is called at configuration time before columns have been ingested.\n        return me.columns && me.isVertical\n            ? me.verticalTimeAxisColumn?.view\n            : me.timeAxisColumn?.timeAxisView;\n    }\n\n    updateEventCls(eventCls) {\n        const me = this;\n\n        if (!me.eventSelector) {\n            // No difference with new rendering, released have 'b-released' only\n            me.unreleasedEventSelector = me.eventSelector = `.${eventCls}-wrap`;\n        }\n        if (!me.eventInnerSelector) {\n            me.eventInnerSelector = `.${eventCls}`;\n        }\n    }\n\n    set timeAxisViewModel(timeAxisViewModel) {\n        const\n            me            = this,\n            currentModel  = me._timeAxisViewModel,\n            tavmListeners = {\n                name    : 'timeAxisViewModel',\n                update  : 'onTimeAxisViewModelUpdate',\n                prio    : 100,\n                thisObj : me\n            };\n\n        if ((me.partner && !timeAxisViewModel) || (currentModel && currentModel === timeAxisViewModel)) {\n            return;\n        }\n\n        if (currentModel?.owner === me) {\n            // We created this model, destroy it\n            currentModel.destroy();\n        }\n\n        me.detachListeners('timeAxisViewModel');\n\n        // Getting rid of instanceof check to allow using code from different bundles\n        if (timeAxisViewModel?.isTimeAxisViewModel) {\n            timeAxisViewModel.ion(tavmListeners);\n        }\n        else {\n            timeAxisViewModel = TimeAxisViewModel.new({\n                mode              : me._mode,\n                snap              : me.snap,\n                forceFit          : me.forceFit,\n                timeAxis          : me.timeAxis,\n                suppressFit       : me.suppressFit,\n                internalListeners : tavmListeners,\n                owner             : me\n            }, timeAxisViewModel);\n        }\n\n        // Replace in dependent classes relying on the model\n        if (!me.isConfiguring) {\n            if (me.isHorizontal) {\n                me.timeAxisColumn.timeAxisViewModel = timeAxisViewModel;\n            }\n            else {\n                me.verticalTimeAxisColumn.view.model = timeAxisViewModel;\n            }\n        }\n\n        me._timeAxisViewModel = timeAxisViewModel;\n\n        me.relayEvents(timeAxisViewModel, ['update'], 'timeAxisViewModel');\n\n        if (currentModel && timeAxisViewModel) {\n            me.trigger('timeAxisViewModelChange', { timeAxisViewModel });\n        }\n    }\n\n    /**\n     * The internal view model, describing the visual representation of the time axis.\n     * @property {Scheduler.view.model.TimeAxisViewModel}\n     * @readonly\n     * @category Time axis\n     */\n    get timeAxisViewModel() {\n        if (!this._timeAxisViewModel) {\n            this.timeAxisViewModel = null;\n        }\n        return this._timeAxisViewModel;\n    }\n\n    get suppressFit() {\n        return this._timeAxisViewModel?.suppressFit ?? this._suppressFit;\n    }\n\n    set suppressFit(value) {\n        if (this._timeAxisViewModel) {\n            this.timeAxisViewModel.suppressFit = value;\n        }\n        else {\n            this._suppressFit = value;\n        }\n    }\n\n    set timeAxis(timeAxis) {\n        const\n            me                = this,\n            currentTimeAxis   = me._timeAxis,\n            timeAxisListeners = {\n                name        : 'timeAxis',\n                reconfigure : 'onTimeAxisReconfigure',\n                thisObj     : me\n            };\n\n        if (me.partner && !timeAxis || (currentTimeAxis && currentTimeAxis === timeAxis)) {\n            return;\n        }\n\n        if (currentTimeAxis) {\n            if (currentTimeAxis.owner === me) {\n                // We created this model, destroy it\n                currentTimeAxis.destroy();\n            }\n        }\n\n        me.detachListeners('timeAxis');\n\n        // Getting rid of instanceof check to allow using code from different bundles\n        if (!timeAxis?.isTimeAxis) {\n            timeAxis = ObjectHelper.assign({\n                owner          : me,\n                viewPreset     : me.viewPreset,\n                autoAdjust     : me.autoAdjustTimeAxis,\n                weekStartDay   : me.weekStartDay,\n                forceFullTicks : me.fillTicks && me.snap\n            }, timeAxis);\n\n            if (me.startDate) {\n                timeAxis.startDate = me.startDate;\n            }\n            if (me.endDate) {\n                timeAxis.endDate = me.endDate;\n            }\n\n            if (me.workingTime) {\n                me.applyWorkingTime(timeAxis);\n            }\n\n            timeAxis = new TimeAxis(timeAxis);\n        }\n\n        // Inform about reconfiguring the timeaxis, to allow users to react to start & end date changes\n        timeAxis.ion(timeAxisListeners);\n\n        me._timeAxis = timeAxis;\n    }\n\n    onTimeAxisReconfigure({ config, oldConfig }) {\n        if (config) {\n            const dateRangeChange = !oldConfig || (oldConfig.startDate - config.startDate || oldConfig.endDate - config.endDate);\n\n            if (dateRangeChange) {\n                /**\n                 * Fired when the range of dates encapsulated by the UI changes. This will be when\n                 * moving a view in time by reconfiguring its {@link #config-timeAxis}. This will happen\n                 * when zooming, or changing {@link #config-viewPreset}.\n                 *\n                 * Contrast this with the {@link #event-visibleDateRangeChange} event which fires much\n                 * more frequently, during scrolling along the time axis and changing the __visible__\n                 * date range.\n                 * @event dateRangeChange\n                 * @param {Scheduler.view.TimelineBase} source This Scheduler/Gantt instance.\n                 * @param {Object} old The old date range\n                 * @param {Date} old.startDate the old start date.\n                 * @param {Date} old.endDate the old end date.\n                 * @param {Object} new The new date range\n                 * @param {Date} new.startDate the new start date.\n                 * @param {Date} new.endDate the new end date.\n                 */\n                this.trigger('dateRangeChange', {\n                    old : {\n                        startDate : oldConfig.startDate,\n                        endDate   : oldConfig.endDate\n                    },\n                    new : {\n                        startDate : config.startDate,\n                        endDate   : config.endDate\n                    }\n                });\n            }\n        }\n\n        /**\n         * Fired when the timeaxis has changed, for example by zooming or configuring a new time span.\n         * @event timeAxisChange\n         * @param {Scheduler.view.Scheduler} source - This Scheduler\n         * @param {Object} config Config object used to reconfigure the time axis.\n         * @param {Date} config.startDate New start date (if supplied)\n         * @param {Date} config.endDate New end date (if supplied)\n         */\n        this.trigger('timeAxisChange', { config });\n    }\n\n    get timeAxis() {\n        if (!this._timeAxis) {\n            this.timeAxis = null;\n        }\n        return this._timeAxis;\n    }\n\n    updateForceFit(value) {\n        if (this._timeAxisViewModel) {\n            this._timeAxisViewModel.forceFit = value;\n        }\n    }\n\n    /**\n     * Get/set working time. Assign `null` to stop using working time. See {@link #config-workingTime} config for details.\n     * @property {Object}\n     * @category Scheduled events\n     */\n    set workingTime(config) {\n        this._workingTime = config;\n\n        if (!this.isConfiguring) {\n            this.applyWorkingTime(this.timeAxis);\n        }\n    }\n\n    get workingTime() {\n        return this._workingTime;\n    }\n\n    // Translates the workingTime configs into TimeAxis#include rules, applies them and then refreshes the header and\n    // redraws the events\n    applyWorkingTime(timeAxis) {\n        const me     = this,\n            config = me._workingTime;\n\n        if (config) {\n            let hour = null;\n            // Only use valid values\n            if (config.fromHour >= 0 && config.fromHour < 24 && config.toHour > config.fromHour && config.toHour <= 24 && config.toHour - config.fromHour < 24) {\n                hour = { from : config.fromHour, to : config.toHour };\n            }\n\n            let day = null;\n            // Only use valid values\n            if (config.fromDay >= 0 && config.fromDay < 7 && config.toDay > config.fromDay && config.toDay <= 7 && config.toDay - config.fromDay < 7) {\n                day = { from : config.fromDay, to : config.toDay };\n            }\n\n            if (hour || day) {\n                timeAxis.include = {\n                    hour,\n                    day\n                };\n            }\n            else {\n                // No valid rules, restore timeAxis\n                timeAxis.include = null;\n            }\n        }\n        else {\n            // No rules, restore timeAxis\n            timeAxis.include = null;\n        }\n\n        if (me.isPainted) {\n            // Refreshing header, which also recalculate tickSize and header data\n            me.timeAxisColumn.refreshHeader();\n            // Update column lines\n            me.features.columnLines?.refresh();\n\n            // Animate event changes\n            me.refreshWithTransition();\n        }\n    }\n\n    updateStartDate(date) {\n        this.setStartDate(date);\n    }\n\n    /**\n     * Sets the timeline start date.\n     *\n     * **Note:**\n     * - If you need to set start and end date at the same time, use the {@link #function-setTimeSpan} method.\n     * - If keepDuration is false and new start date is greater than end date, it will throw an exception.\n     *\n     * @param {Date} date The new start date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the timeline (\"move\" the timeline),\n     * `false` to change the duration (\"resize\" the timeline). Defaults to `true`.\n     */\n    setStartDate(date, keepDuration = true) {\n        const\n            me = this,\n            ta = me._timeAxis,\n            {\n                startDate,\n                endDate,\n                mainUnit\n            }  = ta || emptyObject;\n\n        if (typeof date === 'string') {\n            date = DateHelper.parse(date);\n        }\n\n        if (ta && endDate) {\n            if (date) {\n                let calcEndDate = endDate;\n\n                if (keepDuration && startDate) {\n                    const diff  = DateHelper.diff(startDate, endDate, mainUnit, true);\n                    calcEndDate = DateHelper.add(date, diff, mainUnit);\n                }\n\n                me.setTimeSpan(date, calcEndDate);\n            }\n        }\n        else {\n            me._tempStartDate = date;\n        }\n    }\n\n    get startDate() {\n        let ret = this._timeAxis?.startDate || this._tempStartDate;\n\n        if (!ret) {\n            ret = new Date();\n\n            const { workingTime } = this;\n            if (workingTime) {\n                while (!isWorkingTime(ret, workingTime)) {\n                    ret.setHours(ret.getHours() + 1);\n                }\n            }\n\n            this._tempStartDate = ret;\n        }\n\n        return ret;\n    }\n\n    changeEndDate(date) {\n        if (typeof date === 'string') {\n            date = DateHelper.parse(date);\n        }\n        this.setEndDate(date);\n    }\n\n    /**\n     * Sets the timeline end date\n     *\n     * **Note:**\n     * - If you need to set start and end date at the same time, use the {@link #function-setTimeSpan} method.\n     * - If keepDuration is false and new end date is less than start date, it will throw an exception.\n     *\n     * @param {Date} date The new end date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the timeline (\"move\" the timeline),\n     * `false` to change the duration (\"resize\" the timeline). Defaults to `false`.\n     */\n    setEndDate(date, keepDuration = false) {\n        const\n            me = this,\n            ta = me._timeAxis,\n            {\n                startDate,\n                endDate,\n                mainUnit\n            }  = ta || emptyObject;\n\n        if (typeof date === 'string') {\n            date = DateHelper.parse(date);\n        }\n\n        if (ta && startDate) {\n            if (date) {\n                let calcStartDate = startDate;\n\n                if (keepDuration && endDate) {\n                    const diff    = DateHelper.diff(startDate, endDate, mainUnit, true);\n                    calcStartDate = DateHelper.add(date, -diff, mainUnit);\n                }\n\n                me.setTimeSpan(calcStartDate, date);\n            }\n        }\n        else {\n            me._tempEndDate = date;\n        }\n    }\n\n    get endDate() {\n        const me = this;\n\n        if (me._timeAxis) {\n            return me._timeAxis.endDate;\n        }\n\n        return me._tempEndDate || DateHelper.add(me.startDate, me.viewPreset.defaultSpan, me.viewPreset.mainHeader.unit);\n    }\n\n    changeVisibleDate(options) {\n        if (options instanceof Date) {\n            return { date : options, block : 'nearest' };\n        }\n        if (options instanceof Object) {\n            return {\n                date : options.date,\n                ...options\n            };\n        }\n    }\n\n    updateVisibleDate(options) {\n        const me = this;\n\n        // Infinite scroll initialization takes care of its visibleDate after\n        // calculating the optimum scroll range in TimelineScroll#initScroll\n        if (!(me.infiniteScroll && me.isConfiguring)) {\n            if (me.isPainted) {\n                me.scrollToDate(options.date, options);\n            }\n            else {\n                me.ion({\n                    paint : () => me.scrollToDate(options.date, options),\n                    once  : true\n                });\n            }\n        }\n    }\n\n    get features() {\n        return super.features;\n    }\n\n    // add region resize by default\n    set features(features) {\n        features = features === true ? {} : features;\n\n        if (!('regionResize' in features)) {\n            features.regionResize = true;\n        }\n\n        super.features = features;\n    }\n\n    //endregion\n\n    //region Event handlers\n\n    onLocaleChange() {\n        super.onLocaleChange();\n\n        const oldAutoAdjust = this.timeAxis.autoAdjust;\n        // Time axis should rebuild as weekStartDay may have changed\n        this.timeAxis.reconfigure({\n            autoAdjust : false\n        });\n\n        // Silently set it back to what the user had for next view refresh\n        this.timeAxis.autoAdjust = oldAutoAdjust;\n    }\n\n    /**\n     * Called when the element which encapsulates the Scheduler's visible height changes size.\n     * We only respond to *height* changes here. The TimeAxisSubGrid monitors its own width.\n     * @param {HTMLElement} element\n     * @param {DOMRect} oldRect\n     * @param {DOMRect} newRect\n     * @private\n     */\n    onBodyResize(element, oldRect, { width, height }) {\n        // Uncache old value upon element resize, not upon initial sizing\n        if (this.isVertical && oldRect && width !== oldRect.width) {\n            delete this.timeAxisSubGrid._width;\n        }\n\n        const newWidth = this.timeAxisSubGrid.element.offsetWidth;\n\n        // The Scheduler (The Grid) dictates the viewport height.\n        // Don't react on first invocation which will be initial size.\n        if (this._bodyRectangle && oldRect && (height !== oldRect.height)) {\n            this.onSchedulerViewportResize(newWidth, height, newWidth, oldRect.height);\n        }\n    }\n\n    onSchedulerViewportResize(width, height, oldWidth, oldHeight) {\n        if (this.isPainted) {\n            const\n                me = this,\n                {\n                    isHorizontal,\n                    partneredWith\n                }  = me;\n\n            me.currentOrientation.onViewportResize(width, height, oldWidth, oldHeight);\n\n            // Raw width is always correct for horizontal layout because the TimeAxisSubGrid\n            // never shows a scrollbar. It's always contained by an owning Grid which shows\n            // the vertical scrollbar.\n            me.updateViewModelAvailableSpace(isHorizontal ? width : Math.floor(height));\n\n            if (partneredWith && !me.isSyncingFromPartner) {\n                me.syncPartnerSubGrids();\n            }\n\n            /**\n             * Fired when the *scheduler* viewport (not the overall Scheduler element) changes size.\n             * This happens when the grid changes height, or when the subgrid which encapsulates the\n             * scheduler column changes width.\n             * @event timelineViewportResize\n             * @param {Core.widget.Widget} source - This Scheduler\n             * @param {Number} width The new width\n             * @param {Number} height The new height\n             * @param {Number} oldWidth The old width\n             * @param {Number} oldHeight The old height\n             */\n            me.trigger('timelineViewportResize', { width, height, oldWidth, oldHeight });\n        }\n    }\n\n    updateViewModelAvailableSpace(space) {\n        this.timeAxisViewModel.availableSpace = space;\n    }\n\n    onTimeAxisViewModelUpdate() {\n        if (!this._viewPresetChanging && !this.timeAxisSubGrid.collapsed) {\n            this.updateCanvasSize();\n            this.currentOrientation.onTimeAxisViewModelUpdate();\n        }\n    }\n\n    syncPartnerSubGrids() {\n        this.partneredWith.forEach(partner => {\n            if (!partner.isSyncingFromPartner) {\n                partner.isSyncingFromPartner = true;\n                this.eachSubGrid(subGrid => {\n                    const partnerSubGrid = partner.subGrids[subGrid.region];\n\n                    // If there is a difference, sync the partner SubGrid state\n                    if (partnerSubGrid.width !== subGrid.width) {\n                        if (subGrid.collapsed) {\n                            partnerSubGrid.collapse();\n                        }\n                        else {\n                            if (partnerSubGrid.collapsed) {\n                                partnerSubGrid.expand();\n                            }\n                            // When using flexed subgrid, make sure flex values has prio over width\n                            if (subGrid.flex) {\n                                // If flex values match, resize should be fine without changing anything\n                                if (subGrid.flex !== partnerSubGrid.flex) {\n                                    partnerSubGrid.flex = subGrid.flex;\n                                }\n                            }\n                            else {\n                                partnerSubGrid.width = subGrid.width;\n                            }\n                        }\n                    }\n                });\n                partner.isSyncingFromPartner = false;\n            }\n        });\n    }\n\n    //endregion\n\n    //region Mode\n\n    get currentOrientation() {\n        throw new Error('Implement in subclass');\n    }\n\n    // Horizontal is the default, overridden in scheduler\n    get isHorizontal() {\n        return true;\n    }\n\n    //endregion\n\n    //region Canvases and elements\n\n    get backgroundCanvas() {\n        return this._backgroundCanvas;\n    }\n\n    get foregroundCanvas() {\n        return this._foregroundCanvas;\n    }\n\n    get svgCanvas() {\n        const me = this;\n        if (!me._svgCanvas) {\n            const svg = me._svgCanvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            svg.setAttribute('id', IdHelper.generateId('svg'));\n            // To not be recycled by DomSync\n            svg.retainElement = true;\n            me.foregroundCanvas.appendChild(svg);\n            me.trigger('svgCanvasCreated', { svg });\n        }\n        return me._svgCanvas;\n    }\n\n    /**\n     * Returns the subGrid containing the time axis\n     * @member {Grid.view.SubGrid} timeAxisSubGrid\n     * @readonly\n     * @category Time axis\n     */\n\n    /**\n     * Returns the html element for the subGrid containing the time axis\n     * @property {HTMLElement}\n     * @readonly\n     * @category Time axis\n     */\n    get timeAxisSubGridElement() {\n        // Hit a lot, caching the element (it will never change)\n\n        if (!this._timeAxisSubGridElement) {\n            // We need the TimeAxisSubGrid to exist, so regions must be initialized\n            this.getConfig('regions');\n\n            this._timeAxisSubGridElement = this.timeAxisColumn?.subGridElement;\n        }\n\n        return this._timeAxisSubGridElement;\n    }\n\n    updateCanvasSize() {\n        const\n            me            = this,\n            { totalSize } = me.timeAxisViewModel,\n            width         = me.isHorizontal ? totalSize : me.timeAxisColumn.width;\n\n        let result = false;\n\n        if (me.isVertical) {\n            // Ensure vertical scroll range accommodates the TimeAxis\n            if (me.isPainted) {\n                // We used to have a bug here from not including the row border in the total height. Border is now\n                // removed, but leaving code here just in case some client is using border\n                me.refreshTotalHeight(totalSize + me._rowBorderHeight, true);\n            }\n\n            // Canvas might need a height in vertical mode, if ticks does not fill height (suppressFit : true)\n            if (me.suppressFit) {\n                DomHelper.setLength(me.foregroundCanvas, 'height', totalSize);\n            }\n\n            result = true;\n        }\n\n        if (width !== me.$canvasWidth && me.foregroundCanvas) {\n            if (me.backgroundCanvas) {\n                DomHelper.setLength(me.backgroundCanvas, 'width', width);\n            }\n\n            DomHelper.setLength(me.foregroundCanvas, 'width', width);\n\n            me.$canvasWidth = width;\n\n            result = true;\n        }\n\n        return result;\n    }\n\n    /**\n     * A chainable function which Features may hook to add their own content to the timeaxis header.\n     * @param {Array} configs An array of domConfigs, append to it to have the config applied to the header\n     */\n    getHeaderDomConfigs(configs) {}\n\n    /**\n     * A chainable function which Features may hook to add their own content to the foreground canvas\n     * @param {Array} configs An array of domConfigs, append to it to have the config applied to the foreground canvas\n     */\n    getForegroundDomConfigs(configs) {}\n\n    //endregion\n\n    //region Grid overrides\n\n    async onStoreDataChange({ action }) {\n        const me = this;\n\n        // Only update the UI immediately if we are visible\n        if (me.isVisible) {\n            // When repopulating stores (pro and up on data reload), the engine is not in a valid state until committed.\n            // Don't want to commit here, since it might be repopulating multiple stores.\n            // Instead delay grids refresh until project is ready\n            if (action === 'dataset' && me.project?.isRepopulatingStores) {\n                await me.project.await('refresh', false);\n            }\n\n            super.onStoreDataChange(...arguments);\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            me.whenVisible('refresh', me, [true]);\n        }\n    }\n\n    refresh(forceLayout = true) {\n        const me = this;\n\n        if (me.isPainted && !me.refreshSuspended) {\n            // We need to refresh if there are Features laying claim to the visible time axis.\n            // Or there are events which fall inside the time axis.\n            // Or (if no events fall inside the time axis) there are event elements to remove.\n            if (me.isVertical || me.hasVisibleEvents || me.timeAxisSubGridElement.querySelector(me.eventSelector)) {\n                if (!me.project || me.isEngineReady) {\n                    me.refreshRows(false, forceLayout);\n                }\n                else {\n                    me.refreshAfterProjectRefresh             = true;\n                    me.currentOrientation.refreshAllWhenReady = true;\n                }\n            }\n            // Even if there are no events in our timeline, Features\n            // assume there will be a refresh event from the RowManager\n            // after a refresh request so fire it here.\n            else {\n                me.rowManager.trigger('refresh');\n            }\n        }\n    }\n\n    render() {\n        const\n            me          = this,\n            schedulerEl = me.timeAxisSubGridElement;\n\n        if (me.useBackgroundCanvas) {\n            me._backgroundCanvas = DomHelper.createElement({\n                className   : 'b-sch-background-canvas',\n                parent      : schedulerEl,\n                nextSibling : schedulerEl.firstElementChild\n            });\n        }\n\n        // The font-size trick is no longer used by scheduler, since it allows per resource margins\n        const fgCanvas = me._foregroundCanvas = DomHelper.createElement({\n            className : 'b-sch-foreground-canvas',\n            style     : `font-size:${(me.rowHeight - me.resourceMargin * 2)}px`,\n            parent    : schedulerEl\n        });\n\n        me.timeAxisSubGrid.insertRowsBefore = fgCanvas;\n\n        // Size correctly in case ticks does not fill height\n        if (me.isVertical && me.suppressFit) {\n            me.updateCanvasSize();\n        }\n\n        super.render(...arguments);\n    }\n\n    // <remove-on-release>\n    // TODO: refreshRows -> refresh in grid?\n    // </remove-on-release>\n    refreshRows(returnToTop = false, reLayoutEvents = true) {\n        const me = this;\n\n        if (me.isConfiguring) {\n            return;\n        }\n\n        me.currentOrientation.refreshRows(reLayoutEvents);\n\n        super.refreshRows(returnToTop);\n    }\n\n    updateHideHeaders(hide) {\n        const\n            me         = this,\n            scrollLeft = me.isPainted ? me.scrollLeft : 0;\n\n        super.updateHideHeaders(hide);\n\n        if (me.isPainted) {\n            if (!hide) {\n                me.timeAxisColumn.refreshHeader(null, true);\n            }\n\n            me.nextAnimationFrame().then(() => me.scrollLeft = scrollLeft);\n        }\n    }\n\n    getCellDataFromEvent(event, includeSingleAxisMatch) {\n        if (includeSingleAxisMatch) {\n            includeSingleAxisMatch = !Boolean(event.target.closest('.b-sch-foreground-canvas'));\n        }\n        return super.getCellDataFromEvent(event, includeSingleAxisMatch);\n    }\n\n    // This GridSelection override disables drag-selection in timeaxis column for scheduler and gantt\n    onCellNavigate(me, from, to) {\n        if (to.cell?.classList.contains('b-timeaxis-cell') && !GlobalEvents.currentMouseDown?.target.classList.contains('b-grid-cell')) {\n            this.preventDragSelect = true;\n        }\n        super.onCellNavigate(...arguments);\n    }\n\n    //endregion\n\n    //region Other\n\n    // duration = false prevents transition\n    runWithTransition(fn, duration) {\n        const me = this;\n\n        // Do not attempt to enter animating state if we are not visible\n        if (me.isVisible) {\n            // Allow calling with true/false to keep code simpler in other places\n            if (duration == null || duration === true) {\n                duration = me.transitionDuration;\n            }\n\n            // Ask Grid superclass to enter the animated state if requested and enabled.\n            if (duration && me.enableEventAnimations) {\n                if (!me.hasTimeout('exitTransition')) {\n                    me.isAnimating = true;\n                }\n\n                // Exit animating state in duration milliseconds.\n                exitTransition.delay = duration;\n                me.setTimeout(exitTransition);\n            }\n        }\n\n        fn();\n    }\n\n    exitTransition() {\n        this.isAnimating = false;\n        this.trigger('transitionend');\n    }\n\n    // Awaited by CellEdit to make sure that the editor is not moved until row heights have transitioned, to avoid it\n    // ending up misaligned\n    async waitForAnimations() {\n        // If project is calculating, we should await that too. It might lead to transitions\n        if (!this.isEngineReady && this.project) {\n            await this.project.await('dataReady', false);\n        }\n\n        await super.waitForAnimations();\n    }\n\n    /**\n     * Refreshes the grid with transitions enabled.\n     */\n    refreshWithTransition(forceLayout, duration) {\n        const me = this;\n\n        // No point in starting a transition if we cant refresh anyway\n        if (!me.refreshSuspended && me.isPainted) {\n            // Since we suspend refresh when loading with CrudManager, rows might not have been initialized yet\n            if (!me.rowManager.topRow) {\n                me.rowManager.reinitialize();\n            }\n            else {\n                me.runWithTransition(() => me.refresh(forceLayout), duration);\n            }\n        }\n    }\n\n    /**\n     * Returns an object representing the visible date range\n     * @property {Object}\n     * @property {Date} visibleDateRange.startDate\n     * @property {Date} visibleDateRange.endDate\n     * @readonly\n     * @category Dates\n     */\n    get visibleDateRange() {\n        return this.currentOrientation.visibleDateRange;\n    }\n\n    // This override will force row selection on timeaxis column selection, effectively disabling cell selection there\n    isRowNumberSelecting(...selectors) {\n        return super.isRowNumberSelecting(...selectors) ||\n            selectors.some(cs => cs.column ? cs.column.isTimeAxisColumn : cs.cell?.closest('.b-timeaxis-cell'));\n    }\n\n    //endregion\n\n    /**\n     * Returns a rounded duration value to be displayed in UI (tooltips, labels etc)\n     * @param {Number} duration The raw duration value\n     * @param {Number} [nbrDecimals] The number of decimals, defaults to {@link #config-durationDisplayPrecision}\n     * @returns {Number} The rounded duration\n     */\n    formatDuration(duration, nbrDecimals = this.durationDisplayPrecision) {\n        const multiplier = Math.pow(10, nbrDecimals);\n\n        return Math.round(duration * multiplier) / multiplier;\n    }\n\n    beginListeningForBatchedUpdates() {\n        this.listenToBatchedUpdates = (this.listenToBatchedUpdates || 0) + 1;\n\n        // Allow live resizing (etc) in all splits\n        this.syncSplits?.(other => other.beginListeningForBatchedUpdates());\n    }\n\n    endListeningForBatchedUpdates() {\n        if (this.listenToBatchedUpdates) {\n            this.listenToBatchedUpdates -= 1;\n        }\n\n        this.syncSplits?.(other => other.endListeningForBatchedUpdates());\n    }\n\n    onConnectedCallback(connected, initialConnect) {\n        if (connected && !initialConnect) {\n            this.timeAxisSubGrid.scrollable.x += 0.5;\n        }\n    }\n\n    updateRtl(rtl) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n\n        let visibleDateRange;\n\n        if (!isConfiguring) {\n            visibleDateRange = me.visibleDateRange;\n        }\n\n        super.updateRtl(rtl);\n\n        if (!isConfiguring) {\n            me.currentOrientation.clearAll();\n            if (me.infiniteScroll) {\n                me.shiftToDate(visibleDateRange.startDate);\n                me.scrollToDate(visibleDateRange.startDate, { block : 'start' });\n            }\n            else {\n                me.timelineScroller.position += 0.5;\n            }\n        }\n    }\n\n    /**\n     * Applies the start and end date to each event store request (formatted in the same way as the start date field,\n     * defined in the EventStore Model class).\n     * @category Data\n     * @private\n     */\n    applyStartEndParameters(params) {\n        const\n            me    = this,\n            field = me.eventStore.modelClass.fieldMap.startDate;\n\n        if (me.passStartEndParameters) {\n            params[me.startParamName] = field.print(me.startDate);\n            params[me.endParamName] = field.print(me.endDate);\n        }\n    }\n}\n\n// Register this widget type with its Factory\nTimelineBase.initClass();\n\n// Has to be here because Gantt extends TimelineBase\nVersionHelper.setVersion('scheduler', '5.5.0');\n", "import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n\n    set revision(value) {\n        this.crudRevision = value;\n    }\n\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n\n        super.construct(config);\n    }\n\n    //endregion\n\n    //region inline data\n\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n\n    set inlineData(data) {\n        this.json = data;\n    }\n\n    //endregion\n\n    //region Store collection (add, remove, get & iterate)\n\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n\n    //endregion\n\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\n", "import ResourceStore from './ResourceStore.js';\nimport EventStore from './EventStore.js';\nimport AssignmentStore from './AssignmentStore.js';\nimport DependencyStore from './DependencyStore.js';\nimport Store from '../../Core/data/Store.js';\nimport ProjectCrudManager from './mixin/ProjectCrudManager.js';\nimport AbstractCrudManager from '../crud/AbstractCrudManager.js';\nimport AjaxTransport from '../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../crud/encoder/JsonEncoder.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/data/CrudManager\n */\n\n/**\n * The Crud Manager (or \"CM\") is a class implementing centralized loading and saving of data in multiple stores.\n * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\n * not be configured with their own CRUD URLs or use {@link Core/data/AjaxStore#config-autoLoad}/{@link Core/data/AjaxStore#config-autoCommit}.\n *\n * This class uses JSON as its data encoding format.\n *\n * ## Scheduler stores\n *\n * The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\n * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},\n * {@link #config-assignmentStore}) to register them.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## AJAX request configuration\n *\n * To configure AJAX request parameters please take a look at the\n * {@link Scheduler/crud/transport/AjaxTransport} docs.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore,\n *     eventStore,\n *     assignmentStore,\n *     transport       : {\n *         load    : {\n *             url         : 'php/read.php',\n *             // use GET request\n *             method      : 'GET',\n *             // pass request JSON in \"rq\" parameter\n *             paramName   : 'rq',\n *             // extra HTTP request parameters\n *             params      : {\n *                 foo     : 'bar'\n *             },\n *             // pass some extra Fetch API option\n *             credentials : 'include'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## Using inline data\n *\n * The CrudManager provides settable property {@link #property-inlineData} that can\n * be used to get data from all {@link #property-crudStores} at once and to set this\n * data as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\n * server requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\n * stores is available in a single assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.crudManager.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.crudManager.inlineData = data;\n * ```\n *\n * ## Load order\n *\n * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\n * If you provide any extra stores (using {@link #config-stores} config) they will be\n * added to the start of collection before the Scheduler specific stores.\n * If you need a different loading order, you should use {@link #function-addStore} method to\n * register your store:\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     // extra user defined stores will get to the start of collection\n *     // so they will be loaded first\n *     stores          : [ store1, store2 ],\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n *\n * // append store3 to the end so it will be loaded last\n * crudManager.addStore(store3);\n *\n * // now when we registered all the stores let's load them\n * crudManager.load();\n * ```\n *\n * ## Assignment store\n *\n * The Crud Manager is designed to use {@link Scheduler/data/AssignmentStore} for assigning events to one or multiple resources.\n * However if server provides `resourceId` for any of the `events` then the Crud Manager enables backward compatible mode when\n * an event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\n * In order to use multiple assignments server backend should be able to receive/send `assignments` for `load` and `sync` requests.\n *\n * ## Project\n *\n * The Crud Manager automatically consumes stores of the provided project (namely its {@link Scheduler/model/ProjectModel#property-eventStore},\n * {@link Scheduler/model/ProjectModel#property-resourceStore}, {@link Scheduler/model/ProjectModel#property-assignmentStore},\n * {@link Scheduler/model/ProjectModel#property-dependencyStore}, {@link Scheduler/model/ProjectModel#property-timeRangeStore} and\n * {@link Scheduler/model/ProjectModel#property-resourceTimeRangeStore}):\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     // crud manager will get stores from myAppProject project\n *     project   : myAppProject,\n *     transport : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @mixes Scheduler/crud/encoder/JsonEncoder\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @extends Scheduler/crud/AbstractCrudManager\n */\n\nexport default class CrudManager extends AbstractCrudManager.mixin(ProjectCrudManager, AjaxTransport, JsonEncoder) {\n\n    static $name = 'CrudManager';\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            projectClass         : ProjectModel,\n            resourceStoreClass   : ResourceStore,\n            eventStoreClass      : EventStore,\n            assignmentStoreClass : AssignmentStore,\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * A store with resources (or a config object).\n             * @config {Scheduler.data.ResourceStore|ResourceStoreConfig}\n             */\n            resourceStore : {},\n\n            /**\n             * A store with events (or a config object).\n             *\n             * ```\n             * crudManager : {\n             *      eventStore {\n             *          storeClass : MyEventStore\n             *      }\n             * }\n             * ```\n             * @config {Scheduler.data.EventStore|EventStoreConfig}\n             */\n            eventStore : {},\n\n            /**\n             * A store with assignments (or a config object).\n             * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig}\n             */\n            assignmentStore : {},\n\n            /**\n             * A store with dependencies(or a config object).\n             * @config {Scheduler.data.DependencyStore|DependencyStoreConfig}\n             */\n            dependencyStore : {},\n\n            /**\n             * A project that holds and links stores\n             * @config {Scheduler.model.ProjectModel}\n             */\n            project : null\n        };\n    }\n\n    //endregion\n\n    buildProject() {\n        return new this.projectClass(this.buildProjectConfig());\n    }\n\n    buildProjectConfig() {\n        return ObjectHelper.cleanupProperties({\n            eventStore             : this.eventStore,\n            resourceStore          : this.resourceStore,\n            assignmentStore        : this.assignmentStore,\n            dependencyStore        : this.dependencyStore,\n            resourceTimeRangeStore : this.resourceTimeRangeStore\n        });\n    }\n\n    //region Stores\n\n    set project(project) {\n        const me = this;\n\n        if (project !== me._project) {\n            me.detachListeners('beforeDataReady');\n            me.detachListeners('afterDataReady');\n\n            me._project = project;\n\n            if (project) {\n                me.eventStore             = project.eventStore;\n                me.resourceStore          = project.resourceStore;\n                me.assignmentStore        = project.assignmentStore;\n                me.dependencyStore        = project.dependencyStore;\n                me.timeRangeStore         = project.timeRangeStore;\n                me.resourceTimeRangeStore = project.resourceTimeRangeStore;\n\n                // When adding multiple events to the store it will trigger multiple change events each of which will\n                // call crudManager.hasChanges, which will try to actually get the changeset package. It takes some time\n                // and we better skip that part for the dataready event, suspending changes tracking.\n                project.ion({\n                    name      : 'beforeDataReady',\n                    dataReady : () => me.suspendChangesTracking(),\n                    prio      : 100,\n                    thisObj   : me\n                });\n\n                project.ion({\n                    name      : 'afterDataReady',\n                    dataReady : () => me.resumeChangesTracking(),\n                    prio      : -100,\n                    thisObj   : me\n                });\n            }\n\n            if (!me.eventStore) {\n                me.eventStore = {};\n            }\n            if (!me.resourceStore) {\n                me.resourceStore = {};\n            }\n            if (!me.assignmentStore) {\n                me.assignmentStore = {};\n            }\n            if (!me.dependencyStore) {\n                me.dependencyStore = {};\n            }\n        }\n    }\n\n    get project() {\n        return this._project;\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/TimeRanges timeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get timeRangeStore() {\n        return this._timeRangeStore?.store;\n    }\n\n    set timeRangeStore(store) {\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/ResourceTimeRanges resourceTimeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get resourceTimeRangeStore() {\n        return this._resourceTimeRangeStore?.store;\n    }\n\n    set resourceTimeRangeStore(store) {\n        this.setFeaturedStore('_resourceTimeRangeStore', store, this.project?.resourceTimeRangeStoreClass);\n    }\n\n    /**\n     * Get/set the resource store bound to the CRUD manager.\n     * @property {Scheduler.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this._resourceStore?.store;\n    }\n\n    set resourceStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_resourceStore', store, me.resourceStoreClass);\n    }\n\n    /**\n     * Get/set the event store bound to the CRUD manager.\n     * @property {Scheduler.data.EventStore}\n     */\n    get eventStore() {\n        return this._eventStore?.store;\n    }\n\n    set eventStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_eventStore', store, me.eventStoreClass);\n    }\n\n    /**\n     * Get/set the assignment store bound to the CRUD manager.\n     * @property {Scheduler.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this._assignmentStore?.store;\n    }\n\n    set assignmentStore(store) {\n        this.setFeaturedStore('_assignmentStore', store, this.assignmentStoreClass);\n    }\n\n    /**\n     * Get/set the dependency store bound to the CRUD manager.\n     * @property {Scheduler.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this._dependencyStore?.store;\n    }\n\n    set dependencyStore(store) {\n        this.setFeaturedStore('_dependencyStore', store, this.dependencyStoreClass);\n    }\n\n    setFeaturedStore(property, store, storeClass) {\n        const\n            me       = this,\n            oldStore = me[property]?.store;\n\n        // if not the same store\n        if (oldStore !== store) {\n            // normalize store value (turn it into a storeClass instance if needed)\n            store = Store.getStore(store, store?.storeClass || storeClass);\n\n            if (oldStore) {\n                me.removeStore(oldStore);\n            }\n\n            me[property] = store && { store } || null;\n\n            // Adds configured scheduler stores to the store collection ensuring correct order\n            // unless they're already registered.\n            me.addPrioritizedStore(me[property]);\n        }\n\n        return me[property];\n    }\n\n    getChangesetPackage() {\n        const pack = super.getChangesetPackage();\n\n        // Remove assignments from changes if using single assignment mode (resourceId) or resourceIds\n        if (pack && (this.eventStore.usesSingleAssignment || this.eventStore.modelClass.fieldMap?.resourceIds?.persist)) {\n            delete pack[this.assignmentStore.storeId];\n            // No other changes?\n            if (!this.crudStores.some(storeInfo => pack[storeInfo.storeId])) {\n                return null;\n            }\n        }\n\n        return pack;\n    }\n\n    //endregion\n\n    get crudLoadValidationMandatoryStores() {\n        return [this._eventStore.storeId, this._resourceStore.storeId];\n    }\n\n};\n", "/**\n * @module Scheduler/view/mixin/CurrentConfig\n */\n\nconst\n    stores = [\n        'eventStore',\n        'taskStore',\n        'assignmentStore',\n        'resourceStore',\n        'dependencyStore',\n        'timeRangeStore',\n        'resourceTimeRangeStore'\n    ],\n    inlineProperties = [\n        'events',\n        'tasks',\n        'resources',\n        'assignments',\n        'dependencies',\n        'timeRanges',\n        'resourceTimeRanges'\n    ];\n\n/**\n * Mixin that makes sure inline data & crud manager data are removed from current config for products using a project.\n * The data is instead inlined in the project (by ProjectModel.js)\n *\n * @mixin\n * @private\n */\nexport default Target => class CurrentConfig extends Target {\n\n    static get $name() {\n        return 'CurrentConfig';\n    }\n\n    preProcessCurrentConfigs(configs) {\n        // Remove inline data on the component\n        for (const prop of inlineProperties) {\n            delete configs[prop];\n        }\n\n        super.preProcessCurrentConfigs(configs);\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    getCurrentConfig(options) {\n        const\n            project = this.project.getCurrentConfig(options),\n            result = super.getCurrentConfig(options);\n\n        // Force project with inline data\n        if (project) {\n            result.project = project;\n\n            const { crudManager } = result;\n\n            // Transfer crud store configs to project (mainly fields)\n            if (crudManager) {\n                for (const store of stores) {\n                    if (crudManager[store]) {\n                        project[store] = crudManager[store];\n                    }\n                }\n            }\n\n            if (Object.keys(project).length === 0) {\n                delete result.project;\n            }\n        }\n\n        // Store (resource store) data is included in project\n        delete result.data;\n\n        // Remove CrudManager, since data will be placed inline\n        delete result.crudManager;\n\n        return result;\n    }\n\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/view/mixin/Describable\n */\n\nconst\n    arrayify = format => (!format || Array.isArray(format)) ? format : [format],\n    pickFormat = (formats, index, defaultFormat) => (formats && formats[index] !== true) ? formats[index] : defaultFormat;\n\n/**\n * Mixin that provides a consistent method for describing the ranges of time presented by a view. This is currently\n * consumed only by the Calendar widget for describing its child views. This mixin is defined here to facilitate using\n * a Scheduler as a child view of a Calendar.\n *\n * @mixin\n */\nexport default Target => class Describable extends (Target || Base) {\n    static $name = 'Describable';\n\n    static configurable = {\n        /**\n         * A {@link Core.helper.DateHelper} format string to use to create date output for view descriptions.\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'MMMM d, YYYY',\n\n        /**\n         * A string used to separate start and end dates in the {@link #config-descriptionFormat}.\n         * @prp {String}\n         * @default\n         */\n        dateSeparator : ' - ',\n\n        /**\n         * The date format used by the default {@link #config-descriptionRenderer} for rendering the view's description.\n         * If this value is `null`, the {@link #config-dateFormat} (and potentially {@link #config-dateSeparator}) will\n         * be used.\n         *\n         * For views that can span a range of dates, this can be a 2-item array with the following interpretation:\n         *\n         * - `descriptionFormat[0]` is either a date format string or `true` (to use {@link #config-dateFormat}). The\n         *   result of formatting the `startDate` with this format specification is used when the formatting both the\n         *   `startDate` and `endDate` with this specification produces the same result. For example, a week view\n         *   displays only the month and year components of the date, so this will be used unless the end of the week\n         *   crosses into the next month.\n         *\n         * - `descriptionFormat[1]` is used with {@link Core.helper.DateHelper#function-formatRange-static} when the\n         *  `startDate` and `endDate` format differently using `descriptionFormat[0]` (as described above). This one\n         *  format string produces a result for both dates. If this value is `true`, the {@link #config-dateFormat} and\n         *  {@link #config-dateSeparator} are combined to produce the range format.\n         *\n         * @prp {String|String[]|Boolean[]}\n         * @default\n         */\n        descriptionFormat : null,\n\n        /**\n         * A function that provides the textual description for this view. If provided, this function overrides the\n         * {@link #config-descriptionFormat}.\n         *\n         * ```javascript\n         *  descriptionRenderer() {\n         *      const\n         *          eventsInView = this.eventStore.records.filter(\n         *              eventRec => DateHelper.intersectSpans(\n         *                  this.startDate, this.endDate,\n         *                  eventRec.startDate, eventRec.endDate)).length,\n         *          sd = DateHelper.format(this.startDate, 'DD/MM/YYY'),\n         *          ed = DateHelper.format(this.endDate, 'DD/MM/YYY');\n         *\n         *     return `${sd} - ${ed}, ${eventsInView} event${eventsInView === 1 ? '' : 's'}`;\n         * }\n         * ```\n         * @config {Function} descriptionRenderer\n         * @param {Core.widget.Widget} view The active view in case the function is in another scope.\n         */\n        descriptionRenderer : null\n    };\n\n    /**\n     * Returns the date or ranges of included dates as an array. If there is only one significant date, the array will\n     * have only one element. Otherwise, a range of dates is returned as a two-element array with `[0]` being the\n     * `startDate` and `[1]` the `lastDate`.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        return [this.date];\n    }\n\n    /**\n     * The textual description generated by the {@link #config-descriptionRenderer} if present, or by the\n     * view's date (or date *range* if it has a range) and the {@link #config-descriptionFormat}.\n     * @property {String}\n     * @readonly\n     */\n    get description() {\n        const\n            me = this,\n            { descriptionRenderer } = me;\n\n        return descriptionRenderer ? me.callback(descriptionRenderer, me, [me]) : me.formattedDescription;\n    }\n\n    get formattedDescription() {\n        const\n            me = this,\n            { dateBounds, dateFormat } = me,\n            descriptionFormat = me.descriptionFormat ?? arrayify(me.defaultDescriptionFormat),\n            format0 = pickFormat(descriptionFormat, 0, dateFormat),\n            end = dateBounds.length > 1 && descriptionFormat?.length > 1 && (\n                DateHelper.format(dateBounds[0], format0) !== DateHelper.format(dateBounds[1], format0)\n            );\n\n        // Format the startDate and endDate using the first format\n        let ret = DateHelper.format(dateBounds[0], format0);\n\n        if (end) {\n            // The endDate renders a different description, and we have a range format.\n            ret = DateHelper.formatRange(dateBounds,\n                pickFormat(descriptionFormat, 1, `S${dateFormat}${me.dateSeparator}E${dateFormat}`));\n        }\n\n        return ret;\n    }\n\n    changeDescriptionFormat(format) {\n        return arrayify(format);\n    }\n\n    get widgetClass() {}  // no b-describable class\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerDom\n */\n\n/**\n * Mixin with EventModel and ResourceModel <-> HTMLElement mapping functions\n *\n * @mixin\n */\nexport default Target => class SchedulerDom extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerDom';\n    }\n\n    //region Get\n\n    /**\n     * Returns a single HTMLElement representing an event record assigned to a specific resource.\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord An assignment record\n     * @returns {HTMLElement} The element representing the event record\n     * @category DOM\n     */\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper = false) {\n        if (this.isPainted && assignmentRecord) {\n            let wrapper = this.foregroundCanvas.syncIdMap?.[assignmentRecord.id];\n\n            // When using links, the original might not be rendered but a link might\n            if (!wrapper && assignmentRecord.resource.hasLinks) {\n                for (const link of assignmentRecord.resource.$links) {\n                    wrapper = this.foregroundCanvas.syncIdMap?.[`${assignmentRecord.id}_${link.id}`];\n\n                    if (wrapper) {\n                        break;\n                    }\n                }\n            }\n\n            // Wrapper won't have syncIdMap when saving dragcreated event from editor\n            return returnWrapper ? wrapper : wrapper?.syncIdMap?.event;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns a single HTMLElement representing an event record assigned to a specific resource.\n     * @param {Scheduler.model.EventModel} eventRecord An event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record\n     * @returns {HTMLElement} The element representing the event record\n     * @category DOM\n     */\n    getElementFromEventRecord(eventRecord, resourceRecord = eventRecord.resources?.[0], returnWrapper = false) {\n        if (eventRecord.isResourceTimeRange) {\n            const wrapper = this.foregroundCanvas.syncIdMap?.[eventRecord.domId];\n\n            return returnWrapper ? wrapper : wrapper?.syncIdMap.event;\n        }\n\n        const assignmentRecord = this.assignmentStore.getAssignmentForEventAndResource(eventRecord, resourceRecord);\n        return this.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n\n    /**\n     * Returns all the HTMLElements representing an event record.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord An event record\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] A resource record\n     *\n     * @returns {HTMLElement[]} The element(s) representing the event record\n     * @category DOM\n     */\n    getElementsFromEventRecord(eventRecord, resourceRecord, returnWrapper = false) {\n        // Single event instance, as array\n        if (resourceRecord) {\n            return [this.getElementFromEventRecord(eventRecord, resourceRecord, returnWrapper)];\n        }\n        // All instances\n        else {\n            return eventRecord.resources.reduce((result, resourceRecord) => {\n                const el = this.getElementFromEventRecord(eventRecord, resourceRecord, returnWrapper);\n\n                el && result.push(el);\n\n                return result;\n            }, []);\n        }\n    }\n\n    //endregion\n\n    //region Resolve\n\n    /**\n     * Resolves the resource based on a dom element or event. In vertical mode, if resolving from an element higher up in\n     * the hierarchy than event elements, then it is required to supply an coordinates since resources are virtual\n     * columns.\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a resource from\n     * @param {Number[]} [xy] X and Y coordinates, required in some cases in vertical mode, disregarded in horizontal\n     * @returns {Scheduler.model.ResourceModel} The resource corresponding to the element, or null if not found.\n     * @category DOM\n     */\n    resolveResourceRecord(elementOrEvent, xy) {\n        return this.currentOrientation.resolveRowRecord(elementOrEvent, xy);\n    }\n\n    /**\n     * Product agnostic method which yields the {@link Scheduler.model.ResourceModel} record which underpins the row which\n     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result\n     * will be a {@link Scheduler.model.ResourceModel}\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from\n     * @returns {Scheduler.model.ResourceModel} The resource corresponding to the element, or null if not found.\n     * @category DOM\n     */\n    resolveRowRecord(elementOrEvent) {\n        return this.resolveResourceRecord(elementOrEvent);\n    }\n\n    /**\n     * Returns the event record for a DOM element\n     * @param {HTMLElement|Event} elementOrEvent The DOM node to lookup\n     * @returns {Scheduler.model.EventModel} The event record\n     * @category DOM\n     */\n    resolveEventRecord(elementOrEvent) {\n        if (elementOrEvent instanceof Event) {\n            elementOrEvent = elementOrEvent.target;\n        }\n\n        const element = elementOrEvent?.closest(this.eventSelector);\n\n        if (element) {\n            if (element.dataset.eventId) {\n                return this.eventStore.getById(element.dataset.eventId);\n            }\n\n            if (element.dataset.assignmentId) {\n                return this.assignmentStore.getById(element.dataset.assignmentId).event;\n            }\n        }\n\n        return null;\n    }\n\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {\n        return this.resolveEventRecord(element);\n    }\n\n    /**\n     * Returns an assignment record for a DOM element\n     * @param {HTMLElement} element The DOM node to lookup\n     * @returns {Scheduler.model.AssignmentModel} The assignment record\n     * @category DOM\n     */\n    resolveAssignmentRecord(element) {\n        const\n            eventElement     = element.closest(this.eventSelector),\n            assignmentRecord = eventElement && this.assignmentStore.getById(eventElement.dataset.assignmentId),\n            eventRecord      = eventElement && this.eventStore.getById(eventElement.dataset.eventId);\n\n        // When resolving a recurring event, we might be resolving an occurrence\n        return this.assignmentStore.getOccurrence(assignmentRecord, eventRecord);\n    }\n\n    //endregion\n\n    // Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)\n    isRowVisible(resourceRecord) {\n        // records in collapsed groups/branches etc. are removed from processedRecords\n        return this.store.indexOf(resourceRecord) >= 0;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerDomEvents\n */\n\n/**\n * Mixin that handles dom events (click etc) for scheduler and rendered events.\n *\n * @mixin\n */\nexport default Target => class SchedulerDomEvents extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerDomEvents';\n    }\n\n    //region Events\n\n    /**\n     * Triggered when user mousedowns over an empty area in the schedule.\n     * @event scheduleMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when mouse enters an empty area in the schedule.\n     * @event scheduleMouseEnter\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when mouse leaves an empty area in the schedule.\n     * @event scheduleMouseLeave\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user mouseups over an empty area in the schedule.\n     * @event scheduleMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user moves mouse over an empty area in the schedule.\n     * @event scheduleMouseMove\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user clicks an empty area in the schedule.\n     * @event scheduleClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user double-clicks an empty area in the schedule.\n     * @event scheduleDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Index of double-clicked resource\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when user right-clicks an empty area in the schedule.\n     * @event scheduleContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Date} date Date at mouse position\n     * @param {Scheduler.model.TimeSpan} tick A record which encapsulates the time axis tick clicked on.\n     * @param {Number} tickIndex The index of the time axis tick clicked on.\n     * @param {Date} tickStartDate The start date of the current time axis tick\n     * @param {Date} tickEndDate The end date of the current time axis tick\n     * @param {Grid.row.Row} row Row under the mouse (in horizontal mode only)\n     * @param {Number} index Resource index\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse down on an event.\n     * @event eventMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse up on an event.\n     * @event eventMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for click on an event.\n     * @event eventClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for double-click on an event.\n     * @event eventDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for right-click on an event.\n     * @event eventContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse enters an event bar.\n     * @event eventMouseEnter\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse leaves an event bar.\n     * @event eventMouseLeave\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse over events when moving into and within an event bar.\n     *\n     * Note that `mouseover` events bubble, therefore this event will fire while moving from\n     * element to element *within* an event bar.\n     *\n     * _If only an event when moving into the event bar is required, use the {@link #event-eventMouseEnter} event._\n     * @event eventMouseOver\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered for mouse out events within and when moving out of an event bar.\n     *\n     * Note that `mouseout` events bubble, therefore this event will fire while moving from\n     * element to element *within* an event bar.\n     *\n     * _If only an event when moving out of the event bar is required, use the {@link #event-eventMouseLeave} event._\n     * @event eventMouseOut\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord Event record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record\n     * @param {MouseEvent} event Browser event\n     */\n\n    //endregion\n\n    //region Event handling\n\n    getTimeSpanMouseEventParams(eventElement, event) {\n        // May have hovered a record being removed / faded out\n        const eventRecord = this.resolveEventRecord(eventElement);\n\n        return eventRecord && {\n            eventRecord,\n            resourceRecord   : this.resolveResourceRecord(eventElement),\n            assignmentRecord : this.resolveAssignmentRecord(eventElement),\n            eventElement,\n            event\n        };\n    }\n\n    getScheduleMouseEventParams(cellData, event) {\n        const resourceRecord = this.isVertical ? this.resolveResourceRecord(event) : this.store.getById(cellData.id);\n\n        return { resourceRecord };\n    }\n\n    /**\n     * Relays keydown events as eventkeydown if we have a selected task.\n     * @private\n     */\n    onElementKeyDown(event) {\n        const\n            result = super.onElementKeyDown(event),\n            me     = this;\n\n        if (me.selectedEvents.length) {\n            me.trigger(me.scheduledEventName + 'KeyDown', {\n                eventRecords      : me.selectedEvents,\n                assignmentRecords : me.selectedAssignments,\n                event,\n                // <remove-on-release>\n                // TODO: Remove for 6.0\n                // </remove-on-release>\n                eventRecord       : me.selectedEvents,\n                assignmentRecord  : me.selectedAssignments\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Relays keyup events as eventkeyup if we have a selected task.\n     * @private\n     */\n    onElementKeyUp(event) {\n        super.onElementKeyUp(event);\n\n        const me = this;\n\n        if (me.selectedEvents.length) {\n            me.trigger(me.scheduledEventName + 'KeyUp', {\n                eventRecords      : me.selectedEvents,\n                assignmentRecords : me.selectedAssignments,\n                event,\n\n                // <remove-on-release>\n                // TODO: Remove for 6.0\n                // </remove-on-release>\n                eventRecord      : me.selectedEvents,\n                assignmentRecord : me.selectedAssignments\n            });\n        }\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../Core/Base.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayout\n */\n\n/**\n * Base class for horizontal layouts (HorizontalLayoutPack and HorizontalLayoutStack). Should not be used directly,\n * instead specify {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in Scheduler config (stack,\n * pack or none):\n *\n * @example\n * let scheduler = new Scheduler({\n *   eventLayout: 'stack'\n * });\n *\n * @abstract\n * @private\n */\nexport default class HorizontalLayout extends Base {\n    static get defaultConfig() {\n        return {\n            nbrOfBandsByResource        : {},\n            bandIndexToPxConvertFn      : null,\n            bandIndexToPxConvertThisObj : null\n        };\n    }\n\n    clearCache(resource) {\n        if (resource) {\n            delete this.nbrOfBandsByResource[resource.id];\n        }\n        else {\n            this.nbrOfBandsByResource = {};\n        }\n    }\n\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n     * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n     * @returns {Number}\n     */\n    applyLayout(events, resource) {\n        // Return number of bands required\n        return this.nbrOfBandsByResource[resource.id] = this.layoutEventsInBands(events, resource);\n    }\n\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n     * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n     */\n    layoutEventsInBands(events, resource) {\n        throw new Error('Implement in subclass');\n    }\n}\n", "import HorizontalLayout from './HorizontalLayout.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayoutStack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height when to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * @extends Scheduler/eventlayout/HorizontalLayout\n * @private\n */\nexport default class HorizontalLayoutStack extends HorizontalLayout {\n    static get $name() {\n        return 'HorizontalLayoutStack';\n    }\n\n    static get configurable() {\n        return {\n            type : 'stack'\n        };\n    }\n\n    // Input: Array of event layout data\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, resource, heightRun = false) {\n        let verticalPosition = 0;\n\n        do {\n            let eventIndex = 0,\n                event      = events[0];\n\n            while (event) {\n                if (!heightRun) {\n                    // Apply band height to the event cfg\n                    event.top = this.bandIndexToPxConvertFn.call(\n                        this.bandIndexToPxConvertThisObj || this,\n                        verticalPosition,\n                        event.eventRecord,\n                        event.resourceRecord\n                    );\n                }\n\n                // Remove it from the array and continue searching\n                events.splice(eventIndex, 1);\n\n                eventIndex = this.findClosestSuccessor(event, events);\n                event = events[eventIndex];\n            }\n\n            verticalPosition++;\n        } while (events.length > 0);\n\n        // Done!\n        return verticalPosition;\n    }\n\n    // <remove-on-release>\n    // TODO: optimize this for better performance with many events per resource\n    // </remove-on-release>\n    findClosestSuccessor(eventRenderData, events) {\n        const\n            { endMS, group } = eventRenderData,\n            isMilestone      = eventRenderData.eventRecord && eventRenderData.eventRecord.duration === 0;\n\n        let minGap      = Infinity,\n            closest,\n            gap,\n            event;\n\n        for (let i = 0, l = events.length; i < l; i++) {\n            event = events[i];\n            gap = event.startMS - endMS;\n\n            if (\n                gap >= 0 && gap < minGap &&\n                // Two milestones should not overlap\n                (gap > 0 || event.endMS - event.startMS > 0 || !isMilestone)\n            ) {\n                // Events are sorted by group, so when we find first event with a different group, we can stop iteration\n                if (this.grouped && group !== event.group) {\n                    break;\n                }\n                closest = i;\n                minGap  = gap;\n            }\n        }\n\n        return closest;\n    }\n}\n", "import Base from '../../Core/Base.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/eventlayout/PackMixin\n */\n\n/**\n * Mixin holding functionality shared between HorizontalLayoutPack and VerticalLayout.\n *\n * @mixin\n * @private\n */\nexport default Target => class PackMixin extends (Target || Base) {\n    static get $name() {\n        return 'PackMixin';\n    }\n\n    static get defaultConfig() {\n        return {\n            coordProp       : 'top',\n            sizeProp        : 'height',\n            inBandCoordProp : 'inBandTop',\n            inBandSizeProp  : 'inBandHeight'\n        };\n    }\n\n    isSameGroup(a, b) {\n        return this.grouped ? a.group === b.group : true;\n    }\n\n    // Packs the events to consume as little space as possible\n    packEventsInBands(events, applyClusterFn) {\n        const\n            me                      = this,\n            { coordProp, sizeProp } = me;\n\n        let slot,\n            firstInCluster,\n            cluster,\n            j;\n\n        for (let i = 0, l = events.length; i < l; i++) {\n            firstInCluster = events[i];\n\n            slot = me.findStartSlot(events, firstInCluster);\n\n            cluster = me.getCluster(events, i);\n\n            if (cluster.length > 1) {\n                firstInCluster[coordProp] = slot.start;\n                firstInCluster[sizeProp]  = slot.end - slot.start;\n\n                // If there are multiple slots, and events in the cluster have multiple start dates, group all same-start events into first slot\n                j = 1;\n\n                while (j < (cluster.length - 1) && cluster[j + 1].start - firstInCluster.start === 0) {\n                    j++;\n                }\n\n                // See if there's more than 1 slot available for this cluster, if so - first group in cluster consumes the entire first slot\n                const nextSlot = me.findStartSlot(events, cluster[j]);\n\n                if (nextSlot && nextSlot.start < 0.8) {\n                    cluster.length = j;\n                }\n            }\n\n            const\n                clusterSize = cluster.length,\n                slotSize    = (slot.end - slot.start) / clusterSize;\n\n            // Apply fraction values\n            for (j = 0; j < clusterSize; j++) {\n                applyClusterFn(cluster[j], j, slot, slotSize);\n            }\n\n            i += clusterSize - 1;\n        }\n\n        return 1;\n    }\n\n    findStartSlot(events, event) {\n        const\n            {\n                inBandSizeProp,\n                inBandCoordProp,\n                coordProp,\n                sizeProp\n            }                = this,\n            priorOverlappers = this.getPriorOverlappingEvents(events, event);\n\n        let i;\n\n        if (priorOverlappers.length === 0) {\n            return {\n                start : 0,\n                end   : 1\n            };\n        }\n\n        for (i = 0; i < priorOverlappers.length; i++) {\n            const\n                item       = priorOverlappers[i],\n                COORD_PROP = inBandCoordProp in item ? inBandCoordProp : coordProp,\n                SIZE_PROP  = inBandSizeProp in item ? inBandSizeProp : sizeProp;\n\n            if (i === 0 && item[COORD_PROP] > 0) {\n                return {\n                    start : 0,\n                    end   : item[COORD_PROP]\n                };\n            }\n            else {\n                if (item[COORD_PROP] + item[SIZE_PROP] < (i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1)) {\n                    return {\n                        start : item[COORD_PROP] + item[SIZE_PROP],\n                        end   : i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1\n                    };\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getPriorOverlappingEvents(events, event) {\n        const\n            start       = event.start,\n            end         = event.end,\n            overlappers = [];\n\n        for (let i = 0, l = events.indexOf(event); i < l; i++) {\n            const item = events[i];\n\n            if (this.isSameGroup(item, event) && DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                overlappers.push(item);\n            }\n        }\n\n        overlappers.sort(this.sortOverlappers.bind(this));\n\n        return overlappers;\n    }\n\n    sortOverlappers(e1, e2) {\n        const { coordProp } = this;\n\n        return e1[coordProp] - e2[coordProp];\n    }\n\n    getCluster(events, startIndex) {\n        const\n            startEvent = events[startIndex],\n            result     = [startEvent];\n\n        if (startIndex >= events.length - 1) {\n            return result;\n        }\n\n        let { start, end } = startEvent;\n\n        for (let i = startIndex + 1, l = events.length; i < l; i++) {\n            const item = events[i];\n\n            if (!this.isSameGroup(item, startEvent) || !DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                break;\n            }\n\n            result.push(item);\n            start = DateHelper.max(start, item.start);\n            end   = DateHelper.min(item.end, end);\n        }\n\n        return result;\n    }\n};\n", "import HorizontalLayout from './HorizontalLayout.js';\nimport PackMixin from './PackMixin.js';\n\n/**\n * @module Scheduler/eventlayout/HorizontalLayoutPack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height\n *\n * @extends Scheduler/eventlayout/HorizontalLayout\n * @mixes Scheduler/eventlayout/PackMixin\n * @private\n */\nexport default class HorizontalLayoutPack extends HorizontalLayout.mixin(PackMixin) {\n    static get $name() {\n        return 'HorizontalLayoutPack';\n    }\n\n    static get configurable() {\n        return {\n            type : 'pack'\n        };\n    }\n\n    // Packs the events to consume as little space as possible\n    layoutEventsInBands(events) {\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            event.height = slotSize;\n            event.top    = slot.start + (j * slotSize);\n        });\n\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n\n        return result;\n    }\n}\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerResourceRendering\n */\n\n/**\n * Configs and functions used for resource rendering\n * and by the {@link Scheduler/column/ResourceInfoColumn} class.\n *\n * @mixin\n */\nexport default Target => class SchedulerResourceRendering extends (Target || Base) {\n\n    static $name = 'SchedulerResourceRendering';\n\n    //region Default config\n\n    static configurable = {\n\n        /**\n         * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n         * margin within the resource row in horizontal mode, left/right margin within the resource column in\n         * vertical mode), in px. Defaults to the value of {@link Scheduler.view.Scheduler#config-barMargin}.\n         *\n         * Can be configured per resource by setting {@link Scheduler.model.ResourceModel#field-resourceMargin\n         * resource.resourceMargin}.\n         *\n         * @prp {Number}\n         * @category Scheduled events\n         */\n        resourceMargin : null,\n\n        /**\n         * A config object used to configure the resource columns in vertical mode.\n         * See {@link Scheduler.view.ResourceHeader} for more details on available properties.\n         *\n         * ```javascript\n         * new Scheduler({\n         *     resourceColumns : {\n         *         columnWidth    : 100,\n         *         headerRenderer : ({ resourceRecord }) => `${resourceRecord.id} - ${resourceRecord.name}`\n         *     }\n         * })\n         * ```\n         * @config {ResourceHeaderConfig}\n         * @category Resources\n         */\n        resourceColumns : null,\n\n        /**\n         * Path to load resource images from. Used by the resource header in vertical mode and the\n         * {@link Scheduler.column.ResourceInfoColumn} in horizontal mode. Set this to display miniature\n         * images for each resource using their `image` or `imageUrl` fields.\n         *\n         * * `image` represents image name inside the specified `resourceImagePath`,\n         * * `imageUrl` represents fully qualified image URL.\n         *\n         *  If set and a resource has no `imageUrl` or `image` specified it will try show miniature using\n         *  the resource's name with {@link #config-resourceImageExtension} appended.\n         *\n         * **NOTE**: The path should end with a `/`:\n         *\n         * ```\n         * new Scheduler({\n         *   resourceImagePath : 'images/resources/'\n         * });\n         * ```\n         * @config {String}\n         * @category Resources\n         */\n        resourceImagePath : null,\n\n        /**\n         * Generic resource image, used when provided `imageUrl` or `image` fields or path calculated from resource\n         * name are all invalid. If left blank, resource name initials will be shown when no image can be loaded.\n         * @default\n         * @config {String}\n         * @category Resources\n         */\n        defaultResourceImageName : null,\n\n        /**\n         * Resource image extension, used when creating image path from resource name.\n         * @default\n         * @config {String}\n         * @category Resources\n         */\n        resourceImageExtension : '.jpg'\n    };\n\n    //endregion\n\n    //region Resource header/columns\n\n    // NOTE: The configs below are initially applied to the resource header in `TimeAxisColumn#set mode`\n\n    /**\n     * Use it to manipulate resource column properties at runtime.\n     * @property {Scheduler.view.ResourceHeader}\n     * @readonly\n     */\n    get resourceColumns() {\n        return this.timeAxisColumn?.resourceColumns || this._resourceColumns;\n    }\n\n    /**\n     * Get resource column width. Only applies to vertical mode. To set it, assign to\n     * `scheduler.resourceColumns.columnWidth`.\n     * @property {Number}\n     * @readonly\n     */\n    get resourceColumnWidth() {\n        return this.resourceColumns?.columnWidth || null;\n    }\n\n    //endregion\n\n    //region Event rendering\n\n    // Returns a resource specific resourceMargin, falling back to Schedulers setting\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getResourceMargin(resourceRecord) {\n        return resourceRecord?.resourceMargin ?? this.resourceMargin;\n    }\n\n    // Returns a resource specific barMargin, falling back to Schedulers setting\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getBarMargin(resourceRecord) {\n        return resourceRecord?.barMargin ?? this.barMargin;\n    }\n\n    // Returns a resource specific rowHeight, falling back to Schedulers setting\n    // Prio order: Height from record, configured height\n    // This fn could be made public to allow hooking it as an alternative to only setting this in data\n    getResourceHeight(resourceRecord) {\n        return resourceRecord.rowHeight ?? (this.isHorizontal ? this.rowHeight : this.getResourceWidth(resourceRecord));\n    }\n\n    getResourceWidth(resourceRecord) {\n        return resourceRecord.columnWidth ?? this.resourceColumnWidth;\n    }\n\n    // Similar to getResourceHeight(), but for usage later in the process to take height set by renderers into account.\n    // Cant be used earlier in the process because then the row will grow\n    // Prio order: Height requested by renderer, height from record, configured height\n    getAppliedResourceHeight(resourceRecord) {\n        const row = this.getRowById(resourceRecord);\n\n        return row?.maxRequestedHeight ?? this.getResourceHeight(resourceRecord);\n    }\n\n    // Combined convenience getter for destructuring on calling side\n    // Second arg only passed for nested events, handled by NestedEvent feature\n    getResourceLayoutSettings(resourceRecord, parentEventRecord = null) {\n        const\n            resourceMargin = this.getResourceMargin(resourceRecord, parentEventRecord),\n            rowHeight      = this.getAppliedResourceHeight(resourceRecord, parentEventRecord);\n\n        return {\n            barMargin     : this.getBarMargin(resourceRecord, parentEventRecord),\n            contentHeight : Math.max(rowHeight - resourceMargin * 2, 1),\n            rowHeight,\n            resourceMargin\n        };\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport HorizontalLayoutStack from '../../eventlayout/HorizontalLayoutStack.js';\nimport HorizontalLayoutPack from '../../eventlayout/HorizontalLayoutPack.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport SchedulerResourceRendering from './SchedulerResourceRendering.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerEventRendering\n */\n\n/**\n * Layout data object used to lay out an event record.\n * @typedef {Object} EventRenderData\n * @property {Scheduler.model.EventModel} eventRecord Event instance\n * @property {Scheduler.model.ResourceModel} resourceRecord Assigned resource\n * @property {Scheduler.model.AssignmentModel} assignmentRecord Assignment instance\n * @property {Number} startMS Event start date time in milliseconds\n * @property {Number} endMS Event end date in milliseconds\n * @property {Number} height Calculated event element height\n * @property {Number} width Calculated event element width\n * @property {Number} top Calculated event element top position in the row (or column)\n * @property {Number} left Calculated event element left position in the row (or column)\n */\n\n/**\n * Functions to handle event rendering (EventModel -> dom elements).\n *\n * @mixes Scheduler/view/mixin/SchedulerResourceRendering\n * @mixin\n */\nexport default Target => class SchedulerEventRendering extends SchedulerResourceRendering(Target || Base) {\n    static get $name() {\n        return 'SchedulerEventRendering';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Position of the milestone text:\n             * * 'inside' - for short 1-char text displayed inside the diamond, not applicable when using\n             *   {@link #config-milestoneLayoutMode})\n             * * 'outside' - for longer text displayed outside the diamond, but inside it when using\n             *   {@link #config-milestoneLayoutMode}\n             * * 'always-outside' - outside even when combined with {@link #config-milestoneLayoutMode}\n             *\n             * @prp {'inside'|'outside'|'always-outside'}\n             * @default\n             * @category Milestones\n             */\n            milestoneTextPosition : 'outside',\n\n            /**\n             * How to align milestones in relation to their startDate. Only applies when using a `milestoneLayoutMode`\n             * other than `default`. Valid values are:\n             * * start\n             * * center (default)\n             * * end\n             * @prp {'start'|'center'|'end'}\n             * @default\n             * @category Milestones\n             */\n            milestoneAlign : 'center',\n\n            /**\n             * Factor representing the average char width in pixels used to determine milestone width when configured\n             * with `milestoneLayoutMode: 'estimate'`.\n             * @prp {Number}\n             * @default\n             * @category Milestones\n             */\n            milestoneCharWidth : 10,\n\n            /**\n             * How to handle milestones during event layout. How the milestones are displayed when part of the layout\n             * are controlled using {@link #config-milestoneTextPosition}.\n             *\n             * Options are:\n             * * default - Milestones do not affect event layout\n             * * estimate - Milestone width is estimated by multiplying text length with Scheduler#milestoneCharWidth\n             * * data - Milestone width is determined by checking EventModel#milestoneWidth\n             * * measure - Milestone width is determined by measuring label width\n             * Please note that currently text width is always determined using EventModel#name.\n             * Also note that only 'default' is supported by eventStyles line, dashed and minimal.\n             * @prp {'default'|'estimate'|'data'|'measure'}\n             * @default\n             * @category Milestones\n             */\n            milestoneLayoutMode : 'default',\n\n            /**\n             * Defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * This config can also accept an object:\n             *\n             * ```javascript\n             * new Scheduler({\n             *     eventLayout : { type : 'stack' }\n             * })\n             * ```\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|Object}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n\n            /**\n             * Override this method to provide a custom sort function to sort any overlapping events. See {@link\n             * #config-overlappingEventSorter} for more details.\n             *\n             * @param  {Scheduler.model.EventModel} a First event\n             * @param  {Scheduler.model.EventModel} b Second event\n             * @returns {Number} Return -1 to display `a` above `b`, 1 for `b` above `a`\n             * @member {Function} overlappingEventSorter\n             * @category Misc\n             */\n            /**\n             * Override this method to provide a custom sort function to sort any overlapping events. This only applies\n             * to the horizontal mode, where the order the events are sorted in determines their vertical placement\n             * within a resource.\n             *\n             * By default, overlapping events are laid out based on the start date. If the start date is equal, events\n             * with earlier end date go first. And lastly the name of events is taken into account.\n             *\n             * Here's a sample sort function, sorting on start- and end date. If this function returns -1, then event\n             * `a` is placed above event `b`:\n             *\n             * ```javascript\n             * overlappingEventSorter(a, b) {\n             *\n             *   const startA = a.startDate, endA = a.endDate;\n             *   const startB = b.startDate, endB = b.endDate;\n             *\n             *   const sameStart = (startA - startB === 0);\n             *\n             *   if (sameStart) {\n             *     return endA > endB ? -1 : 1;\n             *   } else {\n             *     return (startA < startB) ? -1 : 1;\n             *   }\n             * }\n             * ```\n             *\n             * NOTE: The algorithms (stack, pack) that lay the events out expects them to be served in chronological\n             * order, be sure to first sort by `startDate` to get predictable results.\n             *\n             * @param  {Scheduler.model.EventModel} a First event\n             * @param  {Scheduler.model.EventModel} b Second event\n             * @returns {Number} Return -1 to display `a` above `b`, 1 for `b` above `a`\n             * @config {Function}\n             * @category Misc\n             */\n            overlappingEventSorter : null,\n\n            /**\n             * Deprecated, to be removed in version 6.0. Replaced by {@link #config-overlappingEventSorter}.\n             * @deprecated Since 5.0. Use {@link #config-overlappingEventSorter} instead.\n             * @config {Function}\n             * @category Misc\n             */\n            horizontalEventSorterFn : null,\n\n            /**\n             * Control how much space to leave between the first event/last event and the resources edge (top/bottom\n             * margin within the resource row in horizontal mode, left/right margin within the resource column in\n             * vertical mode), in px. Defaults to the value of {@link Scheduler.view.Scheduler#config-barMargin}.\n             *\n             * Can be configured per resource by setting {@link Scheduler.model.ResourceModel#field-resourceMargin\n             * resource.resourceMargin}.\n             *\n             * @prp {Number}\n             * @category Scheduled events\n             */\n            resourceMargin : null,\n\n            /**\n             * By default, scheduler fade events in on load. Specify `false` to prevent this animation or specify one\n             * of the available animation types to use it (`true` equals `'fade-in'`):\n             * * fade-in (default)\n             * * slide-from-left\n             * * slide-from-top\n             * ```\n             * // Slide events in from the left on load\n             * scheduler = new Scheduler({\n             *     useInitialAnimation : 'slide-from-left'\n             * });\n             * ```\n             * @prp {Boolean|String}\n             * @default\n             * @category Misc\n             */\n            useInitialAnimation : true,\n\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * an event is rendered into the schedule to render the contents of the event. It's called with the event,\n             * its resource and a `renderData` object which allows you to populate data placeholders inside the event\n             * template. **IMPORTANT** You should never modify any data on the EventModel inside this method.\n             *\n             * By default, the DOM markup of an event bar includes placeholders for 'cls' and 'style'. The cls property\n             * is a {@link Core.helper.util.DomClassList} which will be added to the event element. The style property\n             * is an inline style declaration for the event element.\n             *\n             * IMPORTANT: When returning content, be sure to consider how that content should be encoded to avoid XSS\n             * (Cross-Site Scripting) attacks. This is especially important when including user-controlled data such as\n             * the event's `name`. The function {@link Core.helper.StringHelper#function-encodeHtml-static} as well as\n             * {@link Core.helper.StringHelper#function-xss-static} can be helpful in these cases.\n             *\n             * ```javascript\n             *  eventRenderer({ eventRecord, resourceRecord, renderData }) {\n             *      renderData.style = 'color:white';                 // You can use inline styles too.\n             *\n             *      // Property names with truthy values are added to the resulting elements CSS class.\n             *      renderData.cls.isImportant = this.isImportant(eventRecord);\n             *      renderData.cls.isModified = eventRecord.isModified;\n             *\n             *      // Remove a class name by setting the property to false\n             *      renderData.cls[scheduler.generatedIdCls] = false;\n             *\n             *      // Or, you can treat it as a string, but this is less efficient, especially\n             *      // if your renderer wants to *remove* classes that may be there.\n             *      renderData.cls += ' extra-class';\n             *\n             *      return StringHelper.xss`${DateHelper.format(eventRecord.startDate, 'YYYY-MM-DD')}: ${eventRecord.name}`;\n             *  }\n             * ```\n             *\n             * @param {Object} detail An object containing the information needed to render an Event.\n             * @param {Scheduler.model.EventModel} detail.eventRecord The event record.\n             * @param {Scheduler.model.ResourceModel} detail.resourceRecord The resource record.\n             * @param {Scheduler.model.AssignmentModel} detail.assignmentRecord The assignment record.\n             * @param {Object} detail.renderData An object containing details about the event rendering.\n             * @param {Scheduler.model.EventModel} detail.renderData.event The event record.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.cls An object whose property names\n             * represent the CSS class names to be added to the event bar element. Set a property's value to truthy or\n             * falsy to add or remove the class name based on the property name. Using this technique, you do not have\n             * to know whether the class is already there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.wrapperCls An object whose property names\n             * represent the CSS class names to be added to the event wrapper element. Set a property's value to truthy\n             * or falsy to add or remove the class name based on the property name. Using this technique, you do not\n             * have to know whether the class is already there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.iconCls An object whose property names\n             * represent the CSS class names to be added to an event icon element.\n             *\n             * Note that an element carrying this icon class is injected into the event element *after*\n             * the renderer completes, *before* the renderer's created content.\n             *\n             * To disable this if the renderer takes full control and creates content using the iconCls,\n             * you can set `renderData.iconCls = null`.\n             * @param {Number} detail.renderData.left Vertical offset position (in pixels) on the time axis.\n             * @param {Number} detail.renderData.width Width in pixels of the event element.\n             * @param {Number} detail.renderData.height Height in pixels of the event element.\n             * @param {String|Object<String,String>} detail.renderData.style Inline styles for the event bar DOM element.\n             * Use either 'border: 1px solid black' or `{ border: '1px solid black' }`\n             * @param {String|Object<String,String>} detail.renderData.wrapperStyle Inline styles for wrapper of the\n             * event bar DOM element. Use either 'border: 1px solid green' or `{ border: '1px solid green' }`\n             * @param {String} detail.renderData.eventStyle The `eventStyle` of the event. Use this to apply custom\n             * styles to the event DOM element\n             * @param {String} detail.renderData.eventColor The `eventColor` of the event. Use this to set a custom\n             * color for the rendered event\n             * @param {DomConfig[]} detail.renderData.children An array of DOM configs used as children to the\n             * `b-sch-event` element. Can be populated with additional DOM configs to have more control over contents.\n             * @returns {String|Object} A simple string, or a custom object which will be applied to the\n             * {@link #config-eventBodyTemplate}, creating the actual HTML\n             * @config {Function}\n             * @category Scheduled events\n             */\n            eventRenderer : null,\n\n            /**\n             * `this` reference for the {@link #config-eventRenderer} function\n             * @config {Object}\n             * @category Scheduled events\n             */\n            eventRendererThisObj : null,\n\n            /**\n             * Field from EventModel displayed as text in the bar when rendering\n             * @config {String}\n             * @default\n             * @category Scheduled events\n             */\n            eventBarTextField : 'name',\n\n            /**\n             * The template used to generate the markup of your events in the scheduler. To 'populate' the\n             * eventBodyTemplate with data, use the {@link #config-eventRenderer} method.\n             * @config {Function}\n             * @category Scheduled events\n             */\n            eventBodyTemplate : null,\n\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : HorizontalLayoutPack,\n\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : HorizontalLayoutStack,\n\n            /**\n             * Controls how much space to leave between stacked event bars in px.\n             *\n             * Can be configured per resource by setting {@link Scheduler.model.ResourceModel#field-barMargin\n             * resource.barMargin}.\n             *\n             * @config {Number} barMargin\n             * @default\n             * @category Scheduled events\n             */\n\n            // Used to animate events on first render\n            isFirstRender : true,\n\n            initialAnimationDuration : 2000,\n\n            /**\n             * When an event bar has a width less than this value, it gets the CSS class `b-sch-event-narrow`\n             * added. You may apply custom CSS rules using this class.\n             *\n             * In vertical mode, this class causes the text to be rotated so that it runs vertically.\n             * @default\n             * @config {Number}\n             * @category Scheduled events\n             */\n            narrowEventWidth : 10,\n\n            internalEventLayout : null,\n            eventPositionMode   : 'translate',\n            eventScrollMode     : 'move'\n        };\n    }\n\n    //endregion\n\n    //region Settings\n\n    changeEventLayout(eventLayout) {\n        // Pass layout config to internal config to normalize its form\n        this.internalEventLayout = eventLayout;\n\n        // Return normalized string type\n        return this.internalEventLayout.type;\n    }\n\n    changeInternalEventLayout(eventLayout) {\n        return this.getEventLayout(eventLayout);\n    }\n\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n\n        if (oldEventLayout) {\n            me.element.classList.remove(`b-eventlayout-${oldEventLayout.type}`);\n        }\n\n        me.element.classList.add(`b-eventlayout-${eventLayout.type}`);\n\n        if (!me.isConfiguring) {\n            me.refreshWithTransition();\n\n            me.trigger('stateChange');\n        }\n    }\n\n    changeHorizontalEventSorterFn(fn) {\n        VersionHelper.deprecate('Scheduler', '6.0.0', 'Replaced by overlappingEventSorter()');\n        this.overlappingEventSorter = fn;\n    }\n\n    updateOverlappingEventSorter(fn) {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    //endregion\n\n    //region Layout helpers\n\n    // Wraps string config to object with type\n    getEventLayout(value) {\n        if (value?.isModel) {\n            value = value.eventLayout || this.internalEventLayout;\n        }\n\n        if (typeof value === 'string') {\n            value = { type : value };\n        }\n\n        return value;\n    }\n\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n\n        if (!me.isHorizontal) {\n            return null;\n        }\n\n        const\n            { timeAxisViewModel, horizontal } = me,\n            { type }                          = eventLayout;\n\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n\n        switch (type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!me.layouts.horizontalStack) {\n                    me.layouts.horizontalStack = new me.horizontalLayoutStackClass(ObjectHelper.assign({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal\n                    }, eventLayout));\n                }\n\n                return me.layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!me.layouts.horizontalPack) {\n                    me.layouts.horizontalPack = new me.horizontalLayoutPackClass(ObjectHelper.assign({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal\n                    }, eventLayout));\n                }\n\n                return me.layouts.horizontalPack;\n            }\n            default:\n                return null;\n        }\n    }\n\n    //endregion\n\n    //region Event rendering\n\n    // Chainable function called with the events to render for a specific resource. Allows features to add/remove.\n    // Chained by ResourceTimeRanges\n    getEventsToRender(resource, events) {\n        return events;\n    }\n\n    /**\n     * Rerenders events for specified resource (by rerendering the entire row).\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @category Rendering\n     */\n    repaintEventsForResource(resourceRecord) {\n        this.currentOrientation.repaintEventsForResource(resourceRecord);\n    }\n\n    /**\n     * Rerenders the events for all resources connected to the specified event\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @private\n     */\n    repaintEvent(eventRecord) {\n        const resources = this.eventStore.getResourcesForEvent(eventRecord);\n        resources.forEach(resourceRecord => this.repaintEventsForResource(resourceRecord));\n    }\n\n    getEventStyle(eventRecord, resourceRecord) {\n        return eventRecord.eventStyle || resourceRecord.eventStyle || this.eventStyle;\n    }\n\n    getEventColor(eventRecord, resourceRecord) {\n        return eventRecord.eventColor || eventRecord.event?.eventColor || eventRecord.parent?.eventColor || resourceRecord.eventColor || this.eventColor;\n    }\n\n    //endregion\n\n    //region Template\n\n    /**\n     * Generates data used in the template when rendering an event. For example which css classes to use. Also applies\n     * #eventBodyTemplate and calls the {@link #config-eventRenderer}.\n     * @private\n     * @param {Scheduler.model.EventModel} eventRecord Event to generate data for\n     * @param {Scheduler.model.ResourceModel} resourceRecord Events resource\n     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside the rendered zone in both\n     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\n     * which may be outside the rendered zone.\n     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside the TimeAxis's bounds\n     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside the vertical timespan viewport's bounds.\n     * @returns {Object} Data to use in event template, or `undefined` if the event is outside the rendered zone.\n     */\n    generateRenderData(eventRecord, resourceRecord, includeOutside = { viewport : true }) {\n        // <remove-on-release>\n        // TODO: Change this fn to accept an assignment instead of event + resource\n        // </remove-on-release>\n        const\n            me               = this,\n            // generateRenderData calculates layout for events which are outside the vertical viewport\n            // because the RowManager needs to know a row height.\n            renderData       = me.currentOrientation.getTimeSpanRenderData(eventRecord, resourceRecord, includeOutside),\n            { isEvent }      = eventRecord,\n            { eventResize }  = me.features,\n            // Don't want events drag created to zero duration to render as milestones\n            isMilestone      = !eventRecord.meta.isDragCreating && eventRecord.isMilestone,\n            // $originalId allows lookup to yield same result for original resources and linked resources\n            assignmentRecord = isEvent && eventRecord.assignments.find(a => a.resourceId === resourceRecord.$originalId),\n            // Events inner element, will be populated by renderer and/or eventBodyTemplate\n            eventContent     = {\n                className : 'b-sch-event-content',\n                role      : 'presentation',\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            };\n\n        if (renderData) {\n            renderData.tabIndex = '0';\n\n            let resizable = eventRecord.isResizable;\n\n            if (eventResize && resizable) {\n                if (renderData.startsOutsideView) {\n                    if (resizable === true) {\n                        resizable = 'end';\n                    }\n                    else if (resizable === 'start') {\n                        resizable = false;\n                    }\n                }\n                if (renderData.endsOutsideView) {\n                    if (resizable === true) {\n                        resizable = 'start';\n                    }\n                    else if (resizable === 'end') {\n                        resizable = false;\n                    }\n                }\n\n                // Let the feature veto start/end handles\n                if (resizable) {\n                    if (me.isHorizontal) {\n                        if ((!me.rtl && !eventResize.leftHandle) || (me.rtl && !eventResize.rightHandle)) {\n                            resizable = resizable === 'start' ? false : 'end';\n                        }\n                        else if ((!me.rtl && !eventResize.rightHandle) || (me.rtl && !eventResize.leftHandle)) {\n                            resizable = resizable === 'end' ? false : 'start';\n                        }\n                    }\n                    else {\n                        if (!eventResize.topHandle) {\n                            resizable = resizable === 'start' ? false : 'end';\n                        }\n                        else if (!eventResize.bottomHandle) {\n                            resizable = resizable === 'end' ? false : 'start';\n                        }\n                    }\n                }\n            }\n\n            // Event record cls properties are now DomClassList instances, so clone them\n            // so that they can be manipulated here and by renderers.\n            // Truthy value means the key will be added as a class name.\n            // ResourceTimeRanges applies custom cls to wrapper.\n            const\n                // Boolean needed here, otherwise DomSync will dig into comparing the modifications\n                isDirty           = Boolean(\n                    eventRecord.hasPersistableChanges || assignmentRecord?.hasPersistableChanges\n                ),\n                clsListObj        = {\n                    [resourceRecord.cls]      : resourceRecord.cls,\n                    [me.generatedIdCls]       : !eventRecord.isOccurrence && eventRecord.hasGeneratedId,\n                    [me.dirtyCls]             : isDirty,\n                    [me.committingCls]        : eventRecord.isCommitting,\n                    [me.endsOutsideViewCls]   : renderData.endsOutsideView,\n                    [me.startsOutsideViewCls] : renderData.startsOutsideView,\n                    'b-clipped-start'         : renderData.clippedStart,\n                    'b-clipped-end'           : renderData.clippedEnd,\n                    'b-iscreating'            : eventRecord.isCreating,\n                    'b-rtl'                   : me.rtl\n                },\n                wrapperClsListObj = {\n                    [`${me.eventCls}-parent`] : resourceRecord.isParent,\n                    'b-readonly'              : eventRecord.readOnly || assignmentRecord?.readOnly,\n                    'b-linked-resource'       : resourceRecord.isLinked,\n                    'b-original-resource'     : resourceRecord.hasLinks\n                },\n                clsList           = eventRecord.isResourceTimeRange ? new DomClassList() : eventRecord.internalCls.clone(),\n                wrapperClsList    = eventRecord.isResourceTimeRange ? eventRecord.internalCls.clone() : new DomClassList();\n\n            renderData.wrapperStyle = '';\n\n            // mark as wrapper to make sure fire render events for this level only\n            renderData.isWrap = true;\n\n            // Event specifics, things that do not apply to ResourceTimeRanges\n            if (isEvent) {\n                const selected = assignmentRecord && me.isAssignmentSelected(assignmentRecord);\n\n                ObjectHelper.assign(clsListObj, {\n                    [me.eventCls]                          : 1,\n                    'b-milestone'                          : isMilestone,\n                    'b-sch-event-narrow'                   : !isMilestone && renderData.width < me.narrowEventWidth,\n                    [me.fixedEventCls]                     : eventRecord.isDraggable === false,\n                    [`b-sch-event-resizable-${resizable}`] : Boolean(eventResize && !eventRecord.readOnly),\n                    [me.eventSelectedCls]                  : selected,\n                    [me.eventAssignHighlightCls]           : me.eventAssignHighlightCls && !selected && me.isEventSelected(eventRecord),\n                    'b-recurring'                          : eventRecord.isRecurring,\n                    'b-occurrence'                         : eventRecord.isOccurrence,\n                    'b-inactive'                           : eventRecord.inactive\n                });\n\n                renderData.eventId  = eventRecord.id;\n\n                const\n                    eventStyle   = me.getEventStyle(eventRecord, resourceRecord),\n                    eventColor   = me.getEventColor(eventRecord, resourceRecord),\n                    hasAnimation = me.isFirstRender && me.useInitialAnimation && globalThis.bryntum.noAnimations !== true;\n\n                ObjectHelper.assign(wrapperClsListObj, {\n                    [`${me.eventCls}-wrap`] : 1,\n                    'b-milestone-wrap'      : isMilestone\n                });\n\n                if (hasAnimation) {\n                    const\n                        index   = renderData.row ? renderData.row.index : (renderData.top - me.scrollTop) / me.tickSize,\n                        delayMS = index / 20 * 1000;\n\n                    renderData.wrapperStyle = `animation-delay: ${delayMS}ms;`;\n                    me.maxDelay = Math.max(me.maxDelay || 0, delayMS);\n\n                    // Add an extra delay to wait for the most delayed animation to finish\n                    // before we call stopInitialAnimation. In this way, we allow them all to finish\n                    // before we remove the b-initial-${me._useInitialAnimation} class.\n                    if (!me.initialAnimationDetacher) {\n                        me.initialAnimationDetacher = EventHelper.on({\n                            element  : me.foregroundCanvas,\n                            delegate : me.eventSelector,\n\n                            // Just listen for the first animation end fired by our event els\n                            once         : true,\n                            animationend : () => me.setTimeout({\n                                fn                : 'stopInitialAnimation',\n                                delay             : me.maxDelay,\n                                cancelOutstanding : true\n                            }),\n                            // Fallback in case animation is interrupted\n                            expires : {\n                                alt   : 'stopInitialAnimation',\n                                delay : me.initialAnimationDuration + me.maxDelay\n                            },\n                            thisObj : me\n                        });\n                    }\n                }\n\n                renderData.eventColor = eventColor;\n                renderData.eventStyle = eventStyle;\n\n                // <remove-on-release>\n                // TODO: Deprecate assignment, use assignmentRecord\n                // </remove-on-release>\n                renderData.assignmentRecord = renderData.assignment = assignmentRecord;\n            }\n\n            // If not using a wrapping div, this cls will be added to event div for correct rendering\n            renderData.wrapperCls = ObjectHelper.assign(wrapperClsList, wrapperClsListObj);\n\n            renderData.cls = ObjectHelper.assign(clsList, clsListObj);\n            renderData.iconCls = new DomClassList(eventRecord.getValue(me.eventBarIconClsField) || eventRecord.iconCls);\n\n            // ResourceTimeRanges applies custom style to the wrapper\n            if (eventRecord.isResourceTimeRange) {\n                renderData.style = '';\n                renderData.wrapperStyle += eventRecord.style || '';\n            }\n            // Others to inner\n            else {\n                renderData.style = eventRecord.style || '';\n            }\n\n            // <remove-on-release>\n            // TODO: Deprecate resource in favor of resourceRecord\n            // </remove-on-release>\n            renderData.resource = renderData.resourceRecord = resourceRecord;\n            renderData.resourceId = renderData.rowId;\n\n            if (isEvent) {\n                let childContent = null,\n                    milestoneLabelConfig = null,\n                    value;\n\n                if (me.eventRenderer) {\n                    // User has specified a renderer fn, either to return a simple string, or an object intended for the eventBodyTemplate\n                    const\n                        rendererValue = me.eventRenderer.call(me.eventRendererThisObj || me, {\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord : renderData.assignmentRecord,\n                            renderData\n                        });\n\n                    // If the user's renderer coerced it into a string, recreate a DomClassList.\n                    if (typeof renderData.cls === 'string') {\n                        renderData.cls = new DomClassList(renderData.cls);\n                    }\n\n                    if (typeof renderData.wrapperCls === 'string') {\n                        renderData.wrapperCls = new DomClassList(renderData.wrapperCls);\n                    }\n\n                    // Same goes for iconCls\n                    if (typeof renderData.iconCls === 'string') {\n                        renderData.iconCls = new DomClassList(renderData.iconCls);\n                    }\n\n                    if (me.eventBodyTemplate) {\n                        value = me.eventBodyTemplate(rendererValue);\n                    }\n                    else {\n                        value = rendererValue;\n                    }\n                }\n                else if (me.eventBodyTemplate) {\n                    // User has specified an eventBodyTemplate, but no renderer - just apply the entire event record data.\n                    value = me.eventBodyTemplate(eventRecord);\n                }\n                else if (me.eventBarTextField) {\n                    // User has specified a field in the data model to read from\n                    value = StringHelper.encodeHtml(eventRecord.getValue(me.eventBarTextField) || '');\n                }\n\n                if (!me.eventBodyTemplate || Array.isArray(value)) {\n                    eventContent.children = [];\n\n                    // Give milestone a dedicated label element so we can use padding\n                    if (isMilestone && (me.milestoneLayoutMode === 'default' || me.milestoneTextPosition === 'always-outside') && value != null && value !== '') {\n                        eventContent.children.unshift(milestoneLabelConfig = {\n                            tag      : 'label',\n                            children : []\n                        });\n                    }\n\n                    if (renderData.iconCls?.length) {\n                        eventContent.children.unshift({\n                            tag       : 'i',\n                            className : renderData.iconCls\n                        });\n                    }\n\n                    // Array, assumed to contain DOM configs for eventContent children (or milestone label)\n                    if (Array.isArray(value)) {\n                        (milestoneLabelConfig || eventContent).children.push(...value);\n                    }\n                    // Likely HTML content\n                    else if (StringHelper.isHtml(value)) {\n                        if (eventContent.children.length) {\n                            childContent = {\n                                tag   : 'span',\n                                class : 'b-event-text-wrap',\n                                html  : value\n                            };\n                        }\n                        else {\n                            eventContent.children = null;\n                            eventContent.html = value;\n                        }\n                    }\n                    // DOM config or plain string can be used as is\n                    else if (typeof value === 'string' || typeof value === 'object') {\n                        childContent = value;\n                    }\n                    // Other, use string\n                    else if (value != null) {\n                        childContent = String(value);\n                    }\n\n                    // Must allow empty string as valid content\n                    if (childContent != null) {\n                        // Milestones have content in their label, other events in their \"body\"\n                        (milestoneLabelConfig || eventContent).children.push(childContent);\n                        renderData.cls.add('b-has-content');\n                    }\n\n                    if (eventContent.html != null || eventContent.children.length) {\n                        renderData.children.push(eventContent);\n                    }\n                }\n                else {\n                    eventContent.html = value;\n                    renderData.children.push(eventContent);\n                }\n            }\n\n            const { eventStyle, eventColor, wrapperCls } = renderData;\n\n            // Renderers have last say on style & color\n            wrapperCls[`b-sch-style-${eventStyle || 'none'}`] = 1;\n\n            // Named colors are applied as a class to the wrapper\n            if (DomHelper.isNamedColor(eventColor)) {\n                wrapperCls[`b-sch-color-${eventColor}`] = eventColor;\n            }\n            else if (eventColor) {\n                const\n                    colorProp = eventStyle ? 'color' : 'background-color',\n                    style     = `${colorProp}:${eventColor};`;\n\n                renderData.style = style + renderData.style;\n                wrapperCls['b-sch-custom-color'] = 1;\n                renderData._customColorStyle = style; // Saves the styling string to be able to remove it if needed\n            }\n            else {\n                wrapperCls[`b-sch-color-none`] = 1;\n            }\n\n            // Milestones has to apply styling to b-sch-event-content\n            if (renderData.style && isMilestone && eventContent) {\n                eventContent.style = renderData.style;\n                delete renderData.style;\n            }\n\n            // If there are any iconCls entries...\n            renderData.cls['b-sch-event-withicon'] = renderData.iconCls?.length;\n\n            // For comparison in sync, cheaper than comparing DocumentFragments\n            renderData.eventContent = eventContent;\n\n            renderData.wrapperChildren = [];\n\n            // Method which features may chain in to\n            me.onEventDataGenerated(renderData);\n        }\n\n        return renderData;\n    }\n\n    /**\n     * A method which may be chained by features. It is called when an event's render\n     * data is calculated so that features may update the style, class list or body.\n     * @param {Object} eventData\n     * @internal\n     */\n    onEventDataGenerated(eventData) {}\n\n    //endregion\n\n    //region Initial animation\n\n    changeUseInitialAnimation(name) {\n        return name === true ? 'fade-in' : name;\n    }\n\n    updateUseInitialAnimation(name, old) {\n        const { classList } = this.element;\n\n        if (old) {\n            classList.remove(`b-initial-${old}`);\n        }\n\n        if (name) {\n            classList.add(`b-initial-${name}`);\n\n            // Transition block for FF, to not interfere with animations\n            if (BrowserHelper.isFirefox) {\n                classList.add('b-prevent-event-transitions');\n            }\n        }\n    }\n\n    /**\n     * Restarts initial events animation with new value {@link #config-useInitialAnimation}.\n     * @param {Boolean|String} initialAnimation new initial animation value\n     * @category Misc\n     */\n    restartInitialAnimation(initialAnimation) {\n        const me = this;\n\n        me.initialAnimationDetacher?.();\n        me.initialAnimationDetacher = null;\n\n        me.useInitialAnimation = initialAnimation;\n        me.isFirstRender = true;\n        me.refresh();\n    }\n\n    stopInitialAnimation() {\n        const me = this;\n\n        me.initialAnimationDetacher();\n        me.isFirstRender = false;\n\n        // Prevent any further initial animations\n        me.useInitialAnimation = false;\n\n        // Remove transition block for FF a bit later, to not interfere with animations\n        if (BrowserHelper.isFirefox) {\n            me.setTimeout(() => me.element.classList.remove('b-prevent-event-transitions'), 100);\n        }\n    }\n\n    //endregion\n\n    //region Milestones\n\n    /**\n     * Determines width of a milestones label. How width is determined is decided by configuring\n     * {@link #config-milestoneLayoutMode}. Please note that text width is always determined using the events\n     * {@link Scheduler/model/EventModel#field-name}.\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @returns {Number}\n     * @category Milestones\n     */\n    getMilestoneLabelWidth(eventRecord, resourceRecord) {\n        const\n            me   = this,\n            mode = me.milestoneLayoutMode,\n            size = me.getResourceLayoutSettings(resourceRecord).contentHeight;\n\n        if (mode === 'measure') {\n            const\n                html    = StringHelper.encodeHtml(eventRecord.name),\n                color   = me.getEventColor(eventRecord, resourceRecord),\n                style   = me.getEventStyle(eventRecord, resourceRecord),\n                element = me.milestoneMeasureElement || (me.milestoneMeasureElement = DomHelper.createElement({\n                    className : {\n                        'b-sch-event-wrap'       : 1,\n                        'b-milestone-wrap'       : 1,\n                        'b-measure'              : 1,\n                        [`b-sch-color-${color}`] : color,\n                        [`b-sch-style-${style}`] : style\n                    },\n                    children : [\n                        {\n                            className : 'b-sch-event b-milestone',\n                            children  : [\n                                {\n                                    className : 'b-sch-event-content',\n                                    children  : [\n                                        { tag : 'label' }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    parent : me.foregroundCanvas\n                }));\n\n            // DomSync should not touch\n            element.retainElement = true;\n\n            element.style.fontSize = `${size}px`;\n\n            if (me.milestoneTextPosition === 'always-outside') {\n                const label = element.firstElementChild.firstElementChild.firstElementChild;\n\n                label.innerHTML = html;\n\n                const bounds = Rectangle.from(label, label.parentElement);\n\n                // +2 for a little margin\n                return bounds.left + bounds.width + 2;\n            }\n            else {\n                // b-sch-event-content\n                element.firstElementChild.firstElementChild.innerHTML = `<label></label>${html}`;\n\n                return element.firstElementChild.offsetWidth;\n            }\n        }\n\n        if (mode === 'estimate') {\n            return eventRecord.name.length * me.milestoneCharWidth + (me.milestoneTextPosition === 'always-outside' ? size : 0);\n        }\n\n        if (mode === 'data') {\n            return eventRecord.milestoneWidth;\n        }\n\n        return 0;\n    }\n\n    updateMilestoneLayoutMode(mode) {\n        const\n            me            = this,\n            alwaysOutside = me.milestoneTextPosition === 'always-outside';\n\n        me.element.classList.toggle('b-sch-layout-milestones', mode !== 'default' && !alwaysOutside);\n        me.element.classList.toggle('b-sch-layout-milestone-labels', mode !== 'default' && alwaysOutside);\n\n        if (!me.isConfiguring) {\n            me.refreshWithTransition();\n        }\n    }\n\n    updateMilestoneTextPosition(position) {\n        this.element.classList.toggle('b-sch-layout-milestone-text-position-inside', position === 'inside');\n\n        this.updateMilestoneLayoutMode(this.milestoneLayoutMode);\n    }\n\n    updateMilestoneAlign() {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    updateMilestoneCharWidth() {\n        if (!this.isConfiguring) {\n            this.refreshWithTransition();\n        }\n    }\n\n    // endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ProjectModel from '../../model/ProjectModel.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\n\n/**\n * @module Scheduler/data/mixin/ProjectConsumer\n */\n\nconst engineStoreNames = [\n    'assignmentStore',\n    'dependencyStore',\n    'eventStore',\n    'resourceStore'\n];\n\n/**\n * Creates a Project using any configured stores, and sets the stores configured into the project into\n * the host object.\n *\n * @mixin\n */\nexport default Target => class ProjectConsumer extends (Target || Base) {\n    static get $name() {\n        return 'ProjectConsumer';\n    }\n\n    //region Default config\n\n    static get declarable() {\n        return ['projectStores'];\n    }\n\n    static get configurable() {\n        return {\n            projectModelClass : ProjectModel,\n\n            // <remove-on-release>\n            //TODO: move to SchedulerProBase and SchedulerBase to specify different types\n            // </remove-on-release>\n            /**\n             * The {@link Scheduler.model.ProjectModel} instance, containing the data visualized by the Scheduler.\n             *\n             * **Note:** In SchedulerPro the project is instance of SchedulerPro.model.ProjectModel class.\n             * @member {Scheduler.model.ProjectModel} project\n             * @typings {ProjectModel}\n             * @category Data\n             */\n            /**\n             * A {@link Scheduler.model.ProjectModel} instance or a config object. The project holds all Scheduler data.\n             * Can be omitted in favor of individual store configs or {@link Scheduler.view.mixin.SchedulerStores#config-crudManager} config.\n             *\n             * **Note:** This config is **mandatory** in SchedulerPro. See SchedulerPro.model.ProjectModel class.\n             * @config {Scheduler.model.ProjectModel|ProjectModelConfig} project\n             * @category Data\n             */\n            project : {},\n\n            /**\n             * Configure as `true` to destroy the Project and stores when `this` is destroyed.\n             * @config {Boolean}\n             * @category Data\n             */\n            destroyStores : null,\n\n            // Will be populated by AttachToProjectMixin which features mix in\n            projectSubscribers : []\n        };\n    }\n\n    #suspendedByRestore;\n\n    //endregion\n\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n\n        super.startConfigure(config);\n    }\n\n    //region Project\n\n    // This is where all the ingestion happens.\n    // At config time, the changers inject incoming values into the project config object\n    // that we are building. At the end we instantiate the project with all incoming\n    // config values filled in.\n    changeProject(project, oldProject) {\n        const\n            me = this,\n            {\n                projectStoreNames,\n                projectDataNames\n            }  = me.constructor;\n\n        me.projectCallbacks = new Set();\n\n        if (project) {\n            // Flag for changes to know what stage we are at\n            me.buildingProjectConfig = true;\n\n            if (!project.isModel) {\n                // When configuring, prio order:\n                // 1. If using an already existing CrudManager, it is assumed to already have the stores we should use,\n                //    adopt them as ours.\n                // 2. If a supplied store already has a project, it is assumed to be shared with another scheduler and\n                //    that project is adopted as ours. Unless we are given some store not part of that project,\n                //    in which case we create a new project.\n                // 3. Use stores from a supplied project config.\n                // 4. Use stores configured on scheduler.\n                // + Pass on inline data (events, resources, dependencies, assignments -> xxData on the project config)\n                //\n                // What happens during project initialization is this:\n                // this._project is the project *config* object.\n                // changeXxxx methods put incoming values directly into it through this.project\n                // to be used as its configuration.\n                // So when it is instantiated, it has had all configs injected.\n                if (me.isConfiguring) {\n                    // Set property for changers to put incoming values into\n                    me._project = project;\n\n                    // crudManager will be a clone of the raw config if it is a raw config.\n                    const { crudManager } = me;\n\n                    // Pull in stores from the crudManager config first\n                    if (crudManager) {\n                        const { isCrudManager } = crudManager;\n\n                        for (const storeName of projectStoreNames) {\n                            if (crudManager[storeName]) {\n\n                                // We configure the project with the stores, and *not* the CrudManager.\n                                // The CrudManager ends up having its project set and thereby adopting ours.\n                                me[storeName] = crudManager[storeName];\n\n                                // If it's just a config, take the stores out.\n                                // We will *configure* it with this project and it will ingest\n                                // its stores from there.\n                                if (!isCrudManager) {\n                                    delete crudManager[storeName];\n                                }\n                            }\n                        }\n                    }\n\n                    // Pull in all our configured stores into the project config object.\n                    // That also extracts any project into this._sharedProject\n                    me.getConfig('projectStores');\n\n                    // Referencing these data configs causes them to be pulled into\n                    // the _project.xxxData config property if they are present.\n                    for (const dataName of projectDataNames) {\n                        me.getConfig(dataName);\n                    }\n                }\n\n                const { eventStore } = project;\n                let { _sharedProject : sharedProject } = me;\n\n                // Delay autoLoading until listeners are set up, to be able to inject params\n                if (eventStore && !eventStore.isEventStoreMixin && eventStore.autoLoad && !eventStore.count) {\n                    eventStore.autoLoad = false;\n                    me.delayAutoLoad = true;\n                }\n\n                // We should not adopt a project from a store if we are given any store not part of that project\n                if (sharedProject && engineStoreNames.some(store => project[store] && project[store] !== sharedProject[store])) {\n                    // We have to chain any store used by the other project, they can only belong to one\n                    for (const store of engineStoreNames) {\n                        if (project[store] && project[store] === sharedProject[store]) {\n                            project[store] = project[store].chain();\n                        }\n                    }\n\n                    sharedProject = null;\n                }\n\n                // Use sharedProject if found, else instantiate our config.\n                project = sharedProject || new me.projectModelClass(project);\n\n                // Clear the property so that the updater is called.\n                delete me._project;\n            }\n\n            // In the updater, configs are live\n            me.buildingProjectConfig = false;\n        }\n\n        return project;\n    }\n\n    /**\n     * Implement in subclass to take action when project is replaced.\n     *\n     * __`super.updateProject(...arguments)` must be called first.__\n     *\n     * @param {Scheduler.model.ProjectModel} project\n     * @category Data\n     */\n    updateProject(project, oldProject) {\n        const\n            me = this,\n            {\n                projectListeners,\n                crudManager\n            }  = me;\n\n        me.detachListeners('projectConsumer');\n\n        // When we set the crudManager now, it will go through to the CrudManagerVIew\n        delete me._crudManager;\n\n        if (project) {\n            projectListeners.thisObj = me;\n            project.ion(projectListeners);\n\n            // If the project is a CrudManager, use it as such.\n            if (project.isCrudManager) {\n                me.crudManager = project;\n            }\n            // Apply the project to CrudManager, making sure the same stores are used there and here\n            else if (crudManager) {\n                crudManager.project = project;\n\n                // CrudManager goes through the changer as usual and is initialized\n                // from the Project, not any stores it was originally configured with.\n                me.crudManager = crudManager;\n            }\n\n            // Notifies classes that mix AttachToProjectMixin that we have a new project\n            me.projectSubscribers.forEach(subscriber => {\n                subscriber.detachFromProject(oldProject);\n                subscriber.attachToProject(project);\n            });\n\n            // Sets the project's stores into the host object\n            for (const storeName of me.constructor.projectStoreNames) {\n                me[storeName] = project[storeName];\n            }\n\n            // Listeners are set up, if EventStore was configured with autoLoad now is the time to load\n            if (me.delayAutoLoad) {\n                // Restore the flag, not needed but to look good on inspection\n                project.eventStore.autoLoad = true;\n                project.eventStore.load();\n            }\n\n            project.stm?.ion({\n                name           : 'projectConsumer',\n                restoringStart : 'onProjectRestoringStart',\n                restoringStop  : 'onProjectRestoringStop',\n                thisObj        : me\n            });\n\n        }\n\n        me.trigger('projectChange', { project });\n    }\n\n    // Implementation here because we need to get first look at it to adopt its stores\n    changeCrudManager(crudManager) {\n        // Set the property to be scanned for incoming stores.\n        // If it's a config, it will be stripped of those stores prior to construction.\n        if (this.buildingProjectConfig) {\n            this._crudManager = crudManager.isCrudManager ? crudManager : Object.assign({}, crudManager);\n        }\n        else {\n            return super.changeCrudManager(crudManager);\n        }\n    }\n\n    // Called when project changes are committed, after data is written back to records\n    onProjectDataReady() {\n        const me = this;\n\n        // Only update the UI when we are visible\n        me.whenVisible(() => {\n            if (me.projectCallbacks.size) {\n                me.projectCallbacks.forEach(callback => callback());\n                me.projectCallbacks.clear();\n            }\n        }, null, null, 'onProjectDataReady');\n    }\n\n    onProjectRestoringStart({ stm }) {\n        const { rawQueue } = stm;\n        // Suspend refresh if undo/redo potentially leads to multiple refreshes\n        if (rawQueue.length && rawQueue[rawQueue.length - 1].length > 1) {\n            this.#suspendedByRestore = true;\n            this.suspendRefresh();\n        }\n    }\n\n    onProjectRestoringStop() {\n        if (this.#suspendedByRestore) {\n            this.#suspendedByRestore = false;\n            this.resumeRefresh(true);\n        }\n    }\n\n    // Overridden in CalendarStores.js\n    onBeforeTimeZoneChange() {}\n\n    // When project changes time zone, change start and end dates\n    onTimeZoneChange({ timeZone, oldTimeZone }) {\n        const me = this;\n\n        // The timeAxis timeZone could be equal to timeZone if we are a partnered scheduler\n        if (me.startDate && me.timeAxis.timeZone !== timeZone) {\n            const startDate = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(me.startDate, oldTimeZone) : me.startDate;\n            me.startDate = timeZone != null ? TimeZoneHelper.toTimeZone(startDate, timeZone) : startDate;\n\n            // Saves the timeZone on the timeAxis as it is shared between partnered schedulers\n            me.timeAxis.timeZone = timeZone;\n        }\n    }\n\n    onStartApplyChangeset() {\n        this.suspendRefresh();\n    }\n\n    onEndApplyChangeset() {\n        this.resumeRefresh(true);\n    }\n\n    /**\n     * Accepts a callback that will be called when the underlying project is ready (no commit pending and current commit\n     * finalized)\n     * @param {Function} callback\n     * @category Data\n     */\n    whenProjectReady(callback) {\n        // Might already be ready, call directly\n        if (this.isEngineReady) {\n            callback();\n        }\n        else {\n            this.projectCallbacks.add(callback);\n        }\n    }\n\n    /**\n     * Returns `true` if engine is in a stable calculated state, `false` otherwise.\n     * @property {Boolean}\n     * @category Misc\n     */\n    get isEngineReady() {\n        // NonWorkingTime calls this during destruction, hence the ?.\n        return Boolean(this.project.isEngineReady?.());\n    }\n\n    //endregion\n\n    //region Destroy\n\n    // Cleanup, destroys stores if this.destroyStores is true.\n    doDestroy() {\n        super.doDestroy();\n\n        if (this.destroyStores) {\n            // Shared project might already be destroyed\n            !this.project.isDestroyed && this.project.destroy();\n        }\n    }\n\n    //endregion\n\n    get projectStores() {\n        const { projectStoreNames } = this.constructor;\n\n        return projectStoreNames.map(storeName => this[storeName]);\n    }\n\n    static get projectStoreNames() {\n        return Object.keys(this.projectStores);\n    }\n\n    static get projectDataNames() {\n        return this.projectStoreNames.reduce((result, storeName) => {\n            const { dataName } = this.projectStores[storeName];\n\n            if (dataName) {\n                result.push(dataName);\n            }\n            return result;\n        }, []);\n    }\n\n    static setupProjectStores(cls, meta) {\n        const { projectStores } = cls;\n\n        if (projectStores) {\n            const\n                projectListeners  = {\n                    name                 : 'projectConsumer',\n                    dataReady            : 'onProjectDataReady',\n                    change               : 'relayProjectDataChange',\n                    beforeTimeZoneChange : 'onBeforeTimeZoneChange',\n                    timeZoneChange       : 'onTimeZoneChange',\n                    startApplyChangeset  : 'onStartApplyChangeset',\n                    endApplyChangeset    : 'onEndApplyChangeset'\n                },\n                storeConfigs      = {\n                    projectListeners\n                };\n\n            let previousDataName;\n\n            // Create a property and updater for each dataName and a changer for each store\n            for (const storeName in projectStores) {\n                const { dataName } = projectStores[storeName];\n\n                // Define \"eventStore\" and \"events\" configs\n                storeConfigs[storeName] = storeConfigs[dataName] = null;\n\n                // Define up the \"events\" property\n                if (dataName) {\n                    // Getter to return store data\n                    Object.defineProperty(meta.class.prototype, dataName, {\n                        configurable : true, // So that Config can add its setter.\n                        get() {\n                            // get events() { return this.project.eventStore.records; }\n                            return this.project[storeName]?.records;\n                        }\n                    });\n\n                    // Create an updater for the data name;\n                    this.createDataUpdater(storeName, dataName, previousDataName, meta);\n                }\n\n                this.createStoreDescriptor(meta, storeName, projectStores[storeName], projectListeners);\n\n                // The next data updater must reference this data name\n                previousDataName = dataName;\n            }\n\n            // Create the projectListeners config.\n            this.setupConfigs(meta, storeConfigs);\n        }\n    }\n\n    static createDataUpdater(storeName, dataName, previousDataName, meta) {\n        // Create eg \"updateEvents(data)\".\n        // We need it to call this.getConfig('resources') so that ordering of\n        // data ingestion is corrected.\n        meta.class.prototype[`update${StringHelper.capitalize(dataName)}`] = function(data) {\n            const { project } = this;\n\n            // Ensure a dataName that we depend on is called in.\n            // For example dependencies must load in order after the events.\n            previousDataName && this.getConfig(previousDataName);\n\n            if (this.buildingProjectConfig) {\n                // Set the property in the project config object.\n                // eg project.eventsData = [...]\n                project[`${dataName}Data`] = data;\n            }\n            else {\n                // Live update the project when in use.\n                project[storeName].data = data;\n            }\n        };\n    }\n\n    // eslint-disable-next-line bryntum/no-listeners-in-lib\n    static createStoreDescriptor(meta, storeName, { listeners }, projectListeners) {\n        const\n            { prototype : clsProto } = meta.class,\n            storeNameCap             = StringHelper.capitalize(storeName);\n\n        // Set up onProjectEventStoreChange to set this.eventStore\n        projectListeners[`${storeName}Change`] = function({ store }) {\n            this[storeName] = store;\n        };\n\n        // create changeEventStore\n        clsProto[`change${storeNameCap}`] = function(store, oldStore) {\n            const\n                me           = this,\n                { project }  = me,\n                storeProject = store?.project;\n\n            if (me.buildingProjectConfig) {\n                // Capture any project found at project config time\n                // to use as our shared project\n                if (storeProject?.isProjectModel) {\n                    me._sharedProject = storeProject;\n                }\n\n                // Set the property in the project config object.\n                // Must not go through the updater. It's too early to\n                // inform host of store change.\n                project[storeName] = store;\n                return;\n            }\n\n            // Live update the project when in use.\n            if (!me.initializingProject) {\n                if (project[storeName] !== store) {\n                    project[`set${storeNameCap}`](store);\n                    store = project[storeName];\n                }\n            }\n\n            // Implement processing here instead of creating a separate updater.\n            // Subclasses can implement updaters.\n            if (store !== oldStore) {\n                if (listeners) {\n                    listeners.thisObj = me;\n                    listeners.name = `${storeName}Listeners`;\n\n                    me.detachListeners(listeners.name);\n\n                    store.ion(listeners);\n                }\n\n                // Set backing var temporarily, so it can be accessed from AttachToProjectMixin subscribers\n                me[`_${storeName}`] = store;\n\n                // Notifies classes that mix AttachToProjectMixin that we have a new XxxxxStore\n                me.projectSubscribers.forEach(subscriber => {\n                    subscriber[`attachTo${storeNameCap}`]?.(store);\n                });\n\n                me[`_${storeName}`] = null;\n            }\n            return store;\n        };\n    }\n\n    relayProjectDataChange(event) {\n        // Don't trigger change event for tree node collapse/expand\n        if ((event.isExpand || event.isCollapse) && !event.records[0].fieldMap.expanded.persist) {\n            return;\n        }\n\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each store's own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event dataChange\n         * @param {Scheduler.data.mixin.ProjectConsumer} source Owning component\n         * @param {Scheduler.model.mixin.ProjectModelMixin} project Project model\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('dataChange', { project : event.source, ...event, source : this });\n    }\n\n    //region WidgetClass\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport Store from '../../../Core/data/Store.js';\nimport GlobalEvents from '../../../Core/GlobalEvents.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport ProjectConsumer from '../../data/mixin/ProjectConsumer.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerStores\n */\n\n/**\n * Functions for store assignment and store event listeners.\n *\n * @mixin\n * @extends Scheduler/data/mixin/ProjectConsumer\n */\nexport default Target => class SchedulerStores extends ProjectConsumer(Target || Base) {\n    static get $name() {\n        return 'SchedulerStores';\n    }\n\n    //region Default config\n\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            resourceStore : {\n                dataName : 'resources'\n            },\n\n            eventStore : {\n                dataName  : 'events',\n                // eslint-disable-next-line bryntum/no-listeners-in-lib\n                listeners : {\n                    batchedUpdate   : 'onEventStoreBatchedUpdate',\n                    changePreCommit : 'onInternalEventStoreChange',\n                    commitStart     : 'onEventCommitStart',\n                    commit          : 'onEventCommit',\n                    exception       : 'onEventException',\n                    idchange        : 'onEventIdChange',\n                    beforeLoad      : 'onBeforeLoad'\n                }\n            },\n\n            assignmentStore : {\n                dataName  : 'assignments',\n                // eslint-disable-next-line bryntum/no-listeners-in-lib\n                listeners : {\n                    changePreCommit : 'onAssignmentChange', // In EventSelection.js\n                    commitStart     : 'onAssignmentCommitStart',\n                    commit          : 'onAssignmentCommit',\n                    exception       : 'onAssignmentException',\n                    beforeRemove    : {\n                        fn   : 'onAssignmentBeforeRemove',\n                        // We must go last in case an app vetoes a remove\n                        // by returning false from a handler.\n                        prio : -1000\n                    }\n                }\n            },\n\n            dependencyStore : {\n                dataName : 'dependencies'\n            },\n\n            calendarManagerStore   : {},\n            timeRangeStore         : {},\n            resourceTimeRangeStore : {}\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Overridden to *not* auto create a store at the Scheduler level.\n             * The store is the {@link Scheduler.data.ResourceStore} of the backing project\n             * @config {Core.data.Store}\n             * @private\n             */\n            store : null,\n\n            /**\n             * The name of the start date parameter that will be passed to in every `eventStore` load request.\n             * @config {String}\n             * @category Data\n             */\n            startParamName : 'startDate',\n\n            /**\n             * The name of the end date parameter that will be passed to in every `eventStore` load request.\n             * @config {String}\n             * @category Data\n             */\n            endParamName : 'endDate',\n\n            /**\n             * Set to true to include `startDate` and `endDate` params indicating the currently viewed date range.\n             * Dates are formatted using the same format as the `startDate` field on the EventModel\n             * (e.g. 2023-03-08T00:00:00+01:00).\n             *\n             * Enabled by default in version 6.0 and above.\n             *\n             * @config {Boolean}\n             */\n            passStartEndParameters : VersionHelper.checkVersion('core', '6.0', '>='),\n\n            /**\n             * Class that should be used to instantiate a CrudManager in case it's provided as a simple object to\n             * {@link #config-crudManager} config.\n             * @config {Scheduler.data.CrudManager}\n             * @typings {typeof CrudManager}\n             * @category Data\n             */\n            crudManagerClass : null,\n\n            /**\n             * Get/set the CrudManager instance\n             * @member {Scheduler.data.CrudManager} crudManager\n             * @category Data\n             */\n            /**\n             * Supply a {@link Scheduler.data.CrudManager} instance or a config object if you want to use\n             * CrudManager for handling data.\n             * @config {CrudManagerConfig|Scheduler.data.CrudManager}\n             * @category Data\n             */\n            crudManager : null\n        };\n    }\n\n    //endregion\n\n    //region Project\n\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n\n        this.detachListeners('schedulerStores');\n\n        project.ion({\n            name    : 'schedulerStores',\n            refresh : 'onProjectRefresh',\n            thisObj : this\n        });\n    }\n\n    // Called when project changes are committed, before data is written back to records (but still ready to render\n    // since data is fetched from engine)\n    onProjectRefresh({ isInitialCommit }) {\n        const me = this;\n\n        // Only update the UI immediately if we are visible\n        if (me.isVisible) {\n            if (isInitialCommit) {\n                if (me.isVertical) {\n                    me.refreshAfterProjectRefresh = false;\n                    me.refreshWithTransition();\n                }\n            }\n\n            if (me.navigateToAfterRefresh) {\n                me.navigateTo(me.navigateToAfterRefresh);\n                me.navigateToAfterRefresh = null;\n            }\n\n            if (me.refreshAfterProjectRefresh) {\n                me.refreshWithTransition(false, !isInitialCommit);\n                me.refreshAfterProjectRefresh = false;\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            me.whenVisible('refresh', me, [true]);\n        }\n    }\n\n    //endregion\n\n    //region CrudManager\n\n    changeCrudManager(crudManager) {\n        const me = this;\n\n        if (crudManager && !crudManager.isCrudManager) {\n            //<debug>\n            if (!me.crudManagerClass) {\n                throw new Error('No CrudManager class configured on CrudManager\\'s View');\n            }\n            //</debug>\n\n            // CrudManager injects itself into is Scheduler's _crudManager property\n            // because code it triggers needs to access it through its getter.\n            crudManager = me.crudManagerClass.new({\n                scheduler : me\n            }, crudManager);\n        }\n        // config setter will veto because of above described behaviour\n        // of setting the property early on creation\n        me._crudManager = crudManager;\n\n        me.bindCrudManager(crudManager);\n    }\n\n    //endregion\n\n    //region Row store\n\n    get store() {\n        // Vertical uses a dummy store\n        if (!this._store && this.isVertical) {\n            // <remove-on-release>\n            // TODO: Make this store readonly, since we are using single cell approach\n            // </remove-on-release>\n            this._store = new Store({\n                data : [\n                    {\n                        id  : 'verticalTimeAxisRow', // no-sanity\n                        cls : 'b-verticaltimeaxis-row'\n                    }\n                ]\n            });\n        }\n\n        return super.store;\n    }\n\n    set store(store) {\n        super.store = store;\n    }\n\n    // Wrap w/ transition refreshFromRowOnStoreAdd() inherited from Grid\n    refreshFromRowOnStoreAdd(row, { isExpand, records }) {\n        const args = arguments;\n\n        this.runWithTransition(() => {\n            // Postpone drawing of events for a new resource until the following project refresh. Previously the draw\n            // would not happen because engine was not ready, but now when we allow commits and can read values during\n            // commit that block is no longer there\n            this.currentOrientation.suspended = !isExpand && !records.some(r => r.isLinked);\n\n            super.refreshFromRowOnStoreAdd(row, ...args);\n\n            this.currentOrientation.suspended = false;\n        }, !isExpand);\n    }\n\n    onStoreAdd(event) {\n        super.onStoreAdd(event);\n\n        if (this.isPainted) {\n            this.calculateRowHeights(event.records);\n        }\n    }\n\n    onStoreUpdateRecord({ source : store, record, changes }) {\n        // Ignore engine changes that do not affect row rendering\n        let ignoreCount = 0;\n\n        if ('assigned' in changes) {\n            ignoreCount++;\n        }\n\n        if ('calendar' in changes) {\n            ignoreCount++;\n        }\n\n        if (ignoreCount !== Object.keys(changes).length) {\n            super.onStoreUpdateRecord(...arguments);\n        }\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    updateResourceStore(resourceStore) {\n        // Reconfigure grid if resourceStore is backing the rows\n        if (resourceStore && this.isHorizontal) {\n            resourceStore.metaMapId = this.id;\n            this.store = resourceStore;\n        }\n    }\n\n    get usesDisplayStore() {\n        return this.store !== this.resourceStore;\n    }\n\n    //endregion\n\n    //region Events\n\n    onEventIdChange(params) {\n        this.currentOrientation.onEventStoreIdChange && this.currentOrientation.onEventStoreIdChange(params);\n    }\n\n    /**\n     * Listener to the batchedUpdate event which fires when a field is changed on a record which\n     * is batch updating. Occasionally UIs must keep in sync with batched changes.\n     * For example, the EventResize feature performs batched updating of the startDate/endDate\n     * and it tells its client to listen to batchedUpdate.\n     * @private\n     */\n    onEventStoreBatchedUpdate(event) {\n        if (this.listenToBatchedUpdates) {\n            return this.onInternalEventStoreChange(event);\n        }\n    }\n\n    /**\n     * Calls appropriate functions for current event layout when the event store is modified.\n     * @private\n     */\n    // Named as Internal to avoid naming collision with wrappers that relay events\n    onInternalEventStoreChange(params) {\n        // Too early, bail out\n        // Also bail out if this is a reassign using resourceId, any updates will be handled by AssignmentStore instead\n        if (!this.isPainted || !this._mode || params.isAssign || this.assignmentStore.isRemovingAssignment) {\n            return;\n        }\n\n        // Only respond if we are visible. If not, defer until we are shown\n        if (this.isVisible) {\n            this.currentOrientation.onEventStoreChange(params);\n        }\n        else {\n            this.whenVisible(this.onInternalEventStoreChange, this, [params]);\n        }\n    }\n\n    /**\n     * Refreshes committed events, to remove dirty/committing flag.\n     * CSS is added\n     * @private\n     */\n    onEventCommit({ changes }) {\n        let resourcesToRepaint = [...changes.added, ...changes.modified].map(\n            eventRecord => this.eventStore.getResourcesForEvent(eventRecord)\n        );\n\n        // getResourcesForEvent returns an array, so need to flatten resourcesToRepaint\n        resourcesToRepaint = Array.prototype.concat.apply([], resourcesToRepaint);\n\n        // repaint relevant resource rows\n        new Set(resourcesToRepaint).forEach(\n            resourceRecord => this.repaintEventsForResource(resourceRecord)\n        );\n    }\n\n    /**\n     * Adds the committing flag to changed events before commit.\n     * @private\n     */\n    onEventCommitStart({ changes }) {\n        const { currentOrientation, committingCls } = this;\n        // Committing sets a flag in meta that during event rendering applies a CSS class. But to not mess up drag and\n        // drop between resources no redraw is performed before committing, so class is never applied to the element(s).\n        // Applying here instead\n        [...changes.added, ...changes.modified].forEach(eventRecord =>\n            eventRecord.assignments.forEach(\n                assignmentRecord => currentOrientation.toggleCls(assignmentRecord, committingCls, true)\n            )\n        );\n    }\n\n    // Clear committing flag\n    onEventException({ action }) {\n        if (action === 'commit') {\n            const { changes } = this.eventStore;\n\n            [...changes.added, ...changes.modified, ...changes.removed].forEach(eventRecord =>\n                this.repaintEvent(eventRecord)\n            );\n        }\n    }\n\n    onAssignmentCommit({ changes }) {\n        this.repaintEventsForAssignmentChanges(changes);\n    }\n\n    onAssignmentCommitStart({ changes }) {\n        const { currentOrientation, committingCls } = this;\n\n        [...changes.added, ...changes.modified].forEach(assignmentRecord => {\n            currentOrientation.toggleCls(assignmentRecord, committingCls, true);\n        });\n    }\n\n    // Clear committing flag\n    onAssignmentException({ action }) {\n        if (action === 'commit') {\n            this.repaintEventsForAssignmentChanges(this.assignmentStore.changes);\n        }\n    }\n\n    repaintEventsForAssignmentChanges(changes) {\n        const resourcesToRepaint = [...changes.added, ...changes.modified, ...changes.removed].map(\n            assignmentRecord => assignmentRecord.getResource()\n        );\n\n        // repaint relevant resource rows\n        new Set(resourcesToRepaint).forEach(\n            resourceRecord => this.repaintEventsForResource(resourceRecord)\n        );\n    }\n\n    onAssignmentBeforeRemove({ records, removingAll }) {\n        if (removingAll) {\n            return;\n        }\n\n        const me = this;\n\n        let moveTo;\n\n        // Deassigning the active assignment\n        if (!me.isConfiguring &&\n            // If we have current active assignment or we scheduled navigating to an assignment, we should check\n            // if we're removing that assignment in order to avoid navigating to it\n            (me.navigateToAfterRefresh || me.activeAssignment && records.includes(me.activeAssignment))\n        ) {\n            // If next navigation target is removed, clean up the flag\n            if (records.includes(me.navigateToAfterRefresh)) {\n                me.navigateToAfterRefresh = null;\n            }\n            // If being done by a keyboard gesture then look for a close target until we find an existing record, not\n            // scheduled for removal. Otherwise, push focus outside of the Scheduler.\n            // This condition will react not only on meaningful keyboard action - like pressing DELETE key on selected\n            // event - but also in case user started dragging and pressed CTRL (or any other key) in process.\n            // https://github.com/bryntum/support/issues/3479\n            if (GlobalEvents.lastInteractionType === 'key') {\n                // Look for a close target until we find an existing record, not scheduled for removal. Provided\n                // assignment position in store is arbitrary as well as order of removed records, it does not make much\n                // sense trying to apply any specific order to them. Existing assignment next to any removed one is as\n                // good as any.\n                for (let i = 0, l = records.length; i < l && !moveTo; i++) {\n                    const assignment = records[i];\n\n                    if (assignment.resource && assignment.resource.isModel) {\n                        // Find next record\n                        let next = me.getNext(assignment);\n\n                        // If next record is not found or also removed, look for previous. This should not become a\n                        // performance bottleneck because we only can get to this code if project is committing, if\n                        // records are removed on a dragdrop listener and user pressed any key after mousedown, or if\n                        // user is operating with a keyboard and pressed [DELETE] to remove multiple records.\n                        if (!next || records.includes(next)) {\n                            next = me.getPrevious(assignment);\n                        }\n\n                        if (next && !records.includes(next)) {\n                            moveTo = next;\n                        }\n                    }\n                }\n            }\n\n            // Move focus away from the element which will soon have no backing data.\n            if (moveTo) {\n                // Although removing records from assignment store will trigger project commit and consequently\n                // `refresh` event on the project which will use this record to navigate to, some tests expect\n                // immediate navigation\n                me.navigateTo(moveTo);\n                me.navigateToAfterRefresh = moveTo;\n            }\n            // Focus must exit the Scheduler's subgrid, otherwise, if a navigation\n            // key gesture is delivered before the outgoing event's element has faded\n            // out and been removed, navigation will be attempted from a deleted\n            // event. Animated hiding is problematic.\n            //\n            // We cannot just revertFocus() because that might move focus back to an\n            // element in a floating EventEditor which is not yet faded out and\n            // been removed. Animated hiding is problematic.\n            //\n            // We cannot focus scheduler.timeAxisColumn.element because the browser\n            // would scroll it in some way if we have horizontal overflow.\n            //\n            // The only thing we can know about to focus here is the Scheduler itself.\n            else {\n                DomHelper.focusWithoutScrolling(me.focusElement);\n            }\n        }\n    }\n\n    //endregion\n\n    //region TimeRangeStore & TimeRanges\n\n    /**\n     * Inline time ranges, will be loaded into an internally created store if {@link Scheduler.feature.TimeRanges}\n     * is enabled.\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Data\n     */\n\n    /**\n     * Get/set time ranges, applies to the backing project's TimeRangeStore.\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the time ranges store instance or config object for {@link Scheduler.feature.TimeRanges} feature.\n     * @member {Core.data.Store} timeRangeStore\n     * @accepts {Core.data.Store|StoreConfig}\n     * @category Data\n     */\n\n    /**\n     * The time ranges store instance for {@link Scheduler.feature.TimeRanges} feature.\n     * @config {Core.data.Store|StoreConfig} timeRangeStore\n     * @category Data\n     */\n\n    set timeRanges(timeRanges) {\n        this.project.timeRanges = timeRanges;\n    }\n\n    get timeRanges() {\n        return this.project.timeRanges;\n    }\n\n    //endregion\n\n    //region ResourceTimeRangeStore\n\n    /**\n     * Inline resource time ranges, will be loaded into an internally created store if\n     * {@link Scheduler.feature.ResourceTimeRanges} is enabled.\n     * @prp {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource time ranges store instance for {@link Scheduler.feature.ResourceTimeRanges} feature.\n     * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n     * @accepts {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n     * @category Data\n     */\n\n    /**\n     * Resource time ranges store instance or config object for {@link Scheduler.feature.ResourceTimeRanges} feature.\n     * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig} resourceTimeRangeStore\n     * @category Data\n     */\n\n    set resourceTimeRanges(resourceTimeRanges) {\n        this.project.resourceTimeRanges = resourceTimeRanges;\n    }\n\n    get resourceTimeRanges() {\n        return this.project.resourceTimeRanges;\n    }\n\n    //endregion\n\n    //region Other functions\n\n    onBeforeLoad({ params }) {\n        this.applyStartEndParameters(params);\n    }\n\n    /**\n     * Get events grouped by timeAxis ticks from resources array\n     * @category Data\n     * @param {Scheduler.model.ResourceModel[]} resources An array of resources to process. If not passed, all resources\n     * will be used.\n     * @param {Function} filterFn filter function to filter events if required. Optional.\n     * @private\n     */\n    getResourcesEventsPerTick(resources, filterFn) {\n        const\n            { timeAxis, resourceStore } = this,\n            eventsByTick                = [];\n\n        resources = resources || resourceStore.records;\n        resources.forEach(resource => {\n            resource.events.forEach(event => {\n                if (!timeAxis.isTimeSpanInAxis(event) || (filterFn && !filterFn.call(this, { resource, event }))) {\n                    return;\n                }\n                // getTickFromDate may return float if event starts/ends in a middle of a tick\n                let startTick = Math.floor(timeAxis.getTickFromDate(event.startDate)),\n                    endTick = Math.ceil(timeAxis.getTickFromDate(event.endDate));\n\n                // if startDate/endDate of the event is out of timeAxis' bounds, use first/last tick id instead\n                if (startTick == -1) {\n                    startTick = 0;\n                }\n\n                if (endTick === -1) {\n                    endTick = timeAxis.ticks.length;\n                }\n\n                do {\n                    if (!eventsByTick[startTick]) {\n                        eventsByTick[startTick] = [event];\n                    }\n                    else {\n                        eventsByTick[startTick].push(event);\n                    }\n                } while (++startTick < endTick);\n            });\n        });\n\n        return eventsByTick;\n    }\n\n    //endregion\n\n    //region WidgetClass\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerScroll\n */\n\nconst\n    defaultScrollOptions = {\n        block      : 'nearest',\n        edgeOffset : 20\n    },\n    unrenderedScrollOptions = {\n        highlight : false,\n        focus     : false\n    };\n\n/**\n * Functions for scrolling to events, dates etc.\n *\n * @mixin\n */\nexport default Target => class SchedulerScroll extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerScroll';\n    }\n\n    //region Scroll to event\n\n    /**\n     * Scrolls an event record into the viewport.\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes to locate the event.\n     *\n     * This function is not applicable for events with multiple assignments, please use #scrollResourceEventIntoView instead.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord the event record to scroll into view\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @async\n     * @category Scrolling\n     */\n    async scrollEventIntoView(eventRecord, options = defaultScrollOptions) {\n        const\n            me        = this,\n            resources = eventRecord.resources || [eventRecord];\n\n        if (resources.length > 1) {\n            throw new Error('scrollEventIntoView() is not applicable for events with multiple assignments, please use scrollResourceEventIntoView() instead.');\n        }\n\n        if (!resources.length) {\n            console.warn('You have asked to scroll to an event which is not assigned to a resource');\n        }\n\n        await me.scrollResourceEventIntoView(resources[0], eventRecord, options);\n    }\n\n    /**\n     * Scrolls an assignment record into the viewport.\n     *\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes\n     * to locate the event.\n     *\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord A resource record an event record is assigned to\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     */\n    scrollAssignmentIntoView(assignmentRecord, ...args) {\n        return this.scrollResourceEventIntoView(assignmentRecord.resource, assignmentRecord.event, ...args);\n    }\n\n    /**\n     * Scrolls a resource event record into the viewport.\n     *\n     * If the resource store is a tree store, this method will also expand all relevant parent nodes\n     * to locate the event.\n     *\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record an event record is assigned to\n     * @param {Scheduler.model.EventModel} eventRecord An event record to scroll into view\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     * @category Scrolling\n     * @async\n     */\n    async scrollResourceEventIntoView(resourceRecord, eventRecord, options = defaultScrollOptions) {\n        const\n            me             = this,\n            eventStart     = eventRecord.startDate,\n            eventEnd       = eventRecord.endDate,\n            eventIsOutside = eventRecord.isScheduled && eventStart < me.timeAxis.startDate | ((eventEnd > me.timeAxis.endDate) << 1);\n\n        // <remove-on-release>\n        // TODO: Remove in 6.0\n        // </remove-on-release>\n        if (arguments.length > 3) {\n            options = arguments[3];\n        }\n\n        let el;\n\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n\n        // Make sure event is within TimeAxis time span unless extendTimeAxis passed as false.\n        // The EventEdit feature passes false because it must not mutate the TimeAxis.\n        // Bitwise flag:\n        //  1 === start is before TimeAxis start.\n        //  2 === end is after TimeAxis end.\n        if (eventIsOutside && options.extendTimeAxis !== false) {\n            const currentTimeSpanRange = me.timeAxis.endDate - me.timeAxis.startDate;\n\n            // Event is too wide, expand the range to encompass it.\n            if (eventIsOutside === 3) {\n                await me.setTimeSpan(\n                    new Date(eventStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(eventEnd.valueOf()  + currentTimeSpanRange / 2)\n                );\n            }\n            else if (me.infiniteScroll) {\n                const\n                    { visibleDateRange } = me,\n                    visibleMS = visibleDateRange.endMS - visibleDateRange.startMS,\n                    // If event starts before time axis, scroll to a date one full viewport after target date\n                    // (reverse for an event starting after time axis), to allow a scroll animation\n                    sign = eventIsOutside & 1 ? 1 : -1;\n\n                await me.setTimeSpan(\n                    new Date(eventStart.valueOf()  - currentTimeSpanRange / 2),\n                    new Date(eventStart.valueOf() + currentTimeSpanRange / 2),\n                    {\n                        visibleDate : new Date(eventEnd.valueOf() + (sign * visibleMS))\n                    }\n                );\n            }\n            // Event is partially or wholly outside but will fit.\n            // Move the TimeAxis to include it. That will maintain visual position.\n            else {\n                // Event starts before\n                if (eventIsOutside & 1) {\n                    await me.setTimeSpan(\n                        new Date(eventStart),\n                        new Date(eventStart.valueOf() + currentTimeSpanRange)\n                    );\n                }\n                // Event ends after\n                else {\n                    await me.setTimeSpan(\n                        new Date(eventEnd.valueOf() - currentTimeSpanRange),\n                        new Date(eventEnd)\n                    );\n                }\n            }\n        }\n\n        if (me.store.tree) {\n            // If we're a tree, ensure parents are expanded first\n            await me.expandTo?.(resourceRecord);\n        }\n\n        // Handle nested events too\n        if (eventRecord.parent && !eventRecord.parent.isRoot) {\n            await this.scrollEventIntoView(eventRecord.parent);\n        }\n\n        // Establishing element to scroll to\n        el = me.getElementFromEventRecord(eventRecord, resourceRecord);\n\n        if (el) {\n            // It's usually the event wrapper that holds focus\n            if (!DomHelper.isFocusable(el)) {\n                el = el.parentNode;\n            }\n\n            const scroller = me.timeAxisSubGrid.scrollable;\n\n            // Scroll into view with animation and highlighting if needed.\n            await scroller.scrollIntoView(el, options);\n        }\n        // If event is fully outside the range, and we are not allowed to extend\n        // the range, then we cannot perform the operation.\n        else if (eventIsOutside === 3 && options.extendTimeAxis === false) {\n            console.warn('You have asked to scroll to an event which is outside the current view and extending timeaxis is disabled');\n        }\n        else if (!eventRecord.isOccurrence && !me.eventStore.isAvailable(eventRecord)) {\n            console.warn('You have asked to scroll to an event which is not available');\n        }\n        else if (eventRecord.isScheduled) {\n            // Event scheduled but not rendered, scroll to calculated location\n            await me.scrollUnrenderedEventIntoView(resourceRecord, eventRecord, options);\n        }\n        else {\n            // Event not scheduled, just scroll resource row into view\n            await me.scrollResourceIntoView(resourceRecord, options);\n        }\n    }\n\n    /**\n     * Scrolls an unrendered event into view. Internal function used from #scrollResourceEventIntoView.\n     * @private\n     * @category Scrolling\n     */\n    scrollUnrenderedEventIntoView(resourceRec, eventRec, options = defaultScrollOptions) {\n        // We must only resolve when the event's element has been painted\n        // *and* the scroll has fully completed.\n        return new Promise(resolve => {\n            const\n                me               = this,\n                // Knock out highlight and focus options. They must be applied after the scroll\n                // has fully completed and we have an element. Use a default edgeOffset of 20.\n                modifiedOptions  = Object.assign({ edgeOffset : 20 }, options, unrenderedScrollOptions),\n                scroller         = me.timeAxisSubGrid.scrollable,\n                box              = me.getResourceEventBox(eventRec, resourceRec),\n                scrollerViewport = scroller.viewport;\n\n            // Event may fall on a time not included by workingTime settings\n            if (!scrollerViewport || !box) {\n                resolve();\n                return;\n            }\n\n            // In case of subPixel position, scroll the whole pixel into view\n            box.x = Math.ceil(box.x);\n            box.y = Math.ceil(box.y);\n\n            if (me.rtl) {\n                // RTL scrolls in negative direction but coordinates are still LTR\n                box.translate(-me.timeAxisViewModel.totalSize + scrollerViewport.width, 0);\n            }\n\n            // Note use of scroller.scrollLeft here. We need the natural DOM scrollLeft value\n            // not the +ve X position along the scrolling axis.\n            box.translate(scrollerViewport.x - scroller.scrollLeft, scrollerViewport.y - scroller.y);\n\n            const\n                // delta         = scroller.getDeltaTo(box, modifiedOptions)[me.isHorizontal ? 'xDelta' : 'yDelta'],\n                onEventRender = async({ eventRecord, element, targetElement }) => {\n                    if (eventRecord === eventRec) {\n                        // Vertical's renderEvent is different to horizontal's\n                        const el = element || targetElement;\n\n                        detacher();\n\n                        // Don't resolve until the scroll has fully completed.\n                        await initialScrollPromise;\n\n                        options.highlight && DomHelper.highlight(el);\n                        options.focus && el.focus();\n\n                        resolve();\n                    }\n                },\n                // On either paint or repaint of the event, resolve the scroll promise and detach the listeners.\n                detacher = me.ion({\n                    renderEvent : onEventRender\n                }),\n                initialScrollPromise = scroller.scrollIntoView(box, modifiedOptions);\n\n            initialScrollPromise.then(() => {\n                if (initialScrollPromise.cancelled) {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Scrolls the specified resource into view, works for both horizontal and vertical modes.\n     * @param {Scheduler.model.ResourceModel} resourceRecord A resource record an event record is assigned to\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A promise which is resolved when the scrolling has finished.\n     * @category Scrolling\n     */\n    scrollResourceIntoView(resourceRecord, options = defaultScrollOptions) {\n        if (this.isVertical) {\n            return this.currentOrientation.scrollResourceIntoView(resourceRecord, options);\n        }\n        return this.scrollRowIntoView(resourceRecord, options);\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerRegions\n */\n\n/**\n * Functions to get regions (bounding boxes) for scheduler, events etc.\n *\n * @mixin\n */\nexport default Target => class SchedulerRegions extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerRegions';\n    }\n\n    //region Orientation dependent regions\n\n    /**\n     * Gets the region represented by the schedule and optionally only for a single resource. The view will ask the\n     * scheduler for the resource availability by calling getResourceAvailability. By overriding that method you can\n     * constrain events differently for different resources.\n     * @param {Scheduler.model.ResourceModel} resourceRecord (optional) The resource record\n     * @param {Scheduler.model.EventModel} eventRecord (optional) The event record\n     * @returns {Core.helper.util.Rectangle} The region of the schedule\n     */\n    getScheduleRegion(resourceRecord, eventRecord, local = true, dateConstraints) {\n        return this.currentOrientation.getScheduleRegion(...arguments);\n    }\n\n    /**\n     * Gets the region, relative to the timeline view element, representing the passed resource and optionally just for a certain date interval.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Date} startDate A start date constraining the region\n     * @param {Date} endDate An end date constraining the region\n     * @returns {Core.helper.util.Rectangle} A Rectangle which encapsulates the resource time span\n     */\n    getResourceRegion(resourceRecord, startDate, endDate) {\n        return this.currentOrientation.getRowRegion(...arguments);\n    }\n\n    //endregion\n\n    //region ResourceEventBox\n\n    getAssignmentEventBox(assignmentRecord, includesOutside) {\n        return this.getResourceEventBox(assignmentRecord.event, assignmentRecord.resource, includesOutside);\n    }\n\n    /**\n     * Get the region for a specified resources specified event.\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Boolean} includeOutside Specify true to get boxes for events outside of the rendered zone in both\n     *   dimensions. This option is used when calculating dependency lines, and we need to include routes from events\n     *   which may be outside the rendered zone.\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getResourceEventBox(eventRecord, resourceRecord, includeOutside = false, roughly = false) {\n        return this.currentOrientation.getResourceEventBox(...arguments);\n    }\n\n    //endregion\n\n    //region Item box\n\n    /**\n     * Gets box for displayed item designated by the record. If several boxes are displayed for the given item\n     * then the method returns all of them. Box coordinates are in view coordinate system.\n     *\n     * Boxes outside scheduling view timeaxis timespan and inside collapsed rows (if row defining store is a tree store)\n     * will not be returned. Boxes outside scheduling view vertical visible area (i.e. boxes above currently visible\n     * top row or below currently visible bottom row) will be calculated approximately.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Object|Object[]}\n     * @returns {Boolean} return.isPainted Whether the box was calculated for the rendered scheduled record or was\n     *    approximately calculated for the scheduled record outside of the current vertical view area.\n     * @returns {Number} return.top\n     * @returns {Number} return.bottom\n     * @returns {Number} return.start\n     * @returns {Number} return.end\n     * @returns {'before'|'after'} return.relPos if the item is not rendered then provides a view relative\n     * position one of 'before', 'after'\n     * @internal\n     */\n    getItemBox(event, includeOutside = false) {\n        return event.resources.map(resource => this.getResourceEventBox(event, resource, includeOutside));\n    }\n\n    //endregion\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/view/mixin/SchedulerState\n */\n\nconst copyProperties = [\n    'eventLayout',\n    'mode',\n    'eventColor',\n    'eventStyle',\n    'tickSize',\n    'fillTicks'\n];\n\n/**\n * A Mixin for Scheduler that handles state. It serializes the following scheduler properties, in addition to what\n * is already stored by its superclass {@link Grid/view/mixin/GridState}:\n *\n * * eventLayout\n * * barMargin\n * * mode\n * * tickSize\n * * zoomLevel\n * * eventColor\n * * eventStyle\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class SchedulerState extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerState';\n    }\n\n    /**\n     * Gets or sets scheduler's state. Check out {@link Scheduler.view.mixin.SchedulerState} mixin\n     * and {@link Grid.view.mixin.GridState} for more details.\n     * @member {Object} state\n     * @property {String} state.eventLayout\n     * @property {String} state.eventStyle\n     * @property {String} state.eventColor\n     * @property {Number} state.barMargin\n     * @property {Number} state.tickSize\n     * @property {Boolean} state.fillTicks\n     * @property {Number} state.zoomLevel\n     * @property {'horizontal'|'vertical'} state.mode\n     * @property {Object[]} state.columns\n     * @property {Boolean} state.readOnly\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.selectedCell\n     * @property {String} state.style\n     * @property {Object} state.subGrids\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @category State\n     */\n\n    /**\n     * Get scheduler's current state for serialization. State includes rowHeight, headerHeight, readOnly, selectedCell,\n     * selectedRecordId, column states and store state etc.\n     * @returns {Object} State object to be serialized\n     * @private\n     */\n    getState() {\n        return ObjectHelper.copyProperties(super.getState(), this, copyProperties);\n    }\n\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        this.suspendRefresh();\n\n        let propsToCopy = copyProperties.slice();\n\n        if (state?.eventLayout === 'layoutFn') {\n            delete state.eventLayout;\n            propsToCopy.splice(propsToCopy.indexOf('eventLayout'), 1);\n        }\n\n        // Zoom level will set tick size, no need to update model additionally\n        if (state?.zoomLevelOptions?.width) {\n            propsToCopy = propsToCopy.filter(p => p !== 'tickSize');\n        }\n\n        ObjectHelper.copyProperties(this, state, propsToCopy);\n\n        super.applyState(state);\n\n        this.resumeRefresh(true);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport Collection from '../../../Core/util/Collection.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/view/mixin/EventSelection\n */\n\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class EventSelection extends (Target || Base) {\n    static get $name() {\n        return 'EventSelection';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightPredecessors : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightSuccessors : false,\n\n            /**\n             * Configure as `true` to deselect a selected event upon click.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            deselectOnClick : false,\n\n            /**\n             * Configure as `false` to preserve selection when clicking the empty schedule area.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            deselectAllOnScheduleClick : true,\n\n            /**\n             * Collection to store selection.\n             * @config {Core.util.Collection}\n             * @private\n             */\n            selectedCollection : {}\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.\n             * @config {Boolean}\n             * @category Selection\n             */\n            multiEventSelect : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to disable event selection.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            eventSelectionDisabled : false,\n\n            /**\n             * CSS class to add to selected events.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventSelectedCls : 'b-sch-event-selected',\n\n            /**\n             * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            triggerSelectionChangeOnRemove : false,\n\n            /**\n             * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset\n             * (if selected event ids are included in the newly loaded dataset).\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            maintainSelectionOnDatasetChange : true,\n\n            /**\n             * CSS class to add to other instances of a selected event, to highlight them.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventAssignHighlightCls : 'b-sch-event-assign-selected'\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired any time there is a change to the events selected in the Scheduler.\n     * @event eventSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of the Events added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of the Event removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the events selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeEventSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of events that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of events that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected events, before applying `selected` and `deselected`.\n     */\n\n    /**\n     * Fired any time there is a change to the assignments selected in the Scheduler.\n     * @event assignmentSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.AssignmentModel[]} selected An array of the Assignments added to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} deselected An array of the Assignments removed from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the assignments selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeAssignmentSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of assignments that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of assignments that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected assignments, before applying `selected` and `deselected`.\n     */\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.navigator?.ion({\n            navigate : 'onEventNavigate',\n            thisObj  : this\n        });\n    }\n\n    //endregion\n\n    //region Selected Collection\n\n    changeSelectedCollection(selectedCollection) {\n        if (!selectedCollection.isCollection) {\n            selectedCollection = new Collection(selectedCollection);\n        }\n\n        return selectedCollection;\n    }\n\n    updateSelectedCollection(selectedCollection) {\n        const me = this;\n\n        // When sharing collection, only the owner should destroy it\n        if (!selectedCollection.owner) {\n            selectedCollection.owner = me;\n        }\n\n        // Fire row change events from onSelectedCollectionChange\n        selectedCollection.ion({\n            change : (...args) => me.project.deferUntilRepopulationIfNeeded(\n                'onSelectedCollectionChange',\n                (...args) => !me.isDestroying && me.onSelectedCollectionChange(...args),\n                args\n            ),\n            // deferring this handler breaks the UI\n            beforeSplice : 'onBeforeSelectedCollectionSplice',\n            thisObj      : me\n        });\n    }\n\n    get selectedCollection() {\n        return this._selectedCollection;\n    }\n\n    getActionType(selection, selected, deselected) {\n        return (selection.length > 0)\n            ? ((selected.length > 0 && deselected.length > 0)\n                ? 'update'\n                : (selected.length > 0\n                    ? 'select'\n                    : 'deselect'))\n            : 'clear';\n    }\n\n    //endregion\n\n    //region Modify selection\n\n    getEventsFromAssignments(assignments) {\n        return ArrayHelper.unique(assignments.map(assignment => assignment.event));\n    }\n\n    /**\n     * The {@link Scheduler.model.EventModel events} which are selected.\n     * @property {Scheduler.model.EventModel[]}\n     * @category Selection\n     */\n    get selectedEvents() {\n        return this.getEventsFromAssignments(this.selectedCollection.values);\n    }\n\n    set selectedEvents(events) {\n        // Select all assignments\n        const assignments = [];\n\n        events = ArrayHelper.asArray(events);\n\n        events?.forEach(event => {\n            if (this.isEventSelectable(event) !== false) {\n                if (event.isOccurrence) {\n                    event.assignments.forEach(as => {\n                        assignments.push(this.assignmentStore.getOccurrence(as, event));\n                    });\n                }\n                else {\n                    assignments.push(...event.assignments);\n                }\n            }\n        });\n\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments);\n    }\n\n    /**\n     * The {@link Scheduler.model.AssignmentModel events} which are selected.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Selection\n     */\n    get selectedAssignments() {\n        return this.selectedCollection.values;\n    }\n\n    set selectedAssignments(assignments) {\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments || []);\n    }\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.EventModel event} is selected.\n     * @param {Scheduler.model.EventModel} event The event\n     * @returns {Boolean} Returns `true` if the event is selected\n     * @category Selection\n     */\n    isEventSelected(event) {\n        const { selectedCollection } = this;\n\n        return Boolean(selectedCollection.count && selectedCollection.includes(event.assignments));\n    }\n\n    /**\n     * A template method (empty by default) allowing you to control if an event can be selected or not.\n     *\n     * ```javascript\n     * new Scheduler({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * This selection process is applicable to calendar too:\n     *\n     * ```javascript\n     * new Calendar({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * @param {Scheduler.model.EventModel} event The event record\n     * @returns {Boolean} true if event can be selected, otherwise false\n     * @prp {Function}\n     * @category Selection\n     */\n    isEventSelectable(event) {}\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.AssignmentModel assignment} is selected.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment\n     * @returns {Boolean} Returns `true` if the assignment is selected\n     * @category Selection\n     */\n    isAssignmentSelected(assignment) {\n        return this.selectedCollection.includes(assignment);\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is not selected*. Selecting events results in all their assignments being selected.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events or assignments\n     * @category Selection\n     */\n    select(eventOrAssignment, preserveSelection = false) {\n        if (eventOrAssignment.isAssignment) {\n            this.selectAssignment(eventOrAssignment, preserveSelection);\n        }\n        else {\n            this.selectEvent(eventOrAssignment, preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} *if it is not selected*. Selecting an event will\n     * select all its assignments.\n     * @param {Scheduler.model.EventModel} event The event to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvent(event, preserveSelection = false) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isEventSelected(event)) {\n            this.selectEvents([event], preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is not selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected assignments\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    selectAssignment(assignment, preserveSelection = false, event) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isAssignmentSelected(assignment)) {\n            preserveSelection ? this.selectedCollection.add(assignment) : this.selectedAssignments = assignment;\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is selected*.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to deselect.\n     * @category Selection\n     */\n    deselect(eventOrAssignment) {\n        if (eventOrAssignment.isAssignment) {\n            this.deselectAssignment(eventOrAssignment);\n        }\n        else {\n            this.deselectEvent(eventOrAssignment);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} *if it is selected*.\n     * @param {Scheduler.model.EventModel} event The event to deselect.\n     * @category Selection\n     */\n    deselectEvent(event) {\n        if (this.isEventSelected(event)) {\n            this.selectedCollection.remove(...event.assignments);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to deselect\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    deselectAssignment(assignment) {\n        if (this.isAssignmentSelected(assignment)) {\n            this.selectedCollection.remove(assignment);\n        }\n    }\n\n    /**\n     * Adds {@link Scheduler.model.EventModel events} to the selection.\n     * @param {Scheduler.model.EventModel[]} events Events to be selected\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvents(events, preserveSelection = false) {\n        if (preserveSelection) {\n            const assignments = (events.reduce((assignments, event) => {\n                if (this.isEventSelectable(event) !== false) {\n                    assignments.push(...event.assignments);\n                }\n                return assignments;\n            }, []));\n\n            this.selectedCollection.add(assignments);\n        }\n        else {\n            this.selectedEvents = events;\n        }\n    }\n\n    /**\n     * Removes {@link Scheduler.model.EventModel events} from the selection.\n     * @param {Scheduler.model.EventModel[]} events Events or assignments  to be deselected\n     * @category Selection\n     */\n    deselectEvents(events) {\n        this.selectedCollection.remove(events.reduce((assignments, event) => {\n            assignments.push(...event.assignments);\n            return assignments;\n        }, []));\n    }\n\n    /**\n     * Adds {@link Scheduler.model.AssignmentModel assignments} to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments to be selected\n     * @category Selection\n     */\n    selectAssignments(assignments) {\n        this.selectedCollection.add(assignments);\n    }\n\n    /**\n     * Removes {@link Scheduler.model.AssignmentModel assignments} from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments  to be deselected\n     * @category Selection\n     */\n    deselectAssignments(assignments) {\n        this.selectedCollection.remove(assignments);\n    }\n\n    /**\n     * Deselects all {@link Scheduler.model.EventModel events} and {@link Scheduler.model.AssignmentModel assignments}.\n     * @category Selection\n     */\n    clearEventSelection() {\n        this.selectedAssignments = [];\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Responds to mutations of the underlying selection Collection.\n     * Keeps the UI synced, eventSelectionChange and assignmentSelectionChange event is fired when `me.silent` is falsy.\n     * @private\n     */\n\n    onBeforeSelectedCollectionSplice({ toAdd, toRemove, index }) {\n        const\n            me = this,\n            selection = me._selectedCollection.values,\n            selected = toAdd,\n            deselected = toRemove > 0 ? selected.slice(index, toRemove + index) : [],\n            action = me.getActionType(selection, selected, deselected);\n\n        if (me.trigger('beforeEventSelectionChange', {\n            action,\n            selection  : me.getEventsFromAssignments(selection) || [],\n            selected   : me.getEventsFromAssignments(selected) || [],\n            deselected : me.getEventsFromAssignments(deselected) || []\n        }) === false) {\n            return false;\n        }\n\n        if (me.trigger('beforeAssignmentSelectionChange', {\n            action,\n            selection,\n            selected,\n            deselected\n        }) === false) {\n            return false;\n        }\n    }\n\n    onSelectedCollectionChange({ added, removed }) {\n        const\n            me         = this,\n            selection  = me.selectedAssignments,\n            selected   = added || [],\n            deselected = removed || [];\n\n        function updateSelection(assignmentRecord, select) {\n            const eventRecord    = assignmentRecord.event;\n\n            if (eventRecord) {\n                const\n                    { eventAssignHighlightCls } = me,\n                    element                     = me.getElementFromAssignmentRecord(assignmentRecord);\n\n                me.currentOrientation.toggleCls(assignmentRecord, me.eventSelectedCls, select);\n\n                eventAssignHighlightCls && me.getElementsFromEventRecord(eventRecord).forEach(el => {\n                    if (el !== element) {\n                        const otherAssignmentRecord = me.resolveAssignmentRecord(el);\n\n                        me.currentOrientation.toggleCls(otherAssignmentRecord, eventAssignHighlightCls, select);\n\n                        if (select) {\n                            // Need to force a reflow to get the highlightning animation triggered\n                            el.style.animation = 'none';\n                            el.offsetHeight;\n                            el.style.animation = '';\n                        }\n                        el.classList.toggle(eventAssignHighlightCls, select);\n                    }\n                });\n            }\n        }\n\n        deselected.forEach(record => updateSelection(record, false));\n        selected.forEach(record => updateSelection(record, true));\n\n        if (me.highlightSuccessors || me.highlightPredecessors) {\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n\n        // To be able to restore selection after reloading resources (which might lead to regenerated assignments in\n        // the single assignment scenario, so cannot rely on records or ids)\n        me.$selectedAssignments = selection.map(assignment => ({\n            eventId    : assignment.eventId,\n            resourceId : assignment.resourceId\n        }));\n\n        if (!me.silent) {\n            const action = this.getActionType(selection, selected, deselected);\n\n            me.trigger('assignmentSelectionChange', {\n                action,\n                selection,\n                selected,\n                deselected\n            });\n\n            me.trigger('eventSelectionChange', {\n                action,\n                selection  : me.selectedEvents,\n                selected   : me.getEventsFromAssignments(selected),\n                deselected : me.getEventsFromAssignments(deselected)\n            });\n        }\n    }\n\n    /**\n     * Assignment change listener to remove events from selection which are no longer in the assignments.\n     * @private\n     */\n    onAssignmentChange(event) {\n        super.onAssignmentChange(event);\n\n        const\n            me = this,\n            { action, records : assignments } = event;\n\n        me.silent = !me.triggerSelectionChangeOnRemove;\n\n        if (action === 'remove') {\n            me.deselectAssignments(assignments);\n        }\n        else if (action === 'removeall' && !me.eventStore.isSettingData) {\n            me.clearEventSelection();\n        }\n        else if (action === 'dataset' && me.$selectedAssignments) {\n            if (!me.maintainSelectionOnDatasetChange) {\n                me.clearEventSelection();\n            }\n            else {\n                const newAssignments = me.$selectedAssignments.map(selector =>\n                    assignments.find(a =>\n                        a.eventId === selector.eventId &&\n                        a.resourceId === selector.resourceId\n                    )\n                );\n\n                me.selectedAssignments = ArrayHelper.clean(newAssignments);\n            }\n        }\n\n        me.silent = false;\n    }\n\n    onInternalEventStoreChange({ source, action, records }) {\n        // Setting empty event dataset cannot be handled in onAssignmentChange above, no assignments might be affected\n        if (!source.isResourceTimeRangeStore && action === 'dataset' && !records.length) {\n            this.clearEventSelection();\n        }\n\n        super.onInternalEventStoreChange(...arguments);\n    }\n\n    /**\n     * Mouse listener to update selection.\n     * @private\n     */\n    onAssignmentSelectionClick(event, clickedRecord) {\n        const me = this;\n\n        // Multi selection: CTRL means preserve selection, just add or remove the event.\n        // Single selection: CTRL deselects already selected event\n        if (me.isAssignmentSelected(clickedRecord)) {\n            if (me.deselectOnClick || event.ctrlKey) {\n                me.deselectAssignment(clickedRecord, me.multiEventSelect, event);\n            }\n        }\n        else if (this.isEventSelectable(clickedRecord.event) !== false) {\n            me.selectAssignment(clickedRecord, event.ctrlKey && me.multiEventSelect, event);\n        }\n    }\n\n    /**\n     * Navigation listener to update selection.\n     * @private\n     */\n    onEventNavigate({ event, item }) {\n        if (!this.eventSelectionDisabled) {\n            const assignment = item && (item.nodeType === Element.ELEMENT_NODE ? this.resolveAssignmentRecord(item) : item);\n\n            if (assignment) {\n                this.onAssignmentSelectionClick(event, assignment);\n            }\n            // The click was not an event or assignment\n            else if (this.deselectAllOnScheduleClick) {\n                this.clearEventSelection();\n            }\n        }\n    }\n\n    changeHighlightSuccessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeHighlightPredecessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeLinkedEvents(value) {\n        const me = this;\n\n        if (value) {\n            me.highlighted = me.highlighted || new Set();\n\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n        else if (me.highlighted) {\n            me.highlightLinkedEvents();\n        }\n\n        return value;\n    }\n\n    // Function that highlights/unhighlights events in a dependency chain\n    highlightLinkedEvents(eventRecords = []) {\n        const\n            me                  = this,\n            {\n                highlighted,\n                eventStore\n            }                   = me,\n            dependenciesFeature = me.features.dependencies;\n\n        // Unhighlight previously highlighted records\n        highlighted.forEach(eventRecord => {\n            if (!eventRecords.includes(eventRecord)) {\n                eventRecord.meta.highlight = false;\n                highlighted.delete(eventRecord);\n\n                if (eventStore.includes(eventRecord)) {\n                    eventRecord.dependencies.forEach(dep => dependenciesFeature.unhighlight(dep, 'b-highlight'));\n                }\n            }\n        });\n\n        eventRecords.forEach(eventRecord => {\n            const toWalk = [eventRecord];\n\n            // Collect all events along the dependency chain\n            while (toWalk.length) {\n                const record = toWalk.pop();\n\n                highlighted.add(record);\n\n                if (me.highlightSuccessors) {\n                    record.outgoingDeps.forEach(outgoing => {\n                        dependenciesFeature.highlight(outgoing, 'b-highlight');\n                        !highlighted.has(outgoing.toEvent) && toWalk.push(outgoing.toEvent);\n                    });\n                }\n                if (me.highlightPredecessors) {\n                    record.incomingDeps.forEach(incoming => {\n                        dependenciesFeature.highlight(incoming, 'b-highlight');\n                        !highlighted.has(incoming.fromEvent) && toWalk.push(incoming.fromEvent);\n                    });\n                }\n            }\n\n            // Highlight them\n            highlighted.forEach(record => record.meta.highlight = true);\n        });\n\n        // Toggle flag on schedulers element, to fade others in or out\n        me.element.classList.toggle('b-highlighting', eventRecords.length > 0);\n\n        me.refreshWithTransition();\n    }\n\n    onEventDataGenerated(renderData) {\n        if (this.highlightSuccessors || this.highlightPredecessors) {\n            renderData.cls['b-highlight'] = renderData.eventRecord.meta.highlight;\n        }\n        super.onEventDataGenerated(renderData);\n    }\n\n    updateProject(project, old) {\n        // Clear selection when the whole world shifts :)\n        this.clearEventSelection();\n\n        super.updateProject(project, old);\n    }\n\n    //endregion\n\n    doDestroy() {\n        this._selectedCollection?.owner === this && this._selectedCollection.destroy();\n\n        super.doDestroy();\n    }\n\n    //region Getters/Setters\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport Navigator from '../../../Core/helper/util/Navigator.js';\nimport Delayable from '../../../Core/mixin/Delayable.js';\nimport Location from '../../../Grid/util/Location.js';\n\n/**\n * @module Scheduler/view/mixin/EventNavigation\n */\n\nconst\n    preventDefault  = e => e.preventDefault(),\n    isArrowKey = {\n        ArrowRight : 1,\n        ArrowLeft  : 1,\n        ArrowUp    : 1,\n        ArrowDown  : 1\n    },\n    animate100 = {\n        animate : 100\n    },\n    emptyObject = Object.freeze({});\n\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class EventNavigation extends Delayable(Target || Base) {\n    static get $name() {\n        return 'EventNavigation';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * A config object to use when creating the {@link Core.helper.util.Navigator}\n             * to use to perform keyboard navigation in the timeline.\n             * @config {NavigatorConfig}\n             * @default\n             * @category Misc\n             * @internal\n             */\n            navigator : {\n                allowCtrlKey   : true,\n                scrollSilently : true,\n                keys           : {\n                    Space     : 'onEventSpaceKey',\n                    Enter     : 'onEventEnterKey',\n                    Delete    : 'onDeleteKey',\n                    Backspace : 'onDeleteKey',\n                    ArrowUp   : 'onArrowUpKey',\n                    ArrowDown : 'onArrowDownKey',\n                    Escape    : 'onEscapeKey',\n\n                    // These are processed by GridNavigation's handlers\n                    Tab         : 'onTab',\n                    'SHIFT+Tab' : 'onShiftTab'\n                }\n            },\n\n            isNavigationKey : {\n                ArrowDown  : 1,\n                ArrowUp    : 1,\n                ArrowLeft  : 1,\n                ArrowRight : 1\n            }\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A CSS class name to add to focused events.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            focusCls : 'b-active',\n\n            /**\n             * Allow using [Delete] and [Backspace] to remove events/assignments\n             * @config {Boolean}\n             * @default\n             * @category Misc\n             */\n            enableDeleteKey : true,\n\n            // Number in milliseconds to buffer handlers execution. See `Delayable.throttle` function docs.\n            onDeleteKeyBuffer      : 500,\n            navigatePreviousBuffer : 200,\n            navigateNextBuffer     : 200,\n\n            testConfig : {\n                onDeleteKeyBuffer : 1\n            }\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired when a user gesture causes the active item to change.\n     * @event navigate\n     * @param {Event} event The browser event which instigated navigation. May be a click or key or focus event.\n     * @param {HTMLElement|null} item The newly active item, or `null` if focus moved out.\n     * @param {HTMLElement|null} oldItem The previously active item, or `null` if focus is moving in.\n     */\n\n    //endregion\n\n    construct(config) {\n        const me = this;\n\n        me.isInTimeAxis = me.isInTimeAxis.bind(me);\n        me.onDeleteKey = me.throttle(me.onDeleteKey, me.onDeleteKeyBuffer, me);\n\n        super.construct(config);\n    }\n\n    changeNavigator(navigator) {\n        const me = this;\n\n        me.getConfig('subGridConfigs');\n\n        return new Navigator(me.constructor.mergeConfigs({\n            ownerCmp         : me,\n            target           : me.timeAxisSubGridElement,\n            processEvent     : me.processEvent,\n            itemSelector     : `.${me.eventCls}-wrap`,\n            focusCls         : me.focusCls,\n            navigatePrevious : me.throttle(me.navigatePrevious, { delay : me.navigatePreviousBuffer, throttled : preventDefault }),\n            navigateNext     : me.throttle(me.navigateNext, { delay : me.navigateNextBuffer, throttled : preventDefault })\n        }, navigator));\n    }\n\n    doDestroy() {\n        this.navigator.destroy();\n        super.doDestroy();\n    }\n\n    isInTimeAxis(record) {\n        // If event is hidden by workingTime configs, horizontal mapper would raise a flag on instance meta\n        // We still need to check if time span is included in axis\n        return !record.instanceMeta(this).excluded && this.timeAxis.isTimeSpanInAxis(record);\n    }\n\n    onElementKeyDown(keyEvent) {\n        const\n            me              = this,\n            { navigator }   = me;\n\n        // If we're focused in the time axis, and *not* on an event, then ENTER means\n        // jump down into the first visible assignment in the cell.\n        if (me.focusedCell?.rowIndex !== -1 && me.focusedCell?.column === me.timeAxisColumn && !keyEvent.target.closest(navigator.itemSelector) && keyEvent.key === 'Enter') {\n            const firstAssignment = me.getFirstVisibleAssignment();\n            if (firstAssignment) {\n                me.navigateTo(firstAssignment, {\n                    uiEvent : keyEvent\n                });\n                return false;\n            }\n        }\n        else {\n            super.onElementKeyDown?.(keyEvent);\n        }\n    }\n\n    getFirstVisibleAssignment(location = this.focusedCell) {\n        const\n            me = this,\n            {\n                currentOrientation,\n                rowManager,\n                eventStore\n            } = me;\n\n        if (me.isHorizontal) {\n            let renderedEvents = currentOrientation.rowMap.get(rowManager.getRow(location.rowIndex));\n\n            if (renderedEvents?.length) {\n                return renderedEvents[0]?.elementData.assignmentRecord;\n            }\n            else {\n                renderedEvents = currentOrientation.resourceMap.get(location.id)?.eventsData;\n                if (renderedEvents?.length) {\n                    // When events are gathered from resource, we need to check they're available\n                    return renderedEvents.filter(e => eventStore.isAvailable(e.eventRecord))[0]?.assignmentRecord;\n                }\n            }\n        }\n        else {\n            const\n                firstResource = [...currentOrientation.resourceMap.values()][0],\n                renderedEvents = firstResource && Object.values(firstResource);\n\n            if (renderedEvents?.length) {\n                return renderedEvents.filter(e => eventStore.isAvailable(e.renderData.eventRecord))[0].renderData.assignmentRecord;\n            }\n        }\n    }\n\n    onGridBodyFocusIn(focusEvent) {\n        const isGridCellFocus = focusEvent.target.closest(this.focusableSelector);\n\n        // Event navigation only has a say when navigation is inside the TimeAxisSubGrid\n        if (this.timeAxisSubGridElement.contains(focusEvent.target)) {\n            const\n                me                  = this,\n                { navigationEvent } = me,\n                { target }          = focusEvent,\n                eventFocus          = target.closest(me.navigator.itemSelector),\n                destinationCell     = eventFocus ? me.normalizeCellContext({\n                    rowIndex : me.isVertical ? 0\n                        : me.resourceStore.indexOf(me.resolveResourceRecord(target)),\n                    column : me.timeAxisColumn,\n                    target\n                }) : new Location(target);\n\n            // Don't take over what the event navigator does if it's doing event navigation.\n            // Just silently cache our actionable location.\n            if (eventFocus) {\n                const { _focusedCell } = me;\n\n                me._focusedCell = destinationCell;\n                me.onCellNavigate?.(me, _focusedCell, destinationCell, navigationEvent, true);\n                return;\n            }\n\n            // Depending on how we got here, try to focus the first event in the cell *if we're in a cell*.\n            if (isGridCellFocus && (!navigationEvent || isArrowKey[navigationEvent.key])) {\n                const firstAssignment = me.getFirstVisibleAssignment(destinationCell);\n                if (firstAssignment) {\n                    me.navigateTo(firstAssignment, {\n                        // Only change scroll if focus came from key press\n                        scrollIntoView : Boolean(navigationEvent && navigationEvent.type !== 'mousedown'),\n                        uiEvent        : navigationEvent || focusEvent\n                    });\n                    return;\n                }\n            }\n        }\n\n        // Grid-level focus movement, let superclass handle it.\n        if (isGridCellFocus) {\n            super.onGridBodyFocusIn(focusEvent);\n        }\n    }\n\n    /*\n     * Override of GridNavigation#focusCell method to handle the TimeAxisColumn.\n     * Not needed until we implement full keyboard accessibility.\n     */\n    accessibleFocusCell(cellSelector, options) {\n        const me                     = this;\n\n        cellSelector = me.normalizeCellContext(cellSelector);\n\n        if (cellSelector.columnId === me.timeAxisColumn.id) {\n            // <remove-on-release>\n\n            // const lastFocusedCell        = me.lastFocusedCell = me._focusedCell,\n            //     lastFocusedCellElement = lastFocusedCell && me.getCell(lastFocusedCell),\n            //     newCell = me.getCell(cellSelector),\n            //     // Flag if the lastFocusedCellElement is DOCUMENT_POSITION_FOLLOWING newCell\n            //     backwards = !!(lastFocusedCellElement && (newCell.compareDocumentPosition(lastFocusedCellElement) & 4));\n\n            // // Navigating into the Scheduler, need to enable this back (for situations where we know focus was requested as a result of a keyboard input)...\n            // let newEvent = me.getRecordFromElement(newCell);\n\n            // me._focusedCell = cellSelector;\n\n            // // Scheduler where row is a Resource which might have many events\n            // // TODO: https://app.assembla.com/spaces/bryntum/tickets/6526 this class should\n            // // not know about Gantt.\n            // if (!newEvent.isTask) {\n            //     const resourceEvents = newEvent.getEvents().filter(me.isInTimeAxis).sort(sortByStartDate);\n            //     newEvent = resourceEvents[backwards ? resourceEvents.length - 1 : 0];\n            // }\n\n            // options.event.eventRecord = newEvent;\n\n            // if (newEvent && me.activeEvent !== newEvent) {\n            //     lastFocusedCellElement && lastFocusedCellElement.classList.remove('b-focused');\n            //     me.scrollResourceEventIntoView(me.store.getById(cellSelector.id), newEvent, {\n            //         animate : 100\n            //     }).then(() => {\n            //         me.activeEvent = newEvent;\n            //     });\n            // }\n\n            // </remove-on-release>\n        }\n        else {\n            return super.focusCell(cellSelector, options);\n        }\n    }\n\n    // Interface method to extract the navigated to record from a populated 'navigate' event.\n    // Gantt, Scheduler and Calendar handle event differently, adding different properties to it.\n    // This method is meant to be overridden to return correct target from event\n    normalizeTarget(event) {\n        return event.assignmentRecord;\n    }\n\n    getPrevious(assignmentRecord, isDelete) {\n        const\n            me                     = this,\n            { resourceStore }      = me,\n            { eventSorter }        = me.currentOrientation,\n            // start/end dates are required to limit time span to look at in case recurrence feature is enabled\n            { startDate, endDate } = me.timeAxis,\n            eventRecord            = assignmentRecord.event,\n            resourceEvents         = me.eventStore\n                .getEvents({\n                    resourceRecord : assignmentRecord.resource,\n                    startDate,\n                    endDate\n                })\n                .filter(this.isInTimeAxis)\n                .sort(eventSorter);\n\n        let resourceRecord = assignmentRecord.resource,\n            previousEvent  = resourceEvents[resourceEvents.indexOf(eventRecord) - 1];\n\n        // At first event for resource, traverse up the resource store.\n        if (!previousEvent) {\n            // If we are deleting an event, skip other instances of the event which we may encounter\n            // due to multi-assignment.\n            for (\n                let rowIdx = resourceStore.indexOf(resourceRecord) - 1;\n                (!previousEvent || (isDelete && previousEvent === eventRecord)) && rowIdx >= 0;\n                rowIdx--\n            ) {\n                resourceRecord = resourceStore.getAt(rowIdx);\n                const events = me.eventStore\n                    .getEvents({\n                        resourceRecord,\n                        startDate,\n                        endDate\n                    })\n                    .filter(me.isInTimeAxis)\n                    .sort(eventSorter);\n\n                previousEvent = events.length && events[events.length - 1];\n            }\n        }\n\n        return me.assignmentStore.getAssignmentForEventAndResource(previousEvent, resourceRecord);\n    }\n\n    navigatePrevious(keyEvent) {\n        const\n            me                 = this,\n            previousAssignment = me.getPrevious(me.normalizeTarget(keyEvent));\n\n        keyEvent.preventDefault();\n        if (previousAssignment) {\n            if (!keyEvent.ctrlKey) {\n                me.clearEventSelection();\n            }\n            return me.navigateTo(previousAssignment, {\n                uiEvent : keyEvent\n            });\n        }\n\n        // No previous event/task, fall back to Grid's handling of this gesture\n        return me.doGridNavigation(keyEvent);\n    }\n\n    getNext(assignmentRecord, isDelete) {\n        const\n            me                     = this,\n            { resourceStore }      = me,\n            { eventSorter }        = me.currentOrientation,\n            // start/end dates are required to limit time span to look at in case recurrence feature is enabled\n            { startDate, endDate } = me.timeAxis,\n            eventRecord            = assignmentRecord.event,\n            resourceEvents         = me.eventStore\n                .getEvents({\n                    resourceRecord : assignmentRecord.resource,\n                    // start/end are required to limit time\n                    startDate,\n                    endDate\n                })\n                .filter(this.isInTimeAxis)\n                .sort(eventSorter);\n\n        let resourceRecord = assignmentRecord.resource,\n            nextEvent      = resourceEvents[resourceEvents.indexOf(eventRecord) + 1];\n\n        // At last event for resource, traverse down the resource store\n        if (!nextEvent) {\n            // If we are deleting an event, skip other instances of the event which we may encounter\n            // due to multi-assignment.\n            for (let rowIdx = resourceStore.indexOf(resourceRecord) + 1; (!nextEvent || (isDelete && nextEvent === eventRecord)) && rowIdx < resourceStore.count; rowIdx++) {\n                resourceRecord = resourceStore.getAt(rowIdx);\n                const events = me.eventStore\n                    .getEvents({\n                        resourceRecord,\n                        startDate,\n                        endDate\n                    })\n                    .filter(me.isInTimeAxis)\n                    .sort(eventSorter);\n\n                nextEvent = events[0];\n            }\n        }\n\n        return me.assignmentStore.getAssignmentForEventAndResource(nextEvent, resourceRecord);\n    }\n\n    navigateNext(keyEvent) {\n        const\n            me             = this,\n            nextAssignment = me.getNext(me.normalizeTarget(keyEvent));\n\n        keyEvent.preventDefault();\n        if (nextAssignment) {\n            if (!keyEvent.ctrlKey) {\n                me.clearEventSelection();\n            }\n            return me.navigateTo(nextAssignment, {\n                uiEvent : keyEvent\n            });\n        }\n\n        // No next event/task, fall back to Grid's handling of this gesture\n        return me.doGridNavigation(keyEvent);\n    }\n\n    doGridNavigation(keyEvent) {\n        if (!keyEvent.handled && keyEvent.key.indexOf('Arrow') === 0) {\n            this[`navigate${keyEvent.key.substring(5)}ByKey`](keyEvent);\n        }\n    }\n\n    async navigateTo(targetAssignment, {\n        scrollIntoView = true,\n        uiEvent        = {}\n    } = emptyObject) {\n        const\n            me                      = this,\n            { navigator }           = me,\n            { skipScrollIntoView }  = navigator;\n\n        if (targetAssignment) {\n            if (scrollIntoView) {\n                // No key processing during scroll\n                navigator.disabled = true;\n                await me.scrollAssignmentIntoView(targetAssignment, animate100);\n                navigator.disabled = false;\n            }\n            else {\n                navigator.skipScrollIntoView = true;\n            }\n\n            // Panel can be destroyed before promise is resolved\n            // Perform a sanity check to make sure element is still in the DOM (syncIdMap actually).\n            if (!me.isDestroyed && this.getElementFromAssignmentRecord(targetAssignment)) {\n                me.activeAssignment = targetAssignment;\n                navigator.skipScrollIntoView = skipScrollIntoView;\n                navigator.trigger('navigate', {\n                    event : uiEvent,\n                    item  : me.getElementFromAssignmentRecord(targetAssignment).closest(navigator.itemSelector)\n                });\n            }\n        }\n    }\n\n    set activeAssignment(assignmentRecord) {\n        const assignmentEl = this.getElementFromAssignmentRecord(assignmentRecord, true);\n\n        if (assignmentEl) {\n            this.navigator.activeItem = assignmentEl;\n        }\n    }\n\n    get activeAssignment() {\n        const { activeItem } = this.navigator;\n\n        if (activeItem) {\n            return this.resolveAssignmentRecord(activeItem);\n        }\n    }\n\n    get previousActiveEvent() {\n        const { previousActiveItem } = this.navigator;\n\n        if (previousActiveItem) {\n            return this.resolveEventRecord(previousActiveItem);\n        }\n    }\n\n    processEvent(keyEvent) {\n        const\n            me           = this,\n            eventElement = keyEvent.target.closest(me.eventSelector);\n\n        if (!me.navigator.disabled && eventElement) {\n            keyEvent.assignmentRecord = me.resolveAssignmentRecord(eventElement);\n            keyEvent.eventRecord = me.resolveEventRecord(eventElement);\n            keyEvent.resourceRecord = me.resolveResourceRecord(eventElement);\n        }\n\n        return keyEvent;\n    }\n\n    onDeleteKey(keyEvent) {\n        const me = this;\n        if (!me.readOnly && me.enableDeleteKey) {\n            const records = me.eventStore.usesSingleAssignment ? me.selectedEvents : me.selectedAssignments;\n\n            me.removeEvents(records.filter(r => !r.readOnly));\n        }\n    }\n\n    onArrowUpKey(keyEvent) {\n        this.focusCell({\n            rowIndex : this.focusedCell.rowIndex - 1,\n            column   : this.timeAxisColumn\n        });\n        keyEvent.handled = true;\n    }\n\n    onArrowDownKey(keyEvent) {\n        if (this.focusedCell.rowIndex < this.resourceStore.count - 1) {\n            this.focusCell({\n                rowIndex : this.focusedCell.rowIndex + 1,\n                column   : this.timeAxisColumn\n            });\n            keyEvent.handled = true;\n        }\n    }\n\n    onEscapeKey(keyEvent) {\n        if (!keyEvent.target.closest('.b-dragging')) {\n            this.focusCell({\n                rowIndex : this.focusedCell.rowIndex,\n                column   : this.timeAxisColumn\n            });\n            keyEvent.handled = true;\n        }\n    }\n\n    onEventSpaceKey(keyEvent) {\n        // Empty, to be chained by features\n    }\n\n    onEventEnterKey(keyEvent) {\n        // Empty, to be chained by features\n    }\n\n    get isActionableLocation() {\n        // Override from grid if the Navigator's location is an event (or task if we're in Gantt)\n        // Being focused on a task/event means that it's *not* actionable. It's not valid to report\n        // that we're \"inside\" the cell in a TimeLine, so ESC must not attempt to focus the cell.\n        if (!this.navigator.activeItem) {\n            return super.isActionableLocation;\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "/**\n * @module Scheduler/view/mixin/TransactionalFeatureMixin\n */\n\n/**\n * This mixin declares a common config to disable feature transactions in components which support scheduling engine:\n * SchedulerPro and Gantt.\n * @mixin\n */\nexport default Target => class TransactionalFeatureMixin extends Target {\n    static get $name() {\n        return 'TransactionalFeatureMixin';\n    }\n\n    static configurable = {\n        /**\n         * When true, some features will start a project transaction, blocking the project queue, suspending\n         * store events and preventing UI from updates. It behaves similar to\n         * {@link Grid.column.Column#config-instantUpdate} set to `false`.\n         * Set `false` to not use project queue.\n         * @config {Boolean}\n         * @internal\n         * @default\n         */\n        enableTransactionalFeatures : false,\n\n        testConfig : {\n            enableTransactionalFeatures : false\n        }\n    };\n\n    get widgetClass() {}\n\n    /**\n     * Returns `true` if queue is supported and enabled\n     * @member {Boolean}\n     * @internal\n     * @readonly\n     */\n    get transactionalFeaturesEnabled() {\n        return this.enableTransactionalFeatures && this.project?.queue;\n    }\n};\n", "/**\n * @module Scheduler/data/mixin/AttachToProjectMixin\n */\n\n/**\n * Mixin that calls the target class `attachToProject()` function when a new project is assigned to Scheduler/Gantt.\n *\n * @mixin\n */\nexport default Target => class AttachToProjectMixin extends Target {\n    static get $name() {\n        return 'AttachToProjectMixin';\n    }\n\n    async afterConstruct() {\n        super.afterConstruct();\n\n        const\n            me            = this,\n            projectHolder = (me.client || me.grid),\n            { project }   = projectHolder;\n\n        projectHolder.projectSubscribers?.push(me);\n\n        // Attach to already existing stores\n        if (project) {\n            me.attachToProject(project);\n            me.attachToResourceStore(project.resourceStore);\n            me.attachToEventStore(project.eventStore);\n            me.attachToAssignmentStore(project.assignmentStore);\n            me.attachToDependencyStore(project.dependencyStore);\n            me.attachToCalendarManagerStore(project.calendarManagerStore);\n        }\n    }\n\n    /**\n     * Override to take action when the project instance is replaced.\n     *\n     * @param {Scheduler.model.ProjectModel} project\n     */\n    attachToProject(project) {\n        this.detachListeners('project');\n\n        this._project = project;\n\n        super.attachToProject?.(project);\n    }\n\n    detachFromProject(project) {\n        super.detachFromProject?.(project);\n    }\n\n    /**\n     * Override to take action when the EventStore instance is replaced, either from being replaced on the project or\n     * from assigning a new project.\n     *\n     * @param {Scheduler.data.EventStore} store\n     */\n    attachToEventStore(store) {\n        this.detachListeners('eventStore');\n\n        super.attachToEventStore?.(store);\n    }\n\n    /**\n     * Override to take action when the ResourceStore instance is replaced, either from being replaced on the project\n     * or from assigning a new project.\n     *\n     * @param {Scheduler.data.ResourceStore} store\n     */\n    attachToResourceStore(store) {\n        this.detachListeners('resourceStore');\n\n        super.attachToResourceStore?.(store);\n    }\n\n    /**\n     * Override to take action when the AssignmentStore instance is replaced, either from being replaced on the project\n     * or from assigning a new project.\n     *\n     * @param {Scheduler.data.AssignmentStore} store\n     */\n    attachToAssignmentStore(store) {\n        this.detachListeners('assignmentStore');\n\n        super.attachToAssignmentStore?.(store);\n    }\n\n    /**\n     * Override to take action when the DependencyStore instance is replaced, either from being replaced on the project\n     * or from assigning a new project.\n     *\n     * @param {Scheduler.data.DependencyStore} store\n     */\n    attachToDependencyStore(store) {\n        this.detachListeners('dependencyStore');\n\n        super.attachToDependencyStore?.(store);\n    }\n\n    // <remove-on-release>\n    // TODO: Move attachToCalendarMangerStore to Pro somehow\n    // </remove-on-release>\n\n    /**\n     * Override to take action when the CalendarManagerStore instance is replaced, either from being replaced on the\n     * project or from assigning a new project.\n     *\n     * @param {Core.data.Store} store\n     */\n    attachToCalendarManagerStore(store) {\n        this.detachListeners('calendarManagerStore');\n\n        super.attachToCalendarManagerStore?.(store);\n    }\n\n    get project() {\n        return this._project;\n    }\n\n    get calendarManagerStore() {\n        return this.project.calendarManagerStore;\n    }\n\n    get assignmentStore() {\n        return this.project.assignmentStore;\n    }\n\n    get resourceStore() {\n        return this.project.resourceStore;\n    }\n\n    get eventStore() {\n        return this.project.eventStore;\n    }\n\n    get dependencyStore() {\n        return this.project.dependencyStore;\n    }\n};\n", "import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Scheduler/view/orientation/HorizontalRendering\n */\n\n/**\n * @typedef HorizontalRenderData\n * @property {Scheduler.model.EventModel} eventRecord\n * @property {Date} start Span start\n * @property {Date} end Span end\n * @property {String} rowId Id of the resource row\n * @property {DomConfig[]} children Child elements\n * @property {Number} startMS Wrap element start in milliseconds\n * @property {Number} endMS Span Wrap element end in milliseconds\n * @property {Number} durationMS Wrap duration in milliseconds (not just a difference between start and end)\n * @property {Number} innerStartMS Actual event start in milliseconds\n * @property {Number} innerEndMS Actual event end in milliseconds\n * @property {Number} innerDurationMS Actual event duration in milliseconds\n * @property {Boolean} startsOutsideView True if span starts before time axis start\n * @property {Boolean} endsOutsideView True if span ends after time axis end\n * @property {Number} left Absolute left coordinate of the wrap element\n * @property {Number} width\n * @property {Number} top Absolute top coordinate of the wrap element (can be changed by layout)\n * @property {Number} height\n * @property {Boolean} clippedStart True if start is clipped\n * @property {Boolean} clippedEnd True if end is clipped\n * @private\n */\n\nconst\n    releaseEventActions = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions  = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    },\n    MAX_WIDTH           = 9999999,\n    heightEventSorter   = ({ startDateMS : lhs }, { startDateMS : rhs }) => lhs - rhs,\n    chronoFields        = {\n        startDate : 1,\n        endDate   : 1,\n        duration  : 1\n    };\n\nfunction getStartEnd(scheduler, eventRecord, useEnd, fieldName, useEventBuffer) {\n    // Must use Model.get in order to get latest values in case we are inside a batch.\n    // EventResize changes the endDate using batching to enable a tentative change\n    // via the batchedUpdate event which is triggered when changing a field in a batch.\n    // Fall back to accessor if propagation has not populated date fields.\n    const\n        { timeAxis }     = scheduler,\n        date             = eventRecord.isBatchUpdating && !useEventBuffer ? eventRecord.get(fieldName) : eventRecord[fieldName],\n        hasBatchedChange = eventRecord.hasBatchedChange?.(fieldName),\n        // fillTicks shouldn't be used during resizing for changing date for smooth animation.\n        // correct date will be applied after resize, when `isResizing` will be falsy\n        useTickDates     = scheduler.fillTicks && (!eventRecord.meta?.isResizing || !hasBatchedChange);\n\n    if (useTickDates) {\n        let tick = timeAxis.getTickFromDate(date);\n\n        if (tick >= 0) {\n            // If date matches a tick start/end, use the earlier tick\n            if (useEnd && tick === Math.round(tick) && tick > 0) {\n                tick--;\n            }\n\n            const\n                tickIndex  = Math.floor(tick),\n                tickRecord = timeAxis.getAt(tickIndex);\n\n            return tickRecord[fieldName].getTime();\n        }\n    }\n\n    return date?.getTime();\n}\n\n/**\n * Handles event rendering in Schedulers horizontal mode. Reacts to project/store changes to keep the UI up to date.\n *\n * @internal\n */\nexport default class HorizontalRendering extends Base.mixin(AttachToProjectMixin) {\n    //region Config & Init\n\n    static $name = 'HorizontalRendering';\n\n    static get configurable() {\n        return {\n            /**\n             * Amount of pixels to extend the current visible range at both ends with when deciding which events to\n             * render. Only applies when using labels or for milestones\n             * @config {Number}\n             * @default\n             */\n            bufferSize : 150,\n\n            verticalBufferSize : 150\n        };\n    }\n\n    static get properties() {\n        return {\n            // Map with event DOM configs, keyed by resource id\n            resourceMap            : new Map(),\n            // Map with visible events DOM configs, keyed by row instance\n            rowMap                 : new Map(),\n            eventConfigs           : [],\n            // Flag to avoid transitioning on first refresh\n            isFirstRefresh         : true,\n            toDrawOnProjectRefresh : new Set(),\n            toDrawOnDataReady      : new Set()\n        };\n    }\n\n    construct(scheduler) {\n        const me = this;\n\n        me.client = me.scheduler = scheduler;\n        me.eventSorter = me.eventSorter.bind(scheduler);\n        me.scrollBuffer = scheduler.scrollBuffer;\n\n        // Catch scroll before renderers are called\n        scheduler.scrollable.ion({\n            scroll  : 'onEarlyScroll',\n            prio    : 1,\n            thisObj : me\n        });\n\n        scheduler.rowManager.ion({\n            name            : 'rowManager',\n            renderDone      : 'onRenderDone',\n            removeRows      : 'onRemoveRows',\n            translateRow    : 'onTranslateRow',\n            offsetRows      : 'onOffsetRows',\n            beforeRowHeight : 'onBeforeRowHeightChange',\n            thisObj         : me\n        });\n\n        super.construct({});\n    }\n\n    init() {}\n\n    updateVerticalBufferSize() {\n        const { rowManager } = this.scheduler;\n\n        if (this.scheduler.isPainted) {\n            // Refresh rows when vertical buffer size changes to trigger event repaint. Required for the export feature.\n            rowManager.renderRows(rowManager.rows);\n        }\n    }\n\n    //endregion\n\n    //region Region, dates & coordinates\n\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n\n    getDateFromXY(xy, roundingMethod, local, allowOutOfRange = false) {\n        const { scheduler } = this;\n\n        let coord = xy[0];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        coord = scheduler.getRtlX(coord);\n\n        return scheduler.timeAxisViewModel.getDateFromPosition(coord, roundingMethod, allowOutOfRange);\n    }\n\n    translateToScheduleCoordinate(x) {\n        const\n            { scheduler } = this,\n            { scrollable } = scheduler.timeAxisSubGrid;\n\n        let result = x - scheduler.timeAxisSubGridElement.getBoundingClientRect().left - globalThis.scrollX;\n\n        // Because we use getBoundingClientRect's left, we have to adjust for page scroll.\n        // The vertical counterpart uses the _bodyRectangle which was created with that adjustment.\n\n        if (scheduler.rtl) {\n            result += scrollable.maxX - Math.abs(scheduler.scrollLeft);\n        }\n        else {\n            result += scheduler.scrollLeft;\n        }\n\n        return result;\n    }\n\n    translateToPageCoordinate(x) {\n        const\n            { scheduler } = this,\n            { scrollable } = scheduler.timeAxisSubGrid;\n\n        let result = x + scheduler.timeAxisSubGridElement.getBoundingClientRect().left;\n\n        if (scheduler.rtl) {\n            result -= scrollable.maxX - Math.abs(scheduler.scrollLeft);\n        }\n        else {\n            result -= scheduler.scrollLeft;\n        }\n\n        return result;\n    }\n\n    /**\n     * Gets the region, relative to the page, represented by the schedule and optionally only for a single resource.\n     * This method will call getDateConstraints to allow for additional resource/event based constraints. By overriding\n     * that method you can constrain events differently for different resources.\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] (optional) The row record\n     * @param {Scheduler.model.EventModel} [eventRecord] (optional) The event record\n     * @returns {Core.helper.util.Rectangle} The region of the schedule\n     */\n    getScheduleRegion(resourceRecord, eventRecord, local = true, dateConstraints, stretch = false) {\n        const\n            me                                   = this,\n            { scheduler }                        = me,\n            { timeAxisSubGridElement, timeAxis } = scheduler,\n            resourceMargin                       = (!stretch || resourceRecord) && scheduler.getResourceMargin(resourceRecord) || 0;\n\n        let region;\n\n        if (resourceRecord) {\n            const eventElement = eventRecord && scheduler.getElementsFromEventRecord(eventRecord, resourceRecord)[0];\n\n            region = Rectangle.from(scheduler.getRowById(resourceRecord.id).getElement('normal'), timeAxisSubGridElement);\n\n            if (eventElement) {\n                const eventRegion = Rectangle.from(eventElement, timeAxisSubGridElement);\n\n                region.y = eventRegion.y;\n                region.bottom = eventRegion.bottom;\n            }\n            else {\n                region.y = region.y + resourceMargin;\n                region.bottom = region.bottom - resourceMargin;\n            }\n        }\n        else {\n            // <remove-on-release>\n            // TODO: This is what the function that was removed here did.\n            // </remove-on-release>\n            // The coordinate space needs to be sorted out here!\n            region = Rectangle.from(timeAxisSubGridElement).moveTo(null, 0);\n            region.width = timeAxisSubGridElement.scrollWidth;\n\n            region.y = region.y + resourceMargin;\n            region.bottom = region.bottom - resourceMargin;\n        }\n\n        const\n            taStart         = timeAxis.startDate,\n            taEnd           = timeAxis.endDate;\n\n        dateConstraints = (dateConstraints?.start && dateConstraints) || scheduler.getDateConstraints?.(resourceRecord, eventRecord) || {\n            start : taStart,\n            end   : taEnd\n        };\n\n        let startX          = scheduler.getCoordinateFromDate(dateConstraints.start ? DateHelper.max(taStart, dateConstraints.start) : taStart),\n            endX            = scheduler.getCoordinateFromDate(dateConstraints.end ? DateHelper.min(taEnd, dateConstraints.end) : taEnd);\n\n        if (!local) {\n            startX = me.translateToPageCoordinate(startX);\n            endX = me.translateToPageCoordinate(endX);\n        }\n\n        region.left = Math.min(startX, endX);\n        region.right = Math.max(startX, endX);\n\n        return region;\n    }\n\n    /**\n     * Gets the Region, relative to the timeline view element, representing the passed row and optionally just for a\n     * certain date interval.\n     * @param {Core.data.Model} rowRecord The row record\n     * @param {Date} startDate A start date constraining the region\n     * @param {Date} endDate An end date constraining the region\n     * @returns {Core.helper.util.Rectangle} The Rectangle which encapsulates the row\n     */\n    getRowRegion(rowRecord, startDate, endDate) {\n        const\n            { scheduler } = this,\n            { timeAxis }  = scheduler,\n            row           = scheduler.getRowById(rowRecord.id);\n\n        // might not be rendered\n        if (!row) {\n            return null;\n        }\n\n        const\n            taStart    = timeAxis.startDate,\n            taEnd      = timeAxis.endDate,\n            start      = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end        = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startX     = scheduler.getCoordinateFromDate(start),\n            endX       = scheduler.getCoordinateFromDate(end, true, true),\n            y          = row.top,\n            x          = Math.min(startX, endX),\n            bottom     = y + row.offsetHeight;\n\n        return new Rectangle(x, y, Math.max(startX, endX) - x, bottom - y);\n    }\n\n    getResourceEventBox(eventRecord, resourceRecord, includeOutside, roughly = false) {\n        const resourceData = this.resourceMap.get(resourceRecord.id);\n\n        let eventLayout  = null,\n            approx       = false;\n\n        if (resourceData) {\n            eventLayout = resourceData.eventsData.find(d => d.eventRecord === eventRecord);\n        }\n\n        // Outside of view, layout now if supposed to be included\n        if (!eventLayout) {\n            eventLayout = this.getTimeSpanRenderData(\n                eventRecord,\n                resourceRecord,\n                { viewport : true, timeAxis : includeOutside }\n            );\n\n            approx = true;\n        }\n\n        if (eventLayout) {\n            // Event layout is relative to row, need to make to absolute before returning\n            const\n                rowBox      = this.scheduler.rowManager.getRecordCoords(resourceRecord, true, roughly),\n                absoluteTop = eventLayout.top + rowBox.top,\n                box         = new Rectangle(eventLayout.left, absoluteTop, eventLayout.width, eventLayout.height);\n\n            // Flag informing other parts of the code that this box is approximated\n            box.layout = !approx;\n            box.rowTop = rowBox.top;\n            box.rowBottom = rowBox.bottom;\n\n            box.resourceId = resourceRecord.id;\n\n            return box;\n        }\n\n        return null;\n    }\n\n    //endregion\n\n    //region Element <-> Record mapping\n\n    resolveRowRecord(elementOrEvent) {\n        const\n            me             = this,\n            { scheduler }  = me,\n            element        = elementOrEvent.nodeType ? elementOrEvent : elementOrEvent.target,\n            // Fix for FF on Linux having text nodes as event.target\n            el             = element.nodeType === Element.TEXT_NODE ? element.parentElement : element,\n            eventNode      = el.closest(scheduler.eventSelector);\n\n        if (eventNode) {\n            return me.resourceStore.getById(eventNode.dataset.resourceId);\n        }\n\n        // When resourceNonWorkingTime.enableMouseEvents is set to true, and the current element is a resource non working time range,\n        // in order to get the corresponding resource row, we need to read from data-resource-id attribute.\n        // That's because element has not a .b-grid-row as parent when enableMouseEvents is set to true.\n        if (!el.closest('.b-grid-row') && el.dataset.resourceId) {\n            return me.resourceStore.getById(el.dataset.resourceId);\n        }\n\n        return scheduler.getRecordFromElement(el);\n    }\n\n    //endregion\n\n    //region Project\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        this.refreshAllWhenReady = true;\n\n        // Perform a full clear when replacing the project, to not leave any references to old project in DOM\n        if (!this.scheduler.isConfiguring) {\n            this.clearAll({ clearDom : true });\n        }\n\n        project?.ion({\n            name            : 'project',\n            refresh         : 'onProjectRefresh',\n            commitFinalized : 'onProjectCommitFinalized',\n            thisObj         : this\n        });\n    }\n\n    onProjectCommitFinalized() {\n        const { scheduler, toDrawOnDataReady, project } = this;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.isPainted && !scheduler.refreshSuspended) {\n                // If this is a timezone commit, we got here from a store dataset\n                // We need to do a full refresh\n                if (!toDrawOnDataReady.size && project.timeZone != null && project.ignoreRecordChanges) {\n                    project.resourceStore.forEach(r => toDrawOnDataReady.add(r.id));\n                }\n                if (toDrawOnDataReady.size) {\n                    this.clearResources(toDrawOnDataReady);\n                    this.refreshResources(toDrawOnDataReady);\n                }\n\n                toDrawOnDataReady.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refreshRows');\n        }\n    }\n\n    onProjectRefresh({ isCalculated, isInitialCommit }) {\n        const\n            me                                    = this,\n            { scheduler, toDrawOnProjectRefresh } = me;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.isPainted && !scheduler.isConfiguring && !scheduler.refreshSuspended) {\n                // Either refresh all rows (on for example dataset or when delayed calculations are finished)\n                if (me.refreshAllWhenReady || (isInitialCommit && isCalculated)) {\n                    scheduler.calculateAllRowHeights(true);\n                    const { rowManager } = scheduler;\n\n                    // Rows rendered? Refresh\n                    if (rowManager.topRow) {\n                        me.clearAll();\n\n                        // Refresh only if it won't be refreshed elsewhere (SchedulerStore#onProjectRefresh())\n                        if (!scheduler.refreshAfterProjectRefresh) {\n                            // If refresh was suspended when replacing the dataset in a scrolled view we might end up with a\n                            // topRow outside of available range -> reset it. Call renderRows() to mimic what normally happens\n                            // when refresh is not suspended\n                            if (rowManager.topRow.dataIndex >= scheduler.store.count) {\n                                scheduler.renderRows(false);\n                            }\n                            else {\n                                // Don't transition first refresh / early render\n                                scheduler.refreshWithTransition(false, !me.isFirstRefresh && isCalculated && !isInitialCommit);\n                            }\n                        }\n\n                        me.isFirstRefresh = false;\n                    }\n                    // No rows yet, reinitialize (happens if initial project empty and then non empty project assigned)\n                    else {\n                        rowManager.reinitialize();\n                    }\n\n                    me.refreshAllWhenReady = false;\n                }\n                // Or only affected rows (if any)\n                else if (toDrawOnProjectRefresh.size) {\n                    me.refreshResources(toDrawOnProjectRefresh);\n                }\n\n                toDrawOnProjectRefresh.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refresh', scheduler, [true]);\n        }\n    }\n\n    //endregion\n\n    //region AssignmentStore\n\n    attachToAssignmentStore(assignmentStore) {\n        this.refreshAllWhenReady = true;\n\n        super.attachToAssignmentStore(assignmentStore);\n\n        if (assignmentStore) {\n            assignmentStore.ion({\n                name             : 'assignmentStore',\n                changePreCommit  : 'onAssignmentStoreChange',\n                refreshPreCommit : 'onAssignmentStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onAssignmentStoreChange({ source, action, records : assignmentRecords = [], replaced, changes }) {\n        const\n            me                = this,\n            { scheduler }     = me,\n            resourceIds       = new Set(assignmentRecords.flatMap(assignmentRecord => ([\n                assignmentRecord.resourceId,\n                // Also include any linked resources (?. twice since resource might not be resolved and point to id)\n                ...assignmentRecord.resource?.$links?.map(link => link.id) ?? []\n            ])));\n\n        // Ignore assignment changes caused by removing resources, the remove will redraw things anyway\n        // Also ignore case when resource id is changed. In this case row will be refreshed by the grid\n        if (me.resourceStore.isRemoving || me.resourceStore.isChangingId) {\n            return;\n        }\n\n        switch (action) {\n            // These operations will invalidate the graph, need to draw later\n            case 'dataset': {\n                // Ignore dataset when using single assignment mode\n                if (!me.eventStore.usesSingleAssignment) {\n                    if (resourceIds.size) {\n                        me.refreshResourcesWhenReady(resourceIds);\n                    }\n                    else {\n                        me.clearAll();\n                        scheduler.refreshWithTransition();\n                    }\n                }\n                return;\n            }\n\n            // <remove-on-release>\n            // TODO: Don't think updateMultiple below is covered by any test...\n            // </remove-on-release>\n\n            case 'add':\n            case 'remove':\n            case 'updateMultiple':\n                me.refreshResourcesWhenReady(resourceIds);\n                return;\n\n            case 'removeall':\n                me.refreshAllWhenReady = true;\n                return;\n\n            case 'replace':\n                // Gather resources from both the old record and the new one\n                replaced.forEach(([oldAssignment, newAssignment]) => {\n                    resourceIds.add(oldAssignment.resourceId);\n                    resourceIds.add(newAssignment.resourceId);\n                });\n                // And refresh them\n                me.refreshResourcesWhenReady(resourceIds);\n                return;\n\n            // These operations won't invalidate the graph, redraw now\n            case 'filter':\n                me.clearAll();\n                scheduler.calculateAllRowHeights(true);\n                scheduler.refreshWithTransition();\n                return;\n\n            case 'update': {\n                if ('eventId' in changes || 'resourceId' in changes || 'id' in changes) {\n                    // When reassigning, clear old resource also\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // When chaining stores in single assignment mode, we might not be the project store\n                    if (source === scheduler.project.assignmentStore) {\n                        me.refreshResourcesOnDataReady(resourceIds);\n                    }\n                    // Refresh directly when we are not\n                    else {\n                        me.refreshResources(resourceIds);\n                    }\n                }\n                break;\n            }\n\n            case 'clearchanges': {\n                const { added, modified, removed } = changes;\n\n                // If modified records appear in the clearchanges action we need to refresh entire view\n                // because we have not enough information about previously assigned resource\n                if (modified.length) {\n                    scheduler.refreshWithTransition();\n                }\n                else {\n                    added.forEach(r => resourceIds.add(r.resourceId));\n                    removed.forEach(r => resourceIds.add(r.resourceId));\n\n                    me.refreshResourcesOnDataReady(resourceIds);\n                }\n            }\n        }\n    }\n\n    onAssignmentStoreRefresh({ action, records }) {\n        if (action === 'batch') {\n            this.clearAll();\n            this.scheduler.refreshWithTransition();\n        }\n    }\n\n    //endregion\n\n    //region EventStore\n\n    attachToEventStore(eventStore) {\n        this.refreshAllWhenReady = true;\n\n        super.attachToEventStore(eventStore);\n\n        if (eventStore) {\n            eventStore.ion({\n                name             : 'eventStore',\n                addConfirmed     : 'onEventStoreAddConfirmed',\n                refreshPreCommit : 'onEventStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onEventStoreAddConfirmed({ record }) {\n        for (const element of this.client.getElementsFromEventRecord(record)) {\n            element.classList.remove('b-iscreating');\n        }\n    }\n\n    onEventStoreRefresh({ action }) {\n        if (action === 'batch') {\n            const { scheduler } = this;\n            if (scheduler.isEngineReady && scheduler.isPainted) {\n                this.clearAll();\n                scheduler.refreshWithTransition();\n            }\n        }\n    }\n\n    onEventStoreChange({ action, records : eventRecords = [], record, replaced, changes, source }) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            isResourceTimeRange = source.isResourceTimeRangeStore,\n            resourceIds         = new Set();\n\n        if (!scheduler.isPainted) {\n            return;\n        }\n\n        eventRecords.forEach(eventRecord => {\n            // Update all resource rows to which this event is assigned *if* the resourceStore\n            // contains that resource (We could have filtered the resourceStore)\n            const renderedEventResources = eventRecord.$linkedResources?.filter(r => me.resourceStore.includes(r));\n\n            // When rendering a Gantt project, the project model also passes through here -> no `resources`\n            renderedEventResources?.forEach(resourceRecord => resourceIds.add(resourceRecord.id));\n        });\n\n        if (isResourceTimeRange) {\n            switch (action) {\n                // - dataset cant pass through same path as events, which relies on project being invalidated. and\n                // resource time ranges does not pass through engine\n                // - removeall also needs special path, since no resources to redraw will be collected\n                case 'removeall':\n                case 'dataset':\n                    me.clearAll();\n                    scheduler.refreshWithTransition();\n                    return;\n            }\n\n            me.refreshResources(resourceIds);\n        }\n        else {\n            switch (action) {\n                // No-ops\n                case 'batch': // Handled elsewhere, don't want it to clear again\n                case 'sort':  // Order in EventStore does not matter, so these actions are no-ops\n                case 'group':\n                case 'move':\n                    return;\n\n                case 'remove':\n                    // Remove is a no-op since assignment will also be removed\n                    return;\n\n                case 'clearchanges':\n                    me.clearAll();\n                    scheduler.refreshWithTransition();\n                    return;\n\n                case 'dataset': {\n                    me.clearAll();\n                    // This is mainly for chained stores, where data is set from main store without project being\n                    // invalidated. Nothing to wait for, refresh now\n                    if (scheduler.isEngineReady) {\n                        scheduler.refreshWithTransition();\n                    }\n                    else {\n                        me.refreshAllWhenReady = true;\n                    }\n                    return;\n                }\n\n                case 'add':\n                case 'updateMultiple':\n                    // Just refresh below\n                    break;\n\n                case 'replace':\n                    // Gather resources from both the old record and the new one\n                    replaced.forEach(([, newEvent]) => {\n                        // Old cleared by changed assignment\n                        newEvent.resources.map(resourceRecord => resourceIds.add(resourceRecord.id));\n                    });\n                    break;\n\n                case 'removeall':\n                case 'filter':\n                    // Filter might be caused by add retriggering filters, in which case we need to refresh later\n                    if (!scheduler.isEngineReady) {\n                        me.refreshAllWhenReady = true;\n                        return;\n                    }\n\n                    // Clear all when filtering for simplicity. If that turns out to give bad performance, one would need to\n                    // figure out which events was filtered out and only clear their resources.\n                    me.clearAll();\n                    scheduler.calculateAllRowHeights(true);\n                    scheduler.refreshWithTransition();\n                    return;\n\n                case 'update': {\n                    // Check if changes are graph related or not\n                    const allChrono = record.$entity\n                        ? !Object.keys(changes).some(name => !record.$entity.getField(name))\n                        : !Object.keys(changes).some(name => !chronoFields[name]);\n\n                    let dateChanges = 0;\n                    'startDate' in changes && dateChanges++;\n                    'endDate' in changes && dateChanges++;\n                    'duration' in changes && dateChanges++;\n\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // If we have a set of resources to update, refresh them.\n                    // Always redraw non chrono changes (name etc) and chrono changes that can affect appearance\n                    if (\n                        resourceIds.size && (\n                            !allChrono ||\n                            // skip case when changed \"duration\" only (w/o start/end affected)\n                            dateChanges && !('duration' in changes && dateChanges === 1) ||\n                            'percentDone' in changes ||\n                            'inactive' in changes ||\n                            'constraintDate' in changes ||\n                            'constraintType' in changes ||\n                            'segments' in changes\n                        )\n                    ) {\n                        // if we are finalizing data loading let's delay the resources refresh till all the\n                        // propagation results get into stores\n                        if (me.project?.propagatingLoadChanges || me.project?.isWritingData) {\n                            me.refreshResourcesOnDataReady(resourceIds);\n                        }\n                        else {\n                            me.refreshResources(resourceIds);\n                        }\n                    }\n                    return;\n                }\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    attachToResourceStore(resourceStore) {\n\n        this.refreshAllWhenReady = true;\n\n        super.attachToResourceStore(resourceStore);\n\n        if (resourceStore) {\n            this.clearAll({ clearLayoutCache : true });\n\n            resourceStore.ion({\n                name            : 'resourceStore',\n                changePreCommit : 'onResourceStoreChange',\n                thisObj         : this\n            });\n        }\n    }\n\n    get resourceStore() {\n        return this.client.store;\n    }\n\n    onResourceStoreChange({ action, isExpand, records, changes }) {\n        const\n            me          = this,\n            // Update link + original when asked for link\n            resourceIds = records?.flatMap(r => r.isLinked ? [r.id, r.$originalId] : [r.id]);\n\n        if (!me.scheduler.isPainted) {\n            return;\n        }\n\n        switch (action) {\n            case 'add':\n                // #635 Events disappear when toggling other node\n                // If we are expanding project won't fire refresh event\n                if (!isExpand) {\n                    // Links won't cause calculations, refresh now\n                    if (records.every(r => r.isLinked)) {\n                        me.refreshResources(resourceIds);\n                    }\n                    // Otherwise refresh when project is ready\n                    else {\n                        me.refreshResourcesWhenReady(resourceIds);\n                    }\n                }\n                return;\n            case 'update': {\n                // Ignore changes from project commit, if they affect events they will be redrawn anyway\n                // Also ignore explicit transformation of leaf <-> parent\n                if (!me.project.isBatchingChanges && !changes.isLeaf) {\n                    // Resource changes might affect events, refresh\n                    me.refreshResources(resourceIds);\n                }\n                return;\n            }\n            case 'filter':\n                // Bail out on filter action. Map was already updated on `refresh` event triggered before this `change`\n                // one. And extra records are removed from rowMap by `onRemoveRows`\n                return;\n            case 'removeall':\n                me.clearAll({ clearLayoutCache : true });\n                return;\n\n                // We must not clear all resources when whole dataset changes\n                // https://github.com/bryntum/support/issues/3292\n            case 'dataset':\n                return;\n        }\n\n        resourceIds && me.clearResources(resourceIds);\n    }\n\n    //endregion\n\n    //region RowManager\n\n    onTranslateRow({ row }) {\n        // Newly added rows are translated prior to having an id, rule those out since they will be rendered later\n        if (row.id != null) {\n            // Event layouts are stored relative to the resource, only need to rerender the row to have its absolute\n            // position updated to match new translation\n            this.refreshEventsForResource(row, false);\n        }\n    }\n\n    // RowManager error correction, cached layouts will no longer match.\n    // Redraw to have events correctly positioned for dependency feature to draw to their elements\n    onOffsetRows() {\n        this.clearAll();\n        this.doUpdateTimeView();\n    }\n\n    // Used to pre-calculate row heights\n    calculateRowHeight(resourceRecord) {\n        const\n            { scheduler } = this,\n            rowHeight     = scheduler.getResourceHeight(resourceRecord),\n            eventLayout   = scheduler.getEventLayout(resourceRecord),\n            layoutType    = eventLayout.type;\n\n        if (\n            layoutType === 'stack' &&\n            scheduler.isEngineReady &&\n            !resourceRecord.isSpecialRow &&\n            // Generated parents when TreeGrouping do not have assigned bucket\n            resourceRecord.assigned?.size > 1\n        ) {\n            const\n                {\n                    assignmentStore,\n                    eventStore,\n                    timeAxis\n                }               = scheduler,\n                {\n                    barMargin,\n                    resourceMargin,\n                    contentHeight\n                }               = scheduler.getResourceLayoutSettings(resourceRecord),\n                // When using an AssignmentStore we will get all events for the resource even if the EventStore is\n                // filtered\n                eventFilter     = (eventStore.isFiltered || assignmentStore.isFiltered) && (eventRecord =>\n                    eventRecord.assignments.some(a => a.resource === resourceRecord.$original && assignmentStore.includes(a))),\n                events          = eventStore\n                    .getEvents({\n                        resourceRecord,\n                        includeOccurrences : scheduler.enableRecurringEvents,\n                        startDate          : timeAxis.startDate,\n                        endDate            : timeAxis.endDate,\n                        filter             : eventFilter\n                    })\n                    .sort(heightEventSorter)\n                    .map(eventRecord => {\n                        const\n                            // Must use Model.get in order to get latest values in case we are inside a batch.\n                            // EventResize changes the endDate using batching to enable a tentative change\n                            // via the batchedUpdate event which is triggered when changing a field in a batch.\n                            // Fall back to accessor if propagation has not populated date fields.\n                            startDate = eventRecord.isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n                            endDate   = eventRecord.isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate || startDate;\n\n                        return {\n                            eventRecord,\n                            resourceRecord,\n                            startMS : startDate.getTime(),\n                            endMS   : endDate.getTime()\n                        };\n                    }),\n                layoutHandler = scheduler.getEventLayoutHandler(eventLayout),\n                nbrOfBandsRequired = layoutHandler.layoutEventsInBands(events, resourceRecord, true);\n\n            if (layoutHandler.type === 'layoutFn') {\n                return nbrOfBandsRequired;\n            }\n\n            return (nbrOfBandsRequired * contentHeight) + ((nbrOfBandsRequired - 1) * barMargin) + resourceMargin * 2;\n        }\n\n        return rowHeight;\n    }\n\n    //endregion\n\n    //region TimeAxis\n\n    doUpdateTimeView() {\n        const { scrollable } = this.scheduler.timeAxisSubGrid;\n\n        // scrollLeft is the DOM's concept which is -ve in RTL mode.\n        // scrollX is always the +ve scroll offset from the origin.\n        // Both may be needed for different calculations.\n        this.updateFromHorizontalScroll(scrollable.x, true);\n    }\n\n    onTimeAxisViewModelUpdate() {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        me.clearAll();\n\n        // If refresh is suspended, update timeView as soon as refresh gets unsuspended\n        if (scheduler.refreshSuspended) {\n            me.detachListeners('renderingSuspend');\n\n            scheduler.ion({\n                name : 'renderingSuspend',\n                resumeRefresh({ trigger }) {\n                    // This code will try to refresh rows, but resumeRefresh event doesn't guarantee rowManager rows are\n                    // in actual state. e.g. if resources were removed during a suspended refresh rowManager won't get a\n                    // chance to update them until `refresh` event from the project. We can safely update the view only\n                    // if engine in ready (not committing), otherwise we leave refresh a liability of normal project refresh\n                    // logic. Covered by SchedulerRendering.t.js\n                    // https://github.com/bryntum/support/issues/1462\n                    if (scheduler.isEngineReady && trigger) {\n                        me.doUpdateTimeView();\n                    }\n                },\n                thisObj : me,\n                once    : true\n            });\n        }\n\n        // Call update anyway. If refresh is suspended this call will only update visible date range and will not redraw rows\n        me.doUpdateTimeView();\n    }\n\n    //endregion\n\n    //region Dependency connectors\n\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'start'|'end'|'top'|'bottom'} 'start' / 'end' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(eventRecord) {\n        return 'start';\n    }\n\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'start'|'end'|'top'|'bottom'} 'start' / 'end' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(eventRecord) {\n        return 'end';\n    }\n\n    //endregion\n\n    //region Scheduler hooks\n\n    refreshRows(reLayoutEvents) {\n        if (reLayoutEvents) {\n            this.clearAll();\n        }\n    }\n\n    // Clear events in case they use date as part of displayed info\n    onLocaleChange() {\n        this.clearAll();\n    }\n\n    // Called when viewport size changes\n    onViewportResize(width, height, oldWidth, oldHeight) {\n        // We don't draw events for all rendered rows, \"refresh\" when height changes to make sure events in previously\n        // invisible rows gets displayed\n        if (height > oldHeight) {\n            this.onRenderDone();\n        }\n    }\n\n    // Called from EventDrag\n    onDragAbort({ context, dragData }) {\n        // Aborted a drag in a scrolled scheduler, with origin now out of view. Element is no longer needed\n        if (this.resourceStore.indexOf(dragData.record.resource) < this.scheduler.topRow.dataIndex) {\n            context.element.remove();\n        }\n    }\n\n    // Called from EventSelection\n    toggleCls(assignmentRecord, cls, add = true, useWrapper = false) {\n        const\n            element      = this.client.getElementFromAssignmentRecord(assignmentRecord, useWrapper),\n            // <remove-on-release>\n            // TODO: Should be assignmentRecord.resourceId, but breaks engine. Hoping https://github.com/bryntum/bryntum-suite/pull/1252 will fix it\n            // </remove-on-release>\n            resourceData = this.resourceMap.get(assignmentRecord.isModel ? assignmentRecord.get('resourceId') : assignmentRecord.resourceId),\n            eventData    = resourceData?.eventsData.find(d => d.eventId === assignmentRecord.eventId);\n\n        // Update cached config\n        if (eventData) {\n            eventData[useWrapper ? 'wrapperCls' : 'cls'][cls] = add;\n        }\n\n        // Live update element\n        if (element) {\n            // Update element\n            element.classList[add ? 'add' : 'remove'](cls);\n            // And its DOM config\n            element.lastDomConfig.className[cls] = add;\n        }\n    }\n\n    // React to rows being removed, refreshes view without any relayouting needed since layout is cached relative to row\n    onRemoveRows({ rows }) {\n        rows.forEach(row => this.rowMap.delete(row));\n        this.onRenderDone();\n    }\n\n    // Reset renderer flag before any renderers are called\n    onEarlyScroll() {\n        this.rendererCalled = false;\n    }\n\n    // If vertical scroll did not cause a renderer to be called we still want to update since we only draw events in\n    // view, \"independent\" from their rows\n    updateFromVerticalScroll() {\n        this.fromScroll = true;\n        if (!this.rendererCalled) {\n            this.onRenderDone();\n        }\n    }\n\n    // Update header range on horizontal scroll. No need to draw any tasks, Gantt only cares about vertical scroll\n    updateFromHorizontalScroll(scrollX, force) {\n        const\n            me            = this,\n            {\n                scheduler,\n                scrollBuffer\n            } = me,\n            renderAll     = scrollBuffer === -1,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = scheduler,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = scheduler.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = renderAll ? timeAxis.startDate : scheduler.getDateFromCoord({ coord : Math.max(0, start - scrollBuffer), ignoreRTL : true }),\n            endDate       = returnEnd || renderAll ? timeAxis.endDate : (scheduler.getDateFromCoord({ coord : start + width + scrollBuffer, ignoreRTL : true }) || timeAxis.endDate);\n\n        if (\n            startDate && !scheduler._viewPresetChanging &&\n            // If rendering all, no action needed if scrolling horizontally unless start/end/tick size etc changes\n            (!renderAll || force || (startDate - (me._visibleDateRange?.startDate || 0)) || (endDate - (me._visibleDateRange?.endDate || 0)))\n        ) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = renderAll ? { left : 0, right : totalSize } : rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width + scrollBuffer, right : totalSize - scrollX - scrollBuffer }\n                // LTR all the way to the left\n                : { left : scrollX - scrollBuffer, right : scrollX + width + scrollBuffer };\n\n            // Update timeaxis header making it display the new dates\n            const range = scheduler.timeView.range = { startDate, endDate };\n\n            scheduler.onVisibleDateRangeChange(range);\n\n            // If refresh is suspended, someone else is responsible for updating the UI later\n            if (!scheduler.refreshSuspended && scheduler.rowManager.rows.length) {\n                // Gets here too early in Safari for ResourceHistogram. ResizeObserver triggers a scroll before rows are\n                // rendered first time. Could not track down why, bailing out\n                if (scheduler.rowManager.rows[0].id === null) {\n                    return;\n                }\n\n                me.fromScroll = true;\n                scheduler.rowManager.rows.forEach(row => me.refreshEventsForResource(row, false, false));\n\n                me.onRenderDone();\n            }\n        }\n    }\n\n    // Called from SchedulerEventRendering\n    repaintEventsForResource(resourceRecord) {\n        this.refreshResources([resourceRecord.id]);\n    }\n\n    onBeforeRowHeightChange() {\n        // Row height is cached per resource, all have to be re-laid out\n        this.clearAll();\n    }\n\n    //endregion\n\n    //region Refresh resources\n\n    refreshResourcesOnDataReady(resourceIds) {\n        resourceIds.forEach(id => this.toDrawOnDataReady.add(id));\n    }\n\n    /**\n     * Clears resources directly and redraws them on next project refresh\n     * @param {Number[]|String[]} resourceIds\n     * @private\n     */\n    refreshResourcesWhenReady(resourceIds) {\n        this.clearResources(resourceIds);\n        resourceIds.forEach(id => this.toDrawOnProjectRefresh.add(id));\n    }\n\n    /**\n     * Clears and redraws resources directly. Respects schedulers refresh suspension\n     * @param {Number[]|String[]} ids Resource ids\n     * @param {Boolean} [transition] Use transition or not\n     * @private\n     */\n    refreshResources(ids, transition = true) {\n        const\n            me            = this,\n            { scheduler } = me,\n            rows          = [],\n            noRows        = [];\n\n        me.clearResources(ids);\n\n        if (!scheduler.refreshSuspended) {\n            ids.forEach(id => {\n                const row = scheduler.getRowById(id);\n                if (row) {\n                    rows.push(row);\n                }\n                else {\n                    noRows.push(row);\n                }\n            });\n\n            scheduler.runWithTransition(() => {\n                // Rendering rows populates row heights, but not all resources might have a row in view\n                scheduler.calculateRowHeights(noRows.map(id => this.resourceStore.getById(id)), true);\n\n                // Render those that do\n                scheduler.rowManager.renderRows(rows);\n            }, transition);\n        }\n    }\n\n    //endregion\n\n    //region Stack & pack\n\n    layoutEventVerticallyStack(bandIndex, eventRecord, resourceRecord) {\n        const { barMargin, resourceMargin, contentHeight } = this.scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent);\n\n        return bandIndex === 0\n            ? resourceMargin\n            : resourceMargin + bandIndex * contentHeight + bandIndex * barMargin;\n    }\n\n    layoutEventVerticallyPack(topFraction, heightFraction, eventRecord, resourceRecord) {\n        const\n            {\n                barMargin,\n                resourceMargin,\n                contentHeight\n            }               = this.scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent),\n            count           = 1 / heightFraction,\n            bandIndex       = topFraction * count, // \"y\" within row\n            height          = (contentHeight - ((count - 1) * barMargin)) * heightFraction,\n            top             = resourceMargin + bandIndex * height + bandIndex * barMargin;\n\n        return {\n            top, height\n        };\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Used by event drag features to bring into existence event elements that are outside of the rendered block.\n     * @param {Scheduler.model.TimeSpan} eventRecord The event to render\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The event to render\n     * @private\n     */\n    addTemporaryDragElement(eventRecord, resourceRecord = eventRecord.resource) {\n        const\n            { scheduler } = this,\n            renderData    = scheduler.generateRenderData(eventRecord, resourceRecord, { timeAxis : true, viewport : true });\n\n        renderData.absoluteTop = renderData.row\n            ? (renderData.top + renderData.row.top)\n            : scheduler.getResourceEventBox(eventRecord, resourceRecord, true).top;\n\n        const\n            domConfig = this.renderEvent(renderData),\n            { dataset } = domConfig;\n\n        delete domConfig.tabIndex;\n        delete dataset.eventId;\n        delete dataset.resourceId;\n        delete dataset.assignmentId;\n        delete dataset.syncId;\n        dataset.transient = true;\n        domConfig.parent = this.scheduler.foregroundCanvas;\n\n        // So that the regular DomSyncing which may happen during scroll does not\n        // sweep up and reuse the temporary element.\n        domConfig.retainElement = true;\n\n        const result = DomHelper.createElement(domConfig);\n\n        result.innerElement = result.firstChild;\n\n        eventRecord.instanceMeta(scheduler).hasTemporaryDragElement = true;\n\n        return result;\n    }\n\n    // Earlier start dates are above later tasks\n    // If same start date, longer tasks float to top\n    // If same start + duration, sort by name\n    // Fn can be called with layout date or event records (from EventNavigation)\n    eventSorter(a, b) {\n        if (this.overlappingEventSorter) {\n            return this.overlappingEventSorter(a.eventRecord || a, b.eventRecord || b);\n        }\n\n        const\n            // <remove-on-release>\n            // TODO: Rename startMS -> startDateMS to not have to have isModel check here (and to be consistent)\n            // </remove-on-release>\n            startA    = a.isModel ? a.startDateMS : a.dataStartMS || a.startMS, // dataXX are used if configured with fillTicks\n            endA      = a.isModel ? a.endDateMS : a.dataEndMS || a.endMS,\n            startB    = b.isModel ? b.startDateMS : b.dataStartMS || b.startMS,\n            endB      = b.isModel ? b.endDateMS :  b.dataEndMS || b.endMS,\n            nameA     = a.isModel ? a.name : a.eventRecord.name,\n            nameB     = b.isModel ? b.name : b.eventRecord.name;\n\n        return startA - startB || endB - endA || (nameA < nameB ? -1 : nameA == nameB ? 0 : 1);\n    }\n\n    /**\n     * Converts a start/endDate into a MS value used when rendering the event. If scheduler is configured with\n     * `fillTicks: true` the value returned will be snapped to tick start/end.\n     * @private\n     * @param {Scheduler.model.TimeSpan} eventRecord\n     * @param {String} startDateField\n     * @param {String} endDateField\n     * @param {Boolean} useEventBuffer\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @returns {Object} Object of format { startMS, endMS, durationMS }\n     */\n    calculateMS(eventRecord, startDateField, endDateField, useEventBuffer, resourceRecord) {\n        const\n            me                    = this,\n            { scheduler }         = me,\n            { timeAxisViewModel } = scheduler;\n\n        let startMS    = getStartEnd(scheduler, eventRecord, false, startDateField, useEventBuffer),\n            endMS      = getStartEnd(scheduler, eventRecord, true, endDateField, useEventBuffer),\n            durationMS = endMS - startMS;\n\n        if (scheduler.milestoneLayoutMode !== 'default' && durationMS === 0) {\n            const\n                pxPerMinute = timeAxisViewModel.getSingleUnitInPixels('minute'),\n                lengthInPx  = scheduler.getMilestoneLabelWidth(eventRecord, resourceRecord),\n                duration    = lengthInPx * (1 / pxPerMinute);\n\n            durationMS = duration * 60 * 1000;\n\n            if (scheduler.milestoneTextPosition === 'always-outside') {\n                // Milestone is offset half a diamond to the left (compensated in CSS with padding) for the layout pass,\n                // to take diamond corner into account\n                const\n                    diamondSize = scheduler.getResourceLayoutSettings(resourceRecord, eventRecord.parent).contentHeight,\n                    diamondMS   = diamondSize * (1 / pxPerMinute) * 60 * 1000;\n                startMS -= diamondMS / 2;\n                endMS = startMS + durationMS;\n            }\n            else {\n                switch (scheduler.milestoneAlign) {\n                    case 'start':\n                    case 'left':\n                        endMS = startMS + durationMS;\n                        break;\n                    case 'end':\n                    case 'right':\n                        endMS = startMS;\n                        startMS = endMS - durationMS;\n                        break;\n                    default: // using center as default\n                        endMS = startMS + durationMS / 2;\n                        startMS = endMS - durationMS;\n                        break;\n                }\n            }\n        }\n\n        return {\n            startMS,\n            endMS,\n            durationMS\n        };\n    }\n\n    /**\n     * Returns event render data except actual position information.\n     * @param timeSpan\n     * @param rowRecord\n     * @returns {HorizontalRenderData}\n     * @private\n     */\n    setupRenderData(timeSpan, rowRecord) {\n        const\n            me                             = this,\n            { scheduler }                  = me,\n            {\n                timeAxis,\n                timeAxisViewModel\n            }                              = scheduler,\n            {\n                preamble,\n                postamble\n            }                              = timeSpan,\n            useEventBuffer                 = me.isProHorizontalRendering && scheduler.features.eventBuffer?.enabled &&\n                (preamble || postamble) && !timeSpan.isMilestone,\n            pxPerMinute                    = timeAxisViewModel.getSingleUnitInPixels('minute'),\n            { isBatchUpdating }            = timeSpan,\n            startDateField                 = useEventBuffer ? 'wrapStartDate' : 'startDate',\n            endDateField                   = useEventBuffer ? 'wrapEndDate' : 'endDate',\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // EventResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            // Use endDate accessor if duration has not been propagated to create endDate\n            timespanStart                  = isBatchUpdating && !useEventBuffer ? timeSpan.get(startDateField) : timeSpan[startDateField],\n            // Allow timespans to be rendered even when they are missing an end date\n            timespanEnd                    = isBatchUpdating && !useEventBuffer ? timeSpan.get(endDateField) : timeSpan[endDateField] || timespanStart,\n            viewStartMS                    = timeAxis.startMS,\n            viewEndMS                      = timeAxis.endMS,\n            { startMS, endMS, durationMS } = me.calculateMS(timeSpan, startDateField, endDateField, useEventBuffer, rowRecord),\n            // These flags have two components because includeOutsideViewport\n            // means that we can be calculating data for events either side of\n            // the TimeAxis.\n            // The start is outside of the view if it's before *or after* the TimeAxis range.\n            // 1 set means the start is before the TimeAxis\n            // 2 set means the start is after the TimeAxis\n            // Either way, a truthy value means that the start is outside of the TimeAxis.\n            startsOutsideView              = startMS < viewStartMS | ((startMS > viewEndMS) << 1),\n            // The end is outside of the view if it's before *or after* the TimeAxis range.\n            // 1 set means the end is after the TimeAxis\n            // 2 set means the end is before the TimeAxis\n            // Either way, a truthy value means that the end is outside of the TimeAxis.\n            endsOutsideView                = endMS > viewEndMS | ((endMS <= viewStartMS) << 1),\n            durationMinutes                = durationMS / (1000 * 60),\n            width                          = endsOutsideView ? pxPerMinute * durationMinutes : null,\n            row                            = scheduler.getRowById(rowRecord);\n\n        return {\n            eventRecord : timeSpan,\n            taskRecord  : timeSpan, // Helps with using Gantt projects in Scheduler Pro\n            start       : timespanStart,\n            end         : timespanEnd,\n            rowId       : rowRecord.id,\n            children    : [],\n            startMS,\n            endMS,\n            durationMS,\n            startsOutsideView,\n            endsOutsideView,\n            width,\n            row,\n            useEventBuffer\n        };\n    }\n\n    /**\n     * Populates render data with information about width and horizontal position of the wrap.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillTimeSpanHorizontalPosition(renderData) {\n        const\n            { startMS, endMS, durationMS } = renderData,\n            // With delayed calculation there is no guarantee data is normalized, might be missing a crucial component\n            result = startMS != null && endMS != null && this.calculateHorizontalPosition(renderData, startMS, endMS, durationMS);\n\n        if (result) {\n            Object.assign(renderData, result);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Fills render data with `left` and `width` properties\n     * @param {HorizontalRenderData} renderData\n     * @param {Number} startMS\n     * @param {Number} endMS\n     * @param {Number} durationMS\n     * @returns {{left: number, width: number, clippedStart: boolean, clippedEnd: boolean}|null}\n     * @private\n     */\n    calculateHorizontalPosition(renderData, startMS, endMS, durationMS) {\n        const\n            { scheduler }   = this,\n            {\n                timeAxis,\n                timeAxisViewModel\n            }               = scheduler,\n            {\n                startsOutsideView,\n                endsOutsideView,\n                eventRecord\n            }               = renderData,\n            viewStartMS     = timeAxis.startMS,\n            pxPerMinute     = timeAxisViewModel.getSingleUnitInPixels('minute'),\n            durationMinutes = durationMS / (1000 * 60),\n            width           = endsOutsideView ? pxPerMinute * durationMinutes : null;\n\n        let endX = scheduler.getCoordinateFromDate(endMS, {\n                local            : true,\n                respectExclusion : true,\n                isEnd            : true\n            }), startX, clippedStart = false, clippedEnd = false;\n\n        // If event starts outside of view, estimate where.\n        if (startsOutsideView) {\n            startX = (startMS - viewStartMS) / (1000 * 60) * pxPerMinute;\n\n            // Flip -ve startX to being to the right of the viewport end\n            if (scheduler.rtl) {\n                startX = scheduler.timeAxisSubGrid.scrollable.scrollWidth - startX;\n            }\n        }\n        // Starts in view, calculate exactly\n        else {\n            // If end date is included in time axis but start date is not (when using time axis exclusions), snap start date to next included data\n            startX = scheduler.getCoordinateFromDate(startMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : false,\n                snapToNextIncluded : endX !== -1\n            });\n\n            clippedStart = startX === -1;\n        }\n\n        if (endsOutsideView) {\n            // Have to clip the events in Safari when using stickyEvents, it does not support `overflow: clip`\n            if (BrowserHelper.isSafari && scheduler.features.stickyEvents && timeAxis.endMS  || (endX === -1 && !timeAxis.continuous)) {\n                endX = scheduler.getCoordinateFromDate(timeAxis.endMS);\n            }\n            else {\n                // Parentheses needed\n                endX = startX + width * (scheduler.rtl ? -1 : 1);\n            }\n        }\n        else {\n            clippedEnd = endX === -1;\n        }\n\n        if (clippedEnd && !clippedStart) {\n            // We know where to start but not where to end, snap it (the opposite is already handled by the\n            // snapToNextIncluded flag when calculating startX above)\n            endX = scheduler.getCoordinateFromDate(endMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : true,\n                snapToNextIncluded : true\n            });\n        }\n\n        // If the element is very wide there's no point in displaying it all.\n        // Indeed the element may not be displayable at extremely large widths.\n        if (width > MAX_WIDTH) {\n            // The start is before the TimeAxis start\n            if (startsOutsideView === 1) {\n                // Both ends outside - spans TimeAxis\n                if (endsOutsideView === 1) {\n                    startX = -100;\n                    endX = scheduler.timeAxisColumn.width + 100;\n                }\n                // End is in view\n                else {\n                    startX = endX - MAX_WIDTH;\n                }\n            }\n            // The end is after, but the start is in view\n            else if (endsOutsideView === 1) {\n                endX = startX + MAX_WIDTH;\n            }\n        }\n\n        if (clippedStart && clippedEnd) {\n            // Both ends excluded, but there might be some part in between that should be displayed...\n            startX = scheduler.getCoordinateFromDate(startMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : false,\n                snapToNextIncluded : true,\n                max                : endMS\n            });\n\n            endX = scheduler.getCoordinateFromDate(endMS, {\n                local              : true,\n                respectExclusion   : true,\n                isEnd              : true,\n                snapToNextIncluded : true,\n                min                : startMS\n            });\n\n            if (startX === endX) {\n                // Raise flag on instance meta to avoid duplicating this logic\n                eventRecord.instanceMeta(scheduler).excluded = true;\n                // Excluded by time axis exclusion rules, render nothing\n                return null;\n            }\n        }\n\n        return {\n            left  : Math.min(startX, endX),\n            // Use min width 5 for normal events, 0 for milestones (won't have width specified at all in the\n            // end). During drag create a normal event can get 0 duration, in this case we still want it to\n            // get a min width of 5 (6px for wrapper, -1 px for event element\n            width : Math.abs(endX - startX) || (eventRecord.isMilestone && !eventRecord.meta.isDragCreating ? 0 : 6),\n            clippedStart,\n            clippedEnd\n        };\n    }\n\n    fillTimeSpanVerticalPosition(renderData, rowRecord) {\n        const\n            { scheduler }  = this,\n            { start, end } = renderData,\n            {\n                resourceMargin,\n                contentHeight\n            }              = scheduler.getResourceLayoutSettings(rowRecord);\n\n        // If filling ticks we need to also keep data's MS values, since they are used for sorting timespans\n        if (scheduler.fillTicks) {\n            renderData.dataStartMS = start.getTime();\n            renderData.dataEndMS = end.getTime();\n        }\n\n        renderData.top = Math.max(0, resourceMargin);\n\n        if (scheduler.managedEventSizing) {\n            // Timespan height should be at least 1px\n            renderData.height = contentHeight;\n        }\n    }\n\n    /**\n     * Gets timespan coordinates etc. Relative to containing row. If the timespan is outside of the zone in\n     * which timespans are rendered, that is outside of the TimeAxis, or outside of the vertical zone in which timespans\n     * are rendered, then `undefined` is returned.\n     * @private\n     * @param {Scheduler.model.TimeSpan} timeSpan TimeSpan record\n     * @param {Core.data.Model} rowRecord Row record\n     * @param {Boolean|Object} includeOutside Specify true to get boxes for timespans outside of the rendered zone in both\n     * dimensions. This option is used when calculating dependency lines, and we need to include routes from timespans\n     * which may be outside the rendered zone.\n     * @param {Boolean} includeOutside.timeAxis Pass as `true` to include timespans outside of the TimeAxis's bounds\n     * @param {Boolean} includeOutside.viewport Pass as `true` to include timespans outside of the vertical timespan viewport's bounds.\n     * @returns {{event/task: *, left: number, width: number, start: (Date), end: (Date), startMS: number, endMS: number, startsOutsideView: boolean, endsOutsideView: boolean}}\n     */\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const\n            me                     = this,\n            { scheduler }          = me,\n            { timeAxis }           = scheduler,\n            includeOutsideTimeAxis = includeOutside === true || includeOutside.timeAxis,\n            includeOutsideViewport = includeOutside === true || includeOutside.viewport;\n\n        // If timespan is outside the TimeAxis, give up trying to calculate a layout (Unless we're including timespans\n        // outside our zone)\n        if (includeOutsideTimeAxis || timeAxis.isTimeSpanInAxis(timeSpan)) {\n            const row = scheduler.getRowById(rowRecord);\n\n            if (row || includeOutsideViewport) {\n                const data = me.setupRenderData(timeSpan, rowRecord);\n\n                if (!me.fillTimeSpanHorizontalPosition(data)) {\n                    return null;\n                }\n\n                me.fillTimeSpanVerticalPosition(data, rowRecord);\n\n                return data;\n            }\n        }\n    }\n\n    // Layout a set of events, code shared by normal event render path and nested events\n    layoutEvents(resourceRecord, allEvents, includeOutside = false, parentEventRecord, eventSorter) {\n        const\n            me                   = this,\n            { scheduler }        = me,\n            { timeAxis }         = scheduler,\n            // Generate layout data\n            eventsData           = allEvents.reduce((result, eventRecord) => {\n                // Only those in time axis (by default)\n                if ((includeOutside || timeAxis.isTimeSpanInAxis(eventRecord))) {\n                    const eventBox = scheduler.generateRenderData(eventRecord, resourceRecord, false);\n\n                    // Collect layouts of visible events\n                    if (eventBox) {\n                        result.push(eventBox);\n                    }\n                }\n\n                return result;\n            }, []);\n\n        // Ensure the events are rendered in natural order so that navigation works.\n        eventsData.sort(eventSorter ?? me.eventSorter);\n\n        let rowHeight = scheduler.getAppliedResourceHeight(resourceRecord, parentEventRecord);\n\n        const\n            // Only events and tasks should be considered during layout (not resource time ranges if any, or events\n            // being drag created when configured with lockLayout)\n            layoutEventData = eventsData.filter(({ eventRecord }) => eventRecord.isEvent && !eventRecord.meta.excludeFromLayout),\n            eventLayout     = scheduler.getEventLayout(resourceRecord, parentEventRecord),\n            layoutHandler   = scheduler.getEventLayoutHandler(eventLayout);\n\n        if (layoutHandler) {\n            const\n                {\n                    barMargin,\n                    resourceMargin,\n                    contentHeight\n                }              = scheduler.getResourceLayoutSettings(resourceRecord, parentEventRecord),\n                bandsRequired  = layoutHandler.applyLayout(layoutEventData, resourceRecord) || 1;\n\n            if (layoutHandler.type === 'layoutFn') {\n                rowHeight = bandsRequired;\n            }\n            else {\n                rowHeight = (bandsRequired * contentHeight) + ((bandsRequired - 1) * barMargin) + resourceMargin * 2;\n            }\n        }\n        // Apply z-index when event elements might overlap, to keep \"overlap order\" consistent\n        else if (layoutEventData.length > 0) {\n            for (let i = 0; i < layoutEventData.length; i++) {\n                const data = layoutEventData[i];\n                // $event-zindex scss var is 5\n                data.wrapperStyle += `;z-index:${i + 5}`;\n            }\n        }\n\n        return { rowHeight, eventsData };\n    }\n\n    // Lay out events within a resource, relative to the resource\n    layoutResourceEvents(resourceRecord, includeOutside = false) {\n        const\n            me                   = this,\n            { scheduler }        = me,\n            {\n                eventStore,\n                assignmentStore,\n                timeAxis\n            }                    = scheduler,\n            // Events for this resource\n            resourceEvents = eventStore.getEvents({\n                includeOccurrences : scheduler.enableRecurringEvents,\n                resourceRecord,\n                startDate          : timeAxis.startDate,\n                endDate            : timeAxis.endDate,\n                filter             : (assignmentStore.isFiltered || eventStore.isFiltered) && (eventRecord =>\n                    eventRecord.assignments.some(a => a.resource === resourceRecord.$original && assignmentStore.includes(a)))\n            }),\n            // Call a chainable template function on scheduler to allow features to add additional \"events\" to render\n            // Currently used by ResourceTimeRanges, CalendarHighlight & NestedEvents\n            allEvents            = scheduler.getEventsToRender(resourceRecord, resourceEvents) || [];\n\n        return me.layoutEvents(resourceRecord, allEvents, includeOutside);\n    }\n\n    // Generates a DOMConfig for an EventRecord\n    renderEvent(data, rowHeight) {\n        const\n            { scheduler }                                     = this,\n            { resourceRecord, assignmentRecord, eventRecord } = data,\n            {\n                milestoneLayoutMode    : layoutMode,\n                milestoneTextPosition  : textPosition\n            }    = scheduler,\n            // Sync using assignment id for events and event id for ResourceTimeRanges. Add eventId for occurrences to make them unique\n            syncId                                            = assignmentRecord\n                // Assignment, might be an occurrence\n                ? this.assignmentStore.getOccurrence(assignmentRecord, eventRecord).id\n                // Something else, probably a ResourceTimeRange\n                : data.eventId,\n            eventElementConfig = {\n                className : data.cls,\n                style     : data.style || '',\n                children  : data.children,\n                role      : 'presentation',\n                dataset   : {\n                    // Each feature putting contents in the event wrap should have this to simplify syncing and\n                    // element retrieval after sync\n                    taskFeature : 'event'\n                },\n                syncOptions : {\n                    syncIdField : 'taskBarFeature'\n                }\n            },\n            // Event element config, applied to existing element or used to create a new one below\n            elementConfig                        = {\n                className : data.wrapperCls,\n                tabIndex  : ('tabIndex' in data) ? data.tabIndex : -1,\n                children  : [\n                    eventElementConfig,\n                    ...data.wrapperChildren\n                ],\n                style : {\n                    top    : data.absoluteTop,\n                    left   : data.left,\n                    // ResourceTimeRanges fill row height, cannot be done earlier than this since row height is not\n                    // known initially\n                    height : data.fillSize ? rowHeight : data.height,\n                    // DomHelper appends px to dimensions when using numbers.\n                    // Do not ignore width for normal milestones, use height value. It is required to properly center\n                    // pseudo element with top/bottom labels.\n                    // Milestone part of layout that contain the label gets a width\n                    width  : (eventRecord.isMilestone && !eventRecord.meta.isDragCreating) &&\n                             ((layoutMode === 'default' && (textPosition === 'outside' || (textPosition === 'inside' && !data.width))) ||\n                                 textPosition === 'always-outside') ? data.height : data.width,\n                    style    : data.wrapperStyle,\n                    fontSize : data.height + 'px'\n                },\n                dataset : {\n                    // assignmentId is set in this function conditionally\n                    resourceId : resourceRecord.id,\n                    eventId    : data.eventId, // Not using eventRecord.id to distinguish between Event and ResourceTimeRange\n                    syncId     : resourceRecord.isLinked ? `${syncId}_${resourceRecord.id}` : syncId\n                },\n                // Will not be part of DOM, but attached to the element\n                elementData   : data,\n                // Dragging etc. flags element as retained, to not reuse/release it during that operation. Events\n                // always use assignments, but ResourceTimeRanges does not\n                retainElement : assignmentRecord?.instanceMeta(scheduler).retainElement || eventRecord.instanceMeta(scheduler).retainElement,\n                // Options for this level of sync, lower levels can have their own\n                syncOptions   : {\n                    syncIdField      : 'taskFeature',\n                    // Remove instead of release when a feature is disabled\n                    releaseThreshold : 0\n                }\n            };\n\n        // Write back the correct height for elements filling the row, to not derender them later based on wrong height\n        if (data.fillSize) {\n            data.height = rowHeight;\n        }\n\n        // Some browsers throw warnings on zIndex = ''\n        if (data.zIndex) {\n            elementConfig.zIndex = data.zIndex;\n        }\n\n        // Do not want to spam dataset with empty prop when not using assignments (ResourceTimeRanges)\n        if (assignmentRecord) {\n            elementConfig.dataset.assignmentId = assignmentRecord.id;\n        }\n\n        data.elementConfig = elementConfig;\n\n        scheduler.afterRenderEvent({ renderData : data, rowHeight, domConfig : elementConfig });\n\n        return elementConfig;\n    }\n\n    /**\n     * Refresh events for resource record (or Row), clearing its cache and forcing DOM refresh.\n     * @param {Scheduler.model.ResourceModel} recordOrRow Record or row to refresh\n     * @param {Boolean} [force] Specify `false` to prevent clearing cache and forcing DOM refresh\n     * @internal\n     */\n    refreshEventsForResource(recordOrRow, force = true, draw = true) {\n        const\n            me     = this,\n            record = me.scheduler.store.getById(recordOrRow.isRow ? recordOrRow.id : recordOrRow),\n            row    = me.scheduler.rowManager.getRowFor(record);\n\n        if (force) {\n            me.clearResources([record]);\n        }\n\n        if (row && record) {\n            me.renderer({ row, record });\n\n            if (force && draw) {\n                me.onRenderDone();\n            }\n        }\n    }\n\n    // Returns layout for the current resource. Used by the renderer and exporter\n    getResourceLayout(resourceRecord) {\n        const me = this;\n\n        // Use cached layout if available\n        let resourceLayout = me.resourceMap.get(resourceRecord.id);\n\n        if (!resourceLayout || resourceLayout.invalid) {\n            // Previously we would bail out here if engine wasn't ready. Now we instead allow drawing in most cases,\n            // since data can be read and written during commit (previously it could not)\n            if (me.suspended) {\n                return;\n            }\n\n            resourceLayout = me.layoutResourceEvents(resourceRecord, false);\n            me.resourceMap.set(resourceRecord.id, resourceLayout);\n        }\n\n        return resourceLayout;\n    }\n\n    getEventDOMConfigForCurrentView(resourceLayout, row, left, right) {\n        const\n            me                        = this,\n            { bufferSize, scheduler } = me,\n            { labels, eventBuffer }   = scheduler.features,\n            // Left/right labels and event buffer elements require using a buffer to not derender too early\n            usesLabels                = eventBuffer?.enabled || (labels?.enabled && (labels.left || labels.right || labels.before || labels.after)),\n            { eventsData }            = resourceLayout,\n            // When scrolling, layout will be reused and any events that are still in view can reuse their DOM configs\n            reusableDOMConfigs        = me.fromScroll ? me.rowMap.get(row) : null,\n            eventDOMConfigs           = [];\n\n        let useLeft, useRight;\n\n        // Only collect configs for those actually in view\n        for (let i = 0; i < eventsData.length; i++) {\n            const layout = eventsData[i];\n\n            useLeft = left;\n            useRight = right;\n\n            // Labels/milestones requires keeping events rendered longer\n            if (usesLabels || layout.width === 0) {\n                useLeft -= bufferSize;\n                useRight += bufferSize;\n            }\n\n            if ((layout.left + layout.width) >= useLeft && layout.left <= useRight) {\n                layout.absoluteTop = layout.top + row.top;\n                // <remove-on-release>\n                // TODO: Consider using a map of maps instead of having to find() here. But it is anyhow much faster\n                //  than not reusing dom configs\n                // </remove-on-release>\n                const prevDomConfig = reusableDOMConfigs?.find(config => config.elementData.eventId === layout.eventId &&\n                    config.elementData.resourceId === layout.resourceId);\n                eventDOMConfigs.push(prevDomConfig ?? me.renderEvent(layout, resourceLayout.rowHeight));\n            }\n        }\n\n        return eventDOMConfigs;\n    }\n\n    // Called per row in \"view\", collect configs\n    renderer({ row, record : resourceRecord, size = {} }) {\n        const me = this;\n\n        // Bail out for group headers/footers\n        if (resourceRecord.isSpecialRow) {\n            // Clear any cached layout for row retooled to special row, and bail out\n            me.rowMap.delete(row);\n            return;\n        }\n\n        const\n            { left, right } = me.viewportCoords,\n            resourceLayout  = me.getResourceLayout(resourceRecord);\n\n        // Layout is suspended\n        if (!resourceLayout) {\n            return;\n        }\n\n        // Size row to fit events\n        size.height = resourceLayout.rowHeight;\n        // Avoid storing our calculated height as the rows max height, to not affect next round of calculations\n        size.transient = true;\n\n        const eventDOMConfigs = me.getEventDOMConfigForCurrentView(resourceLayout, row, left, right);\n\n        me.rowMap.set(row, eventDOMConfigs);\n\n        // Keep track if we need to draw on vertical scroll or not, to not get multiple onRenderDone() calls\n        me.rendererCalled = true;\n    }\n\n    // Called when the current row rendering \"pass\" is complete, sync collected configs to DOM\n    onRenderDone() {\n        const\n            { scheduler, rowMap, verticalBufferSize }  = this,\n            visibleEventDOMConfigs                     = [],\n            bodyTop                                    = scheduler._scrollTop ?? 0,\n            viewTop                                    = bodyTop - verticalBufferSize,\n            viewBottom                                 = bodyTop + scheduler._bodyRectangle.height + verticalBufferSize,\n            unbuffered                                 = verticalBufferSize < 0,\n            unmanagedSize                              = !scheduler.managedEventSizing;\n\n        // Event configs are collected when rows are rendered, but we do not want to waste resources on rendering\n        // events far out of view. Especially with many events per row giving large row heights, rows in the RowManagers\n        // buffer might far away -> collect events for rows within viewport + small vertical buffer\n        rowMap.forEach((eventDOMConfigs, row) => {\n            // Render events \"in view\". Export specifies a negative verticalBufferSize to disable it\n            if (unbuffered || (row.bottom > viewTop && row.top < viewBottom)) {\n                for (let i = 0; i < eventDOMConfigs.length; i++) {\n                    const\n                        config = eventDOMConfigs[i],\n                        data   = config.elementData,\n                        {\n                            absoluteTop,\n                            eventRecord\n                        } = data;\n\n                    // Conditions under which event bars are included in the DOM:\n                    //   If bufferSize is -ve, meaning render all events.\n                    //   scheduler.managedEventSizing is false.\n                    //   The event is beig drag-created or drag-resized\n                    //   The event is within the bounds of the rendered region.\n                    if (unbuffered || unmanagedSize || eventRecord.meta.isDragCreating || eventRecord.meta.isResizing || (absoluteTop + data.height > viewTop && absoluteTop < viewBottom)) {\n                        visibleEventDOMConfigs.push(config);\n                    }\n                }\n            }\n\n            // We are using cached DomConfigs. When DomSync releases an element, it also flags the config as released.\n            // Next time we pass it that very same config, it says it is released and nothing shows up.\n            //\n            // We are breaching the DomSync contract a bit with the cached approach. DomSync expects new configs on each\n            // call, so to facilitate that we clone the configs shallowly (nothing deep is affected by sync releasing).\n            // That way we can always pass it fresh unreleased configs.\n            for (let i = 0; i < eventDOMConfigs.length; i++) {\n                eventDOMConfigs[i] = { ...eventDOMConfigs[i] };\n            }\n        });\n\n        this.fromScroll = false;\n        this.visibleEventDOMConfigs = visibleEventDOMConfigs;\n\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : visibleEventDOMConfigs\n            },\n            targetElement : scheduler.foregroundCanvas,\n            syncIdField   : 'syncId',\n\n            // Called by DomSync when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement, jsx }) {\n                const\n                    { reactComponent } = scheduler,\n                    // Some actions are considered first a release and then a render (reusing another element).\n                    // This gives clients code a chance to clean up before reusing an element\n                    isRelease          = releaseEventActions[action],\n                    isRender           = renderEventActions[action];\n\n                !isRelease && scheduler.processEventContent?.({\n                    jsx,\n                    action,\n                    domConfig,\n                    targetElement,\n                    isRelease,\n                    reactComponent\n                });\n\n                if (action === 'none' || !domConfig?.elementData?.isWrap) {\n                    return;\n                }\n\n                // Trigger release for events (it might be a proxy element, skip those)\n                if (isRelease && lastDomConfig?.elementData) {\n                    const\n                        { eventRecord, resourceRecord, assignmentRecord } = lastDomConfig.elementData,\n                        event = {\n                            renderData : lastDomConfig.elementData,\n                            element    : targetElement,\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord\n                        };\n\n                    // Process event necessary in the case of release\n                    scheduler.processEventContent?.({\n                        isRelease,\n                        targetElement,\n                        reactComponent,\n                        assignmentRecord\n                    });\n\n                    // Some browsers do not blur on set to display:none, so releasing the active element\n                    // must *explicitly* move focus outwards to the view.\n                    if (targetElement === DomHelper.getActiveElement(targetElement)) {\n                        scheduler.focusElement.focus();\n                    }\n\n                    // This event is documented on Scheduler\n                    scheduler.trigger('releaseEvent', event);\n                }\n\n                if (isRender) {\n                    const\n                        { eventRecord, resourceRecord, assignmentRecord } = domConfig.elementData,\n                        event = {\n                            renderData       : domConfig.elementData,\n                            element          : targetElement,\n                            isReusingElement : action === 'reuseElement',\n                            isRepaint        : action === 'reuseOwnElement',\n                            eventRecord,\n                            resourceRecord,\n                            assignmentRecord\n                        };\n\n                    // Prevent transitions when reusing some other events element\n                    if (action === 'reuseElement' && scheduler.isAnimating) {\n                        DomHelper.addTemporaryClass(targetElement, 'b-reusing-own', 50, scheduler);\n                    }\n\n                    // This event is documented on Scheduler\n                    scheduler.trigger('renderEvent', event);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Cache\n\n    // Clears cached resource layout\n    clearResources(recordsOrIds) {\n        recordsOrIds = ArrayHelper.asArray(recordsOrIds);\n\n        const resourceIds = recordsOrIds.map(Model.asId);\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            console.log('%Clearing resources ' + Array.from(resourceIds).join(','), 'color: #770000');\n        }\n        //</debug>\n\n        resourceIds.forEach(resourceId => {\n            // Invalidate resourceLayout, keeping it around in case we need it before next refresh\n            const cached = this.resourceMap.get(resourceId);\n            if (cached) {\n                cached.invalid = true;\n            }\n\n            const row = this.scheduler.getRowById(resourceId);\n            row && this.rowMap.delete(row);\n        });\n    }\n\n    clearAll({ clearDom = false, clearLayoutCache = false } = {}) {\n        const\n            me                            = this,\n            { layouts, foregroundCanvas } = me.scheduler;\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            console.log('%Clearing all', 'color: #770000');\n        }\n        //</debug>\n\n        if (clearLayoutCache && layouts) {\n            for (const layout in layouts) {\n                layouts[layout].clearCache();\n            }\n        }\n\n        // it seems `foregroundCanvas` can be missing at this point\n        // for example if scheduler instance is created w/o of `appendTo` config\n        if (foregroundCanvas && clearDom) {\n            // Start from scratch when replacing the project, to not retain anything in maps or released elements\n            foregroundCanvas.syncIdMap = foregroundCanvas.lastDomConfig = null;\n\n            for (const child of foregroundCanvas.children) {\n                child.lastDomConfig = child.elementData = null;\n            }\n        }\n\n        me.resourceMap.clear();\n        me.rowMap.clear();\n    }\n\n    //endregion\n}\n", "import PackMixin from './PackMixin.js';\n\n/**\n * @module Scheduler/eventlayout/VerticalLayout\n */\n\n/**\n * Assists with event layout in vertical mode, handles `eventLayout: none|pack|mixed`\n * @private\n * @mixes Scheduler/eventlayout/PackMixin\n */\nexport default class VerticalLayout extends PackMixin() {\n\n    static get defaultConfig() {\n        return {\n            coordProp : 'leftFactor',\n            sizeProp  : 'widthFactor'\n        };\n    }\n\n    // Try to pack the events to consume as little space as possible\n    applyLayout(events, columnWidth, resourceMargin, barMargin, columnIndex, eventLayout) {\n        const\n            me         = this,\n            layoutType = eventLayout.type;\n\n        return me.packEventsInBands(events, (tplData, clusterIndex, slot, slotSize) => {\n            // Stretch events to fill available width\n            if (layoutType === 'none') {\n                tplData.width = columnWidth - resourceMargin * 2;\n                tplData.left += resourceMargin;\n            }\n            else {\n                // Fractions of resource column\n                tplData.widthFactor = slotSize;\n\n                const\n                    leftFactor      = tplData.leftFactor = slot.start + (clusterIndex * slotSize),\n                    // Number of \"columns\" in the current slot\n                    packColumnCount = Math.round(1 / slotSize),\n                    // Index among those columns for current event\n                    packColumnIndex = leftFactor / slotSize,\n                    // Width with all bar margins subtracted\n                    availableWidth  = columnWidth - resourceMargin * 2 - barMargin * (packColumnCount - 1);\n\n                // Allowing two events to overlap? Slightly offset the second\n                if (layoutType === 'mixed' && packColumnCount === 2) {\n                    tplData.left += leftFactor * columnWidth / 5 + barMargin;\n                    tplData.width = columnWidth - leftFactor * columnWidth / 5 - barMargin * 2;\n                    tplData.zIndex = 5 + packColumnIndex;\n                }\n                // Pack by default\n                else {\n                    // Fractional width\n                    tplData.width = slotSize * availableWidth;\n                    // Translate to absolute position\n                    tplData.left += leftFactor * availableWidth + resourceMargin + barMargin * packColumnIndex;\n                }\n            }\n            tplData.cls['b-sch-event-narrow'] = tplData.width < me.scheduler.narrowEventWidth;\n        });\n    }\n}\n", "import Base from '../../../Core/Base.js';\nimport Delayable from '../../../Core/mixin/Delayable.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport VerticalLayout from '../../eventlayout/VerticalLayout.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Scheduler/view/orientation/VerticalRendering\n */\n\nconst\n    releaseEventActions = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions  = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    },\n    chronoFields        = {\n        startDate : 1,\n        endDate   : 1,\n        duration  : 1\n    },\n    emptyObject        = Object.freeze({});\n\n/**\n * Handles event rendering in Schedulers vertical mode. Reacts to project/store changes to keep the UI up to date.\n *\n * @internal\n */\nexport default class VerticalRendering extends Base.mixin(Delayable, AttachToProjectMixin) {\n\n    //region Config & Init\n\n    static get properties() {\n        return {\n            eventMap               : new Map(),\n            resourceMap            : new Map(),\n            releasedElements       : {},\n            toDrawOnProjectRefresh : new Set(),\n            resourceBufferSize     : 1\n        };\n    }\n\n    construct(scheduler) {\n        this.client         = this.scheduler = scheduler;\n        this.verticalLayout = new VerticalLayout({ scheduler });\n\n        super.construct({});\n    }\n\n    init() {\n        const\n            me                             = this,\n            { scheduler, resourceColumns } = me;\n\n        // Resource header/columns\n        resourceColumns.resourceStore = me.resourceStore;\n\n        resourceColumns.ion({\n            name              : 'resourceColumns',\n            columnWidthChange : 'onResourceColumnWidthChange',\n            thisObj           : me\n        });\n\n        me.initialized = true;\n\n        if (scheduler.isPainted) {\n            me.renderer();\n        }\n\n        resourceColumns.availableWidth = scheduler.timeAxisSubGridElement.offsetWidth;\n    }\n\n    //endregion\n\n    //region Elements <-> Records\n\n    resolveRowRecord(elementOrEvent, xy) {\n        const\n            me            = this,\n            { scheduler } = me,\n            event         = elementOrEvent.nodeType ? null : elementOrEvent,\n            element       = event ? event.target : elementOrEvent,\n            coords        = event ? [event.borderOffsetX, event.borderOffsetY] : xy,\n            // Fix for FF on Linux having text nodes as event.target\n            el            = element.nodeType === Element.TEXT_NODE ? element.parentElement : element,\n            eventElement  = el.closest(scheduler.eventSelector);\n\n        if (eventElement) {\n            return scheduler.resourceStore.getById(eventElement.dataset.resourceId);\n        }\n\n        // Need to be inside schedule at least\n        if (!element.closest('.b-sch-timeaxis-cell')) {\n            return null;\n        }\n\n        if (!coords) {\n            throw new Error(`Vertical mode needs coordinates to resolve this element. Can also be called with a browser\n                event instead of element to extract element and coordinates from`);\n        }\n\n        if (scheduler.variableColumnWidths || scheduler.resourceStore.isGrouped) {\n            let totalWidth = 0;\n\n            for (const col of me.resourceStore) {\n                if (!col.isSpecialRow) {\n                    totalWidth += col.columnWidth || me.resourceColumns.columnWidth;\n                }\n                if (totalWidth >= coords[0]) {\n                    return col;\n                }\n            }\n\n            return null;\n        }\n\n        const index = Math.floor(coords[0] / me.resourceColumns.columnWidth);\n\n        return me.allResourceRecords[index];\n    }\n\n    toggleCls(assignmentRecord, cls, add = true, useWrapper = false) {\n        const eventData = this.eventMap.get(assignmentRecord.eventId)?.[assignmentRecord.resourceId];\n\n        if (eventData) {\n            eventData.renderData[useWrapper ? 'wrapperCls' : 'cls'][cls] = add;\n            // Element from the map cannot be trusted, might be reused in which case map is not updated to reflect that.\n            // To be safe, retrieve using `getElementFromAssignmentRecord`\n            const element = this.client.getElementFromAssignmentRecord(assignmentRecord, useWrapper);\n\n            if (element) {\n                element.classList[add ? 'add' : 'remove'](cls);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Coordinate <-> Date\n\n    getDateFromXY(xy, roundingMethod, local, allowOutOfRange = false) {\n        let coord = xy[1];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        return this.scheduler.timeAxisViewModel.getDateFromPosition(coord, roundingMethod, allowOutOfRange);\n    }\n\n    translateToScheduleCoordinate(y) {\n        return y - this.scheduler.timeAxisSubGridElement.getBoundingClientRect().top - globalThis.scrollY;\n    }\n\n    translateToPageCoordinate(y) {\n        return y + this.scheduler.timeAxisSubGridElement.getBoundingClientRect().top + globalThis.scrollY;\n    }\n\n    //endregion\n\n    //region Regions\n\n    getResourceEventBox(event, resource) {\n        const\n            eventId    = event.id,\n            resourceId = resource.id;\n\n        let { renderData } = this.eventMap.get(eventId)?.[resourceId] || emptyObject;\n\n        if (!renderData) {\n            // Never been in view, lay it out\n            this.layoutResourceEvents(this.scheduler.resourceStore.getById(resourceId));\n\n            // Have another go at getting the layout data\n            renderData = this.eventMap.get(eventId)?.[resourceId]?.renderData;\n        }\n\n        return renderData\n            ? new Rectangle(renderData.left, renderData.top, renderData.width, renderData.bottom - renderData.top)\n            : null;\n    }\n\n    getScheduleRegion(resourceRecord, eventRecord, local) {\n        const\n            me            = this,\n            { scheduler } = me,\n            // Only interested in width / height (in \"local\" coordinates)\n            region        = Rectangle.from(scheduler.timeAxisSubGridElement, scheduler.timeAxisSubGridElement);\n\n        if (resourceRecord) {\n            // <remove-on-release>\n            // TODO: How to account for eventRecord here?\n            // </remove-on-release>\n            region.left  = me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth;\n            region.right = region.left + scheduler.resourceColumnWidth;\n        }\n\n        const\n            start           = scheduler.timeAxis.startDate,\n            end             = scheduler.timeAxis.endDate,\n            dateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord) || {\n                start,\n                end\n            },\n            startY          = scheduler.getCoordinateFromDate(DateHelper.max(start, dateConstraints.start)),\n            endY            = scheduler.getCoordinateFromDate(DateHelper.min(end, dateConstraints.end));\n\n        if (!local) {\n            region.top    = me.translateToPageCoordinate(startY);\n            region.bottom = me.translateToPageCoordinate(endY);\n        }\n        else {\n            region.top    = startY;\n            region.bottom = endY;\n        }\n\n        return region;\n    }\n\n    getRowRegion(resourceRecord, startDate, endDate) {\n        const\n            me            = this,\n            { scheduler } = me,\n            x             = me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth,\n            taStart       = scheduler.timeAxis.startDate,\n            taEnd         = scheduler.timeAxis.endDate,\n            start         = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end           = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startY        = scheduler.getCoordinateFromDate(start),\n            endY          = scheduler.getCoordinateFromDate(end, true, true),\n            y             = Math.min(startY, endY),\n            height        = Math.abs(startY - endY);\n\n        return new Rectangle(x, y, scheduler.resourceColumnWidth, height);\n    }\n\n    get visibleDateRange() {\n        const\n            scheduler = this.scheduler,\n            scrollPos = scheduler.scrollable.y,\n            height    = scheduler.scrollable.clientHeight,\n            startDate = scheduler.getDateFromCoordinate(scrollPos) || scheduler.timeAxis.startDate,\n            endDate   = scheduler.getDateFromCoordinate(scrollPos + height) || scheduler.timeAxis.endDate;\n\n        return {\n            startDate,\n            endDate,\n            startMS : startDate.getTime(),\n            endMS   : endDate.getTime()\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    // Column width changed, rerender fully\n    onResourceColumnWidthChange({ width, oldWidth }) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        // Fix width of column & header\n        me.resourceColumns.width = scheduler.timeAxisColumn.width = me.allResourceRecords.length * width;\n        me.clearAll();\n\n        // Only transition large changes, otherwise it is janky when dragging slider in demo\n        me.refresh(Math.abs(width - oldWidth) > 30);\n\n        // Not detected by resizeobserver? Need to call this for virtual scrolling to react to update\n        //        scheduler.callEachSubGrid('refreshFakeScroll');\n        //        scheduler.refreshVirtualScrollbars();\n    }\n\n    //endregion\n\n    //region Project\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        if (project) {\n            project.ion({\n                name    : 'project',\n                refresh : 'onProjectRefresh',\n                thisObj : this\n            });\n        }\n    }\n\n    onProjectRefresh() {\n        const\n            me                                    = this,\n            { scheduler, toDrawOnProjectRefresh } = me;\n\n        // Only update the UI immediately if we are visible\n        if (scheduler.isVisible) {\n            if (scheduler.rendered && !scheduler.refreshSuspended) {\n                // Either refresh all rows (on for example dataset)\n                if (me.refreshAllWhenReady) {\n                    me.clearAll();\n                    //scheduler.refreshWithTransition();\n                    me.refresh();\n                    me.refreshAllWhenReady = false;\n                }\n                // Or only affected rows (if any)\n                else if (toDrawOnProjectRefresh.size) {\n                    me.refresh();\n                }\n\n                toDrawOnProjectRefresh.clear();\n            }\n        }\n        // Otherwise wait till next time we get painted (shown, or a hidden ancestor shown)\n        else {\n            scheduler.whenVisible('refresh', scheduler, [true]);\n        }\n    }\n\n    //endregion\n\n    //region EventStore\n\n    attachToEventStore(eventStore) {\n        super.attachToEventStore(eventStore);\n\n        this.refreshAllWhenReady = true;\n\n        if (eventStore) {\n            eventStore.ion({\n                name             : 'eventStore',\n                addConfirmed     : 'onEventStoreAddConfirmed',\n                refreshPreCommit : 'onEventStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onEventStoreAddConfirmed({ record }) {\n        for (const element of this.client.getElementsFromEventRecord(record)) {\n            element.classList.remove('b-iscreating');\n        }\n    }\n\n    onEventStoreRefresh({ action }) {\n        if (action === 'batch') {\n            this.refreshAllWhenReady = true;\n        }\n    }\n\n    onEventStoreChange({ action, records : eventRecords = [], record, replaced, changes, isAssign }) {\n        const\n            me          = this,\n            resourceIds = new Set();\n\n        eventRecords.forEach(eventRecord => {\n            // Update all resource rows to which this event is assigned *if* the resourceStore\n            // contains that resource (We could have filtered the resourceStore)\n            const renderedEventResources = eventRecord.$linkedResources?.filter(r => me.resourceStore.includes(r));\n\n            renderedEventResources?.forEach(resourceRecord => resourceIds.add(resourceRecord.id));\n        });\n\n        switch (action) {\n            // No-ops\n            case 'sort':  // Order in EventStore does not matter, so these actions are no-ops\n            case 'group':\n            case 'move':\n            case 'remove': // Remove is a no-op since assignment will also be removed\n                return;\n\n            case 'dataset':\n                me.refreshAllResourcesWhenReady();\n                return;\n\n            case 'add':\n            case 'updateMultiple':\n                // Just refresh below\n                break;\n\n            case 'replace':\n                // Gather resources from both the old record and the new one\n                replaced.forEach(([, newEvent]) => {\n                    // Old cleared by changed assignment\n                    newEvent.resources.map(resourceRecord => resourceIds.add(resourceRecord.id));\n                });\n                // And clear them\n                me.clearResources(resourceIds);\n                break;\n\n            case 'removeall':\n            case 'filter':\n                // Clear all when filtering for simplicity. If that turns out to give bad performance, one would need to\n                // figure out which events was filtered out and only clear their resources.\n                me.clearAll();\n                me.refresh();\n                return;\n\n            case 'update': {\n                // Check if changes are graph related or not\n                const allChrono = record.$entity\n                    ? !Object.keys(changes).some(name => !record.$entity.getField(name))\n                    : !Object.keys(changes).some(name => !chronoFields[name]);\n\n                // If any one of these in changes, it will affect visuals\n                let changeCount = 0;\n                if ('startDate' in changes) changeCount++;\n                if ('endDate' in changes) changeCount++;\n                if ('duration' in changes) changeCount++;\n\n                // Always redraw non chrono changes (name etc)\n                if (!allChrono || changeCount || 'percentDone' in changes || 'inactive' in changes || 'segments' in changes) {\n                    if (me.shouldWaitForInitializeAndEngineReady) {\n                        me.refreshResourcesWhenReady(resourceIds);\n                    }\n                    else {\n                        me.clearResources(resourceIds);\n                        me.refresh();\n                    }\n                }\n                return;\n            }\n        }\n\n        me.refreshResourcesWhenReady(resourceIds);\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    attachToResourceStore(resourceStore) {\n        const me = this;\n\n        super.attachToResourceStore(resourceStore);\n\n        me.refreshAllWhenReady = true;\n\n        if (me.resourceColumns) {\n            me.resourceColumns.resourceStore = resourceStore;\n        }\n\n        resourceStore.ion({\n            name             : 'resourceStore',\n            changePreCommit  : 'onResourceStoreChange',\n            refreshPreCommit : 'onResourceStoreRefresh',\n            // In vertical, resource store is not the row store but should toggle the load mask\n            load             : () => me.scheduler.unmaskBody(),\n            thisObj          : me,\n            prio             : 1 // Call before others to clear cache before redraw\n        });\n\n        if (me.initialized && me.scheduler.isPainted) {\n            // Invalidate resource range and events\n            me.firstResource = me.lastResource = null;\n            me.clearAll();\n\n            me.renderer();\n        }\n    }\n\n    onResourceStoreChange({ source : resourceStore, action, records = [], record, replaced, changes }) {\n        const\n            me              = this,\n            // records for add, record for update, replaced [[old, new]] for replace\n            resourceRecords = replaced ? replaced.map(r => r[1]) : records,\n            resourceIds     = new Set(resourceRecords.map(resourceRecord => resourceRecord.id));\n\n        // Invalidate resource range\n        me.firstResource                  = me.lastResource = null;\n        resourceStore._allResourceRecords = null;\n\n        const { allResourceRecords } = resourceStore;\n\n        // Operation that did not invalidate engine, refresh directly\n        if (me.scheduler.isEngineReady) {\n            switch (action) {\n                case 'update':\n                    if (changes?.id) {\n                        me.clearResources([changes.id.oldValue, changes.id.value]);\n                    }\n                    else {\n                        me.clearResources([record.id]);\n                    }\n                    // Only the invalidation above needed\n                    break;\n\n                case 'filter':\n                    // All filtered out resources needs clearing and so does those not filtered out since they might have\n                    // moved horizontally when others hide\n                    me.clearAll();\n                    break;\n            }\n\n            // Changing a column width means columns after that will have to be recalculated\n            // so clear all cached layouts.\n            if (changes && ('columnWidth' in changes)) {\n                me.clearAll();\n            }\n            me.refresh(true);\n        }\n        // Operation that did invalidate project, update on project refresh\n        else {\n            switch (action) {\n                case 'dataset':\n                case 'remove': // Cannot tell from which index it was removed\n                case 'removeall':\n                    me.refreshAllResourcesWhenReady();\n                    return;\n\n                case 'replace':\n                case 'add': {\n                    if (!resourceStore.isGrouped) {\n                        // Make sure all existing events following added resources are offset correctly\n                        const\n                            firstIndex = resourceRecords.reduce(\n                                (index, record) => Math.min(index, allResourceRecords.indexOf(record)),\n                                allResourceRecords.length\n                            );\n\n                        for (let i = firstIndex; i < allResourceRecords.length; i++) {\n                            resourceIds.add(allResourceRecords[i].id);\n                        }\n                    }\n                }\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    onResourceStoreRefresh({ action }) {\n        const me = this;\n\n        if (action === 'sort' || action === 'group') {\n            // Invalidate resource range & cache\n            me.firstResource = me.lastResource = me.resourceStore._allResourceRecords = null;\n            me.clearAll();\n            me.refresh();\n        }\n    }\n\n    //endregion\n\n    //region AssignmentStore\n\n    attachToAssignmentStore(assignmentStore) {\n        super.attachToAssignmentStore(assignmentStore);\n\n        this.refreshAllWhenReady = true;\n\n        if (assignmentStore) {\n            assignmentStore.ion({\n                name             : 'assignmentStore',\n                changePreCommit  : 'onAssignmentStoreChange',\n                refreshPreCommit : 'onAssignmentStoreRefresh',\n                thisObj          : this\n            });\n        }\n    }\n\n    onAssignmentStoreChange({ action, records : assignmentRecords = [], replaced, changes }) {\n        const\n            me          = this,\n            resourceIds = new Set(assignmentRecords.map(assignmentRecord => assignmentRecord.resourceId));\n\n        // Operation that did not invalidate engine, refresh directly\n        if (me.scheduler.isEngineReady) {\n            switch (action) {\n                case 'remove':\n                    me.clearResources(resourceIds);\n                    break;\n\n                case 'filter':\n                    me.clearAll();\n                    break;\n\n                case 'update': {\n                    // When reassigning, clear old resource also\n                    if ('resourceId' in changes) {\n                        resourceIds.add(changes.resourceId.oldValue);\n                    }\n\n                    // Ignore engine resolving resourceId -> resource, eventId -> event\n                    if (!Object.keys(changes).filter(field => field !== 'resource' && field !== 'event').length) {\n                        return;\n                    }\n\n                    me.clearResources(resourceIds);\n                }\n            }\n\n            me.refresh(true);\n        }\n        // Operation that did invalidate project, update on project refresh\n        else {\n            if (changes && 'resourceId' in changes) {\n                resourceIds.add(changes.resourceId.oldValue);\n            }\n\n            switch (action) {\n                case 'removeall':\n                    me.refreshAllResourcesWhenReady();\n                    return;\n\n                case 'replace':\n                    // Gather resources from both the old record and the new one\n                    replaced.forEach(([oldAssignment, newAssignment]) => {\n                        resourceIds.add(oldAssignment.resourceId);\n                        resourceIds.add(newAssignment.resourceId);\n                    });\n            }\n\n            me.refreshResourcesWhenReady(resourceIds);\n        }\n    }\n\n    onAssignmentStoreRefresh({ action, records }) {\n        if (action === 'batch') {\n            this.clearAll();\n            this.refreshAllResourcesWhenReady();\n        }\n    }\n\n    //endregion\n\n    //region View hooks\n\n    refreshRows(reLayoutEvents) {\n        if (reLayoutEvents) {\n            this.clearAll();\n            this.scheduler.refreshFromRerender = false;\n        }\n    }\n\n    // Called from SchedulerEventRendering\n    repaintEventsForResource(resourceRecord) {\n        this.renderResource(resourceRecord);\n    }\n\n    updateFromHorizontalScroll(scrollX) {\n        if (scrollX !== this.prevScrollX) {\n            this.renderer();\n            this.prevScrollX = scrollX;\n        }\n    }\n\n    updateFromVerticalScroll() {\n        this.renderer();\n    }\n\n    scrollResourceIntoView(resourceRecord, options) {\n        const\n            { scheduler } = this,\n            x             = this.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth;\n\n        return scheduler.scrollHorizontallyTo(x, options);\n    }\n\n    get allResourceRecords() {\n        return this.scheduler.resourceStore.allResourceRecords;\n    }\n\n    // Called when viewport size changes\n    onViewportResize(width) {\n        this.resourceColumns.availableWidth = width;\n        this.renderer();\n    }\n\n    get resourceColumns() {\n        return this.scheduler.timeAxisColumn?.resourceColumns;\n    }\n\n    // Clear events in case they use date as part of displayed info\n    onLocaleChange() {\n        this.clearAll();\n    }\n\n    // No need to do anything special\n    onDragAbort() {}\n\n    onBeforeRowHeightChange() {}\n\n    onTimeAxisViewModelUpdate() {}\n\n    updateElementId() {}\n\n    releaseTimeSpanDiv() {}\n\n    //endregion\n\n    //region Dependency connectors\n\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'top'|'left'|'bottom'|'right'} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(eventRecord) {\n        return 'top';\n    }\n\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @returns {'top'|'left'|'bottom'|'right'} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(eventRecord) {\n        return 'bottom';\n    }\n\n    //endregion\n\n    //region Refresh resources\n\n    /**\n     * Clears resources directly and redraws them on next project refresh\n     * @param {Number[]|String[]} resourceIds\n     * @private\n     */\n    refreshResourcesWhenReady(resourceIds) {\n        this.clearResources(resourceIds);\n        resourceIds.forEach(id => this.toDrawOnProjectRefresh.add(id));\n    }\n\n    /**\n     * Clears all resources directly and redraws them on next project refresh\n     * @private\n     */\n    refreshAllResourcesWhenReady() {\n        this.clearAll();\n        this.refreshAllWhenReady = true;\n    }\n\n    //region Rendering\n\n    // Resources in view + buffer\n    get resourceRange() {\n        return this.getResourceRange(true);\n    }\n\n    // Resources strictly in view\n    get visibleResources() {\n        const { first, last } = this.getResourceRange();\n\n        return {\n            first : this.allResourceRecords[first],\n            last  : this.allResourceRecords[last]\n        };\n    }\n\n    getResourceRange(withBuffer) {\n        const\n            {\n                scheduler,\n                resourceStore\n            }                  = this,\n            {\n                resourceColumnWidth,\n                scrollX\n            }                  = scheduler,\n            {\n                scrollWidth\n            }                  = scheduler.timeAxisSubGrid.scrollable,\n            resourceBufferSize = withBuffer ? this.resourceBufferSize : 0,\n            viewportStart      = scrollX - resourceBufferSize,\n            viewportEnd        = scrollX + scrollWidth + resourceBufferSize;\n        if (!resourceStore?.count) {\n            return { first : -1, last : -1 };\n        }\n\n        // Some resources define their own width\n        if (scheduler.variableColumnWidths) {\n            let first, last = 0, start, end = 0;\n            this.allResourceRecords.forEach((resource, i) => {\n                resource.instanceMeta(scheduler).insetStart = start = end;\n                end                                         = start + resource.columnWidth;\n\n                if (start > viewportEnd) {\n                    return false;\n                }\n                if (end > viewportStart && first == null) {\n                    first = i;\n                }\n                else if (start < viewportEnd) {\n                    last = i;\n                }\n            });\n            return { first, last };\n        }\n        // We are using fixed column widths\n        else {\n            return {\n                first : Math.max(Math.floor(scrollX / resourceColumnWidth) - resourceBufferSize, 0),\n                last  : Math.min(\n                    Math.floor((scrollX + scheduler.timeAxisSubGrid.width) / resourceColumnWidth) + resourceBufferSize,\n                    this.allResourceRecords.length - 1\n                )\n            };\n        }\n    }\n\n    // Dates in view + buffer\n    get dateRange() {\n        const\n            { scheduler } = this;\n\n        let bottomDate = scheduler.getDateFromCoordinate(Math.min(\n            scheduler.scrollTop + scheduler.bodyHeight + scheduler.tickSize - 1,\n            (scheduler.virtualScrollHeight || scheduler.scrollable.scrollHeight) - 1)\n        );\n\n        // Might end up below time axis (out of ticks)\n        // <remove-on-release>\n        // TODO: Change call order on refresh to make sure this is not needed?\n        // </remove-on-release>\n        if (!bottomDate) {\n            bottomDate = scheduler.timeAxis.last.endDate;\n        }\n\n        let topDate = scheduler.getDateFromCoordinate(Math.max(scheduler.scrollTop - scheduler.tickSize, 0));\n\n        // Might end up above time axis when reconfiguring (since this happens as part of rendering)\n        if (!topDate) {\n            topDate    = scheduler.timeAxis.first.startDate;\n            bottomDate = scheduler.getDateFromCoordinate(scheduler.bodyHeight + scheduler.tickSize - 1);\n        }\n\n        return {\n            topDate,\n            bottomDate\n        };\n    }\n\n    getTimeSpanRenderData(eventRecord, resourceRecord, includeOutside = false) {\n        const\n            me             = this,\n            {\n                scheduler\n            }              = me,\n            {\n                preamble,\n                postamble\n            }              = eventRecord,\n            {\n                variableColumnWidths\n            }              = scheduler,\n            useEventBuffer = scheduler.features.eventBuffer?.enabled && me.isProVerticalRendering &&\n                (preamble || postamble) && !eventRecord.isMilestone,\n            startDateField = useEventBuffer ? 'wrapStartDate' : 'startDate',\n            endDateField   = useEventBuffer ? 'wrapEndDate' : 'endDate',\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // EventResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            startDate      = eventRecord.isBatchUpdating && eventRecord.hasBatchedChange(startDateField) && !useEventBuffer\n                ? eventRecord.get(startDateField) : eventRecord[startDateField],\n            endDate        = eventRecord.isBatchUpdating && eventRecord.hasBatchedChange(endDateField) && !useEventBuffer\n                ? eventRecord.get(endDateField) : eventRecord[endDateField],\n            resourceMargin = scheduler.getResourceMargin(resourceRecord),\n            top            = scheduler.getCoordinateFromDate(startDate),\n            instanceMeta   = resourceRecord.instanceMeta(scheduler),\n            // Preliminary values for left & width, used for proxy. Will be changed on layout.\n            // The property \"left\" is utilized based on Scheduler's rtl setting.\n            // If RTL, then it's used as the \"right\" style position.\n            left           = variableColumnWidths ? instanceMeta.insetStart : me.allResourceRecords.indexOf(resourceRecord) * scheduler.resourceColumnWidth,\n            resourceWidth  = scheduler.getResourceWidth(resourceRecord),\n            width          = resourceWidth - resourceMargin * 2,\n            startDateMS    = startDate.getTime(),\n            endDateMS      = endDate.getTime();\n\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round((endDateMS - startDateMS) * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n\n        return {\n            eventRecord,\n            resourceRecord,\n            left,\n            top,\n            bottom,\n            resourceWidth,\n            width,\n            height,\n            startDate,\n            endDate,\n            startDateMS,\n            endDateMS,\n            useEventBuffer,\n\n            children : [],\n\n            // <remove-on-release>\n            // TODO: should change there to match horizontal\n            // </remove-on-release>\n            start   : startDate,\n            end     : endDate,\n            startMS : startDateMS,\n            endMS   : endDateMS\n        };\n    }\n\n    // Earlier start dates are above later tasks\n    // If same start date, longer tasks float to top\n    // If same start + duration, sort by name\n    eventSorter(a, b) {\n        const\n            startA = a.dataStartMs || a.startDateMS, // dataXX are used if configured with fillTicks\n            endA   = a.dataEndMs || a.endDateMS,\n            startB = b.dataStartMs || b.startDateMS,\n            endB   = b.dataEndMs || b.endDateMS,\n            nameA  = a.isModel ? a.name : a.eventRecord.name,\n            nameB  = b.isModel ? b.name : b.eventRecord.name;\n\n        return startA - startB || endB - endA || (nameA < nameB ? -1 : nameA == nameB ? 0 : 1);\n    }\n\n    layoutEvents(resourceRecord, allEvents, includeOutside = false, parentEventRecord, eventSorter) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            {\n                variableColumnWidths\n            }                   = scheduler,\n            { id : resourceId } = resourceRecord,\n            instanceMeta        = resourceRecord.instanceMeta(scheduler),\n            cacheKey            = parentEventRecord ? `${resourceId}-${parentEventRecord.id}` : resourceId,\n            // Cache per resource\n            cache               = me.resourceMap.set(cacheKey, {}).get(cacheKey),\n            // Resource \"column\"\n            resourceIndex       = me.allResourceRecords.indexOf(resourceRecord),\n            {\n                barMargin,\n                resourceMargin\n            }                   = scheduler.getResourceLayoutSettings(resourceRecord, parentEventRecord);\n\n        const layoutData = allEvents.reduce((toLayout, eventRecord) => {\n            if (eventRecord.isScheduled) {\n                const\n                    renderData     = scheduler.generateRenderData(eventRecord, resourceRecord, false),\n                    // Elements will be appended to eventData during syncing\n                    eventData      = { renderData },\n                    eventResources = ObjectHelper.getMapPath(me.eventMap, renderData.eventId, {});\n\n                // Cache per event, { e1 : { r1 : { xxx }, r2 : ... }, e2 : ... }\n                // Uses renderData.eventId in favor of eventRecord.id to work with ResourceTimeRanges\n                eventResources[resourceId] = eventData;\n\n                // Cache per resource\n                cache[renderData.eventId] = eventData;\n\n                // Position ResourceTimeRanges directly, they do not affect the layout of others\n                if (renderData.fillSize) {\n                    // The property \"left\" is utilized based on Scheduler's rtl setting.\n                    // If RTL, then it's used as the \"right\" style position.\n                    renderData.left = variableColumnWidths ? instanceMeta.insetStart : resourceIndex * scheduler.resourceColumnWidth;\n\n                    renderData.width = scheduler.getResourceWidth(resourceRecord);\n                }\n                // Anything not flagged with `fillSize` should take part in layout\n                else {\n                    toLayout.push(renderData);\n                }\n            }\n\n            return toLayout;\n        }, []);\n\n        // Ensure the events are rendered in natural order so that navigation works.\n        layoutData.sort(eventSorter ?? me.eventSorter);\n\n        // Apply per resource event layout (pack, overlap or mixed)\n        me.verticalLayout.applyLayout(\n            layoutData,\n            scheduler.getResourceWidth(resourceRecord, parentEventRecord),\n            resourceMargin,\n            barMargin,\n            resourceIndex,\n            scheduler.getEventLayout(resourceRecord, parentEventRecord)\n        );\n\n        return cache;\n    }\n\n    // Calculate the layout for all events assigned to a resource. Since we are never stacking, the layout of one\n    // resource will never affect the others\n    layoutResourceEvents(resourceRecord) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            // Used in loop, reduce access time a wee bit\n            {\n                assignmentStore,\n                eventStore,\n                timeAxis\n            }                   = scheduler;\n\n        // Events for the resource, minus those that are filtered out by filtering assignments and events\n        let events = eventStore.getEvents({\n            includeOccurrences : scheduler.enableRecurringEvents,\n            resourceRecord,\n            startDate          : timeAxis.startDate,\n            endDate            : timeAxis.endDate,\n            filter             : (assignmentStore.isFiltered || eventStore.isFiltered) && (eventRecord =>\n                eventRecord.assignments.some(a => a.resource === resourceRecord && assignmentStore.includes(a)))\n        });\n\n        // Hook for features to inject additional timespans to render\n        events = scheduler.getEventsToRender(resourceRecord, events);\n\n        return me.layoutEvents(resourceRecord, events);\n    }\n\n    /**\n     * Used by event drag features to bring into existence event elements that are outside of the rendered block.\n     * @param {Scheduler.model.TimeSpan} eventRecord The event to render\n     * @private\n     */\n    addTemporaryDragElement(eventRecord) {\n        const\n            { scheduler } = this,\n            renderData    = scheduler.generateRenderData(\n                eventRecord,\n                eventRecord.resource,\n                { timeAxis : true, viewport : true }\n            );\n\n        renderData.top = renderData.row\n            ? (renderData.top + renderData.row.top)\n            : scheduler.getResourceEventBox(eventRecord, eventRecord.resource, true).top;\n\n        const\n            domConfig   = this.renderEvent({ renderData }),\n            { dataset } = domConfig;\n\n        delete domConfig.tabIndex;\n        delete dataset.eventId;\n        delete dataset.resourceId;\n        delete dataset.assignmentId;\n        delete dataset.syncId;\n        dataset.transient = true;\n        domConfig.parent  = this.scheduler.foregroundCanvas;\n\n        // So that the regular DomSyncing which may happen during scroll does not\n        // sweep up and reuse the temporary element.\n        domConfig.retainElement = true;\n\n        const result = DomHelper.createElement(domConfig);\n\n        result.innerElement = result.firstChild;\n\n        eventRecord.instanceMeta(scheduler).hasTemporaryDragElement = true;\n\n        return result;\n    }\n\n    // <remove-on-release>\n    // TODO: Pretty much identical to HorizontalRendering#renderEvent.\n    //  Make shared base class Render a single event, aborting if already in DOM.\n    // </remove-on-release>\n    // To update an event, first release its element and then render it again.\n    // The element will be reused and updated. Keeps code simpler\n    renderEvent(eventData) {\n        // No point in rendering event that already has an element\n        const\n            { scheduler } = this,\n            data          = eventData.renderData,\n            {\n                resourceRecord,\n                assignmentRecord,\n                eventRecord\n            }             = data,\n            // Event element config, applied to existing element or used to create a new one below\n            elementConfig = {\n                className : data.wrapperCls,\n                tabIndex  : -1,\n                children  : [\n                    {\n                        role      : 'presentation',\n                        className : data.cls,\n                        style     : (data.internalStyle || '') + (data.style || ''),\n                        children  : data.children,\n                        dataset   : {\n                            // Each feature putting contents in the event wrap should have this to simplify syncing and\n                            // element retrieval after sync\n                            taskFeature : 'event'\n                        },\n                        syncOptions : {\n                            syncIdField : 'taskBarFeature'\n                        }\n                    },\n                    ...data.wrapperChildren\n                ],\n                style : {\n                    top                                : data.top,\n                    [scheduler.rtl ? 'right' : 'left'] : data.left,\n                    // DomHelper appends px to dimensions when using numbers\n                    height                             : eventRecord.isMilestone ? '1em' : data.height,\n                    width                              : data.width,\n                    style                              : data.wrapperStyle || '',\n                    fontSize                           : eventRecord.isMilestone ? Math.min(data.width, 40) : null\n                },\n                dataset : {\n                    // assignmentId is set in this function conditionally\n                    resourceId : resourceRecord.id,\n                    eventId    : data.eventId, // Not using eventRecord.id to distinguish between Event and ResourceTimeRange\n                    // Sync using assignment id for events and event id for ResourceTimeRanges\n                    syncId     : assignmentRecord ? this.assignmentStore.getOccurrence(assignmentRecord, eventRecord).id : data.eventId\n\n                },\n                // Will not be part of DOM, but attached to the element\n                elementData   : eventData,\n                // Dragging etc. flags element as retained, to not reuse/release it during that operation. Events\n                // always use assignments, but ResourceTimeRanges does not\n                retainElement : (assignmentRecord || eventRecord).instanceMeta(this.scheduler).retainElement,\n                // Options for this level of sync, lower levels can have their own\n                syncOptions   : {\n                    syncIdField      : 'taskFeature',\n                    // Remove instead of release when a feature is disabled\n                    releaseThreshold : 0\n                }\n            };\n\n        elementConfig.className['b-sch-vertical'] = 1;\n\n        // Some browsers throw warnings on zIndex = ''\n        if (data.zIndex) {\n            elementConfig.zIndex = data.zIndex;\n        }\n\n        // Do not want to spam dataset with empty prop when not using assignments (ResourceTimeRanges)\n        if (assignmentRecord) {\n            elementConfig.dataset.assignmentId = assignmentRecord.id;\n        }\n\n        // Allows access to the used config later, for example to retrieve element\n        data.elementConfig = eventData.elementConfig = elementConfig;\n\n        scheduler.afterRenderEvent({ renderData : data, domConfig : elementConfig });\n\n        return elementConfig;\n    }\n\n    renderResource(resourceRecord) {\n        const\n            me                          = this,\n            // Date at top and bottom for determining which events to include\n            { topDateMS, bottomDateMS } = me,\n            // Will hold element configs\n            eventDOMConfigs             = [];\n\n        let resourceEntry = me.resourceMap.get(resourceRecord.id);\n\n        // Layout all events for the resource unless already done\n        if (!resourceEntry) {\n            resourceEntry = me.layoutResourceEvents(resourceRecord);\n        }\n\n        // Iterate over all events for the resource\n        for (const eventId in resourceEntry) {\n            const\n                eventData                               = resourceEntry[eventId],\n                { endDateMS, startDateMS, eventRecord } = eventData.renderData;\n\n            if (\n                // Only collect configs for those actually in view\n                endDateMS >= topDateMS && startDateMS <= bottomDateMS &&\n                // And not being dragged, those have a temporary element already\n                !eventRecord.instanceMeta(me.scheduler).hasTemporaryDragElement\n            ) {\n                // Reuse DomConfig if available, otherwise render event to create one\n                const domConfig = eventData.elementConfig?.className !== 'b-released' && eventData.elementConfig || me.renderEvent(eventData);\n                eventDOMConfigs.push(domConfig);\n            }\n        }\n\n        return eventDOMConfigs;\n    }\n\n    isEventElement(domConfig) {\n        const className = domConfig && domConfig.className;\n\n        return className && className[this.scheduler.eventCls + '-wrap'];\n    }\n\n    get shouldWaitForInitializeAndEngineReady() {\n        return !this.initialized || (!this.scheduler.isEngineReady && !this.scheduler.isCreating);\n    }\n\n    // Single cell so only one call to this renderer, determine which events are in view and draw them.\n    // Drawing on scroll is triggered by `updateFromVerticalScroll()` and `updateFromHorizontalScroll()`\n    renderer() {\n        const\n            me                                           = this,\n            { scheduler }                                = me,\n            // Determine resource range to draw events for\n            { first : firstResource, last : lastResource } = me.resourceRange,\n            // Date at top and bottom for determining which events to include\n            { topDate, bottomDate }                        = me.dateRange,\n            syncConfigs                                    = [],\n            featureDomConfigs                              = [];\n\n        // If scheduler is creating a new event, the render needs to be synchronous, so\n        // we cannot wait for the engine to normalize - the new event will have correct data set.\n        if (me.shouldWaitForInitializeAndEngineReady) {\n            return;\n        }\n\n        //<debug>\n        if (globalThis.DEBUG) {\n            if (me.firstResource !== firstResource || me.lastResource !== lastResource) {\n                console.log(`Resources in view ${me.allResourceRecords[firstResource].id} -> ${me.allResourceRecords[lastResource].id}`);\n            }\n        }\n        //</debug>\n\n        // Update current time range, reflecting the change on the vertical time axis header\n        if (!DateHelper.isEqual(topDate, me.topDate) || !DateHelper.isEqual(bottomDate, me.bottomDate)) {\n            // Calculated values used by `renderResource()`\n            me.topDate      = topDate;\n            me.bottomDate   = bottomDate;\n            me.topDateMS    = topDate.getTime();\n            me.bottomDateMS = bottomDate.getTime();\n\n            const range = me.timeView.range = { startDate : topDate, endDate : bottomDate };\n\n            scheduler.onVisibleDateRangeChange(range);\n        }\n\n        if (firstResource !== -1 && lastResource !== -1) {\n            // Collect all events for resources in view\n            for (let i = firstResource; i <= lastResource; i++) {\n                syncConfigs.push.apply(syncConfigs, me.renderResource(me.allResourceRecords[i]));\n            }\n        }\n\n        scheduler.getForegroundDomConfigs(featureDomConfigs);\n\n        syncConfigs.push.apply(syncConfigs, featureDomConfigs);\n\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : syncConfigs\n            },\n            targetElement : scheduler.foregroundCanvas,\n            syncIdField   : 'syncId',\n\n            // Called by DomHelper when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement, jsx }) {\n                const { reactComponent } = scheduler;\n                // If element is an event wrap, trigger appropriate events\n                if (me.isEventElement(domConfig) || jsx || domConfig?.elementData?.jsx) {\n                    const\n                        // Some actions are considered first a release and then a render (reusing another element).\n                        // This gives clients code a chance to clean up before reusing an element\n                        isRelease = releaseEventActions[action],\n                        isRender  = renderEventActions[action];\n\n                    if (scheduler.processEventContent?.({\n                        action,\n                        domConfig,\n                        isRelease : false,\n                        targetElement,\n                        reactComponent,\n                        jsx\n\n                    })) return;\n\n                    // If we are reusing an element that was previously released we should not trigger again\n                    if (isRelease && me.isEventElement(lastDomConfig) && !lastDomConfig.isReleased) {\n                        const\n                            data  = lastDomConfig.elementData.renderData,\n                            event = {\n                                renderData       : data,\n                                assignmentRecord : data.assignmentRecord,\n                                eventRecord      : data.eventRecord,\n                                resourceRecord   : data.resourceRecord,\n                                element          : targetElement\n                            };\n\n                        // Release any portal in React event content\n                        scheduler.processEventContent?.({\n                            isRelease,\n                            targetElement,\n                            reactComponent,\n                            assignmentRecord : data.assignmentRecord\n                        });\n\n                        // Some browsers do not blur on set to display:none, so releasing the active element\n                        // must *explicitly* move focus outwards to the view.\n                        if (targetElement === DomHelper.getActiveElement(targetElement)) {\n                            scheduler.focusElement.focus();\n                        }\n\n                        // This event is documented on Scheduler\n                        scheduler.trigger('releaseEvent', event);\n                    }\n\n                    if (isRender) {\n                        const\n                            data  = domConfig.elementData.renderData,\n                            event = {\n                                renderData       : data,\n                                assignmentRecord : data.assignmentRecord,\n                                eventRecord      : data.eventRecord,\n                                resourceRecord   : data.resourceRecord,\n                                element          : targetElement,\n                                isReusingElement : action === 'reuseElement',\n                                isRepaint        : action === 'reuseOwnElement'\n                            };\n\n                        event.reusingElement = action === 'reuseElement';\n\n                        // This event is documented on Scheduler\n                        scheduler.trigger('renderEvent', event);\n                    }\n                }\n            }\n        });\n\n        // Change in displayed resources?\n        if (me.firstResource !== firstResource || me.lastResource !== lastResource) {\n            // Update header to match\n            const range = me.resourceColumns.visibleResources = { firstResource, lastResource };\n\n            // Store which resources are currently in view\n            me.firstResource = firstResource;\n            me.lastResource  = lastResource;\n\n            scheduler.onVisibleResourceRangeChange(range);\n            scheduler.trigger('resourceRangeChange', range);\n        }\n    }\n\n    refresh(transition) {\n        this.scheduler.runWithTransition(() => this.renderer(), transition);\n    }\n\n    // To match horizontals API, used from EventDrag\n    refreshResources(resourceIds) {\n        this.clearResources(resourceIds);\n        this.refresh();\n    }\n\n    // To match horizontals API, used from EventDrag\n    refreshEventsForResource(recordOrRow, force = true, draw = true) {\n        this.refreshResources([recordOrRow.id]);\n    }\n\n    onRenderDone() {\n\n    }\n\n    //endregion\n\n    //region Other\n\n    get timeView() {\n        return this.scheduler.timeView;\n    }\n\n    //endregion\n\n    //region Cache\n\n    // Clears cached resource layout\n    clearResources(resourceIds) {\n        const { resourceMap, eventMap } = this;\n\n        //<debug>\n        if (globalThis.DEBUG) console.log('%Clearing resources ' + Array.from(resourceIds).join(','), 'color: #770000');\n        //</debug>\n\n        resourceIds.forEach(resourceId => {\n            if (resourceMap.has(resourceId)) {\n                // The *keys* of an Object are strings, so we must iterate the values\n                // and use the original eventId to look up in the Map which preserves key type.\n                Object.values(resourceMap.get(resourceId)).forEach(({ renderData : { eventId } }) => {\n                    delete eventMap.get(eventId)[resourceId];\n                });\n\n                resourceMap.delete(resourceId);\n            }\n        });\n    }\n\n    clearAll() {\n        //<debug>\n        if (globalThis.DEBUG) console.log('%Clearing all', 'color: #770000');\n        //</debug>\n\n        this.resourceMap.clear();\n        this.eventMap.clear();\n    }\n\n    //endregion\n}\n", "import Widget from '../../Core/widget/Widget.js';\nimport DomSync from '../../Core/helper/DomSync.js';\n\n/**\n * @module Scheduler/view/TimeAxisBase\n */\n\nfunction isLastLevel(level, levels) {\n    return level === levels.length - 1;\n}\n\nfunction isLastCell(level, cell) {\n    return cell === level.cells[level.cells.length - 1];\n}\n\n/**\n * Base class for HorizontalTimeAxis and VerticalTimeAxis. Contains shared functionality to only render ticks in view,\n * should not be used directly.\n *\n * @extends Core/widget/Widget\n * @private\n * @abstract\n */\nexport default class TimeAxisBase extends Widget {\n\n    static $name = 'TimeAxisBase';\n\n    //region Config\n\n    static configurable = {\n        /**\n         * The minimum width for a bottom row header cell to be considered 'compact', which adds a special CSS class\n         * to the row (for special styling). Copied from Scheduler/Gantt.\n         * @config {Number}\n         * @default\n         */\n        compactCellWidthThreshold : 15,\n\n        // TimeAxisViewModel\n        model : null,\n\n        cls : null,\n\n        /**\n         * Style property to use as cell size. Either width or height depending on orientation\n         * @config {'width'|'height'}\n         * @private\n         */\n        sizeProperty : null,\n\n        /**\n         * Style property to use as cells position. Either left or top depending on orientation\n         * @config {'left'|'top'}\n         * @private\n         */\n        positionProperty : null\n    };\n\n    startDate = null;\n    endDate   = null;\n    levels    = [];\n    size      = null;\n\n    // Set visible date range\n    set range({ startDate, endDate }) {\n        const me = this;\n\n        // Only process a change\n        if (me.startDate - startDate || me.endDate - endDate) {\n            const { client } = me;\n            me.startDate = startDate;\n            me.endDate = endDate;\n\n            // Avoid refreshing if time axis view is not visible\n            if ((me.sizeProperty === 'width' && client?.hideHeaders) ||\n                (me.sizeProperty === 'height' && client?.verticalTimeAxisColumn?.hidden)) {\n\n                return;\n            }\n            me.refresh();\n        }\n    }\n\n    //endregion\n\n    //region Html & rendering\n\n    // Generates element configs for all levels defined by the current ViewPreset\n    buildCells(start = this.startDate, end = this.endDate) {\n        const\n            me                   = this,\n            { sizeProperty }     = me,\n            {\n                stickyHeaders,\n                isVertical\n            }                    = me.client || {},\n            featureHeaderConfigs = [],\n            { length }           = me.levels;\n\n        const cellConfigs = me.levels.map((level, i) => {\n            const stickyHeader = stickyHeaders && (isVertical || i < length - 1);\n\n            return {\n                className : {\n                    'b-sch-header-row'                     : 1,\n                    [`b-sch-header-row-${level.position}`] : 1,\n                    'b-sch-header-row-main'                : i === me.model.viewPreset.mainHeaderLevel,\n                    'b-lowest'                             : isLastLevel(i, me.levels),\n                    'b-sticky-header'                      : stickyHeader\n                },\n                syncOptions : {\n                    // Keep a maximum of 5 released cells. Might be fine with fewer since ticks are fixed width.\n                    // Prevents an unnecessary amount of cells from sticking around when switching from narrow to\n                    // wide tickSizes\n                    releaseThreshold : 5,\n                    syncIdField      : 'tickIndex'\n                },\n                dataset : {\n                    headerFeature  : `headerRow${i}`,\n                    headerPosition : level.position\n                },\n                // Only include cells in view\n                children : level.cells?.filter(cell => cell.start < end && cell.end > start).map((cell, j) => ({\n                    role      : 'presentation',\n                    className : {\n                        'b-sch-header-timeaxis-cell' : 1,\n                        [cell.headerCellCls]         : cell.headerCellCls,\n                        [`b-align-${cell.align}`]    : cell.align,\n                        'b-last'                     : isLastCell(level, cell)\n                    },\n                    dataset : {\n                        tickIndex : cell.index,\n                        // Used in export tests to resolve dates from tick elements\n                        ...globalThis.DEBUG && { date : cell.start.getTime() }\n                    },\n                    style : {\n                        // DomHelper appends px to numeric dimensions\n                        [me.positionProperty]   : cell.coord,\n                        [sizeProperty]          : cell.width,\n                        [`min-${sizeProperty}`] : cell.width\n                    },\n                    children : [\n                        {\n                            tag       : 'span',\n                            role      : 'presentation',\n                            className : {\n                                'b-sch-header-text' : 1,\n                                'b-sticky-header'   : stickyHeader\n                            },\n                            html : cell.value\n                        }\n                    ]\n                }))\n            };\n        });\n\n        // When tested in isolation there is no client\n        me.client?.getHeaderDomConfigs(featureHeaderConfigs);\n\n        cellConfigs.push(...featureHeaderConfigs);\n\n        // noinspection JSSuspiciousNameCombination\n        return {\n            className   : me.widgetClassList,\n            syncOptions : {\n                // Do not keep entire levels no longer used, for example after switching view preset\n                releaseThreshold : 0\n            },\n            children : cellConfigs\n        };\n    }\n\n    render(targetElement) {\n        super.render(targetElement);\n\n        this.refresh(true);\n    }\n\n    /**\n     * Refresh the UI\n     * @param {Boolean} [rebuild] Specify `true` to force a rebuild of the underlying header level definitions\n     */\n    refresh(rebuild = !this.levels.length) {\n        const\n            me               = this,\n            { columnConfig } = me.model,\n            { levels }       = me,\n            oldLevelsCount   = levels.length;\n\n        if (rebuild) {\n            levels.length = 0;\n\n            columnConfig.forEach((cells, position) => levels[position] = {\n                position,\n                cells\n            });\n\n            me.size = levels[0].cells.reduce((sum, cell) => sum + cell.width, 0);\n\n            const { parentElement } = me.element;\n\n            // Don't mutate a classList unless necessary. Browsers invalidate the style.\n            if (parentElement && (levels.length !== oldLevelsCount || rebuild)) {\n                parentElement.classList.remove(`b-sch-timeaxiscolumn-levels-${oldLevelsCount}`);\n                parentElement.classList.add(`b-sch-timeaxiscolumn-levels-${levels.length}`);\n            }\n        }\n\n        if (!me.startDate || !me.endDate) {\n            return;\n        }\n\n        // Boil down levels to only show what is in view\n        DomSync.sync({\n            domConfig     : me.buildCells(),\n            targetElement : me.element,\n            syncIdField   : 'headerFeature'\n        });\n\n        me.trigger('refresh');\n    }\n\n    //endregion\n\n    // Our widget class doesn't include \"base\".\n    get widgetClass() {\n        return 'b-timeaxis';\n    }\n}\n", "import TimeAxisBase from './TimeAxisBase.js';\n\n/**\n * @module Scheduler/view/HorizontalTimeAxis\n */\n\n/**\n * A visual horizontal representation of the time axis described in the\n * {@link Scheduler.preset.ViewPreset#field-headers} field.\n * Normally you should not interact with this class directly.\n *\n * @extends Scheduler/view/TimeAxisBase\n * @private\n */\nexport default class HorizontalTimeAxis extends TimeAxisBase {\n\n    //region Config\n\n    static $name = 'HorizontalTimeAxis';\n\n    static type = 'horizontaltimeaxis';\n\n    static configurable = {\n        model        : null,\n        sizeProperty : 'width'\n    };\n\n    //endregion\n\n    get positionProperty() {\n        return this.owner?.rtl ? 'right' : 'left';\n    }\n\n    get width() {\n        return this.size;\n    }\n\n    onModelUpdate() {\n        // Force rebuild when availableSpace has changed, to recalculate width and maybe apply compact styling\n        // <remove-on-release>\n        // TODO: this.width is the scrollWidth and this.model.availableSpace is the clientWidth\n        //  These are always going to be different (unless forceFit is set on the Gantt), so theres\n        //  no optimization. Likely this should always refresh(true) anyway since we do not know *what*\n        //  changed in the model update.\n        //  Time axis sub grid could also be collapsed (availableSpace === 0)\n        // </remove-on-release>\n\n        if (!this.owner?.hideHeaders && this.model.availableSpace > 0 && this.model.availableSpace !== this.width) {\n            this.refresh(true);\n        }\n    }\n\n    updateModel(timeAxisViewModel) {\n        this.detachListeners('tavm');\n\n        timeAxisViewModel?.ion({\n            name    : 'tavm',\n            update  : 'onModelUpdate',\n            thisObj : this\n        });\n    }\n}\n", "import Widget from '../../Core/widget/Widget.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module Scheduler/view/ResourceHeader\n */\n\n/**\n * Header widget that renders resource column headers and acts as the interaction point for resource columns in vertical\n * mode. Note that it uses virtual rendering and element reusage to gain performance, only headers in view are available\n * in DOM. Because of this you should avoid direct element manipulation, any such changes can be discarded at any time.\n *\n * By default, it displays resources `name` and also applies its `iconCls` if any, like this:\n *\n * ```html\n * <i class=\"iconCls\">name</i>\n * ```\n *\n * If Scheduler is configured with a {@link Scheduler.view.Scheduler#config-resourceImagePath} the\n * header will render miniatures for the resources, using {@link Scheduler.model.ResourceModel#field-imageUrl}\n * or {@link Scheduler.model.ResourceModel#field-image} with fallback to\n * {@link Scheduler.model.ResourceModel#field-name} + {@link Scheduler.view.Scheduler#config-resourceImageExtension}\n * for unset values.\n *\n * The contents and styling of the resource cells in the header can be customized using {@link #config-headerRenderer}:\n *\n * ```javascript\n * new Scheduler({\n *     mode            : 'vertical',\n *     resourceColumns : {\n *         headerRenderer : ({ resourceRecord }) => `Hello ${resourceRecord.name}`\n *     }\n * }\n *```\n *\n * The width of the resource columns is determined by the {@link #config-columnWidth} config.\n *\n * @extends Core/widget/Widget\n */\nexport default class ResourceHeader extends Widget {\n\n    //region Config\n\n    static $name = 'ResourceHeader';\n\n    static type = 'resourceheader';\n\n    static configurable = {\n        /**\n         * Resource store used to render resource headers. Assigned from Scheduler.\n         * @config {Scheduler.data.ResourceStore}\n         * @private\n         */\n        resourceStore : null,\n\n        /**\n         * Custom header renderer function. Can be used to manipulate the element config used to create the element\n         * for the header:\n         *\n         * ```javascript\n         * new Scheduler({\n         *   resourceColumns : {\n         *     headerRenderer({ elementConfig, resourceRecord }) {\n         *       elementConfig.dataset.myExtraData = 'extra';\n         *       elementConfig.style.fontWeight = 'bold';\n         *     }\n         *   }\n         * });\n         * ```\n         *\n         * See {@link DomConfig} for more information.\n         * Please take care to not break the default configs :)\n         *\n         * Or as a template by returning HTML from the function:\n         *\n         * ```javascript\n         * new Scheduler({\n         *   resourceColumns : {\n         *     headerRenderer : ({ resourceRecord }) => `\n         *       <div class=\"my-custom-template\">\n         *       ${resourceRecord.firstName} {resourceRecord.surname}\n         *       </div>\n         *     `\n         *   }\n         * });\n         * ```\n         *\n         * NOTE: When using `headerRenderer` no default internal markup is applied to the resource header cell,\n         * `iconCls` and {@link Scheduler.model.ResourceModel#field-imageUrl} or {@link Scheduler.model.ResourceModel#field-image}\n         * will have no effect unless you supply custom markup for them.\n         *\n         * @config {Function}\n         * @param {Object} params Object containing the params below\n         * @param {Scheduler.model.ResourceModel} params.resourceRecord Resource whose header is being rendered\n         * @param {DomConfig} params.elementConfig A config object used to create the element for the resource\n         */\n        headerRenderer : null,\n\n        /**\n         * Set to `false` to render just the resource name, `true` to render an avatar (or initials if no image exists)\n         * @config {Boolean}\n         * @default true\n         */\n        showAvatars : {\n            value : true,\n\n            $config : 'nullify'\n        },\n\n        /**\n         * Assign to toggle resource columns **fill* mode. `true` means they will stretch (grow) to fill viewport, `false`\n         * that they will respect their configured `columnWidth`.\n         *\n         * This is ignored if *any* resources are loaded with {@link Scheduler.model.ResourceModel#field-columnWidth}.\n         * @member {Boolean} fillWidth\n         */\n        /**\n         * Automatically resize resource columns to **fill** available width. Set to `false` to always respect the\n         * configured `columnWidth`.\n         *\n         * This is ignored if *any* resources are loaded with {@link Scheduler.model.ResourceModel#field-columnWidth}.\n         * @config {Boolean}\n         * @default\n         */\n        fillWidth : true,\n\n        /**\n         * Assign to toggle resource columns **fit* mode. `true` means they will grow or shrink to always fit viewport,\n         * `false` that they will respect their configured `columnWidth`.\n         *\n         * This is ignored if *any* resources are loaded with {@link Scheduler.model.ResourceModel#field-columnWidth}.\n         * @member {Boolean} fitWidth\n         */\n        /**\n         * Automatically resize resource columns to always **fit** available width.\n         *\n         * This is ignored if *any* resources are loaded with {@link Scheduler.model.ResourceModel#field-columnWidth}.\n         * @config {Boolean}\n         * @default\n         */\n        fitWidth : false,\n\n        /**\n         * Width for each resource column.\n         *\n         * This is used for resources which are not are loaded with a {@link Scheduler.model.ResourceModel#field-columnWidth}.\n         * @config {Number}\n         */\n        columnWidth : 150,\n\n        // Copied from Scheduler#resourceImagePath on creation in TimeAxisColumn.js\n        imagePath : null,\n\n        // Copied from Scheduler#resourceImageExtension on creation in TimeAxisColumn.js\n        imageExtension : null,\n\n        // Copied from Scheduler#defaultResourceImageName on creation in TimeAxisColumn.js\n        defaultImageName : null,\n\n        availableWidth : null\n    };\n\n    /**\n     * An index of the first visible resource in vertical mode\n     * @property {Number}\n     * @readonly\n     * @private\n     */\n    firstResource = -1;\n    /**\n     * An index of the last visible resource in vertical mode\n     * @property {Number}\n     * @readonly\n     * @private\n     */\n    lastResource  = -1;\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n\n        // Inject this into owning Scheduler early because code further down\n        // can call code which uses scheduler.resourceColumns.\n        config.scheduler._resourceColumns = me;\n\n        super.construct(config);\n\n        if (me.imagePath != null) {\n            // Need to increase height a bit when displaying images\n            me.element.classList.add('b-has-images');\n        }\n\n        EventHelper.on({\n            element     : me.element,\n            delegate    : '.b-resourceheader-cell',\n            capture     : true,\n            click       : 'onResourceMouseEvent',\n            dblclick    : 'onResourceMouseEvent',\n            contextmenu : 'onResourceMouseEvent',\n            thisObj     : me\n        });\n    }\n\n    changeShowAvatars(show) {\n        this.avatarRendering?.destroy();\n\n        if (show) {\n            this.avatarRendering = new AvatarRendering({\n                element : this.element\n            });\n        }\n\n        return show;\n    }\n\n    updateShowAvatars() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    //endregion\n\n    //region ResourceStore\n\n    updateResourceStore(store) {\n        const me = this;\n\n        me.detachListeners('resourceStore');\n\n        if (store) {\n            store.ion({\n                name            : 'resourceStore',\n                changePreCommit : 'onResourceStoreDataChange',\n                thisObj         : me\n            });\n\n            // Already have data? Update width etc\n            if (store.count) {\n                me.onResourceStoreDataChange({});\n            }\n        }\n    }\n\n    // Redraw resource headers on any data change\n    onResourceStoreDataChange({ action }) {\n        const me    = this;\n\n        // These must be ingested before we assess the source of column widths\n        // so that they can be cleared *after* their values have been cached.\n        me.getConfig('fillWidth');\n        me.getConfig('fitWidth');\n        me.updateWidthCache();\n\n        const\n            {\n                element\n            }     = me,\n            width = me.totalWidth;\n\n        // If we have some defined columnWidths in the resourceStore\n        // we must then bypass configured fitWidth and fillWidth behaviour.\n        if (me.scheduler.variableColumnWidths) {\n            me._fillWidth = me._fitWidth = false;\n        }\n        else {\n            me._fillWidth = me.configuredFillWidth;\n            me._fitWidth = me.configuredFitWidth;\n        }\n\n        if (width !== me.width) {\n            DomHelper.setLength(element, 'width', width);\n            // During setup, silently set the width. It will then render correctly. After setup, let the world know...\n            me.column.set('width', width, me.column.grid.isConfiguring);\n        }\n\n        if (action === 'removeall') {\n            // Keep nothing\n            element.innerHTML = '';\n        }\n\n        if (action === 'remove' || action === 'add' || action === 'filter' || me.fitWidth || me.fillWidth) {\n            me.refreshWidths();\n        }\n\n        me.column.grid.toggleEmptyText();\n    }\n\n    get totalWidth() {\n        return this.updateWidthCache();\n    }\n\n    updateWidthCache() {\n        let result          = 0;\n        const { scheduler } = this;\n\n        // Flag so that VerticalRendering#getResourceRange knows\n        // whether to use fast or slow mode to ascertain visible columns.\n        scheduler.variableColumnWidths = false;\n\n        scheduler.resourceStore.forEach(resource => {\n            // Set the start position for each resource with respect to the widths\n            resource.instanceMeta(scheduler).insetStart = result;\n            resource.instanceMeta(scheduler).insetEnd   = result + (resource.columnWidth || scheduler.resourceColumnWidth);\n\n            if (resource.columnWidth == null) {\n                result += scheduler.resourceColumnWidth;\n            }\n            else {\n                result += resource.columnWidth;\n                scheduler.variableColumnWidths = true;\n            }\n        });\n\n        return result;\n    }\n\n    //endregion\n\n    //region Properties\n\n    changeColumnWidth(columnWidth) {\n        // Cache configured value, because if *all* resources have their own columnWidths\n        // the property will be nulled, but if we ever recieve a new resource with no\n        // columnWidth, or a columnWidth is nulled, we then have to fall back to using this.\n        if (!this.refreshingWidths) {\n            this.configuredColumnWidth = columnWidth;\n        }\n        return columnWidth;\n    }\n\n    updateColumnWidth(width, oldWidth) {\n        const me = this;\n\n        // Flag set in refreshWidths, do not want to create a loop\n        if (!me.refreshingWidths) {\n            me.refreshWidths();\n        }\n\n        if (!me.isConfiguring) {\n            // If resources are grouped, I need to refresh manually the cached width of resource header columns\n            if (me.resourceStore.isGrouped) {\n                me.updateWidthCache();\n            }\n\n            me.refresh();\n            // Cannot trigger with requested width, might have changed because of fit/fill\n            me.trigger('columnWidthChange', { width, oldWidth });\n        }\n    }\n\n    changeFillWidth(fillWidth) {\n        return this.configuredFillWidth = fillWidth;\n    }\n\n    updateFillWidth() {\n        if (!this.isConfiguring) {\n            this.refreshWidths();\n        }\n    }\n\n    changeFitWidth(fitWidth) {\n        return this.configuredFitWidth = fitWidth;\n    }\n\n    updateFitWidth() {\n        if (!this.isConfiguring) {\n            this.refreshWidths();\n        }\n    }\n\n    getImageURL(imageName) {\n        return StringHelper.joinPaths([this.imagePath || '', imageName || '']);\n    }\n\n    updateImagePath() {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    //endregion\n\n    //region Fit to width\n\n    updateAvailableWidth(width) {\n        this.refreshWidths();\n    }\n\n    // Updates the column widths according to fill and fit settings\n    refreshWidths() {\n        const\n            me    = this,\n            {\n                availableWidth,\n                configuredColumnWidth\n            }     = me,\n            count = me.resourceStore?.count;\n\n        // Bail out if availableWidth not yet set or resource store not assigned/loaded\n        // or column widths are defined in the resources.\n        if (!availableWidth || !count || me.scheduler.variableColumnWidths) {\n            return;\n        }\n\n        me.refreshingWidths = true;\n\n        const\n            // Fit width if configured to do so or if configured to fill and used width is less than available width\n            fit           = me.fitWidth || me.fillWidth && configuredColumnWidth * count < availableWidth,\n            useWidth      = fit ? Math.floor(availableWidth / count) : configuredColumnWidth,\n            shouldAnimate = me.column.grid.enableEventAnimations && Math.abs(me._columnWidth - useWidth) > 30;\n\n        DomHelper.addTemporaryClass(me.element, 'b-animating', shouldAnimate ? 300 : 0, me);\n\n        me.columnWidth = useWidth;\n\n        me.refreshingWidths = false;\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Visual resource range, set by VerticalRendering + its buffer\n    set visibleResources({ firstResource, lastResource }) {\n        this.firstResource = firstResource;\n        this.lastResource = lastResource;\n\n        this.updateWidthCache();\n        this.refresh();\n    }\n\n    /**\n     * Refreshes the visible headers\n     */\n    refresh() {\n        const\n            me         = this,\n            {\n                firstResource,\n                scheduler,\n                resourceStore,\n                lastResource\n            }          = me,\n            {\n                variableColumnWidths\n            }          = scheduler,\n            groupField = resourceStore.isGrouped && resourceStore.groupers[0].field,\n            configs    = [];\n\n        me.element.classList.toggle('b-grouped', Boolean(groupField));\n\n        if (!me.column.grid.isConfiguring && firstResource > -1 && lastResource > -1 && lastResource < resourceStore.count) {\n            let currentGroup;\n            // Gather element configs for resource headers in view\n            for (let i = firstResource; i <= lastResource; i++) {\n                const\n                    resourceRecord = resourceStore.allResourceRecords[i],\n                    groupRecord    = resourceRecord.instanceMeta(resourceStore).groupParent,\n                    groupChildren  = groupRecord?.groupChildren;\n\n                if (groupField && groupRecord.id !== currentGroup?.dataset.resourceId) {\n                    const\n                        groupLeft  = groupChildren[0].instanceMeta(scheduler).insetStart,\n                        groupWidth = groupChildren[groupChildren.length - 1].instanceMeta(scheduler).insetEnd - groupLeft;\n\n                    currentGroup = {\n                        className : 'b-resourceheader-group-cell',\n                        dataset   : {\n                            resourceId : groupRecord.id\n                        },\n                        style : {\n                            left  : groupLeft,\n                            width : groupWidth\n                        },\n                        children : [\n                            {\n                                tag  : 'span',\n                                html : StringHelper.encodeHtml(groupChildren[0][groupField])\n                            },\n                            {\n                                className : 'b-resourceheader-group-children',\n                                children  : []\n                            }\n                        ]\n                    };\n\n                    configs.push(currentGroup);\n                }\n\n                const\n                    instanceMeta  = resourceRecord.instanceMeta(scheduler),\n                    // Possible variable column width taken from the resources, fallback to scheduler's default\n                    width         = resourceRecord.columnWidth || me.columnWidth,\n                    position      = groupField ? instanceMeta.insetStart - currentGroup.style.left //groupChildren[0].instanceMeta(scheduler).insetStart\n                        : variableColumnWidths ? instanceMeta.insetStart : i * me.columnWidth,\n                    elementConfig = {\n                        // Might look like overkill to use DomClassList here, but can be used in headerRenderer\n                        className : new DomClassList({\n                            'b-resourceheader-cell' : 1\n                        }),\n                        dataset : {\n                            resourceId : resourceRecord.id\n                        },\n                        style : {\n                            [scheduler.rtl ? 'right' : 'left'] : position,\n                            width\n                        },\n                        children : []\n                    };\n\n                // Let a configured headerRenderer have a go at it before applying\n                if (me.headerRenderer) {\n                    const value = me.headerRenderer({ elementConfig, resourceRecord });\n\n                    if (value != null) {\n                        elementConfig.html = value;\n                    }\n                }\n                // No headerRenderer, apply default markup\n                else {\n                    let imageUrl;\n\n                    if (resourceRecord.imageUrl) {\n                        imageUrl = resourceRecord.imageUrl;\n                    }\n                    else {\n                        if (me.imagePath != null) {\n                            if (resourceRecord.image !== false) {\n                                const imageName = resourceRecord.image ||\n                                    resourceRecord.name?.toLowerCase() + me.imageExtension;\n                                imageUrl = me.getImageURL(imageName);\n                            }\n                        }\n                    }\n\n                    // By default showing resource name and optionally avatar\n                    elementConfig.children.push(\n                        me.showAvatars && me.avatarRendering.getResourceAvatar({\n                            resourceRecord,\n                            initials        : resourceRecord.initials,\n                            color           : resourceRecord.eventColor,\n                            iconCls         : resourceRecord.iconCls,\n                            defaultImageUrl : me.defaultImageName && me.getImageURL(me.defaultImageName),\n                            imageUrl\n                        }),\n                        {\n                            tag       : 'span',\n                            className : 'b-resource-name',\n                            html      : StringHelper.encodeHtml(resourceRecord.name)\n                        }\n                    );\n                }\n\n                if (groupField) {\n                    currentGroup.children[1].children.push(elementConfig);\n                }\n                else {\n                    configs.push(elementConfig);\n                }\n            }\n        }\n\n        // Sync changes to the header\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : configs\n            },\n            targetElement : me.element,\n            syncIdField   : 'resourceId'\n            // <remove-on-release>\n            // TODO: Add callback here to trigger events when rendering/derendering header cells. Sooner or later\n            //  someone is going to ask for a way to render JSX or what not to the header\n            // </remove-on-release>\n        });\n    }\n\n    //endregion\n\n    onResourceMouseEvent(event) {\n        const\n            resourceCell   = event.target.closest('.b-resourceheader-cell'),\n            resourceRecord = this.resourceStore.getById(resourceCell.dataset.resourceId);\n\n        this.trigger('resourceHeader' + StringHelper.capitalize(event.type), {\n            resourceRecord,\n            event\n        });\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs for the header, removing irrelevant ones\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Assigned from Scheduler\n        delete result.resourceStore;\n        delete result.column;\n        delete result.type;\n\n        return result;\n    }\n}\n", "import WidgetColumn from '../../Grid/column/WidgetColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Events from '../../Core/mixin/Events.js';\nimport HorizontalTimeAxis from '../view/HorizontalTimeAxis.js';\nimport ResourceHeader from '../view/ResourceHeader.js';\n\n/**\n * @module Scheduler/column/TimeAxisColumn\n */\n\n/**\n * A column containing the timeline \"viewport\", in which events, dependencies etc. are drawn.\n * Normally you do not need to interact with or create this column, it is handled by Scheduler.\n *\n * If you wish to output custom contents inside the time axis row cells, you can provide your custom column configuration\n * using the {@link #config-renderer} like so:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *    appendTo         : document.body\n *    columns          : [\n *       { text : 'Name', field : 'name', width : 130 },\n *       {\n *           type : 'timeAxis',\n *           renderer({ record, cellElement }) {\n *               return '<div class=\"cool-chart\"></div>';\n *           }\n *       }\n *    ]\n * });\n * ```\n *\n * @extends Grid/column/WidgetColumn\n * @column\n */\nexport default class TimeAxisColumn extends Events(WidgetColumn) {\n    //region Config\n\n    static $name = 'TimeAxisColumn';\n\n    static get fields() {\n        return [\n            // Exclude some irrelevant fields from getCurrentConfig()\n            { name : 'locked', persist : false },\n            { name : 'flex', persist : false },\n            { name : 'width', persist : false },\n            { name : 'cellCls', persist : false },\n            { name : 'field', persist : false },\n            'mode'\n        ];\n    }\n\n    static get defaults() {\n        return {\n            /**\n             * Set to false to prevent this column header from being dragged.\n             * @config {Boolean} draggable\n             * @category Interaction\n             * @default false\n             */\n            draggable : false,\n\n            /**\n             * Set to false to prevent grouping by this column.\n             * @config {Boolean} groupable\n             * @category Interaction\n             * @default false\n             */\n            groupable : false,\n\n            /**\n             * Allow column visibility to be toggled through UI.\n             * @config {Boolean} hideable\n             * @default false\n             * @category Interaction\n             */\n            hideable : false,\n\n            /**\n             * Show column picker for the column.\n             * @config {Boolean} showColumnPicker\n             * @default false\n             * @category Menu\n             */\n            showColumnPicker : false,\n\n            /**\n             * Allow filtering data in the column (if Filter feature is enabled)\n             * @config {Boolean} filterable\n             * @default false\n             * @category Interaction\n             */\n            filterable : false,\n\n            /**\n             * Allow sorting of data in the column\n             * @config {Boolean} sortable\n             * @category Interaction\n             * @default false\n             */\n            sortable : false,\n\n            /**\n             * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.\n             * @config {Boolean} resizable\n             * @default false\n             * @category Interaction\n             */\n            resizable : false,\n\n            /**\n             * Allow searching in the column (respected by QuickFind and Search features)\n             * @config {Boolean} searchable\n             * @default false\n             * @category Interaction\n             */\n            searchable : false,\n\n            /**\n             * @config {String} editor\n             * @hide\n             */\n            editor : false,\n\n            /**\n             * Set to `true` to show a context menu on the cell elements in this column\n             * @config {Boolean} enableCellContextMenu\n             * @default false\n             * @category Menu\n             */\n            enableCellContextMenu : false,\n\n            /**\n             * @config {Function|Boolean} tooltipRenderer\n             * @hide\n             */\n            tooltipRenderer : false,\n\n            /**\n             * CSS class added to the header of this column\n             * @config {String} cls\n             * @category Rendering\n             * @default 'b-sch-timeaxiscolumn'\n             */\n            cls : 'b-sch-timeaxiscolumn',\n\n            // needs to have width specified, flex-basis messes measurements up\n            needWidth : true,\n\n            mode       : null,\n            region     : 'normal',\n            exportable : false,\n            htmlEncode : false\n        };\n    }\n\n    static get type() {\n        return 'timeAxis';\n    }\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(...arguments);\n\n        me.thisObj = me;\n        me.timeAxisViewModel = me.grid.timeAxisViewModel;\n        // A bit hacky, because mode is a field and not a config\n        // eslint-disable-next-line no-self-assign\n        me.mode = me.mode;\n\n        me.grid.ion({\n            paint   : 'onTimelinePaint',\n            thisObj : me,\n            once    : true\n        });\n    }\n\n    static get autoExposeFields() {\n        return true;\n    }\n\n    // endregion\n\n    doDestroy() {\n        this.resourceColumns?.destroy();\n        this.timeAxisView?.destroy();\n        super.doDestroy();\n    }\n\n    set mode(mode) {\n        const\n            me       = this,\n            { grid } = me;\n\n        me.set('mode', mode);\n\n        // In horizontal mode this column has a time axis header on top, with timeline ticks\n        if (mode === 'horizontal') {\n            me.timeAxisView = new HorizontalTimeAxis({\n                model                     : me.timeAxisViewModel,\n                compactCellWidthThreshold : me.compactCellWidthThreshold,\n                owner                     : grid,\n                client                    : grid\n            });\n        }\n        // In vertical mode, it instead displays resources at top\n        else if (mode === 'vertical') {\n            // <remove-on-release>\n            // TODO: Most other vertical stuff is handled in VerticalRendering, move there?\n            // </remove-on-release>\n            me.resourceColumns = ResourceHeader.new({\n                column           : me,\n                scheduler        : grid,\n                resourceStore    : grid.resourceStore,\n                imagePath        : grid.resourceImagePath,\n                imageExtension   : grid.resourceImageExtension,\n                defaultImageName : grid.defaultResourceImageName\n            }, grid.resourceColumns || {});\n\n            me.relayEvents(me.resourceColumns, [\n                'resourceheaderclick',\n                'resourceheaderdblclick',\n                'resourceheadercontextmenu'\n            ]);\n        }\n    }\n\n    get mode() {\n        return this.get('mode');\n    }\n\n    // <remove-on-release>\n    // TODO: define all configs as fields and set below to false...\n    // </remove-on-release>\n\n    //region Events\n\n    onViewModelUpdate({ source : viewModel }) {\n        const me = this;\n\n        if (me.grid.timeAxisSubGrid.collapsed) {\n            return;\n        }\n\n        if (me.mode === 'horizontal') {\n            // render the time axis view into the column header element\n            me.refreshHeader(true);\n\n            me.width = viewModel.totalSize;\n\n            me.grid.refresh();\n\n            // When width is set above, that ends up on a columnsResized listener, but the refreshing of the fake\n            // scrollers to accommodate the new width is not done in this timeframe, so the upcoming centering related\n            // to preset change cannot work. So we have to refresh the fake scrollers now\n            me.subGrid.refreshFakeScroll();\n        }\n        else if (me.mode === 'vertical') {\n            // Refresh to rerender cells, in the process updating the vertical timeaxis to reflect view model changes\n            me.grid.refreshRows();\n        }\n    }\n\n    // Called on paint. SubGrid has its width so this is the earliest time to configure the TimeAxisViewModel with\n    // correct width\n    onTimelinePaint({ firstPaint }) {\n        const me = this;\n\n        if (!me.subGrid.insertRowsBefore) {\n            return;\n        }\n\n        if (firstPaint) {\n            me.subGridElement.classList.add('b-timeline-subgrid');\n\n            if (me.mode === 'vertical') {\n                me.refreshHeader();\n\n                // The above operation can cause height change.\n                me.grid?.onHeightChange();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Refreshes the columns header contents (which is either a HorizontalTimeAxis or a ResourceHeader). Useful if you\n     * have rendered some extra meta data that depends on external data such as the EventStore or ResourceStore.\n     */\n    refreshHeader(internal) {\n        const\n            me          = this,\n            { element } = me;\n\n        if (element) {\n\n            if (me.mode === 'horizontal') {\n                // Force timeAxisViewModel to regenerate its column config, which calls header renderers etc.\n                !internal && me.timeAxisViewModel.update(undefined, undefined, true);\n\n                if (!me.timeAxisView.rendered) {\n                    // Do not need the normal header markup\n                    element.innerHTML = '';\n\n                    me.timeAxisView.render(element);\n                }\n                else {\n                    // Force rebuild of cells in case external data has changed (cheap since it still syncs to DOM)\n                    me.timeAxisView.refresh(true);\n                }\n            }\n            else if (me.mode === 'vertical') {\n                if (!me.resourceColumns.currentElement) {\n                    // Do not need the normal header markup\n                    element.innerHTML = '';\n                    me.resourceColumns.render(element);\n                }\n                else {\n                    me.resourceColumns.refresh();\n                }\n\n                // Vertical's resourceColumns is redrawn with the events, no need here\n            }\n        }\n    }\n\n    internalRenderer(renderData) {\n        const { grid } = this;\n        // No drawing of events before engines initial commit\n        if (grid.project.isInitialCommitPerformed || grid.project.isDelayingCalculation) {\n            grid.currentOrientation.renderer(renderData);\n\n            return super.internalRenderer(renderData);\n        }\n\n        return '';\n    }\n\n    //endregion\n\n    get timeAxisViewModel() {\n        return this._timeAxisViewModel;\n    }\n\n    set timeAxisViewModel(timeAxisViewModel) {\n        const me = this;\n\n        me.detachListeners('tavm');\n\n        timeAxisViewModel?.ion({\n            name    : 'tavm',\n            update  : 'onViewModelUpdate',\n            prio    : -10000,\n            thisObj : me\n        });\n\n        me._timeAxisViewModel = timeAxisViewModel;\n\n        if (me.timeAxisView) {\n            me.timeAxisView.model = timeAxisViewModel;\n        }\n    }\n\n    // Width of the time axis column is solely determined by the zoom level. We should not keep it part of the state\n    // otherwise restoring the state might break the normal zooming process.\n    // Covered by SchedulerState.t\n    // https://github.com/bryntum/support/issues/5545\n    getState() {\n        const state = super.getState();\n\n        delete state.width;\n        delete state.flex;\n\n        return state;\n    }\n}\n\nColumnStore.registerColumnType(TimeAxisColumn);\n", "import TimeAxisBase from './TimeAxisBase.js';\n\n/**\n * @module Scheduler/view/VerticalTimeAxis\n */\n\n/**\n * Widget that renders a vertical time axis. Only renders ticks in view. Used in vertical mode.\n * @extends Core/widget/Widget\n * @private\n */\nexport default class VerticalTimeAxis extends TimeAxisBase {\n\n    static get $name() {\n        return 'VerticalTimeAxis';\n    }\n\n    static get configurable() {\n        return {\n            cls : 'b-verticaltimeaxis',\n\n            sizeProperty : 'height',\n\n            positionProperty : 'top',\n\n            wrapText : true\n        };\n    }\n\n    // All cells overlayed in the same space.\n    // For future use.\n    buildHorizontalCells() {\n        const\n            me                   = this,\n            { client }           = me,\n            stickyHeaders        = client?.stickyHeaders,\n            featureHeaderConfigs = [],\n            cellConfigs          = me.levels.reduce((result, level, i) => {\n                if (level.cells) {\n                    result.push(...level.cells?.filter(cell => cell.start < me.endDate && cell.end > me.startDate).map((cell, j, cells) => ({\n                        role      : 'presentation',\n                        className : {\n                            'b-sch-header-timeaxis-cell' : 1,\n                            [cell.headerCellCls]         : cell.headerCellCls,\n                            [`b-align-${cell.align}`]    : cell.align,\n                            'b-last'                     : j === cells.length - 1,\n                            'b-lowest'                   : i === me.levels.length - 1\n                        },\n                        dataset : {\n                            tickIndex      : cell.index,\n                            cellId         : `${i}-${cell.index}`,\n                            headerPosition : i,\n                            // Used in export tests to resolve dates from tick elements\n                            ...globalThis.DEBUG && { date : cell.start.getTime() }\n                        },\n                        style : {\n                            // DomHelper appends px to numeric dimensions\n                            top       : cell.coord,\n                            height    : cell.width,\n                            minHeight : cell.width\n                        },\n                        children : [\n                            {\n                                role      : 'presentation',\n                                className : {\n                                    'b-sch-header-text' : 1,\n                                    'b-sticky-header'   : stickyHeaders\n                                },\n                                html : cell.value\n                            }\n                        ]\n                    })));\n                }\n                return result;\n            }, []);\n\n        // When tested in isolation there is no client\n        client?.getHeaderDomConfigs(featureHeaderConfigs);\n\n        cellConfigs.push(...featureHeaderConfigs);\n\n        // noinspection JSSuspiciousNameCombination\n        return {\n            className : me.widgetClassList,\n            dataset   : {\n                headerFeature  : `headerRow0`,\n                headerPosition : 0\n            },\n            syncOptions : {\n                // Keep a maximum of 5 released cells. Might be fine with fewer since ticks are fixed width.\n                // Prevents an unnecessary amount of cells from sticking around when switching from narrow to\n                // wide tickSizes\n                releaseThreshold : 5,\n                syncIdField      : 'cellId'\n            },\n            children : cellConfigs\n        };\n    }\n\n    get height() {\n        return this.size;\n    }\n}\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport VerticalTimeAxis from '../view/VerticalTimeAxis.js';\n\n/**\n * @module Scheduler/column/VerticalTimeAxisColumn\n */\n\n/**\n * A special column containing the time axis labels when the Scheduler is used in vertical mode. You can configure,\n * it using the {@link Scheduler.view.Scheduler#config-verticalTimeAxisColumn} config object.\n *\n * **Note**: this column is sized by flexing to consume full width of its containing {@link Grid.view.SubGrid}. To\n * change width of this column, instead size the subgrid like so:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode           : 'vertical',\n *     subGridConfigs : {\n *         locked : {\n *             width : 300\n *         }\n *     }\n * });\n * ```\n *\n * @extends Grid/column/Column\n */\nexport default class VerticalTimeAxisColumn extends Column {\n\n    static $name = 'VerticalTimeAxisColumn';\n\n    static get type() {\n        return 'verticalTimeAxis';\n    }\n\n    static get defaults() {\n        return {\n            /**\n             * @hideconfigs autoWidth, autoHeight\n             */\n\n            /**\n             * Set to false to prevent this column header from being dragged.\n             * @config {Boolean} draggable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            draggable : false,\n\n            /**\n             * Set to false to prevent grouping by this column.\n             * @config {Boolean} groupable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            groupable : false,\n\n            /**\n             * Allow column visibility to be toggled through UI.\n             * @config {Boolean} hideable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            hideable : false,\n\n            /**\n             * Show column picker for the column.\n             * @config {Boolean} showColumnPicker\n             * @default false\n             * @category Menu\n             * @hide\n             */\n            showColumnPicker : false,\n\n            /**\n             * Allow filtering data in the column (if Filter feature is enabled)\n             * @config {Boolean} filterable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            filterable : false,\n\n            /**\n             * Allow sorting of data in the column\n             * @config {Boolean} sortable\n             * @category Interaction\n             * @default false\n             * @hide\n             */\n            sortable : false,\n\n            // /**\n            //  * Set to `false` to prevent the column from being drag-resized when the ColumnResize plugin is enabled.\n            //  * @config {Boolean} resizable\n            //  * @default false\n            //  * @category Interaction\n            //  * @hide\n            //  */\n            // resizable : false,\n\n            /**\n             * Allow searching in the column (respected by QuickFind and Search features)\n             * @config {Boolean} searchable\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            searchable : false,\n\n            /**\n             * Specifies if this column should be editable, and define which editor to use for editing cells in the column (if CellEdit feature is enabled)\n             * @config {String} editor\n             * @default false\n             * @category Interaction\n             * @hide\n             */\n            editor : false,\n\n            /**\n             * Set to `true` to show a context menu on the cell elements in this column\n             * @config {Boolean} enableCellContextMenu\n             * @default false\n             * @category Menu\n             * @hide\n             */\n            enableCellContextMenu : false,\n\n            /**\n             * @config {Function|Boolean} tooltipRenderer\n             * @hide\n             */\n            tooltipRenderer : false,\n\n            /**\n             * Column minimal width. If value is Number then minimal width is in pixels\n             * @config {Number|String} minWidth\n             * @default 0\n             * @category Layout\n             */\n            minWidth : 0,\n\n            resizable : false,\n\n            cellCls : 'b-verticaltimeaxiscolumn',\n            locked  : true,\n\n            flex : 1,\n\n            alwaysClearCell : false\n        };\n    }\n\n    get isFocusable() {\n        return false;\n    }\n\n    construct(data) {\n        super.construct(...arguments);\n\n        this.view = new VerticalTimeAxis({\n            model  : this.grid.timeAxisViewModel,\n            client : this.grid\n        });\n    }\n\n    renderer({ cellElement, size }) {\n        this.view.render(cellElement);\n\n        size.height = this.view.height;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, removing irrelevant ones\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Remove irrelevant configs\n        delete result.id;\n        delete result.region;\n        delete result.type;\n        delete result.field;\n        delete result.ariaLabel;\n        delete result.cellAriaLabel;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(VerticalTimeAxisColumn);\n", "import TimelineBase from './TimelineBase.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport CrudManager from '../data/CrudManager.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport '../localization/En.js';\n\nimport CurrentConfig from './mixin/CurrentConfig.js';\nimport Describable from './mixin/Describable.js';\nimport SchedulerDom from './mixin/SchedulerDom.js';\nimport SchedulerDomEvents from './mixin/SchedulerDomEvents.js';\nimport SchedulerEventRendering from './mixin/SchedulerEventRendering.js';\nimport SchedulerStores from './mixin/SchedulerStores.js';\nimport SchedulerScroll from './mixin/SchedulerScroll.js';\nimport SchedulerRegions from './mixin/SchedulerRegions.js';\nimport SchedulerState from './mixin/SchedulerState.js';\nimport EventSelection from './mixin/EventSelection.js';\nimport EventNavigation from './mixin/EventNavigation.js';\nimport TransactionalFeatureMixin from './mixin/TransactionalFeatureMixin.js';\nimport CrudManagerView from '../crud/mixin/CrudManagerView.js';\nimport HorizontalRendering from './orientation/HorizontalRendering.js';\nimport VerticalRendering from './orientation/VerticalRendering.js';\nimport '../column/TimeAxisColumn.js';\nimport '../column/VerticalTimeAxisColumn.js';\n\n// Should always be present in Scheduler\nimport '../../Grid/feature/RegionResize.js';\n\n/**\n * @module Scheduler/view/SchedulerBase\n */\n\nconst\n    descriptionFormats = {\n        month : 'MMMM, YYYY',\n        week  : ['MMMM YYYY (Wp)', 'S{MMM} - E{MMM YYYY} (S{Wp})'],\n        day   : 'MMMM D, YYYY'\n    };\n\n/**\n * A thin base class for {@link Scheduler.view.Scheduler}. Does not include any features by default, allowing smaller\n * custom-built bundles if used in place of {@link Scheduler.view.Scheduler}.\n *\n * **NOTE:** In most scenarios you do probably want to use Scheduler instead of SchedulerBase.\n *\n * @mixes Scheduler/view/mixin/Describable\n * @mixes Scheduler/view/mixin/EventNavigation\n * @mixes Scheduler/view/mixin/EventSelection\n * @mixes Scheduler/view/mixin/SchedulerDom\n * @mixes Scheduler/view/mixin/SchedulerDomEvents\n * @mixes Scheduler/view/mixin/SchedulerEventRendering\n * @mixes Scheduler/view/mixin/SchedulerRegions\n * @mixes Scheduler/view/mixin/SchedulerScroll\n * @mixes Scheduler/view/mixin/SchedulerState\n * @mixes Scheduler/view/mixin/SchedulerStores\n * @mixes Scheduler/view/mixin/TimelineDateMapper\n * @mixes Scheduler/view/mixin/TimelineDomEvents\n * @mixes Scheduler/view/mixin/TimelineEventRendering\n * @mixes Scheduler/view/mixin/TimelineScroll\n * @mixes Scheduler/view/mixin/TimelineViewPresets\n * @mixes Scheduler/view/mixin/TimelineZoomable\n * @mixes Scheduler/view/mixin/TransactionalFeatureMixin\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/data/mixin/ProjectConsumer\n *\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/Dependencies\n * @features Scheduler/feature/DependencyEdit\n * @features Scheduler/feature/EventCopyPaste\n * @features Scheduler/feature/EventDrag\n * @features Scheduler/feature/EventDragCreate\n * @features Scheduler/feature/EventDragSelect\n * @features Scheduler/feature/EventEdit\n * @features Scheduler/feature/EventFilter\n * @features Scheduler/feature/EventMenu\n * @features Scheduler/feature/EventNonWorkingTime\n * @features Scheduler/feature/EventResize\n * @features Scheduler/feature/EventTooltip\n * @features Scheduler/feature/GroupSummary\n * @features Scheduler/feature/HeaderZoom\n * @features Scheduler/feature/Labels\n * @features Scheduler/feature/NonWorkingTime\n * @features Scheduler/feature/Pan\n * @features Scheduler/feature/ResourceMenu\n * @features Scheduler/feature/ResourceTimeRanges\n * @features Scheduler/feature/RowReorder\n * @features Scheduler/feature/ScheduleContext\n * @features Scheduler/feature/ScheduleMenu\n * @features Scheduler/feature/ScheduleTooltip\n * @features Scheduler/feature/SimpleEventEdit\n * @features Scheduler/feature/Split\n * @features Scheduler/feature/StickyEvents\n * @features Scheduler/feature/Summary\n * @features Scheduler/feature/TimeAxisHeaderMenu\n * @features Scheduler/feature/TimeRanges\n * @features Scheduler/feature/TimeSelection\n *\n * @features Scheduler/feature/experimental/ExcelExporter\n *\n * @features Scheduler/feature/export/PdfExport\n * @features Scheduler/feature/export/exporter/MultiPageExporter\n * @features Scheduler/feature/export/exporter/MultiPageVerticalExporter\n * @features Scheduler/feature/export/exporter/SinglePageExporter\n *\n * @extends Scheduler/view/TimelineBase\n * @widget\n */\nexport default class SchedulerBase extends TimelineBase.mixin(\n    CrudManagerView,\n    Describable,\n    SchedulerDom,\n    SchedulerDomEvents,\n    SchedulerStores,\n    SchedulerScroll,\n    SchedulerState,\n    SchedulerEventRendering,\n    SchedulerRegions,\n    EventSelection,\n    EventNavigation,\n    CurrentConfig,\n    TransactionalFeatureMixin\n) {\n    //region Config\n\n    static $name = 'SchedulerBase';\n\n    // Factoryable type name\n    static type = 'schedulerbase';\n\n    static configurable = {\n        /**\n         * Get/set the scheduler's read-only state. When set to `true`, any UIs for modifying data are disabled.\n         * @member {Boolean} readOnly\n         * @category Misc\n         */\n        /**\n         * Configure as `true` to make the scheduler read-only, by disabling any UIs for modifying data.\n         *\n         * __Note that checks MUST always also be applied at the server side.__\n         * @config {Boolean} readOnly\n         * @default false\n         * @category Misc\n         */\n\n        /**\n         * The date to display when used as a component of a Calendar.\n         *\n         * This is required by the Calendar Mode Interface.\n         *\n         * @config {Date}\n         * @category Calendar integration\n         */\n        date : {\n            value : null,\n\n            $config : {\n                equal : 'date'\n            }\n        },\n\n        /**\n         * Unit used to control how large steps to take when clicking the previous and next buttons in the Calendar\n         * UI. Only applies when used as a component of a Calendar.\n         *\n         * Suitable units depend on configured {@link #config-range}, a smaller or equal unit is recommended.\n         *\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default\n         * @category Calendar integration\n         */\n        stepUnit : 'week',\n\n        /**\n         * Unit used to set the length of the time axis when used as a component of a Calendar. Suitable units are\n         * `'month'`, `'week'` and `'day'`.\n         *\n         * @config {'day'|'week'|'month'}\n         * @category Calendar integration\n         * @default\n         */\n        range : 'week',\n\n        /**\n         * When the scheduler is used in a Calendar, this function provides the textual description for the\n         * Calendar's toolbar.\n         *\n         * ```javascript\n         *  descriptionRenderer : scheduler => {\n         *      const\n         *          count = scheduler.eventStore.records.filter(\n         *              eventRec => DateHelper.intersectSpans(\n         *                  scheduler.startDate, scheduler.endDate,\n         *                  eventRec.startDate, eventRec.endDate)).length,\n         *          startDate = DateHelper.format(scheduler.startDate, 'DD/MM/YYY'),\n         *          endData = DateHelper.format(scheduler.endDate, 'DD/MM/YYY');\n         *\n         *      return `${startDate} - ${endData}, ${count} event${count === 1 ? '' : 's'}`;\n         *  }\n         * ```\n         * @config {Function}\n         * @param {Scheduler.view.SchedulerBase} view The active view.\n         * @category Calendar integration\n         */\n\n        /**\n         * A method allowing you to define date boundaries that will constrain resize, create and drag drop\n         * operations. The method will be called with the Resource record, and the Event record.\n         *\n         * ```javascript\n         *  new Scheduler({\n         *      getDateConstraints(resourceRecord, eventRecord) {\n         *          // Assuming you have added these extra fields to your own EventModel subclass\n         *          const { minStartDate, maxEndDate } = eventRecord;\n         *\n         *          return {\n         *              start : minStartDate,\n         *              end   : maxEndDate\n         *          };\n         *      }\n         *  });\n         * ```\n         * @param {Scheduler.model.ResourceModel} [resourceRecord] The resource record\n         * @param {Scheduler.model.EventModel} [eventRecord] The event record\n         * @returns {Object} Constraining object containing `start` and `end` constraints. Omitting either\n         * will mean that end is not constrained. So you can prevent a resize or move from moving *before*\n         * a certain time while not constraining the end date.\n         * @returns {Date} [return.start] Start date\n         * @returns {Date} [return.end] End date\n         * @config {Function}\n         * @category Scheduled events\n         */\n        getDateConstraints : null,\n\n        /**\n         * The time axis column config for vertical {@link Scheduler.view.SchedulerBase#config-mode}.\n         *\n         * Object with {@link Scheduler.column.VerticalTimeAxisColumn} configuration.\n         *\n         * This object will be used to configure the vertical time axis column instance.\n         *\n         * The config allows configuring the `VerticalTimeAxisColumn` instance used in vertical mode with any Column options that apply to it.\n         *\n         * Example:\n         *\n         * ```javascript\n         * new Scheduler({\n         *     mode     : 'vertical',\n         *     features : {\n         *         filterBar : true\n         *     },\n         *     verticalTimeAxisColumn : {\n         *         text  : 'Filter by event name',\n         *         width : 180,\n         *         filterable : {\n         *             // add a filter field to the vertical column access header\n         *             filterField : {\n         *                 type        : 'text',\n         *                 placeholder : 'Type to search',\n         *                 onChange    : ({ value }) => {\n         *                     // filter event by name converting to lowerCase to be equal comparison\n         *                     scheduler.eventStore.filter({\n         *                         filters : event => event.name.toLowerCase().includes(value.toLowerCase()),\n         *                         replace : true\n         *                     });\n         *                 }\n         *             }\n         *         }\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * @config {VerticalTimeAxisColumnConfig}\n         * @category Time axis\n         */\n        verticalTimeAxisColumn : {},\n\n        /**\n         * See {@link Scheduler.view.Scheduler#keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>} keyMap\n         * @category Common\n         */\n\n        /**\n         * If true, a new event will be created when user double-clicks on a time axis cell (if scheduler is not in\n         * read only mode).\n         *\n         * The duration / durationUnit of the new event will be 1 time axis tick (default), or it can be read from\n         * the {@link Scheduler.model.EventModel#field-duration} and\n         * {@link Scheduler.model.EventModel#field-durationUnit} fields.\n         *\n         * Set to `false` to not create events on double click.\n         * @config {Boolean|Object} createEventOnDblClick\n         * @param {Boolean} [createEventOnDblClick.useEventModelDefaults] set to `true` to set default duration\n         * based on the defaults specified by the {@link Scheduler.model.EventModel#field-duration} and\n         * {@link Scheduler.model.EventModel#field-durationUnit} fields.\n         * @default\n         * @category Scheduled events\n         */\n        createEventOnDblClick : true,\n\n        /**\n             * Number of pixels to horizontally extend the visible render zone by, controlling the events that will be\n             * rendered. You can use this to increase or reduce the amount of event rendering happening when scrolling\n             * along a horizontal time axis. This can be useful if you render huge amount of events.\n             *\n             * To force the scheduler to render all events within the TimeAxis start & end dates, set this to -1.\n             * The initial render will take slightly longer but no extra event rendering will take place when scrolling.\n             *\n             * NOTE: This is an experimental API which might change in future releases.\n             * @config {Number}\n             * @default\n             * @internal\n             * @category Experimental\n             */\n        scrollBuffer : 0,\n\n        // A CSS class identifying areas where events can be scheduled using drag-create, double click etc.\n        schedulableAreaSelector : '.b-sch-timeaxis-cell',\n        scheduledEventName      : 'event',\n        sortFeatureStore        : 'resourceStore',\n\n        /**\n         * If set to `true` this will show a color field in the {@link Scheduler.feature.EventEdit} editor and also a\n         * picker in the {@link Scheduler.feature.EventMenu}. Both enables the user to choose a color which will be\n         * applied to the event bar's background. See EventModel's\n         * {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} config.\n         * config.\n         * @config {Boolean}\n         * @default false\n         * @category Misc\n         */\n        showEventColorPickers : null\n    };\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Scheduler mode. Supported values: horizontal, vertical\n             * @config {'horizontal'|'vertical'} mode\n             * @default\n             * @category Common\n             */\n            mode : 'horizontal',\n\n            /**\n             * CSS class to add to rendered events\n             * @config {String}\n             * @category CSS\n             * @private\n             * @default\n             */\n            eventCls : 'b-sch-event',\n\n            /**\n             * CSS class to add to cells in the timeaxis column\n             * @config {String}\n             * @category CSS\n             * @private\n             * @default\n             */\n            timeCellCls : 'b-sch-timeaxis-cell',\n\n            /**\n             * A CSS class to apply to each event in the view on mouseover (defaults to 'b-sch-event-hover').\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            overScheduledEventClass : 'b-sch-event-hover',\n\n            /**\n             * Set to `false` if you don't want to allow events overlapping times for any one resource (defaults to `true`).\n             * <div class=\"note\">Note that toggling this at runtime won't affect already overlapping events.</div>\n             *\n             * @prp {Boolean}\n             * @default\n             * @category Scheduled events\n             */\n            allowOverlap : true,\n\n            /**\n             * The height in pixels of Scheduler rows.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            rowHeight : 60,\n\n            /**\n             * Scheduler overrides Grids default implementation of {@link Grid.view.GridBase#config-getRowHeight} to\n             * pre-calculate row heights based on events in the rows.\n             *\n             * The amount of rows that are pre-calculated is limited for performance reasons. The limit is configurable\n             * by specifying the {@link Scheduler.view.SchedulerBase#config-preCalculateHeightLimit} config.\n             *\n             * The results of the calculation are cached internally.\n             *\n             * @config {Function} getRowHeight\n             * @param {Scheduler.model.ResourceModel} getRowHeight.record Resource record to determine row height for\n             * @returns {Number} Desired row height\n             * @category Layout\n             */\n\n            /**\n             * Maximum number of resources for which height is pre-calculated. If you have many events per\n             * resource you might want to lower this number to gain some initial rendering performance.\n             *\n             * Specify a falsy value to opt out of row height pre-calculation.\n             *\n             * @config {Number}\n             * @default\n             * @category Layout\n             */\n            preCalculateHeightLimit : 10000,\n\n            crudManagerClass : CrudManager,\n\n            testConfig : {\n                loadMaskError : {\n                    autoClose : 10,\n                    showDelay : 0\n                }\n            }\n        };\n    }\n\n    timeCellSelector          = '.b-sch-timeaxis-cell';\n    resourceTimeRangeSelector = '.b-sch-resourcetimerange';\n\n    // <remove-on-release>\n    // Keep this commented out to have easy access to the syntax next time we need to use it\n    // static get deprecatedEvents() {\n    //     return {\n    //         eventContextMenuBeforeShow : {\n    //             product            : 'Scheduler',\n    //             invalidAsOfVersion : '5.0.0',\n    //             message            : '`eventContextMenuBeforeShow` event is deprecated, in favor of `eventMenuBeforeShow` event. Please see https://bryntum.com/products/scheduler/docs/guide/Scheduler/upgrades/3.1.0 for more information.'\n    //         }\n    //     };\n    // }\n    // </remove-on-release>\n\n    //endregion\n\n    //region Store & model docs\n\n    // Documented here instead of in SchedulerStores since SchedulerPro uses different types\n\n    // Configs\n\n    /**\n     * Inline events, will be loaded into an internally created EventStore.\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Data\n     */\n\n    /**\n     * The {@link Scheduler.data.EventStore} holding the events to be rendered into the scheduler (required).\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n\n    /**\n     * Inline resources, will be loaded into an internally created ResourceStore.\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n\n    /**\n     * The {@link Scheduler.data.ResourceStore} holding the resources to be rendered into the scheduler (required).\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n\n    /**\n     * Inline assignments, will be loaded into an internally created AssignmentStore.\n     * @config {Scheduler.model.AssignmentModel[]|Object[]} assignments\n     * @category Data\n     */\n\n    /**\n     * The optional {@link Scheduler.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Inline dependencies, will be loaded into an internally created DependencyStore.\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n\n    /**\n     * The optional {@link Scheduler.data.DependencyStore}.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n\n    // Properties\n\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Data\n     */\n\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Data\n     */\n\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|Object[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Data\n     */\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired after rendering an event, when its element is available in DOM.\n     * @event renderEvent\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment record\n     * @param {Object} renderData An object containing details about the event rendering, see\n     *   {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventRenderer} for details\n     * @param {Boolean} isRepaint `true` if this render is a repaint of the event, updating its existing element\n     * @param {Boolean} isReusingElement `true` if this render lead to the event reusing a released events element\n     * @param {HTMLElement} element The event bar element\n     */\n\n    /**\n     * Fired after releasing an event, useful to cleanup of custom content added on `renderEvent` or in `eventRenderer`.\n     * @event releaseEvent\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment record\n     * @param {Object} renderData An object containing details about the event rendering\n     * @param {HTMLElement} element The event bar element\n     */\n\n    /**\n     * Fired when clicking a resource header cell\n     * @event resourceHeaderClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Fired when double clicking a resource header cell\n     * @event resourceHeaderDblclick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Fired when activating context menu on a resource header cell\n     * @event resourceHeaderContextmenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {Event} event The event\n     */\n\n    /**\n     * Triggered when a keydown event is observed if there are selected events.\n     * @event eventKeyDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel[]} eventRecords The selected event records\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a keyup event is observed if there are selected events.\n     * @event eventKeyUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.model.EventModel[]} eventRecords The selected event records\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The selected assignment records\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    //endregion\n\n    //region Functions injected by features\n\n    // For documentation & typings purposes\n\n    /**\n     * Opens an editor UI to edit the passed event.\n     *\n     * *NOTE: Only available when the {@link Scheduler/feature/EventEdit EventEdit} feature is enabled.*\n     *\n     * @function editEvent\n     * @param {Scheduler.model.EventModel} eventRecord Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using\n     * multi assignment.\n     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)\n     * @category Feature shortcuts\n     */\n\n    /**\n     * Returns the dependency record for a DOM element\n     *\n     * *NOTE: Only available when the {@link Scheduler/feature/Dependencies Dependencies} feature is enabled.*\n     *\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Scheduler.model.DependencyModel} The dependency record\n     * @category Feature shortcuts\n     */\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const me = this;\n\n        super.afterConstruct();\n\n        me.ion({ scroll : 'onVerticalScroll', thisObj : me });\n\n        if (me.createEventOnDblClick) {\n            me.ion({ scheduledblclick : me.onTimeAxisCellDblClick });\n        }\n    }\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    //endregion\n\n    //region Config getters/setters\n\n    // Placeholder getter/setter for mixins, please make any changes needed to SchedulerStores#store instead\n    get store() {\n        return super.store;\n    }\n\n    set store(store) {\n        super.store = store;\n    }\n\n    /**\n     * Returns an object defining the range of visible resources\n     * @property {Object}\n     * @property {Scheduler.model.ResourceModel} visibleResources.first First visible resource\n     * @property {Scheduler.model.ResourceModel} visibleResources.last Last visible resource\n     * @readonly\n     * @category Resources\n     */\n    get visibleResources() {\n        const me = this;\n\n        if (me.isVertical) {\n            return me.currentOrientation.visibleResources;\n        }\n\n        return {\n            first : me.store.getById(me.firstVisibleRow?.id),\n            last  : me.store.getById(me.lastVisibleRow?.id)\n        };\n    }\n\n    //endregion\n\n    //region Event handlers\n\n    onLocaleChange() {\n        this.currentOrientation.onLocaleChange();\n\n        super.onLocaleChange();\n    }\n\n    onTimeAxisCellDblClick({ date : startDate, resourceRecord, row }) {\n        this.createEvent(startDate, resourceRecord, row);\n    }\n\n    onVerticalScroll({ scrollTop }) {\n        this.currentOrientation.updateFromVerticalScroll(scrollTop);\n    }\n\n    /**\n     * Called when new event is created.\n     * Сan be overridden to supply default record values etc.\n     * @param {Scheduler.model.EventModel} eventRecord Newly created event\n     * @category Scheduled events\n     */\n    onEventCreated(eventRecord) {}\n\n    //endregion\n\n    //region Mode\n\n    /**\n     * Checks if scheduler is in horizontal mode\n     * @returns {Boolean}\n     * @readonly\n     * @category Common\n     * @private\n     */\n    get isHorizontal() {\n        return this.mode === 'horizontal';\n    }\n\n    /**\n     * Checks if scheduler is in vertical mode\n     * @returns {Boolean}\n     * @readonly\n     * @category Common\n     * @private\n     */\n    get isVertical() {\n        return this.mode === 'vertical';\n    }\n\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    set mode(mode) {\n        const me = this;\n\n        me._mode = mode;\n\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n\n            if (mode === 'horizontal') {\n                me.horizontal = new HorizontalRendering(me);\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new VerticalRendering(me);\n\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n\n    get currentOrientation() {\n        return this[this.mode];\n    }\n\n    //endregion\n\n    //region Dom event dummies\n\n    // this is ugly, but needed since super cannot be called from SchedulerDomEvents mixin...\n\n    onElementKeyDown(event) {\n        return super.onElementKeyDown(event);\n    }\n\n    onElementKeyUp(event) {\n        return super.onElementKeyUp(event);\n    }\n\n    onElementMouseOver(event) {\n        return super.onElementMouseOver(event);\n    }\n\n    onElementMouseOut(event) {\n        return super.onElementMouseOut(event);\n    }\n\n    //endregion\n\n    //region Feature hooks\n\n    // Called for each event during drop\n    processEventDrop() {}\n    processCrossSchedulerEventDrop() {}\n\n    // Called before event drag starts\n    beforeEventDragStart() {}\n\n    // Called after event drag starts\n    afterEventDragStart() {}\n\n    // Called after aborting a drag\n    afterEventDragAbortFinalized() {}\n\n    // Called during event drag validation\n    checkEventDragValidity() {}\n\n    // Called after event resizing starts\n    afterEventResizeStart() {}\n\n    // Called after generating a DomConfig for an event\n    afterRenderEvent() {}\n\n    //endregion\n\n    //region Scheduler specific date mapping functions\n\n    get hasEventEditor() {\n        return Boolean(this.eventEditingFeature);\n    }\n\n    get eventEditingFeature() {\n        const {\n            eventEdit,\n            taskEdit,\n            simpleEventEdit\n        } = this.features;\n\n        return eventEdit?.enabled\n            ? eventEdit\n            : taskEdit?.enabled\n                ? taskEdit\n                : simpleEventEdit?.enabled ? simpleEventEdit : null;\n    }\n\n    // Method is chained by event editing features. Ensure that the event is in the store.\n    editEvent(eventRecord, resourceRecord, element) {\n        const\n            me = this,\n            {\n                eventStore,\n                assignmentStore\n            } = me;\n\n        // Abort the chain if no event editing features available\n        if (!me.hasEventEditor) {\n            return false;\n        }\n\n        if (eventRecord.eventStore !== eventStore) {\n            const\n                { enableEventAnimations } = me,\n                resourceRecords           = [];\n\n            // It's only a provisional event because we are going to edit it which will\n            // allow an opportunity to cancel the add (by removing it).\n            eventRecord.isCreating = true;\n\n            let assignmentRecords = [];\n\n            if (resourceRecord) {\n                resourceRecords.push(resourceRecord);\n                assignmentRecords = assignmentStore.assignEventToResource(eventRecord, resourceRecord);\n            }\n\n            // Vetoable beforeEventAdd allows cancel of this operation\n            if (me.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n                // Remove any assignment created above, to leave store as it was\n                assignmentStore?.remove(assignmentRecords);\n\n                return false;\n            }\n\n            me.enableEventAnimations = false;\n            eventStore.add(eventRecord);\n            me.project.commitAsync().then(() => me.enableEventAnimations = enableEventAnimations);\n\n            // Element must be created synchronously, not after the project's normalizing delays.\n            me.refreshRows();\n        }\n    }\n\n    /**\n     * Creates an event on the specified date (and scrolls it into view), for the specified resource which conforms to\n     * this scheduler's {@link #config-createEventOnDblClick} setting.\n     *\n     * NOTE: If the scheduler is readonly, or resource type is invalid (group header), or if `allowOverlap` is `false`\n     * and slot is already occupied - no event is created.\n     *\n     * This method may be called programmatically by application code if the `createEventOnDblClick` setting\n     * is `false`, in which case the default values for `createEventOnDblClick` will be used.\n     *\n     * If the {@link Scheduler.feature.EventEdit} feature is active, the new event\n     * will be displayed in the event editor.\n     * @param {Date} date The date to add the event at.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource to create the event for.\n     * @category Scheduled events\n     */\n    async createEvent(startDate, resourceRecord) {\n        const\n            me                    = this,\n            {\n                enableEventAnimations,\n                eventStore,\n                assignmentStore,\n                hasEventEditor\n            }                     = me,\n            resourceRecords       = [resourceRecord],\n            useEventModelDefaults = me.createEventOnDblClick.useEventModelDefaults,\n            defaultDuration       = useEventModelDefaults ? eventStore.modelClass.defaultValues.duration : 1,\n            defaultDurationUnit   = useEventModelDefaults ? eventStore.modelClass.defaultValues.durationUnit : me.timeAxis.unit,\n            eventRecord           = eventStore.createRecord({\n                startDate,\n                endDate      : DateHelper.add(startDate, defaultDuration, defaultDurationUnit),\n                duration     : defaultDuration,\n                durationUnit : defaultDurationUnit,\n                name         : me.L('L{Object.newEvent}')\n            });\n\n        if (me.readOnly || resourceRecord.isSpecialRow || resourceRecord.readOnly || (!me.allowOverlap && !me.isDateRangeAvailable(\n            eventRecord.startDate,\n            eventRecord.endDate,\n            null,\n            resourceRecord\n        ))) {\n            return;\n        }\n\n        me.eventEditingFeature?.captureStm(true);\n\n        // It's only a provisional event if there is an event edit feature available to\n        // cancel the add (by removing it). Otherwise it's a definite event creation.\n        eventRecord.isCreating = hasEventEditor;\n\n        me.onEventCreated(eventRecord);\n\n        const assignmentRecords = assignmentStore?.assignEventToResource(eventRecord, resourceRecord);\n\n        /**\n         * Fires before an event is added. Can be triggered by schedule double click or drag create action.\n         * @event beforeEventAdd\n         * @param {Scheduler.view.Scheduler} source The Scheduler instance\n         * @param {Scheduler.model.EventModel} eventRecord The record about to be added\n         * @param {Scheduler.model.ResourceModel[]} resourceRecords Resources that the record is assigned to\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records\n         * @preventable\n         */\n        if (me.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n            // Remove any assignment created above, to leave store as it was\n            assignmentStore?.remove(assignmentRecords);\n\n            me.eventEditingFeature?.freeStm(false);\n\n            return;\n        }\n\n        me.enableEventAnimations = false;\n        eventStore.add(eventRecord);\n        me.project.commitAsync().then(() => me.enableEventAnimations = enableEventAnimations);\n\n        // Element must be created synchronously, not after the project's normalizing delays.\n        // Overrides the check for isEngineReady in VerticalRendering so that the newly added record\n        // will be rendered when we call refreshRows.\n        me.isCreating = true;\n        me.refreshRows();\n        me.isCreating = false;\n\n        await me.scrollEventIntoView(eventRecord);\n\n        /**\n         * Fired when a double click or drag gesture has created a new event and added it to the event store.\n         * @event eventAutoCreated\n         * @param {Scheduler.view.Scheduler} source This Scheduler.\n         * @param {Scheduler.model.EventModel} eventRecord The new event record.\n         * @param {Scheduler.model.ResourceModel} resourceRecord The resource assigned to the new event.\n         */\n        me.trigger('eventAutoCreated', {\n            eventRecord,\n            resourceRecord\n        });\n\n        if (hasEventEditor) {\n            me.editEvent(eventRecord, resourceRecord, me.getEventElement(eventRecord));\n        }\n    }\n\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Dates\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        return this.eventStore.isDateRangeAvailable(start, end, excludeEvent, resource);\n    }\n    //endregion\n\n    /**\n     * Suspends UI refresh on store operations.\n     *\n     * Multiple calls to `suspendRefresh` stack up, and will require an equal number of `resumeRefresh` calls to\n     * actually resume UI refresh.\n     *\n     * @function suspendRefresh\n     * @category Rendering\n     */\n\n    /**\n     * Resumes UI refresh on store operations.\n     *\n     * Multiple calls to `suspendRefresh` stack up, and will require an equal number of `resumeRefresh` calls to\n     * actually resume UI refresh.\n     *\n     * Specify `true` as the first param to trigger a refresh if this call unblocked the refresh suspension.\n     * If the underlying project is calculating changes, the refresh will be postponed until it is done.\n     *\n     * @param {Boolean} trigger `true` to trigger a refresh, if this resume unblocks suspension\n     * @category Rendering\n     */\n    async resumeRefresh(trigger) {\n        super.resumeRefresh(false);\n\n        const me = this;\n\n        if (!me.refreshSuspended && trigger) {\n            // Do not refresh until project is in a valid state\n            if (!me.isEngineReady) {\n                // Refresh will happen because of the commit, bail out of this one after forcing rendering to consider\n                // next one a full refresh\n                me.currentOrientation.refreshAllWhenReady = true;\n                return me.project.commitAsync();\n            }\n\n            // View could've been destroyed while we waited for engine\n            if (!me.isDestroyed) {\n                // If it already is, refresh now\n                me.refreshWithTransition();\n            }\n        }\n    }\n\n    //region Appearance\n\n    // Overrides grid to take crudManager loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n\n        if (me.bodyContainer) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.resourceStore.count > 0 || me.crudManager?.isLoading));\n        }\n    }\n\n    // Overrides Grids base implementation to return a correctly calculated height for the row. Also stores it in\n    // RowManagers height map, which is used to calculate total height etc.\n    getRowHeight(resourceRecord) {\n        if (this.isHorizontal) {\n            const height = this.currentOrientation.calculateRowHeight(resourceRecord);\n            this.rowManager.storeKnownHeight(resourceRecord.id, height);\n            return height;\n        }\n    }\n\n    // Calculates the height for specified rows. Call when changes potentially makes its height invalid\n    calculateRowHeights(resourceRecords, silent = false) {\n        // Array allowed to have nulls in it for easier code when calling this fn\n        resourceRecords.forEach(resourceRecord => resourceRecord && this.getRowHeight(resourceRecord));\n\n        if (!silent) {\n            this.rowManager.estimateTotalHeight(true);\n        }\n    }\n\n    // Calculate heights for all rows (up to the preCalculateHeightLimit)\n    calculateAllRowHeights(silent = false) {\n        const\n            { store, rowManager } = this,\n            count                 = Math.min(store.count, this.preCalculateHeightLimit);\n\n        // Allow opt out by specifying falsy value.\n        if (count) {\n            rowManager.clearKnownHeights();\n\n            for (let i = 0; i < count; i++) {\n                // This will both calculate and store the height\n                this.getRowHeight(store.getAt(i));\n            }\n\n            // Make sure height is reflected on scroller etc.\n            if (!silent) {\n                rowManager.estimateTotalHeight(true);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Calendar Mode Interface\n\n    // These are all internal and match up w/CalendarMixin\n\n    /**\n     * Returns the date or ranges of included dates as an array. If only the {@link #config-startDate} is significant,\n     * the array will have that date as its only element. Otherwise, a range of dates is returned as a two-element\n     * array with `[0]` is the {@link #config-startDate} and `[1]` is the {@link #property-lastDate}.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        const\n            me  = this,\n            ret = [me.startDate];\n\n        if (me.range === 'week') {\n            ret.push(me.lastDate);\n        }\n\n        return ret;\n    }\n\n    get defaultDescriptionFormat() {\n        return descriptionFormats[this.range];\n    }\n\n    /**\n     * The last day that is included in the date range. This is different than {@link #config-endDate} since that date\n     * is not inclusive. For example, an `endDate` of 2022-07-21 00:00:00 indicates that the time range ends at that\n     * time, and so 2022-07-21 is _not_ in the range. In this example, `lastDate` would be 2022-07-20 since that is the\n     * last day included in the range.\n     * @member {Date}\n     * @internal\n     */\n    get lastDate() {\n        const lastDate = this.endDate;\n\n        // endDate is \"exclusive\" because it means 00:00:00 of that day, so subtract 1\n        // to keep description consistent with human expectations.\n        return lastDate && DateHelper.add(lastDate, -1, 'day');\n    }\n\n    getEventRecord(target) {\n        target = DomHelper.getEventElement(target);\n\n        return this.resolveEventRecord(target);\n    }\n\n    getEventElement(eventRecord) {\n        return this.getElementFromEventRecord(eventRecord);\n    }\n\n    changeRange(unit) {\n        return DateHelper.normalizeUnit(unit);\n    }\n\n    updateRange(unit) {\n        if (!this.isConfiguring) {\n            const\n                currentDate = this.date,\n                newDate     = this.date = DateHelper.startOf(currentDate, unit);\n\n            // Force a span update if changing the range did not change the date\n            if (currentDate.getTime() === newDate.getTime()) {\n                this.updateDate(newDate);\n            }\n        }\n    }\n\n    changeStepUnit(unit) {\n        return DateHelper.normalizeUnit(unit);\n    }\n\n    updateDate(newDate) {\n        const\n            me    = this,\n            start = DateHelper.startOf(newDate, me.range);\n\n        me.setTimeSpan(start, DateHelper.add(start, 1, me.range));\n\n        // Cant always use newDate here in case timeAxis is filtered\n        me.visibleDate = {\n            date    : DateHelper.max(newDate, me.timeAxis.startDate),\n            block   : 'start',\n            animate : true\n        };\n\n        me.trigger('descriptionChange');\n    }\n\n    updateScrollBuffer(value) {\n        if (!this.isConfiguring) {\n            this.currentOrientation.scrollBuffer = value;\n        }\n    }\n\n    previous() {\n        this.date = DateHelper.add(this.date, -1, this.stepUnit);\n    }\n\n    next() {\n        this.date = DateHelper.add(this.date, 1, this.stepUnit);\n    }\n\n    //endregion\n\n    /**\n     * Assigns and schedules an unassigned event record (+ adds it to this Scheduler's event store unless already in it).\n     * @param {Object} config The config containing data about the event record to schedule\n     * @param {Date} config.startDate The start date\n     * @param {Scheduler.model.EventModel|EventModelConfig} config.eventRecord Event (or data for it) to assign and schedule\n     * @param {Scheduler.model.EventModel} [config.parentEventRecord] Parent event to add the event to (to nest it),\n     * only applies when using the NestedEvents feature\n     * @param {Scheduler.model.ResourceModel} config.resourceRecord Resource to assign the event to\n     * @param {HTMLElement} [config.element] The element if you are dragging an element from outside the scheduler\n     * @category Scheduled events\n     */\n    async scheduleEvent({ startDate, eventRecord, resourceRecord, element }) {\n        const me = this;\n\n        // NestedEvents has an override for this function to handle parentEventRecord\n\n        if (!me.eventStore.includes(eventRecord)) {\n            [eventRecord] = me.eventStore.add(eventRecord);\n        }\n\n        eventRecord.startDate = startDate;\n        eventRecord.assign(resourceRecord);\n\n        if (element) {\n            const eventRect = Rectangle.from(element, me.foregroundCanvas);\n\n            // Clear translate styles used by DragHelper\n            DomHelper.setTranslateXY(element, 0, 0);\n            DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n\n            DomSync.addChild(me.foregroundCanvas, element, eventRecord.assignments[0].id);\n        }\n\n        await me.project.commitAsync();\n    }\n}\n\n// Register this widget type with its Factory\nSchedulerBase.initClass();\n\n// Scheduler version is specified in TimelineBase because Gantt extends it\n", "import ColorPicker from '../../Core/widget/ColorPicker.js';\nimport SchedulerBase from '../view/SchedulerBase.js';\n/**\n * @module Scheduler/widget/EventColorPicker\n */\n\n/**\n * A color picker that displays a list of available event colors which the user can select by using mouse or keyboard.\n * See Schedulers {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config} for default\n * available colors.\n *\n * {@inlineexample Scheduler/widget/EventColorPicker.js}\n *\n * ```javascript\n * new EventColorPicker({\n *    appendTo : 'container',\n *    width    : '10em',\n *    onColorSelected() {\n *        console.log(...arguments);\n *    }\n * });\n * ```\n *\n * @classType colorpicker\n * @extends Core/widget/ColorPicker\n */\nexport default class EventColorPicker extends ColorPicker {\n    static $name = 'EventColorPicker';\n\n    static type = 'eventcolorpicker';\n\n    static configurable = {\n\n        colorClasses : SchedulerBase.eventColors,\n\n        colorClassPrefix : 'b-sch-',\n\n        /**\n         * @hideconfigs colors\n         */\n\n        colors : null,\n\n        /**\n         * Provide a {@link Scheduler.model.EventModel} instance to update it's\n         * {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} field\n         * @config {Scheduler.model.EventModel}\n         */\n        record : null\n    };\n\n    colorSelected({ color }) {\n        if (this.record) {\n            this.record.eventColor = color;\n        }\n    }\n}\n\nEventColorPicker.initClass();\n", "import Base from '../../Core/Base.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\n\n/**\n * @module Scheduler/tooltip/ClockTemplate\n */\n\n/**\n * A template showing a clock, it consumes an object containing a date and a text\n * @private\n */\nexport default class ClockTemplate extends Base {\n    static get defaultConfig() {\n        return {\n            minuteHeight : 8,\n            minuteTop    : 2,\n            hourHeight   : 8,\n            hourTop      : 2,\n            handLeft     : 10,\n            div          : document.createElement('div'),\n            scheduler    : null, // may be passed to the constructor if needed\n            // `b-sch-clock-day` for calendar icon\n            // `b-sch-clock-hour` for clock icon\n            template(data) {\n                return `<div class=\"b-sch-clockwrap b-sch-clock-${data.mode || this.mode} ${data.cls || ''}\">\n                    <div class=\"b-sch-clock\">\n                        <div class=\"b-sch-hour-indicator\">${DateHelper.format(data.date, 'MMM')}</div>\n                        <div class=\"b-sch-minute-indicator\">${DateHelper.format(data.date, 'D')}</div>\n                        <div class=\"b-sch-clock-dot\"></div>\n                    </div>\n                    <span class=\"b-sch-clock-text\">${StringHelper.encodeHtml(data.text)}</span>\n                </div>`;\n            }\n        };\n    }\n\n    generateContent(data) {\n        return this.div.innerHTML = this.template(data);\n    }\n\n    updateDateIndicator(el, date) {\n        const\n            hourIndicatorEl   = el?.querySelector('.b-sch-hour-indicator'),\n            minuteIndicatorEl = el?.querySelector('.b-sch-minute-indicator');\n\n        if (date && hourIndicatorEl && minuteIndicatorEl && BrowserHelper.isBrowserEnv) {\n            if (this.mode === 'hour') {\n                hourIndicatorEl.style.transform   = `rotate(${(date.getHours() % 12) * 30}deg)`;\n                minuteIndicatorEl.style.transform = `rotate(${date.getMinutes() * 6}deg)`;\n            }\n            else {\n                hourIndicatorEl.style.transform   = 'none';\n                minuteIndicatorEl.style.transform = 'none';\n            }\n        }\n    }\n\n    set mode(mode) {\n        this._mode = mode;\n    }\n\n    // `day` mode for calendar icon\n    // `hour` mode for clock icon\n    get mode() {\n        if (this._mode) {\n            return this._mode;\n        }\n\n        //<debug>\n        if (!this.scheduler) {\n            throw new Error('`scheduler` config has to be specified for the clock template');\n        }\n        //</debug>\n\n        const\n            unitLessThanDay        = DateHelper.compareUnits(this.scheduler.timeAxisViewModel.timeResolution.unit, 'day') < 0,\n            formatContainsHourInfo = DateHelper.formatContainsHourInfo(this.scheduler.displayDateFormat);\n\n        return unitLessThanDay && formatContainsHourInfo ? 'hour' : 'day';\n    }\n\n    set template(template) {\n        this._template = template;\n    }\n\n    /**\n     * Get the clock template, which accepts an object of format { date, text }\n     * @property {function(*): string}\n     */\n    get template() {\n        return this._template;\n    }\n}\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Scheduler/feature/mixin/TaskEditStm\n */\n\n/**\n * Mixin adding STM transactable behavior to TaskEdit feature.\n *\n * @mixin\n */\nexport default Target => class TaskEditStm extends (Target || Base) {\n    static get $name() {\n        return 'TaskEditStm';\n    }\n\n    getStmCapture() {\n        return {\n            stmInitiallyAutoRecord : this.stmInitiallyAutoRecord,\n            stmInitiallyDisabled   : this.stmInitiallyDisabled,\n            // this flag indicates whether the STM capture has been transferred to\n            // another feature, which will be responsible for finalizing the STM transaction\n            // (otherwise we'll do it ourselves)\n            transferred            : false\n        };\n    }\n\n    applyStmCapture(stmCapture) {\n        this.stmInitiallyAutoRecord = stmCapture.stmInitiallyAutoRecord;\n        this.stmInitiallyDisabled = stmCapture.stmInitiallyDisabled;\n    }\n\n    captureStm(startTransaction = false) {\n        const\n            me      = this,\n            project = me.project,\n            stm     = project.getStm();\n\n        if (me.hasStmCapture) {\n            return;\n        }\n\n        me.hasStmCapture = true;\n        me.stmInitiallyDisabled = stm.disabled;\n        me.stmInitiallyAutoRecord = stm.autoRecord;\n\n        if (me.stmInitiallyDisabled) {\n            stm.enable();\n            // it seems this branch has never been exercised by tests\n            // but the intention is to stop the auto-recording while\n            // task editor is active (all editing is one manual transaction)\n            stm.autoRecord = false;\n        }\n        else {\n            if (me.stmInitiallyAutoRecord) {\n                stm.autoRecord = false;\n            }\n            if (stm.isRecording) {\n                stm.stopTransaction();\n            }\n        }\n\n        if (startTransaction) {\n            this.startStmTransaction();\n        }\n    }\n\n    startStmTransaction() {\n        this.project.getStm().startTransaction();\n    }\n\n    commitStmTransaction() {\n        const\n            me  = this,\n            stm = me.project.getStm();\n\n        if (!me.hasStmCapture) {\n            throw new Error('Does not have STM capture, no transaction to commit');\n        }\n\n        if (stm.enabled) {\n            stm.stopTransaction();\n\n            if (me.stmInitiallyDisabled) {\n                stm.resetQueue();\n            }\n        }\n    }\n\n    async rejectStmTransaction() {\n        const\n            stm        = this.project.getStm(),\n            { client } = this;\n\n        if (!this.hasStmCapture) {\n            throw new Error('Does not have STM capture, no transaction to reject');\n        }\n\n        if (stm.enabled) {\n            if (stm.transaction?.length) {\n                client.suspendRefresh();\n\n                stm.rejectTransaction();\n\n                await client.resumeRefresh(true);\n            }\n            else {\n                stm.stopTransaction();\n            }\n        }\n    }\n\n    enableStm() {\n        this.project.getStm().enable();\n    }\n\n    disableStm() {\n        this.project.getStm().disable();\n    }\n\n    async freeStm(commitOrReject = null) {\n        const\n            me  = this,\n            stm = me.project.getStm(),\n            {\n                stmInitiallyDisabled,\n                stmInitiallyAutoRecord\n            } = me;\n\n        if (!me.hasStmCapture) {\n            return;\n        }\n\n        let promise;\n\n        me.rejectingStmTransaction = true;\n\n        if (commitOrReject === true) {\n            promise = me.commitStmTransaction();\n        }\n        else if (commitOrReject === false) {\n            // Note - we don't wait for async to complete here\n            promise = me.rejectStmTransaction();\n        }\n\n        await promise;\n\n        if (!stm.isDestroying) {\n            stm.disabled = stmInitiallyDisabled;\n            stm.autoRecord = stmInitiallyAutoRecord;\n        }\n\n        if (!me.isDestroying) {\n            me.rejectingStmTransaction = true;\n            me.hasStmCapture = false;\n        }\n    };\n};\n", "import ContextMenuBase from '../../../Core/feature/base/ContextMenuBase.js';\n\n/**\n * @module Scheduler/feature/base/TimeSpanMenuBase\n */\n\n/**\n * Abstract base class used by other context menu features which show the context menu for TimeAxis.\n * Using this class you can make sure the menu expects the target to disappear,\n * since it can be scroll out of the scheduling zone.\n *\n * Features that extend this class are:\n *  * {@link Scheduler/feature/EventMenu};\n *  * {@link Scheduler/feature/ScheduleMenu};\n *  * {@link Scheduler/feature/TimeAxisHeaderMenu};\n *\n * @extends Core/feature/base/ContextMenuBase\n * @abstract\n */\nexport default class TimeSpanMenuBase extends ContextMenuBase {\n}\n", "import Combo from '../../../../Core/widget/Combo.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceFrequencyCombo\n */\n\n/**\n * A combobox field allowing to pick frequency in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * @extends Core/widget/Combo\n * @classType recurrencefrequencycombo\n */\nexport default class RecurrenceFrequencyCombo extends Combo {\n\n    static $name = 'RecurrenceFrequencyCombo';\n\n    // Factoryable type name\n    static type = 'recurrencefrequencycombo';\n\n    static configurable = {\n        editable              : false,\n        displayField          : 'text',\n        valueField            : 'value',\n        localizeDisplayFields : true,\n        addNone               : false\n    };\n\n    buildItems() {\n        return [\n            ...(this.addNone ? [{ text : 'L{None}', value : 'NONE' }] : []),\n            { value : 'DAILY',   text : 'L{Daily}' },\n            { value : 'WEEKLY',  text : 'L{Weekly}' },\n            { value : 'MONTHLY', text : 'L{Monthly}' },\n            { value : 'YEARLY',  text : 'L{Yearly}' }\n        ];\n    }\n};\n\n// Register this widget type with its Factory\nRecurrenceFrequencyCombo.initClass();\n", "import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Combo from '../../../../Core/widget/Combo.js';\nimport RecurrenceDayRuleEncoder from '../../../data/util/recurrence/RecurrenceDayRuleEncoder.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceDaysCombo\n */\n\n/**\n * A combobox field allowing to pick days for the `Monthly` and `Yearly` mode in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * @extends Core/widget/Combo\n * @classType recurrencedayscombo\n */\nexport default class RecurrenceDaysCombo extends Combo {\n\n    static get $name() {\n        return 'RecurrenceDaysCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencedayscombo';\n    }\n\n    static get defaultConfig() {\n        const\n            allDaysValueAsArray = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'],\n            allDaysValue        = allDaysValueAsArray.join(',');\n\n        return {\n            allDaysValue,\n            editable            : false,\n            defaultValue        : allDaysValue,\n            workingDaysValue    : allDaysValueAsArray.filter((day, index) => !DateHelper.nonWorkingDays[index]).join(','),\n            nonWorkingDaysValue : allDaysValueAsArray.filter((day, index) => DateHelper.nonWorkingDays[index]).join(','),\n            splitCls            : 'b-recurrencedays-split',\n            displayField        : 'text',\n            valueField          : 'value'\n        };\n    }\n\n    buildItems() {\n        const me = this;\n\n        me._weekDays = null;\n\n        return me.weekDays.concat([\n            { value : me.allDaysValue,        text : me.L('L{day}'), cls : me.splitCls },\n            { value : me.workingDaysValue,    text : me.L('L{weekday}') },\n            { value : me.nonWorkingDaysValue, text : me.L('L{weekend day}') }\n        ]);\n    }\n\n    get weekDays() {\n        const me = this;\n\n        if (!me._weekDays) {\n            const weekStartDay = DateHelper.weekStartDay;\n\n            const dayNames = DateHelper.getDayNames().map((text, index) => ({ text, value : RecurrenceDayRuleEncoder.encodeDay(index) }));\n\n            // we should start week w/ weekStartDay\n            me._weekDays = dayNames.slice(weekStartDay).concat(dayNames.slice(0, weekStartDay));\n        }\n\n        return me._weekDays;\n    }\n\n    set value(value) {\n        const me = this;\n\n        if (value && Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        // if the value has no matching option in the store we need to use default value\n        if (!value || !me.store.findRecord('value', value)) {\n            value = me.defaultValue;\n        }\n\n        super.value = value;\n    }\n\n    get value() {\n        let value = super.value;\n\n        if (value && Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        return value;\n    }\n}\n\n// Register this widget type with its Factory\nRecurrenceDaysCombo.initClass();\n", "import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport ButtonGroup from '../../../../Core/widget/ButtonGroup.js';\nimport RecurrenceDayRuleEncoder from '../../../data/util/recurrence/RecurrenceDayRuleEncoder.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceDaysButtonGroup\n */\n\n/**\n * A segmented button field allowing to pick days for the \"Weekly\" mode in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * {@inlineexample Scheduler/view/RecurrenceDaysButtonGroup.js}\n *\n * @extends Core/widget/ButtonGroup\n */\nexport default class RecurrenceDaysButtonGroup extends ButtonGroup {\n\n    static get $name() {\n        return 'RecurrenceDaysButtonGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencedaysbuttongroup';\n    }\n\n    static get defaultConfig() {\n        return {\n            defaults : {\n                cls        : 'b-raised',\n                toggleable : true\n            }\n        };\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        config.columns = 7;\n        config.items   = me.buildItems();\n\n        super.construct(config);\n    }\n\n    updateItemText(item) {\n        const day = RecurrenceDayRuleEncoder.decodeDay(item.value)[0];\n\n        item.text = DateHelper.getDayName(day).substring(0, 3);\n    }\n\n    buildItems() {\n        const me = this;\n\n        if (!me.__items) {\n            const weekStartDay = DateHelper.weekStartDay;\n\n            const dayNames = DateHelper.getDayNames().map((text, index) => ({\n                text  : text.substring(0, 3),\n                value : RecurrenceDayRuleEncoder.encodeDay(index)\n            }));\n\n            // we should start week w/ weekStartDay\n            me.__items = dayNames.slice(weekStartDay).concat(dayNames.slice(0, weekStartDay));\n        }\n\n        return me.__items;\n    }\n\n    set value(value) {\n        if (value && Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        super.value = value;\n    }\n\n    get value() {\n        let value = super.value;\n\n        if (value && Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        return value;\n    }\n\n    onLocaleChange() {\n        // update button texts on locale switch\n        this.items.forEach(this.updateItemText, this);\n    }\n\n    updateLocalization() {\n        this.onLocaleChange();\n        super.updateLocalization();\n    }\n\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // to look more like a real field\n        classList.push('b-field');\n        return classList;\n    }\n};\n\n// Register this widget type with its Factory\nRecurrenceDaysButtonGroup.initClass();\n", "import ButtonGroup from '../../../../Core/widget/ButtonGroup.js';\n\n/**\n * A segmented button field allowing to pick month days for the `Monthly` mode in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * @extends Core/widget/ButtonGroup\n */\nexport default class RecurrenceMonthDaysButtonGroup extends ButtonGroup {\n\n    static get $name() {\n        return 'RecurrenceMonthDaysButtonGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencemonthdaysbuttongroup';\n    }\n\n    static get defaultConfig() {\n        return {\n            defaults : {\n                toggleable : true,\n                cls        : 'b-raised'\n            }\n        };\n    }\n\n    get minValue() {\n        return 1;\n    }\n\n    get maxValue() {\n        return 31;\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        config.columns = 7;\n        config.items   = me.buildItems();\n\n        super.construct(config);\n    }\n\n    buildItems() {\n        const\n            me    = this,\n            items = [];\n\n        for (let value = me.minValue; value <= me.maxValue; value++) {\n            // button config\n            items.push({\n                text : value + '',\n                value\n            });\n        }\n\n        return items;\n    }\n\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // to look more like a real field\n        classList.push('b-field');\n        return classList;\n    }\n\n};\n\n// Register this widget type with its Factory\nRecurrenceMonthDaysButtonGroup.initClass();\n", "import DateHelper from '../../../../Core/helper/DateHelper.js';\nimport ButtonGroup from '../../../../Core/widget/ButtonGroup.js';\n\n/**\n * A segmented button field allowing to pick months for the `Yearly` mode in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * @extends Core/widget/ButtonGroup\n */\nexport default class RecurrenceMonthsButtonGroup extends ButtonGroup {\n\n    static get $name() {\n        return 'RecurrenceMonthsButtonGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencemonthsbuttongroup';\n    }\n\n    static get defaultConfig() {\n        return {\n            defaults : {\n                toggleable : true,\n                cls        : 'b-raised'\n            }\n        };\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        config.columns = 4;\n        config.items   = me.buildItems();\n\n        super.construct(config);\n    }\n\n    buildItems() {\n        return DateHelper.getMonthNames().map((item, index) => ({\n            text  : item.substring(0, 3),\n            value : index + 1 // 1-based\n        }));\n    }\n\n    updateItemText(item) {\n        item.text = DateHelper.getMonthName(item.value - 1).substring(0, 3);\n    }\n\n    onLocaleChange() {\n        // update button texts on locale switch\n        this.items.forEach(this.updateItemText, this);\n    }\n\n    updateLocalization() {\n        this.onLocaleChange();\n        super.updateLocalization();\n    }\n\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // to look more like a real field\n        classList.push('b-field');\n        return classList;\n    }\n\n};\n\n// Register this widget type with its Factory\nRecurrenceMonthsButtonGroup.initClass();\n", "import Combo from '../../../../Core/widget/Combo.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceStopConditionCombo\n */\n\n/**\n * A combobox field allowing to choose stop condition for the recurrence in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence dialog}.\n *\n * @extends Core/widget/Combo\n * @classType recurrencestopconditioncombo\n */\nexport default class RecurrenceStopConditionCombo extends Combo {\n\n    static get $name() {\n        return 'RecurrenceStopConditionCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencestopconditioncombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable     : false,\n            placeholder  : 'Never',\n            displayField : 'text',\n            valueField   : 'value'\n        };\n    }\n\n    buildItems() {\n        return [\n            { value : 'never', text : this.L('L{Never}') },\n            { value : 'count', text : this.L('L{After}') },\n            { value : 'date',  text : this.L('L{On date}') }\n        ];\n    }\n\n    set value(value) {\n        // Use 'never' instead of falsy value\n        value = value || 'never';\n\n        super.value = value;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    get recurrence() {\n        return this._recurrence;\n    }\n\n    set recurrence(recurrence) {\n        let value = null;\n\n        if (recurrence.endDate) {\n            value = 'date';\n        }\n        else if (recurrence.count) {\n            value = 'count';\n        }\n\n        this._recurrence = recurrence;\n\n        this.value = value;\n    }\n};\n\n// Register this widget type with its Factory\nRecurrenceStopConditionCombo.initClass();\n", "import ArrayHelper from '../../../../Core/helper/ArrayHelper.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrencePositionsCombo\n */\n\n/**\n * A combobox field allowing to specify day positions in the {@link Scheduler.view.recurrence.RecurrenceEditor recurrence editor}.\n *\n * @extends Core/widget/Combo\n * @classType recurrencepositionscombo\n */\nexport default class RecurrencePositionsCombo extends Combo {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{position1}',\n        'L{position2}',\n        'L{position3}',\n        'L{position4}',\n        'L{position5}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'RecurrencePositionsCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencepositionscombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable     : false,\n            splitCls     : 'b-sch-recurrencepositions-split',\n            displayField : 'text',\n            valueField   : 'value',\n            defaultValue : 1,\n            maxPosition  : 5\n        };\n    }\n\n    buildItems() {\n        return this.buildDayNumbers().concat([\n            { value : '-1', text : this.L('L{position-1}'), cls : this.splitCls }\n        ]);\n    }\n\n    buildDayNumbers() {\n        return ArrayHelper.populate(this.maxPosition, i => (\n            { value : i + 1, text : this.L(`position${i + 1}`) }\n        ));\n    }\n\n    set value(value) {\n        const me = this;\n\n        if (value && Array.isArray(value)) {\n            value = value.join(',');\n        }\n\n        // if the value has no matching option in the store we need to use default value\n        if (!value || !me.store.findRecord('value', value)) {\n            value = me.defaultValue;\n        }\n\n        super.value = value;\n    }\n\n    get value() {\n        const value = super.value;\n\n        return value ? `${value}`.split(',').map(item => parseInt(item, 10)) : [];\n    }\n\n};\n\n// Register this widget type with its Factory\nRecurrencePositionsCombo.initClass();\n", "import RecurrenceDayRuleEncoder from '../../data/util/recurrence/RecurrenceDayRuleEncoder.js';\nimport Panel from '../../../Core/widget/Panel.js';\nimport '../../../Core/widget/Widget.js';\nimport '../../../Core/widget/Button.js';\nimport '../../../Core/widget/Checkbox.js';\nimport '../../../Core/widget/SlideToggle.js';\nimport '../../../Core/widget/DateField.js';\nimport '../../../Core/widget/NumberField.js';\nimport './field/RecurrenceFrequencyCombo.js';\nimport './field/RecurrenceDaysCombo.js';\nimport './field/RecurrenceDaysButtonGroup.js';\nimport './field/RecurrenceMonthDaysButtonGroup.js';\nimport './field/RecurrenceMonthsButtonGroup.js';\nimport './field/RecurrenceStopConditionCombo.js';\nimport './field/RecurrencePositionsCombo.js';\nimport BrowserHelper from '../../../Core/helper/BrowserHelper.js';\n\n/**\n * @module Scheduler/view/recurrence/RecurrenceEditorPanel\n */\n\n/**\n * Panel containing fields used to edit a {@link Scheduler.model.RecurrenceModel recurrence model}. Used by\n * {@link Scheduler/view/recurrence/RecurrenceEditor}, and by the recurrence tab in Scheduler Pro's event editor.\n *\n * Not intended to be used separately.\n *\n * @extends Core/widget/Panel\n * @classType recurrenceeditorpanel\n * @private\n */\nexport default class RecurrenceEditorPanel extends Panel {\n\n    static $name = 'RecurrenceEditorPanel';\n\n    static type = 'recurrenceeditorpanel';\n\n    static configurable = {\n        cls     : 'b-recurrenceeditor',\n        record  : false,\n        addNone : false,\n        items   : {\n            frequencyField : {\n                type     : 'recurrencefrequencycombo',\n                name     : 'frequency',\n                label    : 'L{RecurrenceEditor.Frequency}',\n                weight   : 10,\n                onChange : 'up.onFrequencyFieldChange',\n                addNone  : 'up.addNone'\n            },\n            intervalField : {\n                type     : 'numberfield',\n                weight   : 15,\n                name     : 'interval',\n                label    : 'L{RecurrenceEditor.Every}',\n                min      : 1,\n                required : true\n            },\n            daysButtonField : {\n                type         : 'recurrencedaysbuttongroup',\n                weight       : 20,\n                name         : 'days',\n                forFrequency : 'WEEKLY'\n            },\n            // the radio button enabling \"monthDaysButtonField\" in MONTHLY mode\n            monthDaysRadioField : {\n                type         : 'checkbox',\n                weight       : 30,\n                toggleGroup  : 'radio',\n                forFrequency : 'MONTHLY',\n                label        : 'L{RecurrenceEditor.Each}',\n                checked      : true,\n                onChange     : 'up.onMonthDaysRadioFieldChange'\n            },\n            monthDaysButtonField : {\n                type         : 'recurrencemonthdaysbuttongroup',\n                weight       : 40,\n                name         : 'monthDays',\n                forFrequency : 'MONTHLY'\n            },\n            monthsButtonField : {\n                type         : 'recurrencemonthsbuttongroup',\n                weight       : 50,\n                name         : 'months',\n                forFrequency : 'YEARLY'\n            },\n            // the radio button enabling positions & days combos in MONTHLY & YEARLY modes\n            positionAndDayRadioField : {\n                type         : 'checkbox',\n                weight       : 60,\n                toggleGroup  : 'radio',\n                forFrequency : 'MONTHLY|YEARLY',\n                label        : 'L{RecurrenceEditor.On the}',\n                onChange     : 'up.onPositionAndDayRadioFieldChange'\n            },\n            positionsCombo : {\n                type         : 'recurrencepositionscombo',\n                weight       : 80,\n                name         : 'positions',\n                forFrequency : 'MONTHLY|YEARLY'\n            },\n            daysCombo : {\n                type         : 'recurrencedayscombo',\n                weight       : 90,\n                name         : 'days',\n                forFrequency : 'MONTHLY|YEARLY',\n                flex         : 1\n            },\n            stopRecurrenceField : {\n                type     : 'recurrencestopconditioncombo',\n                weight   : 100,\n                label    : 'L{RecurrenceEditor.End repeat}',\n                onChange : 'up.onStopRecurrenceFieldChange'\n            },\n            countField : {\n                type     : 'numberfield',\n                weight   : 110,\n                name     : 'count',\n                min      : 2,\n                required : true,\n                disabled : true,\n                label    : ' '\n            },\n            endDateField : {\n                type     : 'datefield',\n                weight   : 120,\n                name     : 'endDate',\n                hidden   : true,\n                disabled : true,\n                label    : ' ',\n                required : true\n            }\n        }\n    };\n\n    setupWidgetConfig(widgetConfig) {\n        // All our inputs must be mutated using triggers and touch gestures on mobile\n        if (BrowserHelper.isMobile && !('editable' in widgetConfig)) {\n            widgetConfig.editable = false;\n        }\n        return super.setupWidgetConfig(...arguments);\n    }\n\n    updateRecord(record) {\n        super.updateRecord(record);\n\n        const\n            me = this,\n            {\n                frequencyField,\n                daysButtonField,\n                monthDaysButtonField,\n                monthsButtonField,\n                monthDaysRadioField,\n                positionAndDayRadioField,\n                stopRecurrenceField\n            }  = me.widgetMap;\n\n        if (record) {\n            const\n                event     = record.timeSpan,\n                startDate = event?.startDate;\n\n            // some fields default values are calculated based on event \"startDate\" value\n            if (startDate) {\n                // if no \"days\" value provided\n                if (!record.days || !record.days.length) {\n                    daysButtonField.value = [RecurrenceDayRuleEncoder.encodeDay(startDate.getDay())];\n                }\n\n                // if no \"monthDays\" value provided\n                if (!record.monthDays || !record.monthDays.length) {\n                    monthDaysButtonField.value = startDate.getDate();\n                }\n\n                // if no \"months\" value provided\n                if (!record.months || !record.months.length) {\n                    monthsButtonField.value = startDate.getMonth() + 1;\n                }\n            }\n\n            // if the record has both \"days\" & \"positions\" fields set check \"On the\" checkbox\n            if (record.days && record.positions) {\n                positionAndDayRadioField.check();\n                // <remove-on-release>\n                // TODO: if toggleGroup members are not painted automatic unchecking doesn't work\n                // </remove-on-release>\n                if (!me.isPainted) {\n                    monthDaysRadioField.uncheck();\n                }\n            }\n            else {\n                monthDaysRadioField.check();\n                // <remove-on-release>\n                // TODO: if toggleGroup members are not painted automatic unchecking doesn't work\n                // </remove-on-release>\n                if (!me.isPainted) {\n                    positionAndDayRadioField.uncheck();\n                }\n            }\n\n            stopRecurrenceField.recurrence = record;\n        }\n        else {\n            frequencyField.value = 'NONE';\n        }\n    }\n\n    /**\n     * Updates the provided recurrence model with the contained form data.\n     * If recurrence model is not provided updates the last loaded recurrence model.\n     * @internal\n     */\n    syncEventRecord(recurrence) {\n        // get values relevant to the RecurrenceModel (from enabled fields only)\n        const values = this.getValues((w) => w.name in recurrence && !w.disabled);\n\n        // Disabled field does not contribute to values, clear manually\n        if (!('endDate' in values)) {\n            values.endDate = null;\n        }\n        if (!('count' in values)) {\n            values.count = null;\n        }\n\n        recurrence.set(values);\n    }\n\n    toggleStopFields() {\n        const\n            me                           = this,\n            { countField, endDateField } = me.widgetMap;\n\n        switch (me.widgetMap.stopRecurrenceField.value) {\n\n            case 'count' :\n                countField.show();\n                countField.enable();\n                endDateField.hide();\n                endDateField.disable();\n                break;\n\n            case 'date' :\n                countField.hide();\n                countField.disable();\n                endDateField.show();\n                endDateField.enable();\n                break;\n\n            default :\n                countField.hide();\n                endDateField.hide();\n                countField.disable();\n                endDateField.disable();\n        }\n    }\n\n    onMonthDaysRadioFieldChange({ checked }) {\n        const { monthDaysButtonField } = this.widgetMap;\n\n        monthDaysButtonField.disabled = !checked || !this.isWidgetAvailableForFrequency(monthDaysButtonField);\n    }\n\n    onPositionAndDayRadioFieldChange({ checked }) {\n        const { daysCombo, positionsCombo } = this.widgetMap;\n\n        // toggle day & positions combos\n        daysCombo.disabled = positionsCombo.disabled = !checked || !this.isWidgetAvailableForFrequency(daysCombo);\n    }\n\n    onStopRecurrenceFieldChange() {\n        this.toggleStopFields();\n    }\n\n    isWidgetAvailableForFrequency(widget, frequency = this.widgetMap.frequencyField.value) {\n        return !widget.forFrequency || widget.forFrequency.includes(frequency);\n    }\n\n    onFrequencyFieldChange({ value, oldValue, valid }) {\n        const\n            me    = this,\n            items = me.queryAll(w => 'forFrequency' in w),\n            {\n                intervalField,\n                stopRecurrenceField\n            }     = me.widgetMap;\n\n        if (valid && value) {\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i];\n\n                if (me.isWidgetAvailableForFrequency(item, value)) {\n                    item.show();\n                    item.enable();\n                }\n                else {\n                    item.hide();\n                    item.disable();\n                }\n            }\n\n            // Special handling of NONE\n            intervalField.hidden = stopRecurrenceField.hidden = value === 'NONE';\n\n            if (value !== 'NONE') {\n                intervalField.hint = me.L(`L{RecurrenceEditor.${value}intervalUnit}`);\n            }\n\n            // When a non-recurring record is loaded, intervalField is set to empty. We want it to default to 1 here\n            // to not look weird (defaults to 1 on the data layer)\n            if (oldValue === 'NONE' && intervalField.value == null) {\n                intervalField.value = 1;\n            }\n\n            me.toggleFieldsState();\n        }\n    }\n\n    toggleFieldsState() {\n        const\n            me            = this,\n            { widgetMap } = me;\n\n        me.onMonthDaysRadioFieldChange({ checked : widgetMap.monthDaysRadioField.checked });\n        me.onPositionAndDayRadioFieldChange({ checked : widgetMap.positionAndDayRadioField.checked });\n        me.onStopRecurrenceFieldChange();\n    }\n\n    updateLocalization() {\n        // do extra labels translation (not auto-translated yet)\n        const { countField, intervalField, frequencyField } = this.widgetMap;\n\n        countField.hint = this.L('L{RecurrenceEditor.time(s)}');\n\n        if (frequencyField.value && frequencyField.value !== 'NONE') {\n            intervalField.hint = this.L(`L{RecurrenceEditor.${frequencyField.value}intervalUnit}`);\n        }\n\n        super.updateLocalization();\n    }\n\n}\n\n// Register this widget type with its Factory\nRecurrenceEditorPanel.initClass();\n", "import ColorField from '../../Core/widget/ColorField.js';\nimport './EventColorPicker.js';\n\n/**\n * @module Scheduler/widget/EventColorField\n */\n\n/**\n * Color field widget for editing the EventModel's {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} field.\n * See Schedulers {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config} for default\n * available colors.\n *\n * What differs this widget from {@link Core.widget.ColorField} is that this uses the\n * {@link Scheduler.widget.EventColorPicker} as its picker. And also that the {@link #config-name} config is set to\n * `eventColor` per default.\n *\n * {@inlineexample Scheduler/widget/EventColorField.js}\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the color picker, which itself is keyboard\n * navigable.\n *\n * ```javascript\n * let eventColorField = new EventColorField();\n * ```\n *\n * @extends Core/widget/ColorField\n * @classType eventcolorfield\n * @inputfield\n */\n\nexport default class EventColorField extends ColorField {\n    static $name = 'EventColorField';\n\n    static type = 'eventcolorfield';\n\n    static configurable = {\n        picker : {\n            type : 'eventcolorpicker'\n        },\n        name : 'eventColor'\n    };\n}\n\nEventColorField.initClass();\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TimeSpanMenuBase from './base/TimeSpanMenuBase.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport '../widget/EventColorPicker.js';\n\n/**\n * @module Scheduler/feature/EventMenu\n */\n\n/**\n * Displays a context menu for events. Items are populated by other features and/or application code.\n *\n * {@inlineexample Scheduler/feature/EventMenu.js}\n *\n * ### Default event menu items\n *\n * Here is the list of menu items provided by the feature and populated by the other features:\n *\n * | Reference       | Text           | Weight | Feature                                  | Description                                                       |\n * |-----------------|----------------|--------|------------------------------------------|-------------------------------------------------------------------|\n * | `editEvent`     | Edit event     | 100    | {@link Scheduler/feature/EventEdit}      | Edit in the event editor. Hidden when read-only                   |\n * | `copyEvent`     | Copy event     | 110    | {@link Scheduler/feature/EventCopyPaste} | Copy event or assignment. Hidden when read-only                   |\n * | `cutEvent `     | Cut event      | 120    | {@link Scheduler/feature/EventCopyPaste} | Cut event or assignment. Hidden when read-only                    |\n * | `deleteEvent`   | Delete event   | 200    | *This feature*                           | Remove event. Hidden when read-only                               |\n * | `unassignEvent` | Unassign event | 300    | *This feature*                           | Unassign event. Hidden when read-only, shown for multi-assignment |\n * | `splitEvent`    | Split event    | 650    | *Scheduler Pro only*                     | Split an event into two segments at the mouse position            |\n * | `renameSegment` | Rename segment | 660    | *Scheduler Pro only*                     | Show an inline editor to rename the segment                       |\n * | `eventColor` ¹  | Color          | 400    | *This feature*                           | Choose background color for the event bar                         |\n *\n * **¹** Set {@link Scheduler.view.SchedulerBase#config-showEventColorPickers} to `true` to enable this item\n *\n * ### Customizing the menu items\n *\n * The menu items in the Event menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra items for all events:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 extraItem : {\n *                     text : 'Extra',\n *                     icon : 'b-fa b-fa-fw b-fa-flag',\n *                     onItem({eventRecord}) {\n *                         eventRecord.flagged = true;\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Remove existing items:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 deleteEvent   : false,\n *                 unassignEvent : false\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Customize existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 deleteEvent : {\n *                     text : 'Delete booking'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Manipulate existing items for all events or specific events:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             // Process items before menu is shown\n *             processItems({eventRecord, items}) {\n *                  // Push an extra item for conferences\n *                  if (eventRecord.type === 'conference') {\n *                      items.showSessionItem = {\n *                          text : 'Show sessions',\n *                          onItem({eventRecord}) {\n *                              // ...\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for secret events\n *                  if (eventRecord.type === 'secret') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Note that the {@link #property-menuContext} is applied to the Menu's `item` event, so your `onItem`\n * handler's single event parameter also contains the following properties:\n *\n * - **source** The {@link Scheduler.view.Scheduler} who's UI was right clicked.\n * - **targetElement** The element right clicked on.\n * - **eventRecord** The {@link Scheduler.model.EventModel event record} clicked on.\n * - **resourceRecord** The {@link Scheduler.model.ResourceModel resource record} clicked on.\n * - **assignmentRecord** The {@link Scheduler.model.AssignmentModel assignment record} clicked on.\n *\n * Full information of the menu customization can be found in the \"Customizing the Event menu, the Schedule menu, and the TimeAxisHeader menu\" guide.\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/base/TimeSpanMenuBase\n * @demo Scheduler/eventmenu\n * @classtype eventMenu\n * @feature\n */\nexport default class EventMenu extends TimeSpanMenuBase {\n    //region Config\n\n    static get $name() {\n        return 'EventMenu';\n    }\n\n    /**\n     * @member {Object} menuContext\n     * An informational object containing contextual information about the last activation\n     * of the context menu. The base properties are listed below.\n     * @property {Event} menuContext.domEvent The initiating event.\n     * @property {Event} menuContext.event DEPRECATED: The initiating event.\n     * @property {Number[]} menuContext.point The client `X` and `Y` position of the initiating event.\n     * @property {HTMLElement} menuContext.targetElement The target to which the menu is being applied.\n     * @property {Object<String,MenuItemConfig>} menuContext.items The context menu **configuration** items.\n     * @property {Core.data.Model[]} menuContext.selection The record selection in the client (Grid, Scheduler, Gantt or Calendar).\n     * @property {Scheduler.model.EventModel} menuContext.eventRecord The event record clicked on.\n     * @property {Scheduler.model.ResourceModel} menuContext.resourceRecord The resource record clicked on.\n     * @property {Scheduler.model.AssignmentModel} menuContext.assignmentRecord The assignment record clicked on.\n     * @readonly\n     */\n\n    static get configurable() {\n        return {\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features         : {\n             *    eventMenu : {\n             *         processItems({ items, eventRecord, assignmentRecord, resourceRecord }) {\n             *             // Add or hide existing items here as needed\n             *             items.myAction = {\n             *                 text   : 'Cool action',\n             *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                 onItem : () => console.log(`Clicked ${eventRecord.name}`),\n             *                 weight : 1000 // Move to end\n             *             };\n             *\n             *            if (!eventRecord.allowDelete) {\n             *                 items.deleteEvent.hidden = true;\n             *             }\n             *         }\n             *     }\n             * },\n             * ```\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Scheduler.model.EventModel} context.eventRecord The record representing the current event\n             * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource\n             * @param {Scheduler.model.AssignmentModel} context.assignmentRecord The assignment record\n             * @param {Object<String,MenuItemConfig>} context.items An object containing the {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @config {Function}\n             * @preventable\n             */\n            processItems : null,\n\n            type : 'event'\n\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * The `items` provided by this feature are listed below. These are the property names which you may\n             * configure:\n             *\n             * - `deleteEvent` Deletes the context event.\n             * - `unassignEvent` Unassigns the context event from the current resource (only added when multi assignment is used).\n             *\n             * To remove existing items, set corresponding keys `null`:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventMenu : {\n             *             items : {\n             *                 deleteEvent   : null,\n             *                 unassignEvent : null\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * See the feature config in the above example for details.\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n        };\n    }\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateEventMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from\n     * being shown.\n     * @event eventMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     * @param {MouseEvent} [event] Pointer event which triggered the context menu (if any)\n     */\n\n    /**\n     * This event fires on the owning Scheduler when an item is selected in the context menu.\n     * @event eventMenuItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Core.widget.MenuItem} item\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     */\n\n    /**\n     * This event fires on the owning Scheduler after showing the context menu for an event\n     * @event eventMenuShow\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     */\n\n    //endregion\n\n    get resourceStore() {\n        // In horizontal mode, we use store (might be a display store), in vertical & calendar we use resourceStore\n        return this.client.isHorizontal ? this.client.store : this.client.resourceStore;\n    }\n\n    getDataFromEvent(event) {\n        const\n            data             = super.getDataFromEvent(event),\n            eventElement     = data.targetElement,\n            { client }       = this,\n            eventRecord      = client.resolveEventRecord(eventElement),\n            // For vertical mode the resource must be resolved from the event\n            resourceRecord   = eventRecord && (client.resolveResourceRecord(eventElement) || this.resourceStore.last)?.$original,\n            assignmentRecord = eventRecord && client.resolveAssignmentRecord(eventElement);\n\n        return Object.assign(data, {\n            eventElement,\n            eventRecord,\n            resourceRecord,\n            assignmentRecord\n        });\n    }\n\n    getTargetElementFromEvent({ target }) {\n        return target.closest(this.client.eventSelector) || target;\n    }\n\n    shouldShowMenu(eventParams) {\n        return eventParams.eventRecord;\n    }\n\n    /**\n     * Shows context menu for the provided event. If record is not rendered (outside of time span/filtered)\n     * menu won't appear.\n     * @param {Scheduler.model.EventModel} eventRecord Event record to show menu for.\n     * @param {Object} [options]\n     * @param {HTMLElement} options.targetElement Element to align context menu to.\n     * @param {MouseEvent} options.event Browser event.\n     * If provided menu will be aligned according to clientX/clientY coordinates.\n     * If omitted, context menu will be centered to event element.\n     */\n    showContextMenuFor(eventRecord, { targetElement, event } = {}) {\n        if (this.disabled) {\n            return;\n        }\n\n        if (!targetElement) {\n            targetElement = this.getElementFromRecord(eventRecord);\n\n            // If record is not rendered, do nothing\n            if (!targetElement) {\n                return;\n            }\n        }\n\n        DomHelper.triggerMouseEvent(targetElement, this.tiggerEvent);\n    }\n\n    getElementFromRecord(record) {\n        return this.client.getElementsFromEventRecord(record)[0];\n    }\n\n    populateEventMenu({ items, eventRecord, assignmentRecord }) {\n        const { client } = this;\n\n        items.deleteEvent = {\n            disabled : eventRecord.readOnly || assignmentRecord?.readOnly,\n            hidden   : client.readOnly\n        };\n        items.unassignEvent = {\n            disabled : eventRecord.readOnly || assignmentRecord?.readOnly,\n            hidden   : client.readOnly || client.eventStore.usesSingleAssignment\n        };\n\n        if (client.showEventColorPickers || client.showTaskColorPickers) {\n            items.eventColor = {\n                disabled : eventRecord.readOnly,\n                hidden   : client.readOnly\n            };\n        }\n        else {\n            items.eventColor = {\n                hidden : true\n            };\n        }\n    }\n\n    populateItemsWithData({ items, eventRecord }) {\n        super.populateItemsWithData(...arguments);\n\n        const { client } = this;\n\n        if ((client.showEventColorPickers || (client.isSchedulerPro && client.showTaskColorPickers)) &&\n            items.eventColor?.menu\n        ) {\n            Objects.merge(items.eventColor.menu.colorMenu, {\n                value  : eventRecord.eventColor,\n                record : eventRecord\n            });\n        }\n    }\n\n    // This generates the fixed, unchanging part of the items and is only called once\n    // to generate the baseItems of the feature.\n    // The dynamic parts which are set by populateEventMenu have this merged into them.\n    changeItems(items) {\n        const { client } = this;\n\n        return Objects.merge({\n            deleteEvent : {\n                text   : 'L{SchedulerBase.Delete event}',\n                icon   : 'b-icon b-icon-trash',\n                weight : 200,\n                onItem({ menu, eventRecord }) {\n                    // We must synchronously push focus back into the menu's triggering\n                    // event so that our beforeRemove handlers can move focus onwards\n                    // to the closest remaining event.\n                    // Otherwise, the menu's default hide processing on hide will attempt\n                    // to move focus back to the menu's triggering event which will\n                    // by then have been deleted.\n                    const revertTarget = menu.focusInEvent?.relatedTarget;\n                    if (revertTarget) {\n                        revertTarget.focus();\n                        client.navigator.activeItem = revertTarget;\n                    }\n                    client.removeEvents(client.isEventSelected(eventRecord) ? client.selectedEvents : [eventRecord]);\n                }\n            },\n            unassignEvent : {\n                text   : 'L{SchedulerBase.Unassign event}',\n                icon   : 'b-icon b-icon-unassign',\n                weight : 300,\n                onItem({ menu, eventRecord, resourceRecord }) {\n                    // We must synchronously push focus back into the menu's triggering\n                    // event so that our beforeRemove handlers can move focus onwards\n                    // to the closest remaining event.\n                    // Otherwise, the menu's default hide processing on hide will attempt\n                    // to move focus back to the menu's triggering event which will\n                    // by then have been deleted.\n                    const revertTarget = menu.focusInEvent?.relatedTarget;\n                    if (revertTarget) {\n                        revertTarget.focus();\n                        client.navigator.activeItem = revertTarget;\n                    }\n\n                    if (client.isEventSelected(eventRecord)) {\n                        client.assignmentStore.remove(client.selectedAssignments);\n                    }\n                    else {\n                        eventRecord.unassign(resourceRecord);\n                    }\n                }\n            },\n            eventColor : {\n                text      : 'L{SchedulerBase.color}',\n                icon      : 'b-icon b-icon-palette',\n                separator : true,\n                menu      : {\n                    colorMenu : {\n                        type : 'eventcolorpicker'\n                    }\n                }\n            }\n        }, items);\n    }\n}\n\nEventMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(EventMenu, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventMenu, false, 'ResourceHistogram');\n", "import TimeSpanMenuBase from '../../Scheduler/feature/base/TimeSpanMenuBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/feature/ScheduleMenu\n */\n\n/**\n * Displays a context menu for empty parts of the schedule. Items are populated in the first place\n * by configurations of this Feature, then by other features and/or application code.\n *\n * ### Default scheduler zone menu items\n *\n * The Scheduler menu feature provides only one item:\n *\n * | Reference              | Text         | Weight | Feature                                  | Description                                                           |\n * |------------------------|--------------|--------|------------------------------------------|-----------------------------------------------------------------------|\n * | `addEvent`             | Add event    | 100    | *This feature*                           | Add new event at the target time and resource. Hidden when read-only  |\n * | `pasteEvent`           | Paste event  | 110    | {@link Scheduler/feature/EventCopyPaste} | Paste event at the target time and resource. Hidden when is read-only |\n * | `splitSchedule`        | Split        | 200    | {@link Scheduler/feature/Split}          | Shows the \"Split schedule\" sub-menu                                   |\n * | \\> `splitHorizontally` | Horizontally | 100    | {@link Scheduler/feature/Split}          | Split horizontally                                                    |\n * | \\> `splitVertically `  | Vertically   | 200    | {@link Scheduler/feature/Split}          | Split vertically                                                      |\n * | \\> `splitBoth`         | Both         | 300    | {@link Scheduler/feature/Split}          | Split both ways                                                       |\n * | `unsplitSchedule`      | Split        | 210    | {@link Scheduler/feature/Split}          | Unsplit a previously split schedule                                   |\n *\n * ### Customizing the menu items\n *\n * The menu items in the Scheduler menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         scheduleMenu : {\n *             items : {\n *                 extraItem : {\n *                     text : 'Extra',\n *                     icon : 'b-fa b-fa-fw b-fa-flag',\n *                     onItem({date, resourceRecord, items}) {\n *                         // Custom date based action\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Remove existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         scheduleMenu : {\n *             items : {\n *                 addEvent : false\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Customize existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         scheduleMenu : {\n *             items : {\n *                 addEvent : {\n *                     text : 'Create new booking'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Manipulate existing items:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         scheduleMenu : {\n *             // Process items before menu is shown\n *             processItems({date, resourceRecord, items}) {\n *                  // Add an extra item for ancient times\n *                  if (date < new Date(2018, 11, 17)) {\n *                      items.modernize = {\n *                          text : 'Modernize',\n *                          ontItem({date}) {\n *                              // Custom date based action\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for Sundays\n *                  if (date.getDay() === 0) {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the \"Customizing the Event menu, the Schedule menu, and the TimeAxisHeader menu\" guide.\n *\n * This feature is **enabled** by default\n *\n * @demo Scheduler/basic\n * @extends Scheduler/feature/base/TimeSpanMenuBase\n * @classtype scheduleMenu\n * @feature\n */\nexport default class ScheduleMenu extends TimeSpanMenuBase {\n    //region Config\n\n    static get $name() {\n        return 'ScheduleMenu';\n    }\n\n    static get defaultConfig() {\n        return {\n            type : 'schedule',\n\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * The `items` provided by this feature are listed below. These are the predefined property names which you may\n             * configure:\n             *\n             * - `addEvent` Add an event for at the resource and time indicated by the `contextmenu` event.\n             *\n             * To remove existing items, set corresponding keys `null`:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         scheduleMenu : {\n             *             items : {\n             *                 addEvent : null\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n            items : null,\n\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features         : {\n             *    scheduleMenu : {\n             *         processItems({ items, date, resourceRecord }) {\n             *            // Add or hide existing items here as needed\n             *            items.myAction = {\n             *                text   : 'Cool action',\n             *                icon   : 'b-fa b-fa-cat',\n             *                onItem : () => console.log(`Clicked on ${resourceRecord.name} at ${date}`),\n             *                weight : 1000 // Move to end\n             *            };\n             *\n             *            if (!resourceRecord.allowAdd) {\n             *                items.addEvent.hidden = true;\n             *            }\n             *        }\n             *    }\n             * },\n             * ```\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource\n             * @param {Date} context.date The clicked date\n             * @param {Object<String,MenuItemConfig>} context.items An object containing the\n             * {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @config {Function}\n             * @preventable\n             */\n            processItems : null\n        };\n    }\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateScheduleMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning Scheduler before the context menu is shown for an event. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning `false` from a listener prevents the menu from\n     * being shown.\n     * @event scheduleMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     */\n\n    /**\n     * This event fires on the owning Scheduler when an item is selected in the context menu.\n     * @event scheduleMenuItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Core.widget.MenuItem} item\n     * @param {Scheduler.model.EventModel} eventRecord\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     */\n\n    /**\n     * This event fires on the owning Scheduler after showing the context menu for an event\n     * @event scheduleMenuShow\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Scheduler.model.EventModel} eventRecord Event record for which the menu was triggered\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord Assignment record, if assignments are used\n     * @param {HTMLElement} eventElement\n     */\n\n    //endregion\n\n    shouldShowMenu(eventParams) {\n        const\n            { client } = this,\n            {\n                targetElement,\n                resourceRecord\n            } = eventParams,\n            isTimeAxisColumn = client.timeAxisSubGridElement.contains(targetElement);\n\n        return !targetElement.closest(client.eventSelector) && isTimeAxisColumn && !(resourceRecord && resourceRecord.isSpecialRow);\n    }\n\n    getDataFromEvent(event) {\n        // Process event if it wasn't yet processed\n        if (DomHelper.isDOMEvent(event)) {\n            const\n                { client }     = this,\n                cellData       = client.getCellDataFromEvent?.(event),\n                date           = client.getDateFromDomEvent?.(event, 'floor'),\n                // For vertical mode the resource must be resolved from the event\n                resourceRecord = client.resolveResourceRecord(event) || client.isVertical && client.resourceStore.last;\n\n            return ObjectHelper.assign(super.getDataFromEvent(event), cellData, { date, resourceRecord });\n        }\n\n        return event;\n    }\n\n    populateScheduleMenu({ items, resourceRecord, date }) {\n        const { client } = this;\n\n        // Menu can work for ResourceHistogram which doesn't have event store\n        if (!client.readOnly && client.eventStore) {\n            items.addEvent = {\n                text     : 'L{SchedulerBase.Add event}',\n                icon     : 'b-icon b-icon-add',\n                disabled : !resourceRecord || resourceRecord.readOnly || !resourceRecord.isWorkingTime(date),\n                weight   : 100,\n                onItem() {\n                    client.createEvent(date, resourceRecord, client.getRowFor(resourceRecord));\n                }\n            };\n        }\n    }\n}\n\nScheduleMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(ScheduleMenu, true, 'Scheduler');\n"],
  "mappings": "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",
  "names": ["ViewPreset", "Model", "fields", "name", "type", "defaultValue", "construct", "arguments", "normalizeUnits", "generateId", "owner", "me", "headers", "parts", "result", "Object", "getPrototypeOf", "data", "id", "length", "i", "unit", "increment", "multiple", "push", "StringHelper", "capitalize", "join", "count", "includes", "tickWidth", "tickHeight", "bottomHeader", "IdHelper", "timeResolution", "shiftUnit", "header", "DH", "normalizeUnit", "splitUnit", "assign", "normalizeHeaderConfig", "headerConfig", "columnLinesFor", "mainHeaderLevel", "top", "middle", "Error", "bottom", "set", "inSet", "tickSize", "_tickSize", "mainHeader", "topHeader", "topUnit", "topIncrement", "leafUnit", "leafIncrement", "mainUnit", "msPerPixel", "Math", "round", "asMilliseconds", "isValid", "valid", "Boolean", "__publicField", "$name", "_$name", "locale", "localeName", "localeDesc", "localeCode", "newEvent", "ResourceInfoColumn", "eventCountText", "Dependencies", "from", "to", "invalid", "DependencyType", "SS", "SF", "FS", "FF", "StartToStart", "StartToEnd", "EndToStart", "EndToEnd", "short", "long", "DependencyEdit", "From", "To", "Type", "Lag", "Save", "Delete", "Cancel", "EventEdit", "Name", "Resource", "Start", "End", "Repeat", "EventDrag", "eventOverlapsExisting", "noDropOutsideTimeline", "SchedulerBase", "color", "TimeAxisHeaderMenu", "pickZoomLevel", "activeDateRange", "startText", "endText", "todayText", "EventCopyPaste", "copyEvent", "cutEvent", "pasteEvent", "EventFilter", "filterEvents", "byName", "TimeRanges", "showCurrentTimeLine", "PresetManager", "secondAndMinute", "displayDateFormat", "minuteAndHour", "topDateFormat", "hourAndDay", "middleDateFormat", "day", "week", "dayAndWeek", "dayAndMonth", "weekAndDay", "weekAndMonth", "weekAndDayLetter", "weekDateAndMonth", "monthAndYear", "year", "manyYears", "RecurrenceConfirmationPopup", "Yes", "width", "RecurrenceLegend", "Daily", "Weekly on {1}", "days", "Monthly on {1}", "Yearly on {1} of {2}", "months", "Every {0} days", "interval", "Every {0} weeks on {1}", "Every {0} months on {1}", "Every {0} years on {1} of {2}", "position1", "position2", "position3", "position4", "position5", "weekday", "daysFormat", "position", "RecurrenceEditor", "Frequency", "Every", "DAILYintervalUnit", "WEEKLYintervalUnit", "MONTHLYintervalUnit", "YEARLYintervalUnit", "Each", "RecurrenceDaysCombo", "RecurrencePositionsCombo", "RecurrenceStopConditionCombo", "Never", "After", "RecurrenceFrequencyCombo", "None", "Weekly", "Monthly", "Yearly", "RecurrenceCombo", "Custom", "Summary", "date", "ScheduleRangeCombo", "completeview", "currentview", "daterange", "completedata", "SchedulerExportDialog", "ExcelExporter", "CrudManagerView", "serverResponseLabel", "DurationColumn", "Duration", "LocaleHelper", "publishLocale", "PresetStore", "Localizable", "Store", "defaultConfig", "useRawData", "modelClass", "zoomOrder", "storage", "addSorter", "lhs", "rhs", "leftBottomHeader", "rightBottomHeader", "unitMagnitudes", "getById", "isPresetManager", "createRecord", "args", "isViewPreset", "getAt", "base", "copyBaseValues", "updateLocalization", "presets", "allRecords", "Set", "concat", "values", "basePresets", "forEach", "preset", "localePreset", "optionalL", "baseId", "originalDisplayDateFormat", "setData", "level", "levelConfig", "localeLevelDateFormat", "originalDateFormat", "dateFormat", "renderer", "unlocalizedName", "getCurrentConfig", "options", "presetData", "ObjectHelper", "clone", "merge", "add", "Array", "isArray", "originalData", "preventSubClassingModel", "shiftIncrement", "defaultSpan", "value", "DateHelper", "format", "start", "getShortNameOfUnit", "verticalColumnWidth", "resourceColumnWidth", "end", "cfg", "toUpperCase", "floor", "getMonth", "getFullYear", "defaultPresets", "resolution", "resolutionUnit", "internalListeners", "presetCache", "_basePresets", "presetAdjustment", "isBase", "baseType", "config", "setPrototypeOf", "undefined", "height", "getUnitByName", "registerPreset", "existingDuplicate", "find", "p", "equals", "getPreset", "normalizePreset", "deletePreset", "presetOrId", "remove", "pm", "Tick", "TimeSpan", "startDate", "endDate", "TimeAxis", "continuous", "originalContinuous", "include", "autoAdjust", "adjustedStart", "adjustedEnd", "visibleTickStart", "visibleTickEnd", "tickCache", "viewPreset", "maxTraverseTries", "disableDuplicateIdCheck", "disableDefaultValue", "disableTypeConversion", "configurable", "generateTicks", "resolutionIncrement", "weekStartDay", "forceFullTicks", "ion", "change", "action", "trigger", "supressRefresh", "refresh", "endreconfigure", "event", "internalOnReconfigure", "range", "getAdjustedDates", "Date", "isTimeAxis", "reconfigure", "suppressRefresh", "preventThrow", "normalized", "oldConfig", "_configuredStartDate", "_configuredEndDate", "propName", "viewPresetChanged", "isFiltered", "filters", "f", "disabled", "isConfigured", "adjusted", "ticks", "suspendEvents", "maintainFilter", "disableFilters", "resumeEvents", "first", "last", "isContinuous", "getNext", "updateVisibleTickBoundaries", "updateTickCache", "startDenominator", "getNormalizedUnitDuration", "endDenominator", "fullTicks", "_viewPreset", "presetName", "_a", "_weekStartDay", "_resolutionUnit", "_resolutionIncrement", "setTimeSpan", "newStartDate", "newEndDate", "shift", "amount", "allCount", "tries", "shiftNext", "shiftPrevious", "filterBy", "fn", "thisObj", "clear", "tick", "index", "call", "filter", "retVal", "triggerFilterEvent", "forceAdjust", "floorDate", "ceilDate", "_start", "parse", "_end", "startMS", "_startMS", "endMS", "_endMS", "relativeToStart", "incr", "relativeTo", "snap", "snappedDuration", "diff", "dt", "getDay", "startDay", "startOf", "getHours", "modifier", "useUnit", "snappedValue", "get", "roundDate", "distanceToWeekStartDay", "toAdd", "nbrMonths", "as", "daysInMonth", "snappedMonths", "duration", "offset", "getTimezoneOffset", "doCall", "isStartOf", "isEqual", "getDate", "_include", "isConfiguring", "processExclusion", "entries", "some", "includeUnit", "rule", "compareUnits", "getLargerUnit", "stepUnit", "datePart", "initExclusion", "lengthFactor", "getUnitToBaseUnitRatio", "lengthFactorExcl", "center", "updateGenerateTicks", "_generateTicks", "axisStartDate", "axisEndDate", "usesExclusion", "intervalEnd", "tickEnd", "isExcluded", "dstDiff", "prev", "getTime", "visibleTickTimeSpan", "getTickFromDate", "_date$getTime", "records", "dateMS", "begin", "tickStart", "startDateMS", "endDateMS", "min", "max", "getSnappedTickFromDate", "startTickIdx", "getDateFromTick", "roundingMethod", "wholeTick", "fraction", "t", "onlyStartEnd", "_startMs", "dateInAxis", "inclusiveEnd", "axisStart", "axisEnd", "betweenLesserEqual", "betweenLesser", "getCount", "timeSpanInAxis", "intersectSpans", "isTimeSpanInAxis", "timeSpan", "meta", "endDateCached", "startTick", "endTick", "forEachAuxInterval", "iteratorFn", "TimeAxisViewModel", "Events", "timeAxis", "availableSpace", "forceFit", "mode", "suppressFit", "columnConfig", "originalTickSize", "headersDatesCache", "unitToPixelsCache", "consumeViewPreset", "configured", "doDestroy", "un", "onTimeAxisReconfigure", "calculateInfiniteScrollingDateRange", "centered", "bufferCoef", "useTop", "snapSize", "snapUnit", "halfSpan", "ceil", "bufferedTicks", "_columnConfig", "_headers", "cellGenerator", "isTimeAxisViewModel", "isHorizontal", "isVertical", "_forceFit", "update", "setConfig", "source", "silent", "forceUpdate", "spaceAvailable", "_availableSpace", "calculateTickSize", "_totalSize", "pos", "headerCells", "createHeaderRow", "getDistanceBetweenDates", "getPositionFromDate", "getDistanceForDuration", "durationMs", "getSingleUnitInPixels", "getScaledTick", "respectExclusion", "snapToNextIncluded", "isEnd", "tickChanged", "hour", "originalHours", "croppedHours", "fractionalHours", "getMinutes", "hoursFromCenter", "newHours", "checkDay", "getSeconds", "getMilliseconds", "addDays", "fixedCenter", "fractionalDay", "daysFromCenter", "newDay", "constrain", "getDateFromPosition", "allowOutOfRange", "getScaledPosition", "dayWidth", "positionInWeek", "weekStartPosition", "hourWidth", "positionInDay", "dayStartPosition", "snapPixelAmount", "size", "setTickSize", "suppressEvent", "proposedSize", "timelineUnit", "ratio", "fittingSize", "totalSize", "space", "newTickSize", "getDates", "useLowestHeader", "getEnd", "linesForLevel", "lowestHeader", "majorLevel", "majorHeaderLevel", "levelUnit", "majorUnit", "validMajor", "doesUnitsAlign", "cells", "l", "forEachInterval", "isMajor", "isMajorTick", "fitToAvailableSpace", "_snap", "headerRowConfig", "align", "headerCellCls", "today", "clearTime", "tickLevel", "createCellContext", "isLast", "isInteriorTick", "cellData", "coord", "nextLevel", "r", "forEachMainInterval", "getConfig", "tempDate", "TimelineDateMapper", "Target", "Base", "getRtlX", "x", "rtl", "timeAxisViewModel", "getDateFromCoordinate", "coordinate", "local", "ignoreRTL", "currentOrientation", "translateToScheduleCoordinate", "getDateFromCoord", "getDateFromXY", "xy", "getDateFromDomEvent", "e", "pageX", "pageY", "getStartEndDatesFromRectangle", "rect", "startPos", "endPos", "right", "getDisplayEndDate", "getYear", "formatContainsHourInfo", "getFormattedEndDate", "getFormattedDate", "getCoordinateFromDate", "_options", "valueOf", "setTime", "translateToPageCoordinate", "getTimeSpanDistance", "viewportCenterDate", "timelineScroller", "timeAxisOffset", "clientSize", "scrollSize", "viewportCenterDateCached", "cachedCenterDate", "_this$_timeAxisViewMo", "_timeAxisViewModel", "updateSnap", "fillTicks", "onSchedulerHorizontalScroll", "subGrid", "scrollLeft", "scrollX", "scrollingToCenter", "widgetClass", "eventNameMap", "EventHelper", "TimelineDomEvents", "hoveredEvents", "initDomEvents", "schedulerEvents", "element", "timeAxisSubGridElement", "on", "mouseleave", "capture", "updateTimelineContextOnScroll", "BrowserHelper", "supportsPointerEventConstructor", "document", "scroll", "getTimeSpanMouseEventParams", "eventElement", "getScheduleMouseEventParams", "handleScheduleEvent", "ignoreDomEventsWhileScrolling", "scrolling", "timeAxisSubGrid", "timelineContext", "getTimelineEventContext", "lastPointerEvent", "scheduledEventName", "handleScheduleLeaveEvent", "target", "onScheduleScroll", "_me$features$pan", "features", "pan", "isActive", "partners", "_p$features$pan", "contains", "bodyElement", "_GlobalEvents$current", "_GlobalEvents$current2", "targetElement", "DomHelper", "elementFromPoint", "domEvent", "clientX", "clientY", "pointerEvent", "PointerEventConstructor", "mouseEvent", "MouseEvent", "defineProperty", "GlobalEvents", "currentPointerDown", "pointerId", "currentTouch", "identifier", "scrollInitiated", "dispatchEvent", "updateTimelineContext", "context", "oldContext", "closest", "eventInnerSelector", "cellElement", "getCellElementFromDomEvent", "DomDataStore", "mouseParams", "resourceStore", "indexOf", "resourceRecord", "row", "dataIndex", "tickIndex", "isTimelineContext", "tickStartDate", "tickEndDate", "tickParentIndex", "parentIndex", "foregroundCanvas", "eventSelector", "getCell", "resolveRowRecord", "column", "timeAxisColumn", "_me$rowManager$getRow", "rowManager", "getRowAt", "matches", "firstElementChild", "timeCellSelector", "matchScheduleCell", "onElementMouseButtonEvent", "targetCell", "parentElement", "dataset", "headerPosition", "findIndex", "cell", "cellConfig", "contextMenu", "triggerEvent", "onElementMouseDown", "onElementClick", "onElementDblClick", "onElementContextMenu", "onElementMouseOver", "_me$features$eventDra", "eventDrag", "isDragging", "has", "preventOverCls", "classList", "overScheduledEventClass", "params", "unhoverAll", "onElementMouseOut", "_me$features$eventDra2", "relatedTarget", "eventInner", "eventWrap", "timeSpanRecord", "resolveTimeSpanRecord", "isDescendant", "unhover", "delete", "isReleased", "$config", "equal", "c1", "c2", "properties", "pointermove", "mouseover", "mousedown", "mouseup", "click", "dblclick", "contextmenu", "mousemove", "mouseout", "delayable", "datesDiffer", "d1", "d2", "TimelineViewPresets", "changePresets", "presetRecord", "presetStore", "changeViewPreset", "oldViewPreset", "lastOpts", "lastViewPresetOptions", "presetChanged", "optionsChanged", "centerDate", "_displayDateFormat", "updateDisplayDateFormat", "updateViewPreset", "_me$syncSplits", "_timeAxis", "zoomDate", "zoomPosition", "syncSplits", "split", "_viewPresetChanging", "suspendRefresh", "timeAxisCfg", "copyProperties", "infiniteScroll", "resumeRefresh", "notScroll", "isPainted", "visibleDate", "unitMagnitude", "milliseconds", "targetDate", "zoomLevel", "scrollWidth", "viewportSize", "centerCoord", "scrollTop", "scrollHorizontallyTo", "scrollVerticallyTo", "setTimeout", "scrollTo", "presetId", "updateFromHorizontalScroll", "updateFromVerticalScroll", "_presets", "destroy", "TimelineZoomable", "lastWheelTime", "lastZoomPosition", "zoomOnMouseWheel", "wheel", "throttled", "buffer", "alt", "ctrlKey", "preventDefault", "passive", "zoomOnTimeAxisDoubleClick", "timeaxisheaderdblclick", "zoomToSpan", "maxZoomLevel", "_maxZoomLevel", "minZoomLevel", "_minZoomLevel", "zoomToLevel", "getMilliSecondsPerPixelForZoomLevel", "ignoreActualWidth", "actualWidth", "zoomTo", "console", "warn", "tickSizeProp", "newPreset", "configuredTickSize", "span", "scrollableViewportSize", "scrollable", "clientHeight", "_beforeCollapseState", "collapsed", "calculateOptimalDateRange", "isZooming", "zoomToFit", "eventStore", "getTotalTimeSpan", "leftMargin", "rightMargin", "scrollToDate", "adjustStart", "adjustEnd", "needToAdjust", "diffMS", "currLevel", "inc", "candidateLevel", "levelToZoom", "spanWidth", "unitToZoom", "tickCount", "getDurationInUnit", "customWidth", "block", "zoomIn", "levels", "currentZoomLevelIndex", "zoomOut", "zoomInFull", "zoomOutFull", "userProvidedSpan", "zoomKeepsOriginalTimespan", "difference", "visibleZoomFactor", "onElementMouseMove", "zoomContext", "isTrusted", "abs", "onWheel", "now", "performance", "viewport", "deltaY", "Popup", "localizableProperties", "autoShow", "autoClose", "closeAction", "modal", "scrollAction", "constrainTo", "globalThis", "draggable", "closable", "floating", "eventRecord", "cls", "bbar", "defaults", "localeClass", "items", "changeSingleButton", "weight", "text", "onClick", "changeMultipleButton", "cancelButton", "widgetMap", "onChangeMultipleButtonClick", "processMultipleRecords", "hide", "onChangeSingleButtonClick", "processSingleRecord", "onCancelButtonClick", "cancelFn", "onRecurrenceClose", "confirm", "prop", "updatePopupContent", "show", "actionType", "isRecurring", "L", "html", "title", "changerFn", "finalizerFn", "beginBatch", "callback", "endBatch", "_firstOccurrence", "firstOccurrence", "recurrence", "forEachOccurrence", "occurrence", "isFirst", "convertToRealEvent", "recurrenceRule", "initClass", "RecurringEvents", "beforeEventDropFinalize", "beforeEventResizeFinalize", "beforeAssignmentDelete", "changeRecurrenceConfirmationPopup", "recurrenceConfirmationPopup", "oldRecurrenceConfirmationPopup", "constructor", "findRecurringEventToConfirmDelete", "eventRecords", "supportsRecurring", "isOccurrence", "onRecurrableAssignmentBeforeDelete", "assignmentRecords", "map", "enableRecurringEvents", "finalize", "onRecurrableBeforeEventDropFinalize", "recurringEvents", "async", "onRecurrableBeforeEventResizeFinalize", "onAssignmentChange", "assignments", "assignment", "_assignment$event", "isBatchUpdating", "removeOccurrences", "getOccurrencesFor", "recurringEvent", "getOccurrencesForTimeSpan", "removeEvents", "popupOwner", "readOnly", "removeRecord", "record", "_record$event", "isOccurrenceAssignment", "isAssignment", "assignmentStore", "shouldFinalize", "recurringEventRecord", "TimelineEventRendering", "managedEventSizing", "generatedIdCls", "dirtyCls", "committingCls", "endsOutsideViewCls", "startsOutsideViewCls", "fixedEventCls", "updateFillTicks", "refreshWithTransition", "changeBarMargin", "margin", "assertNumber", "rowHeight", "updateBarMargin", "rendered", "onBeforeRowHeightChange", "resourceMargin", "_resourceMargin", "barMargin", "changeResourceMargin", "updateResourceMargin", "changeTickSize", "updateTickSize", "eventColors", "eventStyles", "updateEventStyle", "style", "updateEventColor", "eventColor", "eventStyle", "maintainVisibleStart", "defaultScrollOptions", "TimelineScroll", "bufferThreshold", "initScroll", "setTimeSpanOptions", "scrollInitialized", "_timelineScroller", "TimelineScroller", "widget", "_this$_timelineScroll", "onTimelineScroll", "checkTimeAxisScroll", "scrollPos", "requiredSize", "limit", "maxScroll", "maxPosition", "virtualScrollerElement", "overflow", "pointerEvents", "paddingBottom", "scrollBarWidth", "shiftToDate", "newRange", "updateInfiniteScroll", "visibleDateRange", "edgeOffset", "visibleWidth", "direction", "extraScroll", "nextAnimationFrame", "scrollerViewport", "localCoordinate", "Rectangle", "y", "scrollToCoordinate", "scrollToNow", "visibleSpan", "scrollIntoView", "isDestroyed", "left", "Scroller", "updateOverflowX", "updateOverflowY", "onScroll", "_position", "syncPartners", "force", "updatePosition", "scrollBy", "xDelta", "yDelta", "changeX", "changeY", "scroller", "clientWidth", "scrollHeight", "maxX", "maxY", "TimelineState", "getState", "state", "zoomLevelOptions", "applyState", "_state$scroll", "_zoomAfterPaint", "onPaint", "Header", "GridHeader", "refreshContent", "_this$headersElement", "headersElement", "querySelector", "TimeAxisSubGrid", "SubGrid", "sealedColumns", "headerClass", "startConfigure", "grid", "scheduler", "stickyHeaders", "flex", "changeScrollable", "_this$element", "updateCanvasSize", "handleHorizontalScroll", "addCls", "onInternalResize", "oldWidth", "oldHeight", "bodyHeight", "_bodyRectangle", "monitorResize", "onSchedulerViewportResize", "requestAnimationFrame", "clearWidthCache", "updateViewModelAvailableSpace", "expand", "exitTransition", "delay", "cancelOutstanding", "inRange", "v", "r0", "r1", "isWorkingTime", "d", "wt", "fromDay", "toDay", "fromHour", "toHour", "emptyObject", "TimelineBase", "GridBase", "mixin", "workingTime", "autoAdjustTimeAxis", "snapRelativeToEventStartDate", "timeCellCls", "useBackgroundCanvas", "enableEventAnimations", "disableGridRowModelWarning", "animateRemovingRows", "partner", "schedulerRegion", "transitionDuration", "animationTimeout", "defaultRegion", "durationDisplayPrecision", "asyncEventSuffix", "updateTimeZone", "timeZone", "project", "_isConfiguringTimeZone", "_this$project", "populateEventMenu", "populateScheduleMenu", "onVisibleDateRangeChange", "handlingVisibleDateRangeChange", "_visibleDateRange", "timeView", "old", "new", "onVisibleResourceRangeChange", "$firstVerticalOverflow", "init", "forceLayout", "createSubGrid", "region", "overflowX", "overflowY", "bodyContainer", "partneredWith", "removePartner", "ResizeMonitor", "addResizeListener", "onBodyResize", "bind", "changeStartDate", "firstPaint", "getBoundingClientRect", "_me$currentOrientatio", "_me$currentOrientatio2", "doUpdateTimeView", "frameCount", "horizontalScroll", "isDestroying", "refreshSuspended", "testPerformance", "scrollSpeed", "scrollInterval", "setInterval", "timePerFrame", "fps", "clearInterval", "log", "eventPositionMode", "eventScrollMode", "preserveViewCenter", "apply", "scrollStart", "then", "startChanged", "endChanged", "oldTickSize", "currentScroll", "visibleStart", "tickSizeChanged", "prio", "once", "returnValue", "hasVisibleEvents", "noFeatureElementsInAxis", "capitalizedEventName", "_capitalizedEventName", "_partner", "addPartner", "isPartneredWith", "Collection", "presetchange", "overflowChange", "partnerSharedConfig", "partnerSharedConfigs", "reduce", "configName", "syncPartnerSubGrids", "FunctionHelper", "createSequence", "_this$partneredWith", "onPartnerOverflowChange", "otherScrollable", "ourY", "hasOverflow", "refreshVirtualScrollbars", "onPartnerPresetChange", "allValues", "columns", "_timeAxisColumn", "changeColumns", "currentStore", "timeAxisColumnIndex", "timeAxisColumnConfig", "cols", "col", "verticalTimeAxisColumn", "slice", "cellCls", "isStore", "updateColumns", "was", "c", "isTimeAxisColumn", "isVerticalTimeAxisColumn", "relayAll", "onColumnsChanged", "changes", "_this$partneredWith2", "partnerColumn", "allIndex", "shouldSync", "partnerChanges", "k", "_me$verticalTimeAxisC", "_me$timeAxisColumn", "view", "timeAxisView", "updateEventCls", "eventCls", "unreleasedEventSelector", "currentModel", "tavmListeners", "detachListeners", "_mode", "model", "relayEvents", "_suppressFit", "currentTimeAxis", "timeAxisListeners", "applyWorkingTime", "updateForceFit", "_workingTime", "_me$features$columnLi", "refreshHeader", "columnLines", "updateStartDate", "setStartDate", "keepDuration", "ta", "calcEndDate", "_tempStartDate", "_this$_timeAxis", "ret", "setHours", "changeEndDate", "setEndDate", "calcStartDate", "_tempEndDate", "changeVisibleDate", "updateVisibleDate", "paint", "regionResize", "onLocaleChange", "oldAutoAdjust", "oldRect", "_width", "newWidth", "offsetWidth", "onViewportResize", "isSyncingFromPartner", "onTimeAxisViewModelUpdate", "eachSubGrid", "partnerSubGrid", "subGrids", "collapse", "backgroundCanvas", "_backgroundCanvas", "_foregroundCanvas", "svgCanvas", "_svgCanvas", "svg", "createElementNS", "setAttribute", "retainElement", "appendChild", "_timeAxisSubGridElement", "_this$timeAxisColumn", "subGridElement", "refreshTotalHeight", "_rowBorderHeight", "setLength", "$canvasWidth", "getHeaderDomConfigs", "configs", "getForegroundDomConfigs", "onStoreDataChange", "isVisible", "_me$project", "isRepopulatingStores", "await", "whenVisible", "isEngineReady", "refreshRows", "refreshAfterProjectRefresh", "refreshAllWhenReady", "render", "schedulerEl", "createElement", "className", "parent", "nextSibling", "fgCanvas", "insertRowsBefore", "returnToTop", "reLayoutEvents", "updateHideHeaders", "getCellDataFromEvent", "includeSingleAxisMatch", "onCellNavigate", "_to$cell", "currentMouseDown", "preventDragSelect", "runWithTransition", "hasTimeout", "isAnimating", "waitForAnimations", "topRow", "reinitialize", "isRowNumberSelecting", "selectors", "cs", "_cs$cell", "formatDuration", "nbrDecimals", "multiplier", "pow", "beginListeningForBatchedUpdates", "_this$syncSplits", "listenToBatchedUpdates", "other", "endListeningForBatchedUpdates", "_this$syncSplits2", "onConnectedCallback", "connected", "initialConnect", "updateRtl", "clearAll", "applyStartEndParameters", "field", "fieldMap", "passStartEndParameters", "startParamName", "print", "endParamName", "VersionHelper", "setVersion", "AbstractCrudManager", "AbstractCrudManagerMixin", "revision", "crudRevision", "json", "safeJsonStringify", "safeJsonParse", "forEachCrudStore", "store", "dataName", "storeId", "stores", "crudStores", "toJSON", "inlineData", "isLoading", "isCrudManagerLoading", "addStore", "addCrudStore", "removeStore", "removeCrudStore", "getStore", "getCrudStore", "hasChanges", "crudStoreHasChanges", "loadData", "loadCrudManagerData", "CrudManager", "ProjectCrudManager", "AjaxTransport", "JsonEncoder", "projectClass", "ProjectModel", "resourceStoreClass", "ResourceStore", "eventStoreClass", "EventStore", "assignmentStoreClass", "AssignmentStore", "dependencyStoreClass", "DependencyStore", "dependencyStore", "buildProject", "buildProjectConfig", "cleanupProperties", "resourceTimeRangeStore", "_project", "timeRangeStore", "dataReady", "suspendChangesTracking", "resumeChangesTracking", "_this$_timeRangeStore", "_timeRangeStore", "setFeaturedStore", "timeRangeStoreClass", "_this$_resourceTimeRa", "_resourceTimeRangeStore", "_this$project2", "resourceTimeRangeStoreClass", "_this$_resourceStore", "_resourceStore", "_this$_eventStore", "_eventStore", "_this$_assignmentStor", "_assignmentStore", "_this$_dependencyStor", "_dependencyStore", "property", "storeClass", "_me$property", "oldStore", "_store", "addPrioritizedStore", "getChangesetPackage", "_this$eventStore$mode", "_this$eventStore$mode2", "pack", "usesSingleAssignment", "resourceIds", "persist", "storeInfo", "crudLoadValidationMandatoryStores", "inlineProperties", "CurrentConfig", "preProcessCurrentConfigs", "crudManager", "keys", "arrayify", "pickFormat", "formats", "defaultFormat", "Describable", "dateBounds", "description", "descriptionRenderer", "formattedDescription", "descriptionFormat", "defaultDescriptionFormat", "format0", "formatRange", "dateSeparator", "changeDescriptionFormat", "SchedulerDom", "getElementFromAssignmentRecord", "assignmentRecord", "returnWrapper", "_this$foregroundCanva", "_wrapper", "_wrapper$syncIdMap", "wrapper", "syncIdMap", "resource", "hasLinks", "link", "$links", "_this$foregroundCanva2", "getElementFromEventRecord", "_eventRecord$resource", "resources", "isResourceTimeRange", "_this$foregroundCanva3", "domId", "getAssignmentForEventAndResource", "getElementsFromEventRecord", "el", "resolveResourceRecord", "elementOrEvent", "resolveEventRecord", "_elementOrEvent", "Event", "eventId", "assignmentId", "resolveAssignmentRecord", "getOccurrence", "isRowVisible", "SchedulerDomEvents", "onElementKeyDown", "selectedEvents", "selectedAssignments", "onElementKeyUp", "HorizontalLayout", "nbrOfBandsByResource", "bandIndexToPxConvertFn", "bandIndexToPxConvertThisObj", "clearCache", "applyLayout", "events", "layoutEventsInBands", "HorizontalLayoutStack", "heightRun", "verticalPosition", "eventIndex", "splice", "findClosestSuccessor", "eventRenderData", "group", "isMilestone", "minGap", "Infinity", "gap", "grouped", "PackMixin", "coordProp", "sizeProp", "inBandCoordProp", "inBandSizeProp", "isSameGroup", "a", "b", "packEventsInBands", "applyClusterFn", "slot", "firstInCluster", "cluster", "j", "findStartSlot", "getCluster", "nextSlot", "clusterSize", "slotSize", "priorOverlappers", "getPriorOverlappingEvents", "item", "COORD_PROP", "SIZE_PROP", "overlappers", "sort", "sortOverlappers", "e1", "e2", "startIndex", "startEvent", "HorizontalLayoutPack", "SchedulerResourceRendering", "resourceColumns", "_resourceColumns", "_this$resourceColumns", "columnWidth", "getResourceMargin", "getBarMargin", "getResourceHeight", "getResourceWidth", "getAppliedResourceHeight", "getRowById", "maxRequestedHeight", "getResourceLayoutSettings", "parentEventRecord", "contentHeight", "resourceImagePath", "defaultResourceImageName", "resourceImageExtension", "SchedulerEventRendering", "milestoneTextPosition", "milestoneAlign", "milestoneCharWidth", "milestoneLayoutMode", "eventLayout", "overlappingEventSorter", "horizontalEventSorterFn", "useInitialAnimation", "eventRenderer", "eventRendererThisObj", "eventBarTextField", "eventBodyTemplate", "horizontalLayoutPackClass", "horizontalLayoutStackClass", "isFirstRender", "initialAnimationDuration", "narrowEventWidth", "internalEventLayout", "changeEventLayout", "changeInternalEventLayout", "getEventLayout", "updateInternalEventLayout", "oldEventLayout", "changeHorizontalEventSorterFn", "deprecate", "updateOverlappingEventSorter", "_value", "isModel", "getEventLayoutHandler", "horizontal", "layouts", "horizontalStack", "layoutEventVerticallyStack", "horizontalPack", "layoutEventVerticallyPack", "getEventsToRender", "repaintEventsForResource", "repaintEvent", "getResourcesForEvent", "getEventStyle", "getEventColor", "_eventRecord$event", "_eventRecord$parent", "generateRenderData", "includeOutside", "renderData", "getTimeSpanRenderData", "isEvent", "eventResize", "isDragCreating", "resourceId", "$originalId", "eventContent", "role", "taskBarFeature", "_renderData$iconCls2", "tabIndex", "resizable", "isResizable", "startsOutsideView", "endsOutsideView", "leftHandle", "rightHandle", "topHandle", "bottomHandle", "isDirty", "hasPersistableChanges", "clsListObj", "hasGeneratedId", "isCommitting", "clippedStart", "clippedEnd", "isCreating", "wrapperClsListObj", "isParent", "isLinked", "clsList", "DomClassList", "internalCls", "wrapperClsList", "wrapperStyle", "isWrap", "selected", "isAssignmentSelected", "isDraggable", "eventSelectedCls", "eventAssignHighlightCls", "isEventSelected", "inactive", "hasAnimation", "bryntum", "noAnimations", "delayMS", "maxDelay", "initialAnimationDetacher", "delegate", "animationend", "expires", "wrapperCls", "iconCls", "getValue", "eventBarIconClsField", "rowId", "childContent", "milestoneLabelConfig", "rendererValue", "encodeHtml", "_renderData$iconCls", "children", "unshift", "tag", "isHtml", "class", "String", "isNamedColor", "colorProp", "_customColorStyle", "wrapperChildren", "onEventDataGenerated", "eventData", "changeUseInitialAnimation", "updateUseInitialAnimation", "isFirefox", "restartInitialAnimation", "initialAnimation", "_me$initialAnimationD", "stopInitialAnimation", "getMilestoneLabelWidth", "milestoneMeasureElement", "fontSize", "label", "innerHTML", "bounds", "milestoneWidth", "updateMilestoneLayoutMode", "alwaysOutside", "toggle", "updateMilestoneTextPosition", "updateMilestoneAlign", "updateMilestoneCharWidth", "engineStoreNames", "ProjectConsumer", "__privateAdd", "_suspendedByRestore", "declarable", "projectModelClass", "destroyStores", "projectSubscribers", "changeProject", "oldProject", "projectStoreNames", "projectDataNames", "projectCallbacks", "buildingProjectConfig", "isCrudManager", "storeName", "_sharedProject", "sharedProject", "isEventStoreMixin", "autoLoad", "delayAutoLoad", "chain", "updateProject", "projectListeners", "_crudManager", "_project$stm", "subscriber", "detachFromProject", "attachToProject", "load", "stm", "restoringStart", "restoringStop", "changeCrudManager", "onProjectDataReady", "onProjectRestoringStart", "rawQueue", "__privateSet", "onProjectRestoringStop", "__privateGet", "onBeforeTimeZoneChange", "onTimeZoneChange", "oldTimeZone", "TimeZoneHelper", "fromTimeZone", "toTimeZone", "onStartApplyChangeset", "onEndApplyChangeset", "whenProjectReady", "_this$project$isEngin", "projectStores", "setupProjectStores", "beforeTimeZoneChange", "timeZoneChange", "startApplyChangeset", "endApplyChangeset", "storeConfigs", "previousDataName", "prototype", "_this$project$storeNa", "createDataUpdater", "createStoreDescriptor", "setupConfigs", "listeners", "clsProto", "storeNameCap", "storeProject", "isProjectModel", "initializingProject", "_subscriber", "relayProjectDataChange", "isExpand", "isCollapse", "expanded", "SchedulerStores", "batchedUpdate", "changePreCommit", "commitStart", "commit", "exception", "idchange", "beforeLoad", "beforeRemove", "calendarManagerStore", "checkVersion", "crudManagerClass", "onProjectRefresh", "isInitialCommit", "navigateToAfterRefresh", "navigateTo", "bindCrudManager", "refreshFromRowOnStoreAdd", "suspended", "onStoreAdd", "calculateRowHeights", "onStoreUpdateRecord", "ignoreCount", "updateResourceStore", "metaMapId", "usesDisplayStore", "onEventIdChange", "onEventStoreIdChange", "onEventStoreBatchedUpdate", "onInternalEventStoreChange", "isAssign", "isRemovingAssignment", "onEventStoreChange", "onEventCommit", "resourcesToRepaint", "added", "modified", "onEventCommitStart", "toggleCls", "onEventException", "removed", "onAssignmentCommit", "repaintEventsForAssignmentChanges", "onAssignmentCommitStart", "onAssignmentException", "getResource", "onAssignmentBeforeRemove", "removingAll", "moveTo", "activeAssignment", "lastInteractionType", "next", "getPrevious", "focusWithoutScrolling", "focusElement", "timeRanges", "resourceTimeRanges", "onBeforeLoad", "getResourcesEventsPerTick", "filterFn", "eventsByTick", "unrenderedScrollOptions", "highlight", "focus", "SchedulerScroll", "scrollEventIntoView", "scrollResourceEventIntoView", "scrollAssignmentIntoView", "eventStart", "eventEnd", "eventIsOutside", "isScheduled", "extendTimeAxis", "currentTimeSpanRange", "visibleMS", "sign", "tree", "_me$expandTo", "expandTo", "isRoot", "isFocusable", "parentNode", "isAvailable", "scrollUnrenderedEventIntoView", "scrollResourceIntoView", "resourceRec", "eventRec", "Promise", "resolve", "modifiedOptions", "box", "getResourceEventBox", "translate", "onEventRender", "detacher", "initialScrollPromise", "renderEvent", "cancelled", "scrollRowIntoView", "SchedulerRegions", "getScheduleRegion", "dateConstraints", "getResourceRegion", "getRowRegion", "getAssignmentEventBox", "includesOutside", "roughly", "getItemBox", "SchedulerState", "_state$zoomLevelOptio", "propsToCopy", "SchedulerEventSelection", "highlightPredecessors", "highlightSuccessors", "deselectOnClick", "deselectAllOnScheduleClick", "selectedCollection", "multiEventSelect", "eventSelectionDisabled", "triggerSelectionChangeOnRemove", "maintainSelectionOnDatasetChange", "afterConstruct", "_this$navigator", "navigator", "navigate", "changeSelectedCollection", "isCollection", "updateSelectedCollection", "deferUntilRepopulationIfNeeded", "onSelectedCollectionChange", "beforeSplice", "_selectedCollection", "getActionType", "selection", "deselected", "getEventsFromAssignments", "ArrayHelper", "unique", "_events", "asArray", "isEventSelectable", "select", "eventOrAssignment", "preserveSelection", "selectAssignment", "selectEvent", "selectEvents", "deselect", "deselectAssignment", "deselectEvent", "deselectEvents", "selectAssignments", "deselectAssignments", "clearEventSelection", "onBeforeSelectedCollectionSplice", "toRemove", "updateSelection", "otherAssignmentRecord", "animation", "offsetHeight", "highlightLinkedEvents", "$selectedAssignments", "isSettingData", "newAssignments", "selector", "clean", "isResourceTimeRangeStore", "onAssignmentSelectionClick", "clickedRecord", "onEventNavigate", "nodeType", "Element", "ELEMENT_NODE", "changeHighlightSuccessors", "changeLinkedEvents", "changeHighlightPredecessors", "highlighted", "dependenciesFeature", "dependencies", "dep", "unhighlight", "toWalk", "pop", "outgoingDeps", "outgoing", "toEvent", "incomingDeps", "incoming", "fromEvent", "_this$_selectedCollec", "isArrowKey", "ArrowRight", "ArrowLeft", "ArrowUp", "ArrowDown", "animate100", "animate", "freeze", "SchedulerEventNavigation", "Delayable", "allowCtrlKey", "scrollSilently", "Space", "Enter", "Backspace", "Escape", "Tab", "isNavigationKey", "focusCls", "enableDeleteKey", "onDeleteKeyBuffer", "navigatePreviousBuffer", "navigateNextBuffer", "testConfig", "isInTimeAxis", "onDeleteKey", "throttle", "changeNavigator", "Navigator", "mergeConfigs", "ownerCmp", "processEvent", "itemSelector", "navigatePrevious", "navigateNext", "instanceMeta", "excluded", "keyEvent", "_me$focusedCell", "_me$focusedCell2", "focusedCell", "rowIndex", "key", "firstAssignment", "getFirstVisibleAssignment", "uiEvent", "_super$onElementKeyDo", "location", "_renderedEvents", "renderedEvents", "rowMap", "getRow", "_renderedEvents$", "elementData", "_currentOrientation$r", "_renderedEvents2", "resourceMap", "eventsData", "_renderedEvents$filte", "firstResource", "onGridBodyFocusIn", "focusEvent", "isGridCellFocus", "focusableSelector", "navigationEvent", "eventFocus", "destinationCell", "normalizeCellContext", "Location", "_me$onCellNavigate", "_focusedCell", "accessibleFocusCell", "cellSelector", "columnId", "focusCell", "normalizeTarget", "isDelete", "eventSorter", "resourceEvents", "getEvents", "previousEvent", "rowIdx", "previousAssignment", "doGridNavigation", "nextEvent", "nextAssignment", "handled", "substring", "targetAssignment", "skipScrollIntoView", "assignmentEl", "activeItem", "previousActiveEvent", "previousActiveItem", "onArrowUpKey", "onArrowDownKey", "onEscapeKey", "onEventSpaceKey", "onEventEnterKey", "isActionableLocation", "TransactionalFeatureMixin", "transactionalFeaturesEnabled", "enableTransactionalFeatures", "queue", "AttachToProjectMixin", "_projectHolder$projec", "projectHolder", "client", "attachToResourceStore", "attachToEventStore", "attachToAssignmentStore", "attachToDependencyStore", "attachToCalendarManagerStore", "_super$attachToProjec", "_super$detachFromProj", "_super$attachToEventS", "_super$attachToResour", "_super$attachToAssign", "_super$attachToDepend", "_super$attachToCalend", "releaseEventActions", "releaseElement", "reuseElement", "renderEventActions", "newElement", "reuseOwnElement", "MAX_WIDTH", "heightEventSorter", "chronoFields", "getStartEnd", "useEnd", "fieldName", "useEventBuffer", "_eventRecord$hasBatch", "_eventRecord$meta", "hasBatchedChange", "isResizing", "HorizontalRendering", "bufferSize", "verticalBufferSize", "Map", "eventConfigs", "isFirstRefresh", "toDrawOnProjectRefresh", "toDrawOnDataReady", "scrollBuffer", "renderDone", "removeRows", "translateRow", "offsetRows", "beforeRowHeight", "updateVerticalBufferSize", "renderRows", "rows", "stretch", "_dateConstraints", "_scheduler$getDateCon", "getElement", "eventRegion", "taStart", "taEnd", "getDateConstraints", "startX", "endX", "rowRecord", "resourceData", "approx", "rowBox", "getRecordCoords", "absoluteTop", "layout", "rowTop", "rowBottom", "TEXT_NODE", "eventNode", "getRecordFromElement", "clearDom", "commitFinalized", "onProjectCommitFinalized", "ignoreRecordChanges", "clearResources", "refreshResources", "isCalculated", "calculateAllRowHeights", "refreshPreCommit", "onAssignmentStoreChange", "replaced", "flatMap", "_assignmentRecord$res", "_assignmentRecord$res2", "isRemoving", "isChangingId", "refreshResourcesWhenReady", "oldAssignment", "newAssignment", "oldValue", "refreshResourcesOnDataReady", "onAssignmentStoreRefresh", "addConfirmed", "onEventStoreAddConfirmed", "onEventStoreRefresh", "_eventRecord$$linkedR", "renderedEventResources", "$linkedResources", "allChrono", "$entity", "getField", "dateChanges", "_me$project2", "propagatingLoadChanges", "isWritingData", "clearLayoutCache", "onResourceStoreChange", "every", "isBatchingChanges", "isLeaf", "onTranslateRow", "refreshEventsForResource", "onOffsetRows", "calculateRowHeight", "_resourceRecord$assig", "isSpecialRow", "assigned", "eventFilter", "$original", "includeOccurrences", "layoutHandler", "nbrOfBandsRequired", "getConnectorStartSide", "getConnectorEndSide", "onRenderDone", "onDragAbort", "dragData", "useWrapper", "lastDomConfig", "onRemoveRows", "onEarlyScroll", "rendererCalled", "fromScroll", "_me$_visibleDateRange", "_me$_visibleDateRange2", "renderAll", "returnEnd", "viewportCoords", "ids", "transition", "noRows", "bandIndex", "topFraction", "heightFraction", "addTemporaryDragElement", "domConfig", "syncId", "transient", "innerElement", "firstChild", "hasTemporaryDragElement", "startA", "dataStartMS", "endA", "dataEndMS", "startB", "endB", "nameA", "nameB", "calculateMS", "startDateField", "endDateField", "durationMS", "pxPerMinute", "diamondSize", "diamondMS", "setupRenderData", "_scheduler$features$e", "preamble", "postamble", "isProHorizontalRendering", "eventBuffer", "enabled", "timespanStart", "timespanEnd", "viewStartMS", "viewEndMS", "durationMinutes", "taskRecord", "fillTimeSpanHorizontalPosition", "calculateHorizontalPosition", "isSafari", "stickyEvents", "fillTimeSpanVerticalPosition", "includeOutsideTimeAxis", "includeOutsideViewport", "layoutEvents", "allEvents", "eventBox", "layoutEventData", "excludeFromLayout", "bandsRequired", "layoutResourceEvents", "layoutMode", "textPosition", "eventElementConfig", "taskFeature", "syncOptions", "syncIdField", "elementConfig", "fillSize", "releaseThreshold", "zIndex", "afterRenderEvent", "recordOrRow", "draw", "isRow", "getRowFor", "getResourceLayout", "resourceLayout", "getEventDOMConfigForCurrentView", "labels", "usesLabels", "before", "after", "reusableDOMConfigs", "eventDOMConfigs", "useLeft", "useRight", "prevDomConfig", "visibleEventDOMConfigs", "bodyTop", "_scrollTop", "viewTop", "viewBottom", "unbuffered", "unmanagedSize", "DomSync", "sync", "onlyChildren", "jsx", "_scheduler$processEve", "_domConfig$elementDat", "reactComponent", "isRelease", "isRender", "processEventContent", "_scheduler$processEve2", "getActiveElement", "isReusingElement", "isRepaint", "addTemporaryClass", "recordsOrIds", "asId", "cached", "child", "VerticalLayout", "columnIndex", "layoutType", "tplData", "clusterIndex", "widthFactor", "leftFactor", "packColumnCount", "packColumnIndex", "availableWidth", "VerticalRendering", "eventMap", "releasedElements", "resourceBufferSize", "verticalLayout", "columnWidthChange", "initialized", "coords", "borderOffsetX", "borderOffsetY", "variableColumnWidths", "isGrouped", "totalWidth", "allResourceRecords", "_this$eventMap$get", "scrollY", "_this$eventMap$get2", "_this$eventMap$get3", "_this$eventMap$get3$r", "startY", "endY", "onResourceColumnWidthChange", "refreshAllResourcesWhenReady", "changeCount", "shouldWaitForInitializeAndEngineReady", "unmaskBody", "lastResource", "resourceRecords", "_allResourceRecords", "firstIndex", "onResourceStoreRefresh", "refreshFromRerender", "renderResource", "prevScrollX", "_this$scheduler$timeA", "updateElementId", "releaseTimeSpanDiv", "resourceRange", "getResourceRange", "visibleResources", "withBuffer", "viewportStart", "viewportEnd", "insetStart", "dateRange", "bottomDate", "virtualScrollHeight", "topDate", "isProVerticalRendering", "resourceWidth", "dataStartMs", "dataEndMs", "cacheKey", "cache", "resourceIndex", "layoutData", "toLayout", "eventResources", "getMapPath", "internalStyle", "topDateMS", "bottomDateMS", "resourceEntry", "_eventData$elementCon", "isEventElement", "syncConfigs", "featureDomConfigs", "reusingElement", "isLastLevel", "isLastCell", "TimeAxisBase", "Widget", "_client$verticalTimeA", "sizeProperty", "hideHeaders", "hidden", "buildCells", "_me$client", "featureHeaderConfigs", "cellConfigs", "_level$cells", "stickyHeader", "headerFeature", "DEBUG", "positionProperty", "widgetClassList", "rebuild", "oldLevelsCount", "sum", "compactCellWidthThreshold", "HorizontalTimeAxis", "_this$owner", "onModelUpdate", "_this$owner2", "updateModel", "ResourceHeader", "imagePath", "changeShowAvatars", "_this$avatarRendering", "avatarRendering", "AvatarRendering", "updateShowAvatars", "onResourceStoreDataChange", "updateWidthCache", "_fillWidth", "_fitWidth", "configuredFillWidth", "configuredFitWidth", "fitWidth", "fillWidth", "refreshWidths", "toggleEmptyText", "insetEnd", "changeColumnWidth", "refreshingWidths", "configuredColumnWidth", "updateColumnWidth", "changeFillWidth", "updateFillWidth", "changeFitWidth", "updateFitWidth", "getImageURL", "imageName", "joinPaths", "updateImagePath", "updateAvailableWidth", "_me$resourceStore", "fit", "useWidth", "shouldAnimate", "_columnWidth", "groupField", "groupers", "currentGroup", "_currentGroup", "groupRecord", "groupParent", "groupChildren", "groupLeft", "groupWidth", "headerRenderer", "imageUrl", "image", "_resourceRecord$name", "toLowerCase", "imageExtension", "showAvatars", "getResourceAvatar", "initials", "defaultImageUrl", "defaultImageName", "onResourceMouseEvent", "resourceCell", "TimeAxisColumn", "WidgetColumn", "groupable", "hideable", "showColumnPicker", "filterable", "sortable", "searchable", "editor", "enableCellContextMenu", "tooltipRenderer", "needWidth", "exportable", "htmlEncode", "autoExposeFields", "_this$timeAxisView", "onViewModelUpdate", "viewModel", "refreshFakeScroll", "onTimelinePaint", "_me$grid", "onHeightChange", "internal", "currentElement", "internalRenderer", "isInitialCommitPerformed", "isDelayingCalculation", "ColumnStore", "registerColumnType", "VerticalTimeAxis", "wrapText", "buildHorizontalCells", "cellId", "minHeight", "VerticalTimeAxisColumn", "Column", "minWidth", "locked", "alwaysClearCell", "ariaLabel", "cellAriaLabel", "descriptionFormats", "month", "EventSelection", "EventNavigation", "resourceTimeRangeSelector", "allowOverlap", "preCalculateHeightLimit", "loadMaskError", "showDelay", "createEventOnDblClick", "scheduledblclick", "onTimeAxisCellDblClick", "onPaintOverride", "_me$firstVisibleRow", "_me$lastVisibleRow", "firstVisibleRow", "lastVisibleRow", "createEvent", "onVerticalScroll", "onEventCreated", "vertical", "processEventDrop", "processCrossSchedulerEventDrop", "beforeEventDragStart", "afterEventDragStart", "afterEventDragAbortFinalized", "checkEventDragValidity", "afterEventResizeStart", "hasEventEditor", "eventEditingFeature", "eventEdit", "taskEdit", "simpleEventEdit", "editEvent", "assignEventToResource", "commitAsync", "_me$eventEditingFeatu", "useEventModelDefaults", "defaultDuration", "defaultValues", "defaultDurationUnit", "durationUnit", "isDateRangeAvailable", "captureStm", "_me$eventEditingFeatu2", "freeStm", "getEventElement", "excludeEvent", "_me$crudManager", "toggleClasses", "getRowHeight", "storeKnownHeight", "estimateTotalHeight", "clearKnownHeights", "lastDate", "getEventRecord", "changeRange", "updateRange", "currentDate", "newDate", "updateDate", "changeStepUnit", "updateScrollBuffer", "previous", "scheduleEvent", "eventRect", "setTranslateXY", "setTopLeft", "addChild", "schedulableAreaSelector", "sortFeatureStore", "showEventColorPickers", "EventColorPicker", "ColorPicker", "colorSelected", "colorClasses", "colorClassPrefix", "colors", "ClockTemplate", "minuteHeight", "minuteTop", "hourHeight", "hourTop", "handLeft", "div", "template", "generateContent", "updateDateIndicator", "hourIndicatorEl", "minuteIndicatorEl", "isBrowserEnv", "transform", "unitLessThanDay", "_template", "TaskEditStm", "getStmCapture", "stmInitiallyAutoRecord", "stmInitiallyDisabled", "transferred", "applyStmCapture", "stmCapture", "startTransaction", "getStm", "hasStmCapture", "autoRecord", "enable", "isRecording", "stopTransaction", "startStmTransaction", "commitStmTransaction", "resetQueue", "rejectStmTransaction", "_stm$transaction", "transaction", "rejectTransaction", "enableStm", "disableStm", "disable", "commitOrReject", "promise", "rejectingStmTransaction", "TimeSpanMenuBase", "ContextMenuBase", "Combo", "buildItems", "addNone", "editable", "displayField", "valueField", "localizeDisplayFields", "allDaysValueAsArray", "allDaysValue", "workingDaysValue", "nonWorkingDays", "nonWorkingDaysValue", "splitCls", "_weekDays", "weekDays", "dayNames", "getDayNames", "RecurrenceDayRuleEncoder", "encodeDay", "findRecord", "RecurrenceDaysButtonGroup", "ButtonGroup", "toggleable", "updateItemText", "decodeDay", "getDayName", "__items", "RecurrenceMonthDaysButtonGroup", "minValue", "maxValue", "RecurrenceMonthsButtonGroup", "getMonthNames", "getMonthName", "placeholder", "_recurrence", "buildDayNumbers", "populate", "parseInt", "RecurrenceEditorPanel", "Panel", "setupWidgetConfig", "widgetConfig", "isMobile", "updateRecord", "frequencyField", "daysButtonField", "monthDaysButtonField", "monthsButtonField", "monthDaysRadioField", "positionAndDayRadioField", "stopRecurrenceField", "monthDays", "positions", "check", "uncheck", "syncEventRecord", "getValues", "w", "toggleStopFields", "countField", "onMonthDaysRadioFieldChange", "checked", "isWidgetAvailableForFrequency", "onPositionAndDayRadioFieldChange", "daysCombo", "positionsCombo", "onStopRecurrenceFieldChange", "frequency", "forFrequency", "onFrequencyFieldChange", "queryAll", "intervalField", "hint", "toggleFieldsState", "onChange", "required", "toggleGroup", "EventColorField", "ColorField", "picker", "EventMenu", "processItems", "pluginConfig", "getDataFromEvent", "_ref", "getTargetElementFromEvent", "shouldShowMenu", "eventParams", "showContextMenuFor", "getElementFromRecord", "triggerMouseEvent", "tiggerEvent", "deleteEvent", "unassignEvent", "showTaskColorPickers", "populateItemsWithData", "_items$eventColor", "isSchedulerPro", "menu", "Objects", "colorMenu", "changeItems", "icon", "onItem", "_menu$focusInEvent", "revertTarget", "focusInEvent", "_menu$focusInEvent2", "unassign", "separator", "featureClass", "GridFeatureManager", "registerFeature", "ScheduleMenu", "isDOMEvent", "_client$getCellDataFr", "_client$getDateFromDo", "addEvent"]
}
