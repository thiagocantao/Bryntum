{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/Slider.js"],
  "sourcesContent": ["import Widget from './Widget.js';\nimport Tooltip from './Tooltip.js';\nimport Rectangle from '../helper/util/Rectangle.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/Slider\n */\nconst arrowKeys = {\n    ArrowUp    : 1,\n    ArrowDown  : 1,\n    ArrowLeft  : 1,\n    ArrowRight : 1\n};\n\n/**\n * Wraps native &lt;input type=\"range\"&gt;\n *\n * @extends Core/widget/Widget\n *\n * @example\n * let slider = new Slider({\n *   text: 'Choose value'\n * });\n *\n * @classType slider\n * @inlineexample Core/widget/Slider.js\n * @widget\n */\nexport default class Slider extends Widget {\n    //region Config\n\n    static get $name() {\n        return 'Slider';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'slider';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set text. Appends value if Slider.showValue is true\n             * @member {String} text\n             */\n            /**\n             * Slider label text\n             * @config {String}\n             */\n            text : null,\n\n            /**\n             * Show value in label (appends in () if text is set)\n             * @config {Boolean}\n             * @default\n             */\n            showValue : true,\n\n            /**\n             * Show the slider value in a tooltip\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : false,\n\n            /**\n             * Get/set min value\n             * @member {Number} min\n             */\n            /**\n             * Minimum value\n             * @config {Number}\n             * @default\n             */\n            min : 0,\n\n            /**\n             * Get/set max value\n             * @member {Number} max\n             */\n            /**\n             * Maximum value\n             * @config {Number}\n             * @default\n             */\n            max : 100,\n\n            /**\n             * Get/set step size\n             * @member {Number} step\n             */\n            /**\n             * Step size\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n\n            /**\n             * Get/set value\n             * @member {Number} value\n             */\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : 50,\n\n            /**\n             * Unit to display next to the value, when configured with `showValue : true`\n             * @config {String}\n             * @default\n             */\n            unit : null,\n\n            // The value is set in the Light theme. The Material theme will have different value.\n            thumbSize : 20,\n\n            tooltip : {\n                $config : ['lazy', 'nullify'],\n                value   : {\n                    type     : 'tooltip',\n                    align    : 'b-t',\n                    anchor   : false, // No anchor displayed since thumbSize is different for different themes\n                    axisLock : true\n                }\n            },\n\n            localizableProperties : ['text'],\n\n            /**\n             * By default, the {@link #event-change} event is fired when a change gesture is completed, ie: on\n             * the mouse up gesture of a drag.\n             *\n             * Configure this as `true` to fire the {@link #event-change} event as the value changes *during* a drag.\n             * @prp {Boolean}\n             */\n            triggerChangeOnInput : null,\n\n            defaultBindProperty : 'value'\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    compose() {\n        const\n            { id, min, max, showValue, step, text, value, unit = '', disabled } = this,\n            inputId = `${id}-input`,\n            hasText = Boolean(text || showValue);\n\n        return {\n            class : {\n                'b-has-label' : hasText,\n                'b-text'      : hasText,\n                'b-disabled'  : disabled\n            },\n\n            children : {\n                input : {\n                    tag       : 'input',\n                    type      : 'range',\n                    id        : inputId,\n                    reference : 'input',\n                    disabled,\n\n                    min,\n                    max,\n                    step,\n                    value,\n                    // eslint-disable-next-line bryntum/no-listeners-in-lib\n                    listeners : {\n                        input     : 'onInternalInput',\n                        change    : 'onInternalChange',\n                        mouseover : 'onInternalMouseOver',\n                        mouseout  : 'onInternalMouseOut'\n                    }\n                },\n\n                label : {\n                    tag  : 'label',\n                    for  : inputId,\n                    html : showValue ? (text ? `${text} (${value}${unit})` : value + unit) : text\n                }\n            }\n        };\n    }\n\n    get focusElement() {\n        return this.input;\n    }\n\n    get percentProgress() {\n        return (this.value - this.min) / (this.max - this.min) * 100;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired while slider thumb is being dragged.\n     * @event input\n     * @param {Core.widget.Slider} source The slider\n     * @param {String} value The value\n     */\n\n    /**\n     * Fired after the slider value changes (on mouse up following slider interaction).\n     * @event change\n     * @param {String} value The value\n     * @param {Boolean} userAction Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.Slider} source The slider\n     */\n\n    /* break from doc comment */\n\n    onInternalKeyDown(e) {\n        // Contain arrow keys to be processed by the <input type=\"range\">, do not allow them to bubble\n        // up to by any owning container.\n        if (!this.readOnly && arrowKeys[e.key]) {\n            e.stopImmediatePropagation();\n        }\n    }\n\n    onInternalChange() {\n        this.updateUI();\n        this.triggerChange(true);\n        this.trigger('action', { value : this.value });\n    }\n\n    onInternalInput() {\n        const me = this;\n\n        if (me.readOnly) {\n            // Undo the change if we are readOnly.\n            // readOnly input attribute will not work for non-text fields: https://github.com/w3c/html/issues/89\n            me.input.value = me.value;\n            return;\n        }\n\n        me.value = parseInt(me.input.value, 10);\n\n        me.trigger('input', { value : me.value });\n        if (me.triggerChangeOnInput) {\n            me.triggerChange(me);\n        }\n    }\n\n    onInternalMouseOver() {\n        const\n            me            = this,\n            thumbPosition = me.rtl ? 100 - me.percentProgress : me.percentProgress;\n\n        me.tooltip?.showBy({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(thumbPosition)}`\n        });\n    }\n\n    onInternalMouseOut() {\n        this.tooltip?.hide();\n    }\n\n    triggerChange(userAction) {\n        this.triggerFieldChange({\n            value : this.value,\n            valid : true,\n            userAction\n        });\n    }\n\n    //endregion\n\n    //region Config Handling\n\n    // max\n    updateMax(max) {\n        const me = this;\n\n        if (me.input && me._value > max) {\n            me.value = max;\n            me.trigger('input', { value : me.value });\n        }\n    }\n\n    // min\n    updateMin(min) {\n        const me = this;\n\n        if (me.input && me._value < min) {\n            me.value = min;\n            me.trigger('input', { value : me.value });\n        }\n    }\n\n    // tooltip\n    changeTooltip(config, existingTooltip) {\n        if (config) {\n            config.owner = this;\n        }\n\n        return this.showTooltip ? Tooltip.reconfigure(existingTooltip, config, {\n            owner    : this,\n            defaults : {\n                forElement : this.input,\n                html       : String(this.value) + (this.unit ?? '')\n            }\n        }) : null;\n    }\n\n    changeValue(value) {\n        const\n            me            = this,\n            { min, step } = me;\n\n        value = Math.min(Math.max(value, min), me.max);\n\n        // Round the passed value so that it is in sync with our steps.\n        // For example, if our min is 10, and our step is 3, then\n        // passing 12 should get 13. Rounding the value directly to the closest\n        // step would fail this requirement.\n        if (value > min) {\n            return min + ObjectHelper.roundTo(value - min, step);\n        }\n        return ObjectHelper.roundTo(value, step);\n    }\n\n    updateValue(value) {\n        const\n            me = this,\n            { input, _tooltip } = me;\n\n        if (_tooltip) {\n            _tooltip.html = me.value + (me.unit ?? '');\n        }\n\n        if (input && input.value !== String(value)) {\n            input.value = value;\n            me.triggerChange(false);\n        }\n\n        me.updateUI();\n    }\n\n    //endregion\n\n    //region Util\n\n    updateUI() {\n        const me = this;\n\n        // Don't measure the UI unless we need to\n        me._tooltip?.isVisible && me._tooltip?.alignTo({\n            target : Rectangle.from(me.input).inflate(me.thumbSize / 2, -me.thumbSize / 2),\n            align  : `b-t${Math.round(me.percentProgress)}`\n        });\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nSlider.initClass();\n"],
  "mappings": "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",
  "names": ["arrowKeys", "ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "Slider", "Widget", "$name", "type", "configurable", "text", "showValue", "showTooltip", "min", "max", "step", "value", "unit", "thumbSize", "tooltip", "$config", "align", "anchor", "axisLock", "localizableProperties", "triggerChangeOnInput", "defaultBindProperty", "compose", "id", "disabled", "inputId", "hasText", "Boolean", "class", "children", "input", "tag", "reference", "listeners", "change", "mouseover", "mouseout", "label", "for", "html", "focusElement", "percentProgress", "onInternalKeyDown", "e", "readOnly", "key", "stopImmediatePropagation", "onInternalChange", "updateUI", "triggerChange", "trigger", "onInternalInput", "me", "parseInt", "onInternalMouseOver", "_me$tooltip", "thumbPosition", "rtl", "showBy", "target", "Rectangle", "from", "inflate", "Math", "round", "onInternalMouseOut", "_this$tooltip", "hide", "userAction", "triggerFieldChange", "valid", "updateMax", "_value", "updateMin", "changeTooltip", "config", "existingTooltip", "owner", "Tooltip", "reconfigure", "defaults", "forElement", "String", "_a", "changeValue", "ObjectHelper", "roundTo", "updateValue", "_tooltip", "_me$_tooltip", "_me$_tooltip2", "isVisible", "alignTo", "initClass", "_$name"]
}
