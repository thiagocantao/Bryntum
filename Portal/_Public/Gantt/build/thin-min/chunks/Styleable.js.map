{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/mixin/Styleable.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n\n/**\n * @module Core/widget/mixin/Styleable\n */\n\n/**\n * Mixin for widgets that allows manipulating CSS variables. Works by setting style properties of the target widgets\n * element.\n *\n * As part of configuration:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    css : {\n *        cardBorderTop    : '5px solid currentColor',\n *        columnBackground : '#ddd'\n *    }\n * });\n * ```\n *\n * And/or at runtime:\n *\n * ```javascript\n * taskBoard.css.cardBackground = '#333';\n * ```\n *\n * @mixin\n */\nexport default Target => class Styleable extends (Target || Base) {\n    static $name = 'Styleable';\n\n    static configurable = {\n        /**\n         * CSS variable prefix, appended to the keys used in {@link #config-css}.\n         *\n         * For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         * @config {String}\n         * @category CSS\n         */\n        cssVarPrefix : '',\n\n        /**\n         * Allows runtime manipulating of CSS variables.\n         *\n         * See {@link #config-css} for more information.\n         *\n         * ```javascript\n         * taskBoard.css.columnBackground = '#ccc';\n         *\n         * // Will set \"--taskboard-column-background : #ccc\"\n         * ```\n         *\n         * @member {Proxy} css\n         * @category DOM\n         */\n\n        /**\n         * Initial CSS variables to set.\n         *\n         * Each key will be applied as a CSS variable to the target elements style. Key names are hyphenated and\n         * prefixed with {@link #config-cssVarPrefix} in the process. For example:\n         *\n         * ```javascript\n         * {\n         *    cssVarPrefix : 'taskboard',\n         *\n         *    css : {\n         *        cardBackground : '#333'\n         *    }\n         * }\n         * ```\n         *\n         * Results in the css var `--taskboard-card-background` being set to `#333`.\n         *\n         * @config {Object}\n         * @category CSS\n         */\n        css : {}\n    };\n\n    changeCssVarPrefix(prefix) {\n        ObjectHelper.assertString(prefix, 'prefix');\n\n        if (prefix && !prefix.endsWith('-')) {\n            prefix = prefix + '-';\n        }\n\n        return prefix || '';\n    }\n\n    changeCss(css) {\n        ObjectHelper.assertObject(css, 'css');\n\n        const me = this;\n\n        if (!globalThis.Proxy) {\n            throw new Error('Proxy not supported');\n        }\n\n        const proxy = new Proxy({}, {\n            get(target, property) {\n                // <remove-on-release>\n                // TODO: Worth keeping the live css object? Or just overhead if not often used?\n                // </remove-on-release>\n                const styles = getComputedStyle(me.element || document.documentElement);\n                return styles.getPropertyValue(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`)?.trim();\n            },\n\n            set(target, property, value) {\n                const element = me.element || document.documentElement;\n                element.style.setProperty(`--${me.cssVarPrefix}${StringHelper.hyphenate(property)}`, value);\n                return true;\n            }\n        });\n\n        if (css) {\n            if (me._element) {\n                ObjectHelper.assign(proxy, css);\n            }\n            else {\n                me.$initialCSS = css;\n            }\n        }\n\n        return proxy;\n    }\n\n    // Apply any initially supplied CSS when we have an element\n    updateElement(element, ...args) {\n        super.updateElement(element, ...args);\n\n        if (this.$initialCSS) {\n            ObjectHelper.assign(this.css, this.$initialCSS);\n        }\n    }\n\n    get widgetClass() {}\n};\n"],
  "mappings": "+OA6BA,IAAAA,EAAeC,GAAM,OAAI,OAAAC,EAAA,cAAyBD,GAAUE,EAAM,CA4D9DC,mBAAmBC,EAAQ,CACvBC,OAAAA,EAAaC,aAAaF,EAAQ,QAAQ,EACtCA,GAAU,CAACA,EAAOG,SAAS,GAAG,IAC9BH,EAASA,EAAS,KAEfA,GAAU,EACrB,CACAI,UAAUC,EAAK,CACXJ,EAAaK,aAAaD,EAAK,KAAK,EACpC,MAAME,EAAK,KACX,GAAI,CAACC,WAAWC,MACZ,MAAM,IAAIC,MAAM,qBAAqB,EAEzC,MAAMC,EAAQ,IAAIF,MAAM,CAAA,EAAI,CACxBG,IAAIC,EAAQC,EAAU,CAAA,IAAAC,EAElB,OAAAA,EADeC,iBAAiBT,EAAGU,SAAWC,SAASC,eAAe,EACxDC,iBAAkB,KAAIb,EAAGc,eAAeC,EAAaC,UAAUT,CAAQ,GAAG,KAAC,MAAAC,IAAA,OAAA,OAAlFA,EAAoFS,KAAI,GAEnGC,IAAIZ,EAAQC,EAAUY,EAAO,CAEzBT,OADgBV,EAAGU,SAAWC,SAASC,iBAC/BQ,MAAMC,YAAa,KAAIrB,EAAGc,eAAeC,EAAaC,UAAUT,CAAQ,IAAKY,CAAK,EACnF,EACX,CACJ,CAAC,EACD,OAAIrB,IACIE,EAAGsB,SACH5B,EAAa6B,OAAOnB,EAAON,CAAG,EAG9BE,EAAGwB,YAAc1B,GAGlBM,CACX,CAEAqB,cAAcf,KAAYgB,EAAM,CAC5B,MAAMD,cAAcf,EAAS,GAAGgB,CAAI,EAChC,KAAKF,aACL9B,EAAa6B,OAAO,KAAKzB,IAAK,KAAK0B,WAAW,CAEtD,CACA,IAAIG,aAAc,CAAA,CACtB,EArGIC,EADqBtC,EACduC,QAAQ,aACfD,EAFqBtC,EAEdwC,eAAe,CAoBlBhB,aAAe,GAoCfhB,IAAM,CAAA,IA1DWR",
  "names": ["Styleable", "Target", "_a", "Base", "changeCssVarPrefix", "prefix", "ObjectHelper", "assertString", "endsWith", "changeCss", "css", "assertObject", "me", "globalThis", "Proxy", "Error", "proxy", "get", "target", "property", "_styles$getPropertyVa", "getComputedStyle", "element", "document", "documentElement", "getPropertyValue", "cssVarPrefix", "StringHelper", "hyphenate", "trim", "set", "value", "style", "setProperty", "_element", "assign", "$initialCSS", "updateElement", "args", "widgetClass", "__publicField", "$name", "configurable"]
}
