{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/NumberColumn.js", "../../../../Grid/lib/Grid/column/TreeColumn.js", "../../../../Grid/lib/Grid/feature/Tree.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/column/NumberColumn\n */\n\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency',\n *                currency : 'USD'\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classType number\n * @inlineexample Grid/column/NumberColumn.js\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n\n    static type = 'number';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = [\n        'format',\n\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n\n    static get defaults() {\n        return {\n            filterType : 'number',\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n\n        return formatter;\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n\n    /**\n     * Renderer that displays a formatted number in the cell. If you create a custom renderer, and want to include the\n     * formatted number you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type   : 'number',\n     *             text   : 'Total cost',\n     *             field  : 'totalCost',\n     *             format : {\n     *                 style    : 'currency',\n     *                 currency : 'USD'\n     *             },\n     *             renderer({ value }) {\n     *                  return `Total cost: ${this.defaultRenderer({ value })}`;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {String} Formatted number\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\n\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\n", "import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/column/TreeColumn\n */\n\nlet currentParentHasIcon = false;\n\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classType tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n\n    static $name = 'TreeColumn';\n\n    static type = 'tree';\n\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String|null} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String|null} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n             * Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n             * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current\n             * row. Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             * in case none is specified. Can be null in case of export\n             * @param {Number} [renderData.size.height] Set this to request a certain row height\n             * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n             * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during\n             * export.\n             * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n             * call. In which case an advanced renderer might need to take different actions.\n             * @config {Function} renderer\n             * @category Common\n             */\n            'renderer'\n        ];\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : {\n                    'b-tree-cell-inner' : 1\n                },\n                tag    : record.href ? 'a' : 'div',\n                href   : record.href,\n                target : record.target,\n                children\n            },\n            rowClasses  = {\n                'b-tree-parent-row'  : 0,\n                'b-tree-collapsed'   : 0,\n                'b-tree-expanded'    : 0,\n                'b-loading-children' : 0\n            };\n\n        let outputIsObject, iconCls, { value } = renderData,\n            renderingColumn = me;\n\n        const parentRenderer = grid.isTreeGrouped && !record.isLeaf && grid.features.treeGroup.parentRenderer;\n\n        if (me.originalRenderer || parentRenderer) {\n            let rendererHtml;\n\n            if (parentRenderer) {\n                if (record.field) {\n                    renderingColumn = grid.columns.get(record.field);\n                    value = renderingColumn.isWidgetColumn ? value\n                        : (renderingColumn.renderer || renderingColumn.defaultRenderer)?.call(\n                            renderingColumn,\n                            {\n                                ...renderData,\n                                column      : renderingColumn,\n                                value       : record.name,\n                                isTreeGroup : true\n                            }) ?? record.name;\n                }\n                rendererHtml = grid.features.treeGroup.parentRenderer({\n                    field  : record.field,\n                    value,\n                    column : renderingColumn,\n                    record : record.firstGroupChild,\n                    grid\n                });\n            }\n            else {\n                rendererHtml         = me.originalRenderer(renderData);\n            }\n\n            // Check if the cell content is going to be rendered by framework\n            const hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                cellContent : rendererHtml,\n                renderingColumn\n            });\n\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n\n        if (isExport) {\n            return value;\n        }\n\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n\n            rowClasses['b-tree-parent-row']  = 1;\n            rowClasses['b-tree-collapsed']   = isCollapsed;\n            rowClasses['b-tree-expanded']    = !isCollapsed;\n            rowClasses['b-loading-children'] = gridMeta.isLoadingChildren;\n\n            cellElement.classList.add('b-tree-parent-cell');\n\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            // <remove-on-release>\n            // TODO: Cleanup for reusing dom nodes should be done elsewhere, also cleanup selection\n            // </remove-on-release>\n            cellElement.classList.add('b-tree-leaf-cell');\n\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow) {\n            row.assignCls(rowClasses);\n\n            if (!record.isLeaf) {\n                row.setAttribute('aria-expanded', !isCollapsed);\n\n                if (isCollapsed) {\n                    row.removeAttribute('aria-owns');\n                }\n                else {\n                    for (const region in grid.subGrids) {\n                        const el = row.elements[region];\n\n                        // A branch node may be configured expanded, but yet have no children.\n                        // They may be added dynamically.\n                        DomHelper.setAttributes(el, {\n                            'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                        });\n                    }\n                }\n            }\n        }\n\n        // Array of DomConfigs\n        if (Array.isArray(value)) {\n            innerConfig.children = value;\n        }\n        // Single DomConfig\n        else if (outputIsObject) {\n            Object.assign(innerConfig, value);\n        }\n        // If we are encoding HTML, or there's no raw HTML, we can use the text property\n        // as the raw value, and DomSync will create a TextNode from that.\n        else if (renderingColumn.shouldHtmlEncode || !value.includes('<')) {\n            result.className['b-text-value'] = 1;\n            innerConfig.text = value;\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n\n        result.style = `padding-inline-start:${padding}em`;\n\n        return result;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n\n/**\n * @module Grid/feature/Tree\n */\n\nconst immediatePromise = Promise.resolve();\n\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                 | Action                   | Action description                                                   |\n * |----------------------|--------------------------|----------------------------------------------------------------------|\n * | `Space`              | *toggleCollapseByKey*    | When focus on a parent node, this expands or collapses it's children |\n * | `ArrowRight`         | *expandIfSingleColumn*   | Expands a focused parent node if grid consist of one column only     |\n * | `Shift`+`ArrowRight` | *expandByKey*            | Expands a focused parent node                                        |\n * | `ArrowLeft`          | *collapseIfSingleColumn* | Collapses a focused parent node if grid consist of one column only   |\n * | `Shift`+`ArrowLeft`  | *collapseByKey*          | Collapses a focused parent node                                      |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n\n    static $name = 'Tree';\n\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n\n        client.store && this.bindStore(client.store);\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n\n    get store() {\n        return this.client.store;\n    }\n\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n\n        return me._treeColumn;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n\n    //endregion\n\n    //region Expand & collapse\n\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @on-owner\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n\n        // Record generation is incremented to force React/Vue wrappers to recreate UI elements\n        record.generation++;\n\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n\n            if (row && record.ancestorsExpanded()) {\n                const cellElement = me.treeColumn && !me.treeColumn.subGrid.collapsed && row.getCell(me.treeColumn.id);\n\n                // Toggle cell's expanded/collapsed state\n                cellElement && row.renderCell(cellElement);\n            }\n\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     * @category Tree\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     * @category Tree\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.addCls('b-loading-children');\n    }\n\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     * @category Tree\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        // <remove-on-release>\n        // TODO: Some logic here and some in the store, keep in same place maybe\n        // </remove-on-release>\n        const\n            { client, store } = this,\n            promises          = [],\n            childRecords      = [];\n\n        client.trigger('beforeToggleAllNodes', { collapse });\n\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n\n            client.trigger('toggleAllNodes', { collapse });\n        });\n    }\n\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     * @category Tree\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                = this,\n            { store, client } = me;\n\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n\n            return;\n        }\n\n        const record = store.getById(idOrRecord);\n\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n\n            client.suspendRefresh();\n\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false);\n                }\n            }\n\n            client.resumeRefresh?.();\n\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n\n        return false;\n    }\n\n    //endregion\n\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (record && focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\n\nTree.featureClass = 'b-tree';\n\nGridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],
  "mappings": "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",
  "names": ["NumberColumn", "Column", "defaults", "filterType", "format", "defaultEditor", "name", "max", "min", "step", "largeStep", "align", "ObjectHelper", "cleanupProperties", "type", "textAlign", "formatter", "me", "_formatter", "_lastFormat", "NumberFormat", "get", "formatValue", "value", "unit", "defaultRenderer", "__publicField", "fieldType", "fields", "ColumnStore", "registerColumnType", "exposeProperties", "_$name", "currentParentHasIcon", "TreeColumn", "tree", "hideable", "minWidth", "defaultValue", "constructor", "config", "store", "arguments", "shouldHtmlEncode", "htmlEncode", "setData", "renderer", "originalRenderer", "treeRenderer", "bind", "renderData", "grid", "cellElement", "row", "record", "isExport", "gridMeta", "instanceMeta", "isCollapsed", "isLeaf", "collapsed", "innerConfig", "className", "children", "result", "tag", "href", "target", "rowClasses", "outputIsObject", "iconCls", "renderingColumn", "parentRenderer", "isTreeGrouped", "features", "treeGroup", "_grid$hasFrameworkRen", "rendererHtml", "field", "_ref", "columns", "isWidgetColumn", "call", "column", "isTreeGroup", "firstGroupChild", "hasFrameworkRenderer", "cellContent", "innerHTML", "String", "classList", "add", "leafIconCls", "_record$children", "isExpanded", "expanderIconCls", "expandIconCls", "collapseIconCls", "folderIconCls", "collapsedFolderIconCls", "expandedFolderIconCls", "isLoadingChildren", "unshift", "length", "splice", "isRow", "assignCls", "setAttribute", "removeAttribute", "region", "subGrids", "_record$children2", "_record$children3", "el", "elements", "DomHelper", "setAttributes", "map", "r", "id", "join", "Array", "isArray", "Object", "assign", "includes", "text", "html", "padding", "childLevel", "indentSize", "style", "getCurrentConfig", "options", "$name", "immediatePromise", "Promise", "resolve", "Tree", "InstancePlugin", "mixin", "Delayable", "pluginConfig", "chain", "construct", "client", "treeColumn", "console", "info", "bindStore", "doDisable", "disable", "Error", "_treeColumn", "find", "isTreeColumn", "detachListeners", "ion", "beforeLoadChildren", "loadChildren", "loadChildrenException", "beforeToggleNode", "thisObj", "toggleCollapse", "idOrRecord", "collapse", "rowManager", "getById", "meta", "generation", "getRowFor", "ancestorsExpanded", "subGrid", "getCell", "renderCell", "isTogglingNode", "element", "requestAnimationFrame", "remove", "trigger", "expand", "onBeforeToggleNode", "onBeforeLoadChildren", "source", "params", "parent", "modelClass", "idField", "addCls", "onLoadChildren", "removeCls", "onLoadChildrenException", "expandOrCollapseAll", "topNode", "rootNode", "promises", "childRecords", "suspendEvents", "traverse", "push", "resumeEvents", "all", "then", "refreshRows", "records", "isCollapse", "isCollapseAll", "isExpand", "isExpandAll", "collapseAll", "expandAll", "expandTo", "scrollIntoView", "suspendRefresh", "i", "_me$expandTo", "_client$resumeRefresh", "resumeRefresh", "refresh", "hiddenByCollapse", "_client$resumeRefresh2", "_client$refreshRows", "parents", "isRoot", "isDestroyed", "scrollRowIntoView", "onElementPointerUp", "event", "cellData", "getCellDataFromEvent", "closest", "expandOnCellClick", "isParent", "onElementClick", "preventDefault", "toggleCollapseByKey", "focusedCell", "rowIndex", "isActionable", "expandIfSingleColumn", "count", "expandByKey", "collapseIfSingleColumn", "collapseByKey", "deselectAll", "focusCell", "configurable", "keyMap", "ArrowRight", "ArrowLeft", "featureClass", "GridFeatureManager", "registerFeature"]
}
