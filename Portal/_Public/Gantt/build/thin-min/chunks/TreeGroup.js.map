{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/feature/TreeGroup.js"],
  "sourcesContent": ["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\n\n/**\n * @module Grid/feature/TreeGroup\n */\n\n/**\n * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n * record field per parent level. Parents are generated based on each leaf's value for those fields.\n *\n * {@inlineexample Grid/feature/TreeGroup.js}\n *\n * This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The actual\n * transformation happens in a new store, that contains links to the original records. The original store's structure is\n * kept intact and will be plugged back in when calling {@link #function-clearGroups}.\n *\n * Any modification of the links is relayed to the original store. So cell editing and other features will work as\n * expected and the original data will be updated.\n *\n * Combine this feature with {@link Grid/widget/GroupBar} to allow users to drag drop column header to group the tree\n * store.\n *\n * <div class=\"note\">\n * Please note that this feature requires using a {@link Grid/view/TreeGrid} or having the {@link Grid/feature/Tree}\n * feature enabled.\n * </div>\n *\n * This snippet shows how the sample dataset used in the demo above is transformed:\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Original data\n *     data : [\n *         { id : 1, name : 'Project 1', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { id : 2, name : 'Project 2', children : [\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n *         ]}\n *     ],\n *\n *     features : {\n *         treeGroup : {\n *             // Fields to build a new tree from\n *             levels : [ 'prio', 'status' ]\n *         }\n *     }\n * });\n *\n * // Resulting data\n * [\n *     { name : 'low', children : [\n *         { name : 'done', children : [\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n *         ]}\n *     ]},\n *     { name : 'high', children : [\n *         { name : 'done', children : [\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { name : 'wip', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n *         ]}\n *     ]}\n * ]\n * ```\n *\n * Generated parent records are indicated with `generatedParent` and `key` properties. The first one is set to\n * `true` and the latter one has a value for the group the parent represents.\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Moving nodes manually in the tree is not supported while it is grouped. The linked records have their own\n *   `parentId` fields, not linked to the original records value.\n * * The generated structure is not meant to be persisted.\n *\n * <div class=\"note\">\n * Please note that this feature is not supported in vertical mode in Scheduler.\n * </div>\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype treeGroup\n * @feature\n */\nexport default class TreeGroup extends InstancePlugin {\n    static $name = 'TreeGroup';\n\n    static configurable = {\n        /**\n         * An array of model field names or functions used to determine the levels in the resulting tree.\n         *\n         * When supplying a function, it will be called for each leaf in the original data, and it is expected to return\n         * an atomic value used to determine which parent the leaf will be added to at that level.\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 // First level is determined by the value of the status field\n         *                 'status',\n         *                 // Second level by the result of this function\n         *                 // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n         *                 record => (record.percentDone % 10) * 10\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * The function form can also be used as a formatter/renderer of sorts, simply by returning a string:\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 record => `Status: ${record.status}`\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * Assigning `null` restores the tree structure to its original state.\n         *\n         * @prp {Array<String|Function(Core.data.Model) : any>} levels\n         */\n        levels : [],\n\n        /**\n         * CSS class to apply to the generated parents.\n         *\n         * @config {String}\n         * @default\n         */\n        parentCls : 'b-generated-parent',\n\n        /**\n         * A function letting you format the text shown in the generated parent group levels. This method will be provided\n         * with the value produced by the column representing the grouped level. Each column's renderer method will be\n         * provided an extra `isTreeGroup` param to indicate that the value will be used for a generated parent. `cellElement`\n         * and other DOM specific args will be in the context of the tree column.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         treeGroup : {\n         *             hideGroupedColumns : true,\n         *             levels             : [\n         *                 'priority'\n         *             ],\n         *             parentRenderer({ field, value, column, record }) {\n         *                 // For generated group parent, prefix with the grouped column text\n         *                 return column.text + ': ' + value;\n         *             }\n         *         }\n         *     }\n         * })\n         * ```\n         * @config {Function}\n         * @param {Object} data The rendering data representing the generated tree parent record\n         * @param {String} data.field The field representing this group level (e.g. 'priority')\n         * @param {*} data.value The value representing this group level (e.g. 'high')\n         * @param {Grid.column.Column} data.column The value representing this group level (e.g. 'high')\n         * @param {Core.data.Model} data.record The first record for this parent\n         */\n        parentRenderer : null,\n\n        /**\n         * True to hide grouped columns. Only supported when using String to define levels.\n         *\n         * @config {Boolean}\n         */\n        hideGroupedColumns : null,\n\n        /**\n         * The number of milliseconds to wait after {@link #function-scheduleRefreshGroups} call\n         * before actually refreshing groups.\n         * Each further {@link #function-scheduleRefreshGroups} call during that timeout will restart the timer.\n         * @config {Number}\n         * @default\n         * @private\n         */\n        refreshGroupsTimeout : 100\n    };\n\n    static pluginConfig = {\n        chain  : ['populateHeaderMenu'],\n        assign : ['group', 'clearGroups', 'refreshGroups']\n    };\n\n    static properties = {\n        isApplying    : 0,\n        /**\n         * The original store used by the component before applying grouping. Use this to modify / load data\n         * while tree grouping is active.\n         * @property {Core.data.Store}\n         * @readonly\n         */\n        originalStore : null\n    };\n\n    construct(grid, config) {\n        this.treeColumn = grid.columns.find(col => col.isTreeColumn);\n\n        super.construct(grid, config);\n        this._levels = this._levels || [];\n\n        if (!grid.hasFeature('tree')) {\n            throw new Error('The TreeGroup feature requires the Tree feature to be enabled');\n        }\n    }\n\n    applyPluginConfig() {\n        /**\n         * A \"debounced\" version of {@link #function-refreshGroups} method.\n         * When first invoked will wait for {@link #config-refreshGroupsTimeout} before\n         * before actually refreshing groups.\n         * Each further {@link #function-scheduleRefreshGroups} call during that timeout will restart the timer.\n         *\n         * The function is useful to avoid excessive refreshes when reacting on some events tha could be triggered\n         * multiple times.\n         * @function scheduleRefreshGroups\n         * @private\n         */\n        this.scheduleRefreshGroups = FunctionHelper.createBuffered(this.refreshGroups, this.refreshGroupsTimeout, this);\n\n        return super.applyPluginConfig(...arguments);\n    }\n\n    processParentData(parentData) {\n        const me = this;\n        // Apply cls to allow custom styling of generated parents\n        if (me.parentCls) {\n            parentData.cls = me.parentCls;\n        }\n    }\n\n    processTransformedData(transformedData) {}\n\n    async waitForReadiness() {\n        const me = this;\n\n        // Wait for store to finish loading before transforming the data\n        if (me.originalStore.isLoading) {\n            await me.originalStore.await('load', false);\n\n            if (me.isDestroyed) {\n                return;\n            }\n        }\n\n        // For Scheduler, Pro & Gantt, to not have to implement a TreeGroup in Scheduler just to add this\n        const { crudManager } = this.client;\n\n        if (crudManager) {\n            if (crudManager.isLoadingOrSyncing || crudManager._autoLoadPromise) {\n                await crudManager.await('requestDone');\n            }\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            await me.client.project?.commitAsync();\n        }\n    }\n\n    async applyLevels(levels) {\n        const\n            me                     = this,\n            { client, treeColumn } = me;\n\n        let\n            { store } = client,\n            result    = null,\n            treeColumnField;\n\n        const { modelClass } = store;\n\n        // Get TreeColumn field name (if column.field is provided)\n        if (treeColumn?.field && modelClass.getFieldDefinition(treeColumn.field)) {\n            treeColumnField = modelClass.getFieldDataSource(treeColumn.field);\n        }\n\n        levels = levels || [];\n        if (levels.length === 0 && this.isConfiguring) {\n            return;\n        }\n\n        me._levels = levels;\n\n        me.isApplying++;\n\n        client.suspendRefresh();\n\n        if (!me.originalStore) {\n            me.originalStore = store;\n            store            = new store.constructor({\n                reapplyFilterOnAdd    : true,\n                reapplyFilterOnUpdate : true,\n                tree                  : true,\n                modelClass            : store.modelClass,\n                load                  : store.load?.bind(store),\n                commit                : store.commit.bind(store),\n                filter                : store.filter.bind(store),\n                clearFilters          : store.clearFilters.bind(store)\n            });\n            client.store     = store;\n\n            me.originalStore.ion({\n                name      : 'originalStore',\n                refresh   : me.onOriginalStoreRefresh,\n                add       : me.onOriginalStoreChanged,\n                remove    : me.onOriginalStoreChanged,\n                removeAll : me.onOriginalStoreChanged,\n                thisObj   : me\n            });\n        }\n\n        await me.waitForReadiness();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Applying custom levels\n        if (levels.length > 0) {\n            // Plug links in to allow transforming them below\n            store.data = me.originalStore.getAllDataRecords(false).flatMap(record => record.isLeaf ? record.link() : []);\n\n            // Transform it according to levels\n            result = store.treeify(levels, parentData => {\n                // Use group key as tree columns content (if the column field is provided)\n                if (treeColumnField) {\n                    ObjectHelper.setPath(parentData, treeColumnField, parentData.key);\n                }\n\n                // Let the outside world manipulate generated parents data before turning it into a record\n                me.processParentData(parentData);\n            });\n\n            me.processTransformedData(result);\n\n            await me.trigger('beforeDataLoad', { store, data : result.children });\n\n            // Load the transformed result into the \"display store\"\n            store.data = result.children;\n        }\n        // Clearing custom levels\n        else {\n            client.store = me.originalStore;\n            me.detachListeners('originalStore');\n            me.originalStore = null;\n        }\n\n        me.isApplying--;\n\n        client.resumeRefresh();\n\n        if (client.isPainted) {\n            client.renderRows(false);\n        }\n\n        client.trigger('treeGroupChange', { levels });\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clearGroups();\n        }\n\n        super.doDisable(disable);\n    }\n\n    onOriginalStoreChanged() {\n        this.scheduleRefreshGroups();\n    }\n\n    onOriginalStoreRefresh({ action }) {\n        if (action === 'dataset' || action === 'filter') {\n            this.scheduleRefreshGroups();\n        }\n    }\n\n    updateLevels(levels, old) {\n        const me         = this,\n            { client } = me;\n\n        if (me.hideGroupedColumns) {\n            old?.forEach(field => {\n                field = field.fieldName || field;\n\n                if (!levels.some(level => (level.fieldName || level) === field)) {\n                    client.columns.get(field).show();\n                }\n            });\n\n            levels?.forEach(field => {\n                field = field.fieldName || field;\n                if (!old || !old.some(fn => fn.fieldName === field)) {\n                    client._suspendRenderContentsOnColumnsChanged = true;\n                    client.columns.get(field).hide();\n                    client._suspendRenderContentsOnColumnsChanged = false;\n                }\n            });\n        }\n\n        if (levels || !me.isConfiguring) {\n            me.updatePromise = me.applyLevels(levels);\n\n            client.renderContents();\n        }\n    }\n\n    /**\n     *\n     * Transforms the data according to the supplied levels.\n     *\n     * Yields the same result as assigning to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Transform into a tree with two parent levels\n     * grid.group('status', record => (record.percentDone % 10) * 10);\n     * ```\n     *\n     * @param {Array<String|Grid.column.Column|Function(Core.data.Model) : any>} levels Field names or functions use to generate parents in resulting tree.\n     * @on-owner\n     * @category Common\n     */\n    async group(levels) {\n        ObjectHelper.assertArray(levels, 'group()');\n\n        await this.applyLevels(levels);\n    }\n\n    /**\n     * Clears the previously applied transformation, restoring data to its initial state.\n     *\n     * Yields the same result as assigning `null` to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Restore original data\n     * grid.clearGroups();\n     * ```\n     * @on-owner\n     * @category Common\n     */\n    async clearGroups() {\n        if (this.isGrouped) {\n            this.levels = [];\n            await this.updatePromise;\n        }\n    }\n\n    /**\n     * Refreshes the store tree grouping by re-applying the current transformation.\n     *\n     * ```javascript\n     * // Refresh groups\n     * grid.refreshGroups();\n     * ```\n     * @on-owner\n     * @category Common\n     * @private\n     */\n    refreshGroups() {\n        // since we have a buffered wrapper of this function\n        // we have to check if applyLevels exists in case the feature is destroyed\n        return this.applyLevels?.(this._levels);\n    }\n\n    /**\n     * Indicates if the feature has applied grouping and the component uses\n     * a transformed version of the store.\n     * @property {Boolean}\n     */\n    get isGrouped() {\n        return this._levels.length > 0;\n    }\n\n    /**\n     * Supply items for headers context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const\n            me        = this,\n            groupable = column.groupable !== false && !column.isTreeColumn;\n\n        let separator = false;\n\n        if (groupable && !me.isGroupedByField(column.field)) {\n            items.groupAsc = {\n                text        : 'L{group}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-group-asc',\n                separator   : true,\n                weight      : 400,\n                disabled    : me.disabled,\n                onItem      : () => me.addGrouper(column)\n            };\n            separator      = true;\n        }\n\n        if (me.isGrouped) {\n            if (me.isGroupedByField(column.field)) {\n                items.groupRemove = {\n                    text        : 'L{stopGroupingThisColumn}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-clear',\n                    separator   : !separator,\n                    weight      : 420,\n                    disabled    : me.disabled,\n                    onItem      : () => me.removeGrouper(column)\n                };\n                separator         = true;\n            }\n\n            items.groupRemoveAll = {\n                text        : 'L{stopGrouping}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-clear',\n                separator   : !separator,\n                weight      : 420,\n                disabled    : me.disabled,\n                onItem      : () => me.clearGroups()\n            };\n        }\n    }\n\n    addGrouper(column) {\n        this.levels = this.levels.concat(column.field);\n    }\n\n    isGroupedByField(field) {\n        return this.levels.find(groupFn => groupFn.fieldName === field);\n    }\n\n    removeGrouper(column) {\n        this.levels.splice(this.levels.findIndex(groupFn => groupFn.fieldName === column.field), 1);\n        this.levels = this.levels.slice();\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup);\n"],
  "mappings": "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",
  "names": ["TreeGroup", "InstancePlugin", "construct", "grid", "config", "treeColumn", "columns", "find", "col", "isTreeColumn", "_levels", "hasFeature", "Error", "applyPluginConfig", "scheduleRefreshGroups", "FunctionHelper", "createBuffered", "refreshGroups", "refreshGroupsTimeout", "arguments", "processParentData", "parentData", "me", "parentCls", "cls", "processTransformedData", "transformedData", "waitForReadiness", "originalStore", "isLoading", "await", "isDestroyed", "crudManager", "client", "_me$client$project", "isLoadingOrSyncing", "_autoLoadPromise", "project", "commitAsync", "applyLevels", "levels", "store", "result", "treeColumnField", "modelClass", "field", "getFieldDefinition", "getFieldDataSource", "length", "isConfiguring", "isApplying", "suspendRefresh", "_store$load", "constructor", "reapplyFilterOnAdd", "reapplyFilterOnUpdate", "tree", "load", "bind", "commit", "filter", "clearFilters", "ion", "name", "refresh", "onOriginalStoreRefresh", "add", "onOriginalStoreChanged", "remove", "removeAll", "thisObj", "data", "getAllDataRecords", "flatMap", "record", "isLeaf", "link", "treeify", "ObjectHelper", "setPath", "key", "trigger", "children", "detachListeners", "resumeRefresh", "isPainted", "renderRows", "doDisable", "disable", "clearGroups", "action", "updateLevels", "old", "hideGroupedColumns", "forEach", "fieldName", "some", "level", "get", "show", "fn", "_suspendRenderContentsOnColumnsChanged", "hide", "updatePromise", "renderContents", "group", "assertArray", "isGrouped", "_this$applyLevels", "call", "populateHeaderMenu", "column", "items", "groupable", "separator", "isGroupedByField", "groupAsc", "text", "localeClass", "icon", "weight", "disabled", "onItem", "addGrouper", "groupRemove", "removeGrouper", "groupRemoveAll", "concat", "groupFn", "splice", "findIndex", "slice", "__publicField", "$name", "configurable", "parentRenderer", "pluginConfig", "chain", "assign", "properties", "_$name", "GridFeatureManager", "registerFeature"]
}
