{
  "version": 3,
  "sources": ["../../../Scheduler/lib/Scheduler/data/mixin/PartOfBaseProject.js", "../../../Scheduler/lib/Scheduler/column/EventColorColumn.js", "../../../Scheduler/lib/Scheduler/column/ResourceCollapseColumn.js", "../../../Scheduler/lib/Scheduler/feature/EventDragSelect.js", "../../../Scheduler/lib/Scheduler/feature/EventNonWorkingTime.js", "../../../Scheduler/lib/Scheduler/feature/GroupSummary.js", "../../../Scheduler/lib/Scheduler/feature/HeaderZoom.js", "../../../Scheduler/lib/Scheduler/feature/Pan.js", "../../../Scheduler/lib/Scheduler/feature/ResourceMenu.js", "../../../Scheduler/lib/Scheduler/feature/ResourceTimeRanges.js", "../../../Scheduler/lib/Scheduler/feature/SimpleEventEdit.js", "../../../Scheduler/lib/Scheduler/feature/Split.js", "../../../Scheduler/lib/Scheduler/feature/Summary.js", "../../../Scheduler/lib/Scheduler/feature/TimeSelection.js", "../../../Scheduler/lib/Scheduler/util/ScheduleTableExporter.js", "../../../Scheduler/lib/Scheduler/feature/experimental/ExcelExporter.js", "../../../Scheduler/lib/Scheduler/view/Scheduler.js", "../../../Scheduler/lib/Scheduler/widget/UndoRedo.js", "../../../Scheduler/lib/Scheduler/widget/ViewPresetCombo.js", "../../../Scheduler/bundle/entry.thin.js"],
  "sourcesContent": ["// Private class that leverages the differences between a core and a basic project\nexport default Target => class PartOfBaseProject extends Target {\n    static get $name() {\n        return 'PartOfBaseProject';\n    }\n\n    get assignmentStore() {\n        return this.project.assignmentStore;\n    }\n\n    get calendarManagerStore() {\n        return this.project.calendarManagerStore;\n    }\n\n    get dependencyStore() {\n        return this.project.dependencyStore;\n    }\n\n    get eventStore() {\n        return this.project.eventStore;\n    }\n\n    get resourceStore() {\n        return this.project.resourceStore;\n    }\n};\n", "import ColorColumn from '../../Grid/column/ColorColumn.js';\nimport '../widget/EventColorPicker.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Scheduler/column/EventColorColumn\n */\n\n/**\n * A column that displays Event's `eventColor` values (built-in color classes or CSS colors) as a colored element\n * similar to the {@link Scheduler.widget.EventColorField}. When the user clicks the element, a\n * {@link Scheduler.widget.EventColorPicker} lets the user select from a\n * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor range of colors}.\n *\n * ```javascript\n * new Scheduler({\n *    columns : [\n *       {\n *          type : 'eventcolor',\n *          text : 'EventColor'\n *       }\n *    ]\n * });\n * ```\n *\n * {@inlineexample Scheduler/column/EventColorColumn.js}\n *\n * @extends Grid/column/ColorColumn\n * @classType eventcolor\n * @column\n */\nexport default class EventColorColumn extends ColorColumn {\n    static $name = 'EventColorColumn';\n\n    static type = 'eventcolor';\n\n    static defaults = {\n        colorEditorType : 'eventcolorpicker',\n        field           : 'eventColor'\n    };\n\n}\n\nColumnStore.registerColumnType(EventColorColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Scheduler/column/ResourceCollapseColumn\n */\n\n/**\n * A column toggling the resource {@link Scheduler.model.ResourceModel#field-eventLayout} between `none` and `stack`.\n *\n * @inlineexample Scheduler/column/ResourceCollapseColumn.js\n * @classType resourceCollapse\n * @extends Grid/column/Column\n * @column\n */\nexport default class ResourceCollapseColumn extends Column {\n\n    static get $name() {\n        return 'ResourceCollapseColumn';\n    }\n\n    static get type() {\n        return 'resourceCollapse';\n    }\n\n    static get defaults() {\n        return {\n            /** @hideconfigs renderer */\n            width     : '3em',\n            align     : 'center',\n            sortable  : false,\n            groupable : false,\n            editor    : false,\n            minWidth  : 0,\n            cellCls   : 'b-resourcecollapse-cell',\n            renderer  : ({ record }) => ({\n                tag   : 'i',\n                class : {\n                    'b-icon'                 : 1,\n                    'b-icon-expand-resource' : 1,\n                    'b-flip'                 : record.eventLayout !== 'none'\n                }\n            })\n        };\n    }\n\n    onCellClick({ record, event }) {\n        // Prevent native scrolling on space key press\n        event.preventDefault();\n        record.eventLayout = record.eventLayout !== 'none' ? 'none' : 'stack';\n    }\n}\n\nColumnStore.registerColumnType(ResourceCollapseColumn);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\n/**\n * @module Scheduler/feature/EventDragSelect\n */\n\n/**\n * Enables users to click and drag to select events (or assignments in multi assignment mode) inside the Scheduler's\n * timeline. Press CTRL/CMD-key to extend an existing selection.\n *\n * {@inlineexample Scheduler/feature/EventDragSelect.js}\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * **NOTE:** Incompatible with the {@link Scheduler.feature.EventDragCreate} and the {@link Scheduler.feature.Pan} features.\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *   features : {\n *     eventDragSelect : true,\n *     eventDragCreate : false\n *   }\n * });\n * ```\n *\n * @demo Scheduler/dragselection\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype eventDragSelect\n * @feature\n */\nexport default class EventDragSelect extends Delayable(InstancePlugin) {\n    // region Events\n    /**\n     * Fires on the owning Scheduler before drag selection starts. Return false to prevent the operation.\n     * @event beforeEventDragSelect\n     * @preventable\n     * @on-owner\n     * @param {Event} event The native browser DOM event\n     */\n    //endregion\n\n    // region Init\n\n    static $name = 'EventDragSelect';\n\n    targetSelector = '.b-sch-timeaxis-cell, .b-timeaxissubgrid';\n\n    construct(client, config) {\n\n        client.multiEventSelect = true;\n\n        super.construct(client, config);\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Scheduler.\n    static pluginConfig = {\n        chain : ['onElementMouseDown', 'onElementMouseMove']\n    };\n\n    //endregion\n\n    onElementMouseDown(event) {\n        const\n            me                                            = this,\n            { client }                                    = me,\n            { foregroundCanvas }                          = client,\n            { target, button, touches, clientX, clientY } = event,\n            canvasRect                                    = Rectangle.from(foregroundCanvas, true);\n\n        // only react to mouse input, and left button\n        // only react to mousedown directly on grid cell or subgrid element\n        if (touches || button !== 0 || me.disabled || !target.matches(me.targetSelector) || client.trigger('beforeEventDragSelect', { event }) === false) {\n            return;\n        }\n\n        // Prevent grid dragselection\n        // (reset by GridSelection)\n        client.preventDragSelect = true;\n\n        me.startX = clientX - canvasRect.x;\n        me.startY = clientY - canvasRect.y;\n        me.element = DomHelper.createElement({\n            tag           : 'div',\n            className     : 'b-dragselect-rect',\n            parent        : client.foregroundCanvas,\n            retainElement : true,\n            style         : {\n                transform : `translate(${me.startX}px, ${me.startY}px)`\n            }\n        });\n\n        client.element.classList.add('b-dragselecting');\n        if (!event.ctrlKey && !event.metaKey) {\n            client.clearEventSelection();\n        }\n\n        me.originalSelection = client.selectedAssignments.slice();\n        me.subGridElementRect = Rectangle.from(client.timeAxisSubGridElement, true);\n\n        // No key processing during drag selection\n        client.navigator.disabled = true;\n\n        client.enableScrollingCloseToEdges(client.timeAxisSubGrid);\n\n        me.mouseUpDetacher = EventHelper.on({\n            element : document,\n            mouseup : 'onDocumentMouseUp',\n            thisObj : me\n        });\n    }\n\n    get eventRectangles() {\n        const\n            { client }    = this,\n            // When using nested events, only drag select parents\n            eventElements = Array.from(client.foregroundCanvas.children).filter(node => node.matches(`${client.eventSelector}, .b-nested-events-container`));\n\n        return eventElements.map(el => {\n            const record = client.resolveAssignmentRecord(el);\n            return {\n                rectangle : Rectangle.from(el, true),\n                record,\n                selected  : client.selectedAssignments.includes(record)\n            };\n        });\n    }\n\n    onElementMouseMove(event) {\n        const me = this;\n\n        if (typeof me.startX === 'number') {\n            const\n                canvasRect  = me.rectangle = Rectangle.from(me.client.foregroundCanvas, true),\n                x           = Math.min(Math.max(event.clientX - canvasRect.x, 0), canvasRect.width + 1),\n                y           = Math.min(Math.max(event.clientY - canvasRect.y, 0), canvasRect.height + 1),\n                rect        = new Rectangle(me.startX, me.startY, x - me.startX, y - me.startY);\n\n            DomHelper.setTranslateXY(me.element, rect.x, rect.y);\n            me.element.style.width  = `${rect.width}px`;\n            me.element.style.height = `${rect.height}px`;\n\n            me.updateSelection();\n        }\n    }\n\n    onDocumentMouseUp(event) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { selectedAssignments, navigator } = client;\n\n        client.disableScrollingCloseToEdges(client.timeAxisSubGrid);\n\n        me.element?.remove();\n        client.element.classList.remove('b-dragselecting');\n        me.startX = me.startY = null;\n\n        // Navigator will react to the 'click' event which clears selection, bypass this\n        navigator.skipNextClick = client.timeAxisSubGridElement.contains(event.target);\n        navigator.disabled = false;\n\n        // If we selected something, focus last selected event so keyboard navigation works\n        if (selectedAssignments.length) {\n            navigator.skipScrollIntoView = true;\n            client.activeAssignment = selectedAssignments[selectedAssignments.length - 1];\n            navigator.activeItem?.focus();\n            navigator.skipScrollIntoView = false;\n        }\n\n        me.mouseUpDetacher();\n    }\n\n    updateSelection() {\n        const\n            me            = this,\n            selectionRect = me.rectangle = Rectangle.from(me.element, true),\n            {\n                eventRectangles,\n                client\n            }             = me,\n            // If any currently selected assignments have had their DOM representation\n            // released due to being scrolled out of view, they must remain selected.\n            // Collect assignments which have no DOM representation as the initial\n            // selection.\n            selection     = client.selectedAssignments.reduce((r, a) => {\n                if (!client.getElementFromAssignmentRecord(a)) {\n                    r.push(a);\n                }\n                return r;\n            }, []);\n\n        for (const assignmentData of eventRectangles) {\n            if (selectionRect.intersect(assignmentData.rectangle, true)) {\n                assignmentData.selected = true;\n                selection.push(assignmentData.record);\n            }\n        }\n\n        selection.push(...me.originalSelection);\n        client.selectedAssignments = selection;\n    }\n}\n\nGridFeatureManager.registerFeature(EventDragSelect, false, 'Scheduler');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../data/mixin/AttachToProjectMixin.js';\nimport NonWorkingTimeMixin from './mixin/NonWorkingTimeMixin.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/feature/EventNonWorkingTime\n */\n\n/**\n * Feature that allows rendering non-working time ranges into event bars (weekends for Scheduler, effective calendar for\n * SchedulerPro):\n *\n * {@inlineexample Scheduler/feature/EventNonWorkingTime.js}\n *\n * Please note that to not clutter the view (and have a large negative effect on performance) the feature bails out of\n * rendering ranges for very zoomed out views (see {@link #config-maxTimeAxisUnit} for details).\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @classtype eventNonWorkingTime\n * @mixes Scheduler/feature/mixin/NonWorkingTimeMixin\n * @feature\n */\nexport default class EventNonWorkingTime extends InstancePlugin.mixin(AttachToProjectMixin, NonWorkingTimeMixin) {\n    static $name = 'EventNonWorkingTime';\n\n    static pluginConfig = {\n        chain : [\n            'onTimeAxisViewModelUpdate',\n            'updateLocalization',\n            'onEventDataGenerated'\n        ]\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            calendarRangeCache : new Map()\n        };\n    }\n\n    doDisable(disable) {\n        this.client.refresh();\n\n        super.doDisable(disable);\n    }\n\n    attachToCalendarManagerStore(store) {\n        super.attachToCalendarManagerStore(store);\n\n        const me = this;\n\n        store.ion({\n            name    : 'calendarManagerStore',\n            change  : 'onCalendarChange',\n            thisObj : me\n        });\n\n        // Schedulers calendar is not part of the calendar manager store\n        if (me.client.isScheduler) {\n            me.project.effectiveCalendar.intervals.ion({\n                name    : 'calendarManagerStore',\n                change  : 'onCalendarChange',\n                thisObj : me\n            });\n        }\n\n        me.setupDefaultCalendar();\n    }\n\n    onCalendarChange() {\n        this.calendarRangeCache.clear();\n    }\n\n    onTimeAxisViewModelUpdate() {\n        this.calendarRangeCache.clear();\n    }\n\n    //region Draw\n\n    getRangeDomConfig(timeRange, minDate, maxDate, relativeTo) {\n        const\n            me         = this,\n            { client } = me,\n            { rtl }    = client,\n            startPos   = client.getCoordinateFromDate(DateHelper.max(timeRange.startDate, minDate)) - relativeTo,\n            endPos     = timeRange.endDate ? client.getCoordinateFromDate(DateHelper.min(timeRange.endDate, maxDate)) - relativeTo : startPos,\n            size       = Math.abs(endPos - startPos),\n            isRange    = size > 0,\n            translateX = rtl ? `calc(${startPos}px - 100%)` : `${startPos}px`;\n\n        return {\n            className : {\n                // Borrow styling from time ranges\n                'b-sch-timerange'      : 1,\n                'b-sch-range'          : 1,\n                'b-sch-nonworkingtime' : 1,\n                [timeRange.cls]        : timeRange.cls,\n                'b-rtl'                : rtl\n            },\n            dataset : {\n                id : timeRange.id\n            },\n            elementData : {\n                timeRange\n            },\n            style : client.isVertical\n                ? `transform: translateY(${translateX}); ${isRange ? `height:${size}px` : ''};`\n                : `transform: translateX(${translateX}); ${isRange ? `width:${size}px` : ''};`\n        };\n    }\n\n    getCalendarTimeRanges(calendar) {\n        let cached = this.calendarRangeCache.get(calendar);\n\n        if (!cached) {\n            cached = super.getCalendarTimeRanges(calendar, true);\n            this.calendarRangeCache.set(calendar, cached);\n        }\n\n        return cached;\n    }\n\n    // Render ranges into event bars\n    onEventDataGenerated({ eventRecord, endMS, startMS, start, end, left, top, children }) {\n        if (this.enabled) {\n            const\n                { isVertical } = this.client,\n                // Use combined calendar for Pro & Gantt, project calendar for Scheduler\n                calendar       = eventRecord.effectiveCalendarsCombination ?? this.client.project.calendar;\n\n            for (const timeRange of this.getCalendarTimeRanges(calendar)) {\n                // Only care about ranges inside the event bar\n                if (timeRange.startDateMS < endMS && timeRange.endDateMS > startMS) {\n                    const domConfig = this.getRangeDomConfig(timeRange, start, end, isVertical ? top : left);\n                    children.push(domConfig);\n                }\n            }\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(EventNonWorkingTime, false, 'Scheduler');\n", "import GridGroupSummary from '../../Grid/feature/GroupSummary.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n// Actions that trigger rerendering of group summary rows\nconst\n    eventStoreRefreshActions      = {\n        update : 1,\n        filter : 1\n    },\n    assignmentStoreRefreshActions = {\n        add       : 1,\n        remove    : 1,\n        update    : 1,\n        removeAll : 1,\n        filter    : 1\n    };\n\n/**\n * @module Scheduler/feature/GroupSummary\n */\n\n// noinspection JSClosureCompilerSyntax\n/**\n * A special version of the Grid GroupSummary feature that enables summaries within scheduler. To use a single summary\n * it is easiest to configure {@link #config-renderer}, for multiple summaries see {@link #config-summaries}.\n *\n * This feature is <strong>disabled</strong> by default. It is **not** supported in vertical mode.\n *\n * @extends Grid/feature/GroupSummary test\n *\n * @classtype groupSummary\n * @feature\n * @inlineexample Scheduler/feature/GroupSummary.js\n * @demo Scheduler/groupsummary\n *\n * @typings Grid.feature.GroupSummary -> Grid.feature.GridGroupSummary\n */\nexport default class GroupSummary extends GridGroupSummary {\n    //region Config\n\n    static get $name() {\n        return 'GroupSummary';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Show tooltip containing summary values and labels\n             * @config {Boolean}\n             * @default\n             */\n            showTooltip : true,\n\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             * ```\n             *  summaries : [\n             *      {\n             *         label : 'Label',\n             *         renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n             *             // return display value\n             *             returns '<div>Renderer output</div>';\n             *         }\n             *      }\n             *  ]\n             *  ```\n             * @config {SchedulerSummaryOptions[]}\n             */\n            summaries : null,\n\n            /**\n             * Renderer function for a single time axis tick in a group summary row.\n             * Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         groupSummary : {\n             *             renderer : ({ startDate, endDate, eventStore, resourceStore, events, resources, groupRecord, groupField, groupValue }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Date} startDate Tick start date\n             * @param {Date} endDate Tick end date\n             * @param {Scheduler.model.EventModel[]} events Events which belong to the group\n             * @param {Scheduler.model.ResourceModel[]} resources Resources which belong to the group\n             * @param {Scheduler.data.EventStore} eventStore Event store\n             * @param {Scheduler.data.ResourceStore} resourceStore Resource store\n             * @param {Core.data.Model} groupRecord Current groups header row record\n             * @param {String} groupField Current groups field name\n             * @param {String} groupValue Current groups value\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null\n        };\n    }\n\n    static get properties() {\n        return {\n            footersToUpdate : new Set()\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['render']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(scheduler, config) {\n        const me = this;\n\n        if (scheduler.isVertical) {\n            throw new Error('GroupSummary feature is not supported in vertical mode');\n        }\n\n        me.scheduler = scheduler;\n\n        super.construct(scheduler, config);\n\n        if (!me.summaries && me.renderer) {\n            me.summaries = [{ renderer : me.renderer }];\n        }\n\n        if (scheduler.isSchedulerBase) {\n            scheduler.eventStore.ion({\n                changePreCommit : me.onEventStoreChange,\n                thisObj         : me\n            });\n\n            scheduler.assignmentStore.ion({\n                changePreCommit : me.onAssignmentStoreChange,\n                thisObj         : me\n            });\n\n            scheduler.ion({\n                timeAxisViewModelUpdate : me.onTimeAxisChange,\n                thisObj                 : me\n            });\n\n            scheduler.project.ion({\n                dataReady : me.onProjectDataReady,\n                thisObj   : me\n            });\n        }\n\n        //<debug>\n        if (!me.summaries) {\n            throw new Error('Summaries required');\n        }\n        //</debug>\n    }\n\n    doDestroy() {\n        this._tip?.destroy();\n\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisChange() {\n        this.scheduler.rowManager.forEach(row => {\n            if (row.isGroupFooter) {\n                row.render();\n            }\n        });\n    }\n\n    onEventStoreChange({ action, records, changes }) {\n        // Scheduler does minimal update on event changes, it will not rerender the summary rows.\n        // Need to handle that here\n        if (eventStoreRefreshActions[action]) {\n            const resources = new Set();\n\n            records.forEach(eventRecord => eventRecord.resources.forEach(r => resources.add(r)));\n\n            this.afterChange(resources);\n        }\n    }\n\n    onAssignmentStoreChange({ action, records, changes }) {\n        if (assignmentStoreRefreshActions[action]) {\n            const resources = new Set();\n\n            records.forEach(assignment => assignment.resource && resources.add(assignment.resource));\n\n            // Include old resource on reassign\n            if (changes?.resourceId?.oldValue != null) {\n                const oldResource = this.scheduler.resourceStore.getById(changes.resourceId.oldValue);\n                oldResource && resources.add(oldResource);\n            }\n\n            this.afterChange(resources);\n        }\n    }\n\n    afterChange(affectedResources) {\n        const { rowManager } = this.scheduler;\n\n        // Collect footers to update\n        for (const resourceRecord of affectedResources) {\n            let row = rowManager.getRowFor(resourceRecord);\n            // Resource might not match a row (out of view, filtered out etc)\n            // Move down until footer is found, or we run out of rows (in case footer is below the buffer)\n\n            if (this.target === 'header') {\n                while (row && !row.isGroupHeader) {\n                    row = rowManager.getRow(row.index - 1);\n                }\n            }\n            else {\n                while (row && !row.isGroupFooter) {\n                    row = rowManager.getRow(row.index + 1);\n                }\n            }\n\n            row && this.footersToUpdate.add(row);\n        }\n    }\n\n    onProjectDataReady() {\n        const\n            {\n                footersToUpdate,\n                client\n            } = this;\n\n        // Only update the UI immediately if we are visible\n        if (client.isVisible) {\n            // Re-render only affected footers, once\n            if (footersToUpdate.size) {\n                for (const footer of footersToUpdate) {\n                    // Things happen async, footer might have been destroyed\n                    footer.render?.();\n                }\n\n                footersToUpdate.clear();\n            }\n        }\n        else {\n            client.whenVisible('refresh', client, [true]);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group summary rows\n     * @private\n     */\n    onBeforeRenderRow({ row, record }) {\n        if (row.isGroupFooter && !record.meta.hasOwnProperty('groupFooterFor')) {\n            const timeaxisCell = row.elements.normal.querySelector('.b-sch-timeaxis-cell');\n            // remove summary cells if exist\n            if (timeaxisCell) {\n                timeaxisCell.innerHTML = '';\n            }\n        }\n\n        super.onBeforeRenderRow(...arguments);\n    }\n\n    /**\n     * Called by parent class to fill timeaxis with summary contents. Generates tick \"cells\" and populates them with\n     * summaries.\n     * ```\n     * <div class=\"b-timeaxis-group-summary\">\n     *     <div class=\"b-timeaxis-tick\">\n     *         <div class=\"b-timeaxix-summary-value\">x</div>\n     *         ...\n     *     </div>\n     *     ...\n     * </div>\n     * ```\n     * @private\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        // <remove-on-release>\n        // TODO: Use DOM config object instead of strings\n        // </remove-on-release>\n        if (column.type === 'timeAxis') {\n            const\n                me             = this,\n                { scheduler }  = me,\n                { eventStore } = scheduler,\n                colCfg         = scheduler.timeAxisViewModel.columnConfig;\n\n            let html = '';\n\n            // group events by ticks info once here to avoid performance lags\n            // should be inside `scheduler.isEngineReady` check to make sure all events were calculated\n            // https://github.com/bryntum/support/issues/2977\n            const eventsByTick = scheduler.getResourcesEventsPerTick(records, ({ event }) => {\n                return event.resources.some(resource => records.includes(resource)) && (!eventStore.isFiltered || eventStore.records.includes(event));\n            });\n\n            scheduler.timeAxis.forEach((tick, idx) => {\n                const\n                    groupEvents = eventsByTick[idx] || [],\n                    // <remove-on-release>\n                    // TODO: could turn this into a template\n                    // </remove-on-release>\n                    sumHtml     = me.summaries.map(config => {\n                        // summary renderer used to calculate and format value\n                        const value = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            resourceStore : scheduler.resourceStore,\n                            events        : groupEvents,\n                            resources     : records,\n                            eventStore,\n                            groupRecord,\n                            groupField,\n                            groupValue\n                        });\n\n                        return `<div class=\"b-timeaxis-summary-value\">${value}</div>`;\n                    }).join('');\n\n                // get width on column index from the last header config\n                html += `<div class=\"b-timeaxis-tick\" style=\"width: ${colCfg[colCfg.length - 1][idx].width}px\">${sumHtml}</div>`;\n            });\n\n            return `<div class=\"b-timeaxis-group-summary\">${html}</div>`;\n        }\n\n        return super.generateHtml(column, records, cls, groupRecord, groupField, groupValue);\n    }\n\n    /**\n     * Overrides parents function to return correct summary count, used when sizing row\n     * @private\n     */\n    updateSummaryHtml(cellElement, column, records) {\n        const count = super.updateSummaryHtml(cellElement, column, records);\n\n        if (column.type === 'timeAxis') {\n            const result = {\n                count  : 0,\n                height : 0\n            };\n\n            this.summaries.forEach(config => {\n                if (config.height) {\n                    result.height += config.height;\n                }\n                else {\n                    result.count++;\n                }\n            });\n\n            return result;\n        }\n\n        return count;\n    }\n\n    /**\n     * Generates tooltip contents for hovered summary tick\n     * @private\n     */\n    getTipHtml({ activeTarget }) {\n        const\n            me    = this,\n            index = Array.from(activeTarget.parentElement.children).indexOf(activeTarget),\n            tick  = me.scheduler.timeAxis.getAt(index);\n\n        let tipHtml = `<header>${me.L('L{Summary.Summary for}', me.scheduler.getFormattedDate(tick.startDate))}</header>`,\n            showTip = false;\n\n        DomHelper.forEachSelector(activeTarget, '.b-timeaxis-summary-value', (element, i) => {\n            const\n                label = me._labels[i],\n                text  = element.innerText.trim();\n\n            tipHtml += `<label>${label || ''}</label><div class=\"b-timeaxis-summary-value\">${text}</div>`;\n\n            if (element.innerHTML) {\n                showTip = true;\n            }\n        });\n\n        return showTip ? tipHtml : null;\n    }\n\n    /**\n     * Initialize tooltip on render\n     * @private\n     */\n    render() {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        if (scheduler.isSchedulerBase) {\n            // if any sum config has a label, init tooltip\n            if (me.summaries?.some(config => config.label) && me.showTooltip && !me._tip) {\n                me._labels = me.summaries.map(config => config.label || '');\n\n                me._tip = new Tooltip({\n                    id             : `${scheduler.id}-groupsummary-tip`,\n                    cls            : 'b-timeaxis-summary-tip',\n                    hoverDelay     : 0,\n                    hideDelay      : 0,\n                    forElement     : scheduler.timeAxisSubGridElement,\n                    anchorToTarget : true,\n                    forSelector    : '.b-timeaxis-group-summary .b-timeaxis-tick',\n                    getHtml        : me.getTipHtml.bind(me)\n                });\n            }\n        }\n    }\n\n    //endregion\n\n    removeSummaryElements(rowEl) {\n        const summaryElement = rowEl.querySelector('.b-timeaxis-group-summary');\n\n        summaryElement?.remove();\n\n        super.removeSummaryElements();\n    }\n\n    hasSummary(column) {\n        return super.hasSummary(column) || column.isTimeAxisColumn;\n    }\n}\n\n// Override Grids GroupSummary with this improved version\nGridFeatureManager.registerFeature(GroupSummary, false, 'Scheduler');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Scheduler/feature/HeaderZoom\n */\n\n/**\n * Enables users to click and drag to zoom to a date range in Scheduler's header time axis. Only supported in horizontal\n * mode.\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *   features : {\n *     headerZoom : true\n *   }\n * });\n * ```\n *\n * {@inlineexample Scheduler/feature/HeaderZoom.js}\n *\n * <div class=\"note\">Not compatible with the {@link Scheduler/feature/TimeSelection} feature.</div>\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype headerZoom\n * @feature\n */\nexport default class HeaderZoom extends InstancePlugin {\n\n    static $name = 'HeaderZoom';\n\n    static get pluginConfig() {\n        return {\n            chain : ['onElementMouseDown', 'onElementMouseMove']\n        };\n    }\n\n    onElementMouseDown(event) {\n        const me = this;\n\n        // only react to mouse input, and left button\n        if (event.touches || event.button !== 0 || me.disabled) {\n            return;\n        }\n\n        // only react to mousedown directly on timeaxis cell\n        if (event.target.closest('.b-sch-header-timeaxis-cell')) {\n            const headerEl = me.client.subGrids.normal.header.headersElement;\n\n            me.startX = event.clientX;\n\n            me.element = DomHelper.createElement({\n                parent    : headerEl,\n                tag       : 'div',\n                className : 'b-headerzoom-rect'\n            });\n\n            me.headerElementRect = Rectangle.from(headerEl);\n\n            EventHelper.on({\n                element : document,\n                mouseup : 'onMouseUp',\n                thisObj : me,\n                once    : true\n            });\n        }\n    }\n\n    onElementMouseMove(event) {\n        const me = this;\n\n        if (typeof me.startX === 'number') {\n            const\n                x     = Math.max(event.clientX, me.headerElementRect.left),\n                left  = Math.min(me.startX, x),\n                width = Math.abs(me.startX - x),\n                rect  = new Rectangle(left - me.headerElementRect.x + me.client.scrollLeft, 0, width, me.headerElementRect.height);\n\n            DomHelper.setTranslateX(me.element, rect.left);\n            me.element.style.width = rect.width + 'px';\n        }\n    }\n\n    onMouseUp() {\n        const me = this;\n\n        if (typeof me.startX === 'number') {\n            const\n                { client } = me,\n                rect       = Rectangle.from(me.element),\n                startDate  = client.getDateFromCoordinate(rect.left, 'round', false),\n                endDate    = client.getDateFromCoordinate(rect.right, 'round', false);\n\n            me.element.remove();\n            me.startX = null;\n\n            client.zoomToSpan({\n                startDate,\n                endDate\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(HeaderZoom, false, 'Scheduler');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Scheduler/feature/Pan\n */\n\n/**\n * Makes the scheduler's timeline pannable by dragging with the mouse. Try it out in the demo below.\n *\n * {@inlineexample Scheduler/feature/Pan.js}\n *\n * ```javascript\n * // Enable Pan\n * const scheduler = new Scheduler({\n *   features : {\n *     pan : true,\n *     eventDragCreate : false\n *   }\n * });\n * ```\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * <div class=\"note\">Incompatible with the {@link Scheduler.feature.EventDragCreate} and the\n * {@link Scheduler.feature.EventDragSelect} features.</div>\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype pan\n * @feature\n */\nexport default class Pan extends InstancePlugin {\n    // region Init\n\n    static $name = 'Pan';\n\n    static configurable = {\n        /**\n         * Set to `false` to not pan horizontally\n         * @prp {Boolean}\n         * @default\n         */\n        horizontal : true,\n\n        /**\n         * Set to `false` to not pan vertically\n         * @prp {Boolean}\n         * @default\n         */\n        vertical : true,\n\n        /**\n         * Set to `false` to not pan horizontally when dragging in the time axis header\n         * @prp {Boolean}\n         * @default\n         */\n        enableInHeader : true\n    };\n\n    get targetSelector() {\n        return `.b-sch-timeaxis-cell,.b-timeline-subgrid${this.enableInHeader ? ',.b-sch-header-timeaxis-cell,.b-sch-header-text' : ''}`;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    static get pluginConfig() {\n        return {\n            chain : ['onElementMouseDown']\n        };\n    }\n\n    //endregion\n\n    // region Events\n\n    /**\n     * Fires on the owning Scheduler before pan starts. Return `false` to prevent the operation.\n     * @event beforePan\n     * @preventable\n     * @on-owner\n     * @param {Event} event The native browser DOM event\n     */\n\n    //endregion\n\n    onElementMouseDown(event) {\n        const\n            me                                            = this,\n            { client }                                    = me,\n            { button, touches, target, clientX, clientY } = event,\n            dragFeature                                   = client.features.taskDrag || client.features.eventDrag,\n            enablePanOnEvents                             = client.readOnly || !dragFeature?.enabled;\n\n        // only react to mouse input, and left button\n        if (touches || button !== 0 || me.disabled || client.trigger('beforePan', { event }) === false) {\n            return;\n        }\n\n        // only react to mousedown directly on grid cell, subgrid element or if drag is disabled - the events too\n        if (target.matches(me.targetSelector) || (enablePanOnEvents && target.closest(client.eventSelector))) {\n            me.mouseX   = clientX;\n            me.mouseY   = clientY;\n            me.onHeader = me.enableInHeader && target.closest('.b-sch-header-timeaxis-cell');\n\n            me.mouseDetacher = EventHelper.on({\n                element   : document,\n                mousemove : 'onMouseMove',\n                mouseup   : 'onMouseUp',\n                thisObj   : me\n            });\n        }\n    }\n\n    onMouseMove(event) {\n        const\n            me         = this,\n            { client } = me,\n            xScroller  = client.timeAxisSubGrid.scrollable,\n            yScroller  = client.scrollable,\n            x          = event.clientX,\n            y          = event.clientY;\n\n        event.preventDefault();\n\n        if (me.vertical && (client.isVertical || !me.onHeader)) {\n            yScroller.scrollBy(0, me.mouseY - y);\n        }\n\n        if (me.horizontal && (client.isHorizontal || !me.onHeader)) {\n            xScroller.scrollBy(me.mouseX - x);\n        }\n\n        me.mouseX = x;\n        me.mouseY = y;\n    }\n\n    onMouseUp() {\n        this.mouseDetacher();\n        this.mouseDetacher = null;\n    }\n\n    /**\n     * Yields `true` if a pan gesture is in process.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isActive() {\n        return Boolean(this.mouseDetacher);\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Pan, false, ['Scheduler', 'Gantt']);\n", "import ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Scheduler/feature/ResourceMenu\n */\n\n/**\n * Applicable only for Scheduler in `vertical` mode. Right click resource header cells to display a context menu.\n *\n * To invoke the menu in a keyboard-accessible manner, use the `SPACE` key when a resource cell is focused.\n *\n * {@inlineexample Scheduler/feature/ResourceMenu.js}\n *\n * ### Default menu items\n *\n * The ResourceMenu feature provides only one item by default:\n *\n * | Reference              | Text   | Weight | Description         |\n * |------------------------|--------|--------|---------------------|\n * | `remove`               | Delete | 100    | Delete the resource |\n *\n * ### Customizing the menu items\n *\n * The menu items in the resource menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * Add extra items for all columns:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 extraItem : {\n *                     text   : 'My cell item',\n *                     icon   : 'fa fa-bus',\n *                     weight : 200,\n *                     onItem : () => ...\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * Remove an existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 remove : null\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Customize existing item:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             items : {\n *                 remove : {\n *                     text : 'Remove',\n *                     icon : 'b-fa b-fa-dumpster'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * It is also possible to manipulate the default items and add new items in the processing function:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     mode     : 'vertical',\n *     features : {\n *         resourceMenu : {\n *             processItems({items, record}) {\n *                 if (record.cost > 5000) {\n *                     items.myItem = { text : 'Split cost' };\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/feature/base/ContextMenuBase\n * @demo Scheduler/vertical\n * @classtype resourceMenu\n * @feature\n */\nexport default class ResourceMenu extends ContextMenuBase {\n    //region Config\n\n    static $name = 'ResourceMenu';\n\n    static configurable = {\n        /**\n         * A function called before displaying the menu that allows manipulations of its items.\n         * Returning `false` from this function prevents the menu being shown.\n         *\n         * ```javascript\n         * features : {\n         *     resourceMenu : {\n         *         processItems({ items, record, column }) {\n         *             // Add or hide existing items here as needed\n         *             items.myAction = {\n         *                 text   : 'Cool action',\n         *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n         *                 onItem : () => console.log(`Clicked ${record.name}`),\n         *                 weight : 1000 // Move to end\n         *             };\n         *\n         *             if (!record.allowDelete) {\n         *                 items.remove.hidden = true;\n         *             }\n         *         }\n         *     }\n         * },\n         * ```\n         * @param {Object} context An object with information about the menu being shown\n         * @param {Scheduler.model.ResourceModel} context.resourceRecord The record representing the current resource\n         * @param {Object<String,MenuItemConfig|Boolean|null>} context.items An object containing the\n         * {@link Core.widget.MenuItem menu item} configs keyed by their id\n         * @param {Event} context.event The DOM event object that triggered the show\n         * @config {Function}\n         * @preventable\n         */\n        processItems : null,\n\n        /**\n         * {@link Core.widget.Menu} items object containing named child menu items to apply to the feature's\n         * provided context menu.\n         *\n         * This may add extra items as below, but you can also configure, or remove any of the default items by\n         * configuring the name of the item as `null`\n         *\n         * ```javascript\n         * features : {\n         *     resourceMenu : {\n         *         // This object is applied to the Feature's predefined default items\n         *         items : {\n         *             switchToDog : {\n         *                 text : 'Dog',\n         *                 icon : 'b-fa b-fa-fw b-fa-dog',\n         *                 onItem({record}) {\n         *                     record.dog = true;\n         *                     record.cat = false;\n         *                 },\n         *                 weight : 500     // Make this second from end\n         *             },\n         *             switchToCat : {\n         *                 text : 'Cat',\n         *                 icon : 'b-fa b-fa-fw b-fa-cat',\n         *                 onItem({record}) {\n         *                     record.dog = false;\n         *                     record.cat = true;\n         *                 },\n         *                 weight : 510     // Make this sink to end\n         *             },\n         *             remove : {\n         *                 // Change icon for the delete item\n         *                 icon : 'b-fa b-fa-times'\n         *             }\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * @config {Object<String,MenuItemConfig|Boolean|null>}\n         */\n        items : null,\n\n        type : 'resource'\n    };\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateResourceMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning scheduler before the context menu is shown for a resource.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event resourceMenuBeforeShow\n     * @preventable\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Grid.column.Column} column Column\n     * @param {Scheduler.model.ResourceModel} resourceRecord Record\n     */\n\n    /**\n     * This event fires on the owning scheduler after the context menu is shown for a resource.\n     * @event resourceMenuShow\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<String,MenuItemConfig>} items Menu item configs\n     * @param {Scheduler.model.ResourceModel} record Record\n     */\n\n    /**\n     * This event fires on the owning scheduler when an item is selected in the context menu.\n     * @event resourceMenuItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Scheduler.model.ResourceModel} record Record\n     */\n\n    /**\n     * This event fires on the owning grid when a check item is toggled in the context menu.\n     * @event resourceMenuToggleItem\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {Scheduler.model.ResourceModel} resourceRecord Record\n     * @param {Boolean} checked Checked or not\n     */\n\n    //endregion\n\n    //region Menu handlers\n\n    getDataFromEvent(event) {\n        const\n            cellElement = event.target.closest('.b-resourceheader-cell'),\n            resourceId  = cellElement?.dataset.resourceId;\n\n        // Only yield data to show a menu if we are on a cell\n        if (resourceId) {\n            const resourceRecord = this.client.resourceStore.getById(resourceId);\n\n            return {\n                cellElement,\n                resourceRecord\n            };\n        }\n    }\n\n    //endregion\n\n    //region Getters/Setters\n\n    populateResourceMenu({ items, resourceRecord }) {\n        const { client } = this;\n\n        if (!client.readOnly) {\n            items.remove = {\n                text        : 'L{CellMenu.removeRow}',\n                localeClass : this,\n                icon        : 'b-fw-icon b-icon-trash',\n                cls         : 'b-separator',\n                weight      : 100,\n                disabled    : resourceRecord.readOnly,\n                onItem      : () => client.resourceStore.remove(resourceRecord)\n            };\n        }\n    }\n\n    get showMenu() {\n        return true;\n    }\n\n    //endregion\n}\n\nResourceMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(ResourceMenu, false, ['Scheduler']);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from './base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeStore from '../data/ResourceTimeRangeStore.js';\n\n/**\n * @module Scheduler/feature/ResourceTimeRanges\n */\n\n/**\n * Feature that draws resource time ranges, shaded areas displayed behind events. These zones are similar to events in\n * that they have a start and end date but different in that they do not take part in the event layout, and they always\n * occupy full row height.\n *\n * {@inlineexample Scheduler/feature/ResourceTimeRanges.js}\n *\n * Each time range is represented by an instances of {@link Scheduler.model.ResourceTimeRangeModel}, held in a\n * {@link Scheduler.data.ResourceTimeRangeStore}. Currently they are readonly UI-wise, but can be manipulated on\n * the data level. To style the rendered elements, use the {@link Scheduler.model.TimeSpan#field-cls} field or use the\n * {@link Scheduler.model.ResourceTimeRangeModel#field-timeRangeColor} field.\n *\n * Data can be provided either using the {@link Scheduler.view.Scheduler#config-resourceTimeRanges} config on the\n * Scheduler config object:\n *\n * ```javascript\n * new Scheduler({\n *     ...\n *    features :  {\n *        resourceTimeRanges : true\n *    },\n *\n *    // Data specified directly on the Scheduler instance\n *    resourceTimeRanges : [\n *        // Either specify startDate & endDate or startDate & duration when defining a range\n *        { startDate : new Date(2019,0,1), endDate : new Date(2019,0,3), name : 'Occupied', timeRangeColor : 'red' },\n *        { startDate : new Date(2019,0,3), duration : 2, durationUnit : 'd', name : 'Available' },\n *    ]\n * })\n * ```\n *\n * Or the {@link Scheduler.view.Scheduler#config-resourceTimeRangeStore} config on the Scheduler config object:\n *\n * ```javascript\n * new Scheduler({\n *     ...\n *     features :  {\n *         resourceTimeRanges : true\n *     },\n *     resourceTimeRangeStore : new ResourceTimeRangeStore({\n *         readUrl : './resourceTimeRanges/'\n *     })\n * })\n * ```\n *\n * Or on the project, using the {#Scheduler/model/mixin/ProjectModelMixin#config-resourceTimeRangesData} config.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ## Recurring ranges support\n *\n * Resource time ranges can also be recurring, as seen in the example below:\n *\n * ```js\n * const resourceTimeRangeStore = new ResourceTimeRangeStore({\n *     data : [{\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Lunch',\n *         // this time range will repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n *\n * ```\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo Scheduler/resourcetimeranges\n * @classtype resourceTimeRanges\n * @feature\n */\nexport default class ResourceTimeRanges extends ResourceTimeRangesBase {\n    //region Config\n\n    static $name = 'ResourceTimeRanges';\n\n    static configurable = {\n        rangeCls : 'b-sch-resourcetimerange',\n\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n\n        /**\n         * Specify value to use for the tabIndex attribute of resource time range elements\n         * @config {Number}\n         * @default\n         */\n        tabIndex : 0,\n\n        entityName : 'resourceTimeRange'\n    };\n\n    static get pluginConfig() {\n        const superConfig = super.pluginConfig;\n        return {\n            ...superConfig,\n            assign : ['resolveResourceTimeRangeRecord', 'getElementFromResourceTimeRangeRecord']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    // <remove-on-release>\n    // TODO: move as much code as possible to attachToResourceTimeRangeStore\n    // </remove-on-release>\n    attachToProject(project) {\n        const\n            me                     = this,\n            { client : scheduler } = me;\n\n        super.attachToProject(project);\n\n        if (!project.resourceTimeRangeStore) {\n            project.resourceTimeRangeStore = scheduler.resourceTimeRangeStore || new ResourceTimeRangeStore({\n                owner : me\n            });\n\n            const { crudManager } = scheduler;\n\n            if (crudManager && !crudManager.resourceTimeRangeStore) {\n                crudManager.resourceTimeRangeStore = project.resourceTimeRangeStore;\n            }\n        }\n\n        const store = project.resourceTimeRangeStore;\n\n        if (!me.exposedOnScheduler) {\n            // ResourceZones can be set on scheduler or feature, for convenience\n            if (scheduler.resourceTimeRanges) {\n                store.add(scheduler.resourceTimeRanges);\n                delete scheduler.resourceTimeRanges;\n            }\n\n            // expose getter/setter for resourceTimeRanges on scheduler\n            Object.defineProperty(scheduler, 'resourceTimeRanges', {\n                get : () => store.records,\n                set : resourceTimeRanges => store.data = resourceTimeRanges\n            });\n\n            me.exposedOnScheduler = true;\n        }\n\n        // Link to projects resourceStore if not already linked to one\n        if (!store.resourceStore) {\n            store.resourceStore = project.resourceStore;\n        }\n\n        me.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n\n    // Called by ProjectConsumer after a new store is assigned at runtime\n    // <remove-on-release>\n    // TODO: move as much code as possible here from attachToProject\n    // </remove-on-release>\n    attachToResourceTimeRangeStore(store) {\n        this.attachToProject(this.project);\n        this.client.refresh();\n    }\n\n    get store() {\n        return this.project.resourceTimeRangeStore;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggered for mouse down ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseDown\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse up ona resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseUp\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for click on a resource time range. Only triggered if the ResourceTimeRange feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceTimeRangeClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for double-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeDblClick\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for right-click on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeContextMenu\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse over on a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseOver\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse out of a resource time range. Only triggered if the ResourceTimeRange feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceTimeRangeMouseOut\n     * @param {Scheduler.view.Scheduler} source This Scheduler\n     * @param {Scheduler.feature.ResourceTimeRanges} feature The ResourceTimeRange feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    //endregion\n\n    /**\n     * Returns a resource time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @on-owner\n     * @function resolveResourceTimeRangeRecord\n     * @category DOM\n     */\n\n    /**\n     * Returns the element for the passed resource time range record, if rendered into DOM.\n     * @param {Scheduler.model.ResourceTimeRangeModel} record\n     * @returns {HTMLElement}\n     * @on-owner\n     * @function getElementFromResourceTimeRangeRecord\n     * @category DOM\n     */\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        if (!this.disabled) {\n            const { timeRanges } = resource.$original;\n\n            // if we have ranges and the feature is enabled\n            if (timeRanges?.length) {\n                const { startDate, endDate } = this.client;\n\n                timeRanges.forEach(timeRange => {\n                    // if this a recurring event let's include its visible occurrences\n                    if (timeRange.isRecurring) {\n                        events.push(...timeRange.getOccurrencesForDateRange(startDate, endDate));\n                    }\n                    else {\n                        events.push(timeRange);\n                    }\n                });\n            }\n        }\n\n        return events;\n    }\n\n    shouldInclude(eventRecord) {\n        return eventRecord.isResourceTimeRange && !eventRecord.isNonWorking && !eventRecord.isCalendarHighlightModel;\n    }\n\n    doDestroy() {\n        if (this.store?.owner === this) {\n            this.store.destroy();\n        }\n        super.doDestroy();\n    }\n}\n\n// No feature based styling needed, do not add a cls to Scheduler\nResourceTimeRanges.featureClass = '';\n\nGridFeatureManager.registerFeature(ResourceTimeRanges, false, 'Scheduler');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport TaskEditStm from './mixin/TaskEditStm.js';\n\n/**\n * @module Scheduler/feature/SimpleEventEdit\n */\n\n/**\n * Feature that displays a text field to edit the event name. You can control the flow of this by listening to the events relayed by this class from the underlying {@link Core.widget.Editor}.\n * To use this feature, you also need to disable the built-in default editing feature:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit       : false,\n *         simpleEventEdit : true\n *     }\n * });\n * ```\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Scheduler/simpleeditor\n * @inlineexample Scheduler/feature/SimpleEventEdit.js\n * @classtype simpleEventEdit\n * @feature\n */\nexport default class SimpleEventEdit extends InstancePlugin.mixin(TaskEditStm) {\n\n    // region Events\n    /**\n     * Fired before the editor is shown to start an edit operation. Returning `false` from a handler vetoes the edit operation.\n     * @event beforeStart\n     * @param {Object} value The value to be edited.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Fired when an edit operation has begun.\n     * @event start\n     * @param {Object} value The starting value of the field.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n    /**\n     * Fired when an edit completion has been requested, either by `ENTER`, or focus loss (if configured to complete on blur).\n     * The completion may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeComplete\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Edit has been completed, and any associated record or element has been updated.\n     * @event complete\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n\n    /**\n     * Fired when cancellation has been requested, either by `ESC`, or focus loss (if configured to cancel on blur).\n     * The cancellation may be vetoed, in which case, focus is moved back into the editor.\n     * @event beforeCancel\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The new value.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     * @preventable\n     */\n    /**\n     * Edit has been canceled without updating the associated record or element.\n     * @event cancel\n     * @param {Object} oldValue The original value.\n     * @param {Object} value The value of the field.\n     * @param {Core.widget.Editor} source The Editor that triggered the event.\n     */\n    // endregion\n\n    //region Config\n\n    static get $name() {\n        return 'SimpleEventEdit';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `''` or null to\n             * disable editing of existing events.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'eventdblclick',\n\n            /**\n             * The current {@link Scheduler.model.EventModel} record, which is being edited by the event editor.\n             * @property {Scheduler.model.EventModel}\n             * @readonly\n             */\n            eventRecord : null,\n\n            /**\n             * The {@link Scheduler.model.EventModel} field to edit\n             * @config {String}\n             * @category Editor\n             */\n            field : 'name',\n\n            /**\n             * The editor configuration, where you can control which widget to show\n             * @config {EditorConfig}\n             * @category Editor\n             */\n            editorConfig : null\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onEventEnterKey', 'editEvent']\n        };\n    }\n\n    //endregion\n\n    //region Editing\n\n    construct(scheduler, config) {\n        const me = this;\n\n        me.scheduler = scheduler;\n\n        scheduler.eventEdit = me;\n\n        super.construct(scheduler, config);\n\n        me.clientListenersDetacher = scheduler.ion({\n            [me.triggerEvent] : ({ eventRecord, eventElement }) => me.editEvent(eventRecord, eventRecord.resource, eventElement),\n            dragcreateend     : me.onDragCreateEnd,\n            thisObj           : me\n        });\n    }\n\n    doDestroy() {\n        this.clientListenersDetacher();\n\n        this.editor?.destroy();\n\n        super.doDestroy();\n    }\n\n    get eventStore() {\n        return this.scheduler.eventStore;\n    }\n\n    get project() {\n        return this.client.project;\n    }\n\n    // region Editor\n    /**\n     * Opens an Editor for the passed event. This function is exposed on Scheduler and can be called as\n     * `scheduler.editEvent()`.\n     * @param {Scheduler.model.EventModel} eventRecord The Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * @on-owner\n     * @async\n     */\n    async editEvent(eventRecord, resourceRecord, element, stmCapture) {\n        const\n            me            = this,\n            { scheduler } = me,\n            { eventEdit } = me.client.features;\n\n        // If event edit feature also exists, we use simple edit for new events and eventEdit it for already created events\n        if (scheduler.readOnly || me.disabled || eventRecord.readOnly || (eventEdit && !eventEdit.disabled && !eventRecord.isCreating)) {\n            return;\n        }\n\n        let { editor } = me;\n\n        // Want to put editor in inner element (b-sch-event) to get correct font size, but when drag creating the proxy\n        // has no inner element\n        element = DomHelper.down(element, scheduler.eventInnerSelector) || element;\n\n        eventRecord = eventRecord.isAssignment ? eventRecord.event : eventRecord;\n\n        me.resource = resourceRecord;\n        me.event    = eventRecord;\n        me.element  = element;\n\n        scheduler.element.classList.add('b-eventeditor-editing');\n\n        if (editor) {\n            // Positioned editors remove themselves so that their appendTo element\n            // may have its content updated unobstructed.\n            editor.render(scheduler.timeAxisSubGridElement);\n        }\n        else {\n            // Editor is contained in, and owned by the TimeAxisSubGrid to avoid focus flipping out and in.\n            // The editor is an owned descendant of the SubGrid.\n            me.editor = editor = Editor.new({\n                owner        : scheduler.timeAxisSubGrid,\n                appendTo     : scheduler.timeAxisSubGridElement,\n                scrollAction : 'realign',\n                maxHeight    : 40,\n                align        : {\n                    align : scheduler.isHorizontal ? 'c-c' : 't-t'\n                },\n                cls               : 'b-simpleeventeditor',\n                internalListeners : {\n                    complete : 'onEditorComplete',\n                    cancel   : 'onEditorCancel',\n                    thisObj  : me\n                },\n\n                // Keys must not propagate into the scheduler\n                onInternalKeyDown : keyEvent => keyEvent.stopPropagation()\n            }, me.editorConfig);\n\n            me.relayEvents(me.editor, ['beforestart', 'start', 'beforecomplete', 'complete', 'beforecancel', 'cancel']);\n        }\n\n        if (stmCapture) {\n            me.stmInitiallyAutoRecord = stmCapture.stmInitiallyAutoRecord;\n            me.stmInitiallyDisabled = stmCapture.stmInitiallyDisabled;\n            me.hasStmCapture = true;\n\n            // indicate that editor has been opened, and is now managing the \"stm capture\"\n            stmCapture.transferred = true;\n        }\n        // it is set to `false` by calendar, to ignore the STM mechanism\n        else if (stmCapture !== false && !me.hasStmCapture) {\n            me.captureStm(true);\n        }\n\n        // Drag-created records get a \"New event\" name for cosmetic purposes.\n        // Remove just before editing.\n        if (eventRecord.isCreating) {\n            eventRecord.name = '';\n        }\n\n        await editor.startEdit({\n            target : element,\n            record : eventRecord,\n            field  : me.field\n        });\n\n        // If text label is not visible, scroll it into view\n        if (scheduler.isVertical && eventRecord.startDate < scheduler.visibleDateRange.startDate) {\n            editor.element.scrollIntoView();\n        }\n\n        // No key navigation during editing\n        scheduler.navigator.disabled = true;\n    }\n\n    onEditorComplete() {\n        // Promote event to being permanent so that it is syncable to the server as a new event\n        this.event.isCreating = false;\n\n        this.reset();\n\n        this.freeStm(true);\n    }\n\n    onEditorCancel() {\n        // Remove the transient event\n        if (this.event.isCreating) {\n            this.event.remove();\n        }\n\n        this.reset();\n\n        this.freeStm(false);\n    }\n\n    reset() {\n        this.scheduler.element.classList.remove('b-eventeditor-editing');\n\n        // Restore key navigation after editing\n        this.scheduler.navigator.disabled = false;\n        this.event                        = null;\n        this.resource                     = null;\n    }\n\n    //endregion\n\n    // chained from EventNavigation\n    onEventEnterKey({ assignmentRecord, eventRecord }) {\n        const\n            element        = assignmentRecord ? this.scheduler.getElementFromAssignmentRecord(assignmentRecord) : this.scheduler.getElementFromEventRecord(eventRecord),\n            resourceRecord = (assignmentRecord || eventRecord).resource;\n\n        this.editEvent(eventRecord, resourceRecord, element);\n    }\n\n    //endregion\n\n    onDragCreateEnd({ eventRecord, resourceRecord, eventElement, stmCapture }) {\n        this.element = eventElement;\n\n        this.editEvent(eventRecord, resourceRecord, eventElement, stmCapture);\n    }\n}\n\nGridFeatureManager.registerFeature(SimpleEventEdit, false, 'Scheduler');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport GridSplit from '../../Grid/feature/Split.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/feature/Split\n */\n\nconst\n    startScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'start'\n    }),\n    endScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'end'\n    });\n\n/**\n * This feature allows splitting the Scheduler into multiple views, either by using the cell context menu, or\n * programmatically by calling {@link #function-split split()}.\n *\n * {@inlineexample Scheduler/feature/Split.js}\n *\n * See {@link Grid/feature/Split} for more details.\n *\n * ## Scheduler specifics\n *\n * - Scheduler allows splitting by dates, either programmatically or by using the context menu.\n * - Scheduler prevents splitting in the grid part using the context menu.\n * - The `eventDrag` feature will automatically be configured to allow dragging between the clones (by setting\n *   `constrainDragToTimeline` to `false`).\n * - Splitting is not supported in vertical mode.\n *\n * {@note}\n * Note that although Gantt is related to Scheduler, splitting is not supported in Gantt.\n * {/@note}\n *\n * @classtype split\n * @feature\n * @extends Grid/feature/Split\n *\n * @typings Grid.feature.Split -> Grid.feature.GridSplit\n */\nexport default class Split extends GridSplit {\n    static $name = 'Split';\n\n    static configurable = {\n        /**\n         * Properties whose changes should be relayed to sub-views at runtime.\n         *\n         * Supply an object with property names as keys, and a truthy value to relay the change, or a falsy value to not\n         * relay it. The object will be merged with the default values.\n         *\n         * In addition to the properties relayed by Grid, Scheduler also relays these:\n         * * {@link Scheduler/view/Scheduler#property-barMargin}\n         * * {@link Scheduler/view/Scheduler#property-eventColor}\n         * * {@link Scheduler/view/Scheduler#property-eventStyle}\n         * * {@link Scheduler/view/Scheduler#property-eventLayout}\n         * * {@link Scheduler/view/Scheduler#property-fillTicks}\n         * * {@link Scheduler/view/Scheduler#property-resourceMargin}\n         * * {@link Scheduler/view/Scheduler#property-snap}\n         * * {@link Scheduler/view/Scheduler#property-tickSize}\n         *\n         * Example of supplying a custom set of properties to relay:\n         * ```javascript\n         * const scheduler = new Scheduler({\n         *     features : {\n         *         split : {\n         *             relayProperties : {\n         *                 barMargin : false, // Do not relay barMargin changes\n         *                 myConfig : true   // Relay changes to the myConfig property\n         *             }\n         *         }\n         *     }\n         * }\n         * ```\n         * @config {Object<String,Boolean>}\n         */\n        relayProperties : {\n            value : {\n                barMargin      : 1,\n                eventColor     : 1,\n                eventStyle     : 1,\n                eventLayout    : 1,\n                fillTicks      : 1,\n                resourceMargin : 1,\n                snap           : 1,\n                tickSize       : 1\n            },\n            $config : {\n                merge : 'merge'\n            }\n        }\n    };\n\n    static pluginConfig = {\n        chain  : ['populateCellMenu', 'populateScheduleMenu', 'afterConfigChange', 'afterAddListener', 'afterRemoveListener'],\n        assign : ['split', 'unsplit', 'subViews', 'syncSplits']\n    };\n\n    getClientConfig(appendTo, order, options, config) {\n        const\n            { client }   = this,\n            clientConfig = super.getClientConfig(appendTo, order, options, config);\n\n        // Grid demo in Schedulers docs\n        if (!client.isSchedulerBase && !client.isSchedulerProBase && !client.isGanttBase) {\n            return clientConfig;\n        }\n\n        // Use project instead of store / inline data\n        delete clientConfig.store;\n        delete clientConfig.events;\n        delete clientConfig.resources;\n        delete clientConfig.assignments;\n        delete clientConfig.dependencies;\n        delete clientConfig.resourceTimeRanges;\n        delete clientConfig.timeRanges;\n        clientConfig.project = client.project;\n        clientConfig.assignmentStore = clientConfig.project.assignmentStore;\n        clientConfig.crudManager = client.crudManager;\n        clientConfig.viewPreset = client.viewPreset;\n        clientConfig.startDate = client.startDate;\n        clientConfig.endDate = client.endDate;\n        clientConfig.selectedCollection = client.selectedCollection;\n\n        clientConfig.useInitialAnimation = false;\n\n        // Allow dragging between the clones, unless drag is explicitly turned off\n        if (clientConfig.features?.eventDrag !== false) {\n            ObjectHelper.setPath(clientConfig, 'features.eventDrag.constrainDragToTimeline', false);\n            client.features.eventDrag.constrainDragToTimeline = false;\n        }\n\n        return clientConfig;\n    }\n\n    unsplitCleanup(options) {\n        // Force time axis to get correct width\n        this.client.timeAxisSubGrid.onElementResize();\n    }\n\n    /**\n     * Fired when splitting the Scheduler.\n     * @event split\n     * @param {Scheduler.view.SchedulerBase[]} subViews The sub views created by the split\n     * @param {Object} options The options passed to the split call\n     * @param {'horizontal'|'vertical'|'both'} options.direction The direction of the split\n     * @param {Grid.column.Column} options.atColumn The column to split at\n     * @param {Core.data.Model} options.atRecord The record to split at\n     * @param {Date} options.atDate The date to split at\n     * @on-owner\n     */\n\n    processOptions(options) {\n        const { client } = this;\n\n        let { atDate, atRecord } = options;\n\n        // Check if center is a date if not given a specific split point\n        if (options.direction !== 'horizontal' && !options.atColumn && !options.atRecord && !atDate) {\n            const\n                bounds = Rectangle.from(client.element),\n                date   = client.getDateFromCoordinate(bounds.center.x, 'round', false);\n\n            // If it is a date, split at it\n            if (date) {\n                options.atDate = atDate = date;\n                options.atColumn = client.timeAxisColumn;\n            }\n        }\n\n        // Asked to split at a date, determine split sizes\n        if (atDate) {\n            if (!options.direction) {\n                options.direction = atRecord ? 'both' : 'vertical';\n            }\n\n            options.splitX = client.getCoordinateFromDate(atDate, { ignoreRTL : true }) - client.timeAxisSubGrid.scrollable.x;\n\n            if (client.rtl) {\n                options.splitX += client._bodyRectangle.width - Rectangle.from(client.timeAxisSubGridElement).right + DomHelper.scrollBarWidth;\n            }\n            else {\n                options.splitX += Rectangle.from(client.timeAxisSubGridElement, client.bodyContainer).left;\n            }\n\n            options.remainingWidth = Rectangle.from(client.element).width - options.splitX;\n        }\n\n        return super.processOptions(options);\n    }\n\n    /**\n     * Split the scheduler into two or four parts.\n     *\n     * - Splits into two when passed `direction : 'vertical'`, `direction : 'horizontal'` or `atColumn`, `atRecord` or\n     *   `atDate`.\n     * - Splits into four when passed `direction : 'both'` or `atColumn`/`atDate` and `atRecord`.\n     *\n     * ```javascript\n     * // Split horizontally (at the row in the center of the scheduler)\n     * await scheduler.split({ direction : 'horizontal' });\n     *\n     * // Split both ways by a specific date and resource\n     * await schedule.split({\n     *    atRecord : scheduler.resourceStore.getById(10),\n     *    atDate   : new Date(2023, 5, 8)\n     * });\n     * ```\n     *\n     * To return to a single scheduler, call {@link #function-unsplit}.\n     *\n     * Note that this function is callable directly on the scheduler instance.\n     *\n     * @param {Object} [options] Split options\n     * @param {'vertical'|'horizontal'|'both'} [options.direction] Split direction, 'vertical', 'horizontal' or 'both'.\n     * Not needed when passing `atColumn` or `atRecord`.\n     * @param {Date} [options.atDate] Date to split at. Has to be within the time axis\n     * @param {Grid.column.Column} [options.atColumn] Column to split at\n     * @param {Core.data.Model} [options.atRecord] Record to split at\n     * @returns {Promise} Resolves when split is complete, and subviews are scrolled to the correct position.\n     * @async\n     * @on-owner\n     */\n    async split(options = {}) {\n        const { client } = this;\n\n        if (client.isVertical) {\n            throw new Error('Splitting is not supported in vertical mode');\n        }\n\n        const result = await super.split(options);\n\n        if (result && options.atDate) {\n            await Promise.all([\n                // Scroll prev tick into view on left side\n                result[0].scrollToDate(DateHelper.add(options.atDate, -1, client.timeAxis.unit), endScrollOptions),\n                // And current tick into view on right side\n                result[1].scrollToDate(options.atDate, startScrollOptions)\n            ]);\n        }\n\n        // For whatever reason, the above scroll does not always refresh the timeaxis correctly, have not been able\n        // to track it down so triggering a refresh manually\n        client.timeAxisSubGrid.scrollable.x += 0.5;\n\n        return result;\n    }\n\n    //region Context menu\n\n    // Overwritten to prevent splitting in locked region\n    populateCellMenu() {}\n\n    populateScheduleMenu({ items, date, record }) {\n        const\n            me            = this,\n            { isSplit }   = me,\n            { splitFrom } = me.client;\n\n        // Splitting not supported in vertical mode\n        if (!me.disabled && me.client.isHorizontal) {\n            items.splitSchedule = {\n                text        : 'L{split}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-split-vertical',\n                weight      : 500,\n                separator   : true,\n                hidden      : isSplit || splitFrom,\n\n                menu : {\n                    splitHorizontally : {\n                        text        : 'L{horizontally}',\n                        icon        : 'b-icon b-icon-split-horizontal',\n                        localeClass : me,\n                        weight      : 100,\n                        onItem() {\n                            me.split({ atRecord : record, direction : 'horizontal' }).then();\n                        }\n                    },\n                    splitVertically : {\n                        text        : 'L{vertically}',\n                        icon        : 'b-icon b-icon-split-vertical',\n                        localeClass : me,\n                        weight      : 200,\n                        onItem() {\n                            me.split({ atDate : date }).then();\n                        }\n                    },\n                    splitBoth : {\n                        text        : 'L{both}',\n                        icon        : 'b-icon b-icon-split-both',\n                        localeClass : me,\n                        weight      : 300,\n                        onItem() {\n                            me.split({ atDate : date, atRecord : record, direction : 'both' }).then();\n                        }\n                    }\n                }\n            };\n\n            items.unsplitSchedule = {\n                text        : 'L{unsplit}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-clear',\n                hidden      : !(isSplit || splitFrom),\n                weight      : 550,\n                onItem() {\n                    (splitFrom || me).unsplit();\n                }\n            };\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Split, false, 'Scheduler');\n", "import TimelineSummary from './TimelineSummary.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/feature/Summary\n */\n\n/**\n * Defines a summary, used by the Summary and GroupSummary features.\n * @typedef SchedulerSummaryOptions\n * @property {String} label Label for the summary\n * @property {Function} renderer Function to calculate and render the summary value\n * @property {Date} renderer.startDate\n * @property {Date} renderer.endDate\n * @property {Scheduler.data.EventStore} renderer.eventStore\n * @property {Scheduler.data.ResourceStore} renderer.resourceStore\n * @property {Scheduler.model.EventModel[]} events\n * @property {Scheduler.model.ResourceModel[]} resources\n * @property {Core.data.Model} groupRecord\n * @property {String} groupField\n * @property {Object} groupValue\n */\n\n// noinspection JSClosureCompilerSyntax\n/**\n * A special version of the Grid Summary feature. This feature displays a summary row in the grid footer.\n * For regular columns in the locked section - specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRender to format the calculated sum.\n *\n * To summarize events, either provide a {@link #config-renderer} or use {@link #config-summaries}\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Scheduler/feature/TimelineSummary\n * @classtype summary\n * @feature\n * @inlineexample Scheduler/feature/Summary.js\n * @demo Scheduler/summary\n *\n * @typings Grid.feature.Summary -> Grid.feature.GridSummary\n */\nexport default class Summary extends TimelineSummary {\n    //region Config\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         summary : {\n             *             summaries : [\n             *                 {\n             *                     label : 'Label',\n             *                     renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n             *                         // return display value\n             *                         returns '<div>Renderer output</div>';\n             *                     }\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {SchedulerSummaryOptions[]}\n             */\n            summaries : null,\n\n            /**\n             * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Scheduler({\n             *     features : {\n             *         summary : {\n             *             renderer : ({ startDate, endDate, eventStore, resourceStore, events, element }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Date} startDate Tick start date\n             * @param {Date} endDate Tick end date\n             * @param {Scheduler.model.EventModel[]} events Events which belong to the group\n             * @param {Scheduler.data.EventStore} eventStore Event store\n             * @param {Scheduler.data.ResourceStore} resourceStore Resource store\n             * @param {HTMLElement} element Summary tick container\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null,\n\n            /**\n             * A config object for the {@link Grid.column.Column} used to contain the summary bar.\n             * @config {ColumnConfig}\n             */\n            verticalSummaryColumnConfig : null\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('bindStore', 'updateEventStore', 'updateResourceStore');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(scheduler, config) {\n        const me = this;\n\n        me.scheduler = scheduler;\n\n        if (scheduler.isVertical) {\n            scheduler.timeAxisSubGrid.resizable = false;\n\n            config.hideFooters = true;\n\n            scheduler.add(scheduler.createSubGrid('right'));\n\n            me.summaryColumn = scheduler.columns.add(ObjectHelper.assign({\n                filterable              : null,\n                region                  : 'right',\n                cellCls                 : 'b-grid-footer b-sch-summarybar',\n                align                   : 'center',\n                sortable                : false,\n                editor                  : false,\n                groupable               : false,\n                htmlEncode              : false,\n                cellMenuItems           : false,\n                enableHeaderContextMenu : false,\n                hidden                  : me.disabled\n            }, me.verticalSummaryColumnConfig))[0];\n        }\n\n        super.construct(scheduler, config);\n\n        // Feature might be run from Grid (in docs), should not crash\n        // https://app.assembla.com/spaces/bryntum/tickets/6801/details\n        if (scheduler.isSchedulerBase) {\n            me.updateEventStore(scheduler.eventStore);\n            me.updateResourceStore(scheduler.resourceStore);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    updateEventStore(eventStore) {\n        this.detachListeners('summaryEventStore');\n\n        eventStore.ion({\n            name    : 'summaryEventStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n\n    updateResourceStore(resourceStore) {\n        this.detachListeners('summaryResourceStore');\n\n        resourceStore.ion({\n            name    : 'summaryResourceStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n\n    /**\n     * Updates summaries.\n     * @private\n     */\n    updateTimelineSummaries() {\n        const\n            me                       = this,\n            { client : timeline }    = me,\n            { eventStore, timeAxis } = timeline,\n            summaryContainer         = me.summaryBarElement,\n            forResources             = (me.selectedOnly && timeline.selectedRecords.length)\n                ? timeline.selectedRecords : timeline.resourceStore.records;\n\n        if (summaryContainer && timeline.isEngineReady) {\n            // group events by ticks info once here to avoid performance lags\n            // should be inside `scheduler.isEngineReady` check to make sure all events were calculated\n            // https://github.com/bryntum/support/issues/2977\n            const eventsByTick = timeline.getResourcesEventsPerTick(forResources, ({ event }) => {\n                return !eventStore.isFiltered || eventStore.records.includes(event);\n            });\n\n            Array.from(summaryContainer.children).forEach((element, i) => {\n                const\n                    tick   = timeAxis.getAt(i),\n                    events = eventsByTick[i] || [];\n\n                let html    = '',\n                    tipHtml = `<header>${me.L('L{Summary for}', timeline.getFormattedDate(tick.startDate))}</header>`;\n\n                me.summaries.forEach(config => {\n                    const value     = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            resourceStore : timeline.resourceStore,\n                            eventStore,\n                            events,\n                            element\n                        }),\n                        valueHtml = value ? `<div class=\"b-timeaxis-summary-value\">${value}</div>` : '';\n\n                    if (me.summaries.length > 1 || value) {\n                        html += valueHtml;\n                    }\n\n                    tipHtml += valueHtml ? (`<label>${config.label || ''}</label>` + valueHtml) : '';\n                });\n\n                element.innerHTML = html;\n                // Only show tooltips for summary cells with content\n                element._tipHtml  = html ? tipHtml : '';\n            });\n        }\n    }\n}\n\n// Override Grids Summary with this improved version\nGridFeatureManager.registerFeature(Summary, false, 'Scheduler');\n", "import AbstractTimeRanges from './AbstractTimeRanges.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/feature/TimeSelection\n */\n\n/**\n * Feature that allows selection of a time span in the time axis header. When a time span is selected in the header,\n * a {@link #event-timeSelectionChange} event is fired.\n *\n * {@inlineexample Scheduler/feature/TimeSelection.js}\n *\n * ## Configuration\n *\n * You can configure the content of the header element using the {@link #config-headerRenderer} function.\n *\n * <div class=\"note\">Not compatible with the {@link Scheduler/feature/HeaderZoom} feature.</div>\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @demo Scheduler/time-selection\n * @classtype timeSelection\n * @feature\n */\nexport default class TimeSelection extends AbstractTimeRanges {\n    //region Default config\n\n    static $name = 'TimeSelection';\n\n    /** @hideconfigs enableResizing, showTooltip, dragTipTemplate, cls, showHeaderElements, tooltipTemplate */\n    /** @hideproperties showHeaderElements, timeRanges */\n    /** @hidefunctions getTipHtml, shouldRenderRange */\n\n    static get configurable() {\n        return {\n            enableResizing   : true,\n            showTooltip      : false,\n            dragTipTemplate  : null,\n            cls              : 'b-selected-time-span',\n            dragHelperConfig : {\n                // Data will be updated on drag, no need for DragHelper to touch the element\n                skipUpdatingElement : true\n            },\n            resizeHelperConfig : {\n                // Data will be updated on resize, no need for ResizeHelper to touch the element\n                skipUpdatingElement : true\n            },\n\n            /**\n             * Function used to generate the HTML content for the selected time span's header element.\n             *\n             * If you want to include an icon or similar to clear the selection on click, make sure to set\n             * `date-ref=\"closeButton\"` on it.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *   features : {\n             *     timeSelection : {\n             *       headerRenderer({ timeRange }) {\n             *         return `\n             *           ${DateHelper.format(timeRange.startDate, 'LL')}\n             *           <div class=\"close\" data-ref=\"closeButton></div>\n             *         `;\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             * @config {Function} headerRenderer\n             * @param {Object} data Render data\n             * @param {Object} data.timeRange\n             * @param {Date} data.timeRange.startDate\n             * @param {Date} data.timeRange.endDate\n             * @returns {String}\n             * @category Common\n             */\n            headerRenderer({ timeRange }) {\n                const { dateFormat } = this.client.timeAxisViewModel.bottomHeader;\n\n                return `<span class=\"b-selection-start\">${DateHelper.format(timeRange.startDate, dateFormat)}</span>\n                        <span class=\"b-selection-end\">${DateHelper.format(timeRange.endDate, dateFormat)}</span>\n                        <i class='b-icon b-icon-close' data-ref=\"closeButton\" data-btip=\"L{Popup.close}\"></i>`;\n            },\n\n            /**\n             * The selected time span, which can be set using simple `startDate` and `endDate` properties\n             * @prp {Object} selectedTimeSpan\n             * @param {Date} selectedTimeSpan.startDate The start date of the selected time span\n             * @param {Date} selectedTimeSpan.endDate The end date of the selected time span\n             */\n            selectedTimeSpan : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    onUIReady() {\n        super.onUIReady();\n\n        this.client.ion({\n            timeAxisHeaderMouseDown : 'onTimeAxisHeaderMouseDown',\n            thisObj                 : this\n        });\n    }\n\n    onTimeAxisHeaderMouseDown({ startDate, endDate }) {\n        if (!this.disabled) {\n            this.selectedTimeSpan = {\n                startDate,\n                endDate\n            };\n        }\n    }\n\n    onTimeRangeClick(event) {\n        super.onTimeRangeClick(event);\n\n        const me = this;\n\n        if (!me.disabled && event.target.closest('.b-selected-time-span')) {\n            if (event.target.matches('[data-ref=\"closeButton\"]')) {\n                me.selectedTimeSpan = null;\n            }\n            else {\n                /**\n                 * Triggered when clicking the time selection header element\n                 * @event timeSelectionElementClick\n                 * @on-owner\n                 * @param {Scheduler.view.Scheduler} source The scheduler\n                 * @param {Date} startDate The selected range start date\n                 * @param {Date} endDate The selected range end date\n                 * @param {Event} domEvent The raw DOM event\n                 */\n                me.client.trigger('timeSelectionElementClick', {\n                    ...me.selectedTimeSpan,\n                    domEvent : event\n                });\n            }\n        }\n    }\n\n    updateFromCoords(x, y, width, height) {\n        const\n            { client } = this,\n            size       = client.isHorizontal ? width : height;\n\n        let start = client.isHorizontal ? x : y;\n\n        if (client.rtl && client.isHorizontal) {\n            start = Math.max(client.timeAxisViewModel.totalSize - start - size, 0);\n        }\n\n        const\n            startDate = client.getDateFromCoord({ coord : start, roundingMethod : 'round', ignoreRTL : true }),\n            endDate   = client.getDateFromCoord({ coord : start + size, roundingMethod : 'round', ignoreRTL : true });\n\n        this.selectedTimeSpan = {\n            startDate : DateHelper.max(startDate, client.startDate),\n            endDate   : DateHelper.min(endDate, client.endDate)\n        };\n    }\n\n    onResizeStart({ source }) {\n        const\n            {\n                timeAxisViewModel,\n                timeResolution\n            }                    = this.client,\n            resolutionDurationMS = DateHelper.asMilliseconds(timeResolution.increment, timeResolution.unit);\n\n        // Prevent resizing smaller than one resolution increment\n        this.resize.minWidth = timeAxisViewModel.getDistanceForDuration(resolutionDurationMS);\n    }\n\n    onResizeDrag({ context }) {\n        this.updateFromCoords(\n            context.newX,\n            context.newY,\n            context.newWidth ?? context.elementWidth,\n            context.newHeight ?? context.elementHeight\n        );\n    }\n\n    onDragStart(event) {\n        super.onDragStart(event);\n\n        const { context } = event;\n\n        context.elementWidth = context.element.offsetWidth;\n        context.elementHeight = context.element.offsetHeight;\n    }\n\n    onDrag({ context }) {\n        this.updateFromCoords(\n            context.newX,\n            context.newY,\n            context.elementWidth,\n            context.elementHeight\n        );\n    }\n\n    onDrop() {\n        this.client.element.classList.remove('b-dragging-timerange');\n    }\n\n    onDragReset() {\n        this.refresh();\n    }\n\n    get timeRanges() {\n        return this.selectedTimeSpan ? [this.selectedTimeSpan] : [];\n    }\n\n    // Always render the selection\n    shouldRenderRange() {\n        return true;\n    }\n\n    changeSelectedTimeSpan(timeSpan) {\n        if (timeSpan) {\n            timeSpan.id = 'time-selection';\n        }\n\n        return timeSpan;\n    }\n\n    updateSelectedTimeSpan(timeSpan) {\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n\n        /**\n         * Triggered when time selection changes\n         * @event timeSelectionChange\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Date} startDate The selected range start date, or `undefined`\n         * @param {Date} endDate The selected range end date, or `undefined`\n         */\n        this.client.trigger('timeSelectionChange', {\n            ...timeSpan ?? {}\n        });\n    }\n}\n\nGridFeatureManager.registerFeature(TimeSelection, false, 'Scheduler');\n", "import Localizable from '../../Core/localization/Localizable.js';\nimport GridTableExporter from '../../Grid/util/TableExporter.js';\nimport SchedulerBase from '../view/SchedulerBase.js';\n\n/**\n * @module Scheduler/util/ScheduleTableExporter\n */\n\n/**\n * This class transforms scheduler component into two arrays: rows and columns. Columns array contains objects with\n * meta information about column: field name, column name, width and type of the rendered value, rows array contains\n * arrays of cell values.\n *\n * ```javascript\n * const exporter = new ScheduleTableExporter({ target : scheduler });\n * exporter.export()\n *\n * // Output\n * {\n *     columns : [\n *         { field : 'name',      value : 'First name', type : 'string',  width : 100 },\n *         { field : 'name',      value : 'Task',       type : 'string',  width : 100, eventColumn : true },\n *         { field : 'startDate', value : 'Starts',     type : 'date',    width : 100, eventColumn : true },\n *         { field : 'endDate',   value : 'Ends',       type : 'date',    width : 100, eventColumn : true }\n *     ],\n *     rows : [\n *         ['Michael', 'Hand out dundies',      Date, Date],\n *         ['Michael', 'Buy condo',             Date, Date],\n *         ['Jim',     'Close sale to library', Date, Date]\n *     ]\n * }\n * ```\n *\n * ## How data is exported\n *\n * Data is exported as in the base class with minor addition: every event is exported on a separate row, like\n * demonstrated above.\n *\n * In case there are unassigned events, by default they will be exported as well\n *\n * ```javascript\n * // output\n * {\n *     rows : [\n *         ['Michael', 'Hand out dundies',      Date, Date],\n *         ['Michael', 'Buy condo',             Date, Date],\n *         ['Jim',     'Close sale to library', Date, Date],\n *         ['',        'No resource assigned'],\n *         ['',        'Halloween prep',        Date, Date],\n *         ['',        'New year prep',         Date, Date]\n *     ]\n * }\n * ```\n *\n * @extends Grid/util/TableExporter\n * @mixes Core/localization/Localizable\n */\nexport default class ScheduleTableExporter extends Localizable(GridTableExporter) {\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to `false` to not include unassigned events in the export. `true` by default.\n             * @config {Boolean} includeUnassigned\n             * @default\n             */\n            includeUnassigned : true,\n\n            /**\n             * An array of Event columns configuration used to specify columns width, headers name, and column fields to\n             * get the data from.\n             * 'field' config is required. If 'text' is missing, the 'field' config will be used instead.\n             *\n             * For example:\n             * ```javascript\n             * eventColumns    : [\n             *     { text : 'Task', field : 'name' },\n             *     { text : 'Starts', field : 'startDate', width : 140 },\n             *     { text : 'Ends', field : 'endDate', width : 140 }\n             * ]\n             * ```\n             *\n             * @config {String[]|Object[]} eventColumns\n             * @default\n             */\n            eventColumns : [\n                { text : 'Task', field : 'name' },\n                { text : 'Starts', field : 'startDate', width : 140 },\n                { text : 'Ends', field : 'endDate', width : 140 }\n            ],\n\n            /**\n             * Function to sort events for each resource. By default events are sorted in the order of appending to the\n             * store.\n             * For example:\n             * ```javascript\n             * // Sorting by start date\n             * eventSortFn : (a, b) => a.startDate - b.startDate\n             * ```\n             * @config {Function}\n             * @internal\n             */\n            eventSortFn : null\n        };\n    }\n\n    construct(config = {}, ...args) {\n        super.construct(config, ...args);\n\n        if (!this.eventSortFn) {\n            this.eventSortFn = (a, b) => a.internalId - b.internalId;\n        }\n    }\n\n    normalizeColumns(config) {\n        super.normalizeColumns(config);\n\n        config.eventColumns = config.eventColumns.map(col => {\n            if (typeof col === 'string') {\n                return { field : col };\n            }\n            else {\n                return col;\n            }\n        });\n    }\n\n    generateExportData(config) {\n        const\n            me                 = this,\n            isScheduler        = this.target instanceof SchedulerBase,\n            resourceColumns    = me.generateColumns(config),\n            eventColumns       = isScheduler ? me.generateEventColumns(config) : [],\n            columns            = resourceColumns.concat(eventColumns),\n            rows               = me.generateRows(config);\n\n        return { columns, rows };\n    }\n\n    generateEventColumns(config) {\n        return config.eventColumns.map(column => this.processEventColumn(column, config));\n    }\n\n    processEventColumn(column, config) {\n        //<debug>\n        if (!column.field) {\n            // Without field on scheduler column we have nothing to export\n            console.warn('ExcelExporter: \"field\" config is required for event columns');\n        }\n        //</debug>\n\n        const\n            { width, minWidth }    = column,\n            { defaultColumnWidth } = config;\n\n        return {\n            field       : column.field,\n            value       : column.text,\n            width       : Math.max(width || defaultColumnWidth, minWidth || defaultColumnWidth),\n            eventColumn : true,\n            type        : this.getColumnType(column, this.target.eventStore)\n        };\n    }\n\n    generateRows(config) {\n        const\n            me         = this,\n            { target } = me;\n\n        let result;\n\n        if (!(target instanceof SchedulerBase)) {\n            result = super.generateRows(config);\n        }\n        else {\n            result = [];\n\n            // forEach skips group records, summary records etc\n            target.resourceStore.map(resourceRecord => {\n                // Get all events for resource (including assignment store)\n                const events = resourceRecord.events || [];\n\n                // Events order is not guaranteed, sort by internalId, that is guaranteed to grow with every new record\n                events.sort(me.eventSortFn);\n\n                // Set dummy event to have resource info printed without events\n                if (!events.length) {\n                    events.push('');\n                }\n\n                events.forEach(eventRecord => result.push(me.getRowData(config, resourceRecord, eventRecord)));\n            });\n\n            if (config.includeUnassigned && config.eventColumns.length) {\n                const notAssignedEvents = target.eventStore.query(eventRecord => !eventRecord.resources.length);\n\n                if (notAssignedEvents.length) {\n                    // Use offset to match first event column\n                    const cells = new Array(config.columns.length).fill('');\n\n                    cells.push(me.L('L{ExcelExporter.No resource assigned}'));\n\n                    result.push(cells);\n\n                    // Set dummy resource to have event info printed without resource\n                    notAssignedEvents.forEach(eventRecord => result.push(me.getRowData(config, null, eventRecord)));\n                }\n            }\n\n            // filter out empty rows\n            result = result.filter(cells => cells.length);\n        }\n\n        return result;\n    }\n\n    getRowData(config, resource, event) {\n        const\n            {\n                columns,\n                eventColumns\n            }             = config,\n            cells         = [],\n            resourceCells = this.processRecord(resource, columns, config);\n\n        // No cells from group footers (or from group headers if configured to not show them)\n        resourceCells && cells.push(...resourceCells);\n\n        if (!resource || !resource.isSpecialRow) {\n            const eventCells = this.processRecord(event, eventColumns, config);\n            // No cells from group footers (or from group headers if configured to not show them)\n            eventCells && cells.push(...eventCells);\n        }\n\n        return cells;\n    }\n}\n", "/*eslint no-undef: \"error\"*/\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport GridExcelExporter from '../../../Grid/feature/experimental/ExcelExporter.js';\nimport ScheduleTableExporter from '../../util/ScheduleTableExporter.js';\n\n/**\n * @module Scheduler/feature/experimental/ExcelExporter\n */\n\n/**\n * **NOTE**: This class requires a 3rd party library to operate.\n *\n * A plugin that allows exporting Scheduler data to Excel without involving the server. It uses {@link Scheduler.util.ScheduleTableExporter}\n * class as data provider, [zipcelx library](https://www.npmjs.com/package/zipcelx)\n * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)\n * and [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n * Zipcelx should be either in global scope (window) or can be provided with {@link #config-zipcelx} config.\n *\n * ```html\n * // Global scope\n * <script src=\"zipcelx.js\"></script>\n * ```\n *\n * ```javascript\n * // importing from package\n * import zipcelx from 'zipcelx';\n *\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             zipcelx\n *         }\n *     }\n * })\n * ```\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         excelExporter : {\n *             // Choose the date format for date fields\n *             dateFormat : 'YYYY-MM-DD HH:mm',\n *             exporterConfig : {\n *                 // Choose the Resource fields to include in the exported file\n *                 columns : [{ text : 'Staff', field : 'name' }],\n *\n *                 // Choose the Event fields to include in the exported file\n *                 eventColumns    : [\n *                     { text : 'Task', field : 'name' },\n *                     { text : 'Starts', field : 'startDate', width : 140 },\n *                     { text : 'Ends', field : 'endDate', width : 140 }\n *                 ]\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * And how to call it:\n *\n * ```javascript\n * scheduler.features.excelExporter.export({\n *     filename : 'Export',\n *     exporterConfig : {\n *         columns : [{ text : 'Staff', field : 'name' }]\n *     }\n * })\n * ```\n *\n * @extends Grid/feature/experimental/ExcelExporter\n * @classtype excelExporter\n * @feature\n * @demo Scheduler/exporttoexcel\n *\n * @typings Grid.feature.experimental.ExcelExporter -> Grid.feature.experimental.GridExcelExporter\n */\nexport default class ExcelExporter extends GridExcelExporter {\n    static get $name() {\n        return 'ExcelExporter';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Exporter class. Must subclass {@link Scheduler.util.ScheduleTableExporter}\n             * @config {Scheduler.util.ScheduleTableExporter}\n             * @typings {typeof ScheduleTableExporter}\n             * @default\n             */\n            exporterClass : ScheduleTableExporter,\n\n            /**\n             * Configuration object for {@link #config-exporterClass exporter class}.\n             * @config {Object}\n             */\n            exporterConfig : null\n        };\n    }\n}\n\nGridFeatureManager.registerFeature(ExcelExporter, false, 'Scheduler');\n", "import SchedulerBase from './SchedulerBase.js';\n\nimport '../localization/En.js';\n\n// default features\nimport '../feature/ColumnLines.js';\nimport '../feature/EventCopyPaste.js';\nimport '../feature/EventDrag.js';\nimport '../feature/EventDragCreate.js';\nimport '../feature/EventEdit.js';\nimport '../feature/EventFilter.js';\nimport '../feature/EventMenu.js';\nimport '../feature/EventResize.js';\nimport '../feature/EventTooltip.js';\nimport '../feature/ScheduleContext.js';\nimport '../feature/ScheduleMenu.js';\nimport '../feature/ScheduleTooltip.js';\nimport '../feature/StickyEvents.js';\nimport '../feature/TimeAxisHeaderMenu.js';\n\n// Since Scheduler is based on SchedulerBase + GridBase, Grids default features needs to be pulled in here also\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\nimport '../../Grid/column/CheckColumn.js'; // For checkbox selection mode\n\n/**\n * @module Scheduler/view/Scheduler\n */\n\n/**\n * The Scheduler widget is a very powerful and performant UI component that displays an arbitrary number of \"locked\"\n * columns with a schedule occupying the remaining space. The schedule has a time axis at the top, one row per resource\n * and any number of events per resource.\n *\n * ## Intro\n * The Scheduler widget has a wide range of features and a large API to allow users to work with it efficiently in the\n * browser.\n *\n * The timeaxis displayed at the top of the Scheduler is configured using a {@link #config-startDate},\n * {@link #config-endDate} and a {@link #config-viewPreset}. The dates determine the outer limits of the range shown in\n * the timeaxis while the {@link Scheduler.preset.ViewPreset} decides the appearance and which dates are actually shown.\n * The Scheduler ships with a selection of predefined view presets, which can be found in\n * {@link Scheduler.preset.PresetManager}. If you want to specify view presets for a specific scheduler only, please see\n * {@link #config-presets} config.\n *\n * <div class=\"note\">Note that if you want to use infinite scroll along the time axis, configure\n * {@link #config-infiniteScroll} and {@link #config-visibleDate} instead of <code>startDate</code> and\n * <code>endDate</code></div>\n *\n * The Scheduler uses a {@link Scheduler.data.ResourceStore} to hold resources and an {@link Scheduler.data.EventStore}\n * to hold events. You can use inline data or load data using ajax, see the \"Working with data\" guides for more\n * information.\n *\n * The simplest schedule configured with inline data would look like this:\n *\n *      let scheduler = new Scheduler({\n *          appendTo : document.body,\n *\n *          startDate  : new Date(2018,4,6),\n *          endDate    : new Date(2018,4,12),\n *          viewPreset : 'dayAndWeek',\n *\n *           columns : [\n *              { field : 'name', text : 'Name', width: 100 }\n *          ],\n *\n *          resources : [\n *              { id : 1, name : 'Bernard' },\n *              { id : 2, name : 'Bianca' }\n *          ],\n *\n *          events : [\n *              { id : 1, resourceId : 1, name : 'Interview', startDate : '2018-05-06', endDate : '2018-05-07' },\n *              { id : 2, resourceId : 1, name : 'Press conference', startDate : '2018-05-08', endDate : '2018-05-09' },\n *              { id : 3, resourceId : 2, name : 'Audition', startDate : '2018-05-06', endDate : '2018-05-08' },\n *              { id : 4, resourceId : 2, name : 'Script deadline', startDate : '2018-05-11', endDate : '2018-05-11' }\n *          ]\n *      });\n *\n * {@inlineexample Scheduler/view/Simplest.js}\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.\n * {@region Loading data}\n * As mentioned above Bryntum Scheduler uses an {@link Scheduler.data.EventStore} and a {@link Scheduler.data.ResourceStore}\n * to hold its data. Data is expected to be in JSON format and can be assigned inline (from memory) using the\n * {@link #config-events} and {@link #config-resources} shortcuts:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    events : myArrayOfEventData,\n *    resources : myArrayOfResourceData\n * });\n * ```\n *\n * If you need to give additional store configuration, you can also specify store configs or instances:\n *\n * ```javascript\n * let resourceStore = new ResourceStore({\n *   // ResourceStore config object\n * })\n *\n * let scheduler = new Scheduler({\n *    // EventStore config object\n *    eventStore : {\n *       ...\n *    },\n *\n *    // Already existing ResourceStore instance\n *    resourceStore\n * });\n * ```\n *\n * To use Ajax to fetch data from a server, specify {@link Core.data.AjaxStore#config-readUrl}:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    eventStore : {\n *        readUrl  : 'backend/read_events.php',\n *        autoLoad : true\n *    }\n * });\n * // If you do not specify autoLoad, trigger loading manually:\n * scheduler.eventStore.load();\n * ```\n *\n * For more information, see the \"Working with data\" guides.\n * {@endregion}\n * {@region Event styling}\n * Bryntum Schedulers appearance can be affected in a few different ways:\n *\n * * Switching themes\n * * Choosing event styles and colors\n * * Using renderer functions\n *\n * ### Switching themes\n *\n * Scheduler ships with five different themes, simply include the css file for the theme you would like to use on your\n * page. The themes are located in the `/build` folder. For example to include the material theme:\n *\n * ```html\n * <link rel=\"stylesheet\" href=\"build/scheduler.material.css\" data-bryntum-theme>\n * ```\n *\n * Included themes are (from left to right) classic-light, classic, classic-dark, stockholm and material:\n *\n * <img src=\"Scheduler/basic/thumb.classic-light.png\" alt=\"Classic-Light theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.classic.png\" alt=\"Classic theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.classic-dark.png\" alt=\"Classic-Dark theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.stockholm.png\" alt=\"Stockholm theme\" width=\"300\" style=\"margin-right: .5rem\">\n * <img src=\"Scheduler/basic/thumb.material.png\" alt=\"Material theme\" width=\"300\">\n *\n * ### Choosing event styles and colors\n * The style and color of each event can be changed by assigning to the `eventStyle` and `eventColor` configs. These\n * configs are available at 3 different levels:\n *\n * * Scheduler level, affects all events (see {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle} and\n *   {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor}).\n * * Resource level, affects all events assigned to that resource (see {@link Scheduler.model.mixin.ResourceModelMixin#field-eventStyle}\n *   and {@link Scheduler.model.mixin.ResourceModelMixin#field-eventColor}).\n * * Event level, affects that event (see {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle} and\n *   {@link Scheduler/model/mixin/EventModelMixin#field-eventColor}).\n *\n * {@inlineexample Scheduler/view/Styles.js}\n *\n * For available styles, see {@link Scheduler.view.mixin/TimelineEventRendering#config-eventStyle}. For colors,\n * {@link Scheduler.view.mixin/TimelineEventRendering#config-eventColor}. Also take a look at the\n * <a href=\"../examples/eventstyles/\" target=\"_blank\">eventstyles demo</a>.\n *\n * ### Sorting overlapping events\n *\n * The order of overlapping events rendered in a horizontal scheduler can be customized by overriding\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-horizontalEventSorterFn} function on the scheduler.\n * For example:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *     horizontalEventSorterFn(a, b) {\n *         return b.startDate.getTime() - a.startDate.getTime();\n *     },\n *     ...\n * });\n * ```\n *\n * {@inlineexample Scheduler/view/SortingOverlappingEvents.js}\n *\n * ### Using render functions\n * Render function can be used to manipulate the rendering of rows (resources) and events. For information on row\n * renderers, see {@link Grid.column.Column#config-renderer}.\n *\n * Event rendering can be manipulated by specifying an {@link Scheduler.view.mixin/SchedulerEventRendering#config-eventRenderer} function. The function is called\n * for each event before it is rendered to DOM. By using its arguments you can add CSS classes, modify styling and\n * determine the contents of the event:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *\n *   events    : [...],\n *   resources : [...],\n *\n *   ...,\n *\n *   eventRenderer({resourceRecord, eventRecord, renderData}) {\n *      // add css class to the event\n *      renderData.cls.add('my-css-class');\n *\n *      // use an icon\n *      renderData.iconCls = 'b-fa b-fa-some-nice-icon';\n *\n *      // return value is used as events text\n *      return `${resourceRecord.name}: ${eventRecord.name}`;\n *   }\n * });\n * ```\n *\n * {@endregion}\n * {@region Event manipulation}\n * You can programmatically manipulate the events using data operations, see the \"Working with data\" guides for more\n * information. Events are reactive, changes reflect on the UI automatically. A small example on manipulating events:\n *\n * ```javascript\n * // change startDate of first event\n * scheduler.eventStore.first.startDate = new Date(2018,5,10);\n *\n * // remove last event\n * scheduler.eventStore.last.remove();\n *\n * // reassign an event\n * scheduler.eventStore.getById(10).resourceId = 2;\n * ```\n *\n * You can also allow your users to manipulate the events using the following features:\n *\n * * {@link Scheduler.feature.EventDrag}, drag and drop events within the schedule\n * * {@link Scheduler.feature.EventDragCreate}, create new events by click-dragging an empty area\n * * {@link Scheduler.feature.EventEdit}, show an event editing form\n * * {@link Scheduler.feature.SimpleEventEdit}, edit the event name easily\n * * {@link Scheduler.feature.EventResize}, resize events by dragging resize handles\n *\n * All of the features mentioned above are enabled by default.\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Scheduler (browse the API docs to find them), some of them on\n * by default and some of them requiring extra configuration. The code below tries to illustrate the major things that\n * are used by default:\n *\n * ```javascript\n * let scheduler = new Scheduler({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit            : true, // Cell editing in the columns part\n *        columnLines         : true, // Column lines in the schedule part\n *        columnPicker        : true, // Header context menu item to toggle visible columns\n *        columnReorder       : true, // Reorder columns in grid part using drag and drop\n *        columnResize        : true, // Resize columns in grid part using the mouse\n *        cellMenu            : true, // Context menu for cells in the grid part\n *        eventMenu           : true, // Context menu for events\n *        eventDrag           : true, // Dragging events\n *        eventDragCreate     : true, // Drag creating events\n *        eventEdit           : true, // Event editor dialog\n *        eventFilter         : true, // Filtering events using header context menu\n *        eventCopyPaste      : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events\n *        eventResize         : true, // Resizing events using the mouse\n *        eventTooltip        : true, // Tooltips for events\n *        group               : true, // Row grouping\n *        headerMenu          : true, // Context menu for headers in the grid part\n *        timeAxisHeaderMenu  : true, // Header context menu for schedule part\n *        scheduleMenu        : true, // Context menu for empty parts of the schedule\n *        scheduleTooltip     : true, // Tooltip for empty parts of the schedule\n *        sort                : true  // Row sorting\n *    },\n *\n *    // From Grid\n *    animateRemovingRows       : false, // Rows will not slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height\n *    columnLines               : true,  // Grid part, themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : 60,    // Scheduler specifies a default rowHeight in pixels\n *    showDirty                  : false, // No indicator for changed cells\n *\n *    // Scheduler specific\n *    autoAdjustTimeAxis             : true,      // startDate & endDate will be adjusted to display a suitable range\n *    allowOverlap                   : true,      // Events are allowed to overlap (overlays, stacks or packs depending on eventLayout)\n *    barMargin                      : 10,        // Space above + below each event\n *    createEventOnDblClick          : true,      // Allow creating new events by double clicking empty space\n *    enableDeleteKey                : true,      // Allow deleting events with delete / backspace keys\n *    enableEventAnimations          : true,      // Animate event changes\n *    eventBarTextField              : 'name',    // Field on EventModel to display in events\n *    eventColor                     : 'green',   // Use green as default color for events\n *    eventLayout                    : 'stack',   // Stack overlapping events by default\n *    eventStyle                     : 'plain',   // Use plain as default style for events\n *    managedEventSizing             : true,      // Calculate event sizes based on rowHeight & barMargin\n *    milestoneCharWidth             : 10,\n *    milestoneLayoutMode            : 'default',\n *    useInitialAnimation            : true,      // Fade in events initially\n *    viewPreset                     : 'weekAndDayLetter',\n *    zoomOnMouseWheel               : true,\n *    zoomOnTimeAxisDoubleClick      : true\n * });\n * ```\n *\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Scheduler does not currently provide any keyboard shortcuts on its own. However, the following Scheduler features has\n * their own keyboard shortcuts. Follow the links for details.\n * * {@link Scheduler.feature.EventCopyPaste#keyboard-shortcuts EventCopyPaste}\n *\n * As Scheduler is a subclass of Grid, many of Grid's {@link Grid.view.Grid#keyboard-shortcuts keyboard-shortcuts}\n * works for Scheduler as well.\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Scheduler/guides/customization/keymap.md)\n * {@endregion}\n * {@region Performance}\n * To make scheduler performance as good as possible it only renders the events and resources that are within view (plus\n * an additional buffer). Since adding to and removing from DOM comes with a performance penalty the elements are\n * instead repositioned and reused as you scroll. A side effect of this is that you cannot do direct DOM element\n * manipulation in a reliable way, instead you should use row and event renderer functions to achieve what you want (see\n * the section on event styling above).\n *\n * To put the scheduler to the test, try our <a href=\"../examples/bigdataset/\" target=\"_blank\">bigdataset demo</a>.\n * {@endregion}\n *\n * {@region Recurring Events}\n * From 4.0.0, there is no `RecurringEvents` Feature. There is an\n * {@link Scheduler/view/mixin/RecurringEvents#config-enableRecurringEvents} boolean config on the Scheduler.\n * Occurrences of recurring events are provided on a \"just in time\" basis by a new EventStore API which must now be used\n * when interrogating an EventStore.\n *\n * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} is a multipurpose event gathering method which can be\n * asked to return events which match a set of criteria including a date range and a resource. By default, if the\n * requested date range contains occurrences of a recurring event, those occurrences are returned in the result array.\n *\n * ```javascript\n * myEventStore.getEvents({\n *     resourceRecord : myResourceRecord,\n *     startDate      : myScheduler.startDate,\n *     endDate        : myScheduler.endDate\n * });\n * ```\n *\n * Occurrences are *not* present in the store's data collection.\n *\n * To directly access occurrences of a recurring event which *intersect* a date range, use:\n *\n * ```js\n * recurringEvent.getOccurrencesForDateRange(startDate, endDate);\n * ```\n *\n * The `endDate` argument is optional if the occurrence for one date is required. This method always\n * returns an array. Note that it may be empty if no occurrences intersect the date range.\n *\n * ### Convert an occurrence to an exception\n * To programmatically convert an occurrence to be a single exception to its owner's sequence use:\n *\n * ```javascript\n * myOccurrence.beginBatch();\n * myOccurrence.startDate = DateHelper.add(myOccurrence.startDate, 1, 'day');\n * myOccurrence.name = 'Postponed to next day';\n * myOccurrence.recurrence = null; // This means it does NOT become a new recurring base event.\n * myOccurrence.endBatch();\n * ```\n *\n * That will cause that event to be inserted into the store as a concrete event definition, firing\n * an `add` event as would be expected, and will add an `exceptionDates` to its owning recurring event.\n *\n * When syncing this change back to the server, the `exceptionDates` array for the modified\n * recurring event now contains the exception dates correctly serialized into string form using\n * the `dateFormat` of the field. The system-supplied default value for this is\n * `'YYYY-MM-DDTHH:mm:ssZ'`\n *\n * ### Convert an occurrence to a new recurring event sequence.\n * To programmatically convert an occurrence to be the start of a new recurring sequence, use:\n *\n * ```javascript\n * myOccurrence.beginBatch();\n * myOccurrence.startDate = DateHelper.set(myOccurrence.startDate, 'hour', 14);\n * myOccurrence.name = 'Moved to 2pm from here on';\n * myOccurrence.endBatch();\n * ```\n *\n * That will cause that event to be inserted into the store as a concrete *recurring* event\n * definition, firing an `add` event as would be expected, and will terminate the previous\n * recurring owner of that occurrence on the day before the new event.\n * {@endregion}\n *\n * @extends Scheduler/view/SchedulerBase\n * @classType scheduler\n * @widget\n */\nexport default class Scheduler extends SchedulerBase {\n    static get $name() {\n        return 'Scheduler';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'scheduler';\n    }\n}\n\n// Register this widget type with its Factory\nScheduler.initClass();\n", "import UndoRedoBase from '../../Core/widget/base/UndoRedoBase.js';\nimport '../../Core/widget/Combo.js';\n\n/**\n * @module Scheduler/widget/UndoRedo\n */\n\nconst isProjectConsumer = w => w.isProjectConsumer;\n\n/**\n * A widget which encapsulates undo/redo functionality for the {@link Scheduler.model.ProjectModel project}\n * of a scheduling widget (`Scheduler`, `Gantt` or `Calendar`).\n *\n * To make use of this, the project must be configured with a\n * {@link Scheduler.model.mixin.ProjectModelMixin#config-stm State Tracking Manager}.\n *\n * If inserted into a scheduling widget (such as into a `tbar`, or `bbar`, or as an item in a context menu),\n * the project of the encapsulating scheduling widget will be used.\n *\n * If this widget is to be used \"standalone\" (rendered into the DOM outside of a scheduling widget),\n * this must be configured with a reference to the project, or the scheduling widget which is\n * using the project.\n *\n * There are three child widgets encapsulated which may be referenced through the {@link Core.widget.Container#property-widgetMap}:\n *\n * - `undoBtn` - The button which operates the undo operation (CTRL+Z, or CMD+Z in Mac OS)\n * - `transactionsCombo` - A combobox into which is pushed the list of transactions,\n * - `redoBtn` - The button which operates the redo operation (CTRL+SHIFT+Z, + CMD+SHIFT+Z in Mac OS)\n *\n * To disable keyboard shortcuts for undo/redo, set {@link Scheduler.view.Scheduler#config-enableUndoRedoKeys} to false.\n *\n * The transactionsCombo may be configured away if only the buttons are required:\n *\n * ```javascript\n * {\n *     type      : 'undoredo',\n *     items     : {\n *         transactionsCombo : null\n *     }\n * }\n * ```\n *\n * The example below illustrated how to embed an `undoredo` widget in the top toolbar of a Scheduler.\n * @extends Core/widget/base/UndoRedoBase\n * @classType undoredo\n * @demo Scheduler/undoredo\n * @inlineexample Scheduler/widget/UndoRedo.js\n * @widget\n */\nexport default class UndoRedo extends UndoRedoBase {\n    static get $name() {\n        return 'UndoRedo';\n    }\n\n    static get type() {\n        return 'undoredo';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The Scheduling Widget (or its `id`) whose transaction to track.\n             *\n             * This may be a `Scheduler`, a `Gantt` or a `Calendar`.\n             *\n             * ```javascript\n             *     {\n             *         type      : 'undoredo',\n             *         scheduler : myCalendar\n             *     }\n             * ```\n             * @config {Core.widget.Widget|String}\n             */\n            scheduler : null,\n\n            /**\n             * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n             * @member {Scheduler.model.ProjectModel} project\n             * @typings {ProjectModel}\n             * @category Data\n             */\n\n            /**\n             * The Scheduling {@link Scheduler.model.ProjectModel project}'s whose\n             * transaction to track.\n             *\n             * ```javascript\n             *     {\n             *         type    : 'undoredo',\n             *         project : scheduler.project\n             *     }\n             * ```\n             * @config {Scheduler.model.ProjectModel|ProjectModelConfig}\n             * @category Data\n             */\n            project : null\n        };\n    }\n\n    construct() {\n        super.construct(...arguments);\n\n        // Look up a Project owner in our ancestors.\n        if (!this.stm) {\n            this.scheduler = this.up(isProjectConsumer);\n        }\n\n    }\n\n    changeScheduler(scheduler) {\n        return scheduler.isProjectConsumer ? scheduler : UndoRedo.getById(scheduler);\n    }\n\n    updateScheduler(scheduler) {\n        const { crudManager } = scheduler;\n\n        scheduler.ion({\n            projectChange : 'onProjectChanged',\n            thisObj       : this\n        });\n\n        if (crudManager) {\n            this.setupLoadListener(crudManager);\n        }\n        // No CrudManager, so it must be inline data, so we can start immediately\n        else {\n            this.onLoad();\n        }\n\n        this.stm = scheduler.project.stm;\n    }\n\n    setupLoadListener(source) {\n        source.detachListeners('load');\n        source.ion({\n            name    : 'load',\n            load    : 'onLoad',\n            thisObj : this\n        });\n    }\n\n    async onLoad() {\n        // Do not want normalization changes to be tracked by STM, wait until they are finished before enabling\n        await this.scheduler.project.commitAsync();\n\n        // Widget could be destroyed during async project commit\n        if (!this.isDestroyed) {\n            this.stm.enable();\n\n            this.fillUndoRedoCombo();\n        }\n    }\n\n    onProjectChanged({ project }) {\n        this.project = project;\n    }\n\n    updateProject(project) {\n        super.updateProject(...arguments);\n\n        // The original condition `(project && !this.scheduler?.isConfiguring)` is not\n        // correctly transpiled by angular webpack leading to https://github.com/bryntum/support/issues/3789\n        // The following syntax fixes the above bug\n        if (project && this.scheduler && !this.scheduler.isConfiguring) {\n            this.setupLoadListener(project);\n        }\n    }\n}\n\nUndoRedo.initClass();\n", "import Combo from '../../Core/widget/Combo.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/widget/ViewPresetCombo\n */\n\n/**\n * A combo for selecting {@link Scheduler.preset.ViewPreset} for Scheduler and Gantt. Lets the user select\n * between specified {@link #config-presets} available.\n *\n * {@inlineexample Scheduler/widget/ViewPresetCombo.js}\n *\n * Add it to the component's toolbar to connect it automatically:\n * ```javascript\n * new Scheduler({\n *    tbar : {\n *        viewPresetCombo: {\n *            type: 'viewpresetcombo',\n *            width: '7em'\n *        }\n *    }\n * });\n * ```\n *\n * Or specify which Scheduler, SchedulerPro or Gantt component instance it should connect to the {@link #config-client}\n * config:\n * ```javascript\n * const scheduler = new Scheduler({ ... });\n * const viewPresetCombo = new ViewPresetCombo({\n *     appendTo : 'someElementClassName',\n *     client   : scheduler\n * });\n * ```\n *\n * By default, the following presets are shown in the combo:\n * * {@link Scheduler.preset.PresetManager hourAndDay}\n * * {@link Scheduler.preset.PresetManager weekAndDay}\n * * {@link Scheduler.preset.PresetManager dayAndMonth}\n *\n * ## Changing selectable presets\n * To change the default selectable presets specify an array of preset ids. The presets specified must be available to\n * the client.\n *\n * ```javascript\n * viewPresetCombo: {\n *    presets: ['weekAndDay', 'dayAndMonth', 'myCustomPreset']\n * }\n * ```\n *\n * NOTE: The selectable presets will be arranged in the order provided in the {@link #config-presets} config.\n * @extends Core/widget/Combo\n * @classType viewpresetcombo\n * @widget\n */\nexport default class ViewPresetCombo extends Combo {\n    static $name = 'ViewPresetCombo';\n\n    static type = 'viewpresetcombo';\n\n    static configurable = {\n\n        /**\n         * An array containing string {@link Scheduler.preset.ViewPreset} ids available for selection. The specified\n         * presets must be {@link Scheduler.view.mixin.TimelineViewPresets#config-presets available} for the\n         * {@link #config-client} (Scheduler, SchedulerPro or Gantt) for it to work properly. The selectable presets\n         * will be arranged in the order provided here.\n         * @config {Array}\n         */\n        presets : ['hourAndDay', 'weekAndDay', 'dayAndMonth'],\n\n        /**\n         * If not added to a toolbar, provide a Scheduler, SchedulerPro or Gantt component instance to which the\n         * ViewPresetCombo should be connected.\n         * @config {Scheduler.view.TimelineBase}\n         * @default\n         */\n        client : null,\n\n        /**\n         * @hideconfigs caseSensitive,chipView,clearTextOnPickerHide,createOnUnmatched,displayField,displayValueRenderer,emptyText,encodeFilterParams,filterOnEnter,filterOperator,filterParamName,filterSelected,hideTrigger,inlinePicker,items,keyStrokeFilterDelay,minChars,multiSelect,multiValueSeparator,primaryFilter,store,triggerAction,validateFilter,value,valueField,containValues,container,inline,adopt,dataset,title,autoSelect,clearable,highlightExternalChange,keyStrokeChangeDelay,maxLength,minLength,placeholder,required,revertOnEscape,triggers,autoComplete,inputType,spellCheck,validateOnInput,tooltip,autoClose,autoExpand,picker,pickerAlignElement\n         */\n        /**\n         * @hideproperties filterOperator,isEmpty,queryLast,records,store,valueCollection,content,contentElement,dataset,html,overflowElement,errorTip,isEmptyInput,isValid,triggers,scrollable,cellInfo,tab\n         */\n        /**\n         * @hidefunctions clear,clearError,getErrors,select,setError,contains,exitFullscreen,requestFullscreen,owns,query,queryAll\n         */\n        /**\n         * @hideevents input\n         */\n\n        editable     : false,\n        valueField   : 'id',\n        displayField : 'name',\n        placeholder  : 'Select view'\n    };\n\n    construct() {\n        super.construct(...arguments);\n        this.scheduler.ion({\n            presetchange : this.onClientPresetChange,\n            thisObj      : this\n        });\n    }\n\n    // Returns current client (Scheduler, SchedulerPro or Gantt)\n    get scheduler() {\n        return this.client || this.up(widget => widget.isTimelineBase) || Widget.query(widget => widget.isTimelineBase);\n    }\n\n    changeValue(value, oldValue) {\n        // Set up items before applying value, to prevent an empty store from being created and then replaced,\n        // which in turn leads to preset changing (caused by https://github.com/bryntum/support/issues/5732)\n        this.getConfig('presets');\n\n        return super.changeValue(value, oldValue);\n    }\n\n    // Creates a chained store of the clients presets store filtered and sorted by the presets config\n    updatePresets(presets) {\n        this.store = this.scheduler.presets.chain(r => presets.includes(r.id));\n        this.store.sort((a, b) => presets.indexOf(a.id) - presets.indexOf(b.id));\n    }\n\n    // When client preset is changed from somewhere else, zooming for example.\n    onClientPresetChange({ preset }) {\n        const me = this;\n        if (!me._isSelecting) {\n            me.isSettingValue = true;\n            // Select preset in combo if it exists\n            if (me.store.includes(preset.id)) {\n                me.value = preset;\n            }\n            // Clear combo otherwise\n            else {\n                me.clear();\n            }\n            me.isSettingValue = false;\n        }\n    }\n\n    onSelect({ record }) {\n        if (!this.isSettingValue) {\n            const\n                { scheduler }                    = this,\n                { mainUnit, start, defaultSpan } = record;\n\n            scheduler.suspendRefresh();\n            this._isSelecting = true;\n            scheduler.viewPreset = record;\n            this._isSelecting = false;\n\n            if (mainUnit && defaultSpan) {\n                let beginningOf = mainUnit;\n                if (start && typeof start === 'string') {\n                    beginningOf = DateHelper.parseTimeUnit(start) ?? start;\n                }\n                let startDate = DateHelper.startOf(scheduler.startDate, beginningOf);\n\n                if (record.start && typeof start === 'number') {\n                    startDate = DateHelper.add(startDate, start, mainUnit);\n                }\n\n                const endDate = DateHelper.add(startDate, defaultSpan, mainUnit);\n                scheduler.setTimeSpan(startDate, endDate);\n            }\n            if (scheduler.isVertical) {\n                scheduler.scrollTop = 0;\n            }\n            else {\n                scheduler.scrollLeft = 0;\n            }\n            scheduler.resumeRefresh(true);\n        }\n    }\n\n    // If underlying store localizes, we need to sync the input field value\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue();\n    }\n}\n\n// Register this widget type with its Factory\nViewPresetCombo.initClass();\n", "// Files are symlinked with \"grunt symlink\" task\n\nexport * from './entry.engine.js';\n\n//endregion\n\n// columns\nexport { default as DurationColumn } from '../lib/Scheduler/column/DurationColumn.js';\nexport { default as EventColorColumn } from '../lib/Scheduler/column/EventColorColumn.js';\nexport { default as ResourceCollapseColumn } from '../lib/Scheduler/column/ResourceCollapseColumn.js';\nexport { default as ResourceInfoColumn } from '../lib/Scheduler/column/ResourceInfoColumn.js';\nexport { default as ScaleColumn } from '../lib/Scheduler/column/ScaleColumn.js';\nexport { default as TimeAxisColumn } from '../lib/Scheduler/column/TimeAxisColumn.js';\nexport { default as VerticalTimeAxisColumn } from '../lib/Scheduler/column/VerticalTimeAxisColumn.js';\n\n// crud\nexport { default as AbstractCrudManager } from '../lib/Scheduler/crud/AbstractCrudManager.js';\nexport { default as AbstractCrudManagerMixin } from '../lib/Scheduler/crud/AbstractCrudManagerMixin.js';\nexport { default as AbstractCrudManagerValidation } from '../lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js';\nexport { default as AjaxTransport } from '../lib/Scheduler/crud/transport/AjaxTransport.js';\nexport { default as JsonEncoder } from '../lib/Scheduler/crud/encoder/JsonEncoder.js';\n\n// crud mixin\nexport { default as CrudManagerView } from '../lib/Scheduler/crud/mixin/CrudManagerView.js';\n\n// data\nexport { default as AssignmentStore } from '../lib/Scheduler/data/AssignmentStore.js';\nexport { default as CrudManager } from '../lib/Scheduler/data/CrudManager.js';\nexport { default as DependencyStore } from '../lib/Scheduler/data/DependencyStore.js';\nexport { default as EventStore } from '../lib/Scheduler/data/EventStore.js';\nexport { default as ResourceStore } from '../lib/Scheduler/data/ResourceStore.js';\nexport { default as ResourceTimeRangeStore } from '../lib/Scheduler/data/ResourceTimeRangeStore.js';\nexport { default as TimeAxis } from '../lib/Scheduler/data/TimeAxis.js';\n\n// data util\nexport { default as AbstractRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js';\nexport { default as DailyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js';\nexport { default as EventDayIndex } from '../lib/Scheduler/data/util/EventDayIndex.js';\nexport { default as MonthlyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js';\nexport { default as RecurrenceDayRuleEncoder } from '../lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js';\nexport { default as RecurrenceLegend } from '../lib/Scheduler/data/util/recurrence/RecurrenceLegend.js';\nexport { default as WeeklyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js';\nexport { default as YearlyRecurrenceIterator } from '../lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js';\n\n// data mixin\nexport { default as AssignmentStoreMixin } from '../lib/Scheduler/data/mixin/AssignmentStoreMixin.js';\nexport { default as AttachToProjectMixin } from '../lib/Scheduler/data/mixin/AttachToProjectMixin.js';\nexport { default as DependencyStoreMixin } from '../lib/Scheduler/data/mixin/DependencyStoreMixin.js';\nexport { default as EventStoreMixin } from '../lib/Scheduler/data/mixin/EventStoreMixin.js';\nexport { default as GetEventsMixin } from '../lib/Scheduler/data/mixin/GetEventsMixin.js';\nexport { default as PartOfBaseProject } from '../lib/Scheduler/data/mixin/PartOfBaseProject.js';\nexport { default as PartOfProject } from '../lib/Scheduler/data/mixin/PartOfProject.js';\nexport { default as ProjectConsumer } from '../lib/Scheduler/data/mixin/ProjectConsumer.js';\nexport { default as ProjectCrudManager } from '../lib/Scheduler/data/mixin/ProjectCrudManager.js';\nexport { default as RecurringEventsMixin } from '../lib/Scheduler/data/mixin/RecurringEventsMixin.js';\nexport { default as RecurringTimeSpansMixin } from '../lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js';\nexport { default as ResourceStoreMixin } from '../lib/Scheduler/data/mixin/ResourceStoreMixin.js';\n\n// eventlayout\nexport { default as HorizontalLayoutPack } from '../lib/Scheduler/eventlayout/HorizontalLayoutPack.js';\nexport { default as HorizontalLayoutStack } from '../lib/Scheduler/eventlayout/HorizontalLayoutStack.js';\nexport { default as PackMixin } from '../lib/Scheduler/eventlayout/PackMixin.js';\n\n// feature base\nexport { default as DragBase } from '../lib/Scheduler/feature/base/DragBase.js';\nexport { default as DragCreateBase } from '../lib/Scheduler/feature/base/DragCreateBase.js';\nexport { default as EditBase } from '../lib/Scheduler/feature/base/EditBase.js';\nexport { default as ResourceTimeRangesBase } from '../lib/Scheduler/feature/base/ResourceTimeRangesBase.js';\nexport { default as TimeSpanMenuBase } from '../lib/Scheduler/feature/base/TimeSpanMenuBase.js';\nexport { default as TooltipBase } from '../lib/Scheduler/feature/base/TooltipBase.js';\n\n// feature\nexport { default as AbstractTimeRanges } from '../lib/Scheduler/feature/AbstractTimeRanges.js';\nexport { default as ColumnLines } from '../lib/Scheduler/feature/ColumnLines.js';\nexport { default as Dependencies } from '../lib/Scheduler/feature/Dependencies.js';\nexport { default as DependencyEdit } from '../lib/Scheduler/feature/DependencyEdit.js';\nexport { default as EventCopyPaste } from '../lib/Scheduler/feature/EventCopyPaste.js';\nexport { default as EventDrag } from '../lib/Scheduler/feature/EventDrag.js';\nexport { default as EventDragCreate } from '../lib/Scheduler/feature/EventDragCreate.js';\nexport { default as EventDragSelect } from '../lib/Scheduler/feature/EventDragSelect.js';\nexport { default as EventEdit } from '../lib/Scheduler/feature/EventEdit.js';\nexport { default as EventFilter } from '../lib/Scheduler/feature/EventFilter.js';\nexport { default as EventMenu } from '../lib/Scheduler/feature/EventMenu.js';\nexport { default as EventNonWorkingTime } from '../lib/Scheduler/feature/EventNonWorkingTime.js';\nexport { default as EventResize } from '../lib/Scheduler/feature/EventResize.js';\nexport { default as EventTooltip } from '../lib/Scheduler/feature/EventTooltip.js';\nexport { default as GroupSummary } from '../lib/Scheduler/feature/GroupSummary.js';\nexport { default as HeaderZoom } from '../lib/Scheduler/feature/HeaderZoom.js';\nexport { default as Labels } from '../lib/Scheduler/feature/Labels.js';\nexport { default as NonWorkingTime } from '../lib/Scheduler/feature/NonWorkingTime.js';\nexport { default as Pan } from '../lib/Scheduler/feature/Pan.js';\nexport { default as ResourceMenu } from '../lib/Scheduler/feature/ResourceMenu.js';\nexport { default as ResourceTimeRanges } from '../lib/Scheduler/feature/ResourceTimeRanges.js';\nexport { default as RowReorder } from '../lib/Scheduler/feature/RowReorder.js';\nexport { default as ScheduleContext } from '../lib/Scheduler/feature/ScheduleContext.js';\nexport { default as ScheduleMenu } from '../lib/Scheduler/feature/ScheduleMenu.js';\nexport { default as ScheduleTooltip } from '../lib/Scheduler/feature/ScheduleTooltip.js';\nexport { default as SimpleEventEdit } from '../lib/Scheduler/feature/SimpleEventEdit.js';\nexport { default as Split } from '../lib/Scheduler/feature/Split.js';\nexport { default as StickyEvents } from '../lib/Scheduler/feature/StickyEvents.js';\nexport { default as Summary } from '../lib/Scheduler/feature/Summary.js';\nexport { default as TimeAxisHeaderMenu } from '../lib/Scheduler/feature/TimeAxisHeaderMenu.js';\nexport { default as TimelineSummary } from '../lib/Scheduler/feature/TimelineSummary.js';\nexport { default as TimeRanges } from '../lib/Scheduler/feature/TimeRanges.js';\nexport { default as TimeSelection } from '../lib/Scheduler/feature/TimeSelection.js';\n\n// feature mixin\nexport { default as DependencyCreation } from '../lib/Scheduler/feature/mixin/DependencyCreation.js';\nexport { default as DependencyTooltip } from '../lib/Scheduler/feature/mixin/DependencyTooltip.js';\nexport { default as NonWorkingTimeMixin } from '../lib/Scheduler/feature/mixin/NonWorkingTimeMixin.js';\nexport { default as RecurringEventEdit } from '../lib/Scheduler/feature/mixin/RecurringEventEdit.js';\nexport { default as TaskEditStm } from '../lib/Scheduler/feature/mixin/TaskEditStm.js';\nexport { default as TaskEditTransactional } from '../lib/Scheduler/feature/mixin/TaskEditTransactional.js';\nexport { default as TransactionalFeature } from '../lib/Scheduler/feature/mixin/TransactionalFeature.js';\n\n// export\nexport { default as MultiPageExporter } from '../lib/Scheduler/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Scheduler/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Scheduler/feature/export/PdfExport.js';\nexport { default as ScheduleRangeCombo } from '../lib/Scheduler/view/export/field/ScheduleRangeCombo.js';\nexport { default as SchedulerExportDialog } from '../lib/Scheduler/view/export/SchedulerExportDialog.js';\nexport { default as SinglePageExporter } from '../lib/Scheduler/feature/export/exporter/SinglePageExporter.js';\nexport { ScheduleRange } from '../lib/Scheduler/feature/export/Utils.js';\n\n// features experimental\nexport { default as ExcelExporter } from '../lib/Scheduler/feature/experimental/ExcelExporter.js';\n\n// model\nexport { default as AssignmentModel } from '../lib/Scheduler/model/AssignmentModel.js';\nexport { default as DependencyBaseModel } from '../lib/Scheduler/model/DependencyBaseModel.js';\nexport { default as DependencyModel } from '../lib/Scheduler/model/DependencyModel.js';\nexport { default as EventModel } from '../lib/Scheduler/model/EventModel.js';\nexport { default as ProjectModel } from '../lib/Scheduler/model/ProjectModel.js';\nexport { default as RecurrenceModel } from '../lib/Scheduler/model/RecurrenceModel.js';\nexport { default as ResourceModel } from '../lib/Scheduler/model/ResourceModel.js';\nexport { default as ResourceTimeRangeModel } from '../lib/Scheduler/model/ResourceTimeRangeModel.js';\nexport { default as TimeSpan } from '../lib/Scheduler/model/TimeSpan.js';\n\n// model mixin\nexport { default as AssignmentModelMixin } from '../lib/Scheduler/model/mixin/AssignmentModelMixin.js';\nexport { default as EventModelMixin } from '../lib/Scheduler/model/mixin/EventModelMixin.js';\nexport { default as ProjectModelCommon } from '../lib/Scheduler/model/mixin/ProjectModelCommon.js';\nexport { default as ProjectModelMixin } from '../lib/Scheduler/model/mixin/ProjectModelMixin.js';\nexport { default as ProjectModelTimeZoneMixin } from '../lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js';\nexport { default as RecurringTimeSpan } from '../lib/Scheduler/model/mixin/RecurringTimeSpan.js';\nexport { default as ResourceModelMixin } from '../lib/Scheduler/model/mixin/ResourceModelMixin.js';\nexport { default as TimeZonedDatesMixin } from '../lib/Scheduler/model/mixin/TimeZonedDatesMixin.js';\n\n// preset\nexport { default as PresetManager } from '../lib/Scheduler/preset/PresetManager.js';\nexport { default as PresetStore } from '../lib/Scheduler/preset/PresetStore.js';\nexport { default as ViewPreset } from '../lib/Scheduler/preset/ViewPreset.js';\n\n// tooltip\nexport { default as ClockTemplate } from '../lib/Scheduler/tooltip/ClockTemplate.js';\n\n// util\nexport { default as RectangularPathFinder } from '../lib/Scheduler/util/RectangularPathFinder.js';\nexport { default as ScheduleTableExporter } from '../lib/Scheduler/util/ScheduleTableExporter.js';\n\n//view\nexport { default as HorizontalTimeAxis } from '../lib/Scheduler/view/HorizontalTimeAxis.js';\nexport { default as TimeAxisSubGrid } from '../lib/Scheduler/view/TimeAxisSubGrid.js';\nexport { default as Scheduler } from '../lib/Scheduler/view/Scheduler.js';\nexport { default as SchedulerBase } from '../lib/Scheduler/view/SchedulerBase.js';\nexport { default as EventEditor } from '../lib/Scheduler/view/EventEditor.js';\nexport { default as TimeAxisViewModel } from '../lib/Scheduler/view/model/TimeAxisViewModel.js';\nexport { default as TimelineBase } from '../lib/Scheduler/view/TimelineBase.js';\nexport { default as ResourceHeader } from '../lib/Scheduler/view/ResourceHeader.js';\nexport { default as TimelineHistogramBase } from '../lib/Scheduler/view/TimelineHistogramBase.js';\nexport { default as TimelineHistogram } from '../lib/Scheduler/view/TimelineHistogram.js';\n\n//view mixin\nexport { default as DelayedRecordsRendering } from '../lib/Scheduler/view/mixin/DelayedRecordsRendering.js';\nexport { default as Describable } from '../lib/Scheduler/view/mixin/Describable.js';\nexport { default as EventNavigation } from '../lib/Scheduler/view/mixin/EventNavigation.js';\nexport { default as EventSelection } from '../lib/Scheduler/view/mixin/EventSelection.js';\nexport { default as RecurringEvents } from '../lib/Scheduler/view/mixin/RecurringEvents.js';\nexport { default as SchedulerDom } from '../lib/Scheduler/view/mixin/SchedulerDom.js';\nexport { default as SchedulerDomEvents } from '../lib/Scheduler/view/mixin/SchedulerDomEvents.js';\nexport { default as SchedulerEventRendering } from '../lib/Scheduler/view/mixin/SchedulerEventRendering.js';\nexport { default as SchedulerRegions } from '../lib/Scheduler/view/mixin/SchedulerRegions.js';\nexport { default as SchedulerResourceRendering } from '../lib/Scheduler/view/mixin/SchedulerResourceRendering.js';\nexport { default as SchedulerScroll } from '../lib/Scheduler/view/mixin/SchedulerScroll.js';\nexport { default as SchedulerState } from '../lib/Scheduler/view/mixin/SchedulerState.js';\nexport { default as SchedulerStores } from '../lib/Scheduler/view/mixin/SchedulerStores.js';\nexport { default as TimelineDateMapper } from '../lib/Scheduler/view/mixin/TimelineDateMapper.js';\nexport { default as TimelineDomEvents } from '../lib/Scheduler/view/mixin/TimelineDomEvents.js';\nexport { default as TimelineEventRendering } from '../lib/Scheduler/view/mixin/TimelineEventRendering.js';\nexport { default as TimelineHistogramGrouping } from '../lib/Scheduler/view/mixin/TimelineHistogramGrouping.js';\nexport { default as TimelineHistogramScaleColumn } from '../lib/Scheduler/view/mixin/TimelineHistogramScaleColumn.js';\nexport { default as TimelineScroll } from '../lib/Scheduler/view/mixin/TimelineScroll.js';\nexport { default as TimelineState } from '../lib/Scheduler/view/mixin/TimelineState.js';\nexport { default as TimelineViewPresets } from '../lib/Scheduler/view/mixin/TimelineViewPresets.js';\nexport { default as TimelineZoomable } from '../lib/Scheduler/view/mixin/TimelineZoomable.js';\nexport { default as TransactionalFeatureMixin } from '../lib/Scheduler/view/mixin/TransactionalFeatureMixin.js';\n\n// view orientation\nexport { default as HorizontalRendering } from '../lib/Scheduler/view/orientation/HorizontalRendering.js';\nexport { default as VerticalRendering } from '../lib/Scheduler/view/orientation/VerticalRendering.js';\n\n//view recurrence\nexport { default as RecurrenceCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceCombo.js';\nexport { default as RecurrenceConfirmationPopup } from '../lib/Scheduler/view/recurrence/RecurrenceConfirmationPopup.js';\nexport { default as RecurrenceDaysButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceDaysButtonGroup.js';\nexport { default as RecurrenceDaysCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceDaysCombo.js';\nexport { default as RecurrenceEditor } from '../lib/Scheduler/view/recurrence/RecurrenceEditor.js';\nexport { default as RecurrenceEditorPanel } from '../lib/Scheduler/view/recurrence/RecurrenceEditorPanel.js';\nexport { default as RecurrenceFrequencyCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceFrequencyCombo.js';\nexport { default as RecurrenceLegendButton } from '../lib/Scheduler/view/recurrence/RecurrenceLegendButton.js';\nexport { default as RecurrenceMonthDaysButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceMonthDaysButtonGroup.js';\nexport { default as RecurrenceMonthsButtonGroup } from '../lib/Scheduler/view/recurrence/field/RecurrenceMonthsButtonGroup.js';\nexport { default as RecurrencePositionsCombo } from '../lib/Scheduler/view/recurrence/field/RecurrencePositionsCombo.js';\nexport { default as RecurrenceStopConditionCombo } from '../lib/Scheduler/view/recurrence/field/RecurrenceStopConditionCombo.js';\n\n// widget\nexport { default as EventColorPicker } from '../lib/Scheduler/widget/EventColorPicker.js';\nexport { default as EventColorField } from '../lib/Scheduler/widget/EventColorField.js';\nexport { default as ProjectCombo } from '../lib/Scheduler/widget/ProjectCombo.js';\nexport { default as ResourceCombo } from '../lib/Scheduler/widget/ResourceCombo.js';\nexport { default as ResourceFilter } from '../lib/Scheduler/widget/ResourceFilter.js';\nexport { default as SchedulerDatePicker } from '../lib/Scheduler/widget/SchedulerDatePicker.js';\nexport { default as UndoRedo } from '../lib/Scheduler/widget/UndoRedo.js';\nexport { default as ViewPresetCombo } from '../lib/Scheduler/widget/ViewPresetCombo.js';\n"],
  "mappings": "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",
  "names": ["PartOfBaseProject", "Target", "$name", "assignmentStore", "project", "calendarManagerStore", "dependencyStore", "eventStore", "resourceStore", "EventColorColumn", "ColorColumn", "__publicField", "type", "defaults", "colorEditorType", "field", "ColumnStore", "registerColumnType", "_$name", "ResourceCollapseColumn", "Column", "width", "align", "sortable", "groupable", "editor", "minWidth", "cellCls", "renderer", "record", "tag", "class", "eventLayout", "onCellClick", "event", "preventDefault", "EventDragSelect", "Delayable", "InstancePlugin", "targetSelector", "construct", "client", "config", "multiEventSelect", "onElementMouseDown", "me", "foregroundCanvas", "target", "button", "touches", "clientX", "clientY", "canvasRect", "Rectangle", "from", "disabled", "matches", "trigger", "preventDragSelect", "startX", "x", "startY", "y", "element", "DomHelper", "createElement", "className", "parent", "retainElement", "style", "transform", "classList", "add", "ctrlKey", "metaKey", "clearEventSelection", "originalSelection", "selectedAssignments", "slice", "subGridElementRect", "timeAxisSubGridElement", "navigator", "enableScrollingCloseToEdges", "timeAxisSubGrid", "mouseUpDetacher", "EventHelper", "on", "document", "mouseup", "thisObj", "eventRectangles", "Array", "children", "filter", "node", "eventSelector", "map", "el", "resolveAssignmentRecord", "rectangle", "selected", "includes", "onElementMouseMove", "Math", "min", "max", "height", "rect", "setTranslateXY", "updateSelection", "onDocumentMouseUp", "_me$element", "disableScrollingCloseToEdges", "remove", "skipNextClick", "contains", "length", "_navigator$activeItem", "skipScrollIntoView", "activeAssignment", "activeItem", "focus", "selectionRect", "selection", "reduce", "r", "a", "getElementFromAssignmentRecord", "push", "assignmentData", "intersect", "pluginConfig", "chain", "GridFeatureManager", "registerFeature", "EventNonWorkingTime", "mixin", "AttachToProjectMixin", "NonWorkingTimeMixin", "properties", "calendarRangeCache", "Map", "doDisable", "disable", "refresh", "attachToCalendarManagerStore", "store", "ion", "name", "change", "isScheduler", "effectiveCalendar", "intervals", "setupDefaultCalendar", "onCalendarChange", "clear", "onTimeAxisViewModelUpdate", "getRangeDomConfig", "timeRange", "minDate", "maxDate", "relativeTo", "rtl", "startPos", "getCoordinateFromDate", "DateHelper", "startDate", "endPos", "endDate", "size", "abs", "isRange", "translateX", "cls", "dataset", "id", "elementData", "isVertical", "getCalendarTimeRanges", "calendar", "cached", "get", "set", "onEventDataGenerated", "eventRecord", "endMS", "startMS", "start", "end", "left", "top", "enabled", "effectiveCalendarsCombination", "startDateMS", "endDateMS", "domConfig", "eventStoreRefreshActions", "update", "assignmentStoreRefreshActions", "removeAll", "GroupSummary", "GridGroupSummary", "defaultConfig", "showTooltip", "summaries", "footersToUpdate", "Set", "scheduler", "Error", "isSchedulerBase", "changePreCommit", "onEventStoreChange", "onAssignmentStoreChange", "timeAxisViewModelUpdate", "onTimeAxisChange", "dataReady", "onProjectDataReady", "doDestroy", "_this$_tip", "_tip", "destroy", "rowManager", "forEach", "row", "isGroupFooter", "render", "action", "records", "changes", "resources", "afterChange", "_changes$resourceId", "assignment", "resource", "resourceId", "oldValue", "oldResource", "getById", "affectedResources", "resourceRecord", "getRowFor", "isGroupHeader", "getRow", "index", "isVisible", "footer", "_footer$render", "call", "whenVisible", "onBeforeRenderRow", "meta", "hasOwnProperty", "timeaxisCell", "elements", "normal", "querySelector", "innerHTML", "arguments", "generateHtml", "column", "groupRecord", "groupField", "groupValue", "colCfg", "timeAxisViewModel", "columnConfig", "html", "eventsByTick", "getResourcesEventsPerTick", "some", "isFiltered", "timeAxis", "tick", "idx", "groupEvents", "sumHtml", "events", "join", "updateSummaryHtml", "cellElement", "count", "result", "getTipHtml", "activeTarget", "parentElement", "indexOf", "getAt", "tipHtml", "L", "getFormattedDate", "showTip", "forEachSelector", "i", "label", "_labels", "text", "innerText", "trim", "_me$summaries", "Tooltip", "hoverDelay", "hideDelay", "forElement", "anchorToTarget", "forSelector", "getHtml", "bind", "removeSummaryElements", "rowEl", "summaryElement", "hasSummary", "isTimeAxisColumn", "HeaderZoom", "closest", "headerEl", "subGrids", "header", "headersElement", "headerElementRect", "once", "scrollLeft", "setTranslateX", "onMouseUp", "getDateFromCoordinate", "right", "zoomToSpan", "Pan", "enableInHeader", "dragFeature", "features", "taskDrag", "eventDrag", "enablePanOnEvents", "readOnly", "mouseX", "mouseY", "onHeader", "mouseDetacher", "mousemove", "onMouseMove", "xScroller", "scrollable", "yScroller", "vertical", "scrollBy", "horizontal", "isHorizontal", "isActive", "Boolean", "configurable", "ResourceMenu", "ContextMenuBase", "getDataFromEvent", "populateResourceMenu", "items", "localeClass", "icon", "weight", "onItem", "showMenu", "processItems", "featureClass", "ResourceTimeRanges", "ResourceTimeRangesBase", "assign", "attachToProject", "resourceTimeRangeStore", "ResourceTimeRangeStore", "owner", "crudManager", "exposedOnScheduler", "resourceTimeRanges", "Object", "defineProperty", "data", "detachListeners", "onStoreChange", "attachToResourceTimeRangeStore", "getEventsToRender", "timeRanges", "$original", "isRecurring", "getOccurrencesForDateRange", "shouldInclude", "isResourceTimeRange", "isNonWorking", "isCalendarHighlightModel", "_this$store", "rangeCls", "enableMouseEvents", "tabIndex", "entityName", "SimpleEventEdit", "TaskEditStm", "triggerEvent", "editorConfig", "eventEdit", "clientListenersDetacher", "eventElement", "editEvent", "dragcreateend", "onDragCreateEnd", "_this$editor", "stmCapture", "isCreating", "down", "eventInnerSelector", "isAssignment", "Editor", "new", "appendTo", "scrollAction", "maxHeight", "internalListeners", "complete", "cancel", "onInternalKeyDown", "keyEvent", "stopPropagation", "relayEvents", "stmInitiallyAutoRecord", "stmInitiallyDisabled", "hasStmCapture", "transferred", "captureStm", "startEdit", "visibleDateRange", "scrollIntoView", "onEditorComplete", "reset", "freeStm", "onEditorCancel", "onEventEnterKey", "assignmentRecord", "getElementFromEventRecord", "startScrollOptions", "freeze", "animate", "block", "endScrollOptions", "Split", "GridSplit", "getClientConfig", "order", "options", "_clientConfig$feature", "clientConfig", "isSchedulerProBase", "isGanttBase", "assignments", "dependencies", "viewPreset", "selectedCollection", "useInitialAnimation", "ObjectHelper", "setPath", "constrainDragToTimeline", "unsplitCleanup", "onElementResize", "processOptions", "atDate", "atRecord", "direction", "atColumn", "bounds", "date", "center", "timeAxisColumn", "splitX", "ignoreRTL", "_bodyRectangle", "scrollBarWidth", "bodyContainer", "remainingWidth", "split", "Promise", "all", "scrollToDate", "unit", "populateCellMenu", "populateScheduleMenu", "isSplit", "splitFrom", "splitSchedule", "separator", "hidden", "menu", "splitHorizontally", "then", "splitVertically", "splitBoth", "unsplitSchedule", "unsplit", "relayProperties", "value", "barMargin", "eventColor", "eventStyle", "fillTicks", "resourceMargin", "snap", "tickSize", "$config", "merge", "Summary", "TimelineSummary", "verticalSummaryColumnConfig", "resizable", "hideFooters", "createSubGrid", "summaryColumn", "columns", "filterable", "region", "htmlEncode", "cellMenuItems", "enableHeaderContextMenu", "updateEventStore", "updateResourceStore", "updateTimelineSummaries", "timeline", "summaryContainer", "summaryBarElement", "forResources", "selectedOnly", "selectedRecords", "isEngineReady", "valueHtml", "_tipHtml", "TimeSelection", "AbstractTimeRanges", "enableResizing", "dragTipTemplate", "dragHelperConfig", "skipUpdatingElement", "resizeHelperConfig", "headerRenderer", "dateFormat", "bottomHeader", "format", "selectedTimeSpan", "onUIReady", "timeAxisHeaderMouseDown", "onTimeAxisHeaderMouseDown", "onTimeRangeClick", "domEvent", "updateFromCoords", "totalSize", "getDateFromCoord", "coord", "roundingMethod", "onResizeStart", "source", "timeResolution", "resolutionDurationMS", "asMilliseconds", "increment", "resize", "getDistanceForDuration", "onResizeDrag", "context", "newX", "newY", "newWidth", "elementWidth", "newHeight", "elementHeight", "onDragStart", "offsetWidth", "offsetHeight", "onDrag", "onDrop", "onDragReset", "shouldRenderRange", "changeSelectedTimeSpan", "timeSpan", "updateSelectedTimeSpan", "isConfiguring", "ScheduleTableExporter", "Localizable", "GridTableExporter", "includeUnassigned", "eventColumns", "eventSortFn", "args", "b", "internalId", "normalizeColumns", "col", "generateExportData", "SchedulerBase", "resourceColumns", "generateColumns", "generateEventColumns", "concat", "rows", "generateRows", "processEventColumn", "defaultColumnWidth", "eventColumn", "getColumnType", "sort", "getRowData", "notAssignedEvents", "query", "cells", "fill", "resourceCells", "processRecord", "isSpecialRow", "eventCells", "ExcelExporter", "GridExcelExporter", "exporterClass", "exporterConfig", "Scheduler", "initClass", "isProjectConsumer", "w", "UndoRedo", "UndoRedoBase", "stm", "up", "changeScheduler", "updateScheduler", "projectChange", "setupLoadListener", "onLoad", "load", "commitAsync", "isDestroyed", "enable", "fillUndoRedoCombo", "onProjectChanged", "updateProject", "ViewPresetCombo", "Combo", "presetchange", "onClientPresetChange", "widget", "isTimelineBase", "Widget", "changeValue", "getConfig", "updatePresets", "presets", "preset", "_isSelecting", "isSettingValue", "onSelect", "mainUnit", "defaultSpan", "suspendRefresh", "beginningOf", "parseTimeUnit", "startOf", "setTimeSpan", "scrollTop", "resumeRefresh", "updateLocalization", "syncInputFieldValue", "editable", "valueField", "displayField", "placeholder", "HOSTS", "EXPIRING_CLASSES", "VersionHelper", "isTestEnv", "host", "location", "test", "href", "initialized", "initExpiryHelper", "baseClass", "ExpiryHelper", "__foo", "product", "productName", "version", "getVersion", "callHomeDelay", "blockUrl", "BrowserHelper", "queryString", "Product", "verifyUrl", "blocked", "lastVersionCheck", "trialKey", "versionCheckKey", "console", "log", "cacheTrialStartTime", "isExpired", "readyState", "onTrialExpired", "addEventListener", "setTimeout", "updateBlockedStatus", "timeString", "getLocalStorageItem", "time", "Number", "isNaN", "trialStartTime", "Date", "now", "setLocalStorageItem", "_window$bryntum", "_window$bryntum$this$", "ONE_DAY", "window", "bryntum", "expired", "saveVersionCheckKey", "url", "encodeURIComponent", "logUrl", "license", "img", "Image", "onload", "naturalWidth", "blockTrial", "onerror", "src", "rootEl", "rootElement", "expirationShown", "warn", "floatRoot", "Toast", "show", "timeout", "removeEachSelector", "fromElement", "maskExpiredWidget", "removeLocalStorageItem", "mask", "cover", "setWaterMark", "darkColor", "lightColor", "_DomHelper$themeInfo", "_DomHelper$themeInfo$", "thumb", "color", "themeInfo", "toLowerCase", "endsWith", "svgString", "backgroundImage", "btoa", "Override", "apply", "onPaintOverride", "setWatermarks", "targets", "values", "GlobalEvents", "Dependencies", "domSync", "_overridden", "HorizontalRendering", "onRenderDone", "_this$scheduler", "isSchedulerPro", "VerticalRendering", "_this$scheduler2", "ignoreDomainRe", "websiteUrls", "products", "frameworks", "splice", "prod", "framework", "flat", "match", "newScript", "dataLayer", "gtag", "head", "appendChild"]
}
