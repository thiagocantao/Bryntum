{
  "version": 3,
  "sources": ["../../../SchedulerPro/lib/SchedulerPro/column/ResourceCalendarColumn.js", "../../../SchedulerPro/lib/SchedulerPro/model/EventModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/EventStore.js", "../../../SchedulerPro/lib/SchedulerPro/model/ResourceUtilizationModel.js", "../../../SchedulerPro/lib/SchedulerPro/data/ResourceUtilizationStore.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayout.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js", "../../../SchedulerPro/lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js", "../../../SchedulerPro/lib/SchedulerPro/feature/CalendarHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/feature/DependencyEdit.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventBuffer.js", "../../../SchedulerPro/lib/SchedulerPro/feature/EventSegmentDrag.js", "../../../SchedulerPro/lib/SchedulerPro/feature/NestedEvents.js", "../../../SchedulerPro/lib/SchedulerPro/feature/ResourceNonWorkingTime.js", "../../../SchedulerPro/lib/SchedulerPro/feature/TimeSpanHighlight.js", "../../../SchedulerPro/lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js", "../../../SchedulerPro/lib/SchedulerPro/model/ProjectModel.js", "../../../SchedulerPro/lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceHistogram.js", "../../../SchedulerPro/lib/SchedulerPro/view/ResourceUtilization.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProHorizontalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/orientation/ProVerticalRendering.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerProBase.js", "../../../SchedulerPro/lib/SchedulerPro/view/SchedulerPro.js", "../../../SchedulerPro/lib/SchedulerPro/widget/Timeline.js", "../../../SchedulerPro/lib/SchedulerPro/widget/VersionGrid.js", "../../../SchedulerPro/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport CalendarField from '../widget/CalendarField.js';\n\n/**\n * @module SchedulerPro/column/ResourceCalendarColumn\n */\n\n/**\n * A column that displays (and allows user to update) the current {@link SchedulerPro.model.CalendarModel calendar} of\n * the resource.\n *\n * Default editor is a {@link SchedulerPro.widget.CalendarField CalendarField}.\n *\n * {@inlineexample SchedulerPro/column/ResourceCalendarColumn.js}\n * @mixes Scheduler/data/mixin/AttachToProjectMixin\n * @extends Grid/column/Column\n * @classType resourceCalendar\n * @column\n */\nexport default class ResourceCalendarColumn extends Column.mixin(AttachToProjectMixin) {\n\n    //region Config\n\n    static get $name() {\n        return 'ResourceCalendarColumn';\n    }\n\n    static get type() {\n        return 'resourceCalendar';\n    }\n\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'Calendar',\n            editor : {\n                type         : CalendarField.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    attachToProject(project) {\n        if (project) {\n            // Store default calendar to filter out this value\n            this.defaultCalendar = project.defaultCalendar;\n\n            this.editor.store = project.calendarManagerStore;\n        }\n    }\n\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n\n        if (resourceStore) {\n            resourceStore.ion({\n                name    : 'resourceStore',\n                update  : 'onResourceUpdate',\n                thisObj : this\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    // Event rendering does not update cells when engine updates a resource, instead we do a minimal update here\n    onResourceUpdate({ record, changes }) {\n        const change = changes[this.field];\n\n        if (change) {\n            // Ignore \"normalization\" of id -> instance, won't affect our appearance\n            if (typeof change.oldValue === 'string' && change.value?.id === change.oldValue) {\n                return;\n            }\n            this.refreshCell(record);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderer({ value }) {\n        if (value?.id) {\n            const record = this.editor.store.getById(value.id);\n            return record?.getValue(this.editor.displayField) || '';\n        }\n        else {\n            return '';\n        }\n    }\n\n    //endregion\n\n}\n\nColumnStore.registerColumnType(ResourceCalendarColumn);\n", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\nimport { SchedulerProEvent } from '../../Engine/quark/model/scheduler_pro/SchedulerProEvent.js';\nimport Duration from '../../Core/data/Duration.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport RecurringTimeSpan from '../../Scheduler/model/mixin/RecurringTimeSpan.js';\nimport EventSegmentModel from './EventSegmentModel.js';\n\n/**\n * @module SchedulerPro/model/EventModel\n */\n\n/**\n * This class represent a single event in your schedule, usually added to a {@link SchedulerPro.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an `EventModel` is normally part of an `EventStore`, which in turn is part of a project. When\n * dates or the duration of an event is changed, the project performs async calculations to normalize the other fields.\n * For example if `duration` is change, it will calculate `endDate`.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for\n * the existing fields, you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure\n * them as seen below:\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource 'taskStart' },\n *            { name: 'endDate', dataSource 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource 'userId' },\n *            { name: 'name', dataSource 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @typings Scheduler.model.EventModel -> Scheduler.model.SchedulerEventModel\n */\nexport default class EventModel extends SchedulerProEvent.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin,\n    PercentDoneMixin\n) {\n\n    /**\n     * Returns the event store this event is part of.\n     *\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @readonly\n     * @typings Scheduler.model.TimeSpan:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n\n    /**\n     * If given resource is assigned to this event, returns a {@link SchedulerPro.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @returns {SchedulerPro.model.AssignmentModel|null}\n     */\n\n    /**\n     * This method assigns a resource to this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n\n    /**\n     * This method unassigns a resource from this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the event calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The event calendar.\n     */\n\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {String} [unit] New duration unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the constraint type and (optionally) constraining date to the event.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link #field-constraintType} for the valid\n     * values.\n     * @param {Date} [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the {@link #field-effort} (and optionally {@link #field-effortUnit unit}) of the event.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the event not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Splits the event into segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this event at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Merges the event segments.\n     * The method merges two provided event segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Sets the event {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the event. If `false` the event performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n\n    //region Config\n\n    static get $name() {\n        return 'EventModel';\n    }\n\n    static isProEventModel = true;\n\n    static get fields() {\n        return [\n            /**\n             * This field is automatically set to `true` when the event is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such event is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the event back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n              * @readonly\n              * @category Scheduling\n             */\n\n            /**\n             * Segments of the event that appear when the event gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n\n            /**\n             * Field storing the event constraint alias or NULL if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n\n            /**\n             * Field defining the constraint boundary date, if applicable.\n             * @field {Date} constraintDate\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies\n             * or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked events and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the event.\n             *\n             * By default the field value is `false` resulting in that the event performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early start date_ of the event.\n             * The _early start date_ is the earliest possible date the event can start.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early start date matches the project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early end date_ of the event.\n             * The _early end date_ is the earliest possible date the event can finish.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n             *\n             * All entities are by default assigned to the project calendar, provided as the {@link SchedulerPro.model.ProjectModel#field-calendar} option.\n             *\n             * @field {SchedulerPro.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the event effort (the number of units).\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n\n            /**\n             * The unit part of the event effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             * @readonly\n             */\n\n            /**\n             * This field defines the event scheduling mode. Based on this field some fields of the event\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on\n             * information about its start/end dates, event own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. When duration of such event increases,\n             * its effort is increased too. The mode tends to preserve user provided duration so changing effort\n             * results adjusting assignment units and vise-versa assignment changes adjusts effort.\n             *\n             * @field {'Normal'|'FixedDuration'} schedulingMode\n             * @category Scheduling\n             */\n\n            /**\n             * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling\n             * mode.\n             * If it is `true`, then {@link #field-effort} is kept intact when new duration is provided and\n             * assignment {@link SchedulerPro.model.AssignmentModel#field-units} is updated.\n             * If it is `false`, then assignment {@link SchedulerPro.model.AssignmentModel#field-units} is kept\n             * intact when new duration is provided and {@link #field-effort} is updated.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n\n            /**\n             * The event effective calendar. Returns the\n             * {@link SchedulerPro.model.ProjectModel#field-calendar project calendar} if the event has no own\n             * {@link #field-calendar} provided.\n             * @member {SchedulerPro.model.CalendarModel} effectiveCalendar\n             */\n\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Common\n             */\n            { name : 'showInTimeline', type : 'boolean', defaultValue : false },\n\n            /**\n             * Note about the event\n             * @field {String} note\n             * @category Common\n             */\n            'note',\n\n            /**\n             * Buffer time before event start. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 30 minutes buffer time before the event start\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {Core.data.Duration} preamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'preamble',\n                convert : value => value ? new Duration(value) : null\n            },\n            /**\n             * Buffer time after event end. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 1 hour buffer time after the event end\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {String} postamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'postamble',\n                convert : value => value ? new Duration(value) : null\n            }\n        ];\n    }\n\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n\n    //endregion\n\n    //region EventBuffer\n\n    updateWrapDate(date, duration, forward = true) {\n        duration = new Duration(duration);\n\n        return new Date(date.getTime() + (forward ? 1 : -1) * duration.milliseconds);\n    }\n\n    get startDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n\n        return dt;\n    }\n\n    set startDate(startDate) {\n        const me = this;\n\n        // Update children when parents startDate changes (ignoring initial data set)\n        // <remove-on-release>\n        // TODO: Handle in engine? Arcady is informed\n        // </remove-on-release>\n        if (me.generation && me.isParent && !me.$ignoreChange) {\n            const timeDiff = DateHelper.diff(me.startDate, startDate);\n\n            if (timeDiff) {\n                // Move all children same amount\n                for (const child of this.children) {\n                    child.startDate = DateHelper.add(child.startDate, timeDiff);\n                }\n            }\n        }\n\n        if (me.batching) {\n            me._startDate = startDate;\n            me.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n\n            if (me.preamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n\n    get endDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n\n        return dt;\n    }\n\n    set endDate(endDate) {\n        const me = this;\n\n        if (me.batching) {\n            me._endDate = endDate;\n            me.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n\n            if (me.postamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        const\n            me                      = this,\n            { preamble, startDate } = me,\n            wrapStartDate           = me._wrapStartDate;\n\n        let result;\n\n        if (wrapStartDate) {\n            result = wrapStartDate;\n        }\n        else {\n            if (preamble) {\n                result = me.updateWrapDate(startDate, preamble, false);\n                me._wrapStartDate = result;\n            }\n            else {\n                result = startDate;\n            }\n        }\n\n        return result;\n    }\n\n    set wrapStartDate(value) {\n        this._wrapStartDate = value;\n    }\n\n    get wrapEndDate() {\n        const\n            me                     = this,\n            { postamble, endDate } = me,\n            wrapEndDate            = me._wrapEndDate;\n\n        let result;\n\n        if (wrapEndDate) {\n            result = wrapEndDate;\n        }\n        else {\n            if (postamble) {\n                result = me.updateWrapDate(endDate, postamble, true);\n                me._wrapEndDate = result;\n            }\n            else {\n                result = endDate;\n            }\n        }\n\n        return result;\n    }\n\n    set wrapEndDate(value) {\n        this._wrapEndDate = value;\n    }\n\n    set(data) {\n        const isObject = typeof data === 'object';\n        if (data === 'preamble' || (isObject && 'preamble' in data)) {\n            this.wrapStartDate = null;\n        }\n        if (data === 'postamble' || (isObject && 'postamble' in data)) {\n            this.wrapEndDate = null;\n        }\n        return super.set(...arguments);\n    }\n\n    /**\n     * Returns event start date adjusted by {@link #field-preamble} (start date - duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerStartDate() {\n        return this.wrapStartDate;\n    }\n\n    /**\n     * Returns event end date adjusted by {@link #field-postamble} (end date + duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerEndDate() {\n        return this.wrapEndDate;\n    }\n\n    //endregion\n\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate} as not editable;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary events except the {@link #field-manuallyScheduled manually scheduled} ones;\n     * - {@link #field-percentDone} as not editable for summary events.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n                return false;\n\n            // disable percentDone editing for summary tasks\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n\n        return super.isEditable(fieldName);\n    }\n\n    // Occurrences are not part of the project, when requesting their stm we retrieve it from the master event instead\n    get stm() {\n        return this.recurringEvent?.stm ?? super.stm;\n    }\n\n    set stm(stm) {\n        super.stm = stm;\n    }\n\n    //region Early render\n\n    get assigned() {\n        const\n            { project }  = this,\n            assigned     = super.assigned;\n\n        // Figure assigned events out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation && !assigned) {\n            return project.assignmentStore.storage.findItem('event', this);\n        }\n\n        return assigned;\n    }\n\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n\n    //endregion\n\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n\n        return result;\n    }\n\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js';\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js';\nimport EventStoreMixin from '../../Scheduler/data/mixin/EventStoreMixin.js';\nimport RecurringEventsMixin from '../../Scheduler/data/mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n\n/**\n * @module SchedulerPro/data/EventStore\n */\n\n/**\n * A store holding all the {@link SchedulerPro.model.EventModel events} to be rendered into a {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler.data.EventStore -> Scheduler.data.SchedulerEventStore\n */\nexport default class EventStore extends PartOfProject(RecurringEventsMixin(GetEventsMixin(DayIndexMixin(EventStoreMixin(ChronoEventStoreMixin.derive(AjaxStore)))))) {\n\n    static $name = 'EventStore';\n\n    static get defaultConfig() {\n        return {\n            modelClass : EventModel\n        };\n    }\n\n    //endregion\n\n}\n", "import Model from '../../Core/data/Model.js';\n\n/**\n * @module SchedulerPro/model/ResourceUtilizationModel\n */\n\n/**\n * A model representing a {@link SchedulerPro/view/ResourceUtilization} view row.\n * The view rows are of two possible types __resources__ and __assignments__.\n * The model wraps either a resource or an assignment model. And each wrapped resource keeps its corresponding\n * wrapped assignments as its __children__.\n *\n * **NOTE:** You don't normally need to construct this class instances. The view does that automatically\n * by processing the project resources and assignments, wrapping them with this model instances and\n * putting them to its {@link SchedulerPro/view/ResourceUtilization#property-store}.\n *\n * The wrapped model is provided to {@link #config-origin} config and can be retrieved from it:\n *\n * ```javascript\n * // get the real resource representing the first row of the view\n * resourceUtilizationView.store.first.origin\n * ```\n *\n * @extends Core/data/Model\n */\n\nexport default class ResourceUtilizationModel extends Model {\n\n    static $name = 'ResourceUtilizationModel';\n\n    static fields = [\n        /**\n         * Name of the represented resource or the assigned event.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-name}.\n         * @field {String} name\n         * @category Common\n         */\n        'name',\n        /**\n         * Icon for the corresponding row.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-iconCls}.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        'iconCls'\n    ];\n\n    /**\n     * A resource or an assignment wrapped by this model.\n     *\n     * ```javascript\n     * // get the real resource representing the first row of the view\n     * resourceUtilizationView.store.first.origin\n     * ```\n     * @config {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel} origin\n     */\n\n    construct(data, ...args) {\n        this._childrenIndex = new Map();\n\n        // copy some field values from origin to this model\n        if (data.origin) {\n            Object.assign(data, this.mapOriginValues(data.origin));\n        }\n\n        super.construct(data, ...args);\n\n        if (this.origin && !this.generatedParent) {\n            this.fillChildren();\n        }\n    }\n\n    mapOriginValues(origin) {\n        const result = {};\n\n        if (origin.isResourceModel) {\n            result.name = origin.name;\n        }\n        else if (origin.isAssignmentModel) {\n            result.name    = origin.event?.name;\n            result.iconCls = origin.event?.iconCls;\n        }\n\n        return result;\n    }\n\n    fillChildren() {\n        const\n            me           = this,\n            { children } = me,\n            toRemove     = new Set(children),\n            toAdd        = [];\n\n        if (me.origin?.isResourceModel) {\n            const { assigned } = me.origin;\n\n            for (const assignment of assigned) {\n                if (!me._childrenIndex.has(assignment)) {\n                    toAdd.push(me.constructor.new({ origin : assignment }));\n                }\n                else {\n                    toRemove.delete(me._childrenIndex.get(assignment));\n                }\n            }\n        }\n\n        if (toRemove.size) {\n            this.removeChild([...toRemove]);\n        }\n\n        if (toAdd.length) {\n            this.appendChild(toAdd);\n        }\n    }\n\n    afterRemoveChild(records) {\n        records.forEach(record => this._childrenIndex.delete(record.origin));\n    }\n\n    insertChild(...args) {\n        let added = super.insertChild(...args);\n\n        if (added) {\n            const { stores } = this;\n\n            if (!Array.isArray(added)) {\n                added = [added];\n            }\n\n            if (this.origin?.isResourceModel) {\n                for (const record of added) {\n                    if (record.origin && !this._childrenIndex.has(record.origin)) {\n                        this._childrenIndex.set(record.origin, record);\n                    }\n                }\n            }\n\n            // if the model is already in a store\n            // fill the store real_model -> wrapper_model map\n            if (stores?.length) {\n                for (const store of stores) {\n                    for (const record of added) {\n                        record.traverse(node => node.origin && store.setModelByOrigin(node.origin, node));\n                    }\n                }\n            }\n        }\n\n        return added;\n    }\n\n    getChildByOrigin(origin) {\n        return this._childrenIndex.get(origin);\n    }\n}\n\n// convert empty parents to leaves to allow them to be handled by TreeGroup feature\nResourceUtilizationModel.convertEmptyParentToLeaf = true;\n\nResourceUtilizationModel.exposeProperties();\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceUtilizationModel from '../model/ResourceUtilizationModel.js';\nimport { AbstractPartOfProjectStoreMixin } from '../../Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js';\n\n/**\n * @module SchedulerPro/data/ResourceUtilizationStore\n */\n\n/**\n * A store representing {@link SchedulerPro/view/ResourceUtilization} view records.\n * This store accepts a model class inheriting from {@link SchedulerPro/model/ResourceUtilizationModel}.\n *\n * The store is a tree of nodes representing resources on the root level with\n * sub-nodes representing corresponding resource assignments.\n * The store tracks changes made in the {@link #config-project} stores and rebuilds its content automatically.\n * Thus the project config is mandatory and has to be provided.\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceUtilizationStore extends AbstractPartOfProjectStoreMixin.derive(AjaxStore) {\n\n    static $name = 'ResourceUtilizationStore';\n\n    static configurable = {\n        modelClass : ResourceUtilizationModel,\n\n        /**\n         * Project instance to retrieve resources and assignments data from.\n         * @config {SchedulerPro.model.ProjectModel} project\n         */\n        project : null,\n\n        tree : true\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            _modelByOrigin : new Map()\n        };\n    }\n\n    updateProject(project) {\n        this.setResourceStore(project?.resourceStore);\n        this.setAssignmentStore(project?.assignmentStore);\n        this.setEventStore(project?.eventStore);\n\n        this.fillStoreFromProject();\n    }\n\n    setResourceStore(store) {\n        this.detachListeners('resourceStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'resourceStore',\n            change  : this.onResourceStoreDataChanged,\n            thisObj : this\n        });\n    }\n\n    setEventStore(store) {\n        this.detachListeners('eventStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'eventStore',\n            update  : this.onEventUpdate,\n            thisObj : this\n        });\n    }\n\n    setAssignmentStore(store) {\n        this.detachListeners('assignmentStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'assignmentStore',\n            change  : this.onAssignmentsChange,\n            refresh : this.onAssignmentsRefresh,\n            add     : this.onAssignmentsAdd,\n            update  : this.onAssignmentUpdate,\n            remove  : this.onAssignmentsRemove,\n            thisObj : this\n        });\n    }\n\n    onResourceStoreDataChanged(event) {\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (event.isMove && event.action === 'remove') {\n            return;\n        }\n\n        this.fillStoreFromProject();\n    }\n\n    onAssignmentsChange() {\n        this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n    }\n\n    onAssignmentsRefresh(event) {\n        if (event.action === 'batch') {\n            this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n        }\n    }\n\n    onAssignmentsAdd({ records }) {\n        records.forEach(record => {\n            const resourceWrapper = this.getModelByOrigin(record?.resource);\n\n            resourceWrapper?.fillChildren();\n        });\n    }\n\n    onAssignmentUpdate({ record, changes }) {\n        // if assignment moved to another resource\n        if ('resource' in changes) {\n            const\n                // get assignment wrapper record\n                assignmentWrapper = this.getModelByOrigin(record),\n                // get new resource wrapper record\n                newResourceWrapper = this.getModelByOrigin(record?.resource);\n\n            // move assignment wrapper to new resource wrapper\n            if (assignmentWrapper && newResourceWrapper) {\n                newResourceWrapper.appendChild(assignmentWrapper);\n            }\n        }\n    }\n\n    onAssignmentsRemove({ records }) {\n        this.remove(records.map(record => this.getModelByOrigin(record)));\n    }\n\n    onEventUpdate({ record, changes }) {\n        if ('name' in changes) {\n            for (const assignment of record.assigned) {\n                const assignmentWrapper = this.getModelByOrigin(assignment);\n\n                assignmentWrapper.set('name', record.name);\n            }\n        }\n    }\n\n    fillStoreFromProject() {\n        const toAdd = [];\n\n        this._project?.resourceStore.forEach(resource => {\n            if (!resource.isSpecialRow) {\n                toAdd.push(this.modelClass.new({ origin : resource }));\n            }\n        });\n\n        this.removeAll();\n        this.add(toAdd);\n\n        /**\n         * Fires when store completes synchronization with original (Event/Resource/Assignment) stores\n         * @event fillFromProject\n         * @internal\n         */\n        this.trigger('fillFromProject');\n    }\n\n    remove() {\n        const removed = super.remove(...arguments);\n\n        // sanitize internal origin->wrapper Map\n        removed?.forEach(record => {\n            this._modelByOrigin.delete(record.origin);\n        });\n\n        return removed;\n    }\n\n    removeAll() {\n        super.removeAll(...arguments);\n\n        this._modelByOrigin.clear();\n    }\n\n    getModelByOrigin(origin) {\n        return this._modelByOrigin.get(origin);\n    }\n\n    setModelByOrigin(origin, model) {\n        return this._modelByOrigin.set(origin, model);\n    }\n}\n", "import Base from '../../Core/Base.js';\n\nconst sortFn = (a, b) => {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n};\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayout\n */\n\n/**\n * Mixin for SchedulerPro horizontal layouts ({@link SchedulerPro.eventlayout.ProHorizontalLayoutPack} and\n * {@link SchedulerPro.eventlayout.ProHorizontalLayoutStack}). Should not be used directly, instead specify\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in the SchedulerPro config (`stack`, `pack`\n * or `none`):\n *\n * ```javascript\n * new SchedulerPro({\n *   eventLayout: 'stack'\n * });\n * ```\n *\n * ## Grouping events\n *\n * By default events are not grouped and are laid out inside the row using start and end dates. Using\n * {@link #config-groupBy} config you can group events inside the resource row. Every group will be laid out on its own\n * band, as if layout was applied to each group of events separately.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout.js}\n *\n * ### By field value\n *\n * You can specify field name to group events by. The following snippet would put *high* prio events at the top:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : 'prio'\n *     },\n *     project : {\n *         eventsData : [\n *             { id : 1, startDate : '2017-02-08', duration : 1, prio : 'low' },\n *             { id : 2, startDate : '2017-02-09', duration : 1, prio : 'high' },\n *             { id : 3, startDate : '2017-02-10', duration : 1, prio : 'high' },\n *         ],\n *         resourcesData : [\n *             { id : 1, name : 'Resource 1' }\n *         ],\n *         assignmentsData : [\n *             { id : 1, resource : 1, event : 1 },\n *             { id : 2, resource : 1, event : 2 },\n *             { id : 3, resource : 1, event : 3 }\n *         ]\n *     }\n * })\n * ```\n *\n * ### Order of groups\n *\n * Groups are **always** sorted ascending. In the example above *high* prio events are above *low* prio events because:\n *\n * ```javascript\n * 'high' < 'low' // true\n * ```\n *\n * If you want to group events in a specific order, you can define it in a\n * special {@link #config-weights} config:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         weights : {\n *             low  : 100,\n *             high : 200\n *         },\n *         groupBy : 'prio'\n *     }\n * });\n * ```\n *\n * This will put *low* prio events at the top.\n *\n * The weight value defaults to `Infinity` unless specified in the weights config explicitly.\n *\n * ### Using a function\n *\n * You can use a custom function to group events. The group function receives an event record as a single argument and\n * is expected to return a non-null value for the group. This allows you to arrange events in any order you like,\n * including grouping by multiple properties at once.\n *\n * The snippet below groups events by duration and priority by creating 4 weights:\n *\n * |       | high prio | low prio |\n * |-------|-----------|----------|\n * | long  |     2     |    10    |\n * | short |     3     |    15    |\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : event => {\n *             return (event.duration > 2 ? 2 : 3) * (event.prio === 'high' ? 1 : 5);\n *         }\n *     }\n * })\n * ```\n *\n * This will divide events into 4 groups as seen in this demo:\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout2.js}\n *\n * ## Manual event layout\n *\n * You can provide a custom function to layout events inside the row and set the row size as required using\n * {@link #config-layoutFn}. The function is called with an array of {@link EventRenderData render data} objects. The\n * custom function can iterate over those objects and position them inside the row using `top` and `height` attributes.\n * The function should return the total row height in pixels.\n *\n * Please note that using a custom layout function makes {@link SchedulerPro.view.SchedulerPro#config-rowHeight}\n * obsolete.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayoutFn.js}\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         layoutFn : items => {\n *             // Put event element at random top position\n *             item.top = 100 * Math.random();\n *         }\n *     }\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class ProHorizontalLayout extends (Target || Base) {\n    static get configurable() {\n        return {\n            /**\n             * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.\n             * @config {'stack'|'pack'|'none'}\n             */\n            type : null,\n\n            /**\n             * The weights config allows you to specify order of the event groups inside the row. Higher weights are\n             * placed further down in the row. If field value is not specified in the weights object, it will be\n             * assigned `Infinity` value and pushed to the bottom.\n             *\n             * Only applicable when {@link #config-groupBy} config is not a function:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top, then medium,\n             *             // then low prio events.\n             *             high   : 100,\n             *             medium : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * Only explicitly defined groups are put in separate bands inside the row:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         // Pack layout is also supported\n             *         type : 'pack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top. All other\n             *             // events will be put to the same group at the bottom\n             *             high : 100\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             * @config {Object<String,Number>}\n             */\n            weights : null,\n\n            /**\n             * Specifies a way to group events inside the row. Can accept either a model field name or a function which\n             * is provided with event record as a single argument and is expected to return group for the event.\n             *\n             * @config {String|Function}\n             */\n            groupBy        : null,\n            groupByThisObj : null,\n\n            /**\n             * Supply a function to manually layout events. It accepts event layout data and should set `top`\n             * and `height` for every provided data item (left and width are calculated according to the event start\n             * date and duration). The function should return the total row height in pixels.\n             *\n             * For example, we can arrange events randomly in the row:\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             return 50;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * If you need a reference to the scheduler pro instance, you can get that from the function scope (arrow\n             * function doesn't work here):\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn(items) {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             // note `scheduler`, not `schedulerPro`\n             *             return this.scheduler.rowHeight;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @config {Function}\n             * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n             * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n             * @returns {Number} Returns total row height\n             */\n            layoutFn : null\n        };\n    }\n\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method applyLayout\n     * @param {EventRenderData[]} events\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Number}\n     */\n\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method layoutEventsInBands\n     * @param {EventRenderData[]} events\n     */\n\n    /**\n     * Returns `true` if event {@link #config-groupBy grouper} is defined.\n     * @type {Boolean}\n     * @readonly\n     */\n    get grouped() {\n        return Boolean(this.groupBy);\n    }\n\n    /**\n     * Returns group for the passed event render data.\n     * @param {EventRenderData} layoutData\n     * @returns {*}\n     */\n    getGroupValue(layoutData) {\n        let result;\n\n        if (layoutData.group != null) {\n            result = layoutData.group;\n        }\n        else {\n            const\n                { groupBy, weights, groupByThisObj = this } = this,\n                { eventRecord }                             = layoutData;\n\n            if (typeof groupBy === 'function') {\n                result = groupBy.call(groupByThisObj, eventRecord);\n            }\n            else {\n                result = eventRecord.getValue(groupBy);\n\n                if (weights) {\n                    // If record value is null or undefined, use infinite weight to move record to the bottom\n                    result = weights[result] ?? Infinity;\n                }\n            }\n\n            layoutData.group = result;\n        }\n\n        return result;\n    }\n\n    /**\n     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.\n     * @param {EventRenderData[]} events\n     * @returns {String[]}\n     */\n    getEventGroups(events) {\n        // If group fn is defined, we need to sort events array according to groups\n        if (this.grouped) {\n            const groups = new Set();\n\n            events.sort((a, b) => {\n                const\n                    aValue = this.getGroupValue(a),\n                    bValue = this.getGroupValue(b);\n\n                groups.add(aValue);\n                groups.add(bValue);\n\n                return sortFn(aValue, bValue);\n            });\n\n            return Array.from(groups).sort(sortFn);\n        }\n        else {\n            return [];\n        }\n    }\n};\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutStack from '../../Scheduler/eventlayout/HorizontalLayoutStack.js';\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutStack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutStack extends HorizontalLayoutStack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutStack';\n    }\n\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, heightRun = false) {\n        this.getEventGroups(events);\n\n        return super.layoutEventsInBands(events, heightRun);\n    }\n}\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutPack from '../../Scheduler/eventlayout/HorizontalLayoutPack.js';\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutPack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutPack extends HorizontalLayoutPack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutPack';\n    }\n\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n\n    layoutEventsInBands(events) {\n        const\n            groups = this.getEventGroups(events),\n            // If we don't have any groups, treat it like we have a single group including all events\n            groupCount = groups.length || 1;\n\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            const\n                size              = slotSize / groupCount,\n                groupIndex        = groupCount === 1 ? 0 : groups.indexOf(event.group),\n                adjustedSlotStart = groupIndex / groupCount;\n\n            // This height and top are used to position event in the grouped row\n            event.height = size;\n            event.top    = adjustedSlotStart + slot.start / groupCount + j * size;\n\n            // This height and top are used to layout events in the same band. They emulate a single row which is what\n            // pack logic expects\n            event.inBandHeight = slotSize;\n            event.inBandTop = slot.start + j * slotSize;\n        });\n\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n\n        return result;\n    }\n}\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\n\n/**\n * @module SchedulerPro/feature/CalendarHighlight\n */\n\nlet counter = 0;\n\nclass CalendarHighlightModel extends ResourceTimeRangeModel {\n    static get $name() {\n        return 'CalendarHighlightModel';\n    }\n\n    static domIdPrefix = 'calendarhighlight';\n\n    // For nicer DOM, since the records are transient we do not need a fancy UUID\n    static generateId() {\n        return ++counter;\n    }\n}\n\n/**\n * This feature temporarily visualizes {@link SchedulerPro/model/CalendarModel calendars} for the event or resource\n * calendar (controlled by the {@link #config-calendar} config). The calendars are highlighted while a user is creating,\n * dragging or resizing a task. Enabling this feature makes it easier for the end user to understand the underlying\n * rules of the schedule.\n *\n * {@inlineexample SchedulerPro/feature/CalendarHighlight.js}\n *\n * ## Example usage\n *\n * ```javascript\n * new SchedulerPro({\n *     features : {\n *         calendarHighlight : {\n *             // visualize resource calendars while interacting with events\n *             calendar : 'resource'\n *         }\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @classtype calendarHighlight\n * @feature\n * @demo SchedulerPro/highlight-event-calendars\n */\nexport default class CalendarHighlight extends ResourceTimeRangesBase {\n\n    //region Config\n\n    static get $name() {\n        return 'CalendarHighlight';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             * @default\n             */\n            calendar : 'event',\n\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             */\n            unhighlightOnDrop : null,\n\n            /**\n             * A callback function which is called when you interact with one or more events (e.g. drag drop) to\n             * highlight only available resources.\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     features : {\n             *         calendarHighlight : {\n             *             collectAvailableResources({ scheduler, eventRecords }) {\n             *                  const mainEvent = eventRecords[0];\n             *                  return scheduler.resourceStore.query(resource => resource.role === mainEvent.requiredRole || !mainEvent.requiredRole);\n             *              }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context A context object\n             * @param {SchedulerPro.view.SchedulerPro} context.scheduler The scheduler instance\n             * @param {Scheduler.model.EventModel[]} context.eventRecords The event records\n             * @returns {Scheduler.model.ResourceModel[]} An array with the available resource records\n             * @config {Function}\n             */\n            collectAvailableResources : null,\n\n            rangeCls                    : 'b-sch-highlighted-calendar-range',\n            resourceTimeRangeModelClass : CalendarHighlightModel,\n            inflate                     : 3\n        };\n    }\n\n    static get pluginConfig() {\n        const config  = super.pluginConfig;\n\n        config.assign = [\n            'highlightEventCalendars',\n            'highlightResourceCalendars',\n            'unhighlightCalendars'\n        ];\n\n        return config;\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.client.ion({\n            eventDragStart   : 'onEventDragStart',\n            eventDragReset   : 'unhighlightCalendars',\n            eventResizeStart : 'onEventResizeStart',\n            eventResizeEnd   : 'unhighlightCalendars',\n            dragCreateStart  : 'onDragCreateStart',\n            afterDragCreate  : 'unhighlightCalendars',\n            thisObj          : this\n        });\n    }\n\n    //endregion\n\n    highlightCalendar(eventRecords, resourceRecords) {\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n\n        if (this.calendar === 'event') {\n            this.highlightEventCalendars(eventRecords, resourceRecords);\n        }\n        else {\n            this.highlightResourceCalendars(resourceRecords);\n        }\n    }\n\n    // region public APIs\n    /**\n     * Highlights the time spans representing the calendars of the passed event records, and resource records.\n     * @on-owner\n     * @param {Scheduler.model.EventModel[]} eventRecords The event records\n     * @param {Scheduler.model.ResourceModel[]} [resourceRecords] The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightEventCalendars(eventRecords, resourceRecords, clearExisting = true) {\n        const\n            me                     = this,\n            { client }             = me,\n            { startDate, endDate } = client;\n\n        if (me.disabled) {\n            return;\n        }\n\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n\n        eventRecords = ArrayHelper.asArray(eventRecords);\n\n        if (!resourceRecords) {\n            resourceRecords = eventRecords.flatMap(event => event.$linkedResources);\n        }\n\n        me.highlight = new Map();\n\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n\n        eventRecords.forEach(eventRecord => {\n            if (!eventRecord.calendar) {\n                return;\n            }\n\n            const timespans = eventRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n\n            if (timespans) {\n                for (const resourceRecord of resourceRecords) {\n                    me.highlight.set(resourceRecord, timespans);\n                    client.currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n                }\n                if (resourceRecords.length > 0) {\n                    client.currentOrientation.onRenderDone();\n                }\n            }\n        });\n\n        client.syncSplits?.(split => split.highlightEventCalendars(eventRecords, resourceRecords, clearExisting));\n    }\n\n    /**\n     * Highlights the time spans representing the working time calendars of the passed resource records.\n     * @on-owner\n     * @param {Scheduler.model.ResourceModel[]} resourceRecords The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightResourceCalendars(resourceRecords, clearExisting = true) {\n        const\n            me                                         = this,\n            { startDate, endDate, currentOrientation } = me.client;\n\n        if (me.disabled) {\n            return;\n        }\n\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n\n        // Highlight resource calendars\n        me.highlight = new Map();\n\n        for (const resourceRecord of resourceRecords) {\n            const timespans = resourceRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n\n            if (timespans) {\n                me.highlight.set(resourceRecord, timespans);\n                currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n            }\n        }\n        if (resourceRecords.length > 0) {\n            currentOrientation.onRenderDone();\n        }\n\n        me.client.syncSplits?.(split => split.highlightResourceCalendars(resourceRecords, clearExisting));\n    }\n\n    /**\n     * Removes all highlight elements.\n     * @on-owner\n     */\n    unhighlightCalendars() {\n        const me = this;\n\n        if (!me.highlight) {\n            // We're not highlighting anything, bail out\n            return;\n        }\n\n        const\n            { currentOrientation } = me.client,\n            resources              = me.highlight.keys();\n\n        me.highlight = null;\n\n        for (const resource of resources) {\n            currentOrientation.refreshEventsForResource(resource, true, false);\n        }\n\n        currentOrientation.onRenderDone();\n\n        me.client.syncSplits?.(split => split.unhighlightCalendars());\n    }\n\n    // endregion\n\n    // region event listeners\n    onEventDragStart({ context }) {\n        if (this.disabled) {\n            return;\n        }\n\n        const\n            me               = this,\n            { client }       = me,\n            { eventRecords } = context,\n            resourceRecords  = context.availableResources =\n                client.features.eventDrag.constrainDragToResource\n                    ? [context.resourceRecord]\n                    : me.collectAvailableResources?.({\n                        scheduler : client,\n                        eventRecords\n                    }) ?? client.resourceStore.records;\n\n        me.highlightCalendar(eventRecords, resourceRecords);\n    }\n\n    onEventResizeStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n\n    onDragCreateStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n\n    // endregion\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const timespans = this.highlight?.get(resource);\n\n        timespans && events.push(...timespans);\n\n        return events;\n    }\n\n    onEventDataGenerated(renderData) {\n        const { eventRecord } = renderData;\n\n        if (eventRecord.isCalendarHighlightModel) {\n            const { inflate } = this;\n\n            // Flag that we should fill entire row/col\n            renderData.fillSize = this.client.isVertical;\n            // Add our own cls\n            renderData.wrapperCls['b-sch-highlighted-calendar-range'] = 1;\n            // Add label\n            renderData.children.push({\n                className : 'b-sch-event-content',\n                html      : eventRecord.name,\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            });\n\n            // Inflate\n            renderData.width += inflate * 2;\n            renderData.height += inflate * 2;\n            renderData.left -= inflate;\n            renderData.top -= inflate;\n\n            // Event data for DOMSync comparison, unique per calendar & resource combination\n            renderData.eventId = `${this.generateElementId(eventRecord)}-resource-${renderData.resourceRecord.id}`;\n        }\n    }\n\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n\n        if (disabled) {\n            this.unhighlightCalendars();\n        }\n    }\n\n    shouldInclude(eventRecord) {\n        return eventRecord.isCalendarHighlightModel;\n    }\n\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\n\nGridFeatureManager.registerFeature(CalendarHighlight, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerDependencyEdit from '../../Scheduler/feature/DependencyEdit.js';\nimport '../../Core/widget/Checkbox.js';\nimport TransactionalFeature from '../../Scheduler/feature/mixin/TransactionalFeature.js';\n\n/**\n * @module SchedulerPro/feature/DependencyEdit\n */\n\n/**\n * Feature that displays a popup containing fields for editing dependency data.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/DependencyEdit\n * @inlineexample SchedulerPro/feature/DependencyEdit.js\n * @demo SchedulerPro/dependencies/\n * @classtype dependencyEdit\n * @feature\n *\n * @typings Scheduler.feature.DependencyEdit -> Scheduler.feature.SchedulerDependencyEdit\n */\nexport default class DependencyEdit extends TransactionalFeature(SchedulerDependencyEdit) {\n    //region Config\n\n    static get $name() {\n        return 'DependencyEdit';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : true,\n\n            editorConfig : {\n                items : {\n                    activeField : {\n                        type  : 'checkbox',\n                        name  : 'active',\n                        label : 'L{Active}'\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n\n    async editDependency(record) {\n        if (await super.editDependency(record)) {\n            await this.startFeatureTransaction();\n        }\n    }\n\n    afterSave() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterSave();\n        });\n    }\n\n    afterDelete() {\n        this.finishFeatureTransaction().then(() => {\n            super.afterDelete();\n        });\n    }\n\n    afterCancel() {\n        this.rejectFeatureTransaction();\n        super.afterCancel();\n    }\n}\n\nGridFeatureManager.registerFeature(DependencyEdit, false);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module SchedulerPro/feature/EventBuffer\n */\n\n/**\n * Feature that allows showing additional time before & after an event, to visualize things like travel time - or the time you\n * need to prepare a room for a meeting + clean it up after.\n *\n * The feature relies on two model fields: {@link SchedulerPro.model.EventModel#field-preamble} and\n * {@link SchedulerPro.model.EventModel#field-postamble} which are used to calculate overall start and end dates used to\n * position the event. Buffer time overlaps the same way events overlap (as you can see in the inline demo below). It\n * should also be noted that buffer time is ignored for milestones.\n *\n * {@inlineexample SchedulerPro/feature/EventBuffer.js}\n *\n * This feature is **disabled** by default\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype eventBuffer\n * @feature\n * @demo SchedulerPro/travel-time\n */\nexport default class EventBuffer extends InstancePlugin {\n    static get $name() {\n        return 'EventBuffer';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Show buffer duration labels\n             * @config {Boolean}\n             * @default\n             */\n            showDuration : true,\n\n            /**\n             * A function which receives data about the buffer time and returns a html string to show in a tooltip when\n             * hovering a buffer time element\n             * @param {Object} data Data\n             * @param {Core.data.Duration} data.duration Buffer time duration\n             * @param {Boolean} data.before `true` if this is a buffer time before the event start, `false` if after\n             * @param {SchedulerPro.model.EventModel} data.eventRecord The event record\n             * @config {Function}\n             */\n            tooltipTemplate : {\n                value   : null,\n                $config : 'nullify'\n            }\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n\n    //region Chained methods\n\n    updateTooltipTemplate(tooltipTemplate) {\n        const me = this;\n\n        if (tooltipTemplate) {\n            me.tooltip = Tooltip.new({\n                forElement  : me.client.timeAxisSubGridElement,\n                forSelector : '.b-sch-event-buffer-before,.b-sch-event-buffer-after',\n                align       : {\n                    align  : 'b-t',\n                    offset : [0, 10]\n                },\n                getHtml({ activeTarget }) {\n                    const\n                        eventRecord = me.client.resolveEventRecord(activeTarget),\n                        before      = activeTarget.matches('.b-sch-event-buffer-before'),\n                        duration    = before ? eventRecord.preamble : eventRecord.postamble;\n\n                    return me.tooltipTemplate({ eventRecord, duration, before });\n                }\n            });\n        }\n        else {\n            me.tooltip?.destroy();\n        }\n    }\n\n    onEventDataGenerated({ useEventBuffer, bufferBeforeWidth, bufferAfterWidth, eventRecord, wrapperChildren }) {\n        if (this.enabled && useEventBuffer) {\n            const\n                { isHorizontal }        = this.client,\n                { showDuration }        = this,\n                { preamble, postamble } = eventRecord,\n                sizeProp                = isHorizontal ? 'width' : 'height';\n\n            // Buffer elements should always be there, otherwise animation might get wrong\n            wrapperChildren.push(\n                {\n                    className : {\n                        'b-sch-event-buffer'        : 1,\n                        'b-sch-event-buffer-before' : 1,\n                        'b-buffer-thin'             : !bufferBeforeWidth\n                    },\n                    style    : `${sizeProp}: ${bufferBeforeWidth}px`,\n                    children : (showDuration && preamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            html      : preamble.toString(true)\n                        }\n                    ] : undefined\n                },\n                {\n                    className : {\n                        'b-sch-event-buffer'       : 1,\n                        'b-sch-event-buffer-after' : 1,\n                        'b-buffer-thin'            : !bufferAfterWidth\n                    },\n                    style    : `${sizeProp}: ${bufferAfterWidth}px`,\n                    children : (showDuration && postamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            html      : postamble.toString(true)\n                        }\n                    ] : undefined\n                }\n            );\n        }\n    }\n\n    //endregion\n\n    updateShowDuration() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (!client.isConfiguring && client.isPainted) {\n            // Add a special CSS class to disable certain transitions\n            client.element.classList.add('b-eventbuffer-transition');\n\n            client.refreshWithTransition();\n\n            client.waitForAnimations().then(() => {\n                client.element.classList.remove('b-eventbuffer-transition');\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(EventBuffer, false, 'SchedulerPro');\n", "import EventDrag from '../../Scheduler/feature/EventDrag.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module SchedulerPro/feature/EventSegmentDrag\n */\n\n/**\n * Allows user to drag and drop event segments within the row.\n *\n * {@inlineexample SchedulerPro/feature/EventSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/EventDrag\n * @classtype eventSegmentDrag\n * @feature\n */\nexport default class EventSegmentDrag extends EventDrag {\n    //region Config\n\n    static $name = 'EventSegmentDrag';\n\n    static get defaultConfig() {\n        return {\n            constrainDragToResource : true\n        };\n    }\n\n    static get configurable() {\n        return {\n            capitalizedEventName : 'EventSegment'\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onPaint', 'isEventElementDraggable']\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting\n     * `context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventSegmentDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event segment is dropped\n     * @event afterEventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     * @param {Boolean} valid\n     * @param {Object} context\n     */\n\n    /**\n     * Fired on the owning Scheduler when an event segment is dropped\n     * @event eventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     */\n\n    /**\n     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.\n     * @event beforeEventSegmentDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Segments to drag\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event segment dragging starts\n     * @event eventSegmentDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event segments are dragged\n     * @event eventSegmentDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation has been aborted\n     * @event eventSegmentDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled\n     * or not\n     * @event eventSegmentDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n\n    //region Drag events\n\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent: event } = dragData;\n\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event\n        };\n    }\n\n    triggerEventDrag(dragData, start) {\n        this.scheduler.trigger('eventSegmentDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate : dragData.startDate,\n            endDate   : dragData.endDate\n        }));\n    }\n\n    triggerDragStart(dragData) {\n        this.scheduler.navigator.skipNextClick = true;\n\n        this.scheduler.trigger('eventSegmentDragStart', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbort(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbort', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        this.scheduler.trigger('afterEventSegmentDrop', Object.assign(this.getTriggerParams(dragData), {\n            valid\n        }));\n\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = this.client,\n                needRefresh                     = this.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== this.dragData.assignmentRecords[i]?.resourceId;\n                });\n\n            if (needRefresh) {\n                this.client.refresh();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Update records\n\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     * @async\n     */\n    async updateRecords(context) {\n        const\n            me             = this,\n            { client }     = me,\n            copyKeyPressed = false;\n\n        let result;\n\n        if (!context.externalDropTarget) {\n            client.eventStore.suspendAutoCommit();\n\n            result = await me.updateSegment(client, context, copyKeyPressed);\n\n            client.eventStore.resumeAutoCommit();\n        }\n\n        // Tell the world there was a successful drop\n        client.trigger('eventSegmentDrop', Object.assign(me.getTriggerParams(context), {\n            isCopy               : copyKeyPressed,\n            event                : context.browserEvent,\n            targetEventRecord    : context.targetEventRecord,\n            targetResourceRecord : context.newResource,\n            externalDropTarget   : context.externalDropTarget\n        }));\n\n        return result;\n    }\n\n    /**\n     * Update assignments being dragged\n     * @private\n     * @async\n     */\n    async updateSegment(client, context) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            isVertical          = client.mode === 'vertical',\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff\n            }                   = context;\n\n        client.suspendRefresh();\n\n        let updated = false;\n\n        if (isVertical) {\n            // <remove-on-release>\n            // TODO: Broken after merge, figure it out\n            // </remove-on-release>\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n\n                delete draggedEvent.instanceMeta(client).hasTemporaryDragElement;\n\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n\n        const\n            eventBarEls  = context.eventBarEls.slice(),\n            draggedEvent = context.eventRecord,\n            newStartDate = me.adjustStartDate(context.origStart, timeDiff);\n\n        if (!DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n\n            client.endListeningForBatchedUpdates();\n\n            me.cancelBatchUpdate(draggedEvent);\n\n            draggedEvent.startDate = newStartDate;\n\n            updated = true;\n\n            await client.project.commitAsync();\n\n            me.endBatchUpdate?.(draggedEvent);\n        }\n\n        client.resumeRefresh();\n\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // https://github.com/bryntum/support/issues/630\n                // Force re-render when using fillTicks. If date changed within same tick the element won't actually\n                // change and since we hijacked it for drag it won't be returned to its original position\n                if (client.fillTicks) {\n                    eventBarEls.forEach(el => delete el.lastDomConfig);\n                }\n\n                // Not doing full refresh above, to allow for animations\n                client.refreshWithTransition();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Drag data\n\n    // Prevent event draggind when it starts over a resize handle\n    isEventElementDraggable(eventElement, eventRecord, el, event) {\n        const me = this;\n\n        // ALLOW event drag:\n        // - if segments dragging is disabled or event is not segmented\n        if (me.disabled || !(eventRecord.isEventSegment || eventRecord.segments)) {\n            return true;\n        }\n\n        // otherwise make sure EventDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n\n        return config;\n    }\n\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { client }        = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = client.resolveEventRecord(element),\n            resourceRecord    = client.resolveResourceRecord(element),\n            assignmentRecord  = client.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [],\n            eventRecords      = [eventRecord];\n\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n\n    beginBatchUpdate(eventRecord) {\n        eventRecord.event.beginBatch();\n        eventRecord.beginBatch();\n    }\n\n    endBatchUpdate(eventRecord) {\n        // could be no \"event\" if segments got merged after dragging\n        eventRecord.event?.endBatch();\n        eventRecord.endBatch();\n    }\n\n    cancelBatchUpdate(eventRecord) {\n        eventRecord.event?.cancelBatch();\n        eventRecord.cancelBatch();\n    }\n\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { client }    = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [],\n            mainEventElement = client.getElementsFromEventRecord(eventRecord.event, resourceRecord, true)[0];\n\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n\n        // We tweak last segment drag in RTL mode so its X-ccordinate is always zero\n        // so we have to tell DragHelper to still process corresponding drop event though\n        // the coordinate hasn't changed\n        me.drag.ignoreSamePositionDrop = !client.rtl || eventRecord.nextSegment;\n\n        // During this batch we want the client's UI to update itself using the proposed changes\n        // Only if startDrag has not already done it\n        if (!client.listenToBatchedUpdates) {\n            client.beginListeningForBatchedUpdates();\n        }\n\n        // Do changes in batch mode while dragging\n        me.beginBatchUpdate(eventRecord);\n\n        const\n            dateConstraints    = me.getDateConstraints?.(resourceRecord, eventRecord),\n            constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n            eventRegion        = Rectangle.from(element, client.foregroundCanvas, true),\n            mainEventRegion    = Rectangle.from(mainEventElement, client.foregroundCanvas, true);\n\n        // For segment we shift constrainRectangle by the main event offset\n        constrainRectangle.translate(-mainEventRegion.x);\n\n        super.setupConstraints(\n            constrainRectangle,\n            eventRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints.start)\n        );\n\n        eventBarEls.push(element);\n\n        return {\n            record          : eventRecord,\n            draggedEntities : [eventRecord],\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            eventBarEls,\n            mainEventElement\n        };\n    }\n\n    suspendRecordElementRedrawing() {}\n\n    suspendElementRedrawing() {}\n\n    getDateConstraints(resourceRecord, eventRecord) {\n        let { minDate, maxDate } = super.getDateConstraints(resourceRecord, eventRecord);\n\n        // A segment movement is constrained by its neighbour segments if any\n        if (eventRecord.previousSegment && (!minDate || minDate < eventRecord.previousSegment.endDate)) {\n            minDate = eventRecord.previousSegment.endDate;\n        }\n\n        if (eventRecord.nextSegment && (!maxDate || maxDate < eventRecord.nextSegment.startDate)) {\n            maxDate = eventRecord.nextSegment.startDate;\n        }\n\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n\n    get tipId() {\n        return `${this.client.id}-segment-drag-tip`;\n    }\n\n    internalSnapToPosition(snapTo) {\n        super.internalSnapToPosition();\n\n        // for RTL we pin last segment to 0px offset ..the main event element will get updated\n        if (this.client.rtl && !this.dragData.eventRecord.nextSegment) {\n            snapTo.x = 0;\n        }\n    }\n\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n\n        const\n            { client } = this,\n            {\n                dirty,\n                eventRecord,\n                endDate\n            } = this.dragData;\n\n        // If dragging the last segment update the main event width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !eventRecord.nextSegment) {\n\n            const { enableEventAnimations } = client;\n\n            client.enableEventAnimations = false;\n\n            eventRecord.event.set('endDate', endDate);\n\n            if (client.features.eventBuffer?.enabled) {\n                eventRecord.event.wrapEndDate = endDate;\n            }\n\n            client.enableEventAnimations = enableEventAnimations;\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(EventSegmentDrag, true, 'SchedulerPro');\nGridFeatureManager.registerFeature(EventSegmentDrag, false, 'ResourceHistogram');\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module SchedulerPro/feature/NestedEvents\n */\n\nconst borderWidths     = {\n    border : 1,\n    hollow : 2\n};\n\n// Future improvements might include:\n// * Add info to EventTooltip, parent could display number of children, child could display parent name\n// * Add parent picker to EventEdit\n// * Handle reassigning in editor, what happens if you reassign to a resource that events parent is not assigned to...\n\n// <remove-on-release>\n// TODO: Fix dependencies between parents - needs arcady\n// </remove-on-release>\n\n/**\n * A feature that renders child events nested inside their parent. Requires Scheduler Pro to use a tree event store\n * (normally handled automatically when events in data has children).\n *\n * {@inlineexample SchedulerPro/feature/NestedEvents.js}\n *\n * The feature has configs for {@link #config-eventLayout}, {@link #config-resourceMargin} and {@link #config-barMargin}\n * that are separate from those on Scheduler Pro and only affect nested events.\n *\n * You can by default drag nested events out of their parents and drop any event onto root level events to nest. The\n * drag and drop behaviour can be customized using the {@link #config-constrainDragToParent},\n * {@link #config-allowNestingOnDrop} and {@link #config-allowDeNestingOnDrop} configs.\n *\n * <div class=\"note\">Note that for a nested event to show up for a resource both the parent and the nested event has to\n * be assigned to that resource.</div>\n *\n * ## Parent / children scheduling\n *\n * Scheduler Pro uses a scheduling engine closely related to the one used by Gantt (a subset of it). It for example\n * schedules based on calendars, dependencies and constraints. Part of its default logic is that parent events start and\n * end dates (and thus duration) is defined by their children. This means that if you remove the latest scheduled child\n * of a parent, the parents end date and duration will be adjusted to match the new latest scheduled child.\n *\n * Depending on what you plan to use nested events for in your application, this might not be the desired behaviour. If\n * you want the parent element to keep its dates regardless of its children, you should flag it as\n * {@link SchedulerPro/model/EventModel#field-manuallyScheduled}.\n *\n * A parent defined like this will shrink / grow with its children:\n *\n * ```json\n * {\n *     \"id\"        : 1,\n *     \"startDate\" : \"2022-03-24\",\n *     \"children\"  : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try removing an event here to see what happens:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsNotManually.js}\n *\n * A parent with `manuallyScheduled : true` will **not** shrink / grow with is children:\n *\n * ```json\n * {\n *     \"id\"                : 1,\n *     \"startDate\"         : \"2022-03-24\",\n *     \"duration\"          : 10,\n *     \"manuallyScheduled\" : true\n *     \"children\"          : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try the same thing here:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsManually.js}\n *\n * <div class=\"note\">Note that this also makes resizing a parent event that is not manually scheduled useless, it would\n * only snap back to the dates defined by its children. To avoid confusion, resizing is therefor turned off for parent\n * events unless they have `manuallyScheduled: true`</div>\n *\n * ## Drag and drop for parent events\n *\n * Normally the dates of a parent event is defined by its children (as described above), with exception for when drag\n * dropping a parent event along the time axis. In this case the operation will update the dates of all the children,\n * which will thus also move the parent event in time.\n *\n * If a parent event is dragged to a new resource, all its children will also be assigned to that resource.\n *\n * ## Caveats\n *\n * Usage of the feature comes with some requirements/caveats:\n * * As already mentioned, it requires a tree event store\n * * Requires using an AssignmentStore, the legacy single assignment mode does not handle tree stores\n * * Scheduler must use stack or overlap {@link SchedulerPro/view/SchedulerPro#config-eventLayout}, pack not supported\n * * {@link Scheduler/feature/Dependencies} are not supported for nested events\n * * {@link Scheduler/feature/EventDragSelect} is not supported\n * * Multi event drag is not supported for nested events\n * * Cannot {@link Scheduler/feature/EventDragCreate} within parent events\n * * {@link Scheduler/feature/Labels} are not supported for nested events\n * * {@link SchedulerPro/feature/EventBuffer} won't work with nested events\n * * {@link SchedulerPro/feature/TaskEdit} does not allow assigning resources or dependencies to nested events\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @classtype nestedEvents\n * @feature\n */\nexport default class NestedEvents extends InstancePlugin.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'NestedEvents';\n\n    //region Config\n\n    static configurable = {\n        /**\n         * This config defines how to handle overlapping nested events. Valid values are:\n         * - `stack`, events use fixed height and stack on top of each other (not supported in vertical mode)\n         * - `pack`, adjusts event height\n         * - `none`, allows events to overlap\n         *\n         * <div class=\"note\">Note that stacking works differently for nested events as compared to normal events (and\n         * not at all in vertical mode). The height of the parent event will never change, all nested events use\n         * {@link #config-eventHeight fixed height} and will stack until all available space is consumed, after which\n         * they will overflow the parent.</div>\n         *\n         * <div class=\"note\">Also note that stacked nested events are clipped by the parent, making it scrollable on\n         * vertical overflow. This cannot be combined with sticky events. If stacking events in your app won't overflow\n         * the parent, you can specify `overflow: visible` on `.b-nested-events-container.b-nested-events-layout-stack`\n         * to not clip and make sticky events work.</div>\n         *\n         * @prp {'stack'|'pack'|'none'}\n         * @default\n         */\n        eventLayout : 'pack',\n\n        /**\n         * Vertical (horizontal in vertical mode) space between nested event bars, in px\n         * @prp {Number}\n         * @default\n         */\n        barMargin : 5,\n\n        /**\n         * Margin above first nested event bar and below last (or before / after in vertical mode), in px\n         * @prp {Number}\n         * @default\n         */\n        resourceMargin : 0,\n\n        /**\n         * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.\n         *\n         * Also accepts an array, used to control height for each level if nesting deeper than 1 level. Make sure you\n         * supply a value for each level, where later values are smaller than earlier ones.\n         *\n         * ```javascript\n         * const scheduler = new SchedulerPro({\n         *     features : {\n         *         nestedEvents : {\n         *         eventHeight : [40, 20]\n         *     }\n         * });\n         * ```\n         *\n         * @prp {Number|Number[]}\n         * @default\n         */\n        eventHeight : 30,\n\n        /**\n         * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for\n         * the nested events container inside the parent.\n         *\n         * Setting this config updates the ` --schedulerpro-nested-event-header-height` CSS variable.\n         *\n         * @prp {Number}\n         * @default\n         */\n        headerHeight : 20,\n\n        /**\n         * Constrains dragging of nested events within their parent when configured as `true`, allows them to be\n         * dragged out of it when configured as `false` (the default).\n         * @prp {Boolean}\n         * @default\n         */\n        constrainDragToParent : false,\n\n        /**\n         * Allow an event to be dropped on another to nest it.\n         *\n         * Dropping an event on another will add the dropped event as a child of the target, turning the target into a\n         * parent if it was not already.\n         *\n         * Parent events dropped on another event are ignored.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowNestingOnDrop : true,\n\n        /**\n         * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.\n         *\n         * Requires {@link #config-constrainDragToParent} to be configured with `false` to be applicable.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowDeNestingOnDrop : true,\n\n        /**\n         * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the\n         * default), preventing them from changing their parents dates.\n         *\n         * Configure as `false` if you want to allow resizing operations to extend the parents dates (only applies for\n         * parents not configured with `manuallyScheduled: true`).\n         *\n         * <div class=\"note\">Note that when using `eventLayout: stack` the nested events are clipped by the parent, the\n         * part extending outside if not constrained to parent will not be shown until it re-renders after resize. If\n         * stacking events in your app won't overflow the parent, you can specify `overflow: visible` on\n         * `.b-nested-events-container.b-nested-events-layout-stack` to not clip.</div>\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        constrainResizeToParent : true,\n\n        /**\n         * Maximum nesting level for events.\n         *\n         * Larger depths than 2 are not recommended, even if technically possible.\n         *\n         * @prp {Number}\n         * @default\n         */\n        maxNesting : 1\n    };\n\n    static pluginConfig = {\n        before : ['onEventStoreBatchedUpdate'],\n        chain  : [\n            'getEventsToRender', 'processEventDrop', 'processCrossSchedulerEventDrop',\n            'beforeEventDragStart', 'afterEventDragStart', 'afterEventDragAbortFinalized',\n            'checkEventDragValidity', 'afterEventResizeStart', 'afterRenderEvent'\n        ],\n        override : [\n            'getResourceMargin', 'getBarMargin', 'getAppliedResourceHeight', 'getResourceWidth', 'getEventLayout',\n            'getElementFromAssignmentRecord', 'scheduleEvent'\n        ]\n    };\n\n    static delayable = {\n        refreshClient : 'raf'\n    };\n\n    //endregion\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // EventStore has to be a tree store for the feature to work.\n        // If it starts empty, it might not be flagged as such. Help it out.\n        this.client.eventStore.tree = true;\n    }\n\n    refreshClient() {\n        !this.client.isConfiguring && this.client.refreshWithTransition();\n    }\n\n    doDisable() {\n        this.refreshClient();\n    }\n\n    //region Props\n\n    updateEventLayout(layout) {\n        if (layout === 'stack' && this.client.isVertical) {\n            console.warn('Stacked nested events are not supported in vertical mode');\n        }\n\n        this.refreshClient();\n    }\n\n    updateBarMargin() {\n        this.refreshClient();\n    }\n\n    updateResourceMargin() {\n        this.refreshClient();\n    }\n\n    changeEventHeight(height) {\n        // Always an array for internal use, would be breaking to change it externally\n        this._eventHeights = ArrayHelper.asArray(height);\n\n        return height;\n    }\n\n    updateEventHeight() {\n        this.refreshClient();\n    }\n\n    updateHeaderHeight(height) {\n        this.client.element.style.setProperty('--schedulerpro-nested-event-header-height', `${height}px`);\n        this.refreshClient();\n    }\n\n    // Nested events has their own layout setting\n    getEventLayout(resourceRecord, parentEventRecord) {\n        if (parentEventRecord) {\n            return { type : this.eventLayout };\n        }\n\n        return this.overridden.getEventLayout(resourceRecord);\n    }\n\n    // Specific resource margin for nested events\n    getResourceMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.resourceMargin;\n        }\n\n        return this.overridden.getResourceMargin(resourceRecord);\n    }\n\n    // Specific bar margin for nested events\n    getBarMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.barMargin;\n        }\n\n        return this.overridden.getBarMargin(resourceRecord);\n    }\n\n    // Use height available inside the parent event\n    getAppliedResourceHeight(resourceRecord, parentEventRecord) {\n        const me = this;\n\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            if (me.eventLayout === 'stack') {\n                const eventHeight = me._eventHeights[parentEventRecord.childLevel];\n                // Layout subtracts resourceMargin * 2, added here to get eventHeight correct after\n                return eventHeight + me.resourceMargin * 2;\n            }\n            else {\n                const borderWidth = borderWidths[me.client.getEventStyle(parentEventRecord, resourceRecord)] ?? 0;\n                return me.currentParentsHeight - me.headerHeight - borderWidth;\n            }\n        }\n\n        return me.overridden.getAppliedResourceHeight(resourceRecord);\n    }\n\n    getResourceWidth(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.currentParentsWidth - this.headerHeight;\n        }\n\n        return this.overridden.getResourceWidth(resourceRecord);\n    }\n\n    //endregion\n\n    //region CRUD listeners\n\n    attachToEventStore(eventStore) {\n        eventStore?.ion({\n            name    : 'eventStore',\n            change  : 'onEventStoreChange',\n            thisObj : this\n        });\n    }\n\n    onEventStoreChange({ records }) {\n        // Refresh if a nested event was changed\n        if (records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n        }\n    }\n\n    onEventStoreBatchedUpdate({ records }) {\n        // Refresh if a nested event was changed, and we are listening for batched changes (resizing)\n        if (this.client.listenToBatchedUpdates && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n            // Prevent default handler\n            return false;\n        }\n    }\n\n    //endregion\n\n    //region Drag\n\n    // Move event element to foreground canvas during drag. Has to happen before drag starts for the feature to pick up\n    // correct coordinates to resolve resource by, transition back to on abort etc.\n    beforeEventDragStart(context, dragData) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { eventRecord, assignmentRecords } = dragData,\n            { parentElement }                  = context.element;\n\n        // Dragging nested events?\n        if (eventRecord.parent && parentElement !== client.foregroundCanvas) {\n            me.isDraggingNestedEvent = true;\n\n            // Remember origin to be able to restore on abort (success redraws so that will be covered anyway)\n            context.originalParentElement = parentElement;\n            context.originalBounds = [];\n\n            for (const assignment of assignmentRecords) {\n                const { event } = assignment;\n\n                // UI should not allow selecting nested events from different parents, but it is programmatically\n                // possible. We only include from the dragged events parent here, behaviour for mixed parents are for\n                // now undefined\n                if (event.parent === eventRecord.parent) {\n                    const eventElement = client.getElementFromAssignmentRecord(assignment, true);\n\n                    context.originalBounds.push({\n                        element : eventElement,\n                        bounds  : Rectangle.from(eventElement, parentElement)\n                    });\n\n                    if (!me.constrainDragToParent && client.features.eventDrag.constrainDragToTimeline) {\n                        // Pull nested events out\n                        const relativeBounds = Rectangle.from(eventElement, client.timeAxisSubGridElement);\n                        eventElement.style.top = `${relativeBounds.top}px`;\n                        eventElement.style.left = `${relativeBounds.left}px`;\n\n                        DomSync.addChild(client.foregroundCanvas, eventElement, assignment.id);\n                    }\n                }\n            }\n        }\n        else {\n            me.isDraggingNestedEvent = false;\n        }\n    }\n\n    // Setup constraints when drag starts if needed\n    afterEventDragStart(context, dragData) {\n        // Constrain to current parent?\n        if (this.isDraggingNestedEvent && this.constrainDragToParent) {\n            const\n                { eventDrag } = this.client.features,\n                { parent }    = dragData.eventRecord,\n                parentBounds  = context.originalParentElement.getBoundingClientRect();\n\n            // Constrain top / bottom\n            eventDrag.setYConstraint(0, parentBounds.height - context.originalBounds[0].bounds.height);\n\n            // For left / right we also have to constrain the dates, otherwise only the element will be constrained\n            eventDrag.setXConstraint(0, parentBounds.width - context.originalBounds[0].bounds.width);\n            dragData.dateConstraints = { start : parent.startDate, end : parent.endDate };\n        }\n    }\n\n    checkEventDragValidity({ targetEventRecord, eventRecord, timeDiff, newResource, resourceRecord }) {\n        const me = this;\n\n        // Disallow dropping on a blank space in a resource if configured to not allow de-nesting\n        // (ignore first round, targetEventRecord cannot be resolved until on next, which we determine here by checking\n        // timeDiff or resource change)\n        if (me.isDraggingNestedEvent && !me.allowDeNestingOnDrop && !targetEventRecord && (timeDiff || newResource !== resourceRecord)) {\n            return {\n                valid   : false,\n                message : me.L('L{deNestingNotAllowed}')\n            };\n        }\n\n        // Disallow dropping on a new parent if configured to not allow nesting\n        if (!me.allowNestingOnDrop && targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            return {\n                valid   : false,\n                message : me.L('L{nestingNotAllowed}')\n            };\n        }\n\n        if (targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            const\n                maxLevel           = me.maxNesting,\n                targetLevel        = targetEventRecord.isParent ? targetEventRecord.childLevel : targetEventRecord.parent.childLevel,\n                maxChildLevel      = Math.max(...eventRecord.allChildren.map(child => child.childLevel)),\n                relativeChildLevel = maxChildLevel - eventRecord.childLevel;\n\n            if (targetLevel + relativeChildLevel >= maxLevel) {\n                return {\n                    valid   : false,\n                    message : me.L('L{nestingNotAllowed}')\n                };\n            }\n        }\n    }\n\n    // Move event to new parent if dropped on a parent or moved out of one\n    processEventDrop({ context, toScheduler, eventRecord, resourceRecord, reassignedFrom, element, eventsToAdd, addedEvents, draggedAssignment }) {\n        const\n            { parent }            = eventRecord,\n            { targetEventRecord } = context;\n\n        let newParent = parent;\n\n        // targetEventRecord is resolved using mouse coords, it might be outside of parent when constrained thus\n        // we have to check if constrained here to not move it out by mistake\n        if (parent !== targetEventRecord && !this.constrainDragToParent) {\n            // Dropped on a new parent and allowed to nest\n            if (targetEventRecord && this.allowNestingOnDrop) {\n                // Allow creating a new parent if dropped on a child of root, otherwise add to the parent\n                newParent = targetEventRecord.isParent ? targetEventRecord : targetEventRecord.parent.isRoot ? targetEventRecord : targetEventRecord.parent;\n                // We resolve resource and targetEventRecord differently (mouse vs element), might get next resource so\n                // we re-resolve here to be sure it is correct\n                const targetResource = this.client.resolveResourceRecord(context.browserEvent);\n                if (targetResource !== resourceRecord) {\n                    resourceRecord = draggedAssignment.resource = targetResource;\n                }\n            }\n            // Dropped directly on resource and allowed to de-nest (cant get here if not allowed, blocked in validation)\n            else {\n                newParent = toScheduler.eventStore.rootNode;\n            }\n\n            if (newParent && newParent !== parent) {\n                addedEvents.push(newParent.appendChild(eventRecord));\n                // Don't want to add it to root when dragging to another scheduler\n                ArrayHelper.remove(eventsToAdd, eventRecord);\n            }\n        }\n\n        // Moved parent to new resource, reassign all children assigned to its previous resource\n        if (eventRecord.isParent && reassignedFrom && reassignedFrom !== resourceRecord) {\n            for (const child of eventRecord.allChildren) {\n                const existingAssignment = child.assignments.find(a => a.resource === reassignedFrom);\n                if (existingAssignment) {\n                    existingAssignment.resource = resourceRecord;\n                }\n            }\n        }\n\n        // Add to new parent (or put back in old) matching outer position. If we don't do this element might get released\n        // on DomSync of foregroundCanvas (also this lets it transition within the parent)\n        if (newParent && !newParent.isRoot) {\n            const\n                newParentElement = this.client.getElementFromEventRecord(newParent, resourceRecord).syncIdMap.nestedEventsContainer,\n                intersection     = newParentElement && Rectangle.from(element, newParentElement);\n\n            // If dropped on a root level leaf it has no nested events container yet\n            if (newParentElement) {\n                element.style.top = `${intersection.top}px`;\n                element.style.left = `${intersection.left}px`;\n\n                // If dropped at the same position in a new parent it won't transition into place if it thinks nothing\n                // changed\n                element.lastDomConfig = null;\n\n                DomSync.addChild(newParentElement, element, element.dataset.syncId);\n            }\n        }\n    }\n\n    // Assign all children to same resource when dropping on another scheduler\n    processCrossSchedulerEventDrop({ eventRecord }) {\n        if (eventRecord.isParent) {\n            for (const child of eventRecord.allChildren) {\n                child.resource = eventRecord.resource;\n            }\n        }\n    }\n\n    // Restore element after abort (back to original parent and position)\n    async afterEventDragAbortFinalized({ originalParentElement, originalBounds }) {\n        if (this.isDraggingNestedEvent) {\n            // Wait for any position transition\n            for (const animation of originalBounds[0].element.getAnimations()) {\n                if (animation.transitionProperty === 'top' || animation.transitionProperty === 'left') {\n                    await animation.finished;\n                }\n            }\n\n            for (const { element, bounds } of originalBounds) {\n                // Move it back\n                element.style.top = `${bounds.top}px`;\n                element.style.left = `${bounds.left}px`;\n                originalParentElement.appendChild(element);\n            }\n        }\n    }\n\n    // Limit resizing to parent bounds if configured to do so (it is the default)\n    afterEventResizeStart(context) {\n        if (this.constrainResizeToParent) {\n            const { parent } = context.timespanRecord;\n            if (parent && !parent.isRoot) {\n                let { startDate, endDate } = parent;\n\n                if (context.dateConstraints) {\n                    startDate = DateHelper.max(startDate, context.dateConstraints.start);\n                    endDate = DateHelper.min(endDate, context.dateConstraints.end);\n                }\n\n                context.dateConstraints = {\n                    start : startDate,\n                    end   : endDate\n                };\n            }\n        }\n    }\n\n    //endregion\n\n    //region Overrides to make scheduler work with nested events\n\n    // Let Scheduler resolve nested events too\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper) {\n        if (assignmentRecord?.event?.parent && !assignmentRecord.event.parent.isRoot) {\n            const parentElement = this.client.getElementFromEventRecord(assignmentRecord.event.parent, assignmentRecord.resource);\n            return DomSync.getChild(parentElement, `nestedEventsContainer.${assignmentRecord.id}${returnWrapper ? '' : '.event'}`);\n        }\n\n        return this.overridden.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n\n    // Allow scheduling nested events by overriding Schedulers implementation\n    async scheduleEvent({ eventRecord, parentEventRecord, startDate, element }) {\n        // When passed a parent, append to it and assign to its resource\n        if (parentEventRecord) {\n            eventRecord.startDate = startDate;\n            eventRecord = parentEventRecord.appendChild(eventRecord);\n            eventRecord.assign(parentEventRecord.resource);\n\n            // When given an element, it is positioned inside the parent and adopted by DomSync, letting it transition\n            if (element) {\n                const\n                    parentElement = this.client.getElementFromEventRecord(parentEventRecord).syncIdMap.nestedEventsContainer,\n                    eventRect     = Rectangle.from(element, parentElement);\n\n                // Clear translate styles used by DragHelper\n                DomHelper.setTranslateXY(element, 0, 0);\n                DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n\n                DomSync.addChild(parentElement, element, eventRecord.assignments[0].id);\n            }\n\n            await this.client.project.commitAsync();\n        }\n        else {\n            return this.overridden.scheduleEvent(...arguments);\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Hook into event collection to filter out children, since they will be rendered inside their parents\n    getEventsToRender(resourceRecord, eventRecords) {\n        if (!this.disabled) {\n            // Only keep direct children of the root (?. in case someone tries to use a flat store)\n            ArrayHelper.remove(eventRecords, ...eventRecords.filter(eventRecord => eventRecord.isEventModel && !eventRecord.parent.isRoot));\n        }\n\n        return eventRecords;\n    }\n\n    afterRenderEvent({ renderData }) {\n        const\n            { eventRecord } = renderData,\n            { childLevel }  = eventRecord;\n\n        if (eventRecord.isParent) {\n            const\n                me = this,\n                { resourceRecord, width, height, left, top, wrapperCls } = renderData;\n\n            wrapperCls.add('b-nested-events-parent');\n\n            me.currentParentsHeight = height;\n            me.currentParentsWidth = width;\n\n            const\n                {\n                    currentOrientation,\n                    isVertical\n                }                      = me.client,\n                assignedChildren       = eventRecord.children.filter(e => e.$linkedResources?.includes(resourceRecord)),\n                // This call uses the same render path as normal events, applying event layout etc. The layout is then\n                // as needed patched up below (to be relative to parent etc)\n                layouts                = currentOrientation.layoutEvents(resourceRecord, assignedChildren, false, eventRecord, me.overlappingEventSorter),\n                nestedEvents           = [];\n\n            let eventsData;\n\n            if (isVertical) {\n                eventsData = [];\n                for (const layout of Object.values(layouts)) {\n                    eventsData.push(layout.renderData);\n                }\n            }\n            else {\n                eventsData = layouts?.eventsData;\n            }\n\n            if (eventsData) {\n                for (const layout of eventsData) {\n                    // Positioned inside parent\n                    if (isVertical) {\n                        layout.left -= left;\n                        layout.top -= top;\n                        layout.absoluteTop = layout.top;\n                    }\n                    else {\n                        // Special handling for overlap, it does not use the same render path as other layouts\n                        if (me.eventLayout === 'none') {\n                            layout.top = 0;\n                            layout.height = me.getAppliedResourceHeight(resourceRecord, eventRecord);\n                        }\n                        // Stack also needs some special handling of height, since it uses fixed event height\n                        else if (me.eventLayout === 'stack') {\n                            layout.height = me._eventHeights[childLevel];\n                        }\n\n                        layout.absoluteLeft = layout.left;\n                        layout.left -= (renderData.absoluteLeft ?? left);\n                        layout.absoluteTop = layout.top;\n                    }\n\n                    const domConfig = currentOrientation.renderEvent(isVertical ? { renderData : layout } : layout, height);\n                    domConfig.className['b-nested-event'] = 1;\n                    nestedEvents.push(domConfig);\n                }\n            }\n\n            const containerDomConfig = {\n                className : {\n                    'b-nested-events-container'                  : 1,\n                    [`b-nested-events-layout-${me.eventLayout}`] : 1\n                },\n                dataset : {\n                    taskBarFeature : 'nestedEventsContainer'\n                },\n                children    : nestedEvents,\n                syncOptions : {\n                    syncIdField      : 'syncId',\n                    releaseThreshold : 0\n                }\n            };\n\n            // renderData is reused, children are cached. We want ours to be up to date\n            const\n                { children } = renderData,\n                index        = children.findIndex(child => child.dataset.taskBarFeature === 'nestedEventsContainer');\n            if (index === -1) {\n                children.push(containerDomConfig);\n            }\n            else {\n                children.splice(index, 1, containerDomConfig);\n            }\n        }\n\n        renderData.elementConfig.dataset.level = childLevel;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(NestedEvents, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module SchedulerPro/feature/ResourceNonWorkingTime\n */\n\n/**\n * Feature that highlights the non-working intervals for resources based on their {@link SchedulerPro.model.ResourceModel#field-calendar}.\n * If a resource has no calendar defined, the project's calendar will be used. The non-working time interval can\n * also be recurring. You can find a live example showing how to achieve this in the [Resource Non-Working Time Demo](../examples/resource-non-working-time/).\n *\n * {@inlineexample SchedulerPro/feature/ResourceNonWorkingTime.js}\n *\n * ## Data structure\n * Example data defining calendars and assigning the resources a calendar:\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true,\n *                   }\n *               ]\n *           }\n *    ],\n *    \"resources\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"         : 1,\n *               \"name\"       : \"George\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           },\n *           {\n *               \"id\"         : 2,\n *               \"name\"       : \"Rob\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           }\n *        ]\n *   [...]\n * ```\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *   // A Project holding the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *   // loading data into all stores at once\n *   project : {\n *       autoLoad  : true,\n *       transport : {\n *           load : {\n *               url : './data/data.json'\n *           }\n *       }\n *   },\n *   features : {\n *       resourceNonWorkingTime : true\n *   },\n *   [...]\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add\n * an {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo SchedulerPro/resource-non-working-time\n * @classtype resourceNonWorkingTime\n * @feature\n */\nexport default class ResourceNonWorkingTime extends ResourceTimeRangesBase {\n\n    //region Config\n\n    static $name = 'ResourceNonWorkingTime';\n\n    static configurable = {\n        rangeCls : 'b-sch-resourcenonworkingtime',\n\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default\n         */\n        maxTimeAxisUnit : 'hour',\n\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n\n        /**\n         * The Model class to use for representing a {@link Scheduler.model.ResourceTimeRangeModel}\n         * @config {Function}\n         */\n        resourceTimeRangeModelClass : ResourceTimeRangeModel,\n\n        entityName : 'resourceNonWorkingTime'\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            resourceMap : new Map()\n        };\n    };\n\n    //endregion\n\n    //region Constructor\n\n    construct() {\n        super.construct(...arguments);\n\n        this.resourceTimeRangeModelClass = class ResourceNonWorkingTimeModel extends this.resourceTimeRangeModelClass {\n            static $name = 'ResourceNonWorkingTimeModel';\n            static domIdPrefix = 'resourcenonworkingtimemodel';\n        };\n\n        this.client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : this\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseDown\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseUp\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeDblClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeContextMenu\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOver\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOut\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    //endregion\n\n    //region Init\n\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n\n        resourceStore?.ion({\n            name            : 'resourceStore',\n            changePreCommit : 'onResourceChange',\n            thisObj         : this\n        });\n    }\n\n    attachToCalendarManagerStore(calendarManagerStore) {\n        super.attachToCalendarManagerStore(calendarManagerStore);\n\n        calendarManagerStore?.ion({\n            name            : 'calendarManagerStore',\n            changePreCommit : 'onCalendarChange',\n            thisObj         : this\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisReconfigure() {\n        // reset ranges cache on timeAxis change\n        this.resourceMap.clear();\n    }\n\n    onResourceChange({ action, records, record, changes }) {\n        const me = this;\n\n        // Might need to redraw on update\n        if (action === 'update') {\n            const change = changes.calendar;\n\n            // Ignore calendar normalization\n            if (change && (typeof change.oldValue !== 'string' || change.value?.id !== change.oldValue)) {\n                me.resourceMap.delete(record.id);\n                // Redraw row in case calendar change did not affect any events\n                me.client.runWithTransition(() => {\n                    me.client.currentOrientation.refreshEventsForResource(record);\n                });\n            }\n        }\n\n        // Keep map up to date on removals (adds are handled through rendering in getEventsToRender)\n        if (action === 'remove') {\n            records.forEach(record => me.resourceMap.delete(record.id));\n        }\n\n        if (action === 'removeall') {\n            me.resourceMap.clear();\n        }\n    }\n\n    onCalendarChange({ action, records, record, changes }) {\n        this.resourceMap.clear();\n        this.client.refresh();\n    }\n\n    //endregion\n\n    //region Internal\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const\n            me                      = this,\n            { resourceMap, client } = me,\n            { timeAxis }            = client,\n            shouldPaint             = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0;\n\n        if (!me.disabled && shouldPaint && resource.effectiveCalendar) {\n            if (!resourceMap.has(resource.id)) {\n                const\n                    ranges  = resource.effectiveCalendar.getNonWorkingTimeRanges(\n                        client.startDate,\n                        client.endDate\n                    ),\n                    records = ranges.map((range, i) => new me.resourceTimeRangeModelClass({\n                        id           : `r${resource.id}i${i}`,\n                        iconCls      : range.iconCls || resource.effectiveCalendar.iconCls || '',\n                        cls          : `${resource.effectiveCalendar.cls || ''} ${range.cls || ''}`,\n                        startDate    : range.startDate,\n                        endDate      : range.endDate,\n                        name         : range.name || '',\n                        resourceId   : resource.id,\n                        isNonWorking : true\n                    }));\n\n                resourceMap.set(resource.id, records);\n            }\n\n            events.push(...resourceMap.get(resource.id));\n        }\n\n        return events;\n    }\n\n    shouldInclude({ isNonWorking }) {\n        return isNonWorking;\n    }\n\n    /**\n     * Returns a resource nonworking time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @category DOM\n     */\n    resolveResourceNonWorkingTimeInterval(rangeElement) {\n        return rangeElement?.closest('.b-sch-resourcenonworkingtime')?.elementData.eventRecord;\n    }\n\n    //endregion\n\n}\n\n// No feature based styling needed, do not add a cls to Scheduler\nResourceNonWorkingTime.featureClass = '';\n\nGridFeatureManager.registerFeature(ResourceNonWorkingTime, false, 'SchedulerPro');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module SchedulerPro/feature/TimeSpanHighlight\n */\n\nconst\n    timespanDefaults = {\n        isHighlightConfig : true,\n        clearExisting     : false\n    };\n\n/**\n * An object describing the time span region to highlight.\n *\n * @typedef {Object} HighlightTimeSpan\n * @property {Date} startDate A start date constraining the region\n * @property {Date} endDate An end date constraining the region\n * @property {String} name A name to show in the highlight element\n * @property {Scheduler.model.ResourceModel} [resourceRecord] The resource record (applicable for Scheduler only)\n * @property {Core.data.Model} [taskRecord] The task record (applicable for Gantt only)\n * @property {String} [cls] A CSS class to add to the highlight element\n * @property {Boolean} [clearExisting=true] `false` to keep existing highlight elements\n * @property {String} [animationId] An id to enable animation of highlight elements\n * @property {Boolean} [surround=false] True to shade the time axis areas before and after the time span\n * (adds a `b-unavailable` CSS class which you can use for styling)\n * @property {Number} [padding] Inflates the non-timeaxis sides of the region by this many pixels\n */\n\n/**\n * This feature exposes methods on the owning timeline widget which you can use to highlight one or multiple time spans\n * in the schedule. Please see {@link #function-highlightTimeSpan} and {@link #function-highlightTimeSpans} to learn\n * more or try the demo below:\n *\n * {@inlineexample SchedulerPro/feature/TimeSpanHighlight.js}\n *\n * ## Example usage with Scheduler Pro\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * scheduler.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      name      : 'Time off'\n * });\n * ```\n *\n * ## Example usage with Gantt\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * gantt.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      padding   : 10, // Some \"air\" around the rectangle\n *      taskRecord, // You can also highlight an area specific to a Gantt task\n *      name      : 'Time off'\n * });\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype timeSpanHighlight\n * @feature\n * @demo SchedulerPro/highlight-time-spans\n */\nexport default class TimeSpanHighlight extends InstancePlugin {\n\n    //region Config\n    domConfigs = [];\n    configs = [];\n\n    static get $name() {\n        return 'TimeSpanHighlight';\n    }\n\n    static get configurable() {\n        return {\n            padding : 0\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            assign : [\n                'highlightTimeSpan',\n                'highlightTimeSpans',\n                'unhighlightTimeSpans'\n            ],\n            chain : [\n                'onTimeAxisViewModelUpdate'\n            ]\n        };\n    }\n\n    //endregion\n\n    construct() {\n        super.construct(...arguments);\n\n        this.client.rowManager.ion({\n            renderDone : this.onViewChanged,\n            thisObj    : this\n        });\n    }\n\n    /**\n     * Highlights the region representing the passed time span and optionally for a single certain resource.\n     * @on-owner\n     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.\n     */\n    highlightTimeSpan(config, draw = true) {\n        const\n            me         = this,\n            {\n                startDate,\n                endDate,\n                name,\n                surround,\n                padding       = me.padding,\n                clearExisting = true\n            }          = config,\n            { client } = me,\n            taskRecord = config.isTimeSpan ? config : config.taskRecord;\n\n        // The resource property allows an actual TaskRecord to be used as a config.\n        let resourceRecord  = config.resourceRecord || config.resource;\n        const { animationId } = config;\n\n        if (animationId) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n\n        if (clearExisting) {\n            me.domConfigs.length = me.configs.length = 0;\n        }\n\n        if (me.disabled) {\n            // nothing to highlight\n            return;\n        }\n\n        if (surround) {\n            me.surroundTimeSpan(config);\n            return;\n        }\n\n        me.configs.push(config);\n\n        let rect;\n        if (client.isGanttBase) {\n            rect = client.getScheduleRegion(taskRecord, true, { start : startDate, end : endDate });\n        }\n        else {\n            if (resourceRecord) {\n                // Allows resolving link from original in TreeGrouped scheduler\n                resourceRecord = client.store.getById(resourceRecord);\n            }\n\n            rect = client.getScheduleRegion(resourceRecord, null, true, { start : startDate, end : endDate }, !resourceRecord);\n        }\n\n        if (!rect) {\n            // nothing to highlight\n            return;\n        }\n\n        if (padding) {\n            if (client.isHorizontal) {\n                rect.inflate(padding, 0, padding, 0);\n            }\n            else {\n                rect.inflate(0, padding, 0, padding);\n            }\n        }\n\n        me.domConfigs.push(\n            rect.visualize({\n                children : [\n                    {\n                        class : 'b-sch-highlighted-range-name',\n                        html  : name\n                    }\n                ],\n                dataset : {\n                    syncId : animationId\n                },\n                class : {\n                    'b-sch-highlighted-range'                           : 1,\n                    [config.cls]                                        : config.cls,\n                    [config.class || 'b-sch-highlighted-range-default'] : 1\n                }\n            }, true)\n        );\n\n        if (draw) {\n            me.draw();\n        }\n\n        client.syncSplits?.(split => split.highlightTimeSpan(config, draw));\n    }\n\n    draw() {\n        DomSync.sync({\n            targetElement : this.containerEl,\n            domConfig     : {\n                onlyChildren : true,\n                children     : this.domConfigs\n            }\n        });\n    }\n\n    surroundTimeSpan(timeSpan) {\n        this.highlightTimeSpans([\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'Before',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : this.client.startDate,\n                endDate     : timeSpan.startDate\n            }),\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'After',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : timeSpan.endDate,\n                endDate     : this.client.endDate\n            })\n        ], { clearExisting : timeSpan.clearExisting });\n    }\n\n    /**\n     * Highlights the regions representing the passed time spans.\n     * @on-owner\n     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.\n     * @param {Object} [options] A single options object\n     * @param {Boolean} [options.clearExisting=true] Set to `false` to preserve previously highlighted elements\n     */\n    highlightTimeSpans(timeSpans, options = {}) {\n        const\n            me = this,\n            {\n                clearExisting = true\n            }  = options;\n\n        if (clearExisting) {\n            timeSpans = timeSpans.slice();\n            me.domConfigs.length = me.configs.length = 0;\n        }\n\n        if (me.disabled) {\n            return;\n        }\n\n        timeSpans.forEach(timeSpan => {\n            // If we are *re*drawing a set of configs, they will have the isHighlightConfig\n            // property, so we can pass them straight in. If its a config from the outside,\n            // then apply the defaults and the isHighlightConfig flag.\n            me.highlightTimeSpan(timeSpan.isHighlightConfig ? timeSpan : Object.setPrototypeOf(timespanDefaults, timeSpan), false);\n        });\n\n        me.draw();\n    }\n\n    /**\n     * Removes any highlighting elements.\n     * @param {Boolean} [fadeOut] `true` to fade out the highlight elements before removing\n     * @on-owner\n     */\n    async unhighlightTimeSpans(fadeOut = false) {\n        const\n            me         = this,\n            { client } = me;\n\n        if (fadeOut) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n\n        Array.from(me.containerEl.children).forEach(element => {\n            if (fadeOut) {\n                element.style.opacity = 0;\n                me.fadeOutDetacher    = EventHelper.onTransitionEnd({\n                    element,\n                    property : 'opacity',\n                    thisObj  : client,\n                    handler  : () => {\n                        me.domConfigs.length = me.configs.length = 0;\n                        me.draw();\n                    }\n                });\n            }\n            else {\n                me.domConfigs.length = me.configs.length = 0;\n                me.draw();\n            }\n        });\n\n        client.syncSplits?.(split => split.unhighlightTimeSpans(fadeOut));\n    }\n\n    get containerEl() {\n        if (!this._containerEl) {\n            this._containerEl = DomHelper.createElement({\n                parent        : this.client.foregroundCanvas,\n                retainElement : true,\n                class         : 'b-sch-highlight-container'\n            });\n        }\n\n        return this._containerEl;\n    }\n\n    onTimeAxisViewModelUpdate() {\n        this.onViewChanged();\n    }\n\n    onViewChanged() {\n        if (this.configs.length > 0) {\n            this.highlightTimeSpans(this.configs);\n        }\n    }\n\n    updateDisabled(disabled, was) {\n        if (disabled) {\n            this.unhighlightTimeSpans();\n        }\n\n        super.updateDisabled(disabled, was);\n    }\n\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\n\nGridFeatureManager.registerFeature(TimeSpanHighlight, false, ['SchedulerPro', 'Gantt']);\n", "/**\n * @module SchedulerPro/model/changelog/ChangeLogPropertyUpdate\n */\n\n/**\n * An immutable, serializable object that describes an update to a single object property from one value to another.\n */\nexport default class ChangeLogPropertyUpdate {\n\n    static $name = 'ChangeLogPropertyUpdate';\n\n    constructor({ property, before, after }) {\n        Object.assign(this, {\n            /**\n             * @member {String} property A descriptor for the entity (object) affected by this action.\n             * @readonly\n             * @category Common\n             */\n            property,\n\n            /**\n             * @member {String|Number|Object} before The property's value before the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            before,\n\n            /**\n             * @member {String|Number|Object} after The property's value after the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            after\n        });\n        Object.freeze(this);\n    }\n}\n", "import { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\nimport ProjectModelMixin from '../../Scheduler/model/mixin/ProjectModelMixin.js';\nimport ProjectChangeHandlerMixin from './mixin/ProjectChangeHandlerMixin.js';\n\nimport ProjectCrudManager from '../data/mixin/ProjectCrudManager.js';\n\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport EventModel from './EventModel.js';\nimport ResourceModel from './ResourceModel.js';\n\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport EventStore from '../data/EventStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport StateTrackingManager from '../data/stm/StateTrackingManager.js';\n\n/**\n * @module SchedulerPro/model/ProjectModel\n */\n\n/**\n * Scheduler Pro Project model class - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler Pro:\n *\n * - {@link SchedulerPro/data/EventStore}\n * - {@link SchedulerPro/data/ResourceStore}\n * - {@link SchedulerPro/data/AssignmentStore}\n * - {@link SchedulerPro/data/DependencyStore}\n * - {@link SchedulerPro/data/CalendarManagerStore}\n * - {@link Scheduler/data/ResourceTimeRangeStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler Pro UI but which you must know about when\n * performing operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#SchedulerPro/guides/basics/project_data.md) for more information.\n *\n * ## Built in CrudManager\n *\n * Scheduler Pro's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built in. Using it is the recommended\n * way of syncing data between Scheduler Pro and a backend. Example usage:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project : {\n *         // Configure urls used by the built in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * scheduler.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, see the [Crud manager guide](#Scheduler/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * scheduler.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before data is fed to the stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @mixes Core/mixin/Events\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n *\n * @extends Scheduler/model/mixin/ProjectModelMixin\n *\n * @typings Scheduler.model.ProjectModel -> Scheduler.model.SchedulerProjectModel\n */\nexport default class ProjectModel extends ProjectChangeHandlerMixin(ProjectCrudManager(ProjectModelMixin(SchedulerProProjectMixin))) {\n    //region Events\n\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {SchedulerPro.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     * @param {Set} records Set of all {@link Core.data.Model}s that were modified in the completed transaction.\n     * Use the {@link Core.data.Model#property-modifications} property of each Model to identify\n     * modified fields.\n     */\n\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes the calendar usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    //endregion\n\n    //region Config\n\n    static get $name() {\n        return 'ProjectModel';\n    }\n\n    /**\n     * Class implementing resource allocation report used by\n     * {@link SchedulerPro.view.ResourceHistogram resource histogram} and\n     * {@link SchedulerPro.view.ResourceUtilization resource utilization} views\n     * for collecting resource allocation.\n     * @config {ResourceAllocationInfo} resourceAllocationInfoClass\n     */\n\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new SchedulerPro{\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new SchedulerPro({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n\n    /**\n     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,\n     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts\n     * and ends on the non-working time. For such cases you can disable this option.\n     *\n     * Default value is `true`\n     *\n     * IMPORTANT: Setting this option to `false` also forcefully sets the {@link #field-skipNonWorkingTimeWhenSchedulingManually} option\n     * to `false`.\n     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.\n     *\n     * @field {Boolean} skipNonWorkingTimeInDurationWhenSchedulingManually\n     * @default true\n     */\n\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating end date. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * }\n     * ```\n     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST\n     * transition the SchedulerPro project will add one more hour when calculating the end date.\n     *\n     * Also this may occur when day with DST transition is working but there are non-working intervals between that day\n     * and event end date.\n     *\n     * ```javascript\n     * {\n     *     calendar         : 1,\n     *     calendarsData    : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-26',\n     *             endDate      : '2020-10-27',\n     *             isWorking    : false\n     *         }\n     *     ],\n     *     eventsData       : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-20',\n     *             endDate      : '2020-10-30'\n     *         },\n     *         {\n     *             id           : 2,\n     *             startDate    : '2020-10-20',\n     *             duration     : 10 * 24 + 1,\n     *             durationUnit : 'hour'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.\n     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.\n     *\n     * If **false**, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.\n     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated\n     * to 2020-10-30.\n     *\n     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * eventStore.getById(1).getDuration('day')  // 10.041666666666666\n     * eventStore.getById(1).getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n\n    // <remove-on-release>\n    // TODO: For 6.0. This config is introduced only to make behavior transition smooth. If nobody complains about it for\n    //  a couple of releases, it should be removed\n    // </remove-on-release>\n\n    /**\n     * The number of hours per day.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per day\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `5 days` the system understands that it\n     * actually means `120 hours` and schedules accordingly.\n     * @field {Number} hoursPerDay\n     * @default 24\n     */\n\n    /**\n     * The number of days per week.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per week\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `2 weeks` the system understands that it\n     * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerWeek\n     * @default 7\n     */\n\n    /**\n     * The number of days per month.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per month\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `1 month` the system understands that it\n     * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerMonth\n     * @default 30\n     */\n\n    /**\n     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n     * Possible values are:\n     *\n     * - `ToEvent` - successor calendar will be used (default);\n     * - `FromEvent` - predecessor calendar will be used;\n     * - `Project` - the project calendar will be used.\n     *\n     * @field {'ToEvent'|'FromEvent'|'Project'} dependenciesCalendar\n     * @default 'ToEvent'\n     */\n\n    /**\n     * The project calendar.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {String|CalendarModelConfig|SchedulerPro.model.CalendarModel}\n     */\n\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled the project fires {@link #event-progress progress} event.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n\n    /**\n     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n     * keep the event \"attached\" to this date, according to the user intention.\n     *\n     * Depending on your use case, you might want to disable this behaviour.\n     *\n     * @field {Boolean} addConstraintOnDateSet\n     * @default true\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * @hideproperties project, taskStore\n             */\n\n            //region Inline data configs & properties\n\n            /**\n             * Get/set {@link #property-eventStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.EventModel EventModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.EventModel[]} events\n             * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be an array of\n             * {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]|EventModelConfig[]} events\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.ResourceModel ResourceModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.ResourceModel[]} resources\n             * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} but also accepts\n             * an array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.AssignmentModel[]} assignments\n             * @accepts {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.DependencyModel[]} dependencies\n             * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-resourceTimeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n             * also accepts an array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n             * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n             * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n             * @category Inline data\n             */\n\n            //endregion\n\n            //region Legacy inline data configs & properties\n\n            /**\n             * The initial data, to fill the {@link #property-eventStore eventStore} with.\n             * Should be an array of {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]} eventsData\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]} [dependenciesData]\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]} [resourcesData]\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]} [assignmentsData]\n             * @category Legacy inline data\n             */\n\n            //endregion\n\n            //region Store configs and properties\n\n            /**\n             * The {@link SchedulerPro.data.EventStore store} holding the event information.\n             *\n             * See also {@link SchedulerPro.model.EventModel}\n             *\n             * @member {SchedulerPro.data.EventStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.EventStore} instance or a config object.\n             * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link SchedulerPro.model.DependencyModel}\n             *\n             * @member {SchedulerPro.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.DependencyStore} instance or a config object.\n             * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.ResourceStore store} holding the resources that can be assigned to the\n             * events in the event store.\n             *\n             * See also {@link SchedulerPro.model.ResourceModel}\n             *\n             * @member {SchedulerPro.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.ResourceStore} instance or a config object.\n             * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link SchedulerPro.model.AssignmentModel}\n             *\n             * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.AssignmentStore} instance or a config object.\n             * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link SchedulerPro.model.CalendarModel}\n             * @member {SchedulerPro.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.CalendarManagerStore} instance or a config object.\n             * @config {SchedulerPro.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n\n            //endregion\n\n            //region Model & store class configs\n\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the\n             * {@link #property-calendarManagerStore}\n             *\n             * @config {SchedulerPro.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {SchedulerPro.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {SchedulerPro.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {SchedulerPro.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.CalendarManagerStore}\n             * @config {SchedulerPro.data.CalendarManagerStore|Object}\n             * @typings {typeof CalendarManagerStore|object}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.DependencyStore}\n             * @config {SchedulerPro.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.EventStore}\n             * @config {SchedulerPro.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.AssignmentStore}\n             * @config {SchedulerPro.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.ResourceStore}\n             * @config {SchedulerPro.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n\n            //endregion\n\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore} with.\n             * Should be an array of {@link SchedulerPro.model.CalendarModel} or it's configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)',\n\n            /**\n             * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.\n             *\n             * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render\n             * before engine has normalized the data. Given un-normalized data events will snap into place when\n             * calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n\n            calendarManagerStore : {},\n\n            stmClass : StateTrackingManager\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link SchedulerPro.model.CalendarModel} array but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.CalendarModel[]} calendars\n             * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be a {@link SchedulerPro.model.CalendarModel}\n             * array or its configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n             * @category Inline data\n             */\n            calendars : null\n        };\n    }\n\n    // For TaskBoard compatibility\n    get taskStore() {\n        return this.eventStore;\n    }\n\n    //endregion\n\n    //region Inline data\n\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n\n    //endregion\n}\n", "import Base from '../../../Core/Base.js';\nimport ProHorizontalLayoutStack from '../../eventlayout/ProHorizontalLayoutStack.js';\nimport ProHorizontalLayoutPack from '../../eventlayout/ProHorizontalLayoutPack.js';\n\n/**\n * @module SchedulerPro/view/mixin/SchedulerProEventRendering\n */\n\n/**\n * Config for event layout\n * @typedef {Object} EventLayoutConfig\n * @property {'stack'|'pack'|'mixed'|'none'} type Event layout type. Possible values for horizontal mode are\n * `stack`, `pack` and `none`. For vertical mode: `pack`, `mixed` and `none`.\n * @property {Function} layoutFn Horizontal mode only. This function allows to manually position events inside the row.\n * @property {Object} weights Horizontal mode only. Specifies groups order.\n * @property {String|Function} groupBy Horizontal mode only. Specifies a way to group events inside a row.\n */\n\n/**\n * Functions to handle event rendering in Scheduler Pro (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class SchedulerProEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerProEventRendering';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * This config defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * You can also provide a configuration object accepted by\n             * {@link SchedulerPro.eventlayout.ProHorizontalLayout} to group events or even take control over the\n             * layout (i.e. vertical position and height):\n             *\n             * To group events:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             high   : 100,\n             *             normal : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * To take control over the layout:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = 100 * Math.random();\n             *                 item.height = 100 * Math.random();\n             *             });\n             *\n             *             return 100;\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * For more info on grouping and layout please refer to {@link SchedulerPro.eventlayout.ProHorizontalLayout}\n             * doc article.\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|EventLayoutConfig}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : ProHorizontalLayoutPack,\n\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : ProHorizontalLayoutStack\n        };\n    }\n\n    //region Config\n\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n\n        if (!me.isConfiguring) {\n            me.clearLayouts();\n        }\n\n        super.updateInternalEventLayout(eventLayout, oldEventLayout);\n    }\n\n    //endregion\n\n    getEventLayout(config) {\n        config = super.getEventLayout(config);\n\n        if ('layoutFn' in config) {\n            config.type = 'layoutFn';\n        }\n\n        return config;\n    }\n\n    clearLayouts() {\n        const me = this;\n\n        if (me.layouts) {\n            for (const key in me.layouts) {\n                me.layouts[key].destroy();\n                delete me.layouts[key];\n            }\n        }\n    }\n\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n\n        if (!me.isHorizontal) {\n            return null;\n        }\n\n        const { timeAxisViewModel, horizontal } = me;\n\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n\n        const { layouts } = me;\n\n        switch (eventLayout.type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!layouts.horizontalStack) {\n                    layouts.horizontalStack = me.horizontalLayoutStackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n\n                return layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!layouts.horizontalPack) {\n                    layouts.horizontalPack = me.horizontalLayoutPackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n\n                return layouts.horizontalPack;\n            }\n            case 'layoutFn': {\n                // Both methods are called on a layout\n                return {\n                    type                : 'layoutFn',\n                    scheduler           : me,\n                    applyLayout         : eventLayout.layoutFn,\n                    layoutEventsInBands : eventLayout.layoutFn\n                };\n            }\n            default:\n                return null;\n        }\n    }\n\n    get widgetClass() {}\n};\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\n\nimport '../localization/En.js';\n\n// Always required features\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport { CalculatedValueGen } from '../../ChronoGraph/chrono/Identifier.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { BaseCalendarMixin } from '../../Engine/quark/model/scheduler_basic/BaseCalendarMixin.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport TimelineHistogram from '../../Scheduler/view/TimelineHistogram.js';\nimport SchedulerStores from '../../Scheduler/view/mixin/SchedulerStores.js';\nimport SchedulerResourceRendering from '../../Scheduler/view/mixin/SchedulerResourceRendering.js';\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport ProjectModel from '../model/ProjectModel.js';\n\n// Imitates ResourceAllocationInfo structure\nfunction buildReturnedValue(total) {\n    return {\n        allocation : {\n            total\n        }\n    };\n}\n\n/**\n * @module SchedulerPro/view/ResourceHistogram\n */\n\n/**\n * This view displays a read-only timeline report of the workload for the resources in a\n * {@link SchedulerPro/model/ProjectModel project}. The resource allocation is visualized as bars along the time axis\n * with an optional line indicating the maximum available time for each resource. A {@link Scheduler/column/ScaleColumn}\n * is also added automatically.\n *\n * To create a standalone histogram, simply configure it with a Project instance:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad : true,\n *     loadUrl  : 'examples/schedulerpro/view/data.json'\n * });\n *\n * const histogram = new ResourceHistogram({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true,\n *     columns     : [\n *         {\n *             width : 200,\n *             field : 'name',\n *             text  : 'Resource'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ## Pairing the component\n *\n * You can also pair the histogram with other timeline views such as the Gantt or Scheduler,\n * using the {@link Scheduler/view/TimelineBase#config-partner} config.\n *\n * You can configure (or hide completely) the built-in scale column easily:\n *\n * ```javascript\n * const histogram = new ResourceHistogram({\n *    project,\n *    appendTo    : 'targetDiv',\n *    columns     : [\n *        {\n *            width : 200,\n *            field : 'name',\n *            text  : 'Resource'\n *        },\n *        // Hide the scale column (or add any other column configs)\n *        {\n *            type   : 'scale',\n *            hidden : true\n *        }\n *    ]\n * });\n * ```\n *\n * ## Changing displayed values\n *\n * To change the histogram bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceHistogram({\n *     getBarText(datum) {\n *         const resourceHistogram = this.owner;\n *\n *         // get default bar text\n *         let result = resourceHistogram.getBarTextDefault(...arguments);\n *\n *         // and if some work is done in the tick\n *         if (result) {\n *\n *             const unit = resourceHistogram.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n *     ...\n * })\n * ```\n * @extends Scheduler/view/TimelineHistogram\n * @mixes Scheduler/view/mixin/SchedulerStores\n * @mixes Scheduler/view/mixin/SchedulerResourceRendering\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @classtype resourcehistogram\n * @widget\n */\nexport default class ResourceHistogram extends TimelineHistogram.mixin(SchedulerStores, SchedulerResourceRendering, CrudManagerView) {\n\n    //region Config\n\n    static $name = 'ResourceHistogram';\n\n    static type = 'resourcehistogram';\n\n    /**\n     * @hideconfigs durationDisplayPrecision, resourceColumns, enableRecurringEvents, eventBarTextField,\n     * eventBodyTemplate, eventColor, eventLayout, eventRenderer, eventRendererThisObj, eventStyle,\n     * horizontalEventSorterFn, horizontalLayoutPackClass, horizontalLayoutStackClass, milestoneAlign,\n     * milestoneTextPosition, highlightPredecessors, highlightSuccessors, removeUnassignedEvent,\n     * eventAssignHighlightCls, eventCls, eventSelectedCls, fixedEventCls, overScheduledEventClass,\n     * timeZone\n     */\n\n    static configurable = {\n        projectModelClass : ProjectModel,\n\n        sortFeatureStore      : 'store',\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourcehistogram-cell',\n\n        /**\n         * Effort value format string.\n         * Must be a template supported by {@link Core/helper/util/NumberFormat} class.\n         * @config {String}\n         * @default\n         */\n        effortFormat : '0.#',\n\n        getRecordData : 'getRecordAllocationData',\n\n        aggregateDataEntry : 'aggregateAllocationEntry',\n\n        initAggregatedDataEntry : 'initAggregatedAllocationEntry',\n\n        hardRefreshOnTimeAxisReconfigure : false,\n\n        /**\n         * Specifies whether effort values should display units or not.\n         * @config {Boolean}\n         * @default\n         */\n        showEffortUnit : true,\n\n        useProjectTimeUnitsForScale : false,\n\n        /**\n         * Default time unit to display resources effort values.\n         * The value is used as default when displaying effort in tooltips and bars text.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips only\n         * and {@link #config-barTextEffortUnit} to customize default units in bar texts.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        effortUnit : TimeUnit.Hour,\n\n        /**\n         * Default time unit used for displaying resources effort in bars.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTextEffortUnit : null,\n\n        /**\n         * Default time unit used when displaying resources effort in tooltips.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTextEffortUnit} to customize default units for bar texts\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTipEffortUnit : null,\n\n        /**\n         * Set to `true` if you want to display the maximum resource allocation line.\n         * @config {Boolean}\n         * @default\n         */\n        showMaxEffort : true,\n\n        series : {\n            maxEffort : {\n                type  : 'outline',\n                field : 'maxEffort'\n            },\n            effort : {\n                type  : 'bar',\n                field : 'effort'\n            }\n        },\n\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} context The tooltip context info\n         * @param {ResourceAllocationInterval} context.datum The histogram bar being hovered info\n         * @param {Core.widget.Tooltip} context.tip The tooltip instance\n         * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n         * @param {HTMLElement} context.activeTarget The target element that triggered the show\n         * @param {Event} context.event The raw DOM event\n         * @param {SchedulerPro.model.ResourceModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n\n            const { inEventTimeSpan, isGroup } = datum;\n\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n\n            return result;\n        },\n\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         */\n        showBarText : false,\n\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         const resourceHistogram = this.owner;\n         *\n         *         const { showBarText } = resourceHistogram;\n         *\n         *         let result = '';\n         *\n         *         // respect existing API - show bar texts only when \"showBarText\" is true\n         *         // and if some work is done in the tick\n         *         if (showBarText && datum.effort) {\n         *\n         *             const unit = resourceHistogram.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` will refer to the {@link Core/widget/graph/Histogram} instance, not\n         * this class instance.\n         * To access the view please use `this.owner` in the function:\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const resourceHistogram = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n\n        groupBarTipAssignmentLimit : 5,\n\n        /**\n         * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.\n         * @config {Boolean}\n         * @default\n         */\n        includeInactiveEvents : false,\n\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourcehistogram-histogram'\n        },\n\n        fixedRowHeight : true\n    };\n\n    //endregion\n\n    //region Constructor/Destructor\n\n    get timeAxis() {\n        return super.timeAxis;\n    }\n\n    set timeAxis(timeAxis) {\n        const currentTimeAxis = this._timeAxis;\n\n        super.timeAxis = timeAxis;\n\n        if (this.partner && !timeAxis || (currentTimeAxis && currentTimeAxis === timeAxis)) {\n            return;\n        }\n\n        this._timeAxis.ion({\n            name           : 'timeAxis',\n            endReconfigure : 'onTimeAxisEndReconfigure',\n            thisObj        : this\n        });\n    }\n\n    afterConfigure() {\n        super.afterConfigure();\n\n        const me = this;\n\n        me.onRecordAllocationCalculated = me.onRecordAllocationCalculated.bind(me);\n        me.onCommitAsyncCompletion = me.onCommitAsyncCompletion.bind(me);\n    }\n\n    onDestroy() {\n        super.onDestroy(...arguments);\n\n        // get graph ..if the project is not destroyed yet\n        const graph = this.project.getGraph?.();\n\n        if (graph && this.ticksIdentifier) {\n            graph.removeIdentifier(this.ticksIdentifier);\n        }\n    }\n\n    clearHistogramDataCache(record) {\n        if (!record) {\n            // remove cached histogram data (which is a set of graph entities) from the graph\n            for (const [record, entity] of this.getHistogramDataCache()?.entries()) {\n                record.removeEntity?.(entity);\n            }\n        }\n\n        super.clearHistogramDataCache(...arguments);\n    }\n\n    //endregion\n\n    //region Project\n\n    bindProject(project) {\n        this.detachListeners('resourceHistogramProject');\n\n        project.ion({\n            name                  : 'resourceHistogramProject',\n            refresh               : 'internalOnProjectRefresh',\n            delayCalculationStart : 'onProjectDelayCalculationStart',\n            delayCalculationEnd   : 'onProjectDelayCalculationEnd',\n            repopulateReplica     : 'onRepopulateReplica',\n\n            thisObj : this\n        });\n    }\n\n    updateProject(project) {\n        this.bindProject(project);\n\n        // project implements CrudManager API\n        this.crudManager = project;\n\n        this.store = project.resourceStore;\n    }\n\n    //endregion\n\n    //region Internal\n\n    getRowHeight() {\n        return this.rowHeight;\n    }\n\n    convertEffortUnit(value, unit, toUnit) {\n        return this.project.run('$convertDuration', value, unit, toUnit);\n    }\n\n    updateUseProjectTimeUnitsForScale() {\n        const me = this;\n        // Below this.scalePoints assignment of doesn't work until ResourceHistogram is painted\n        // since ScaleWidget being constructed tries to read its rootElement which results:\n        // \"Floating Widgets must have \"rootElement\" to be ...\"\n        if (me.isPainted) {\n            // we need to regenerate ScaleColumn points according to new unit values\n            const eventParams = { scalePoints : me.generateScalePoints() };\n\n            /**\n             * Fires when the component generates points for the {@link #property-scaleColumn scale column}.\n             *\n             * Use a listeners to override the generated scale points:\n             *\n             * ```javascript\n             * new ResourceHistogram({\n             *     ...\n             *     listeners : {\n             *         generateScalePoints(params) {\n             *             // provide text for each scale point (if not provided already)\n             *             params.scalePoints.forEach(point => {\n             *                 point.text = point.text || point.value;\n             *             });\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @param {SchedulerPro.view.ResourceHistogram} source The component instance\n             * @param {ScalePoint[]} scalePoints Array of objects representing scale points. Each entry can have properties:\n             * - `value` - point value\n             * - `unit` - point value unit\n             * - `text` - label text (if not provided the point will not have a label displayed)\n             * @event generateScalePoints\n             * @category Scale column\n             */\n            me.trigger('generateScalePoints', eventParams);\n\n            // allow to override the points in a listener\n            me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n\n            me.scheduleRefreshRows();\n        }\n    }\n\n    updateShowBarText(value) {\n        this.scheduleRefreshRows();\n    }\n\n    get eventStore() {\n        return this.project?.eventStore;\n    }\n\n    set eventStore(eventStore) {\n        super.eventStore = eventStore;\n    }\n\n    convertUnitsToHistogramValue(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, unit, TimeUnit.Millisecond)\n            : DateHelper.asMilliseconds(value, unit);\n    }\n\n    convertHistogramValueToUnits(value, unit) {\n        return this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(value, TimeUnit.Millisecond, unit)\n            : DateHelper.as(unit, value);\n    }\n\n    buildScalePointText(scalePoint) {\n        return `${scalePoint.value}${DateHelper.getShortNameOfUnit(scalePoint.unit)}`;\n    }\n\n    /**\n     * Generates points for the {@link #property-scaleColumn scale column}.\n     *\n     * **Override the method to customize the scale column points.**\n     *\n     * @param {Number} [scaleMax] Maximum value for the scale. Uses current timeaxis increment if not provided.\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] Time\n     * unit `scaleMax` argument is expressed in.\n     * Uses current timeaxis unit if not provided.\n     * @returns {ScalePoint[]} Array of objects representing scale points. Each entry can have properties:\n     * - `value` - point value\n     * - `unit` - point value unit\n     * - `text` - label text (if not provided the point will not have a label displayed)\n     * @category Scale column\n     */\n    generateScalePoints(scaleMax, unit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n\n        const\n            { timeAxis } = this,\n            scalePoints           = [];\n\n        scaleMax = scaleMax || timeAxis.increment;\n        unit = unit || timeAxis.unit;\n\n        let scaleStep;\n\n        // If the ticks are defined as 1 unit let's break it down to smaller units\n        if (scaleMax === 1) {\n            // getting timeaxis tick sub-unit and number of them in a tick\n            unit     = DateHelper.getSmallerUnit(unit);\n            scaleMax = Math.round(\n                this.useProjectTimeUnitsForScale ? this.convertEffortUnit(scaleMax, timeAxis.unit, unit)\n                    : DateHelper.as(unit, scaleMax, timeAxis.unit)\n            );\n        }\n\n        // Let's try to guess how many points in the scale will work nicely\n        for (const factor of [7, 5, 4, 3, 2]) {\n            // unitsNumber is multiple of \"factor\" -> we generate \"factor\"-number of points\n            if (!(scaleMax % factor)) {\n                scaleStep = scaleMax / factor;\n                break;\n            }\n        }\n\n        // fallback to a single point equal to maximum value\n        if (!scaleStep) {\n            scaleStep = scaleMax;\n        }\n\n        for (let value = scaleStep; value <= scaleMax; value += scaleStep) {\n            scalePoints.push({\n                value\n            });\n        }\n\n        const lastPoint = scalePoints[scalePoints.length - 1];\n        // put unit and label to the last point\n        lastPoint.unit = unit;\n        lastPoint.text = this.buildScalePointText(lastPoint);\n\n        return scalePoints;\n    }\n\n    updateViewPreset(viewPreset) {\n        const me = this;\n\n        // Set a flag indicating that we're inside of `updateViewPreset` so our `onTimeAxisEndReconfigure` will skip its call.\n        // We call it here later.\n        me._updatingViewPreset = true;\n        super.updateViewPreset(...arguments);\n        me._updatingViewPreset = false;\n\n        // In `super.updateViewPreset` function `this.render` is called which checks if the engine is not dirty\n        // ..and we modify `ticksIdentifier` atom in `onTimeAxisEndReconfigure`\n        // so the engine state gets dirty and rendering gets delayed which ends up an exception.\n        // So we call `onTimeAxisEndReconfigure` after super `updateViewPreset` code\n        // to keep the engine non-dirty while zooming/setting a preset.\n        // This scenario is covered w/ SchedulerPro/tests/pro/view/ResourceHistogramZoom.t.js\n        if (me.project.isInitialCommitPerformed && me.isPainted) {\n            me.onTimeAxisEndReconfigure();\n        }\n    }\n\n    onRepopulateReplica() {\n        this.ticksIdentifier = null;\n        this.clearHistogramDataCache();\n    }\n\n    buildTicksIdentifier() {\n        const\n            me    = this,\n            graph = me.project.getGraph();\n\n        if (!me.ticksIdentifier) {\n            me.ticksIdentifier = graph.addIdentifier(CalculatedValueGen.new());\n        }\n        else {\n            const prevTicksCalendar = graph.read(me.ticksIdentifier);\n\n            me.project.clearCombinationsWith(prevTicksCalendar);\n        }\n\n        me.ticksIdentifier.writeToGraph(graph, new BaseCalendarMixin({\n            unspecifiedTimeIsWorking : false,\n            intervals                : me.timeAxis.ticks.map(tick => {\n                return {\n                    startDate : tick.startDate,\n                    endDate   : tick.endDate,\n                    isWorking : true\n                };\n            })\n        }));\n\n        // process ticks to detect if their widths are monotonous\n        // or some tick has a different width value\n        me.collectTicksWidth();\n\n        return me.ticksIdentifier;\n    }\n\n    onProjectDelayCalculationStart() {\n        this.suspendRefresh();\n    }\n\n    onProjectDelayCalculationEnd() {\n        this.resumeRefresh();\n    }\n\n    projectUnitsHasChanged() {\n        const { project } = this;\n\n        return project.daysPerMonth !== this._projectDaysPerMonth ||\n            project.daysPerWeek !== this._projectDaysPerWeek ||\n            project.hoursPerDay !== this._projectHoursPerDay;\n    }\n\n    internalOnProjectRefresh({ source, isInitialCommit, isCalculated }) {\n        if (isCalculated) {\n            const me = this;\n\n            if (!me.ticksIdentifier) {\n                me.onTimeAxisEndReconfigure();\n            }\n\n            // if project units has changed and we use them for scale points\n            if (me.useProjectTimeUnitsForScale && me.projectUnitsHasChanged()) {\n                me._projectDaysPerMonth = source.daysPerMonth;\n                me._projectDaysPerWeek = source.daysPerWeek;\n                me._projectHoursPerDay = source.hoursPerDay;\n\n                // regenerate scale points\n                const eventParams = { scalePoints : me.generateScalePoints() };\n\n                me.trigger('generateScalePoints', eventParams);\n\n                // allow to override the points in a listener\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n\n            // If rowManager got no topRow yet - reinitialize it otherwise refresh does n0thing\n            if (!me.rowManager.topRow) {\n                me.rowManager.reinitialize();\n            }\n            // enable view refreshing back (trigger refresh if that's an initial commit)\n            else {\n                me.resumeRefresh(isInitialCommit);\n            }\n        }\n    }\n\n    relayStoreDataChange(event) {\n        super.relayStoreDataChange(event);\n\n        if (this.store.count === 0) {\n            // To clear histogram when no rows to refresh\n            this.histogramWidget.data = [];\n            this.histogramWidget.refresh();\n        }\n    }\n\n    changeHistogramWidget(widget, oldWidget) {\n        const me = this;\n\n        if (!oldWidget) {\n            const { series } = me;\n\n            if (!me.showMaxEffort && series.maxEffort) {\n                series.maxEffort = false;\n            }\n\n            widget = super.changeHistogramWidget(...arguments);\n        }\n\n        return widget;\n    }\n\n    getRectConfig(rectConfig, datum, index, series) {\n        if (datum.inEventTimeSpan) {\n            const\n                { topValue } = this,\n                value = datum[series.field],\n                forceHeight = series.stretch ? 1 : datum.height;\n\n            rectConfig.height = forceHeight || (value > topValue ? topValue : value) / topValue;\n            rectConfig.y = 1 - rectConfig.height;\n\n            return rectConfig;\n        }\n    }\n\n    // Injectable method.\n    getRectClassDefault(series, rectConfig, datum) {\n        if (series.id === 'effort') {\n            switch (true) {\n                case datum.isOverallocated :\n                    return 'b-overallocated';\n\n                case datum.isUnderallocated :\n                    return 'b-underallocated';\n            }\n        }\n\n        return '';\n    }\n\n    get effortFormatter() {\n        const\n            me     = this,\n            format = me.effortFormat;\n\n        let formatter = me._effortFormatter;\n\n        if (!formatter || me._effortFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n\n            me._effortFormatter = formatter;\n        }\n\n        return formatter;\n    }\n\n    /**\n     * Formats effort value to display in the component bars and tooltips.\n     * @param {Number} effort Effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Effort value unit\n     * @param {Boolean} [showEffortUnit=this.showEffortUnit] Provide `true` to include effort unit. If not provided\n     * uses {@link #config-showEffortUnit} value.\n     * @returns {String} Formatted effort value.\n     */\n    getEffortText(effort, unit, showEffortUnit = this.showEffortUnit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n\n        const { scaleUnit, effortFormatter } = this;\n\n        unit = unit || scaleUnit;\n\n        const\n            localizedUnit = DateHelper.getShortNameOfUnit(unit),\n            effortInUnits = this.convertHistogramValueToUnits(effort, unit);\n\n        return effortFormatter.format(effortInUnits) + (showEffortUnit ? localizedUnit : '');\n    }\n\n    getBarTipEffortUnit() {\n        const\n            { effortUnit, barTipEffortUnit, timeAxis } = this,\n            defaultUnit                                = barTipEffortUnit || effortUnit;\n\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n\n    getGroupBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n\n        let result = '';\n\n        if (datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            let assignmentsArray = [...datum.resourceAllocation.entries()]\n                .filter(([resource, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n\n            const assignments = assignmentsArray.map(([resource, info]) => {\n\n                return assignmentTpl.replace('{resource}', StringHelper.encodeHtml(resource.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n\n            }).join('<br>') + assignmentsSuffix;\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    getResourceBarTip({ datum }) {\n        const\n            me           = this,\n            { timeAxis } = me;\n\n        let result = '';\n\n        if (datum.inEventTimeSpan) {\n            const\n                unit       = me.getBarTipEffortUnit(),\n                allocated  = me.getEffortText(datum.effort, unit),\n                available  = me.getEffortText(datum.maxEffort, unit);\n\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            if (datum.resource) {\n                result = result\n                    .replace('{resource}', StringHelper.encodeHtml(datum.resource.name));\n            }\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns unit to display effort values in when rendering the histogram bars.\n     * The method by default returns {@link #config-barTextEffortUnit} value if provided\n     * and if not falls back to {@link #config-effortUnit} value.\n     * But it also takes zooming into account and when\n     * the timeaxis ticks unit gets smaller than the default value the ticks unit is returned.\n     *\n     * @returns {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} Time unit to display\n     * effort values in.\n     */\n    getBarTextEffortUnit() {\n        const\n            { effortUnit, barTextEffortUnit, timeAxis } = this,\n            defaultUnit                                 = barTextEffortUnit || effortUnit;\n\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n\n    /**\n     * The default method that returns the text to render inside a bar if no\n     * {@link #config-getBarText} function was provided.\n     *\n     * The method can be used in a {@link #config-getBarText} function\n     * to invoke the default implementation:\n     *\n     * ```javascript\n     * new ResourceHistogram({\n     *     getBarText(datum) {\n     *         const resourceHistogram = this.owner;\n     *\n     *         // get default bar text\n     *         let result = resourceHistogram.getBarTextDefault();\n     *\n     *         // if the resource is overallocated in that tick display \"Overallocated! \" string\n     *         // before the allocation value\n     *         if (result && datum.maxEffort < datum.effort) {\n     *             result = 'Overallocated! ' + result;\n     *         }\n     *\n     *         return result;\n     *     },\n     * })\n     * ```\n     * The following parameters are passed:\n     * @param {ResourceAllocationInterval} datum The data of the bar being rendered\n     * @param {Number} index The index of the datum being rendered\n     * @param {String} series Identifier of the series (provided only if the histogram widget\n     * {@link Core/widget/graph/Histogram#config-singleTextForAllBars} is `false`)\n     * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n     * being rendered.\n     * @returns {String} Text to render inside the bar\n     */\n    getBarTextDefault(datum, index) {\n        const\n            view            = this.owner,\n            { showBarText } = view;\n\n        let result = '';\n\n        if (showBarText && datum.inEventTimeSpan) {\n            const unit = view.getBarTextEffortUnit();\n            result     = view.getEffortText(datum.effort, unit);\n        }\n\n        return result;\n    }\n\n    updateShowMaxEffort(value) {\n        const me = this;\n\n        me._showMaxEffort = value;\n\n        const widget = me._histogramWidget;\n\n        // bail out in case there is no widget constructed yet\n        if (!widget) {\n            return;\n        }\n\n        const { series } = me;\n\n        if (!value) {\n            if (series.maxEffort) {\n                me._seriesMaxEffort = series.maxEffort;\n                series.maxEffort = false;\n            }\n        }\n        else if (typeof value === 'object') {\n            series.maxEffort = value;\n        }\n        else if (typeof me._seriesMaxEffort === 'object') {\n            series.maxEffort = me._seriesMaxEffort;\n        }\n        else {\n            series.maxEffort = {\n                id    : 'maxEffort', // no-sanity\n                type  : 'outline',\n                field : 'maxEffort'\n            };\n        }\n\n        me.scheduleRefreshRows();\n    }\n\n    updateIncludeInactiveEvents(value) {\n        // update collected reports wih new includeInactiveEvents flag state\n        this.getHistogramDataCache()?.forEach(allocationReport => allocationReport.includeInactiveEvents = value);\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisEndReconfigureInternal() {\n        const me = this;\n\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            const { unit, increment } = me.timeAxis;\n\n            // re-generate scale point on zooming in/out\n            if (unit !== me._lastTimeAxisUnit || increment !== me._lastTimeAxisIncrement) {\n                // remember last used unit & increment to distinguish zooming from timespan changes\n                me._lastTimeAxisUnit = unit;\n                me._lastTimeAxisIncrement = increment;\n\n                // regenerate scale points\n                const\n                    scalePoints = me.generateScalePoints(),\n                    eventParams = { scalePoints };\n\n                // allow to override the points in a listener\n                me.trigger('generateScalePoints', eventParams);\n\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n\n            // <remove-on-release>\n            // TODO need to re-build identifier only if:\n            // a) time axis unit/increment has changed\n            // b) time span has changed\n            // </remove-on-release>\n            me.buildTicksIdentifier();\n        }\n    }\n\n    calculateRowHeights() {}\n\n    onTimeAxisEndReconfigure() {\n        const me = this;\n\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            if (me.project.graph) {\n                me.onTimeAxisEndReconfigureInternal();\n            }\n            // In delayed calculation mode (the default) we might not be in graph yet, postpone buildTicksIdentifier until we are\n            else {\n                me.project.ion({\n                    graphReady() {\n                        me.onTimeAxisEndReconfigureInternal();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    extractHistogramDataArray(allocationReport, record) {\n        return allocationReport.allocation.total;\n    }\n\n    renderRows() {\n        const me = this;\n\n        if (!me.ticksIdentifier && me.project.isInitialCommitPerformed) {\n            // If we render rows but have no ticksIdentifier means data loading and 1st commit\n            // happened before the histogram was created.\n            // Handle timeaxis settings to build ticksIdentifier and scale column points.\n            me.onTimeAxisEndReconfigure();\n\n            // If timeView range is not defined then the timeaxis header looks empty so fill it in here (it triggers the column refresh)\n            if (!me.timeView.startDate || !me.timeView.endDate) {\n                me.timeView.range = {\n                    startDate : me.startDate,\n                    endDate   : me.endDate\n                };\n            }\n        }\n\n        return super.renderRows(...arguments);\n    }\n\n    async shiftPrevious() {\n        super.shiftPrevious(...arguments);\n\n        await this.project.commitAsync();\n    }\n\n    async shiftNext() {\n        super.shiftNext(...arguments);\n\n        await this.project.commitAsync();\n    }\n\n    onCommitAsyncCompletion() {\n        // trigger rendering after the Engine finishes a transaction\n        this.renderScheduledRecords();\n        this._renderOnCommitPromise = null;\n    }\n\n    onRecordAllocationCalculated(allocation) {\n        if (!this.isDestroying) {\n            // update cache to trigger histogramDataCacheSet event\n            this.setHistogramDataCache(allocation.resource, allocation.owner);\n        }\n    }\n\n    buildResourceAllocationReport(resource) {\n        return this.project.resourceAllocationInfoClass.new({\n            includeInactiveEvents : this.includeInactiveEvents,\n            ticks                 : this.ticksIdentifier,\n            resource\n        });\n    }\n\n    /**\n     * Returns the provided record's allocation data.\n     * The process of allocation collecting is asynchronous so the method returns a `Promise`\n     * that provides the data once resolved.\n     *\n     * The method used as the default value of {@link #config-getRecordData} config.\n     * @param {SchedulerPro.model.ResourceModel} record Resource record to collect allocation for.\n     * @returns {Promise} A `Promise` that provides the provided resource\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInfo allocation info} when resolved.\n     */\n    async getRecordAllocationData(record) {\n        const\n            me = this,\n            { project } = me;\n\n        // No drawing before engine's initial commit\n        while (!me.ticksIdentifier || !project.isInitialCommitPerformed) {\n            await project.await('commitFinalized');\n        }\n\n        // Ignore resources not in the graph\n        if (record.graph) {\n            const\n                graph            = project.getGraph(),\n                allocationReport = me.buildResourceAllocationReport(record);\n\n            record.addEntity(allocationReport);\n\n            await graph.readAsync(allocationReport.$.allocation);\n\n            // after this transaction finishes we will\n            // track further allocation report changes with onRecordAllocationCalculated method\n            graph.ongoing.then(() => {\n                graph.addListener(allocationReport.$.allocation, me.onRecordAllocationCalculated);\n            });\n\n            return allocationReport;\n        }\n    }\n\n    onHistogramDataCacheSet() {\n        super.onHistogramDataCacheSet(...arguments);\n\n        const me = this;\n\n        // trigger rendering right after the Engine finishes its current commitAsync() call\n        if (!me._renderOnCommitPromise) {\n            me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion);\n        }\n    }\n\n    aggregateRecordsHistogramData(records, aggregationContext) {\n        const result = super.aggregateRecordsHistogramData(records, aggregationContext);\n\n        if (Objects.isPromise(result)) {\n            return result.then(buildReturnedValue);\n        }\n\n        return buildReturnedValue(result);\n    }\n\n    /**\n     * The default function that initializes a target group record entry.\n     *\n     * The method is used as {@link #config-initAggregatedDataEntry} default value.\n     * @returns {ResourceAllocationInterval} Returns an empty allocation entry.\n     * @category Parent histogram data collecting\n     */\n    initAggregatedAllocationEntry() {\n        return {\n            tick               : null,\n            effort             : 0,\n            maxEffort          : 0,\n            units              : 0,\n            isGroup            : true,\n            inEventTimeSpan    : false,\n            resourceAllocation : new Map()\n        };\n    }\n\n    /**\n     * The default function used for aggregating a child record histogram data values to its parent entry.\n     * The function sums up `effort` and `maxEffort` series values. It also propagates\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isOverallocated} and\n     * {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval isUnderallocated} values so if there\n     * is a child having the corresponding value as `true` it will be `true` on the parent level as well.\n     *\n     * All children {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments} are united\n     * on the parent level {@link SchedulerPro/model/ResourceModel#typedef-ResourceAllocationInterval assignments}\n     * property.\n     *\n     * The method is used as {@link #config-aggregateDataEntry} default value.\n     *\n     * @param {ResourceAllocationInterval} aggregated Target parent data entry to aggregate the entry into.\n     * @param {ResourceAllocationInterval} entry Current entry to aggregate into `aggregated`.\n     * @param {Number} arrayIndex Index of the current record (among other\n     * records being aggregated).\n     * @param {Number} colIndex `entry` index in the current array\n     * @returns {ResourceAllocationInterval} Resulting parent data entry.\n     * @category Parent histogram data collecting\n     */\n    aggregateAllocationEntry(acc, entry, _recordIndex, _entryIndex, aggregationContext) {\n        acc.resourceAllocation.set(entry.resource, entry);\n\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n\n        if (entry.assignments) {\n            if (acc.assignments) {\n                entry.assignments.forEach(assignment => acc.assignments.add(assignment));\n            }\n            else {\n                acc.assignments = new Set(entry.assignments);\n            }\n        }\n\n        return acc;\n    }\n\n    generateGroupScalePoints(record) {\n        const\n            me          = this,\n            children    = me.getGroupChildren(record),\n            scalePoints = me.generateScalePoints(me.timeAxis.increment * children.length),\n            eventParams = { scalePoints, groupParent : record };\n\n        me.trigger('generateScalePoints', eventParams);\n\n        return eventParams.scalePoints;\n    }\n\n    processRecordRenderData(renderData) {\n        // Override histogram topValue and scalePoints for group records\n        if (this.isGroupRecord(renderData.record)) {\n            const\n                scalePoints = this.generateGroupScalePoints(renderData.record),\n                topValue    = this.getTopValueByScalePoints(scalePoints);\n\n            renderData.scaleWidgetConfig = { scalePoints };\n            renderData.histogramConfig = { ...renderData.histogramConfig, topValue };\n        }\n        else {\n            renderData = super.processRecordRenderData(renderData);\n        }\n\n        return renderData;\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        const me = this;\n\n        // Translate scale points if we have them (update localization on construction step is called too early)\n        // and the scale points is generated by the histogram which means their labels use localized unit abbreviations\n        if (me._generatedScalePoints === me.scalePoints && me.scalePoints) {\n            me.scalePoints.forEach(scalePoint => {\n                // if the point is labeled let's rebuild its text using new locale\n                if (scalePoint.text && scalePoint.unit) {\n                    scalePoint.text = me.buildScalePointText(scalePoint);\n                }\n            });\n        }\n\n        super.updateLocalization(...arguments);\n    }\n\n    //endregion\n\n}\n\nResourceHistogram.initClass();\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport ResourceHistogram from './ResourceHistogram.js';\nimport ResourceUtilizationStore from '../data/ResourceUtilizationStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport '../../Grid/column/TreeColumn.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tree from '../../Grid/feature/Tree.js';\n\n/**\n * @module SchedulerPro/view/ResourceUtilization\n */\n\n/**\n * View showing the utilization levels of the project resources.\n * The resources are displayed in a summary list where each row can\n * be expanded to show the events assigned for the resource.\n *\n * This demo shows the Resource utilization widget:\n * {@inlineexample SchedulerPro/view/ResourceUtilization.js}\n *\n * The view requires a {@link #config-project Project instance} to be provided:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad  : true,\n *     transport : {\n *         load : {\n *             url : 'examples/schedulerpro/view/data.json'\n *         }\n *     }\n * });\n *\n * const resourceUtilization = new ResourceUtilization({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true\n * });\n * ```\n *\n * ## Pairing the component\n *\n * You can also pair the view with other timeline views such as the Gantt or Scheduler,\n * using the {@link #config-partner} config.\n *\n  * ## Changing displayed values\n *\n * To change the displayed bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceUtilization({\n *     getBarText(datum) {\n *         const view = this.owner;\n *\n *         // get default bar text\n *         let result = view.getBarTextDefault(...arguments);\n *\n *         // For resource records we will display the time left for allocation\n *         if (result && datum.resource) {\n *\n *             const unit = view.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = view.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n * })\n * ```\n *\n * @extends SchedulerPro/view/ResourceHistogram\n * @classtype resourceutilization\n * @widget\n */\n\nexport default class ResourceUtilization extends ResourceHistogram {\n\n    //region Config\n\n    static $name = 'ResourceUtilization';\n\n    static type = 'resourceutilization';\n\n    static configurable = {\n        /**\n         * @hideconfigs crudManager, crudManagerClass, assignments, resources, events, dependencies, assignmentStore,\n         * resourceStore, eventStore, dependencyStore, data, timeZone\n         */\n\n        scaleColumn : null,\n\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         const resourceUtilization = this.owner;\n         *\n         *         // get default bar text\n         *         let result = view.getBarTextDefault();\n         *\n         *         // For resource records we will display the time left for allocation\n         *         if (result && datum.resource) {\n         *\n         *             const unit = resourceUtilization.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceUtilization.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` in the function will refer to the {@link Core/widget/graph/Histogram} instance.\n         * To access the `ResourceUtilization` instance please use `this.owner` in the function body:\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const view = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationInterval|AssignmentAllocationInterval} datum The datum being rendered.\n         * Either {@link SchedulerPro.model.ResourceModel#typedef-ResourceAllocationInterval} object for resource records (root level records)\n         * or {@link SchedulerPro.model.ResourceModel#typedef-AssignmentAllocationInterval} object for assignment records\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Text to render inside the bar\n         * @config {Function} getBarText\n         */\n\n        /* */\n\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourceutilization-cell',\n\n        /**\n         * A ProjectModel instance (or a config object) to display resource allocation of.\n         *\n         * Note: This config is mandatory.\n         * @config {ProjectModelConfig|SchedulerPro.model.ProjectModel} project\n         */\n\n        rowHeight : 30,\n\n        showEffortUnit : false,\n\n        /**\n         * @config {Boolean} showMaxEffort\n         * @hide\n         */\n\n        showMaxEffort : false,\n\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         * @default\n         */\n        showBarText : true,\n\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} data The backing data of the histogram rectangle\n         * @param {Object} data.rectConfig The rectangle configuration object\n         * @param {Object} data.datum The hovered bar data\n         * @param {Number} data.index The index of the hovered bar data\n         * @param {SchedulerPro.model.ResourceUtilizationModel} data.record The record which effort\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n\n            const { inEventTimeSpan, isGroup, resource, assignment } = datum;\n\n            // const barTip = this.callback('getBarTextTip', me, [renderData, data[index], index]);\n            if (inEventTimeSpan) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else if (assignment) {\n                    result = this.getAssignmentBarTip(...arguments);\n                }\n                else if (resource) {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n\n            return result;\n        },\n\n        series : {\n            effort : {\n                // We don't want the histogram bar heights based on effort\n                // so set \"stretch\" here to make bars to take the whole row height\n                stretch : true\n            }\n        },\n\n        readOnly : true,\n\n        columns : [\n            {\n                type        : 'tree',\n                field       : 'name',\n                text        : 'L{nameColumnText}',\n                localeClass : this\n            }\n        ],\n\n        histogramWidget : {\n            cls : 'b-hide-offscreen b-resourceutilization-histogram'\n        }\n    };\n\n    //endregion\n\n    /**\n     * @event generateScalePoints\n     * @hide\n     */\n\n    /**\n     * @function generateScalePoints\n     * @hide\n     */\n\n    /**\n     * @member {Scheduler.column.ScaleColumn} scaleColumn\n     * @hide\n     */\n\n    construct() {\n        super.construct(...arguments);\n\n        this.rowManager.ion({\n            renderRow : 'onRowManagerRenderRow',\n            thisObj   : this\n        });\n    }\n\n    updateProject(project) {\n        const store = this.store;\n\n        super.updateProject(project);\n\n        // Super call sets this.store to resource store\n        // 1) revert if a store was provided explicitly\n        // 2) otherwise generating ResourceUtilizationStore\n        this.store = store || this.buildStore(project);\n    }\n\n    updateResourceStore(resourceStore) {\n        this._resourceStore = resourceStore;\n    }\n\n    buildStore(project) {\n        project = this.project;\n        return ResourceUtilizationStore.new({ project });\n    }\n\n    //region Render\n\n    async getTipHtml(tooltipContext) {\n        const\n            index          = tooltipContext.activeTarget.dataset.index,\n            record         = this.getRecordFromElement(tooltipContext.activeTarget),\n            allocationData = await this.getRecordHistogramData(record),\n            datum          = this.extractHistogramDataArray(allocationData, record)[parseInt(index, 10)];\n\n        return this.barTooltipTemplate({ ...tooltipContext, record, index, datum });\n    }\n\n    getRecordAllocationData(record, ...args) {\n        record = this.resolveRecordToOrigin(record);\n\n        if (record.isResourceModel) {\n            return super.getRecordAllocationData(record, ...args);\n        }\n        else if (record.isAssignmentModel) {\n            // if that's an assignment re-invoke this.getRecordHistogramData() for resource\n            return this.getRecordHistogramData(record.resource, ...args);\n        }\n    }\n\n    onDestroy() {\n        if (this.destroyStores) {\n            this.store?.destroy();\n        }\n\n        super.onDestroy();\n    }\n\n    onRecordAllocationCalculated(allocation) {\n        const me = this;\n\n        if (!me.isDestroying) {\n            const\n                allocationReport  = allocation.owner,\n                assignmentRecords = [...allocation.byAssignments.keys()]\n                    .reduce((acc, assignment) => {\n                        const record = me.resolveOriginToRecord(assignment);\n                        if (record) {\n                            acc.push(record);\n                        }\n                        return acc;\n                    }, []),\n                resourceRecord = me.resolveOriginToRecord(allocation.resource);\n\n            if (resourceRecord) {\n                me.setHistogramDataCache(resourceRecord, allocationReport);\n            }\n\n            for (const assignmentRecord of assignmentRecords) {\n                me.setHistogramDataCache(assignmentRecord, allocationReport);\n            }\n\n            // trigger rendering right after the Engine finishes its current commitAsync() call\n            if (!me._renderOnCommitPromise) {\n                me._renderOnCommitPromise = me.project.graph.ongoing.then(me.onCommitAsyncCompletion.bind(me));\n            }\n        }\n    }\n\n    onRowManagerRenderRow({ row, record }) {\n        const isGroup = this.isGroupRecord(record);\n\n        record = this.resolveRecordToOrigin(record);\n\n        // indicate row kinds\n        row.assignCls({\n            'b-resource-row'   : record.isResourceModel || isGroup,\n            'b-assignment-row' : !isGroup && record.isAssignmentModel\n        });\n    }\n\n    /**\n     * The view store records wrap \"real\" resources and assignments.\n     * This method resolves a record to its original record resource or assignment.\n     * If the record does not wrap any record (happens for example for parent records when\n     * using {@link Grid/feature/TreeGroup} feature) then the method returns the record itself.\n     * @param {SchedulerPro.model.ResourceUtilizationModel} record The view store record\n     * @returns {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel|SchedulerPro.model.ResourceUtilizationModel} Original model\n     */\n    resolveRecordToOrigin(record) {\n        return record.origin || record.$original || record;\n    }\n\n    resolveOriginToRecord(origin) {\n        let record = origin;\n\n        if (this.store.isResourceUtilizationStore) {\n            record = this.store.getModelByOrigin(origin) || record;\n        }\n        else if (origin.hasLinks) {\n            for (const link of origin.$links) {\n                if (this.store.includes(link)) {\n                    return link;\n                }\n            }\n        }\n\n        return record;\n    }\n\n    getHistogramDataCache(record) {\n        if (record) {\n            record = this.resolveRecordToOrigin(record);\n        }\n\n        return super.getHistogramDataCache(record);\n    }\n\n    setHistogramDataCache(record, data) {\n        record = this.resolveRecordToOrigin(record);\n\n        return super.setHistogramDataCache(record, data);\n    }\n\n    scheduleRecordRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n\n        return super.scheduleRecordRefresh(record);\n    }\n\n    scheduleRecordParentsRefresh(record) {\n        record = this.resolveOriginToRecord(record);\n\n        return super.scheduleRecordParentsRefresh(record);\n    }\n\n    // <remove-on-release>\n    // TODO check if this is used\n    // </remove-on-release>\n    getCell(data) {\n        // if real resource or assignment is provided\n        if (data.record?.isResourceModel || data.record?.isAssignmentModel) {\n            // use its wrapper record to find proper cell\n            data.record = this.resolveOriginToRecord(data.record);\n        }\n\n        return super.getCell(data);\n    }\n\n    changeHistogramWidget(widget) {\n        if (widget && !widget.isHistogram) {\n            if (!this.getBarTextRenderData && !widget?.getBarTextRenderData) {\n                widget.getBarTextRenderData = this.getBarTextRenderDataDefault;\n            }\n\n            widget.height = this.rowHeight;\n        }\n\n        return super.changeHistogramWidget(widget);\n    }\n\n    getBarTextRenderDataDefault(renderData, datum, index) {\n        // place effort text centered vertically\n        renderData.y = '50%';\n\n        return renderData;\n    }\n\n    extractHistogramDataArray(allocationReport, record) {\n        let data;\n\n        const origin = this.resolveRecordToOrigin(record);\n\n        if (this.isGroupRecord(record)) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isResourceModel) {\n            data = allocationReport.allocation.total;\n        }\n        else if (origin.isAssignmentModel) {\n            // Not having an assignment in the report could mean\n            // we've just added the assignment and it's not yet processed by the Engine.\n            // So in this case we just do and empty row rendering\n            data = allocationReport.allocation.byAssignments.get(origin) || [];\n        }\n\n        return data;\n    }\n\n    initAggregatedAllocationEntry(_entryIndex, aggregationContext) {\n        // keep list of resources met when aggregating children\n        if (!aggregationContext.targetArray.$resources) {\n            aggregationContext.targetArray.$resources = new Set();\n        }\n\n        return {\n            tick            : null,\n            effort          : 0,\n            maxEffort       : 0,\n            units           : 0,\n            isGroup         : true,\n            inEventTimeSpan : false,\n            members         : new Map(),\n            resources       : new Set()\n        };\n    }\n\n    aggregateAllocationEntry(acc, entry, recordIndex, entryIndex, aggregationContext) {\n        const\n            { targetArray } = aggregationContext,\n            recordArray = aggregationContext.arrays[recordIndex];\n\n        acc.tick             = entry.tick;\n        acc.isOverallocated  = acc.isOverallocated  || entry.isOverallocated;\n        acc.isUnderallocated = acc.isUnderallocated || entry.isUnderallocated;\n        acc.inEventTimeSpan  = acc.inEventTimeSpan || entry.inEventTimeSpan;\n\n        // For a group entry we add members property that includes child records regrdless of their types\n        if (entry.members) {\n            acc.members = new Map([...acc.members, ...entry.members]);\n        }\n        else {\n            acc.members.set(entry.resource || entry.assignment, entry);\n        }\n\n        // If that's a group entry that already met resources\n        if (recordArray.$resources) {\n            // inherit the resources\n            targetArray.$resources = new Set([...targetArray.$resources, ...recordArray.$resources]);\n        }\n        // If that's a resource or assignment row entry\n        else if (entry.assignment || entry.resource) {\n            const resource = entry.resource || entry.assignment.resource;\n\n            // remember we met the resource (we need this to correctly calculate maxEffort on upper levels)\n            targetArray.$resources.add(resource);\n\n            const resourceEntry = this.getHistogramDataCache(resource).allocation.total[entryIndex];\n\n            acc.isOverallocated  = acc.isOverallocated || resourceEntry.isOverallocated;\n            acc.isUnderallocated  = acc.isUnderallocated || resourceEntry.isUnderallocated;\n        }\n\n        return acc;\n    }\n\n    aggregateHistogramData() {\n        const result = super.aggregateHistogramData(...arguments);\n\n        // post process aggregated row data to find proper maxEffort\n        for (let i = 0, l = result.length; i < l; i++) {\n            const entry = result[i];\n\n            entry.maxEffort = 0;\n\n            for (const resource of result.$resources) {\n                const resourceEntry = this.getHistogramDataCache(resource).allocation.total[i];\n\n                // get nested resources maxEffort sum\n                entry.maxEffort += resourceEntry.maxEffort;\n            }\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    getResourceBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit, true),\n                available     = me.getEffortText(datum.maxEffort, unit, true),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            let assignmentsArray = [...datum.assignmentIntervals.entries()]\n                .filter(([assignment, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n\n            const assignments = assignmentsArray.map(([assignment, info]) => {\n\n                return assignmentTpl.replace('{event}', StringHelper.encodeHtml(assignment.event.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit, true))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit, true))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n\n            }).join('<br>') + assignmentsSuffix;\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    getGroupBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            let memberArray = [...datum.members.entries()]\n                .filter(([member, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n\n            if (memberArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', memberArray.length - me.groupBarTipAssignmentLimit);\n                memberArray = memberArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n\n            const members = memberArray.map(([member, info]) => {\n\n                return assignmentTpl\n                    .replace('{resource}', StringHelper.encodeHtml(member.resource?.name || member.name))\n                    .replace('{event}', StringHelper.encodeHtml(member.event?.name || member.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n\n            }).join('<br>') + assignmentsSuffix;\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            // to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{assignments}', members)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    getAssignmentBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.inEventTimeSpan) {\n            const\n                unit      = me.getBarTipEffortUnit(...arguments),\n                allocated = me.getEffortText(datum.effort, unit, true),\n                available = me.getEffortText(datum.maxEffort, unit, true);\n\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.cls || '');\n\n            if (datum.assignment) {\n                result = result.replace('{event}', StringHelper.encodeHtml(datum.assignment.event.name));\n            }\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n}\n\nResourceUtilization.initClass();\n\n// enable tree feature for the utilization panel by default\nGridFeatureManager.registerFeature(Tree, true, 'ResourceUtilization');\n", "import HorizontalRendering from '../../../Scheduler/view/orientation/HorizontalRendering.js';\n\n/**\n * @module SchedulerPro/view/orientation/ProHorizontalRendering\n */\n\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProHorizontalRendering extends HorizontalRendering {\n\n    static $name = 'ProHorizontalRendering';\n\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanHorizontalPosition(renderData) {\n        const\n            me              = this,\n            { eventRecord } = renderData,\n            {\n                startMS    : innerStartMS,\n                endMS      : innerEndMS,\n                durationMS : innerDurationMS\n            }               = me.calculateMS(eventRecord, 'startDate', 'endDate'),\n            position        = me.calculateHorizontalPosition(renderData, innerStartMS, innerEndMS, innerDurationMS);\n\n        if (position) {\n            const { left, width } = position;\n\n            Object.assign(renderData, {\n                innerStartMS,\n                innerEndMS,\n                innerDurationMS,\n                bufferBeforeWidth : Math.max(left - renderData.left, 0),\n                // This could yield a really small number due to floating point accuracy, we can round the result\n                bufferAfterWidth  : Math.max(Math.floor(renderData.left + renderData.width - left - width), 0)\n            });\n\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanHorizontalPosition(data)) {\n                return null;\n            }\n        }\n\n        return data;\n    }\n}\n", "import VerticalRendering from '../../../Scheduler/view/orientation/VerticalRendering.js';\n\n/**\n * @module SchedulerPro/view/orientation/ProVerticalRendering\n */\n\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProVerticalRendering extends VerticalRendering {\n\n    static $name = 'ProVerticalRendering';\n\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanVerticalPosition(renderData) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            { eventRecord }     = renderData,\n            { isBatchUpdating } = eventRecord,\n            startDate           = isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n            endDate             = isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate,\n            top                 = scheduler.getCoordinateFromDate(startDate),\n            innerStartMS        = startDate.getTime(),\n            innerEndMS          = endDate.getTime(),\n            innerDurationMS     = innerEndMS - innerStartMS;\n\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round(innerDurationMS * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n\n        Object.assign(renderData, {\n            innerStartMS,\n            innerEndMS,\n            innerDurationMS,\n            bufferBeforeWidth : top - renderData.top,\n            bufferAfterWidth  : renderData.top + renderData.height - top - height\n        });\n\n        return true;\n    }\n\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanVerticalPosition(data)) {\n                return null;\n            }\n        }\n\n        return data;\n    }\n}\n", "import '../localization/En.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport SchedulingIssueResolution from './mixin/SchedulingIssueResolution.js';\nimport ProjectProgressMixin from './mixin/ProjectProgressMixin.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport SchedulerProEventRendering from './mixin/SchedulerProEventRendering.js';\nimport ProHorizontalRendering from './orientation/ProHorizontalRendering.js';\nimport ProVerticalRendering from './orientation/ProVerticalRendering.js';\n\n/**\n * @module SchedulerPro/view/SchedulerProBase\n */\n\n/**\n * A thin base class for {@link SchedulerPro/view/SchedulerPro}. Includes fewer features by default, allowing smaller\n * custom-built bundles if used in place of {@link SchedulerPro/view/SchedulerPro}.\n *\n * **NOTE:** In most scenarios you should use SchedulerPro instead of SchedulerProBase.\n *\n * @features SchedulerPro/feature/CalendarHighlight\n * @features SchedulerPro/feature/CellEdit\n * @features SchedulerPro/feature/Dependencies\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventBuffer\n * @features SchedulerPro/feature/EventResize\n * @features SchedulerPro/feature/EventSegmentDrag\n * @features SchedulerPro/feature/EventSegmentResize\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/NestedEvents\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TaskEdit\n * @features SchedulerPro/feature/TimeSpanHighlight\n * @features SchedulerPro/feature/Versions\n *\n * @extends Scheduler/view/SchedulerBase\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulerProEventRendering\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n * @widget\n */\nexport default class SchedulerProBase extends SchedulerBase.mixin(\n    ProjectProgressMixin,\n    SchedulerProEventRendering,\n    SchedulingIssueResolution\n) {\n\n    //region Config\n\n    static $name = 'SchedulerProBase';\n\n    static type = 'schedulerprobase';\n\n    static configurable =  {\n        projectModelClass : ProjectModel,\n\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n         * @config {String} dependencyIdField\n         * @default 'id'\n         */\n        dependencyIdField : 'id',\n\n        /**\n         * If set to `true` this will show a color field in the {@link SchedulerPro.feature.TaskEdit} editor and also a\n         * picker in the {@link Scheduler.feature.EventMenu}. Both enables the user to choose a color which will be\n         * applied to the event bar's background. See EventModel's\n         * {@link Scheduler.model.mixin.EventModelMixin#field-eventColor} config.\n         * config.\n         * @config {Boolean}\n         * @category Misc\n         */\n        showTaskColorPickers : false\n    };\n\n    static isSchedulerPro = true;\n\n    //endregion\n\n    //region Store & model docs\n\n    // Configs\n\n    /**\n     * A {@link SchedulerPro.model.ProjectModel} instance or a config object. The project holds all SchedulerPro data.\n     * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n     * @category Data\n     */\n\n    /**\n     * Inline events, will be loaded into the backing project's EventStore.\n     * @config {SchedulerPro.model.EventModel[]|Object[]} events\n     * @category Data\n     */\n\n    /**\n     * The {@link SchedulerPro.data.EventStore} holding the events to be rendered into the scheduler.\n     * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n\n    /**\n     * The {@link SchedulerPro.data.ResourceStore} holding the resources to be rendered into the scheduler.\n     * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {SchedulerPro.model.AssignmentModel[]|Object[]} assignments\n     * @category Data\n     */\n\n    /**\n     * The optional {@link SchedulerPro.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n\n    /**\n     * The optional {@link SchedulerPro.data.DependencyStore}.\n     * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n\n    // Properties\n\n    /**\n     * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n     * @member {SchedulerPro.model.ProjectModel} project\n     * @typings {ProjectModel}\n     * @category Data\n     */\n\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @typings Scheduler.view.SchedulerBase:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {SchedulerPro.model.ResourceModel[]} resources\n     * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {SchedulerPro.data.ResourceStore} resourceStore\n     * @typings Scheduler.view.SchedulerBase:resourceStore -> {Scheduler.data.ResourceStore||SchedulerPro.data.ResourceStore}\n     * @category Data\n     */\n\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {SchedulerPro.model.AssignmentModel[]} assignments\n     * @accepts {SchedulerPro.model.AssignmentModel[]|Object[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n     * @typings Scheduler.view.SchedulerBase:assignmentStore -> {Scheduler.data.AssignmentStore||SchedulerPro.data.AssignmentStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {SchedulerPro.model.DependencyModel[]} dependencies\n     * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {SchedulerPro.data.DependencyStore} dependencyStore\n     * @typings Scheduler.view.SchedulerBase:dependencyStore -> {Scheduler.data.DependencyStore||SchedulerPro.data.DependencyStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {SchedulerPro.model.CalendarModel[]} calendars\n     * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    //endregion\n\n    //region Inline data\n\n    // Pro specific extension of SchedulerStores\n\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n\n    get calendars() {\n        return this.project.calendars;\n    }\n\n    //endregion\n\n    //region Mode\n\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    set mode(mode) {\n        const me = this;\n\n        me._mode = mode;\n\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n\n            if (mode === 'horizontal') {\n                me.horizontal = new ProHorizontalRendering(me);\n\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new ProVerticalRendering(me);\n\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Internal\n\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n\n    // Needed to work with Gantt features\n    get taskStore() {\n        return this.project.eventStore;\n    }\n\n    //endregion\n\n    createEvent(startDate, resourceRecord, row) {\n        // For resources with a calendar, ensure the date is inside a working time range\n        if (!resourceRecord.isWorkingTime(startDate)) {\n            return;\n        }\n\n        // If task editor is active dblclick will trigger number of async actions:\n        // store add which would schedule project commit\n        // editor cancel on next animation frame\n        // editor hide\n        // rejecting previous transaction\n        // and there is also dependency feature listening to transitionend on scheduler to draw lines after\n        // It can happen that user dblclicks too fast, then event will be added, then dependency will schedule itself\n        // to render, and then event will be removed as part of transaction rejection from editor. So we cannot add\n        // event before active transaction is done.\n        if (this.taskEdit && this.taskEdit.isEditing) {\n            this.ion({\n                aftertaskedit : () => super.createEvent(startDate, resourceRecord, row),\n                once          : true\n            });\n        }\n        else {\n            return super.createEvent(startDate, resourceRecord, row);\n        }\n    }\n\n}\n\nSchedulerProBase.initClass();\nVersionHelper.setVersion('schedulerpro', '5.5.0');\n", "import SchedulerProBase from './SchedulerProBase.js';\n\n// Since SchedulerPro is based on thin XXBase classes, default features needs to be pulled in here\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventCopyPaste.js';\nimport '../../Scheduler/feature/EventDrag.js';\nimport '../../Scheduler/feature/EventDragCreate.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/EventTooltip.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/StickyEvents.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\n\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\n// For checkbox selection mode\nimport '../../Grid/column/CheckColumn.js';\n\nimport '../feature/CellEdit.js';\nimport '../feature/Dependencies.js';\nimport '../feature/DependencyEdit.js';\nimport '../feature/EventResize.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/EventSegmentDrag.js';\nimport '../feature/EventSegmentResize.js';\nimport '../feature/EventSegments.js';\n\n/**\n * @module SchedulerPro/view/SchedulerPro\n */\n\n/**\n * ## Intro\n *\n * The Scheduler Pro is an extension of the [Bryntum Scheduler](#Scheduler/view/Scheduler), and combines the visualisation capabilities\n * of the Scheduler with the powerful scheduling engine from the Gantt. This means it can manage {@link SchedulerPro/model/ProjectModel project} data composed by\n * tasks, dependencies, resources, assignments and calendars (for working / non-working time). If you have inter-task dependencies,\n * task updates will be propagated to any successors after a task is moved. The engine will reschedule tasks\n * according to the constraints, dependencies and calendars defined in the project. To familiarize yourself with the various APIs and data structures\n * of the Scheduler Pro, we recommend starting with these resources:\n *\n * * [Project data model guide](#SchedulerPro/guides/basics/project_data.md)\n * * [Bryntum Scheduler API docs](#Scheduler/view/Scheduler)\n * * [Bryntum Grid API docs](#Grid/view/Grid)\n * * [Localization](#SchedulerPro/guides/customization/localization.md)\n *\n * ## Basic setup\n *\n * To create an instance of this class, simply configure it with:\n *\n * * The {@link Grid/column/Column columns} you want\n * * The {@link Grid/view/Grid#config-features} you want, quite a lot to choose from, and you can build your own too\n * * A {@link SchedulerPro/model/ProjectModel Project} instance:\n * * A {@link Scheduler/preset/ViewPreset viewPreset} identifier, specifying the granularity of the time axis.\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *    // A Project holds the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *    // loading data into all stores at once\n *    project : {\n *        autoLoad  : true,\n *        transport : {\n *            load : {\n *                url : './data/data.json'\n *            }\n *       }\n *    },\n *\n *    adopt             : 'container',\n *    startDate         : '2020-05-01',\n *    endDate           : '2020-09-30',\n *    resourceImagePath : '../_shared/images/users/',\n *    viewPreset        : 'dayAndWeek'\n *    features : {\n *       columnLines  : false,\n *       dependencies : true\n *   },\n *\n *   columns : [\n *       {\n *           type           : 'resourceInfo',\n *           text           : 'Worker',\n *           showEventCount : true\n *       }\n *   ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/SchedulerPro.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler Pro inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * ## Customisation\n *\n * You can style any aspect of the Scheduler using plain CSS or modify our themes using our built-in SASS variables.\n * Using the {@link Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer} you can customize the HTML output for\n * each event bar. The Scheduler comes with a few different {@link #config-eventStyle event styles} which you can\n * define globally on the Scheduler, in the resource data, or on individual events.\n *\n * {@inlineexample SchedulerPro/view/EventStyles.js}\n *\n * For more information about styling, please refer to the [styling guide](#SchedulerPro/guides/customization/styling.md).\n *\n * ## Partnering with other timeline widgets\n *\n * You can also pair the Scheduler Pro with other timeline based widgets such as the {@link SchedulerPro/view/ResourceHistogram histogram widget}\n * to view resource allocation levels, using the {@link #config-partner} config.\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ### Differences between Scheduler and Scheduler Pro\n * Scheduler Pro extends Scheduler and schedules tasks based on the Project, Resource and Event calendars, while also taking into account\n * dependencies and constraints. Scheduler Pro also comes with more demos showing off advanced use cases. Below is a list\n * of technical differences between the two versions:\n *\n * - Scheduler uses an EventStore, ResourceStore (optionally an AssignmentStore and a DependencyStore), whereas Scheduler Pro always\n * uses an AssignmentStore to manage event assignments.\n * - Scheduler Pro uses the same data model as the Gantt and can visualise a Project side by side with the Gantt.\n * - Scheduler supports showing dependencies but they are just visual elements, they do not impact scheduling. In Scheduler Pro,\n * adding a dependency between two tasks will affect the scheduling of the successor task.\n * - Scheduler Pro supports visualising a task completion progress bar.\n * - Scheduler Pro includes a Timeline widget and a Resource Histogram widget.\n *\n * @extends SchedulerPro/view/SchedulerProBase\n * @classType schedulerpro\n * @widget\n */\nexport default class SchedulerPro extends SchedulerProBase {\n\n    //region Config\n\n    static get $name() {\n        return 'SchedulerPro';\n    }\n\n    static get type() {\n        return 'schedulerpro';\n    }\n\n    //endregion\n\n}\n\nSchedulerPro.initClass();\n", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport '../../Scheduler/feature/TimeRanges.js';\nimport Store from '../../Core/data/Store.js';\nimport { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\n\n/**\n * @module SchedulerPro/widget/Timeline\n */\n\n/**\n * A visual component showing an overview timeline of events having the {@link SchedulerPro.model.EventModel#field-showInTimeline showInTimeline}\n * field set to true. The timeline component subclasses the {@link Scheduler.view.Scheduler Scheduler} and to use it,\n * simply provide it with a {@link SchedulerPro.model.ProjectModel}:\n *\n * ```javascript\n * const timeline = new Timeline({\n *     appendTo  : 'container',\n *     project   : project\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/widget/Timeline.js}\n *\n * @extends Scheduler/view/Scheduler\n * @classType timeline\n * @widget\n */\nexport default class Timeline extends SchedulerBase {\n\n    static get $name() {\n        return 'Timeline';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timeline';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Project config object or a Project instance\n             *\n             * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n             */\n\n            /**\n             * @hideconfigs timeZone\n             */\n\n            height      : '13em',\n            eventLayout : 'pack',\n            barMargin   : 1,\n\n            // We need timeline width to be exact, because with `overflow: visible` content will look awful.\n            // Flow is like this:\n            // 1. zoomToFit is trying to set timespan to eventStore total time span. Assume start in on tuesday and end is on friday\n            // 2. zooming mixin is calculating tick width, which is e.g. 37px to fit all the ticks to the available space\n            // 3. timeAxis is configured with this new time span. By default it adjusts start and end to monday.\n            // 4. since timespan was increased, it now overflows with original tick size of 37. It requires smth smaller, like 34.\n            // 5. timeAxisViewModel is calculating fitting size. Which is correct value of 34, but value is ignored unless `forceFit` is true\n            // But apparently forceFit + zoomToSpan IS NOT SUPPORTED. So alternative approach is to disable autoAdjust\n            // on time axis to prevent increased size in #3. But then time axis start/end won't be even date, it could be\n            // smth random like `Thu Feb 07 2019 22:13:20`.\n            //\n            // On the other hand, without force-fit content might overflow and timeline is styled to show overflowing content.\n            // And that would require more additional configs\n            forceFit : true,\n            timeAxis : { autoAdjust : false },\n\n            readOnly                  : true,\n            zoomOnMouseWheel          : false,\n            zoomOnTimeAxisDoubleClick : false,\n            // eventColor                : null,\n            // eventStyle                : null,\n            rowHeight                 : 48,\n            displayDateFormat         : 'L',\n\n            // A fake resource\n            resources : [\n                {\n                    id : 1\n                }\n            ],\n\n            columns : []\n        };\n    }\n\n    static get delayable() {\n        return {\n            fillFromTaskStore : 100\n        };\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        me.startDateLabel           = document.createElement('label');\n        me.startDateLabel.className = 'b-timeline-startdate';\n        me.endDateLabel             = document.createElement('label');\n        me.endDateLabel.className   = 'b-timeline-enddate';\n\n        let initialCommitPerformed = true;\n\n        if ('project' in config) {\n            if (!config.project) {\n                throw new Error('You need to configure the Timeline with a Project');\n            }\n            // In case instance of project is provided, just take store right away and delete config, falling back to\n            // default\n            else if (config.project instanceof SchedulerProProjectMixin) {\n                me.taskStore = config.project.eventStore;\n\n                if (!config.project.isInitialCommitPerformed) {\n                    initialCommitPerformed = false;\n\n                    // For schedulerpro it is important to listen to first project commit\n                    config.project.ion({\n                        name : 'initialCommit',\n                        refresh({ isInitialCommit }) {\n                            if (isInitialCommit) {\n                                me.fillFromTaskStore();\n                                me.detachListeners('initialCommit');\n                            }\n                        },\n                        thisObj : me\n                    });\n                }\n\n                delete config.project;\n            }\n        }\n\n        // Despite the fact Timeline extends SchedulerBase, we still need to disable all these features.\n        // Because in case timeline gets into the same scope as scheduler or gantt, some features might be enabled\n        // by default. SchedulerBase jut means that we don't import anything extra. But other components might.\n        config.features = ObjectHelper.assign({\n            cellEdit            : false,\n            cellMenu            : false,\n            columnAutoWidth     : false,\n            columnLines         : false,\n            columnPicker        : false,\n            columnReorder       : false,\n            columnResize        : false,\n            contextMenu         : false,\n            eventContextMenu    : false,\n            eventDrag           : false,\n            eventDragCreate     : false,\n            eventEdit           : false,\n            eventFilter         : false,\n            eventMenu           : false,\n            eventResize         : false,\n            eventTooltip        : false,\n            group               : false,\n            headerMenu          : false,\n            regionResize        : false,\n            scheduleContextMenu : false,\n            scheduleMenu        : false,\n            scheduleTooltip     : false,\n            sort                : false,\n            timeAxisHeaderMenu  : false,\n            timeRanges          : false\n        }, config.features);\n\n        super.construct(config);\n\n        if (me.features.timeRanges) {\n            // We don't want to show timeRanges relating to Project\n            me.features.timeRanges.store = new Store();\n        }\n\n        // If original project is not committed by this time, we should not try to fill timeline from the task store,\n        // because project listener will do it itself. And also to not do extra suspendRefresh which would break project\n        // refresh event listener behavior.\n        // https://github.com/bryntum/support/issues/2665\n        initialCommitPerformed && me.fillFromTaskStore.now();\n\n        me.taskStore.ion({\n            refreshPreCommit : me.fillFromTaskStore,\n            changePreCommit  : me.onTaskStoreChange,\n            thisObj          : me\n        });\n\n        me.ion({\n            resize  : me.onSizeChanged,\n            thisObj : me\n        });\n\n        me.bodyContainer.appendChild(me.startDateLabel);\n        me.bodyContainer.appendChild(me.endDateLabel);\n    }\n\n    onSizeChanged({ width, oldWidth }) {\n        const\n            me    = this,\n            reFit = width !== oldWidth;\n\n        // Save a refresh, will come from fit. Don't suspend if we won't re-fit, we need the refresh for events\n        // to not disappear (since updating row height clears cache)\n        reFit && me.suspendRefresh();\n\n        me.syncRowHeight();\n\n        if (reFit) {\n            me.resumeRefresh();\n\n            me.fitTimeline();\n        }\n    }\n\n    syncRowHeight() {\n        if (this.bodyContainer.isConnected) {\n            this.rowHeight = this.bodyContainer.offsetHeight;\n        }\n    }\n\n    fitTimeline() {\n        if (this.eventStore.count > 0) {\n            this.forceFit = false;\n            this.zoomToFit(\n                {\n                    leftMargin  : 50,\n                    rightMargin : 50\n                }\n            );\n            this.forceFit = true;\n        }\n\n        this.updateStartEndLabels();\n    }\n\n    updateStartEndLabels() {\n        const me                    = this;\n        me.startDateLabel.innerHTML = me.getFormattedDate(me.startDate);\n        me.endDateLabel.innerHTML   = me.getFormattedDate(me.endDate);\n    }\n\n    async onTaskStoreChange({ action, record, records, changes, isCollapse }) {\n        const\n            me         = this,\n            eventStore = me.eventStore;\n\n        let needsFit;\n\n        switch (action) {\n            case 'add':\n                records.forEach(task => {\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                });\n                break;\n            case 'remove':\n                if (!isCollapse) {\n                    records.forEach(task => {\n                        if (task.showInTimeline) {\n                            eventStore.remove(task.id);\n                            needsFit = true;\n                        }\n                    });\n                }\n                break;\n            case 'removeall':\n                me.fillFromTaskStore.now();\n                break;\n\n            case 'update': {\n                const task = record;\n\n                if (changes.showInTimeline) {\n                    // Add or remove from our eventStore\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                    }\n                    else {\n                        const timelineEvent = eventStore.getById(task.id);\n\n                        if (timelineEvent) {\n                            eventStore.remove(timelineEvent);\n                        }\n                    }\n                    needsFit = true;\n                }\n                else if (task.showInTimeline) {\n                    // Just sync with existing clone\n                    const clone = eventStore.getById(task.id);\n\n                    if (clone) {\n                        // Fields might have been remapped\n                        clone.set(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (needsFit) {\n            me.fitTimeline();\n        }\n    }\n\n    cloneTask(task) {\n        return {\n            id         : task.id,\n            resourceId : 1,\n            name       : task.name,\n            startDate  : task.startDate,\n            endDate    : task.endDate,\n            cls        : task.cls\n        };\n    }\n\n    render() {\n        super.render(...arguments);\n\n        this.syncRowHeight();\n    }\n\n    async fillFromTaskStore() {\n        const\n            me            = this,\n            timelineTasks = [];\n\n        me.taskStore.traverse(task => {\n            if (task.showInTimeline && task.isScheduled) {\n                timelineTasks.push(me.cloneTask(task));\n            }\n        });\n\n        me.events = timelineTasks;\n        await me.project.commitAsync();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        me.fitTimeline();\n    }\n\n    onLocaleChange() {\n        this.updateStartEndLabels();\n        super.onLocaleChange();\n    }\n};\n\n// Register this widget type with its Factory\nTimeline.initClass();\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport GridRowModel from '../../Grid/data/GridRowModel.js';\nimport TreeGrid from '../../Grid/view/TreeGrid.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module SchedulerPro/widget/VersionGrid\n */\n\nconst\n    EMPTY_ARRAY = [],\n    actionTypeOrder = { remove : 1, add : 2, update : 3 },\n    entityTypeOrder = { TaskModel : 1, DependencyModel : 2, AssignmentModel : 3, ProjectModel : 4 },\n    // For moves, describe the former and current locations\n    describePosition = ({ parent, index }) => `${parent.name}[${index}]`,\n    knownEntityTypes = {\n        AssignmentModel : 'Assignment',\n        DependencyModel : 'Dependency'\n    };\n\nclass VersionGridRow extends GridRowModel {\n    static fields = [\n        {\n            name : 'description',\n            type : 'string'\n        }, {\n            name : 'occurredAt',\n            type : 'date'\n        }, {\n            name : 'versionModel'\n        }, {\n            name : 'transactionModel'\n        }, {\n            name : 'propertyUpdate'\n        }, {\n            name : 'action'\n        }\n    ];\n}\n\n/**\n * Displays a list of versions and the transactions they contain. For use with the {@link SchedulerPro.feature.Versions}\n * feature.\n *\n * Configure the VersionGrid with a {@link SchedulerPro.model.ProjectModel} using the {@link #config-project} config.\n *\n * @extends Grid/view/TreeGrid\n * @classType versiongrid\n * @widget\n */\nexport default class VersionGrid extends TreeGrid {\n    static $name = 'VersionGrid';\n\n    static type = 'versiongrid';\n\n    static configurable = {\n\n        store : {\n            tree       : true,\n            modelClass : VersionGridRow,\n            sorters    : [\n                {\n                    field     : 'occurredAt',\n                    ascending : false\n                },\n                VersionGrid.sortActionRows\n            ],\n            reapplySortersOnAdd : true\n        },\n\n        /**\n         * The {@link SchedulerPro.model.ProjectModel} whose versions and changes are being observed in this grid.\n         * @config {SchedulerPro.model.ProjectModel}\n         */\n        project : null,\n\n        /**\n         * Whether to display transactions not yet associated with a version.\n         * @prp {Boolean}\n         */\n        showUnattachedTransactions : true,\n\n        /**\n         * Whether to show only versions that have been assigned a specific name.\n         * @prp {Boolean}\n         */\n        showNamedVersionsOnly : false,\n\n        /**\n         * Whether to include version rows in the display.\n         * @prp {Boolean}\n         */\n        showVersions : true,\n\n        /**\n         * The id of the version currently being compared, if any.\n         * @prp {Boolean}\n         */\n        comparingVersionId : null,\n\n        flex : 0,\n\n        features : {\n            group : {\n                field : 'id'\n            },\n\n            cellEdit : {\n                continueEditingOnCellClick : false,\n                editNextOnEnterPress       : false\n            },\n\n            cellMenu : {\n                items : {\n                    removeRow    : false,\n                    cut          : false,\n                    copy         : false,\n                    paste        : false,\n                    renameButton : {\n                        text   : 'L{VersionGrid.rename}',\n                        icon   : 'b-icon b-icon-edit',\n                        onItem : ({ record, source : grid }) => {\n                            grid.startEditing({\n                                id     : record.id,\n                                column : grid.columns.get('description')\n                            });\n                        }\n                    },\n                    restoreButton : {\n                        text   : 'L{VersionGrid.restore}',\n                        icon   : 'b-icon b-icon-undo',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerRestore(record.versionModel);\n                        }\n                    },\n                    compareButton : {\n                        text   : 'L{VersionGrid.compare}',\n                        icon   : 'b-icon b-icon-compare',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerCompare(record.versionModel);\n                        }\n                    },\n                    stopComparingButton : {\n                        text   : 'L{VersionGrid.stopComparing}',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerStopCompare();\n                        }\n                    }\n                }\n            },\n\n            rowCopyPaste : false\n        },\n\n        columns : [\n            { type : 'tree', text : 'L{VersionGrid.description}', field : 'description', flex : 4, groupable : false, renderer : ({ grid, ...rest }) => grid.renderDescription({ grid, ...rest }), autoHeight : true },\n            { text : 'L{VersionGrid.occurredAt}', field : 'occurredAt', type : 'date', flex : 1, groupable : false }\n        ],\n\n        /**\n         * The date format used for displaying date values in change actions.\n         * @config {String}\n         */\n        dateFormat : 'M/D/YY h:mm a',\n\n        internalListeners : {\n            beforeCellEditStart({ editorContext : { column, record } }) {\n                // Only version descriptions are editable\n                if (!(column.field === 'description' && record.versionModel)) {\n                    return false;\n                }\n            },\n\n            finishCellEdit({ editorContext : { record, value } }) {\n                record.versionModel.name = (value != null && value.trim()) ? value : null;\n            },\n\n            cellMenuBeforeShow({ source, record, items }) {\n                items.stopComparingButton.disabled = !source.comparingVersionId;\n                return Boolean(record.versionModel);\n            },\n\n            toggleNode({ record, collapse }) {\n                this._expandedById.set(record.id, !collapse);\n            }\n        }\n    };\n\n    static delayable = {\n        processUpdates : {\n            type              : 'raf',\n            cancelOutstanding : true\n        }\n    };\n\n    // Bookkeeping fields\n    static get properties() {\n        return {\n            _rowsByUnderlyingRecord : new WeakMap(),\n            _expandedById           : new Map()\n        };\n    };\n\n    _transactionChanges = [];\n    _versionChanges = [];\n    comparingRowCls = `b-${VersionGrid.type}-comparing`;\n\n    construct(config) {\n        super.construct({\n            ...config,\n            features : ObjectHelper.merge({}, VersionGrid.configurable.features, config.features)\n        });\n    }\n\n    afterConstruct() {\n        if (!this.project) {\n            throw new Error(`${VersionGrid.$name} requires the project config.`);\n        }\n        this.refreshGrid();\n    }\n\n    updateDateFormat(newDateFormat) {\n        const occurredAtColumn = this.columns.get('occurredAt');\n        if (occurredAtColumn) {\n            occurredAtColumn.format = newDateFormat;\n        }\n    }\n\n    updateProject(newProject) {\n        const me = this;\n\n        me.detachListeners('storeChange');\n\n        me._versionStore = newProject.getCrudStore('versions');\n        me._transactionStore = newProject.getCrudStore('changelogs');\n\n        me._versionStore.ion({\n            name    : 'storeChange',\n            change  : me.onVersionStoreChange,\n            thisObj : me\n        });\n        me._transactionStore.ion({\n            name    : 'storeChange',\n            change  : me.onTransactionStoreChange,\n            thisObj : me\n        });\n    }\n\n    updateShowNamedVersionsOnly() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateShowUnattachedTransactions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateShowVersions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateComparingVersionId(newVersionId, oldVersionId) {\n        const [oldHighlightedRow, newHighlightedRow] = [oldVersionId, newVersionId].map(versionId =>\n            this.store.getById(`v-${versionId}`));\n        if (oldHighlightedRow) {\n            oldHighlightedRow.cls = '';\n            oldHighlightedRow.iconCls = 'b-icon b-icon-version';\n        }\n        if (newHighlightedRow) {\n            newHighlightedRow.cls = this.comparingRowCls;\n            newHighlightedRow.iconCls = 'b-icon b-icon-compare';\n        }\n    }\n\n    onVersionStoreChange({ action, records }) {\n        this._versionChanges.push({ action, records });\n        this.processUpdates();\n    }\n\n    onTransactionStoreChange({ action, records }) {\n        this._transactionChanges.push({ action, records });\n        this.processUpdates();\n    }\n\n    /**\n     * This is an optimization to more efficiently replace grid rows when the underlying stores change.\n     * We wait a tick, then replace the set of rows corresponding to the modified records with the new\n     * projected rowset.\n     *\n     * The code below does not handle record remove, or updating transactions without their version in the\n     * same tick. (Versions can be updated without their transactions, as when renamed.)\n     * @private\n     */\n    processUpdates() {\n        const\n            me = this,\n            versions = ArrayHelper.unique(me._versionChanges.flatMap(({ records }) => records)),\n            // <remove-on-release>\n            // TODO: why is version.id integer but txn.versionId string using websockets?\n            // </remove-on-release>\n            versionIds = new Set(versions.map(version => String(version.id))),\n            transactions = ArrayHelper.unique(\n                me._transactionChanges.flatMap(({ records }) => records)\n                    // Expand to all transactions for incoming versions\n                    .concat(versions.length === 0 ? []\n                        : me._transactionStore.query(txn => versionIds.has(txn.versionId))));\n        // Expand to all versions for incoming transaction\n        for (const transaction of transactions) {\n            if (transaction.versionId && !versionIds.has(transaction.versionId)) {\n                versions.push(me._versionStore.getById(transaction.versionId));\n                versionIds.add(transaction.versionId);\n            }\n        }\n        me.replaceRows(ArrayHelper.unique(versions), transactions);\n        me._transactionChanges = [];\n        me._versionChanges = [];\n    }\n\n    replaceRows(versions, transactions) {\n        const\n            me = this,\n            { showNamedVersionsOnly, showUnattachedTransactions, store } = me,\n            rowsToReplaceSet = new Set(),\n            transactionsByVersionId = ArrayHelper.groupBy(transactions, 'versionId'),\n            allRecords = transactions.concat(versions),\n            versionsToShow = showNamedVersionsOnly\n                ? versions.filter(version => version.name != null)\n                : versions;\n        for (const record of allRecords) {\n            for (const row of me._rowsByUnderlyingRecord.get(record) ?? EMPTY_ARRAY) {\n                rowsToReplaceSet.add(row);\n            }\n        }\n\n        me.suspendRefresh();\n\n        store.remove(Array.from(rowsToReplaceSet));\n        for (const version of versionsToShow) {\n            const newRows = store.add(me.getGridRows(version, transactionsByVersionId[version.id]));\n            me._rowsByUnderlyingRecord.set(version, newRows);\n        }\n        if (showUnattachedTransactions) {\n            for (const transaction of transactions.filter(txn => txn.versionId == null)) {\n                const newRows = store.add(me.getGridRows(null, [transaction]));\n                me._rowsByUnderlyingRecord.set(transaction, newRows);\n            }\n        }\n\n        me.resumeRefresh();\n\n        store.sort(store.sorters);\n    }\n\n    /**\n     * Does a full replace of all rows in the grid using all records currently in the two stores.\n     * @private\n     */\n    refreshGrid() {\n        this.replaceRows(this._versionStore.records, this._transactionStore.records);\n    }\n\n    /**\n     * Transform a set of transactions (and optional parent version) into tree structure needed by grid\n     * @private\n     */\n    getGridRows(version, transactions) {\n        const\n            me = this,\n            { showVersions, comparingVersionId } = me,\n            transactionRows = transactions?.map(transaction => {\n                const id = `t-${transaction.id}`;\n                return {\n                    id,\n                    expanded         : Boolean(me._expandedById?.get(id)),\n                    description      : transaction.description,\n                    occurredAt       : transaction.occurredAt,\n                    transactionModel : transaction,\n                    rootVersionModel : version,\n                    children         : transaction.actions.map((action, index) => {\n                        const id = `a-${transaction.id}-${index}`;\n                        return {\n                            id,\n                            expanded         : Boolean(me._expandedById?.get(id)),\n                            action,\n                            rootVersionModel : version,\n                            children         : action.propertyUpdates?.map(propertyUpdate => ({\n                                rootVersionModel : version,\n                                propertyUpdate\n                            })) ?? []\n                        };\n                    })\n                };\n            }) || [],\n            id = `v-${version?.id}`;\n        return version && showVersions ? {\n            id,\n            expanded     : Boolean(me._expandedById.get(id)),\n            description  : version.description,\n            occurredAt   : version.savedAt,\n            children     : transactionRows,\n            versionModel : version,\n            iconCls      : 'b-icon-version',\n            cls          : version.id === comparingVersionId ? me.comparingRowCls : null\n        } : transactionRows;\n    }\n\n    renderDescription(event) {\n        const { record } = event;\n        if (record.propertyUpdate) {\n            return this.renderPropertyUpdate(record.propertyUpdate);\n        }\n        else if (record.action) {\n            return this.renderActionDescription(record.action);\n        }\n        return record.description;\n    }\n\n    renderPropertyUpdate(propertyUpdate) {\n        const\n            clsPrefix = VersionGrid.type,\n            { property, before, after } = propertyUpdate;\n        return {\n            children : [{\n                tag      : 'div',\n                class    : `b-${clsPrefix}-property-update-desc`,\n                children : [\n                    {\n                        tag   : 'span',\n                        class : `b-${clsPrefix}-property-name`,\n                        html  : `${this.formatPropertyName(property)}`\n                    },\n                    this.renderPropertyValue(before, 'before'),\n                    {\n                        tag   : 'i',\n                        class : 'b-icon b-icon-right'\n                    },\n                    this.renderPropertyValue(after, 'after')\n                ]\n            }]\n        };\n    }\n\n    /**\n     * Return DomConfig for an individual data value.\n     * @param {*} value\n     * @param {'before'|'after'} side\n     * @returns {DomConfig}\n     * @private\n     */\n    renderPropertyValue(value, side) {\n        return {\n            tag   : 'span',\n            class : [\n                `b-${VersionGrid.type}-property-${side}`,\n                value == null && `b-${VersionGrid.type}-empty-value`\n            ],\n            html : value == null ? this.L('L{Versions.nullValue}') : this.formatValueString(value) ?? ``\n        };\n    }\n\n    /**\n     * Convert an individual data value to a string.\n     * @param {*} value The raw data value\n     * @returns {String} A string representing the value, for display\n     * @private\n     */\n    formatValueString(value) {\n        if (DateHelper.isDate(value)) {\n            return DateHelper.format(value, this.dateFormat);\n        }\n        else if (typeof (value) === 'number') {\n            return value.toFixed(2);\n        }\n        return value;\n    }\n\n    /**\n     * Format a property name in the change log to a displayable string. By default,\n     * converts e.g. \"camelCase\" to \"Camel case\".\n     * @param {String} propertyName The raw field name\n     * @returns {String} A string formatted for display\n     * @private\n     */\n    formatPropertyName(propertyName) {\n        return StringHelper.separate(propertyName);\n    }\n\n    getAssignmentTextTokens(assignmentChange) {\n        return {\n            event    : assignmentChange.event.name,\n            resource : assignmentChange.resource.name\n        };\n    }\n\n    getDependencyTextTokens(dependencyChange) {\n        return {\n            from : dependencyChange.fromTask.name,\n            to   : dependencyChange.toTask.name\n        };\n    }\n\n    /**\n     * Produces a text description to show in the description column for an 'action' row.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction} action The action to describe\n     * @returns DomConfig of description text with highlightable entity names\n     * @private\n     */\n    renderActionDescription(action) {\n        const\n            me = this,\n            { actionType, entity } = action,\n            entityNames = me.L(`L{Versions.entityNames}`);\n        let description,\n            tokens = {\n                type : entityNames[entity.type],\n                name : entity.name\n            };\n        if (actionType === 'move') {\n            tokens.from = describePosition(action.from);\n            tokens.to = describePosition(action.to);\n        }\n\n        // Concatenate action and entity type to get description pattern from localizations\n        // e.g. 'L{Versions.addDependency}' | 'L{Versions.updateEntity}'\n        description = me.L(`L{Versions.${actionType}${knownEntityTypes[entity.type] ?? 'Entity'}}`);\n\n        if (entity.type === 'DependencyModel') {\n            tokens = me.getDependencyTextTokens(entity);\n        }\n        else if (entity.type === 'AssignmentModel') {\n            tokens = me.getAssignmentTextTokens(entity);\n        }\n\n        description = description.replace(/\\{(\\w+)\\}/g, (_, variable) => tokens[variable] ?? variable);\n        if (action.isUser) {\n            description = `[!] ${description}`;\n        }\n        return me.renderHighlightedTextElements(StringHelper.capitalize(description), tokens);\n    }\n\n    /**\n     * Sorts the actions within a transaction using precedence heuristic to show most \"significant\"\n     * actions first.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction[]} actions\n     */\n    static sortActionRows(row1, row2) {\n        if (row1.parent === row2.parent && row1.action && row2.action) {\n            const\n                isUser1 = Boolean(row1.action.isUser),\n                isUser2 = Boolean(row2.action.isUser),\n                { actionType : type1, entity : { type : entityType1 } } = row1.action,\n                { actionType : type2, entity : { type : entityType2 } } = row2.action;\n\n            // Initial user actions first\n            if (isUser1 !== isUser2) {\n                return isUser1 ? -1 : 1;\n            }\n\n            // Adds/removes first, then updates; within those groups, tasks first\n            return Math.sign(actionTypeOrder[type1] - actionTypeOrder[type2]) ||\n                Math.sign(entityTypeOrder[entityType1] - entityTypeOrder[entityType2]) ||\n                0;\n        }\n        return 0;\n    }\n\n    triggerRestore(version) {\n        /**\n         * Fires when the user chooses to restore a selected version.\n         * @event restore\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('restore', { version });\n    }\n\n    triggerCompare(version) {\n        /**\n         * Fires when the user chooses to compare a selected version.\n         * @event compare\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('compare', { version });\n    }\n\n    triggerStopCompare(version) {\n        /**\n         * Fires when the user chooses to stop comparing a currently compared version.\n         * @event stopCompare\n         */\n        this.trigger('stopCompare');\n    }\n\n    /**\n     * Produce a DomConfig for cell text where **-delimited tokens are replaced by specified values. Used to\n     * allow CSS styling of replaced tokens (e.g. task names) in the changelog.\n     *\n     * @param {String} text Text string containing optional **delimited tokens**, taken from localizations\n     * @returns {DomConfig} DomConfig with text string broken into <span>s and tokens replaced\n     * @internal\n     */\n    renderHighlightedTextElements(text) {\n        const clsPrefix = this.constructor.type;\n        return {\n            children : [{\n                tag      : 'span',\n                class    : `b-${clsPrefix}-highlighted-text`,\n                children : text.split(/\\*\\*/g).reduce((out, chunk) => {\n                    out.children.push({\n                        tag   : 'span',\n                        text  : chunk,\n                        class : out.isEntity ? `b-${clsPrefix}-highlighted-entity` : null\n                    });\n                    out.isEntity = !out.isEntity;\n                    return out;\n                }, { children : [], isEntity : false }).children\n            }]\n        };\n    }\n\n}\n\nVersionGrid.initClass();\n", "//region Symlinks (\"grunt symlink\" task)\n\nexport * from './entry.engine.pro.js';\n\n//endregion\n\n// column\nexport { default as ResourceCalendarColumn } from '../lib/SchedulerPro/column/ResourceCalendarColumn.js';\n\n// data\nexport { default as AssignmentStore } from '../lib/SchedulerPro/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/SchedulerPro/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/SchedulerPro/data/DependencyStore.js';\nexport { default as EventStore } from '../lib/SchedulerPro/data/EventStore.js';\nexport { default as EventUpdateAction } from '../lib/SchedulerPro/data/stm/action/EventUpdateAction.js';\nexport { default as ResourceStore } from '../lib/SchedulerPro/data/ResourceStore.js';\nexport { default as ResourceUtilizationStore } from '../lib/SchedulerPro/data/ResourceUtilizationStore.js';\nexport { default as StateTrackingManager } from '../lib/SchedulerPro/data/stm/StateTrackingManager.js';\nexport { default as VersionStore } from '../lib/SchedulerPro/data/VersionStore.js';\nexport { default as ChangeLogStore } from '../lib/SchedulerPro/data/ChangeLogStore.js';\n\n// data mixin\nexport { default as PartOfProject } from '../lib/SchedulerPro/data/mixin/PartOfProject.js';\nexport { default as ProjectCrudManager } from '../lib/SchedulerPro/data/mixin/ProjectCrudManager.js';\n\n// event layout\nexport { default as ProHorizontalLayout } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayout.js';\nexport { default as ProHorizontalLayoutStack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js';\nexport { default as ProHorizontalLayoutPack } from '../lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js';\n\n// feature\nexport { default as CalendarHighlight } from '../lib/SchedulerPro/feature/CalendarHighlight.js';\nexport { default as CellEdit } from '../lib/SchedulerPro/feature/CellEdit.js';\nexport { default as Dependencies } from '../lib/SchedulerPro/feature/Dependencies.js';\nexport { default as DependencyEdit } from '../lib/SchedulerPro/feature/DependencyEdit.js';\nexport { default as EventBuffer } from '../lib/SchedulerPro/feature/EventBuffer.js';\nexport { default as EventResize } from '../lib/SchedulerPro/feature/EventResize.js';\nexport { default as EventSegmentDrag } from '../lib/SchedulerPro/feature/EventSegmentDrag.js';\nexport { default as EventSegmentResize } from '../lib/SchedulerPro/feature/EventSegmentResize.js';\nexport { default as EventSegments } from '../lib/SchedulerPro/feature/EventSegments.js';\nexport { default as NestedEvents } from '../lib/SchedulerPro/feature/NestedEvents.js';\nexport { default as PercentBar } from '../lib/SchedulerPro/feature/PercentBar.js';\nexport { default as ResourceNonWorkingTime } from '../lib/SchedulerPro/feature/ResourceNonWorkingTime.js';\nexport { default as TaskEdit } from '../lib/SchedulerPro/feature/TaskEdit.js';\nexport { default as TimeSpanHighlight } from '../lib/SchedulerPro/feature/TimeSpanHighlight.js';\nexport { default as Versions } from '../lib/SchedulerPro/feature/Versions.js';\n\n// model\nexport { default as AssignmentModel } from '../lib/SchedulerPro/model/AssignmentModel.js';\nexport { default as CalendarIntervalModel } from '../lib/SchedulerPro/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/SchedulerPro/model/CalendarModel.js';\nexport { default as ChangeLogAction } from '../lib/SchedulerPro/model/changelog/ChangeLogAction.js';\nexport { default as ChangeLogPropertyUpdate } from '../lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js';\nexport { default as ChangeLogEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogEntity.js';\nexport { default as ChangeLogDependencyEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogDependencyEntity.js';\nexport { default as ChangeLogAssignmentEntity } from '../lib/SchedulerPro/model/changelog/ChangeLogAssignmentEntity.js';\nexport { default as ChangeLogTransactionModel } from '../lib/SchedulerPro/model/changelog/ChangeLogTransactionModel.js';\nexport { default as DependencyModel } from '../lib/SchedulerPro/model/DependencyModel.js';\nexport { default as EventModel } from '../lib/SchedulerPro/model/EventModel.js';\nexport { default as ProjectModel } from '../lib/SchedulerPro/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/SchedulerPro/model/ResourceModel.js';\nexport { default as ResourceUtilizationModel } from '../lib/SchedulerPro/model/ResourceUtilizationModel.js';\nexport { default as EventSegmentModel } from '../lib/SchedulerPro/model/EventSegmentModel.js';\nexport { default as VersionModel } from '../lib/SchedulerPro/model/VersionModel.js';\n\n// model mixin\nexport { default as PercentDoneMixin } from '../lib/SchedulerPro/model/mixin/PercentDoneMixin.js';\nexport { default as ProjectChangeHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nexport { default as ProjectWebSocketHandlerMixin } from '../lib/SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\n\n// view mixin\nexport { default as ProjectProgressMixin } from '../lib/SchedulerPro/view/mixin/ProjectProgressMixin.js';\nexport { default as SchedulerProEventRendering } from '../lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js';\nexport { default as SchedulingIssueResolution } from '../lib/SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n\n// view\nexport { default as ResourceHistogram } from '../lib/SchedulerPro/view/ResourceHistogram.js';\nexport { default as ResourceUtilization } from '../lib/SchedulerPro/view/ResourceUtilization.js';\nexport { default as SchedulerProBase } from '../lib/SchedulerPro/view/SchedulerProBase.js';\nexport { default as SchedulerPro } from '../lib/SchedulerPro/view/SchedulerPro.js';\n\n// widget\nexport { default as CalendarField } from '../lib/SchedulerPro/widget/CalendarField.js';\nexport { default as ConstraintTypePicker } from '../lib/SchedulerPro/widget/ConstraintTypePicker.js';\nexport { default as CycleResolutionPopup } from '../lib/SchedulerPro/widget/CycleResolutionPopup.js';\nexport { default as DependencyTypePicker } from '../lib/SchedulerPro/widget/DependencyTypePicker.js';\nexport { default as EffortField } from '../lib/SchedulerPro/widget/EffortField.js';\nexport { default as EndDateField } from '../lib/SchedulerPro/widget/EndDateField.js';\nexport { default as GanttTaskEditor } from '../lib/SchedulerPro/widget/GanttTaskEditor.js';\nexport { default as ModelCombo } from '../lib/SchedulerPro/widget/ModelCombo.js';\nexport { default as SchedulerTaskEditor } from '../lib/SchedulerPro/widget/SchedulerTaskEditor.js';\nexport { default as SchedulingDirectionPicker } from '../lib/SchedulerPro/widget/SchedulingDirectionPicker.js';\nexport { default as SchedulingIssueResolutionPopup } from '../lib/SchedulerPro/widget/SchedulingIssueResolutionPopup.js';\nexport { default as SchedulingModePicker } from '../lib/SchedulerPro/widget/SchedulingModePicker.js';\nexport { default as StartDateField } from '../lib/SchedulerPro/widget/StartDateField.js';\nexport { default as TaskEditorBase } from '../lib/SchedulerPro/widget/TaskEditorBase.js';\nexport { default as Timeline } from '../lib/SchedulerPro/widget/Timeline.js';\nexport { default as VersionGrid } from '../lib/SchedulerPro/widget/VersionGrid.js';\n\n// widget taskeditor\nexport { default as AdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/AdvancedTab.js';\nexport { default as DependencyTab } from '../lib/SchedulerPro/widget/taskeditor/DependencyTab.js';\nexport { default as EditorTab } from '../lib/SchedulerPro/widget/taskeditor/EditorTab.js';\nexport { default as FormTab } from '../lib/SchedulerPro/widget/taskeditor/FormTab.js';\nexport { default as GeneralTab } from '../lib/SchedulerPro/widget/taskeditor/GeneralTab.js';\nexport { default as NotesTab } from '../lib/SchedulerPro/widget/taskeditor/NotesTab.js';\nexport { default as PredecessorsTab } from '../lib/SchedulerPro/widget/taskeditor/PredecessorsTab.js';\nexport { default as RecurrenceTab } from '../lib/SchedulerPro/widget/taskeditor/RecurrenceTab.js';\nexport { default as ResourcesTab } from '../lib/SchedulerPro/widget/taskeditor/ResourcesTab.js';\nexport { default as SchedulerAdvancedTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerAdvancedTab.js';\nexport { default as SchedulerGeneralTab } from '../lib/SchedulerPro/widget/taskeditor/SchedulerGeneralTab.js';\nexport { default as SuccessorsTab } from '../lib/SchedulerPro/widget/taskeditor/SuccessorsTab.js';\n\n// widget taskeditor mixin\nexport { default as EventLoader } from '../lib/SchedulerPro/widget/taskeditor/mixin/EventLoader.js';\nexport { default as ReadyStatePropagator } from '../lib/SchedulerPro/widget/taskeditor/mixin/ReadyStatePropagator.js';\n"],
  "mappings": "urVAmBe,MAAMA,UAA+BC,GAAOC,MAAMC,EAAoB,CAAE,CAEnF,WAAWC,OAAQ,CACf,MAAO,wBACX,CACA,WAAWC,MAAO,CACd,MAAO,kBACX,CACA,WAAWC,UAAW,CAClB,MAAO,CACHC,MAAS,WACTC,KAAS,WACTC,OAAS,CACLJ,KAAeK,GAAcL,KAC7BM,UAAe,GACfC,aAAe,EACnB,EAER,CAGAC,gBAAgBC,EAAS,CACjBA,IAEA,KAAKC,gBAAkBD,EAAQC,gBAC/B,KAAKN,OAAOO,MAAQF,EAAQG,qBAEpC,CACAC,sBAAsBC,EAAe,CACjC,MAAMD,sBAAsBC,CAAa,EACrCA,GACAA,EAAcC,IAAI,CACdC,KAAU,gBACVC,OAAU,mBACVC,QAAU,IACd,CAAC,CAET,CAIAC,iBAAiB,CAAEC,OAAAA,EAAQC,QAAAA,CAAQ,EAAG,CAClC,MAAMC,EAASD,EAAQ,KAAKnB,KAAK,EACjC,GAAIoB,EAAQ,CAAA,IAAAC,EAER,GAAI,OAAOD,EAAOE,UAAa,YAAYD,EAAAD,EAAOG,SAAK,MAAAF,IAAA,OAAA,OAAZA,EAAcG,MAAOJ,EAAOE,SACnE,OAEJ,KAAKG,YAAYP,CAAM,EAE/B,CAGAQ,SAAS,CAAEH,MAAAA,CAAM,EAAG,CAChB,GAAIA,GAAAA,MAAAA,EAAOC,GAAI,CACX,MAAMN,EAAS,KAAKhB,OAAOO,MAAMkB,QAAQJ,EAAMC,EAAE,EACjD,OAAON,GAAM,KAAA,OAANA,EAAQU,SAAS,KAAK1B,OAAO2B,YAAY,IAAK,OAGrD,OAAO,EAEf,CAEJ,CACAC,GAAYC,mBAAmBtC,CAAsB,EACrDA,EAAuBuC,OAAS,yBCcjB,MAAMC,UAAmBC,GAAkBC,OAAOC,EAAQ,EAAEzC,MACvE0C,GACAC,GACAC,GACAC,EACJ,CAAE,CAyKE,WAAW3C,OAAQ,CACf,MAAO,YACX,CAEA,WAAW4C,QAAS,CAChB,MAAO,CA0NH,CAAE3B,KAAO,iBAAkBhB,KAAO,UAAW4C,aAAe,IAM5D,OAeA,CACI5B,KAAU,WACV6B,QAAUpB,GAASA,EAAQ,IAAIqB,EAASrB,CAAK,EAAI,MAgBrD,CACIT,KAAU,YACV6B,QAAUpB,GAASA,EAAQ,IAAIqB,EAASrB,CAAK,EAAI,IACrD,CAAC,CAET,CACAsB,6BAA8B,CAC1B,OAAOC,EACX,CAGAC,eAAeC,EAAMC,EAAUC,EAAU,GAAM,CAC3CD,OAAAA,EAAW,IAAIL,EAASK,CAAQ,EACzB,IAAIE,KAAKH,EAAKI,QAAO,GAAMF,EAAU,EAAI,IAAMD,EAASI,YAAY,CAC/E,CACA,IAAIC,WAAY,OACZ,IAAIC,EACJ,OAAI,KAAKC,aACLD,EAAK,KAAKE,IAAI,WAAW,EAIzBF,GAAKG,EAAA,KAAKC,aAAL,KAAAD,EAAmB,MAAMJ,UAE9B,KAAKM,SACLL,EAAK,KAAKM,YAAYC,mBAAmBP,CAAE,GAExCA,CACX,CACA,IAAID,UAAUA,EAAW,CACrB,MAAMS,EAAK,KAEX,GAAIA,EAAGC,YAAcD,EAAGE,UAAY,CAACF,EAAGG,cAAe,CACnD,MAAMC,EAAWC,EAAWC,KAAKN,EAAGT,UAAWA,CAAS,EACxD,GAAIa,EAEA,UAAWG,KAAS,KAAKC,SACrBD,EAAMhB,UAAYc,EAAWI,IAAIF,EAAMhB,UAAWa,CAAQ,EAIlEJ,EAAGU,UACHV,EAAGJ,WAAaL,EAChBS,EAAGW,IAAI,CAAEpB,UAAAA,CAAU,CAAC,IAGpB,MAAMA,UAAYA,EACdS,EAAGY,WACHZ,EAAGa,cAAgB,KACnBb,EAAGc,YAAc,MAG7B,CACA,IAAIC,SAAU,OACV,IAAIvB,EACJ,OAAI,KAAKC,aACLD,EAAK,KAAKE,IAAI,SAAS,EAIvBF,GAAKG,EAAA,KAAKqB,WAAL,KAAArB,EAAiB,MAAMoB,QAE5B,KAAKlB,SACLL,EAAK,KAAKM,YAAYmB,iBAAiBzB,CAAE,GAEtCA,CACX,CACA,IAAIuB,QAAQA,EAAS,CACjB,MAAMf,EAAK,KACPA,EAAGU,UACHV,EAAGgB,SAAWD,EACdf,EAAGW,IAAI,CAAEI,QAAAA,CAAQ,CAAC,IAGlB,MAAMA,QAAUA,EACZf,EAAGkB,YACHlB,EAAGa,cAAgB,KACnBb,EAAGc,YAAc,MAG7B,CASA,IAAIK,YAAa,CACb,OAAO,IAAItC,EAAS,CAChBuC,KAAY,KAAKC,WACjBC,UAAY,KAAKC,MACrB,CAAC,CACL,CACA,IAAIJ,WAAWI,EAAQ,CACnB,KAAKC,UAAUD,EAAOD,UAAWC,EAAOH,IAAI,CAChD,CAGA,IAAIP,eAAgB,CAChB,MACIb,EAA0B,KAC1B,CAAEY,SAAAA,EAAUrB,UAAAA,CAAU,EAAIS,EAC1Ba,EAA0Bb,EAAGyB,eACjC,IAAIC,EACJ,OAAIb,EACAa,EAASb,EAGLD,GACAc,EAAS1B,EAAGhB,eAAeO,EAAWqB,EAAU,EAAK,EACrDZ,EAAGyB,eAAiBC,GAGpBA,EAASnC,EAGVmC,CACX,CACA,IAAIb,cAAcrD,EAAO,CACrB,KAAKiE,eAAiBjE,CAC1B,CACA,IAAIsD,aAAc,CACd,MACId,EAAyB,KACzB,CAAEkB,UAAAA,EAAWH,QAAAA,CAAQ,EAAIf,EACzBc,EAAyBd,EAAG2B,aAChC,IAAID,EACJ,OAAIZ,EACAY,EAASZ,EAGLI,GACAQ,EAAS1B,EAAGhB,eAAe+B,EAASG,EAAW,EAAI,EACnDlB,EAAG2B,aAAeD,GAGlBA,EAASX,EAGVW,CACX,CACA,IAAIZ,YAAYtD,EAAO,CACnB,KAAKmE,aAAenE,CACxB,CACAmD,IAAIiB,EAAM,CACN,MAAMC,EAAW,OAAOD,GAAS,SACjC,OAAIA,IAAS,YAAeC,GAAY,aAAcD,KAClD,KAAKf,cAAgB,OAErBe,IAAS,aAAgBC,GAAY,cAAeD,KACpD,KAAKd,YAAc,MAEhB,MAAMH,IAAI,GAAGmB,SAAS,CACjC,CAMA,IAAIC,gBAAiB,CACjB,OAAO,KAAKlB,aAChB,CAMA,IAAImB,cAAe,CACf,OAAO,KAAKlB,WAChB,CAgBAmB,WAAWC,EAAW,CAClB,OAAQA,EAAS,CAEb,IAAK,iBACL,IAAK,eACD,MAAO,GAEX,IAAK,cACL,IAAK,sBACD,OAAO,KAAKC,OAEhB,IAAK,UACL,IAAK,WACL,IAAK,eACD,OAAO,KAAKA,QAAU,KAAKC,iBACnC,CACA,OAAO,MAAMH,WAAWC,CAAS,CACrC,CAEA,IAAIG,KAAM,OAAA,IAAAC,EACN,OAAOA,GAAAA,EAAI,KAACC,kBAAcD,MAAAA,IAAnBA,OAAAA,OAAAA,EAAqBD,MAArBC,KAAAA,EAA4B,MAAMD,GAC7C,CACA,IAAIA,IAAIA,EAAK,CACT,MAAMA,IAAMA,CAChB,CAEA,IAAIG,UAAW,CACX,KACI,CAAEhG,QAAAA,CAAQ,EAAK,KACfgG,EAAe,MAAMA,SAEzB,OAAIhG,GAAAA,MAAAA,EAASiG,uBAAyB,CAACD,EAC5BhG,EAAQkG,gBAAgBC,QAAQC,SAAS,QAAS,IAAI,EAE1DJ,CACX,CACA,IAAIA,SAASA,EAAU,CACnB,MAAMA,SAAWA,CACrB,CAEAK,iBAAiBC,EAAS,CACtB,KACI,CAAEC,SAAAA,CAAS,EAAI,KACfrB,EAAe,MAAMmB,iBAAiBC,CAAO,EAEjD,OAAIpB,GAAUqB,IACVrB,EAAOqB,SAAWA,EAASC,IAAIC,GAAWA,EAAQJ,iBAAiBC,CAAO,CAAC,GAExEpB,CACX,CACJ,CAhfIwB,EAjLiBhF,EAiLViF,kBAAkB,IAif7BjF,EAAWD,OAAS,aChtBL,MAAMmF,UAAmB7E,GAAc8E,GAAqBC,GAAeC,GAAcC,GAAgBC,GAAsBrF,OAAOsF,EAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CAEjK,WAAWC,eAAgB,CACvB,MAAO,CACHC,WAAa1F,EAErB,CAEJ,CAPIgF,EADiBE,EACVtH,QAAQ,cAQnBsH,EAAWnF,OAAS,aCtCL,MAAM4F,UAAiCC,EAAM,CA6BxDC,UAAUnC,KAASoC,EAAM,CACrB,KAAKC,eAAiB,IAAIC,IAEtBtC,EAAKuC,QACLC,OAAOC,OAAOzC,EAAM,KAAK0C,gBAAgB1C,EAAKuC,MAAM,CAAC,EAEzD,MAAMJ,UAAUnC,EAAM,GAAGoC,CAAI,EACzB,KAAKG,QAAU,CAAC,KAAKI,iBACrB,KAAKC,aAAY,CAEzB,CACAF,gBAAgBH,EAAQ,CACpB,MAAMzC,EAAS,CAAA,EACf,GAAIyC,EAAOM,gBACP/C,EAAO3E,KAAOoH,EAAOpH,aAEhBoH,EAAOO,kBAAmB,CAAA,IAAAC,EAAAC,EAC/BlD,EAAO3E,MAAI4H,EAAMR,EAAOU,SAAKF,MAAAA,IAAZA,OAAAA,OAAAA,EAAc5H,KAC/B2E,EAAOoD,SAAOF,EAAGT,EAAOU,SAAKD,MAAAA,IAAZA,OAAAA,OAAAA,EAAcE,QAEnC,OAAOpD,CACX,CACA8C,cAAe,CAAA,IAAAO,EACX,MACI/E,EAAe,KACf,CAAEQ,SAAAA,CAAS,EAAIR,EACfgF,EAAe,IAAIC,IAAIzE,CAAQ,EAC/B0E,EAAe,CAAA,EACnB,IAAAH,EAAI/E,EAAGmE,UAAMY,MAAAA,IAATA,QAAAA,EAAWN,gBAAiB,CAC5B,KAAM,CAAEjC,SAAAA,GAAaxC,EAAGmE,OACxB,UAAWgB,KAAc3C,EAChBxC,EAAGiE,eAAemB,IAAID,CAAU,EAIjCH,EAASK,OAAOrF,EAAGiE,eAAevE,IAAIyF,CAAU,CAAC,EAHjDD,EAAMI,KAAKtF,EAAGF,YAAYyF,IAAI,CAAEpB,OAASgB,CAAW,CAAC,CAAC,EAO9DH,EAASQ,MACT,KAAKC,YAAY,CAAC,GAAGT,CAAQ,CAAC,EAE9BE,EAAMQ,QACN,KAAKC,YAAYT,CAAK,CAE9B,CACAU,iBAAiBC,EAAS,CACtBA,EAAQC,QAAQ3I,GAAU,KAAK8G,eAAeoB,OAAOlI,EAAOgH,MAAM,CAAC,CACvE,CACA4B,eAAe/B,EAAM,CACjB,IAAIgC,EAAQ,MAAMD,YAAY,GAAG/B,CAAI,EACrC,GAAIgC,EAAO,CAAA,IAAAC,EACP,KAAM,CAAEC,OAAAA,CAAO,EAAI,KAInB,GAHKC,MAAMC,QAAQJ,CAAK,IACpBA,EAAQ,CAACA,CAAK,IAElBC,EAAI,KAAK9B,UAAM8B,MAAAA,IAAXA,QAAAA,EAAaxB,gBACb,UAAWtH,KAAU6I,EACb7I,EAAOgH,QAAU,CAAC,KAAKF,eAAemB,IAAIjI,EAAOgH,MAAM,GACvD,KAAKF,eAAetD,IAAIxD,EAAOgH,OAAQhH,CAAM,EAMzD,GAAI+I,GAAAA,MAAAA,EAAQR,OACR,UAAWhJ,KAASwJ,EAChB,UAAW/I,KAAU6I,EACjB7I,EAAOkJ,SAASC,GAAQA,EAAKnC,QAAUzH,EAAM6J,iBAAiBD,EAAKnC,OAAQmC,CAAI,CAAC,EAKhG,OAAON,CACX,CACAQ,iBAAiBrC,EAAQ,CACrB,OAAO,KAAKF,eAAevE,IAAIyE,CAAM,CACzC,CACJ,CA1GIjB,EADiBW,EACV/H,QAAQ,4BACfoH,EAFiBW,EAEVnF,SAAS,CAQZ,OAQA,SAAS,GA2FjBmF,EAAyB4C,yBAA2B,GACpD5C,EAAyB6C,iBAAgB,EACzC7C,EAAyB5F,OAAS,2BCrHnB,MAAM0I,UAAiCC,GAAgCxI,OAAOsF,EAAS,CAAE,CAYpG,WAAWmD,YAAa,CACpB,MAAO,CACHC,eAAiB,IAAI5C,IAE7B,CACA6C,cAAcvK,EAAS,CACnB,KAAKwK,iBAAiBxK,GAAO,KAAPA,OAAAA,EAASK,aAAa,EAC5C,KAAKoK,mBAAmBzK,GAAO,KAAPA,OAAAA,EAASkG,eAAe,EAChD,KAAKwE,cAAc1K,GAAO,KAAPA,OAAAA,EAAS2K,UAAU,EACtC,KAAKC,qBAAoB,CAC7B,CACAJ,iBAAiBtK,EAAO,CACpB,KAAK2K,gBAAgB,eAAe,EACpC3K,GAAK,MAALA,EAAOI,IAAI,CACPC,KAAU,gBACVM,OAAU,KAAKiK,2BACfrK,QAAU,IACd,CAAC,CACL,CACAiK,cAAcxK,EAAO,CACjB,KAAK2K,gBAAgB,YAAY,EACjC3K,GAAK,MAALA,EAAOI,IAAI,CACPC,KAAU,aACVC,OAAU,KAAKuK,cACftK,QAAU,IACd,CAAC,CACL,CACAgK,mBAAmBvK,EAAO,CACtB,KAAK2K,gBAAgB,iBAAiB,EACtC3K,GAAK,MAALA,EAAOI,IAAI,CACPC,KAAU,kBACVM,OAAU,KAAKmK,oBACfC,QAAU,KAAKC,qBACfjH,IAAU,KAAKkH,iBACf3K,OAAU,KAAK4K,mBACfC,OAAU,KAAKC,oBACf7K,QAAU,IACd,CAAC,CACL,CACAqK,2BAA2BzC,EAAO,CAE1BA,EAAMkD,QAAUlD,EAAMmD,SAAW,UAGrC,KAAKZ,qBAAoB,CAC7B,CACAI,qBAAsB,CAClB,KAAK1B,QAAQmC,GAAmBA,EAAgBzD,aAAY,CAAE,CAClE,CACAkD,qBAAqB7C,EAAO,CACpBA,EAAMmD,SAAW,SACjB,KAAKlC,QAAQmC,GAAmBA,EAAgBzD,aAAY,CAAE,CAEtE,CACAmD,iBAAiB,CAAE9B,QAAAA,CAAQ,EAAG,CAC1BA,EAAQC,QAAQ3I,GAAU,CACtB,MAAM8K,EAAkB,KAAKC,iBAAiB/K,GAAM,KAAA,OAANA,EAAQgL,QAAQ,EAC9DF,GAAe,MAAfA,EAAiBzD,aAAY,CACjC,CAAC,CACL,CACAoD,mBAAmB,CAAEzK,OAAAA,EAAQC,QAAAA,CAAQ,EAAG,CAEpC,GAAI,aAAcA,EAAS,CACvB,MAEIgL,EAAoB,KAAKF,iBAAiB/K,CAAM,EAEhDkL,EAAqB,KAAKH,iBAAiB/K,GAAAA,KAAAA,OAAAA,EAAQgL,QAAQ,EAE3DC,GAAqBC,GACrBA,EAAmB1C,YAAYyC,CAAiB,EAG5D,CACAN,oBAAoB,CAAEjC,QAAAA,CAAQ,EAAG,CAC7B,KAAKgC,OAAOhC,EAAQ7C,IAAI7F,GAAU,KAAK+K,iBAAiB/K,CAAM,CAAC,CAAC,CACpE,CACAoK,cAAc,CAAEpK,OAAAA,EAAQC,QAAAA,CAAQ,EAAG,CAC/B,GAAI,SAAUA,EACV,UAAW+H,KAAchI,EAAOqF,SACF,KAAK0F,iBAAiB/C,CAAU,EACxCxE,IAAI,OAAQxD,EAAOJ,IAAI,CAGrD,CACAqK,sBAAuB,CAAA,IAAAkB,EACnB,MAAMpD,EAAQ,CAAA,GACdoD,EAAA,KAAKC,YAAQ,MAAAD,IAAA,QAAbA,EAAezL,cAAciJ,QAAQqC,GAAY,CACxCA,EAASK,cACVtD,EAAMI,KAAK,KAAK1B,WAAW2B,IAAI,CAAEpB,OAASgE,CAAS,CAAC,CAAC,CAE7D,CAAC,EACD,KAAKM,UAAS,EACd,KAAKhI,IAAIyE,CAAK,EAMd,KAAKwD,QAAQ,iBAAiB,CAClC,CACAb,QAAS,CACL,MAAMc,EAAU,MAAMd,OAAO,GAAG/F,SAAS,EAEzC6G,OAAAA,GAAO,MAAPA,EAAS7C,QAAQ3I,GAAU,CACvB,KAAK2J,eAAezB,OAAOlI,EAAOgH,MAAM,CAC5C,CAAC,EACMwE,CACX,CACAF,WAAY,CACR,MAAMA,UAAU,GAAG3G,SAAS,EAC5B,KAAKgF,eAAe8B,MAAK,CAC7B,CACAV,iBAAiB/D,EAAQ,CACrB,OAAO,KAAK2C,eAAepH,IAAIyE,CAAM,CACzC,CACAoC,iBAAiBpC,EAAQ0E,EAAO,CAC5B,OAAO,KAAK/B,eAAenG,IAAIwD,EAAQ0E,CAAK,CAChD,CACJ,CAlII3F,EADiByD,EACV7K,QAAQ,4BACfoH,EAFiByD,EAEVmC,eAAe,CAClBlF,WAAaC,EAKbrH,QAAU,KACVuM,KAAO,KA2HfpC,EAAyB1I,OAAS,2BCpJlC,MAAM+K,GAASA,CAACC,EAAGC,IACXD,EAAIC,EACG,GAEFD,EAAIC,EACF,EAGA,EAuIf,IAAAC,EAAeC,GAAU,cAAmCA,GAAUC,GAAM,CACxE,WAAWP,cAAe,CACtB,MAAO,CAKH/M,KAAO,KA0CPuN,QAAU,KAOVC,QAAiB,KACjBC,eAAiB,KA8CjBC,SAAW,KAEnB,CAwBA,IAAIC,SAAU,CACV,MAAOC,EAAQ,KAAKJ,OACxB,CAMAK,cAAcC,EAAY,OACtB,IAAInI,EACJ,GAAImI,EAAWC,OAAS,KACpBpI,EAASmI,EAAWC,UAEnB,CACD,KACI,CAAEP,QAAAA,EAASD,QAAAA,EAASE,eAAAA,EAAiB,IAAK,EAAI,KAC9C,CAAEO,YAAAA,CAAY,EAAgCF,EAC9C,OAAON,GAAY,WACnB7H,EAAS6H,EAAQS,KAAKR,EAAgBO,CAAW,GAGjDrI,EAASqI,EAAYlM,SAAS0L,CAAO,EACjCD,IAEA5H,GAAS4H,EAAAA,EAAQ5H,CAAM,IAAd4H,KAAAA,EAAmBW,MAGpCJ,EAAWC,MAAQpI,EAEvB,OAAOA,CACX,CAMAwI,eAAeC,EAAQ,CAEnB,GAAI,KAAKT,QAAS,CACd,MAAMU,EAAS,IAAInF,IACnBkF,OAAAA,EAAOE,KAAK,CAACpB,EAAGC,IAAM,CAClB,MACIoB,EAAS,KAAKV,cAAcX,CAAC,EAC7BsB,EAAS,KAAKX,cAAcV,CAAC,EACjCkB,OAAAA,EAAO3J,IAAI6J,CAAM,EACjBF,EAAO3J,IAAI8J,CAAM,EACVvB,GAAOsB,EAAQC,CAAM,CAChC,CAAC,EACMpE,MAAMqE,KAAKJ,CAAM,EAAEC,KAAKrB,EAAM,MAGrC,OAAO,CAAA,CAEf,CACJ,ECvTe,MAAMyB,UAAiCC,GAAsB9O,MAAMuN,CAAmB,CAAE,CACnG,WAAWrN,OAAQ,CACf,MAAO,0BACX,CAKA6O,oBAAoBR,EAAQS,EAAY,GAAO,CAC3C,YAAKV,eAAeC,CAAM,EACnB,MAAMQ,oBAAoBR,EAAQS,CAAS,CACtD,CACJ,CACAH,EAAyBxM,OAAS,2BCfnB,MAAM4M,UAAgCC,GAAqBlP,MAAMuN,CAAmB,CAAE,CACjG,WAAWrN,OAAQ,CACf,MAAO,yBACX,CAIA6O,oBAAoBR,EAAQ,CACxB,MACIC,EAAS,KAAKF,eAAeC,CAAM,EAEnCY,EAAaX,EAAO1E,QAAU,EAC5BhE,EAAS,KAAKsJ,kBAAkBb,EAAQ,CAACtF,EAAOoG,EAAGC,EAAMC,IAAa,CACxE,MACI3F,EAAoB2F,EAAWJ,EAC/BK,EAAoBL,IAAe,EAAI,EAAIX,EAAOiB,QAAQxG,EAAMiF,KAAK,EACrEwB,EAAoBF,EAAaL,EAErClG,EAAM0G,OAAS/F,EACfX,EAAM2G,IAASF,EAAoBJ,EAAKO,MAAQV,EAAaE,EAAIzF,EAGjEX,EAAM6G,aAAeP,EACrBtG,EAAM8G,UAAYT,EAAKO,MAAQR,EAAIE,CACvC,CAAC,EACDhB,OAAAA,EAAOrE,QAAQjB,GAAS,CACpBT,OAAOC,OACHQ,EACA,KAAK+G,uBAAuB5B,KACxB,KAAK6B,6BAA+B,KACpChH,EAAM2G,IACN3G,EAAM0G,OACN1G,EAAMkF,YACNlF,EAAMiH,cACV,CACJ,CACJ,CAAC,EACMpK,CACX,CACJ,CACAmJ,EAAwB5M,OAAS,0BC/CjC,IAAI8N,GAAU,EACd,MAAMC,UAA+BC,EAAuB,CACxD,WAAWnQ,OAAQ,CACf,MAAO,wBACX,CAGA,OAAOoQ,YAAa,CAChB,MAAO,EAAEH,EACb,CACJ,CALI7I,EAJE8I,EAIKG,cAAc,qBAkCV,MAAMC,UAA0BC,EAAuB,CAElE,WAAWvQ,OAAQ,CACf,MAAO,mBACX,CACA,WAAWgN,cAAe,CACtB,MAAO,CAQHwD,SAAW,QAOXC,kBAAoB,KAwBpBC,0BAA4B,KAC5BC,SAA8B,mCAC9BC,4BAA8BV,EAC9BW,QAA8B,EAEtC,CACA,WAAWC,cAAe,CACtB,MAAMC,EAAU,MAAMD,aACtBC,OAAAA,EAAOxI,OAAS,CACZ,0BACA,6BACA,sBAAsB,EAEnBwI,CACX,CACAC,gBAAiB,CACb,MAAMA,eAAc,EACpB,KAAKC,OAAOjQ,IAAI,CACZkQ,eAAmB,mBACnBC,eAAmB,uBACnBC,iBAAmB,qBACnBC,eAAmB,uBACnBC,gBAAmB,oBACnBC,gBAAmB,uBACnBpQ,QAAmB,IACvB,CAAC,CACL,CAEAqQ,kBAAkBC,EAAcC,EAAiB,CAC7CD,EAAeE,EAAYC,QAAQH,CAAY,EAC/CC,EAAkBC,EAAYC,QAAQF,CAAe,EACjD,KAAKlB,WAAa,QAClB,KAAKqB,wBAAwBJ,EAAcC,CAAe,EAG1D,KAAKI,2BAA2BJ,CAAe,CAEvD,CASAG,wBAAwBJ,EAAcC,EAAiBK,EAAgB,GAAM,CAAA,IAAAC,EACzE,MACI9N,EAAyB,KACzB,CAAE+M,OAAAA,CAAO,EAAgB/M,EACzB,CAAET,UAAAA,EAAWwB,QAAAA,CAAQ,EAAIgM,EACzB/M,EAAG+N,WAGHF,GACA7N,EAAGgO,qBAAoB,EAE3BT,EAAeE,EAAYC,QAAQH,CAAY,EAC1CC,IACDA,EAAkBD,EAAaU,QAAQpJ,GAASA,EAAMqJ,gBAAgB,GAE1ElO,EAAGmO,UAAY,IAAIjK,IACnBsJ,EAAkBC,EAAYC,QAAQF,CAAe,EACrDD,EAAazH,QAAQiE,GAAe,CAAA,IAAAqE,EAChC,GAAI,CAACrE,EAAYuC,SACb,OAEJ,MAAM+B,GAASD,EAAGrE,EAAYuC,YAAQ,MAAA8B,IAAA,OAAA,OAApBA,EACZE,qBAAqB/O,EAAWwB,CAAO,EACxCiC,IAAIuL,GAAY,IAAIvC,EAAuBuC,CAAQ,CAAC,EACzD,GAAIF,EAAW,CACX,UAAWvC,KAAkB0B,EACzBxN,EAAGmO,UAAUxN,IAAImL,EAAgBuC,CAAS,EAC1CtB,EAAOyB,mBAAmBC,yBAAyB3C,EAAgB,GAAM,EAAK,EAE9E0B,EAAgB9H,OAAS,GACzBqH,EAAOyB,mBAAmBE,aAAY,EAGlD,CAAC,GACDZ,EAAAf,EAAO4B,cAAUb,MAAAA,IAAjBA,QAAAA,EAAA9D,KAAA+C,EAAoB6B,GAASA,EAAMjB,wBAAwBJ,EAAcC,EAAiBK,CAAa,CAAC,EAC5G,CAOAD,2BAA2BJ,EAAiBK,EAAgB,GAAM,CAAA,IAAAgB,EAAAC,EAC9D,MACI9O,EAA6C,KAC7C,CAAET,UAAAA,EAAWwB,QAAAA,EAASyN,mBAAAA,GAAuBxO,EAAG+M,OACpD,GAAI/M,CAAAA,EAAG+N,SAGP,CAAIF,GACA7N,EAAGgO,qBAAoB,EAG3BhO,EAAGmO,UAAY,IAAIjK,IACnB,UAAW4H,KAAkB0B,EAAiB,CAAA,IAAAuB,EAC1C,MAAMV,GAASU,EAAGjD,EAAeQ,YAAQ,MAAAyC,IAAA,OAAA,OAAvBA,EACZT,qBAAqB/O,EAAWwB,CAAO,EACxCiC,IAAIuL,GAAY,IAAIvC,EAAuBuC,CAAQ,CAAC,EACrDF,IACArO,EAAGmO,UAAUxN,IAAImL,EAAgBuC,CAAS,EAC1CG,EAAmBC,yBAAyB3C,EAAgB,GAAM,EAAK,GAG3E0B,EAAgB9H,OAAS,GACzB8I,EAAmBE,aAAY,GAEnCG,GAAAC,EAAA9O,EAAG+M,QAAO4B,cAAU,MAAAE,IAAA,QAApBA,EAAA7E,KAAA8E,EAAuBF,GAASA,EAAMhB,2BAA2BJ,EAAiBK,CAAa,CAAC,EACpG,CAKAG,sBAAuB,CAAA,IAAAgB,EAAAC,EACnB,MAAMjP,EAAK,KACX,GAAI,CAACA,EAAGmO,UAEJ,OAEJ,KACI,CAAEK,mBAAAA,GAAuBxO,EAAG+M,OAC5BmC,EAAyBlP,EAAGmO,UAAUgB,KAAI,EAC9CnP,EAAGmO,UAAY,KACf,UAAWhG,KAAY+G,EACnBV,EAAmBC,yBAAyBtG,EAAU,GAAM,EAAK,EAErEqG,EAAmBE,aAAY,GAC/BM,GAAAC,EAAAjP,EAAG+M,QAAO4B,cAAU,MAAAK,IAAA,QAApBA,EAAAhF,KAAAiF,EAAuBL,GAASA,EAAMZ,qBAAoB,CAAE,CAChE,CAGAoB,iBAAiB,CAAEC,QAAAA,CAAQ,EAAG,OAAA,IAAAC,EAC1B,GAAI,KAAKvB,SACL,OAEJ,MACI/N,EAAmB,KACnB,CAAE+M,OAAAA,CAAO,EAAU/M,EACnB,CAAEuN,aAAAA,CAAa,EAAI8B,EACnB7B,EAAmB6B,EAAQE,mBACvBxC,EAAOyC,SAASC,UAAUC,wBACpB,CAACL,EAAQvD,cAAc,GACvBwD,GAAAA,EAAAtP,EAAGwM,6BAAyB8C,MAAAA,IAAA,OAAA,OAA5BA,EAAAtF,KAAAhK,EAA+B,CAC7B2P,UAAY5C,EACZQ,aAAAA,CACJ,CAAC,IAHC+B,KAAAA,EAGIvC,EAAOlQ,cAAcgJ,QACvC7F,EAAGsN,kBAAkBC,EAAcC,CAAe,CACtD,CACAoC,mBAAmB,CAAE7F,YAAAA,EAAa+B,eAAAA,CAAe,EAAG,CAC3C,KAAKiC,UACN,KAAKT,kBAAkBvD,EAAa,CAAC+B,CAAc,CAAC,CAE5D,CACA+D,kBAAkB,CAAE9F,YAAAA,EAAa+B,eAAAA,CAAe,EAAG,CAC1C,KAAKiC,UACN,KAAKT,kBAAkBvD,EAAa,CAAC+B,CAAc,CAAC,CAE5D,CAIAgE,kBAAkB3H,EAAUgC,EAAQ,CAAA,IAAA4F,EAChC,MAAM1B,GAAS0B,EAAG,KAAK5B,aAAS4B,MAAAA,IAAA,OAAA,OAAdA,EAAgBrQ,IAAIyI,CAAQ,EAC9CkG,OAAAA,GAAalE,EAAO7E,KAAK,GAAG+I,CAAS,EAC9BlE,CACX,CACA6F,qBAAqBC,EAAY,CAC7B,KAAM,CAAElG,YAAAA,CAAY,EAAIkG,EACxB,GAAIlG,EAAYmG,yBAA0B,CACtC,KAAM,CAAEvD,QAAAA,CAAQ,EAAI,KAEpBsD,EAAWE,SAAW,KAAKpD,OAAOqD,WAElCH,EAAWI,WAAW,kCAAkC,EAAI,EAE5DJ,EAAWzP,SAAS8E,KAAK,CACrBgL,UAAY,sBACZC,KAAYxG,EAAYhN,KACxByT,QAAY,CACRC,eAAiB,SACrB,CACJ,CAAC,EAEDR,EAAWS,OAAS/D,EAAU,EAC9BsD,EAAW1E,QAAUoB,EAAU,EAC/BsD,EAAWU,MAAQhE,EACnBsD,EAAWzE,KAAOmB,EAElBsD,EAAWW,QAAW,GAAE,KAAKC,kBAAkB9G,CAAW,cAAckG,EAAWnE,eAAerO,KAE1G,CACAqT,eAAe/C,EAAUgD,EAAK,CAC1B,MAAMD,eAAe/C,EAAUgD,CAAG,EAC9BhD,GACA,KAAKC,qBAAoB,CAEjC,CACAgD,cAAcjH,EAAa,CACvB,OAAOA,EAAYmG,wBACvB,CAEA,IAAIe,cAAe,CAAA,CACvB,CACA7E,EAAkBnO,OAAS,oBAAqBiT,EAAmBC,gBAAgB/E,EAAmB,GAAO,cAAc,ECvR5G,MAAMgF,WAAuBC,GAAqBC,EAAuB,CAAE,CAEtF,WAAWxV,OAAQ,CACf,MAAO,gBACX,CACA,WAAWgN,cAAe,CACtB,MAAO,CAOHyI,aAAe,GACfC,aAAe,CACXC,MAAQ,CACJC,YAAc,CACV3V,KAAQ,WACRgB,KAAQ,SACR4U,MAAQ,WACZ,CACJ,CACJ,EAER,CAEA,MAAMC,eAAezU,EAAQ,CACrB,MAAM,MAAMyU,eAAezU,CAAM,GACjC,MAAM,KAAK0U,wBAAuB,CAE1C,CACAC,WAAY,CACR,KAAKC,yBAAwB,EAAGC,KAAK,IAAM,CACvC,MAAMF,UAAS,CACnB,CAAC,CACL,CACAG,aAAc,CACV,KAAKF,yBAAwB,EAAGC,KAAK,IAAM,CACvC,MAAMC,YAAW,CACrB,CAAC,CACL,CACAC,aAAc,CACV,KAAKC,yBAAwB,EAC7B,MAAMD,YAAW,CACrB,CACJ,CACAd,GAAenT,OAAS,iBAAkBiT,EAAmBC,gBAAgBC,GAAgB,EAAK,EC1CnF,MAAMgB,WAAoBC,CAAe,CACpD,WAAWvW,OAAQ,CACf,MAAO,aACX,CACA,WAAWgN,cAAe,CACtB,MAAO,CAMHwJ,aAAe,GAUfC,gBAAkB,CACd/U,MAAU,KACVgV,QAAU,SACd,EAER,CACA,WAAW5F,cAAe,CACtB,MAAO,CACH6F,MAAQ,CAAC,sBAAsB,EAEvC,CAEAC,sBAAsBH,EAAiB,CACnC,MAAMvS,EAAK,KACX,GAAIuS,EACAvS,EAAG2S,QAAUC,GAAQrN,IAAI,CACrBsN,WAAc7S,EAAG+M,OAAO+F,uBACxBC,YAAc,uDACdC,MAAc,CACVA,MAAS,MACTC,OAAS,CAAC,EAAG,EAAE,GAEnBC,QAAQ,CAAEC,aAAAA,CAAa,EAAG,CACtB,MACIpJ,EAAc/J,EAAG+M,OAAOqG,mBAAmBD,CAAY,EACvDE,EAAcF,EAAaG,QAAQ,4BAA4B,EAC/DpU,EAAcmU,EAAStJ,EAAYnJ,SAAWmJ,EAAY7I,UAC9D,OAAOlB,EAAGuS,gBAAgB,CAAExI,YAAAA,EAAa7K,SAAAA,EAAUmU,OAAAA,CAAO,CAAC,CAC/D,CACJ,CAAC,MAEA,CAAA,IAAAE,GACDA,EAAAvT,EAAG2S,WAAO,MAAAY,IAAA,QAAVA,EAAYC,QAAO,EAE3B,CACAxD,qBAAqB,CAAEyD,eAAAA,EAAgBC,kBAAAA,EAAmBC,iBAAAA,EAAkB5J,YAAAA,EAAa6J,gBAAAA,CAAgB,EAAG,CACxG,GAAI,KAAKC,SAAWJ,EAAgB,CAChC,KACI,CAAEK,aAAAA,GAAwB,KAAK/G,OAC/B,CAAEuF,aAAAA,CAAa,EAAW,KAC1B,CAAE1R,SAAAA,EAAUM,UAAAA,CAAU,EAAI6I,EAC1BgK,EAA0BD,EAAe,QAAU,SAEvDF,EAAgBtO,KACZ,CACIgL,UAAY,CACR,qBAA8B,EAC9B,4BAA8B,EAC9B,gBAA8B,CAACoD,GAEnCM,MAAY,GAAED,MAAaL,MAC3BlT,SAAY8R,GAAgB1R,EAAY,CACpC,CACIqT,IAAY,OACZ3D,UAAY,iBACZC,KAAY3P,EAASsT,SAAS,EAAI,CACtC,CAAC,EACDC,MACR,EACA,CACI7D,UAAY,CACR,qBAA6B,EAC7B,2BAA6B,EAC7B,gBAA6B,CAACqD,GAElCK,MAAY,GAAED,MAAaJ,MAC3BnT,SAAY8R,GAAgBpR,EAAa,CACrC,CACI+S,IAAY,OACZ3D,UAAY,iBACZC,KAAYrP,EAAUgT,SAAS,EAAI,CACvC,CAAC,EACDC,MACR,CACJ,EAER,CAEAC,oBAAqB,CACZ,KAAKC,eACN,KAAKtH,OAAOuH,sBAAqB,CAEzC,CACAC,UAAUC,EAAS,CACf,MAAMD,UAAUC,CAAO,EACvB,KAAM,CAAEzH,OAAAA,CAAO,EAAI,KACf,CAACA,EAAOsH,eAAiBtH,EAAO0H,YAEhC1H,EAAO2H,QAAQC,UAAUlU,IAAI,0BAA0B,EACvDsM,EAAOuH,sBAAqB,EAC5BvH,EAAO6H,kBAAiB,EAAG5C,KAAK,IAAM,CAClCjF,EAAO2H,QAAQC,UAAU9M,OAAO,0BAA0B,CAC9D,CAAC,EAET,CACJ,CACAuK,GAAYnU,OAAS,cAAeiT,EAAmBC,gBAAgBiB,GAAa,GAAO,cAAc,EC3H1F,MAAMyC,UAAyBC,EAAU,CAGpD,WAAWnR,eAAgB,CACvB,MAAO,CACH+L,wBAA0B,GAElC,CACA,WAAW5G,cAAe,CACtB,MAAO,CACHiM,qBAAuB,eAE/B,CACA,WAAWnI,cAAe,CACtB,MAAO,CACH6F,MAAQ,CAAC,UAAW,yBAAyB,EAErD,CA4FAuC,iBAAiBC,EAAU,CACvB,KAAM,CAAEC,kBAAAA,EAAmB3H,aAAAA,EAAczB,eAAAA,EAAgBqJ,aAActQ,CAAM,EAAIoQ,EACjF,MAAO,CAEH5F,QAAU4F,EACV1H,aAAAA,EACAzB,eAAAA,EACAoJ,kBAAAA,EACArQ,MAAAA,EAER,CACAuQ,iBAAiBH,EAAUxJ,EAAO,CAC9B,KAAKkE,UAAUjH,QAAQ,mBAAoBtE,OAAOC,OAAO,KAAK2Q,iBAAiBC,CAAQ,EAAG,CACtF1V,UAAY0V,EAAS1V,UACrBwB,QAAYkU,EAASlU,OACzB,CAAC,CAAC,CACN,CACAsU,iBAAiBJ,EAAU,CACvB,KAAKtF,UAAU2F,UAAUC,cAAgB,GACzC,KAAK5F,UAAUjH,QAAQ,wBAAyB,KAAKsM,iBAAiBC,CAAQ,CAAC,CACnF,CACAO,iBAAiBP,EAAU,CACvB,KAAKtF,UAAUjH,QAAQ,wBAAyB,KAAKsM,iBAAiBC,CAAQ,CAAC,CACnF,CACAQ,0BAA0BR,EAAU,CAChC,KAAKtF,UAAUjH,QAAQ,iCAAkC,KAAKsM,iBAAiBC,CAAQ,CAAC,CAC5F,CACAS,iBAAiBT,EAAUU,EAAO,CAI9B,GAHA,KAAKhG,UAAUjH,QAAQ,wBAAyBtE,OAAOC,OAAO,KAAK2Q,iBAAiBC,CAAQ,EAAG,CAC3FU,MAAAA,CACJ,CAAC,CAAC,EACE,CAACA,EAAO,CAOR,KACI,CAAEjT,gBAAAA,EAAiByE,WAAAA,GAAe,KAAK4F,OACL,KAAKkI,SAASW,wBAAwBC,KAAK,CAAC,CAC1E1N,SAAAA,EAAUhD,WAAAA,GACX2Q,IAAM,CAAA,IAAAC,EACL,MAAO,CAACrT,EAAgBsT,SAAS7Q,CAAU,GACvC,CAACgC,EAAW6O,SAAS7Q,EAAWN,KAAK,GACrCsD,EAAS1K,OAAEsY,EAAK,KAAKd,SAASC,kBAAkBY,CAAC,KAAC,MAAAC,IAAlCA,OAAAA,OAAAA,EAAoCE,WAC5D,CAAC,GAED,KAAKlJ,OAAOtF,QAAO,EAG/B,CASA,MAAMyO,cAAc7G,EAAS,CACzB,MACIrP,EAAiB,KACjB,CAAE+M,OAAAA,CAAO,EAAQ/M,EACjBmW,EAAiB,GACrB,IAAIzU,EACJ,OAAK2N,EAAQ+G,qBACTrJ,EAAO5F,WAAWkP,kBAAiB,EACnC3U,EAAS,MAAM1B,EAAGsW,cAAcvJ,EAAQsC,EAAS8G,CAAc,EAC/DpJ,EAAO5F,WAAWoP,iBAAgB,GAGtCxJ,EAAOrE,QAAQ,mBAAoBtE,OAAOC,OAAOrE,EAAGgV,iBAAiB3F,CAAO,EAAG,CAC3EmH,OAAuBL,EACvBtR,MAAuBwK,EAAQ8F,aAC/BsB,kBAAuBpH,EAAQoH,kBAC/BC,qBAAuBrH,EAAQsH,YAC/BP,mBAAuB/G,EAAQ+G,kBACnC,CAAC,CAAC,EACK1U,CACX,CAMA,MAAM4U,cAAcvJ,EAAQsC,EAAS,CAEjC,MACIrP,EAAsB,KACtBoQ,EAAsBrD,EAAO6J,OAAS,WACtC,CACIrJ,aAAAA,EACA2H,kBAAAA,EACA9U,SAAAA,CACJ,EAAsBiP,EAC1BtC,EAAO8J,eAAc,EACrB,IAAIC,EAAU,GACV1G,GACA7C,EAAazH,QAAQ,CAACiR,EAAcjB,IAAM,CACtC,MAAMkB,EAAW3H,EAAQ4H,YAAYnB,CAAC,EACtC,OAAOiB,EAAaG,aAAanK,CAAM,EAAEoK,wBAIrCH,EAASxG,QAAQ4G,WACjBJ,EAASnP,OAAM,CAEvB,CAAC,EAEL,MACIoP,EAAe5H,EAAQ4H,YAAYI,MAAK,EACxCN,EAAe1H,EAAQtF,YACvBuN,EAAetX,EAAGuX,gBAAgBlI,EAAQmI,UAAWpX,CAAQ,EACjE,GAAI,CAACC,EAAWoX,QAAQV,EAAaxX,UAAW+X,CAAY,EAAG,CAAA,IAAAI,EAC3D3K,EAAO4K,8BAA6B,EACpC3X,EAAG4X,kBAAkBb,CAAY,EACjCA,EAAaxX,UAAY+X,EACzBR,EAAU,GACV,MAAM/J,EAAOvQ,QAAQqb,YAAW,GAChCH,EAAA1X,EAAG8X,kBAAcJ,MAAAA,IAAjBA,QAAAA,EAAA1N,KAAAhK,EAAoB+W,CAAY,EAEpChK,EAAOgL,cAAa,EAChB7C,EAAkBxP,OAAS,IACtBoR,GAOG/J,EAAOiL,WACPf,EAAYnR,QAAQmS,GAAM,OAAOA,EAAGC,aAAa,EAGrDnL,EAAOuH,sBAAqB,GAV5BjF,EAAQsG,MAAQ,GAa5B,CAIAwC,wBAAwBC,EAAcrO,EAAakO,EAAIpT,EAAO,CAC1D,MAAM7E,EAAK,KAGX,OAAIA,EAAG+N,UAAY,EAAEhE,EAAYsO,gBAAkBtO,EAAYhH,UACpD,GAGJ,CAACkV,EAAGK,QAAQtY,EAAGuY,KAAKC,cAAc,CAC7C,CACAC,uBAAwB,CACpB,MAAM5L,EAAS,MAAM4L,sBAAqB,EAC1C5L,OAAAA,EAAO2L,eAAiB,qCACjB3L,CACX,CACA6L,mBAAmBC,EAAM,CACrB,MACI3Y,EAAoB,KACpB,CAAE+M,OAAAA,CAAO,EAAW/M,EACpB0U,EAAoB1U,EAAG4Y,sBAAsBD,CAAI,EACjD5O,EAAoBgD,EAAOqG,mBAAmBsB,CAAO,EACrD5I,EAAoBiB,EAAO8L,sBAAsBnE,CAAO,EACxDoE,EAAoB/L,EAAOgM,wBAAwBrE,CAAO,EAG9D,MAAO,CACH3K,YAAAA,EACA+B,eAAAA,EACAgN,iBAAAA,EACAvL,aALoB,CAACxD,CAAW,EAMhCmL,kBAPoB4D,EAAmB,CAACA,CAAgB,EAAI,CAAA,EASpE,CACAE,iBAAiBjP,EAAa,CAC1BA,EAAYlF,MAAMoU,WAAU,EAC5BlP,EAAYkP,WAAU,CAC1B,CACAnB,eAAe/N,EAAa,CAAA,IAAAmP,GAExBA,EAAAnP,EAAYlF,SAAK,MAAAqU,IAAA,QAAjBA,EAAmBC,SAAQ,EAC3BpP,EAAYoP,SAAQ,CACxB,CACAvB,kBAAkB7N,EAAa,CAAA,IAAAqP,GAC3BA,EAAArP,EAAYlF,SAAK,MAAAuU,IAAA,QAAjBA,EAAmBC,YAAW,EAC9BtP,EAAYsP,YAAW,CAC3B,CACAC,qBAAqBX,EAAM,CAAA,IAAAY,EACvB,MACIvZ,EAAgB,KAChB,CAAE+M,OAAAA,CAAO,EAAO/M,EAChB0U,EAAgB1U,EAAG4Y,sBAAsBD,CAAI,EAC7C,CACI5O,YAAAA,EACA+B,eAAAA,CACJ,EAAgB9L,EAAG0Y,mBAAmBC,CAAI,EAC1C1B,EAAgB,CAAA,EAChBuC,EAAmBzM,EAAO0M,2BAA2B1P,EAAYlF,MAAOiH,EAAgB,EAAI,EAAE,CAAC,EACnG,GAAI9L,EAAG0P,yBAA2B,CAAC5D,EAC/B,MAAM,IAAI4N,MAAM,6CAA+C3P,EAAYtM,EAAE,EAKjFuC,EAAGuY,KAAKoB,uBAAyB,CAAC5M,EAAO6M,KAAO7P,EAAY8P,YAGvD9M,EAAO+M,wBACR/M,EAAOgN,gCAA+B,EAG1C/Z,EAAGgZ,iBAAiBjP,CAAW,EAC/B,MACIiQ,GAAeT,EAAMvZ,EAAGia,sBAAkBV,MAAAA,IAAA,OAAA,OAArBA,EAAAvP,KAAAhK,EAAwB8L,EAAgB/B,CAAW,EACxEmQ,EAAqBla,EAAGka,mBAAqBla,EAAGma,yBAAyBH,EAAiBlO,EAAgB/B,CAAW,EACrHqQ,EAAqBC,EAAU7P,KAAKkK,EAAS3H,EAAOuN,iBAAkB,EAAI,EAC1EC,EAAqBF,EAAU7P,KAAKgP,EAAkBzM,EAAOuN,iBAAkB,EAAI,EAEvFJ,OAAAA,EAAmBM,UAAU,CAACD,EAAgBE,CAAC,EAC/C,MAAMC,iBACFR,EACAE,EACArN,EAAO4N,kBAAkBC,gBACzBjR,EAAQqQ,EAAgBvO,KAC5B,EACAwL,EAAY3R,KAAKoP,CAAO,EACjB,CACHvX,OAAkB4M,EAClB8Q,gBAAkB,CAAC9Q,CAAW,EAC9BiQ,gBAAkBA,GAAe,MAAfA,EAAiBvO,MAAQuO,EAAkB,KAC7D/C,YAAAA,EACAuC,iBAAAA,EAER,CACAsB,+BAAgC,CAAA,CAChCC,yBAA0B,CAAA,CAC1Bd,mBAAmBnO,EAAgB/B,EAAa,CAC5C,GAAI,CAAEiR,QAAAA,EAASC,QAAAA,GAAY,MAAMhB,mBAAmBnO,EAAgB/B,CAAW,EAE/E,OAAIA,EAAYmR,kBAAoB,CAACF,GAAWA,EAAUjR,EAAYmR,gBAAgBna,WAClFia,EAAUjR,EAAYmR,gBAAgBna,SAEtCgJ,EAAY8P,cAAgB,CAACoB,GAAWA,EAAUlR,EAAY8P,YAAYta,aAC1E0b,EAAUlR,EAAY8P,YAAYta,WAE/B,CACHkM,MAAQuP,EACRG,IAAQF,EAEhB,CACA,IAAIG,OAAQ,CACR,MAAQ,GAAE,KAAKrO,OAAOtP,qBAC1B,CACA4d,uBAAuBC,EAAQ,CAC3B,MAAMD,uBAAsB,EAExB,KAAKtO,OAAO6M,KAAO,CAAC,KAAK3E,SAASlL,YAAY8P,cAC9CyB,EAAOb,EAAI,EAEnB,CACAc,kBAAkBlM,EAASxK,EAAO,CAC9B,MAAM0W,kBAAkB,GAAGzZ,SAAS,EACpC,KACI,CAAEiL,OAAAA,CAAO,EAAI,KACb,CACIyO,MAAAA,EACAzR,YAAAA,EACAhJ,QAAAA,GACA,KAAKkU,SAGb,GAAIuG,GAAS,CAACzR,EAAY8P,YAAa,CAAA,IAAA4B,EACnC,KAAM,CAAEC,sBAAAA,CAAsB,EAAI3O,EAClCA,EAAO2O,sBAAwB,GAC/B3R,EAAYlF,MAAMlE,IAAI,UAAWI,CAAO,GACxC0a,EAAI1O,EAAOyC,SAASmM,eAAW,MAAAF,IAAA,QAA3BA,EAA6B5H,UAC7B9J,EAAYlF,MAAM/D,YAAcC,GAEpCgM,EAAO2O,sBAAwBA,EAEvC,CAEJ,CAtYIxY,EAFiB2R,EAEV/Y,QAAQ,oBAuYnB+Y,EAAiB5W,OAAS,mBAAoBiT,EAAmBC,gBAAgB0D,EAAkB,GAAM,cAAc,EACvH3D,EAAmBC,gBAAgB0D,EAAkB,GAAO,mBAAmB,EChZ/E,MAAM+G,GAAmB,CACrBC,OAAS,EACTC,OAAS,CACb,EAiGe,MAAMC,UAAqB1J,EAAezW,MAAMC,GAAsBmgB,EAAS,CAAE,CAuI5FjY,UAAUgJ,EAAQF,EAAQ,CACtB,MAAM9I,UAAUgJ,EAAQF,CAAM,EAG9B,KAAKE,OAAO5F,WAAW4B,KAAO,EAClC,CACAkT,eAAgB,CACZ,CAAC,KAAKlP,OAAOsH,eAAiB,KAAKtH,OAAOuH,sBAAqB,CACnE,CACAC,WAAY,CACR,KAAK0H,cAAa,CACtB,CAEAC,kBAAkBC,EAAQ,CAClBA,IAAW,SAAW,KAAKpP,OAAOqD,YAClCgM,QAAQC,KAAK,0DAA0D,EAE3E,KAAKJ,cAAa,CACtB,CACAK,iBAAkB,CACd,KAAKL,cAAa,CACtB,CACAM,sBAAuB,CACnB,KAAKN,cAAa,CACtB,CACAO,kBAAkBjR,EAAQ,CAEtB,YAAKkR,cAAgBhP,EAAYC,QAAQnC,CAAM,EACxCA,CACX,CACAmR,mBAAoB,CAChB,KAAKT,cAAa,CACtB,CACAU,mBAAmBpR,EAAQ,CACvB,KAAKwB,OAAO2H,QAAQV,MAAM4I,YAAY,4CAA8C,GAAErR,KAAU,EAChG,KAAK0Q,cAAa,CACtB,CAEAY,eAAe/Q,EAAgBgR,EAAmB,CAC9C,OAAIA,EACO,CAAE/gB,KAAO,KAAKghB,aAElB,KAAKC,WAAWH,eAAe/Q,CAAc,CACxD,CAEAmR,kBAAkBnR,EAAgBgR,EAAmB,CACjD,OAAIA,GAAqB,CAACA,EAAkBI,OACjC,KAAKC,eAET,KAAKH,WAAWC,kBAAkBnR,CAAc,CAC3D,CAEAsR,aAAatR,EAAgBgR,EAAmB,CAC5C,OAAIA,GAAqB,CAACA,EAAkBI,OACjC,KAAKG,UAET,KAAKL,WAAWI,aAAatR,CAAc,CACtD,CAEAwR,yBAAyBxR,EAAgBgR,EAAmB,OACxD,MAAM9c,EAAK,KACX,GAAI8c,GAAqB,CAACA,EAAkBI,OAAQ,CAChD,GAAIld,EAAG+c,cAAgB,QAGnB,OAFoB/c,EAAGyc,cAAcK,EAAkBS,UAAU,EAE5Cvd,EAAGmd,eAAiB,EAExC,CACD,MAAMK,GAAc5B,EAAAA,GAAa5b,EAAG+M,OAAO0Q,cAAcX,EAAmBhR,CAAc,CAAC,IAAvE8P,KAAAA,EAA4E,EAChG,OAAO5b,EAAG0d,qBAAuB1d,EAAG2d,aAAeH,GAG3D,OAAOxd,EAAGgd,WAAWM,yBAAyBxR,CAAc,CAChE,CACA8R,iBAAiB9R,EAAgBgR,EAAmB,CAChD,OAAIA,GAAqB,CAACA,EAAkBI,OACjC,KAAKW,oBAAsB,KAAKF,aAEpC,KAAKX,WAAWY,iBAAiB9R,CAAc,CAC1D,CAGAgS,mBAAmB3W,EAAY,CAC3BA,GAAU,MAAVA,EAAYrK,IAAI,CACZC,KAAU,aACVM,OAAU,qBACVJ,QAAU,IACd,CAAC,CACL,CACA8gB,mBAAmB,CAAElY,QAAAA,CAAQ,EAAG,CAExBA,GAAO,MAAPA,EAASmY,KAAKC,GAAKA,EAAEC,QAAU,CAACD,EAAEC,OAAOhB,MAAM,GAC/C,KAAKjB,cAAa,CAE1B,CACAkC,0BAA0B,CAAEtY,QAAAA,CAAQ,EAAG,CAEnC,GAAI,KAAKkH,OAAO+M,wBAA0BjU,IAAAA,MAAAA,IAAAA,QAAAA,EAASmY,KAAKC,GAAKA,EAAEC,QAAU,CAACD,EAAEC,OAAOhB,MAAM,EACrF,YAAKjB,cAAa,EAEX,EAEf,CAKAmC,qBAAqB/O,EAAS4F,EAAU,CACpC,MACIjV,EAAqC,KACrC,CAAE+M,OAAAA,CAAO,EAA4B/M,EACrC,CAAE+J,YAAAA,EAAamL,kBAAAA,CAAkB,EAAID,EACrC,CAAEoJ,cAAAA,GAAmChP,EAAQqF,QAEjD,GAAI3K,EAAYmU,QAAUG,IAAkBtR,EAAOuN,iBAAkB,CACjEta,EAAGse,sBAAwB,GAE3BjP,EAAQkP,sBAAwBF,EAChChP,EAAQmP,eAAiB,CAAA,EACzB,UAAWrZ,KAAc+P,EAAmB,CACxC,KAAM,CAAErQ,MAAAA,CAAM,EAAIM,EAIlB,GAAIN,EAAMqZ,SAAWnU,EAAYmU,OAAQ,CACrC,MAAM9F,EAAerL,EAAO0R,+BAA+BtZ,EAAY,EAAI,EAK3E,GAJAkK,EAAQmP,eAAelZ,KAAK,CACxBoP,QAAU0D,EACVsG,OAAUrE,EAAU7P,KAAK4N,EAAciG,CAAa,CACxD,CAAC,EACG,CAACre,EAAG2e,uBAAyB5R,EAAOyC,SAASC,UAAUmP,wBAAyB,CAEhF,MAAMC,EAAiBxE,EAAU7P,KAAK4N,EAAcrL,EAAO+F,sBAAsB,EACjFsF,EAAapE,MAAMxI,IAAO,GAAEqT,EAAerT,QAC3C4M,EAAapE,MAAMrD,KAAQ,GAAEkO,EAAelO,SAC5CmO,EAAQC,SAAShS,EAAOuN,iBAAkBlC,EAAcjT,EAAW1H,EAAE,UAMjFuC,EAAGse,sBAAwB,EAEnC,CAEAU,oBAAoB3P,EAAS4F,EAAU,CAEnC,GAAI,KAAKqJ,uBAAyB,KAAKK,sBAAuB,CAC1D,KACI,CAAElP,UAAAA,CAAU,EAAI,KAAK1C,OAAOyC,SAC5B,CAAE0O,OAAAA,GAAcjJ,EAASlL,YACzBkV,EAAgB5P,EAAQkP,sBAAsBW,sBAAqB,EAEvEzP,EAAU0P,eAAe,EAAGF,EAAa1T,OAAS8D,EAAQmP,eAAe,CAAC,EAAEE,OAAOnT,MAAM,EAEzFkE,EAAU2P,eAAe,EAAGH,EAAavO,MAAQrB,EAAQmP,eAAe,CAAC,EAAEE,OAAOhO,KAAK,EACvFuE,EAAS+E,gBAAkB,CAAEvO,MAAQyS,EAAO3e,UAAW4b,IAAM+C,EAAOnd,SAE5E,CACAse,uBAAuB,CAAE5I,kBAAAA,EAAmB1M,YAAAA,EAAa3J,SAAAA,EAAUuW,YAAAA,EAAa7K,eAAAA,CAAe,EAAG,CAC9F,MAAM9L,EAAK,KAIX,GAAIA,EAAGse,uBAAyB,CAACte,EAAGsf,sBAAwB,CAAC7I,IAAsBrW,GAAYuW,IAAgB7K,GAC3G,MAAO,CACH6J,MAAU,GACV4J,QAAUvf,EAAGwf,EAAE,wBAAwB,GAI/C,GAAI,CAACxf,EAAGyf,oBAAsBhJ,GAAqBA,IAAsB1M,EAAYmU,OACjF,MAAO,CACHvI,MAAU,GACV4J,QAAUvf,EAAGwf,EAAE,sBAAsB,GAG7C,GAAI/I,GAAqBA,IAAsB1M,EAAYmU,OAAQ,CAC/D,MACIwB,EAAqB1f,EAAG2f,WACxBC,EAAqBnJ,EAAkBvW,SAAWuW,EAAkB8G,WAAa9G,EAAkByH,OAAOX,WAC1GsC,EAAqBC,KAAKC,IAAI,GAAGhW,EAAYiW,YAAYhd,IAAIzC,GAASA,EAAMgd,UAAU,CAAC,EACvF0C,EAAqBJ,EAAgB9V,EAAYwT,WACrD,GAAIqC,EAAcK,GAAsBP,EACpC,MAAO,CACH/J,MAAU,GACV4J,QAAUvf,EAAGwf,EAAE,sBAAsB,GAIrD,CAEAU,iBAAiB,CAAE7Q,QAAAA,EAAS8Q,YAAAA,EAAapW,YAAAA,EAAa+B,eAAAA,EAAgBsU,eAAAA,EAAgB1L,QAAAA,EAAS2L,YAAAA,EAAaC,YAAAA,EAAaC,kBAAAA,CAAkB,EAAG,CAC1I,KACI,CAAErC,OAAAA,CAAO,EAAenU,EACxB,CAAE0M,kBAAAA,CAAkB,EAAIpH,EAC5B,IAAImR,EAAYtC,EAGhB,GAAIA,IAAWzH,GAAqB,CAAC,KAAKkI,sBAAuB,CAE7D,GAAIlI,GAAqB,KAAKgJ,mBAAoB,CAE9Ce,EAAY/J,EAAkBvW,UAA+BuW,EAAkByH,OAAOhB,OAA7CzG,EAA0EA,EAAkByH,OAGrI,MAAMuC,EAAiB,KAAK1T,OAAO8L,sBAAsBxJ,EAAQ8F,YAAY,EACzEsL,IAAmB3U,IACnBA,EAAiByU,EAAkBpY,SAAWsY,QAKlDD,EAAYL,EAAYhZ,WAAWuZ,SAEnCF,GAAaA,IAActC,IAC3BoC,EAAYhb,KAAKkb,EAAU7a,YAAYoE,CAAW,CAAC,EAEnD0D,EAAY5F,OAAOwY,EAAatW,CAAW,GAInD,GAAIA,EAAY7J,UAAYkgB,GAAkBA,IAAmBtU,EAC7D,UAAWvL,KAASwJ,EAAYiW,YAAa,CACzC,MAAMW,EAAqBpgB,EAAMqgB,YAAY/K,KAAK5M,GAAKA,EAAEd,WAAaiY,CAAc,EAChFO,IACAA,EAAmBxY,SAAW2D,GAM1C,GAAI0U,GAAa,CAACA,EAAUtD,OAAQ,CAChC,MACI2D,EAAmB,KAAK9T,OAAO+T,0BAA0BN,EAAW1U,CAAc,EAAEiV,UAAUC,sBAC9FC,EAAmBJ,GAAoBxG,EAAU7P,KAAKkK,EAASmM,CAAgB,EAE/EA,IACAnM,EAAQV,MAAMxI,IAAO,GAAEyV,EAAazV,QACpCkJ,EAAQV,MAAMrD,KAAQ,GAAEsQ,EAAatQ,SAGrC+D,EAAQwD,cAAgB,KACxB4G,EAAQC,SAAS8B,EAAkBnM,EAASA,EAAQlE,QAAQ0Q,MAAM,GAG9E,CAEAC,+BAA+B,CAAEpX,YAAAA,CAAY,EAAG,CAC5C,GAAIA,EAAY7J,SACZ,UAAWK,KAASwJ,EAAYiW,YAC5Bzf,EAAM4H,SAAW4B,EAAY5B,QAGzC,CAEA,MAAMiZ,6BAA6B,CAAE7C,sBAAAA,EAAuBC,eAAAA,CAAe,EAAG,CAC1E,GAAI,KAAKF,sBAAuB,CAE5B,UAAW+C,KAAa7C,EAAe,CAAC,EAAE9J,QAAQ4M,cAAa,GACvDD,EAAUE,qBAAuB,OAASF,EAAUE,qBAAuB,SAC3E,MAAMF,EAAUG,SAGxB,SAAW,CAAE9M,QAAAA,EAASgK,OAAAA,KAAYF,EAE9B9J,EAAQV,MAAMxI,IAAO,GAAEkT,EAAOlT,QAC9BkJ,EAAQV,MAAMrD,KAAQ,GAAE+N,EAAO/N,SAC/B4N,EAAsB5Y,YAAY+O,CAAO,EAGrD,CAEA+M,sBAAsBpS,EAAS,CAC3B,GAAI,KAAKqS,wBAAyB,CAC9B,KAAM,CAAExD,OAAAA,GAAW7O,EAAQsS,eAC3B,GAAIzD,GAAU,CAACA,EAAOhB,OAAQ,CAC1B,GAAI,CAAE3d,UAAAA,EAAWwB,QAAAA,CAAQ,EAAImd,EACzB7O,EAAQ2K,kBACRza,EAAYc,EAAW0f,IAAIxgB,EAAW8P,EAAQ2K,gBAAgBvO,KAAK,EACnE1K,EAAUV,EAAWuhB,IAAI7gB,EAASsO,EAAQ2K,gBAAgBmB,GAAG,GAEjE9L,EAAQ2K,gBAAkB,CACtBvO,MAAQlM,EACR4b,IAAQpa,IAIxB,CAIA0d,+BAA+B3F,EAAkB+I,EAAe,CAAA,IAAAC,EAC5D,GAAIhJ,GAAAA,OAAgBgJ,EAAhBhJ,EAAkBjU,SAAK,MAAAid,IAAA,QAAvBA,EAAyB5D,QAAU,CAACpF,EAAiBjU,MAAMqZ,OAAOhB,OAAQ,CAC1E,MAAMmB,EAAgB,KAAKtR,OAAO+T,0BAA0BhI,EAAiBjU,MAAMqZ,OAAQpF,EAAiB3Q,QAAQ,EACpH,OAAO2W,EAAQiD,SAAS1D,EAAgB,yBAAwBvF,EAAiBrb,KAAKokB,EAAgB,GAAK,UAAU,EAEzH,OAAO,KAAK7E,WAAWyB,+BAA+B3F,EAAkB+I,CAAa,CACzF,CAEA,MAAMG,cAAc,CAAEjY,YAAAA,EAAa+S,kBAAAA,EAAmBvd,UAAAA,EAAWmV,QAAAA,CAAQ,EAAG,CAExE,GAAIoI,EAAmB,CAKnB,GAJA/S,EAAYxK,UAAYA,EACxBwK,EAAc+S,EAAkBnX,YAAYoE,CAAW,EACvDA,EAAY1F,OAAOyY,EAAkB3U,QAAQ,EAEzCuM,EAAS,CACT,MACI2J,EAAgB,KAAKtR,OAAO+T,0BAA0BhE,CAAiB,EAAEiE,UAAUC,sBACnFiB,EAAgB5H,EAAU7P,KAAKkK,EAAS2J,CAAa,EAEzD6D,EAAUC,eAAezN,EAAS,EAAG,CAAC,EACtCwN,EAAUE,WAAW1N,EAASuN,EAAUI,EAAGJ,EAAUxH,CAAC,EACtDqE,EAAQC,SAASV,EAAe3J,EAAS3K,EAAY6W,YAAY,CAAC,EAAEnjB,EAAE,EAE1E,MAAM,KAAKsP,OAAOvQ,QAAQqb,YAAW,MAGrC,QAAO,KAAKmF,WAAWgF,cAAc,GAAGlgB,SAAS,CAEzD,CAIAgO,kBAAkBhE,EAAgByB,EAAc,CAC5C,OAAK,KAAKQ,UAENN,EAAY5F,OAAO0F,EAAc,GAAGA,EAAa+U,OAAOvY,GAAeA,EAAYwY,cAAgB,CAACxY,EAAYmU,OAAOhB,MAAM,CAAC,EAE3H3P,CACX,CACAiV,iBAAiB,CAAEvS,WAAAA,CAAW,EAAG,OAC7B,KACI,CAAElG,YAAAA,CAAY,EAAIkG,EAClB,CAAEsN,WAAAA,CAAW,EAAKxT,EACtB,GAAIA,EAAY7J,SAAU,CACtB,MACIF,EAAK,KACL,CAAE8L,eAAAA,EAAgB4E,MAAAA,EAAOnF,OAAAA,EAAQoF,KAAAA,EAAMnF,IAAAA,EAAK6E,WAAAA,CAAW,EAAIJ,EAC/DI,EAAW5P,IAAI,wBAAwB,EACvCT,EAAG0d,qBAAuBnS,EAC1BvL,EAAG6d,oBAAsBnN,EACzB,KACI,CACIlC,mBAAAA,EACA4B,WAAAA,GACqBpQ,EAAG+M,OAC5B0V,EAAyB1Y,EAAYvJ,SAAS8hB,OAAOI,GAAC,CAAA,IAAAC,EAAA,OAAAA,EAAID,EAAExU,oBAAgB,MAAAyU,IAAA,OAAA,OAAlBA,EAAoB3M,SAASlK,CAAc,EAAE,EAGvG8W,EAAyBpU,EAAmBqU,aAAa/W,EAAgB2W,EAAkB,GAAO1Y,EAAa/J,EAAG8iB,sBAAsB,EACxIC,EAAyB,CAAA,EAC7B,IAAIC,EACJ,GAAI5S,EAAY,CACZ4S,EAAa,CAAA,EACb,UAAW7G,KAAU/X,OAAO6e,OAAOL,CAAO,EACtCI,EAAW1d,KAAK6W,EAAOlM,UAAU,OAIrC+S,EAAaJ,GAAO,KAAPA,OAAAA,EAASI,WAE1B,GAAIA,EACA,UAAW7G,KAAU6G,EAAY,CAEzB5S,GACA+L,EAAOxL,MAAQA,EACfwL,EAAO3Q,KAAOA,EACd2Q,EAAO+G,YAAc/G,EAAO3Q,MAIxBxL,EAAG+c,cAAgB,QACnBZ,EAAO3Q,IAAM,EACb2Q,EAAO5Q,OAASvL,EAAGsd,yBAAyBxR,EAAgB/B,CAAW,GAGlE/J,EAAG+c,cAAgB,UACxBZ,EAAO5Q,OAASvL,EAAGyc,cAAcc,CAAU,GAE/CpB,EAAOgH,aAAehH,EAAOxL,KAC7BwL,EAAOxL,OAASV,EAAAA,EAAWkT,eAAXlT,KAAAA,EAA2BU,EAC3CwL,EAAO+G,YAAc/G,EAAO3Q,KAEhC,MAAM4X,EAAY5U,EAAmB6U,YAAYjT,EAAa,CAAEH,WAAakM,CAAO,EAAIA,EAAQ5Q,CAAM,EACtG6X,EAAU9S,UAAU,gBAAgB,EAAI,EACxCyS,EAAazd,KAAK8d,CAAS,EAGnC,MAAME,EAAqB,CACvBhT,UAAY,CACR,4BAA+C,EAC/C,CAAE,0BAAyBtQ,EAAG+c,aAAa,EAAI,GAEnDvM,QAAU,CACNC,eAAiB,yBAErBjQ,SAAcuiB,EACdQ,YAAc,CACVC,YAAmB,SACnBC,iBAAmB,CACvB,GAIA,CAAEjjB,SAAAA,CAAS,EAAIyP,EACfyT,GAAeljB,EAASmjB,UAAUpjB,GAASA,EAAMiQ,QAAQC,iBAAmB,uBAAuB,EACnGiT,KAAU,GACVljB,EAAS8E,KAAKge,CAAkB,EAGhC9iB,EAASojB,OAAOF,GAAO,EAAGJ,CAAkB,EAGpDrT,EAAW4T,cAAcrT,QAAQsT,MAAQvG,CAC7C,CAEJ,CAxiBIra,EADiB6Y,EACVjgB,QAAQ,gBAEfoH,EAHiB6Y,EAGVjT,eAAe,CAoBlBiU,YAAc,OAMdM,UAAY,EAMZF,eAAiB,EAmBjB4G,YAAc,GAUdpG,aAAe,GAOfgB,sBAAwB,GAYxBc,mBAAqB,GASrBH,qBAAuB,GAgBvBoC,wBAA0B,GAS1B/B,WAAa,IAEjBzc,EAvHiB6Y,EAuHVnP,eAAe,CAClByG,OAAS,CAAC,2BAA2B,EACrCZ,MAAS,CACL,oBAAqB,mBAAoB,iCACzC,uBAAwB,sBAAuB,+BAC/C,yBAA0B,wBAAyB,kBAAkB,EAEzEuR,SAAW,CACP,oBAAqB,eAAgB,2BAA4B,mBAAoB,iBACrF,iCAAkC,eAAe,IAGzD9gB,EAnIiB6Y,EAmIVkI,YAAY,CACfhI,cAAgB,QAsaxBF,EAAa9d,OAAS,eAAgBiT,EAAmBC,gBAAgB4K,EAAc,GAAO,cAAc,EClhB7F,MAAMmI,UAA+B7X,EAAuB,CAkCvE,WAAWxF,YAAa,CACpB,MAAO,CACHsd,YAAc,IAAIjgB,IAE1B,CAGAH,WAAY,OACR,MAAMA,UAAU,GAAGjC,SAAS,EAC5B,KAAK4K,6BAA8B/M,EAAA,cAA0C,KAAK+M,2BAA4B,GAC1GxJ,EAD+BvD,EACxB7D,QAAQ,+BACfoH,EAF+BvD,EAExBwM,cAAc,+BAFUxM,GAInC,KAAKoN,OAAOqX,SAAStnB,IAAI,CACrBC,KAAc,WACdsnB,YAAc,wBAEdC,KAAc,IACdrnB,QAAc,IAClB,CAAC,CACL,CAkFAL,sBAAsBC,EAAe,CACjC,MAAMD,sBAAsBC,CAAa,EACzCA,GAAa,MAAbA,EAAeC,IAAI,CACfC,KAAkB,gBAClBwnB,gBAAkB,mBAClBtnB,QAAkB,IACtB,CAAC,CACL,CACAunB,6BAA6B7nB,EAAsB,CAC/C,MAAM6nB,6BAA6B7nB,CAAoB,EACvDA,GAAoB,MAApBA,EAAsBG,IAAI,CACtBC,KAAkB,uBAClBwnB,gBAAkB,mBAClBtnB,QAAkB,IACtB,CAAC,CACL,CAGAwnB,uBAAwB,CAEpB,KAAKN,YAAYvb,MAAK,CAC1B,CACA8b,iBAAiB,CAAE1c,OAAAA,EAAQnC,QAAAA,EAAS1I,OAAAA,EAAQC,QAAAA,CAAQ,EAAG,CACnD,MAAM4C,EAAK,KAEX,GAAIgI,IAAW,SAAU,CAAA,IAAA1K,EACrB,MAAMD,EAASD,EAAQkP,SAEnBjP,IAAW,OAAOA,EAAOE,UAAa,YAAYD,EAAAD,EAAOG,SAAK,MAAAF,IAAA,OAAA,OAAZA,EAAcG,MAAOJ,EAAOE,YAC9EyC,EAAGmkB,YAAY9e,OAAOlI,EAAOM,EAAE,EAE/BuC,EAAG+M,OAAO4X,kBAAkB,IAAM,CAC9B3kB,EAAG+M,OAAOyB,mBAAmBC,yBAAyBtR,CAAM,CAChE,CAAC,GAIL6K,IAAW,UACXnC,EAAQC,QAAQ3I,GAAU6C,EAAGmkB,YAAY9e,OAAOlI,EAAOM,EAAE,CAAC,EAE1DuK,IAAW,aACXhI,EAAGmkB,YAAYvb,MAAK,CAE5B,CACAgc,iBAAiB,CAAE5c,OAAAA,EAAQnC,QAAAA,EAAS1I,OAAAA,EAAQC,QAAAA,CAAQ,EAAG,CACnD,KAAK+mB,YAAYvb,MAAK,EACtB,KAAKmE,OAAOtF,QAAO,CACvB,CAKAqI,kBAAkB3H,EAAUgC,EAAQ,CAChC,MACInK,EAA0B,KAC1B,CAAEmkB,YAAAA,EAAapX,OAAAA,CAAO,EAAI/M,EAC1B,CAAEokB,SAAAA,CAAS,EAAerX,EAC1B8X,EAA0B,CAAC7kB,EAAG8kB,iBAAmBzkB,EAAW0kB,aAAaX,EAAShjB,KAAMpB,EAAG8kB,eAAe,GAAK,EACnH,GAAI,CAAC9kB,EAAG+N,UAAY8W,GAAe1c,EAAS6c,kBAAmB,CAC3D,GAAI,CAACb,EAAY/e,IAAI+C,EAAS1K,EAAE,EAAG,CAC/B,MACIwnB,EAAU9c,EAAS6c,kBAAkBE,wBACjCnY,EAAOxN,UACPwN,EAAOhM,OACX,EACA8E,EAAUof,EAAOjiB,IAAI,CAACmiB,EAAOrP,IAAM,IAAI9V,EAAG0M,4BAA4B,CAClEjP,GAAgB,IAAG0K,EAAS1K,MAAMqY,IAClChR,QAAeqgB,EAAMrgB,SAAWqD,EAAS6c,kBAAkBlgB,SAAW,GACtEsgB,IAAgB,GAAEjd,EAAS6c,kBAAkBI,KAAO,MAAMD,EAAMC,KAAO,KACvE7lB,UAAe4lB,EAAM5lB,UACrBwB,QAAeokB,EAAMpkB,QACrBhE,KAAeooB,EAAMpoB,MAAQ,GAC7BkZ,WAAe9N,EAAS1K,GACxB4nB,aAAe,EACnB,CAAC,CAAC,EACNlB,EAAYxjB,IAAIwH,EAAS1K,GAAIoI,CAAO,EAExCsE,EAAO7E,KAAK,GAAG6e,EAAYzkB,IAAIyI,EAAS1K,EAAE,CAAC,EAE/C,OAAO0M,CACX,CACA6G,cAAc,CAAEqU,aAAAA,CAAa,EAAG,CAC5B,OAAOA,CACX,CAOAC,sCAAsCC,EAAc,CAAA,IAAAC,EAChD,OAAOD,GAAAA,OAAYC,EAAZD,EAAcjN,QAAQ,+BAA+B,KAAC,MAAAkN,IAAA,OAA1C,OAAZA,EAAwDC,YAAY1b,WAC/E,CAEJ,CApOI7G,EAFiBghB,EAEVpoB,QAAQ,0BACfoH,EAHiBghB,EAGVpb,eAAe,CAClB2D,SAAW,+BAcXqY,gBAAkB,OAOlBY,kBAAoB,GAKpBhZ,4BAA8BT,GAC9B0Z,WAAa,2BAyMrBzB,EAAuBjT,aAAe,GACtCiT,EAAuBjmB,OAAS,yBAA0BiT,EAAmBC,gBAAgB+S,EAAwB,GAAO,cAAc,ECzW1I,MACI0B,GAAmB,CACfC,kBAAoB,GACpBhY,cAAoB,EACxB,EAiEW,MAAMiY,WAA0BzT,CAAe,CAA/C,kCAEX0T,EAAAA,kBAAa,CAAA,GACbC,EAAAA,eAAU,CAAA,GACV,WAAWlqB,OAAQ,CACf,MAAO,mBACX,CACA,WAAWgN,cAAe,CACtB,MAAO,CACHmd,QAAU,EAElB,CACA,WAAWrZ,cAAe,CACtB,MAAO,CACHvI,OAAS,CACL,oBACA,qBACA,sBAAsB,EAE1BoO,MAAQ,CACJ,2BAA2B,EAGvC,CAEA1O,WAAY,CACR,MAAMA,UAAU,GAAGjC,SAAS,EAC5B,KAAKiL,OAAOmZ,WAAWppB,IAAI,CACvBqpB,WAAa,KAAKC,cAClBnpB,QAAa,IACjB,CAAC,CACL,CAMAopB,kBAAkBxZ,EAAQyZ,EAAO,GAAM,CAAA,IAAAxY,EACnC,MACI9N,EAAa,KACb,CACIT,UAAAA,EACAwB,QAAAA,EACAhE,KAAAA,EACAwpB,SAAAA,EACAN,QAAAA,EAAgBjmB,EAAGimB,QACnBpY,cAAAA,EAAgB,EACpB,EAAahB,EACb,CAAEE,OAAAA,CAAO,EAAI/M,EACbwmB,EAAa3Z,EAAO4Z,WAAa5Z,EAASA,EAAO2Z,WAErD,IAAI1a,EAAkBe,EAAOf,gBAAkBe,EAAO1E,SACtD,KAAM,CAAEue,YAAAA,CAAY,EAAI7Z,EAOxB,GANI6Z,GACAxE,EAAUyE,kBAAkB5Z,EAAO2H,QAAS,yBAA0B,IAAK3H,CAAM,EAEjFc,IACA7N,EAAG+lB,WAAWrgB,OAAS1F,EAAGgmB,QAAQtgB,OAAS,GAE3C1F,EAAG+N,SAEH,OAEJ,GAAIwY,EAAU,CACVvmB,EAAG4mB,iBAAiB/Z,CAAM,EAC1B,OAEJ7M,EAAGgmB,QAAQ1gB,KAAKuH,CAAM,EACtB,IAAIga,EACA9Z,EAAO+Z,YACPD,EAAO9Z,EAAOga,kBAAkBP,EAAY,GAAM,CAAE/a,MAAQlM,EAAW4b,IAAMpa,CAAQ,CAAC,GAGlF+K,IAEAA,EAAiBiB,EAAOrQ,MAAMkB,QAAQkO,CAAc,GAExD+a,EAAO9Z,EAAOga,kBAAkBjb,EAAgB,KAAM,GAAM,CAAEL,MAAQlM,EAAW4b,IAAMpa,GAAW,CAAC+K,CAAc,GAEhH+a,IAIDZ,IACIlZ,EAAO+G,aACP+S,EAAKla,QAAQsZ,EAAS,EAAGA,EAAS,CAAC,EAGnCY,EAAKla,QAAQ,EAAGsZ,EAAS,EAAGA,CAAO,GAG3CjmB,EAAG+lB,WAAWzgB,KACVuhB,EAAKG,UAAU,CACXxmB,SAAW,CACP,CACIymB,MAAQ,+BACR1W,KAAQxT,CACZ,CAAC,EAELyT,QAAU,CACN0Q,OAASwF,GAEbO,MAAQ,CACJ,0BAAsD,EACtD,CAACpa,EAAOuY,GAAG,EAA2CvY,EAAOuY,IAC7D,CAACvY,EAAOoa,OAAS,iCAAiC,EAAI,CAC1D,GACD,EAAI,CACX,EACIX,GACAtmB,EAAGsmB,KAAI,GAEXxY,EAAAf,EAAO4B,cAAU,MAAAb,IAAA,QAAjBA,EAAA9D,KAAA+C,EAAoB6B,GAASA,EAAMyX,kBAAkBxZ,EAAQyZ,CAAI,CAAC,EACtE,CACAA,MAAO,CACHxH,EAAQoI,KAAK,CACTC,cAAgB,KAAKC,YACrBhE,UAAgB,CACZiE,aAAe,GACf7mB,SAAe,KAAKulB,UACxB,CACJ,CAAC,CACL,CACAa,iBAAiBU,EAAU,CACvB,KAAKC,mBAAmB,CACpBnjB,OAAOC,OAAO,CAAA,EAAIijB,EAAU,CACxBZ,aAAeY,EAASZ,aAAe,IAAM,SAC7CO,MAAc,gBACdV,SAAc,GACdhnB,UAAc,KAAKwN,OAAOxN,UAC1BwB,QAAcumB,EAAS/nB,UAC1B,EACD6E,OAAOC,OAAO,CAAA,EAAIijB,EAAU,CACxBZ,aAAeY,EAASZ,aAAe,IAAM,QAC7CO,MAAc,gBACdV,SAAc,GACdhnB,UAAc+nB,EAASvmB,QACvBA,QAAc,KAAKgM,OAAOhM,QAC7B,CAAC,EACH,CAAE8M,cAAgByZ,EAASzZ,aAAc,CAAC,CACjD,CAQA0Z,mBAAmBC,EAAW1kB,EAAU,CAAA,EAAI,CACxC,MACI9C,EAAK,KACL,CACI6N,cAAAA,EAAgB,EACpB,EAAK/K,EACL+K,IACA2Z,EAAYA,EAAUnQ,MAAK,EAC3BrX,EAAG+lB,WAAWrgB,OAAS1F,EAAGgmB,QAAQtgB,OAAS,GAE3C1F,CAAAA,EAAG+N,WAGPyZ,EAAU1hB,QAAQwhB,GAAY,CAI1BtnB,EAAGqmB,kBAAkBiB,EAASzB,kBAAoByB,EAAWljB,OAAOqjB,eAAe7B,GAAkB0B,CAAQ,EAAG,EAAK,CACzH,CAAC,EACDtnB,EAAGsmB,KAAI,EACX,CAMA,MAAMoB,qBAAqBC,EAAU,GAAO,CAAA,IAAAC,EACxC,MACI5nB,EAAa,KACb,CAAE+M,OAAAA,CAAO,EAAI/M,EACb2nB,GACAzF,EAAUyE,kBAAkB5Z,EAAO2H,QAAS,yBAA0B,IAAK3H,CAAM,EAErF5G,MAAMqE,KAAKxK,EAAGonB,YAAY5mB,QAAQ,EAAEsF,QAAQ4O,GAAW,CAC/CiT,GACAjT,EAAQV,MAAM6T,QAAU,EACxB7nB,EAAG8nB,gBAAqBC,GAAYC,gBAAgB,CAChDtT,QAAAA,EACAuT,SAAW,UACXhrB,QAAW8P,EACXmb,QAAWA,IAAM,CACbloB,EAAG+lB,WAAWrgB,OAAS1F,EAAGgmB,QAAQtgB,OAAS,EAC3C1F,EAAGsmB,KAAI,CACX,CACJ,CAAC,IAGDtmB,EAAG+lB,WAAWrgB,OAAS1F,EAAGgmB,QAAQtgB,OAAS,EAC3C1F,EAAGsmB,KAAI,EAEf,CAAC,GACDsB,EAAA7a,EAAO4B,cAAUiZ,MAAAA,IAAjBA,QAAAA,EAAA5d,KAAA+C,EAAoB6B,GAASA,EAAM8Y,qBAAqBC,CAAO,CAAC,CACpE,CACA,IAAIP,aAAc,CACd,OAAK,KAAKe,eACN,KAAKA,aAAejG,EAAUkG,cAAc,CACxClK,OAAgB,KAAKnR,OAAOuN,iBAC5B+N,cAAgB,GAChBpB,MAAgB,2BACpB,CAAC,GAEE,KAAKkB,YAChB,CACAG,2BAA4B,CACxB,KAAKlC,cAAa,CACtB,CACAA,eAAgB,CACR,KAAKJ,QAAQtgB,OAAS,GACtB,KAAK6hB,mBAAmB,KAAKvB,OAAO,CAE5C,CACAlV,eAAe/C,EAAUgD,EAAK,CACtBhD,GACA,KAAK2Z,qBAAoB,EAE7B,MAAM5W,eAAe/C,EAAUgD,CAAG,CACtC,CAEA,IAAIE,cAAe,CAAA,CACvB,CACA6U,GAAkB7nB,OAAS,oBAAqBiT,EAAmBC,gBAAgB2U,GAAmB,GAAO,CAAC,eAAgB,OAAO,CAAC,EC3SvH,MAAMyC,EAAwB,CAEzCzoB,YAAY,CAAEmoB,SAAAA,EAAU5U,OAAAA,EAAQmV,MAAAA,CAAM,EAAG,CACrCpkB,OAAOC,OAAO,KAAM,CAMhB4jB,SAAAA,EAOA5U,OAAAA,EAOAmV,MAAAA,CACJ,CAAC,EACDpkB,OAAOqkB,OAAO,IAAI,CACtB,CACJ,CA1BIvlB,EADiBqlB,GACVzsB,QAAQ,2BA2BnBysB,GAAwBtqB,OAAS,0BCwLlB,MAAMyqB,UAAqBC,GAA0BC,GAAmBC,GAAkBC,EAAwB,CAAC,CAAC,CAAE,CAqFjI,WAAWhtB,OAAQ,CACf,MAAO,cACX,CAyQA,WAAW6H,eAAgB,CACvB,MAAO,CAyNHolB,mBAAqBC,GASrBC,qBAAuBC,GASvBC,gBAAkBjrB,EASlBkrB,qBAAuBC,GASvBC,mBAAqBC,GAQrBC,0BAA4BC,GAQ5BC,qBAAuBC,GAQvBC,gBAAkBxmB,EAQlBymB,qBAAuBC,GAQvBC,mBAAqBC,GASrBC,cAAgB,KAOhBC,6BAA+B,8NAc/BC,iBAAmB,GACnBxtB,qBAAuB,CAAA,EACvBytB,SAAWC,GAEnB,CACA,WAAWvhB,cAAe,CACtB,MAAO,CAkBHwhB,UAAY,KAEpB,CAEA,IAAIC,WAAY,CACZ,OAAO,KAAKpjB,UAChB,CAGA,IAAImjB,WAAY,CACZ,OAAO,KAAK3tB,qBAAqB6tB,UACrC,CACAC,gBAAgBH,EAAW,CACvB,KAAK3tB,qBAAqBiF,KAAO0oB,CACrC,CAEJ,CACA5B,EAAazqB,OAAS,eCn5BtB,IAAAysB,GAAethB,GAAU,cAA0CA,GAAUC,GAAM,CAC/E,WAAWvN,OAAQ,CACf,MAAO,4BACX,CACA,WAAWgN,cAAe,CACtB,MAAO,CAoDHiU,YAAc,QAUd4N,0BAA4B9f,EAU5B+f,2BAA6BngB,EAErC,CAEAogB,0BAA0B9N,EAAa+N,EAAgB,CACnD,MAAM9qB,EAAK,KACNA,EAAGqU,eACJrU,EAAG+qB,aAAY,EAEnB,MAAMF,0BAA0B9N,EAAa+N,CAAc,CAC/D,CAEAjO,eAAehQ,EAAQ,CACnBA,OAAAA,EAAS,MAAMgQ,eAAehQ,CAAM,EAChC,aAAcA,IACdA,EAAO9Q,KAAO,YAEX8Q,CACX,CACAke,cAAe,CACX,MAAM/qB,EAAK,KACX,GAAIA,EAAG4iB,QACH,UAAWoI,KAAOhrB,EAAG4iB,QACjB5iB,EAAG4iB,QAAQoI,CAAG,EAAExX,QAAO,EACvB,OAAOxT,EAAG4iB,QAAQoI,CAAG,CAGjC,CASAC,sBAAsBlO,EAAa,CAC/B,MAAM/c,EAAK,KACX,GAAI,CAACA,EAAG8T,aACJ,OAAO,KAEX,KAAM,CAAE6G,kBAAAA,EAAmBuQ,WAAAA,CAAW,EAAIlrB,EACrCA,EAAG4iB,UACJ5iB,EAAG4iB,QAAU,CAAA,GAEjB,KAAM,CAAEA,QAAAA,CAAQ,EAAI5iB,EACpB,OAAQ+c,EAAYhhB,KAAI,CAEpB,IAAK,QACD,OAAK6mB,EAAQuI,kBACTvI,EAAQuI,gBAAkBnrB,EAAG4qB,2BAA2BrlB,IAAI,CACxDoK,UAA8B3P,EAC9B2a,kBAAAA,EACA/O,uBAA8Bsf,EAAWE,2BACzCvf,4BAA8Bqf,EAC9B1hB,eAA8BxJ,GAC/B+c,CAAW,GAEX6F,EAAQuI,gBAGnB,IAAK,OACD,OAAKvI,EAAQyI,iBACTzI,EAAQyI,eAAiBrrB,EAAG2qB,0BAA0BplB,IAAI,CACtDoK,UAA8B3P,EAC9B2a,kBAAAA,EACA/O,uBAA8Bsf,EAAWI,0BACzCzf,4BAA8Bqf,EAC9B1hB,eAA8BxJ,GAC/B+c,CAAW,GAEX6F,EAAQyI,eAEnB,IAAK,WAED,MAAO,CACHtvB,KAAsB,WACtB4T,UAAsB3P,EACtBurB,YAAsBxO,EAAYtT,SAClCkB,oBAAsBoS,EAAYtT,UAG1C,QACI,OAAO,IACf,CACJ,CACA,IAAI+hB,aAAc,CAAA,CACtB,ECxKA,SAASC,GAAmBC,EAAO,CAC/B,MAAO,CACHC,WAAa,CACTD,MAAAA,CACJ,EAER,CAkGe,MAAME,UAA0BC,GAAkBjwB,MAAMkwB,GAAiBC,GAA4BC,EAAe,CAAE,CAuLjI,IAAI5H,UAAW,CACX,OAAO,MAAMA,QACjB,CACA,IAAIA,SAASA,EAAU,CACnB,MAAM6H,EAAkB,KAAKC,UAC7B,MAAM9H,SAAWA,EACb,OAAK+H,SAAW,CAAC/H,GAAa6H,GAAmBA,IAAoB7H,IAGzE,KAAK8H,UAAUpvB,IAAI,CACfC,KAAiB,WACjBqvB,eAAiB,2BACjBnvB,QAAiB,IACrB,CAAC,CACL,CACAovB,gBAAiB,CACb,MAAMA,eAAc,EACpB,MAAMrsB,EAAK,KACXA,EAAGssB,6BAA+BtsB,EAAGssB,6BAA6BC,KAAKvsB,CAAE,EACzEA,EAAGwsB,wBAA0BxsB,EAAGwsB,wBAAwBD,KAAKvsB,CAAE,CACnE,CACAysB,WAAY,CAAA,IAAAC,EAAAC,EACR,MAAMF,UAAU,GAAG3qB,SAAS,EAE5B,MAAM8qB,GAAKF,GAAGC,EAAA,KAAKnwB,SAAQqwB,YAAQ,MAAAH,IAArBA,OAAAA,OAAAA,EAAA1iB,KAAA2iB,CAAwB,EAClCC,GAAS,KAAKE,iBACdF,EAAMG,iBAAiB,KAAKD,eAAe,CAEnD,CACAE,wBAAwB7vB,EAAQ,CAC5B,GAAI,CAACA,EAED,SAAW,CAACA,EAAQ8vB,CAAM,IAACC,EAAI,KAAKC,sBAAqB,KAAE,MAAAD,IAAA,OAAA,OAA5BA,EAA8BE,QAAO,EAAI,CAAA,IAAAF,EAAAG,GACpEA,EAAAlwB,EAAOmwB,gBAAYD,MAAAA,IAAnBA,QAAAA,EAAArjB,KAAA7M,EAAsB8vB,CAAM,EAGpC,MAAMD,wBAAwB,GAAGlrB,SAAS,CAC9C,CAGAyrB,YAAY/wB,EAAS,CACjB,KAAK6K,gBAAgB,0BAA0B,EAC/C7K,EAAQM,IAAI,CACRC,KAAwB,2BACxB0K,QAAwB,2BACxB+lB,sBAAwB,iCACxBC,oBAAwB,+BACxBC,kBAAwB,sBACxBzwB,QAAU,IACd,CAAC,CACL,CACA8J,cAAcvK,EAAS,CACnB,KAAK+wB,YAAY/wB,CAAO,EAExB,KAAKmxB,YAAcnxB,EACnB,KAAKE,MAAQF,EAAQK,aACzB,CAGA+wB,cAAe,CACX,OAAO,KAAKC,SAChB,CACAC,kBAAkBtwB,EAAO4D,EAAM2sB,EAAQ,CACnC,OAAO,KAAKvxB,QAAQwxB,IAAI,mBAAoBxwB,EAAO4D,EAAM2sB,CAAM,CACnE,CACAE,mCAAoC,CAChC,MAAMjuB,EAAK,KAIX,GAAIA,EAAGyU,UAAW,CAEd,MAAMyZ,EAAc,CAAEC,YAAcnuB,EAAGouB,oBAAmB,GA4B1DpuB,EAAG0I,QAAQ,sBAAuBwlB,CAAW,EAE7CluB,EAAGquB,sBAAwBruB,EAAGmuB,YAAcD,EAAYC,YACxDnuB,EAAGsuB,oBAAmB,EAE9B,CACAC,kBAAkB/wB,EAAO,CACrB,KAAK8wB,oBAAmB,CAC5B,CACA,IAAInnB,YAAa,CAAA,IAAAqnB,EACb,OAAAA,EAAO,KAAKhyB,WAAO,MAAAgyB,IAAA,OAAA,OAAZA,EAAcrnB,UACzB,CACA,IAAIA,WAAWA,EAAY,CACvB,MAAMA,WAAaA,CACvB,CACAsnB,6BAA6BjxB,EAAO4D,EAAM,CACtC,OAAO,KAAKstB,4BACN,KAAKZ,kBAAkBtwB,EAAO4D,EAAMutB,EAASC,WAAW,EACxDvuB,EAAWwuB,eAAerxB,EAAO4D,CAAI,CAC/C,CACA0tB,6BAA6BtxB,EAAO4D,EAAM,CACtC,OAAO,KAAKstB,4BACN,KAAKZ,kBAAkBtwB,EAAOmxB,EAASC,YAAaxtB,CAAI,EACxDf,EAAW0uB,GAAG3tB,EAAM5D,CAAK,CACnC,CACAwxB,oBAAoBC,EAAY,CAC5B,MAAQ,GAAEA,EAAWzxB,QAAQ6C,EAAW6uB,mBAAmBD,EAAW7tB,IAAI,GAC9E,CAgBAgtB,oBAAoBe,EAAU/tB,EAAM,CAAA,IAAAguB,EAEhC,GAAI,GAAAA,EAAC,KAAK5yB,WAAO4yB,MAAAA,IAAZA,QAAAA,EAAcxC,OACf,OAEJ,KACI,CAAExI,SAAAA,CAAS,EAAI,KACf+J,EAAwB,CAAA,EAC5BgB,EAAWA,GAAY/K,EAASiL,UAChCjuB,EAAOA,GAAQgjB,EAAShjB,KACxB,IAAIkuB,EAEAH,IAAa,IAEb/tB,EAAWf,EAAWkvB,eAAenuB,CAAI,EACzC+tB,EAAWrP,KAAK0P,MACZ,KAAKd,4BAA8B,KAAKZ,kBAAkBqB,EAAU/K,EAAShjB,KAAMA,CAAI,EACjFf,EAAW0uB,GAAG3tB,EAAM+tB,EAAU/K,EAAShjB,IAAI,CACrD,GAGJ,UAAWquB,IAAU,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAE/B,GAAI,EAAEN,EAAWM,GAAS,CACtBH,EAAYH,EAAWM,EACvB,MAIHH,IACDA,EAAYH,GAEhB,QAAS3xB,EAAQ8xB,EAAW9xB,GAAS2xB,EAAU3xB,GAAS8xB,EACpDnB,EAAY7oB,KAAK,CACb9H,MAAAA,CACJ,CAAC,EAEL,MAAMkyB,EAAYvB,EAAYA,EAAYzoB,OAAS,CAAC,EAEpDgqB,OAAAA,EAAUtuB,KAAOA,EACjBsuB,EAAUxzB,KAAO,KAAK8yB,oBAAoBU,CAAS,EAC5CvB,CACX,CACAwB,iBAAiBC,EAAY,CACzB,MAAM5vB,EAAK,KAGXA,EAAG6vB,oBAAsB,GACzB,MAAMF,iBAAiB,GAAG7tB,SAAS,EACnC9B,EAAG6vB,oBAAsB,GAOrB7vB,EAAGxD,QAAQszB,0BAA4B9vB,EAAGyU,WAC1CzU,EAAG+vB,yBAAwB,CAEnC,CACAC,qBAAsB,CAClB,KAAKlD,gBAAkB,KACvB,KAAKE,wBAAuB,CAChC,CACAiD,sBAAuB,CACnB,MACIjwB,EAAQ,KACR4sB,EAAQ5sB,EAAGxD,QAAQqwB,SAAQ,EAC/B,GAAI,CAAC7sB,EAAG8sB,gBACJ9sB,EAAG8sB,gBAAkBF,EAAMsD,cAAcC,GAAmB5qB,IAAG,CAAE,MAEhE,CACD,MAAM6qB,EAAoBxD,EAAMyD,KAAKrwB,EAAG8sB,eAAe,EACvD9sB,EAAGxD,QAAQ8zB,sBAAsBF,CAAiB,EAEtDpwB,OAAAA,EAAG8sB,gBAAgByD,aAAa3D,EAAO,IAAI4D,GAAkB,CACzDC,yBAA2B,GAC3BC,UAA2B1wB,EAAGokB,SAASuM,MAAM3tB,IAAI4tB,IACtC,CACHrxB,UAAYqxB,EAAKrxB,UACjBwB,QAAY6vB,EAAK7vB,QACjB8vB,UAAY,IAEnB,CACL,CAAC,CAAC,EAGF7wB,EAAG8wB,kBAAiB,EACb9wB,EAAG8sB,eACd,CACAiE,gCAAiC,CAC7B,KAAKla,eAAc,CACvB,CACAma,8BAA+B,CAC3B,KAAKjZ,cAAa,CACtB,CACAkZ,wBAAyB,CACrB,KAAM,CAAEz0B,QAAAA,CAAQ,EAAI,KACpB,OAAOA,EAAQ00B,eAAiB,KAAKC,sBACjC30B,EAAQ40B,cAAgB,KAAKC,qBAC7B70B,EAAQ80B,cAAgB,KAAKC,mBACrC,CACAC,yBAAyB,CAAEC,OAAAA,EAAQC,gBAAAA,EAAiBC,aAAAA,CAAa,EAAG,CAChE,GAAIA,EAAc,CACd,MAAM3xB,EAAK,KAKX,GAJKA,EAAG8sB,iBACJ9sB,EAAG+vB,yBAAwB,EAG3B/vB,EAAG0uB,6BAA+B1uB,EAAGixB,uBAAsB,EAAI,CAC/DjxB,EAAGmxB,qBAAuBM,EAAOP,aACjClxB,EAAGqxB,oBAAsBI,EAAOL,YAChCpxB,EAAGuxB,oBAAsBE,EAAOH,YAEhC,MAAMpD,EAAc,CAAEC,YAAcnuB,EAAGouB,oBAAmB,GAC1DpuB,EAAG0I,QAAQ,sBAAuBwlB,CAAW,EAE7CluB,EAAGquB,sBAAwBruB,EAAGmuB,YAAcD,EAAYC,YAGvDnuB,EAAGkmB,WAAW0L,OAKf5xB,EAAG+X,cAAc2Z,CAAe,EAJhC1xB,EAAGkmB,WAAW2L,aAAY,EAOtC,CACAC,qBAAqBjtB,EAAO,CACxB,MAAMitB,qBAAqBjtB,CAAK,EAC5B,KAAKnI,MAAMq1B,QAAU,IAErB,KAAKC,gBAAgBpwB,KAAO,CAAA,EAC5B,KAAKowB,gBAAgBvqB,QAAO,EAEpC,CACAwqB,sBAAsBC,EAAQC,EAAW,CACrC,MAAMnyB,EAAK,KACX,GAAI,CAACmyB,EAAW,CACZ,KAAM,CAAEC,OAAAA,CAAO,EAAIpyB,EACf,CAACA,EAAGqyB,eAAiBD,EAAOE,YAC5BF,EAAOE,UAAY,IAEvBJ,EAAS,MAAMD,sBAAsB,GAAGnwB,SAAS,EAErD,OAAOowB,CACX,CACAK,cAAcC,EAAYC,EAAO/O,EAAO0O,EAAQ,CAC5C,GAAIK,EAAMC,gBAAiB,CACvB,KACI,CAAEC,SAAAA,CAAS,EAAI,KACfn1B,EAAQi1B,EAAML,EAAOn2B,KAAK,EAC1B22B,EAAcR,EAAOS,QAAU,EAAIJ,EAAMlnB,OAC7CinB,OAAAA,EAAWjnB,OAASqnB,IAAgBp1B,EAAQm1B,EAAWA,EAAWn1B,GAASm1B,EAC3EH,EAAWnQ,EAAI,EAAImQ,EAAWjnB,OACvBinB,EAEf,CAEAM,oBAAoBV,EAAQI,EAAYC,EAAO,CAC3C,GAAIL,EAAO30B,KAAO,SACd,OAAQ,GAAI,CACR,KAAKg1B,EAAMM,gBACP,MAAO,kBACX,KAAKN,EAAMO,iBACP,MAAO,kBACf,CAEJ,MAAO,EACX,CACA,IAAIC,iBAAkB,CAClB,MACIjzB,EAAS,KACTkzB,EAASlzB,EAAGmzB,aAChB,IAAIC,EAAYpzB,EAAGqzB,iBACnB,OAAI,CAACD,GAAapzB,EAAGszB,gBAAkBJ,KACnCE,EAAYG,GAAa7zB,IAAIM,EAAGwzB,YAAcN,CAAM,EACpDlzB,EAAGqzB,iBAAmBD,GAEnBA,CACX,CASAK,cAAclyB,EAAQH,EAAMsyB,EAAiB,KAAKA,eAAgB,CAAA,IAAAC,EAE9D,GAAI,GAAAA,EAAC,KAAKn3B,WAAOm3B,MAAAA,IAAZA,QAAAA,EAAc/G,OACf,OAEJ,KAAM,CAAEgH,UAAAA,EAAWX,gBAAAA,CAAgB,EAAI,KACvC7xB,EAAOA,GAAQwyB,EACf,MACIC,EAAgBxzB,EAAW6uB,mBAAmB9tB,CAAI,EAClD0yB,EAAgB,KAAKhF,6BAA6BvtB,EAAQH,CAAI,EAClE,OAAO6xB,EAAgBC,OAAOY,CAAa,GAAKJ,EAAiBG,EAAgB,GACrF,CACAE,qBAAsB,CAClB,KACI,CAAE1yB,WAAAA,EAAY2yB,iBAAAA,EAAkB5P,SAAAA,CAAS,EAAI,KAC7C6P,EAA6CD,GAAoB3yB,EACrE,OAAOhB,EAAW0kB,aAAaX,EAAShjB,KAAM6yB,CAAW,EAAI,EAAI7P,EAAShjB,KAAO6yB,CACrF,CACAC,eAAe,CAAEzB,MAAAA,CAAM,EAAG,CACtB,MACIzyB,EAAe,KACf,CAAEokB,SAAAA,CAAS,EAAIpkB,EACnB,IAAI0B,EAAS,GACb,GAAI+wB,EAAMC,gBAAiB,CACvB,MACItxB,EAAgBpB,EAAG+zB,oBAAoB,GAAGjyB,SAAS,EACnDqyB,EAAgBn0B,EAAGyzB,cAAchB,EAAMlxB,OAAQH,CAAI,EACnDgzB,EAAgBp0B,EAAGyzB,cAAchB,EAAMH,UAAWlxB,CAAI,EACtDizB,EAAgBr0B,EAAGwf,EAAE,0BAA0B,EACnD,IACI8U,EAAoB,IACpBC,EAAoBv0B,EAAGwf,EAAE,uBAAuB,EAChDgV,EAAoB,GACpBn0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS8F,GAAG,IAAM,EACzDF,EAAev0B,EAAGwf,EAAE,sBAAsB,EAErCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS+F,MAAM,GAAK,EAChEJ,EAAa,aAERj0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAASgG,IAAI,GAAK,IAC9DL,EAAa,MAEjB,IAAIM,EAAmB,CAAC,GAAGnC,EAAMoC,mBAAmBzH,QAAO,CAAE,EACxD9K,OAAO,CAAC,CAACna,EAAUvG,CAAI,IAAMA,EAAKL,MAAM,EACxC8I,KAAK,CAAC,CAACyqB,EAAMC,CAAM,EAAG,CAACC,EAAMC,CAAM,IAAMF,EAAOxzB,OAAS0zB,EAAO1zB,OAAS,GAAK,CAAC,EAChFqzB,EAAiBlvB,OAAS1F,EAAGk1B,6BAC7BV,EAAoB,OAASx0B,EAAGwf,EAAE,aAAa,EAAE2V,QAAQ,UAAWP,EAAiBlvB,OAAS1F,EAAGk1B,0BAA0B,EAC3HN,EAAmBA,EAAiBvd,MAAM,EAAG,KAAK6d,0BAA0B,GAEhF,MAAMtU,EAAcgU,EAAiB5xB,IAAI,CAAC,CAACmF,EAAUwQ,CAAI,IAC9C0b,EAAcc,QAAQ,aAAcC,EAAaC,WAAWltB,EAASpL,IAAI,CAAC,EAC5Eo4B,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAKpX,OAAQH,CAAI,CAAC,EAC1D+zB,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAK2Z,UAAWlxB,CAAI,CAAC,EAC7D+zB,QAAQ,QAASxc,EAAKoa,gBAAkB,kBAAoBpa,EAAKqa,iBAAmB,mBAAqB,EAAE,CACnH,EAAEsC,KAAK,MAAM,EAAId,EAClB9yB,EAAS6yB,EACJY,QAAQ,gBAAiBvU,CAAW,EACpCuU,QAAQ,cAAe90B,EAAW6yB,OAAOT,EAAM7B,KAAKrxB,UAAW+0B,CAAU,CAAC,EAC1Ea,QAAQ,YAAa90B,EAAW6yB,OAAOT,EAAM7B,KAAK7vB,QAASuzB,CAAU,CAAC,EACtEa,QAAQ,cAAehB,CAAS,EAChCgB,QAAQ,cAAef,CAAS,EAChCe,QAAQ,QAAS1C,EAAMM,gBAAkB,kBAAoBN,EAAMO,iBAAmB,mBAAqB,EAAE,EAClHtxB,EAAU,wCAAuCA,UAErD,OAAOA,CACX,CACA6zB,kBAAkB,CAAE9C,MAAAA,CAAM,EAAG,CACzB,MACIzyB,EAAe,KACf,CAAEokB,SAAAA,CAAS,EAAIpkB,EACnB,IAAI0B,EAAS,GACb,GAAI+wB,EAAMC,gBAAiB,CACvB,MACItxB,EAAapB,EAAG+zB,oBAAmB,EACnCI,EAAan0B,EAAGyzB,cAAchB,EAAMlxB,OAAQH,CAAI,EAChDgzB,EAAap0B,EAAGyzB,cAAchB,EAAMH,UAAWlxB,CAAI,EACvD,IACIkzB,EAAe,IACfC,EAAev0B,EAAGwf,EAAE,kBAAkB,EACtCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS8F,GAAG,IAAM,EACzDF,EAAev0B,EAAGwf,EAAE,iBAAiB,EAEhCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS+F,MAAM,GAAK,EAChEJ,EAAa,aAERj0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAASgG,IAAI,GAAK,IAC9DL,EAAa,MAEjB5yB,EAAS6yB,EACJY,QAAQ,cAAe90B,EAAW6yB,OAAOT,EAAM7B,KAAKrxB,UAAW+0B,CAAU,CAAC,EAC1Ea,QAAQ,YAAa90B,EAAW6yB,OAAOT,EAAM7B,KAAK7vB,QAASuzB,CAAU,CAAC,EACtEa,QAAQ,cAAehB,CAAS,EAChCgB,QAAQ,cAAef,CAAS,EAChCe,QAAQ,QAAS1C,EAAMM,gBAAkB,kBAAoBN,EAAMO,iBAAmB,mBAAqB,EAAE,EAC9GP,EAAMtqB,WACNzG,EAASA,EACJyzB,QAAQ,aAAcC,EAAaC,WAAW5C,EAAMtqB,SAASpL,IAAI,CAAC,GAE3E2E,EAAU,wCAAuCA,UAErD,OAAOA,CACX,CAWA8zB,sBAAuB,CACnB,KACI,CAAEn0B,WAAAA,EAAYo0B,kBAAAA,EAAmBrR,SAAAA,CAAS,EAAI,KAC9C6P,EAA8CwB,GAAqBp0B,EACvE,OAAOhB,EAAW0kB,aAAaX,EAAShjB,KAAM6yB,CAAW,EAAI,EAAI7P,EAAShjB,KAAO6yB,CACrF,CAmCAyB,kBAAkBjD,EAAO/O,EAAO,CAC5B,MACIiS,EAAkB,KAAKC,MACvB,CAAEC,YAAAA,CAAY,EAAIF,EACtB,IAAIj0B,EAAS,GACb,GAAIm0B,GAAepD,EAAMC,gBAAiB,CACtC,MAAMtxB,EAAOu0B,EAAKH,qBAAoB,EACtC9zB,EAAai0B,EAAKlC,cAAchB,EAAMlxB,OAAQH,CAAI,EAEtD,OAAOM,CACX,CACAo0B,oBAAoBt4B,EAAO,CACvB,MAAMwC,EAAK,KAIX,GAHAA,EAAG+1B,eAAiBv4B,EAGhB,CAFWwC,EAAGg2B,iBAGd,OAEJ,KAAM,CAAE5D,OAAAA,CAAO,EAAIpyB,EACdxC,EAMI,OAAOA,GAAU,SACtB40B,EAAOE,UAAY90B,EAEd,OAAOwC,EAAGi2B,kBAAqB,SACpC7D,EAAOE,UAAYtyB,EAAGi2B,iBAGtB7D,EAAOE,UAAY,CACf70B,GAAQ,YACR1B,KAAQ,UACRE,MAAQ,aAfRm2B,EAAOE,YACPtyB,EAAGi2B,iBAAmB7D,EAAOE,UAC7BF,EAAOE,UAAY,IAgB3BtyB,EAAGsuB,oBAAmB,CAC1B,CACA4H,4BAA4B14B,EAAO,CAAA,IAAA24B,GAE/BA,EAAA,KAAKhJ,sBAAqB,KAAE,MAAAgJ,IAA5BA,QAAAA,EAA8BrwB,QAAQswB,GAAoBA,EAAiBC,sBAAwB74B,CAAK,CAC5G,CAGA84B,kCAAmC,CAC/B,MAAMt2B,EAAK,KAEX,GAAI,CAACA,EAAG6vB,oBAAqB,CACzB,KAAM,CAAEzuB,KAAAA,EAAMiuB,UAAAA,GAAcrvB,EAAGokB,SAE/B,GAAIhjB,IAASpB,EAAGu2B,mBAAqBlH,IAAcrvB,EAAGw2B,uBAAwB,CAE1Ex2B,EAAGu2B,kBAAoBn1B,EACvBpB,EAAGw2B,uBAAyBnH,EAE5B,MACIlB,EAAcnuB,EAAGouB,oBAAmB,EACpCF,EAAc,CAAEC,YAAAA,GAEpBnuB,EAAG0I,QAAQ,sBAAuBwlB,CAAW,EAC7CluB,EAAGquB,sBAAwBruB,EAAGmuB,YAAcD,EAAYC,YAE5DnuB,EAAGiwB,qBAAoB,EAE/B,CACAwG,qBAAsB,CAAA,CACtB1G,0BAA2B,CACvB,MAAM/vB,EAAK,KAENA,EAAG6vB,sBACA7vB,EAAGxD,QAAQowB,MACX5sB,EAAGs2B,iCAAgC,EAInCt2B,EAAGxD,QAAQM,IAAI,CACX45B,YAAa,CACT12B,EAAGs2B,iCAAgC,GAEvCr5B,QAAU+C,EACV22B,KAAU,EACd,CAAC,EAGb,CAGAC,0BAA0BR,EAAkBj5B,EAAQ,CAChD,OAAOi5B,EAAiBzK,WAAWD,KACvC,CACAmL,YAAa,CACT,MAAM72B,EAAK,KACX,MAAI,CAACA,EAAG8sB,iBAAmB9sB,EAAGxD,QAAQszB,2BAIlC9vB,EAAG+vB,yBAAwB,GAEvB,CAAC/vB,EAAG82B,SAASv3B,WAAa,CAACS,EAAG82B,SAAS/1B,WACvCf,EAAG82B,SAAS3R,MAAQ,CAChB5lB,UAAYS,EAAGT,UACfwB,QAAYf,EAAGe,WAIpB,MAAM81B,WAAW,GAAG/0B,SAAS,CACxC,CACA,MAAMi1B,eAAgB,CAClB,MAAMA,cAAc,GAAGj1B,SAAS,EAChC,MAAM,KAAKtF,QAAQqb,YAAW,CAClC,CACA,MAAMmf,WAAY,CACd,MAAMA,UAAU,GAAGl1B,SAAS,EAC5B,MAAM,KAAKtF,QAAQqb,YAAW,CAClC,CACA2U,yBAA0B,CAEtB,KAAKyK,uBAAsB,EAC3B,KAAKC,uBAAyB,IAClC,CACA5K,6BAA6BX,EAAY,CAChC,KAAKwL,cAEN,KAAKC,sBAAsBzL,EAAWxjB,SAAUwjB,EAAWiK,KAAK,CAExE,CACAyB,8BAA8BlvB,EAAU,CACpC,OAAO,KAAK3L,QAAQ86B,4BAA4B/xB,IAAI,CAChD8wB,sBAAwB,KAAKA,sBAC7B1F,MAAwB,KAAK7D,gBAC7B3kB,SAAAA,CACJ,CAAC,CACL,CAWA,MAAMovB,wBAAwBp6B,EAAQ,CAClC,MACI6C,EAAK,KACL,CAAExD,QAAAA,CAAQ,EAAIwD,EAElB,KAAO,CAACA,EAAG8sB,iBAAmB,CAACtwB,EAAQszB,0BACnC,MAAMtzB,EAAQg7B,MAAM,iBAAiB,EAGzC,GAAIr6B,EAAOyvB,MAAO,CACd,MACIA,EAAmBpwB,EAAQqwB,SAAQ,EACnCuJ,EAAmBp2B,EAAGq3B,8BAA8Bl6B,CAAM,EAC9DA,OAAAA,EAAOs6B,UAAUrB,CAAgB,EACjC,MAAMxJ,EAAM8K,UAAUtB,EAAiBuB,EAAEhM,UAAU,EAGnDiB,EAAMgL,QAAQ5lB,KAAK,IAAM,CACrB4a,EAAMiL,YAAYzB,EAAiBuB,EAAEhM,WAAY3rB,EAAGssB,4BAA4B,CACpF,CAAC,EACM8J,EAEf,CACA0B,yBAA0B,CACtB,MAAMA,wBAAwB,GAAGh2B,SAAS,EAC1C,MAAM9B,EAAK,KAENA,EAAGk3B,yBACJl3B,EAAGk3B,uBAAyBl3B,EAAGxD,QAAQowB,MAAMgL,QAAQ5lB,KAAKhS,EAAGwsB,uBAAuB,EAE5F,CACAuL,8BAA8BlyB,EAASmyB,EAAoB,CACvD,MAAMt2B,EAAS,MAAMq2B,8BAA8BlyB,EAASmyB,CAAkB,EAC9E,OAAIC,GAAQC,UAAUx2B,CAAM,EACjBA,EAAOsQ,KAAKyZ,EAAkB,EAElCA,GAAmB/pB,CAAM,CACpC,CAQAy2B,+BAAgC,CAC5B,MAAO,CACHvH,KAAqB,KACrBrvB,OAAqB,EACrB+wB,UAAqB,EACrB8F,MAAqB,EACrBC,QAAqB,GACrB3F,gBAAqB,GACrBmC,mBAAqB,IAAI3wB,IAEjC,CAsBAo0B,yBAAyBC,EAAKC,EAAOC,EAAcC,EAAaV,EAAoB,CAChFO,OAAAA,EAAI1D,mBAAmBl0B,IAAI63B,EAAMrwB,SAAUqwB,CAAK,EAChDD,EAAI3H,KAAmB4H,EAAM5H,KAC7B2H,EAAIxF,gBAAmBwF,EAAIxF,iBAAmByF,EAAMzF,gBACpDwF,EAAIvF,iBAAmBuF,EAAIvF,kBAAoBwF,EAAMxF,iBACrDuF,EAAI7F,gBAAmB6F,EAAI7F,iBAAmB8F,EAAM9F,gBAChD8F,EAAM5X,cACF2X,EAAI3X,YACJ4X,EAAM5X,YAAY9a,QAAQX,GAAcozB,EAAI3X,YAAYngB,IAAI0E,CAAU,CAAC,EAGvEozB,EAAI3X,YAAc,IAAI3b,IAAIuzB,EAAM5X,WAAW,GAG5C2X,CACX,CACAI,yBAAyBx7B,EAAQ,CAC7B,MACI6C,EAAc,KACdQ,EAAcR,EAAG44B,iBAAiBz7B,CAAM,EACxCgxB,EAAcnuB,EAAGouB,oBAAoBpuB,EAAGokB,SAASiL,UAAY7uB,EAASkF,MAAM,EAC5EwoB,EAAc,CAAEC,YAAAA,EAAa0K,YAAc17B,GAC/C6C,OAAAA,EAAG0I,QAAQ,sBAAuBwlB,CAAW,EACtCA,EAAYC,WACvB,CACA2K,wBAAwB7oB,EAAY,CAEhC,GAAI,KAAK8oB,cAAc9oB,EAAW9S,MAAM,EAAG,CACvC,MACIgxB,EAAc,KAAKwK,yBAAyB1oB,EAAW9S,MAAM,EAC7Dw1B,EAAc,KAAKqG,yBAAyB7K,CAAW,EAC3Dle,EAAWgpB,kBAAoB,CAAE9K,YAAAA,GACjCle,EAAWipB,gBAAkB,CAAE,GAAGjpB,EAAWipB,gBAAiBvG,SAAAA,QAG9D1iB,EAAa,MAAM6oB,wBAAwB7oB,CAAU,EAEzD,OAAOA,CACX,CAGAkpB,oBAAqB,CACjB,MAAMn5B,EAAK,KAGPA,EAAGquB,wBAA0BruB,EAAGmuB,aAAenuB,EAAGmuB,aAClDnuB,EAAGmuB,YAAYroB,QAAQmpB,GAAc,CAE7BA,EAAW/yB,MAAQ+yB,EAAW7tB,OAC9B6tB,EAAW/yB,KAAO8D,EAAGgvB,oBAAoBC,CAAU,EAE3D,CAAC,EAEL,MAAMkK,mBAAmB,GAAGr3B,SAAS,CACzC,CAEJ,CAj7BIoB,EAFiB0oB,EAEV9vB,QAAQ,qBACfoH,EAHiB0oB,EAGV7vB,OAAO,qBASdmH,EAZiB0oB,EAYV9iB,eAAe,CAClBswB,kBAAoB1Q,EACpB2Q,iBAAwB,QACxBC,sBAAwB,+CAOxBnG,aAAe,MACfoG,cAAgB,0BAChBC,mBAAqB,2BACrBC,wBAA0B,gCAC1BC,iCAAmC,GAMnChG,eAAiB,GACjBhF,4BAA8B,GAW9BrtB,WAAastB,EAASgG,KAUtBc,kBAAoB,KAUpBzB,iBAAmB,KAMnB3B,cAAgB,GAChBD,OAAS,CACLE,UAAY,CACRv2B,KAAQ,UACRE,MAAQ,aAEZsF,OAAS,CACLxF,KAAQ,MACRE,MAAQ,QACZ,GAgBJ09B,mBAAmB,CAAElH,MAAAA,CAAM,EAAG,CAC1B,IAAI/wB,EAAS,GACb,KAAM,CAAEgxB,gBAAAA,EAAiB2F,QAAAA,CAAQ,EAAI5F,EACrC,OAAIC,IACI2F,EACA32B,EAAS,KAAKwyB,eAAe,GAAGpyB,SAAS,EAGzCJ,EAAS,KAAK6zB,kBAAkB,GAAGzzB,SAAS,GAG7CJ,GAQXm0B,YAAc,GAuDdX,2BAA6B,EAM7BmB,sBAAwB,GACxBrE,gBAAkB,CACd5M,IAAM,kDAEVwU,eAAiB,KAiwBzBhO,EAAkBiO,UAAS,EAC3BjO,EAAkB3tB,OAAS,oBC/9BZ,MAAM67B,GAAN,cAAkClO,CAAkB,CAoJ/D7nB,WAAY,CACR,MAAMA,UAAU,GAAGjC,SAAS,EAC5B,KAAKokB,WAAWppB,IAAI,CAChBi9B,UAAY,wBACZ98B,QAAY,IAChB,CAAC,CACL,CACA8J,cAAcvK,EAAS,CACnB,MAAME,EAAQ,KAAKA,MACnB,MAAMqK,cAAcvK,CAAO,EAI3B,KAAKE,MAAQA,GAAS,KAAKs9B,WAAWx9B,CAAO,CACjD,CACAy9B,oBAAoBp9B,EAAe,CAC/B,KAAKq9B,eAAiBr9B,CAC1B,CACAm9B,WAAWx9B,EAAS,CAChBA,OAAAA,EAAU,KAAKA,QACRmK,EAAyBpB,IAAI,CAAE/I,QAAAA,CAAQ,CAAC,CACnD,CAEA,MAAM29B,WAAWC,EAAgB,CAC7B,MACI1W,EAAiB0W,EAAejnB,aAAa3C,QAAQkT,MACrDvmB,EAAiB,KAAKk9B,qBAAqBD,EAAejnB,YAAY,EACtEmnB,EAAiB,MAAM,KAAKC,uBAAuBp9B,CAAM,EACzDs1B,EAAiB,KAAKmE,0BAA0B0D,EAAgBn9B,CAAM,EAAEq9B,SAAS9W,EAAO,EAAE,CAAC,EAC/F,OAAO,KAAKiW,mBAAmB,CAAE,GAAGS,EAAgBj9B,OAAAA,EAAQumB,MAAAA,EAAO+O,MAAAA,CAAM,CAAC,CAC9E,CACA8E,wBAAwBp6B,KAAW6G,EAAM,CAErC,GADA7G,EAAS,KAAKs9B,sBAAsBt9B,CAAM,EACtCA,EAAOsH,gBACP,OAAO,MAAM8yB,wBAAwBp6B,EAAQ,GAAG6G,CAAI,EAEnD,GAAI7G,EAAOuH,kBAEZ,OAAO,KAAK61B,uBAAuBp9B,EAAOgL,SAAU,GAAGnE,CAAI,CAEnE,CACAyoB,WAAY,CACR,GAAI,KAAKiO,cAAe,CAAA,IAAAC,GACpBA,EAAI,KAACj+B,SAAK,MAAAi+B,IAAA,QAAVA,EAAYnnB,QAAO,EAEvB,MAAMiZ,UAAS,CACnB,CACAH,6BAA6BX,EAAY,CACrC,MAAM3rB,EAAK,KACX,GAAI,CAACA,EAAGm3B,aAAc,CAClB,MACIf,EAAoBzK,EAAWiK,MAC/B1gB,EAAoB,CAAC,GAAGyW,EAAWiP,cAAczrB,KAAI,CAAE,EAClD0rB,OAAO,CAACtC,EAAKpzB,IAAe,CACzB,MAAMhI,EAAS6C,EAAG86B,sBAAsB31B,CAAU,EAClD,OAAIhI,GACAo7B,EAAIjzB,KAAKnI,CAAM,EAEZo7B,GACR,CAAA,CAAE,EACTzsB,EAAiB9L,EAAG86B,sBAAsBnP,EAAWxjB,QAAQ,EAC7D2D,GACA9L,EAAGo3B,sBAAsBtrB,EAAgBsqB,CAAgB,EAE7D,UAAWtd,KAAoB5D,EAC3BlV,EAAGo3B,sBAAsBte,EAAkBsd,CAAgB,EAG1Dp2B,EAAGk3B,yBACJl3B,EAAGk3B,uBAAyBl3B,EAAGxD,QAAQowB,MAAMgL,QAAQ5lB,KAAKhS,EAAGwsB,wBAAwBD,KAAKvsB,CAAE,CAAC,GAGzG,CACA+6B,sBAAsB,CAAEC,IAAAA,EAAK79B,OAAAA,CAAO,EAAG,CACnC,MAAMk7B,EAAU,KAAKU,cAAc57B,CAAM,EACzCA,EAAS,KAAKs9B,sBAAsBt9B,CAAM,EAE1C69B,EAAIC,UAAU,CACV,iBAAqB99B,EAAOsH,iBAAmB4zB,EAC/C,mBAAqB,CAACA,GAAWl7B,EAAOuH,iBAC5C,CAAC,CACL,CASA+1B,sBAAsBt9B,EAAQ,CAC1B,OAAOA,EAAOgH,QAAUhH,EAAO+9B,WAAa/9B,CAChD,CACA29B,sBAAsB32B,EAAQ,CAC1B,IAAIhH,EAASgH,EACb,GAAI,KAAKzH,MAAMy+B,2BACXh+B,EAAS,KAAKT,MAAMwL,iBAAiB/D,CAAM,GAAKhH,UAE3CgH,EAAOi3B,UACZ,UAAWC,KAAQl3B,EAAOm3B,OACtB,GAAI,KAAK5+B,MAAMsZ,SAASqlB,CAAI,EACxB,OAAOA,EAInB,OAAOl+B,CACX,CACAgwB,sBAAsBhwB,EAAQ,CAC1B,OAAIA,IACAA,EAAS,KAAKs9B,sBAAsBt9B,CAAM,GAEvC,MAAMgwB,sBAAsBhwB,CAAM,CAC7C,CACAi6B,sBAAsBj6B,EAAQyE,EAAM,CAChCzE,OAAAA,EAAS,KAAKs9B,sBAAsBt9B,CAAM,EACnC,MAAMi6B,sBAAsBj6B,EAAQyE,CAAI,CACnD,CACA25B,sBAAsBp+B,EAAQ,CAC1BA,OAAAA,EAAS,KAAK29B,sBAAsB39B,CAAM,EACnC,MAAMo+B,sBAAsBp+B,CAAM,CAC7C,CACAq+B,6BAA6Br+B,EAAQ,CACjCA,OAAAA,EAAS,KAAK29B,sBAAsB39B,CAAM,EACnC,MAAMq+B,6BAA6Br+B,CAAM,CACpD,CACAs+B,QAAQ75B,EAAM,CAAA,IAAA85B,EAAAC,EAEV,QAAID,EAAA95B,EAAKzE,UAAMu+B,MAAAA,IAAXA,QAAAA,EAAaj3B,kBAAek3B,EAAI/5B,EAAKzE,UAAM,MAAAw+B,IAAXA,QAAAA,EAAaj3B,qBAE7C9C,EAAKzE,OAAS,KAAK29B,sBAAsBl5B,EAAKzE,MAAM,GAEjD,MAAMs+B,QAAQ75B,CAAI,CAC7B,CACAqwB,sBAAsBC,EAAQ,CAC1B,OAAIA,GAAU,CAACA,EAAO0J,cACd,CAAC,KAAKC,sBAAwB,EAAC3J,GAAM,MAANA,EAAQ2J,wBACvC3J,EAAO2J,qBAAuB,KAAKC,6BAEvC5J,EAAO3mB,OAAS,KAAKsiB,WAElB,MAAMoE,sBAAsBC,CAAM,CAC7C,CACA4J,4BAA4B7rB,EAAYwiB,EAAO/O,EAAO,CAElDzT,OAAAA,EAAWoS,EAAI,MACRpS,CACX,CACA2mB,0BAA0BR,EAAkBj5B,EAAQ,CAChD,IAAIyE,EACJ,MAAMuC,EAAS,KAAKs2B,sBAAsBt9B,CAAM,EAChD,OAAI,KAAK47B,cAAc57B,CAAM,GAGpBgH,EAAOM,gBAFZ7C,EAAOw0B,EAAiBzK,WAAWD,MAK9BvnB,EAAOO,oBAIZ9C,EAAOw0B,EAAiBzK,WAAWiP,cAAcl7B,IAAIyE,CAAM,GAAK,CAAA,GAE7DvC,CACX,CACAu2B,8BAA8BO,EAAaV,EAAoB,CAE3D,OAAKA,EAAmB+D,YAAYC,aAChChE,EAAmB+D,YAAYC,WAAa,IAAI/2B,KAE7C,CACH2rB,KAAkB,KAClBrvB,OAAkB,EAClB+wB,UAAkB,EAClB8F,MAAkB,EAClBC,QAAkB,GAClB3F,gBAAkB,GAClBuJ,QAAkB,IAAI/3B,IACtBgL,UAAkB,IAAIjK,IAE9B,CACAqzB,yBAAyBC,EAAKC,EAAO0D,EAAaC,EAAYnE,EAAoB,CAC9E,KACI,CAAE+D,YAAAA,CAAY,EAAI/D,EAClBoE,EAAcpE,EAAmBqE,OAAOH,CAAW,EAavD,GAZA3D,EAAI3H,KAAmB4H,EAAM5H,KAC7B2H,EAAIxF,gBAAmBwF,EAAIxF,iBAAoByF,EAAMzF,gBACrDwF,EAAIvF,iBAAmBuF,EAAIvF,kBAAoBwF,EAAMxF,iBACrDuF,EAAI7F,gBAAmB6F,EAAI7F,iBAAmB8F,EAAM9F,gBAEhD8F,EAAMyD,QACN1D,EAAI0D,QAAU,IAAI/3B,IAAI,CAAC,GAAGq0B,EAAI0D,QAAS,GAAGzD,EAAMyD,OAAO,CAAC,EAGxD1D,EAAI0D,QAAQt7B,IAAI63B,EAAMrwB,UAAYqwB,EAAMrzB,WAAYqzB,CAAK,EAGzD4D,EAAYJ,WAEZD,EAAYC,WAAa,IAAI/2B,IAAI,CAAC,GAAG82B,EAAYC,WAAY,GAAGI,EAAYJ,UAAU,CAAC,UAGlFxD,EAAMrzB,YAAcqzB,EAAMrwB,SAAU,CACzC,MAAMA,EAAWqwB,EAAMrwB,UAAYqwB,EAAMrzB,WAAWgD,SAEpD4zB,EAAYC,WAAWv7B,IAAI0H,CAAQ,EACnC,MAAMm0B,EAAgB,KAAKnP,sBAAsBhlB,CAAQ,EAAEwjB,WAAWD,MAAMyQ,CAAU,EACtF5D,EAAIxF,gBAAmBwF,EAAIxF,iBAAmBuJ,EAAcvJ,gBAC5DwF,EAAIvF,iBAAoBuF,EAAIvF,kBAAoBsJ,EAActJ,iBAElE,OAAOuF,CACX,CACAgE,wBAAyB,CACrB,MAAM76B,EAAS,MAAM66B,uBAAuB,GAAGz6B,SAAS,EAExD,QAASgU,EAAI,EAAG0mB,EAAI96B,EAAOgE,OAAQoQ,EAAI0mB,EAAG1mB,IAAK,CAC3C,MAAM0iB,EAAQ92B,EAAOoU,CAAC,EACtB0iB,EAAMlG,UAAY,EAClB,UAAWnqB,KAAYzG,EAAOs6B,WAAY,CACtC,MAAMM,EAAgB,KAAKnP,sBAAsBhlB,CAAQ,EAAEwjB,WAAWD,MAAM5V,CAAC,EAE7E0iB,EAAMlG,WAAagK,EAAchK,WAGzC,OAAO5wB,CACX,CAEA6zB,kBAAkB,CAAE9C,MAAAA,CAAM,EAAG,CACzB,MACIzyB,EAA2B,KAC3B,CAAEy8B,WAAAA,EAAYrY,SAAAA,CAAS,EAAIpkB,EAC/B,IAAI0B,EAAS,GACb,GAAI+6B,GAAchK,EAAMC,gBAAiB,CACrC,MACItxB,EAAgBpB,EAAG+zB,oBAAoB,GAAGjyB,SAAS,EACnDqyB,EAAgBn0B,EAAGyzB,cAAchB,EAAMlxB,OAAQH,EAAM,EAAI,EACzDgzB,EAAgBp0B,EAAGyzB,cAAchB,EAAMH,UAAWlxB,EAAM,EAAI,EAC5DizB,EAAgBr0B,EAAGwf,EAAE,0BAA0B,EACnD,IACI8U,EAAoB,IACpBC,EAAoBv0B,EAAGwf,EAAE,uBAAuB,EAChDgV,EAAoB,GACpBn0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS8F,GAAG,IAAM,EACzDF,EAAev0B,EAAGwf,EAAE,sBAAsB,EAErCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS+F,MAAM,GAAK,EAChEJ,EAAa,aAERj0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAASgG,IAAI,GAAK,IAC9DL,EAAa,MAEjB,IAAIM,EAAmB,CAAC,GAAGnC,EAAMiK,oBAAoBtP,QAAO,CAAE,EACzD9K,OAAO,CAAC,CAACnd,EAAYvD,CAAI,IAAMA,EAAKL,MAAM,EAC1C8I,KAAK,CAAC,CAACyqB,EAAMC,CAAM,EAAG,CAACC,EAAMC,CAAM,IAAMF,EAAOxzB,OAAS0zB,EAAO1zB,OAAS,GAAK,CAAC,EAChFqzB,EAAiBlvB,OAAS1F,EAAGk1B,6BAC7BV,EAAoB,OAASx0B,EAAGwf,EAAE,aAAa,EAAE2V,QAAQ,UAAWP,EAAiBlvB,OAAS1F,EAAGk1B,0BAA0B,EAC3HN,EAAmBA,EAAiBvd,MAAM,EAAG,KAAK6d,0BAA0B,GAEhF,MAAMtU,EAAcgU,EAAiB5xB,IAAI,CAAC,CAACmC,EAAYwT,CAAI,IAChD0b,EAAcc,QAAQ,UAAWC,EAAaC,WAAWlwB,EAAWN,MAAM9H,IAAI,CAAC,EACjFo4B,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAKpX,OAAQH,EAAM,EAAI,CAAC,EAChE+zB,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAK2Z,UAAWlxB,EAAM,EAAI,CAAC,EACnE+zB,QAAQ,QAASxc,EAAKoa,gBAAkB,kBAAoBpa,EAAKqa,iBAAmB,mBAAqB,EAAE,CACnH,EAAEsC,KAAK,MAAM,EAAId,EAClB9yB,EAAS6yB,EACJY,QAAQ,gBAAiBvU,CAAW,EACpCuU,QAAQ,cAAe90B,EAAW6yB,OAAOT,EAAM7B,KAAKrxB,UAAW+0B,CAAU,CAAC,EAC1Ea,QAAQ,YAAa90B,EAAW6yB,OAAOT,EAAM7B,KAAK7vB,QAASuzB,CAAU,CAAC,EACtEa,QAAQ,cAAehB,CAAS,EAChCgB,QAAQ,cAAef,CAAS,EAChCe,QAAQ,QAAS1C,EAAMM,gBAAkB,kBAAoBN,EAAMO,iBAAmB,mBAAqB,EAAE,EAClHtxB,EAAU,wCAAuCA,UAErD,OAAOA,CACX,CACAwyB,eAAe,CAAEzB,MAAAA,CAAM,EAAG,CACtB,MACIzyB,EAA2B,KAC3B,CAAEy8B,WAAAA,EAAYrY,SAAAA,CAAS,EAAIpkB,EAC/B,IAAI0B,EAAS,GACb,GAAI+6B,GAAchK,EAAMC,gBAAiB,CACrC,MACItxB,EAAgBpB,EAAG+zB,oBAAoB,GAAGjyB,SAAS,EACnDqyB,EAAgBn0B,EAAGyzB,cAAchB,EAAMlxB,OAAQH,CAAI,EACnDgzB,EAAgBp0B,EAAGyzB,cAAchB,EAAMH,UAAWlxB,CAAI,EACtDizB,EAAgBr0B,EAAGwf,EAAE,0BAA0B,EACnD,IACI8U,EAAoB,IACpBC,EAAoBv0B,EAAGwf,EAAE,uBAAuB,EAChDgV,EAAoB,GACpBn0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS8F,GAAG,IAAM,EACzDF,EAAev0B,EAAGwf,EAAE,sBAAsB,EAErCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS+F,MAAM,GAAK,EAChEJ,EAAa,aAERj0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAASgG,IAAI,GAAK,IAC9DL,EAAa,MAEjB,IAAIqI,EAAc,CAAC,GAAGlK,EAAMwJ,QAAQ7O,QAAO,CAAE,EACxC9K,OAAO,CAAC,CAACsa,EAAQh7B,CAAI,IAAMA,EAAKL,MAAM,EACtC8I,KAAK,CAAC,CAACyqB,EAAMC,CAAM,EAAG,CAACC,EAAMC,CAAM,IAAMF,EAAOxzB,OAAS0zB,EAAO1zB,OAAS,GAAK,CAAC,EAChFo7B,EAAYj3B,OAAS1F,EAAGk1B,6BACxBV,EAAoB,OAASx0B,EAAGwf,EAAE,aAAa,EAAE2V,QAAQ,UAAWwH,EAAYj3B,OAAS1F,EAAGk1B,0BAA0B,EACtHyH,EAAcA,EAAYtlB,MAAM,EAAG,KAAK6d,0BAA0B,GAEtE,MAAM+G,EAAUU,EAAY35B,IAAI,CAAC,CAAC45B,EAAQjkB,CAAI,IAAM,CAAA,IAAAkkB,EAAAC,EAChD,OAAOzI,EACFc,QAAQ,aAAcC,EAAaC,aAAWwH,EAAAD,EAAOz0B,YAAQ00B,MAAAA,IAAA,OAAA,OAAfA,EAAiB9/B,OAAQ6/B,EAAO7/B,IAAI,CAAC,EACnFo4B,QAAQ,UAAWC,EAAaC,aAAWyH,EAAAF,EAAO/3B,SAAKi4B,MAAAA,IAAA,OAAA,OAAZA,EAAc//B,OAAQ6/B,EAAO7/B,IAAI,CAAC,EAC7Eo4B,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAKpX,OAAQH,CAAI,CAAC,EAC1D+zB,QAAQ,cAAen1B,EAAGyzB,cAAc9a,EAAK2Z,UAAWlxB,CAAI,CAAC,EAC7D+zB,QAAQ,QAASxc,EAAKoa,gBAAkB,kBAAoBpa,EAAKqa,iBAAmB,mBAAqB,EAAE,CACpH,CAAC,EAAEsC,KAAK,MAAM,EAAId,EAClB9yB,EAAS6yB,EACJY,QAAQ,gBAAiB8G,CAAO,EAChC9G,QAAQ,cAAe90B,EAAW6yB,OAAOT,EAAM7B,KAAKrxB,UAAW+0B,CAAU,CAAC,EAC1Ea,QAAQ,YAAa90B,EAAW6yB,OAAOT,EAAM7B,KAAK7vB,QAASuzB,CAAU,CAAC,EACtEa,QAAQ,cAAehB,CAAS,EAChCgB,QAAQ,cAAef,CAAS,EAChCe,QAAQ,QAAS1C,EAAMM,gBAAkB,kBAAoBN,EAAMO,iBAAmB,mBAAqB,EAAE,EAClHtxB,EAAU,wCAAuCA,UAErD,OAAOA,CACX,CACAq7B,oBAAoB,CAAEtK,MAAAA,CAAM,EAAG,CAC3B,MACIzyB,EAA2B,KAC3B,CAAEy8B,WAAAA,EAAYrY,SAAAA,CAAS,EAAIpkB,EAC/B,IAAI0B,EAAS,GACb,GAAI+6B,GAAchK,EAAMC,gBAAiB,CACrC,MACItxB,EAAYpB,EAAG+zB,oBAAoB,GAAGjyB,SAAS,EAC/CqyB,EAAYn0B,EAAGyzB,cAAchB,EAAMlxB,OAAQH,EAAM,EAAI,EACrDgzB,EAAYp0B,EAAGyzB,cAAchB,EAAMH,UAAWlxB,EAAM,EAAI,EAC5D,IACIkzB,EAAe,IACfC,EAAev0B,EAAGwf,EAAE,kBAAkB,EACtCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS8F,GAAG,IAAM,EACzDF,EAAev0B,EAAGwf,EAAE,iBAAiB,EAEhCnf,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAAS+F,MAAM,GAAK,EAChEJ,EAAa,aAERj0B,EAAW0kB,aAAaX,EAAShjB,KAAMutB,EAASgG,IAAI,GAAK,IAC9DL,EAAa,MAEjB5yB,EAAS6yB,EACJY,QAAQ,cAAe90B,EAAW6yB,OAAOT,EAAM7B,KAAKrxB,UAAW+0B,CAAU,CAAC,EAC1Ea,QAAQ,YAAa90B,EAAW6yB,OAAOT,EAAM7B,KAAK7vB,QAASuzB,CAAU,CAAC,EACtEa,QAAQ,cAAehB,CAAS,EAChCgB,QAAQ,cAAef,CAAS,EAChCe,QAAQ,QAAS1C,EAAMrN,KAAO,EAAE,EACjCqN,EAAMttB,aACNzD,EAASA,EAAOyzB,QAAQ,UAAWC,EAAaC,WAAW5C,EAAMttB,WAAWN,MAAM9H,IAAI,CAAC,GAE3F2E,EAAU,wCAAuCA,UAErD,OAAOA,CACX,CACJ,EA3fe,IAAMo4B,EAANkD,GAEX95B,EAFiB42B,EAEVh+B,QAAQ,uBACfoH,EAHiB42B,EAGV/9B,OAAO,uBACdmH,EAJiB42B,EAIVhxB,eAAe,CAKlBm0B,YAAc,KAuDd3D,sBAAwB,iDAOxBzL,UAAY,GACZ6F,eAAiB,GAKjBrB,cAAgB,GAQhBwD,YAAc,GAad8D,mBAAmB,CAAElH,MAAAA,CAAM,EAAG,CAC1B,IAAI/wB,EAAS,GACb,KAAM,CAAEgxB,gBAAAA,EAAiB2F,QAAAA,EAASlwB,SAAAA,EAAUhD,WAAAA,CAAW,EAAIstB,EAE3D,OAAIC,IACI2F,EACA32B,EAAS,KAAKwyB,eAAe,GAAGpyB,SAAS,EAEpCqD,EACLzD,EAAS,KAAKq7B,oBAAoB,GAAGj7B,SAAS,EAEzCqG,IACLzG,EAAS,KAAK6zB,kBAAkB,GAAGzzB,SAAS,IAG7CJ,GAEX0wB,OAAS,CACL7wB,OAAS,CAGLsxB,QAAU,EACd,GAEJqK,SAAW,GACXC,QAAU,CACN,CACIphC,KAAc,OACdE,MAAc,OACdC,KAAc,oBACdkhC,YAAcJ,EAClB,CAAC,EAELhL,gBAAkB,CACd5M,IAAM,kDACV,IAuXR0U,EAAoBD,UAAS,EAE7BC,EAAoB77B,OAAS,sBAAuBiT,EAAmBC,gBAAgBksB,GAAM,GAAM,qBAAqB,ECnkBzG,MAAMC,WAA+BC,EAAoB,CAQpEC,gCAAgCvtB,EAAY,CACxC,MACIjQ,EAAkB,KAClB,CAAE+J,YAAAA,CAAY,EAAIkG,EAClB,CACIwtB,QAAaC,EACbC,MAAaC,EACbC,WAAaC,GACC99B,EAAG+9B,YAAYh0B,EAAa,YAAa,SAAS,EACpEi0B,EAAkBh+B,EAAGi+B,4BAA4BhuB,EAAYytB,EAAcE,EAAYE,CAAe,EAC1G,GAAIE,EAAU,CACV,KAAM,CAAErtB,KAAAA,EAAMD,MAAAA,CAAM,EAAIstB,EACxB55B,cAAOC,OAAO4L,EAAY,CACtBytB,aAAAA,EACAE,WAAAA,EACAE,gBAAAA,EACApqB,kBAAoBoM,KAAKC,IAAIpP,EAAOV,EAAWU,KAAM,CAAC,EAEtDgD,iBAAoBmM,KAAKC,IAAID,KAAKoe,MAAMjuB,EAAWU,KAAOV,EAAWS,MAAQC,EAAOD,CAAK,EAAG,CAAC,CACjG,CAAC,EACM,OAGP,OAAO,EAEf,CACAytB,sBAAsB7W,EAAU8W,EAAWC,EAAiB,GAAO,CAC/D,MAAMz8B,EAAO,MAAMu8B,sBAAsB7W,EAAU8W,EAAWC,CAAc,EAC5E,OAAIz8B,GAAAA,MAAAA,EAAM6R,gBACF,CAAC,KAAK+pB,gCAAgC57B,CAAI,EACnC,KAGRA,CACX,CACJ,CA1CIsB,EADiBo6B,GACVxhC,QAAQ,0BA2CnBwhC,GAAuBr/B,OAAS,yBC5CjB,MAAMqgC,WAA6BC,EAAkB,CAQhEC,8BAA8BvuB,EAAY,CACtC,MACIjQ,EAAsB,KACtB,CAAE2P,UAAAA,CAAU,EAAU3P,EACtB,CAAE+J,YAAAA,CAAY,EAAQkG,EACtB,CAAEwuB,gBAAAA,CAAgB,EAAI10B,EACtBxK,EAAsBk/B,EAAkB10B,EAAYrK,IAAI,WAAW,EAAIqK,EAAYxK,UACnFwB,EAAsB09B,EAAkB10B,EAAYrK,IAAI,SAAS,EAAIqK,EAAYhJ,QACjFyK,EAAsBmE,EAAU+uB,sBAAsBn/B,CAAS,EAC/Dm+B,EAAsBn+B,EAAUF,QAAO,EACvCu+B,EAAsB78B,EAAQ1B,QAAO,EACrCy+B,EAAsBF,EAAaF,EACvC,IAAIiB,EAAShvB,EAAU+uB,sBAAsB39B,CAAO,EAChDwK,EAASozB,EAASnzB,EAEtB,OAAImzB,IAAW,KACXpzB,EAASuU,KAAK0P,MAAMsO,EAAkBnuB,EAAUgL,kBAAkBikB,sBAAsB,aAAa,CAAC,EACtGD,EAASnzB,EAAMD,GAEnBnH,OAAOC,OAAO4L,EAAY,CACtBytB,aAAAA,EACAE,WAAAA,EACAE,gBAAAA,EACApqB,kBAAoBlI,EAAMyE,EAAWzE,IACrCmI,iBAAoB1D,EAAWzE,IAAMyE,EAAW1E,OAASC,EAAMD,CACnE,CAAC,EACM,EACX,CACA4yB,sBAAsB7W,EAAU8W,EAAWC,EAAiB,GAAO,CAC/D,MAAMz8B,EAAO,MAAMu8B,sBAAsB7W,EAAU8W,EAAWC,CAAc,EAC5E,OAAIz8B,GAAAA,MAAAA,EAAM6R,gBACF,CAAC,KAAK+qB,8BAA8B58B,CAAI,EACjC,KAGRA,CACX,CACJ,CA5CIsB,EADiBo7B,GACVxiC,QAAQ,wBA6CnBwiC,GAAqBrgC,OAAS,uBCdf,MAAM4gC,UAAyBC,GAAcljC,MACxDmjC,GACArU,GACAsU,EACJ,CAAE,CA+IEC,iBAAkB,CAEd,CAKJ,IAAI3U,UAAUA,EAAW,CACrB,KAAK9tB,QAAQ8tB,UAAYA,CAC7B,CACA,IAAIA,WAAY,CACZ,OAAO,KAAK9tB,QAAQ8tB,SACxB,CASA,IAAI1T,MAAO,CACP,OAAO,KAAKsoB,KAChB,CACA,IAAItoB,KAAKA,EAAM,CACX,MAAM5W,EAAK,KACXA,EAAGk/B,MAAQtoB,EACN5W,EAAG4W,CAAI,IACR5W,EAAG0U,QAAQC,UAAUlU,IAAK,SAAQmW,GAAM,EACpCA,IAAS,cACT5W,EAAGkrB,WAAa,IAAIoS,GAAuBt9B,CAAE,EACzCA,EAAGyU,WACHzU,EAAGkrB,WAAWiU,KAAI,GAGjBvoB,IAAS,aACd5W,EAAGo/B,SAAW,IAAId,GAAqBt+B,CAAE,EACrCA,EAAGq/B,UACHr/B,EAAGo/B,SAASD,KAAI,GAIhC,CAIAG,iBAAkB,CACd,MACIt/B,EAAK,KACLA,EAAGu/B,eAAiBv/B,EAAGkmB,YACvBhE,EAAUsd,cAAcx/B,EAAGu/B,cAAe,eAAgB,EAAEv/B,EAAGkmB,WAAWuZ,UAAYz/B,EAAGxD,QAAQkjC,mBAAmB,CAE5H,CAEA,IAAInV,WAAY,CACZ,OAAO,KAAK/tB,QAAQ2K,UACxB,CAEAw4B,YAAYpgC,EAAWuM,EAAgBkvB,EAAK,CAExC,GAAKlvB,EAAe8zB,cAAcrgC,CAAS,EAY3C,GAAI,KAAKsgC,UAAY,KAAKA,SAASC,UAC/B,KAAKhjC,IAAI,CACLijC,cAAgBA,IAAM,MAAMJ,YAAYpgC,EAAWuM,EAAgBkvB,CAAG,EACtErE,KAAgB,EACpB,CAAC,MAGD,QAAO,MAAMgJ,YAAYpgC,EAAWuM,EAAgBkvB,CAAG,CAE/D,CACJ,CA/NI93B,EANiB27B,EAMV/iC,QAAQ,oBACfoH,EAPiB27B,EAOV9iC,OAAO,oBACdmH,EARiB27B,EAQV/1B,eAAgB,CACnBswB,kBAAoB1Q,EAMpBsX,kBAAoB,KAUpBC,qBAAuB,KAE3B/8B,EA3BiB27B,EA2BVqB,iBAAiB,IA2M5BrB,EAAiBhF,UAAS,EAC1BsG,EAAcC,WAAW,eAAgB,OAAO,EAChDvB,EAAiB5gC,OAAS,mBCtIX,MAAMoiC,WAAqBxB,CAAiB,CAEvD,WAAW/iC,OAAQ,CACf,MAAO,cACX,CACA,WAAWC,MAAO,CACd,MAAO,cACX,CAEJ,CACAskC,GAAaxG,UAAS,EACtBwG,GAAapiC,OAAS,eC5HP,MAAMqiC,WAAiBxB,EAAc,CAChD,WAAWhjC,OAAQ,CACf,MAAO,UACX,CAEA,WAAWC,MAAO,CACd,MAAO,UACX,CACA,WAAW+M,cAAe,CACtB,MAAO,CASHyC,OAAc,OACdwR,YAAc,OACdM,UAAc,EAcdkjB,SAAW,GACXnc,SAAW,CAAEoc,WAAa,IAC1BtD,SAA4B,GAC5BuD,iBAA4B,GAC5BC,0BAA4B,GAG5B7S,UAA4B,GAC5B8S,kBAA4B,IAE5BzxB,UAAY,CACR,CACIzR,GAAK,CACT,CAAC,EAEL0/B,QAAU,CAAA,EAElB,CACA,WAAWlZ,WAAY,CACnB,MAAO,CACH2c,kBAAoB,IAE5B,CACA78B,UAAU8I,EAAS,CAAA,EAAI,CACnB,MAAM7M,EAAK,KACXA,EAAG6gC,eAA2BC,SAAS1Y,cAAc,OAAO,EAC5DpoB,EAAG6gC,eAAevwB,UAAY,uBAC9BtQ,EAAG+gC,aAA2BD,SAAS1Y,cAAc,OAAO,EAC5DpoB,EAAG+gC,aAAazwB,UAAc,qBAC9B,IAAI0wB,EAAyB,GAC7B,GAAI,YAAan0B,EACb,GAAKA,EAAOrQ,QAKHqQ,EAAOrQ,mBAAmBssB,KAC/B9oB,EAAGuqB,UAAY1d,EAAOrQ,QAAQ2K,WACzB0F,EAAOrQ,QAAQszB,2BAChBkR,EAAyB,GAEzBn0B,EAAOrQ,QAAQM,IAAI,CACfC,KAAO,gBACP0K,QAAQ,CAAEiqB,gBAAAA,CAAgB,EAAG,CACrBA,IACA1xB,EAAG4gC,kBAAiB,EACpB5gC,EAAGqH,gBAAgB,eAAe,IAG1CpK,QAAU+C,CACd,CAAC,GAEL,OAAO6M,EAAOrQ,aApBd,OAAM,IAAIkd,MAAM,mDAAmD,EA0B3E7M,EAAO2C,SAAWyxB,GAAa58B,OAAO,CAClC68B,SAAsB,GACtBC,SAAsB,GACtBC,gBAAsB,GACtBC,YAAsB,GACtBC,aAAsB,GACtBC,cAAsB,GACtBC,aAAsB,GACtBC,YAAsB,GACtBC,iBAAsB,GACtBjyB,UAAsB,GACtBkyB,gBAAsB,GACtBC,UAAsB,GACtBC,YAAsB,GACtBC,UAAsB,GACtBC,YAAsB,GACtBC,aAAsB,GACtBl4B,MAAsB,GACtBm4B,WAAsB,GACtBC,aAAsB,GACtBC,oBAAsB,GACtBC,aAAsB,GACtBC,gBAAsB,GACtBh4B,KAAsB,GACtBi4B,mBAAsB,GACtBC,WAAsB,EAC1B,EAAG11B,EAAO2C,QAAQ,EAClB,MAAMzL,UAAU8I,CAAM,EAClB7M,EAAGwP,SAAS+yB,aAEZviC,EAAGwP,SAAS+yB,WAAW7lC,MAAQ,IAAI8lC,IAMvCxB,GAA0BhhC,EAAG4gC,kBAAkB6B,IAAG,EAClDziC,EAAGuqB,UAAUztB,IAAI,CACb4lC,iBAAmB1iC,EAAG4gC,kBACtBrc,gBAAmBvkB,EAAG2iC,kBACtB1lC,QAAmB+C,CACvB,CAAC,EACDA,EAAGlD,IAAI,CACH8lC,OAAU5iC,EAAG6iC,cACb5lC,QAAU+C,CACd,CAAC,EACDA,EAAGu/B,cAAc55B,YAAY3F,EAAG6gC,cAAc,EAC9C7gC,EAAGu/B,cAAc55B,YAAY3F,EAAG+gC,YAAY,CAChD,CACA8B,cAAc,CAAEnyB,MAAAA,EAAOoyB,SAAAA,CAAS,EAAG,CAC/B,MACI9iC,EAAQ,KACR+iC,EAAQryB,IAAUoyB,EAGtBC,GAAS/iC,EAAG6W,eAAc,EAC1B7W,EAAGgjC,cAAa,EACZD,IACA/iC,EAAG+X,cAAa,EAChB/X,EAAGijC,YAAW,EAEtB,CACAD,eAAgB,CACR,KAAKzD,cAAc2D,cACnB,KAAKrV,UAAY,KAAK0R,cAAc4D,aAE5C,CACAF,aAAc,CACN,KAAK97B,WAAW4qB,MAAQ,IACxB,KAAKwO,SAAW,GAChB,KAAK6C,UACD,CACIC,WAAc,GACdC,YAAc,EAClB,CACJ,EACA,KAAK/C,SAAW,IAEpB,KAAKgD,qBAAoB,CAC7B,CACAA,sBAAuB,CACnB,MAAMvjC,EAAwB,KAC9BA,EAAG6gC,eAAe2C,UAAYxjC,EAAGyjC,iBAAiBzjC,EAAGT,SAAS,EAC9DS,EAAG+gC,aAAayC,UAAcxjC,EAAGyjC,iBAAiBzjC,EAAGe,OAAO,CAChE,CACA,MAAM4hC,kBAAkB,CAAE36B,OAAAA,EAAQ7K,OAAAA,EAAQ0I,QAAAA,EAASzI,QAAAA,EAASsmC,WAAAA,CAAW,EAAG,CACtE,MACI1jC,EAAa,KACbmH,EAAanH,EAAGmH,WACpB,IAAIw8B,EACJ,OAAQ37B,EAAM,CACV,IAAK,MACDnC,EAAQC,QAAQ89B,GAAQ,CAChBA,EAAKC,iBACL18B,EAAW1G,IAAIT,EAAG8jC,UAAUF,CAAI,CAAC,EACjCD,EAAW,GAEnB,CAAC,EACD,MACJ,IAAK,SACID,GACD79B,EAAQC,QAAQ89B,GAAQ,CAChBA,EAAKC,iBACL18B,EAAWU,OAAO+7B,EAAKnmC,EAAE,EACzBkmC,EAAW,GAEnB,CAAC,EAEL,MACJ,IAAK,YACD3jC,EAAG4gC,kBAAkB6B,IAAG,EACxB,MACJ,IAAK,SAAU,CACX,MAAMmB,EAAOzmC,EACb,GAAIC,EAAQymC,eAAgB,CAExB,GAAID,EAAKC,eACL18B,EAAW1G,IAAIT,EAAG8jC,UAAUF,CAAI,CAAC,MAEhC,CACD,MAAMG,EAAgB58B,EAAWvJ,QAAQgmC,EAAKnmC,EAAE,EAC5CsmC,GACA58B,EAAWU,OAAOk8B,CAAa,EAGvCJ,EAAW,WAENC,EAAKC,eAAgB,CAE1B,MAAMG,EAAQ78B,EAAWvJ,QAAQgmC,EAAKnmC,EAAE,EACpCumC,IAEAA,EAAMrjC,IAAIX,EAAG8jC,UAAUF,CAAI,CAAC,EAC5BD,EAAW,IAGnB,KACJ,CACJ,CACIA,GACA3jC,EAAGijC,YAAW,CAEtB,CACAa,UAAUF,EAAM,CACZ,MAAO,CACHnmC,GAAammC,EAAKnmC,GAClBwY,WAAa,EACblZ,KAAa6mC,EAAK7mC,KAClBwC,UAAaqkC,EAAKrkC,UAClBwB,QAAa6iC,EAAK7iC,QAClBqkB,IAAawe,EAAKxe,IAE1B,CACA6e,QAAS,CACL,MAAMA,OAAO,GAAGniC,SAAS,EACzB,KAAKkhC,cAAa,CACtB,CACA,MAAMpC,mBAAoB,CACtB,MACI5gC,EAAgB,KAChBkkC,EAAgB,CAAA,EACpBlkC,EAAGuqB,UAAUlkB,SAASu9B,GAAQ,CACtBA,EAAKC,gBAAkBD,EAAKO,aAC5BD,EAAc5+B,KAAKtF,EAAG8jC,UAAUF,CAAI,CAAC,CAE7C,CAAC,EACD5jC,EAAGmK,OAAS+5B,EACZ,MAAMlkC,EAAGxD,QAAQqb,YAAW,EACxB7X,CAAAA,EAAGokC,aAGPpkC,EAAGijC,YAAW,CAClB,CACAoB,gBAAiB,CACb,KAAKd,qBAAoB,EACzB,MAAMc,eAAc,CACxB,CACJ,CAEA/D,GAASzG,UAAS,EAClByG,GAASriC,OAAS,WCjSlB,MACIqmC,GAAc,CAAA,EACdC,GAAkB,CAAE18B,OAAS,EAAGpH,IAAM,EAAGzD,OAAS,GAClDwnC,GAAkB,CAAEC,UAAY,EAAGvb,gBAAkB,EAAGG,gBAAkB,EAAGX,aAAe,GAE5Fgc,GAAmBA,CAAC,CAAExmB,OAAAA,EAAQwF,MAAAA,CAAM,IAAO,GAAExF,EAAOnhB,QAAQ2mB,KAC5DihB,GAAmB,CACftb,gBAAkB,aAClBH,gBAAkB,cAE1B,MAAM0b,WAAuBC,EAAa,CAkB1C,CAjBI3hC,EADE0hC,GACKlmC,SAAS,CACZ,CACI3B,KAAO,cACPhB,KAAO,QACX,EAAG,CACCgB,KAAO,aACPhB,KAAO,MACX,EAAG,CACCgB,KAAO,cACX,EAAG,CACCA,KAAO,kBACX,EAAG,CACCA,KAAO,gBACX,EAAG,CACCA,KAAO,QACX,CAAC,GAaM,MAAM+nC,EAAN,cAA0BC,EAAS,CAAnC,kCAmIXC,EAAAA,2BAAsB,CAAA,GACtBC,EAAAA,uBAAkB,CAAA,GAClBC,EAAAA,uBAAmB,KAAIJ,EAAY/oC,kBARnC,WAAW8K,YAAa,CACpB,MAAO,CACHs+B,wBAA0B,IAAIC,QAC9BC,cAA0B,IAAInhC,IAEtC,CAIAH,UAAU8I,EAAQ,CACd,MAAM9I,UAAU,CACZ,GAAG8I,EACH2C,SAAWyxB,GAAaqE,MAAM,CAAA,EAAIR,EAAYh8B,aAAa0G,SAAU3C,EAAO2C,QAAQ,CACxF,CAAC,CACL,CACA1C,gBAAiB,CACb,GAAI,CAAC,KAAKtQ,QACN,MAAM,IAAIkd,MAAO,GAAEorB,EAAYhpC,oCAAoC,EAEvE,KAAKypC,YAAW,CACpB,CACAC,iBAAiBC,EAAe,CAC5B,MAAMC,EAAmB,KAAKvI,QAAQz9B,IAAI,YAAY,EAClDgmC,IACAA,EAAiBxS,OAASuS,EAElC,CACA1+B,cAAc4+B,EAAY,CACtB,MAAM3lC,EAAK,KACXA,EAAGqH,gBAAgB,aAAa,EAChCrH,EAAG4lC,cAAgBD,EAAWE,aAAa,UAAU,EACrD7lC,EAAG8lC,kBAAoBH,EAAWE,aAAa,YAAY,EAC3D7lC,EAAG4lC,cAAc9oC,IAAI,CACjBC,KAAU,cACVM,OAAU2C,EAAG+lC,qBACb9oC,QAAU+C,CACd,CAAC,EACDA,EAAG8lC,kBAAkBhpC,IAAI,CACrBC,KAAU,cACVM,OAAU2C,EAAGgmC,yBACb/oC,QAAU+C,CACd,CAAC,CACL,CACAimC,6BAA8B,CACtB,KAAKxxB,WACL,KAAK8wB,YAAW,CAExB,CACAW,kCAAmC,CAC3B,KAAKzxB,WACL,KAAK8wB,YAAW,CAExB,CACAY,oBAAqB,CACb,KAAK1xB,WACL,KAAK8wB,YAAW,CAExB,CACAa,yBAAyBC,EAAcC,EAAc,CACjD,KAAM,CAACC,EAAmBC,CAAiB,EAAI,CAACF,EAAcD,CAAY,EAAErjC,IAAIyjC,GAC5E,KAAK/pC,MAAMkB,QAAS,KAAI6oC,GAAW,CAAC,EACpCF,IACAA,EAAkBnhB,IAAM,GACxBmhB,EAAkBzhC,QAAU,yBAE5B0hC,IACAA,EAAkBphB,IAAM,KAAK8f,gBAC7BsB,EAAkB1hC,QAAU,wBAEpC,CACAihC,qBAAqB,CAAE/9B,OAAAA,EAAQnC,QAAAA,CAAQ,EAAG,CACtC,KAAKo/B,gBAAgB3/B,KAAK,CAAE0C,OAAAA,EAAQnC,QAAAA,CAAQ,CAAC,EAC7C,KAAK6gC,eAAc,CACvB,CACAV,yBAAyB,CAAEh+B,OAAAA,EAAQnC,QAAAA,CAAQ,EAAG,CAC1C,KAAKm/B,oBAAoB1/B,KAAK,CAAE0C,OAAAA,EAAQnC,QAAAA,CAAQ,CAAC,EACjD,KAAK6gC,eAAc,CACvB,CAUAA,gBAAiB,CACb,MACI1mC,EAAK,KACL2mC,EAAWl5B,EAAYm5B,OAAO5mC,EAAGilC,gBAAgBh3B,QAAQ,CAAC,CAAEpI,QAAAA,KAAcA,CAAO,CAAC,EAClFghC,EAAa,IAAI5hC,IAAI0hC,EAAS3jC,IAAI8jC,GAAWC,OAAOD,EAAQrpC,EAAE,CAAC,CAAC,EAChEupC,EAAev5B,EAAYm5B,OACvB5mC,EAAGglC,oBAAoB/2B,QAAQ,CAAC,CAAEpI,QAAAA,CAAQ,IAAMA,CAAO,EAElDohC,OAAON,EAASjhC,SAAW,EAAI,CAAA,EAC1B1F,EAAG8lC,kBAAkBoB,MAAMC,GAAON,EAAWzhC,IAAI+hC,EAAIV,SAAS,CAAC,CAAC,CAAC,EAEnF,UAAWW,KAAeJ,EAClBI,EAAYX,WAAa,CAACI,EAAWzhC,IAAIgiC,EAAYX,SAAS,IAC9DE,EAASrhC,KAAKtF,EAAG4lC,cAAchoC,QAAQwpC,EAAYX,SAAS,CAAC,EAC7DI,EAAWpmC,IAAI2mC,EAAYX,SAAS,GAG5CzmC,EAAGqnC,YAAY55B,EAAYm5B,OAAOD,CAAQ,EAAGK,CAAY,EACzDhnC,EAAGglC,oBAAsB,CAAA,EACzBhlC,EAAGilC,gBAAkB,CAAA,CACzB,CACAoC,YAAYV,EAAUK,EAAc,OAChC,MACIhnC,EAAK,KACL,CAAEsnC,sBAAAA,EAAuBC,2BAAAA,EAA4B7qC,MAAAA,CAAM,EAAIsD,EAC/DwnC,EAAmB,IAAIviC,IACvBwiC,EAA0Bh6B,EAAYlE,QAAQy9B,EAAc,WAAW,EACvExc,EAAawc,EAAaC,OAAON,CAAQ,EACzCe,EAAiBJ,EACXX,EAASrkB,OAAOwkB,GAAWA,EAAQ/pC,MAAQ,IAAI,EAC/C4pC,EACV,UAAWxpC,KAAUqtB,EACjB,UAAWwQ,KAAOh7B,EAAAA,EAAGmlC,wBAAwBzlC,IAAIvC,CAAM,IAArC6C,KAAAA,EAA0CskC,GACxDkD,EAAiB/mC,IAAIu6B,CAAG,EAGhCh7B,EAAG6W,eAAc,EACjBna,EAAMmL,OAAO1B,MAAMqE,KAAKg9B,CAAgB,CAAC,EACzC,UAAWV,KAAWY,EAAgB,CAClC,MAAMC,EAAUjrC,EAAM+D,IAAIT,EAAG4nC,YAAYd,EAASW,EAAwBX,EAAQrpC,EAAE,CAAC,CAAC,EACtFuC,EAAGmlC,wBAAwBxkC,IAAImmC,EAASa,CAAO,EAEnD,GAAIJ,EACA,UAAWH,KAAeJ,EAAa1kB,OAAO6kB,GAAOA,EAAIV,WAAa,IAAI,EAAG,CACzE,MAAMkB,EAAUjrC,EAAM+D,IAAIT,EAAG4nC,YAAY,KAAM,CAACR,CAAW,CAAC,CAAC,EAC7DpnC,EAAGmlC,wBAAwBxkC,IAAIymC,EAAaO,CAAO,EAG3D3nC,EAAG+X,cAAa,EAChBrb,EAAM2N,KAAK3N,EAAMmrC,OAAO,CAC5B,CAKAtC,aAAc,CACV,KAAK8B,YAAY,KAAKzB,cAAc//B,QAAS,KAAKigC,kBAAkBjgC,OAAO,CAC/E,CAKA+hC,YAAYd,EAASE,EAAc,CAC/B,MACIhnC,EAAK,KACL,CAAE8nC,aAAAA,EAAcC,mBAAAA,CAAmB,EAAI/nC,EACvCgoC,GAAkBhB,GAAAA,KAAAA,OAAAA,EAAchkC,IAAIokC,GAAe,CAAA,IAAAa,EAC/C,MAAMxqC,EAAM,KAAI2pC,EAAY3pC,KAC5B,MAAO,CACHA,GAAAA,EACAyqC,SAAmBv+B,GAAOs+B,GAAAA,EAACjoC,EAAGqlC,iBAAa4C,MAAAA,IAAA,SAAhBA,EAAkBvoC,IAAIjC,CAAE,GACnD0qC,YAAmBf,EAAYe,YAC/BC,WAAmBhB,EAAYgB,WAC/BC,iBAAmBjB,EACnBkB,iBAAmBxB,EACnBtmC,SAAmB4mC,EAAYmB,QAAQvlC,IAAI,CAACgF,EAAQ0b,IAAU,OAAA,IAAA8kB,EAAAC,EAC1D,MAAMhrC,EAAM,KAAI2pC,EAAY3pC,MAAMimB,IAClC,MAAO,CACHjmB,GAAAA,EACAyqC,SAAmBv+B,GAAO6+B,GAAAA,EAACxoC,EAAGqlC,iBAAamD,MAAAA,IAAA,SAAhBA,EAAkB9oC,IAAIjC,CAAE,GACnDuK,OAAAA,EACAsgC,iBAAmBxB,EACnBtmC,UAAmBioC,GAAAA,EAAAzgC,EAAO0gC,mBAAeD,MAAAA,IAAA,OAAA,OAAtBA,EAAwBzlC,IAAI2lC,IAAmB,CAC9DL,iBAAmBxB,EACnB6B,eAAAA,GACF,IAHiBF,KAAAA,EAGZ,CAAA,GAEd,GAER,IAAK,CAAA,EACNhrC,EAAM,KAAIqpC,GAAO,KAAPA,OAAAA,EAASrpC,KACvB,OAAOqpC,GAAWgB,EAAe,CAC7BrqC,GAAAA,EACAyqC,SAAev+B,EAAQ3J,EAAGqlC,cAAc3lC,IAAIjC,CAAE,EAC9C0qC,YAAerB,EAAQqB,YACvBC,WAAetB,EAAQ8B,QACvBpoC,SAAewnC,EACfa,aAAe/B,EACfhiC,QAAe,iBACfsgB,IAAe0hB,EAAQrpC,KAAOsqC,EAAqB/nC,EAAGklC,gBAAkB,IAC5E,EAAI8C,CACR,CACAc,kBAAkBjkC,EAAO,CACrB,KAAM,CAAE1H,OAAAA,CAAO,EAAI0H,EACnB,OAAI1H,EAAOwrC,eACA,KAAKI,qBAAqB5rC,EAAOwrC,cAAc,EAEjDxrC,EAAO6K,OACL,KAAKghC,wBAAwB7rC,EAAO6K,MAAM,EAE9C7K,EAAOgrC,WAClB,CACAY,qBAAqBJ,EAAgB,CACjC,MACIM,EAAYnE,EAAY/oC,KACxB,CAAEksB,SAAAA,EAAU5U,OAAAA,EAAQmV,MAAAA,CAAM,EAAImgB,EAClC,MAAO,CACHnoC,SAAW,CAAC,CACRyT,IAAW,MACXgT,MAAY,KAAIgiB,yBAChBzoC,SAAW,CACP,CACIyT,IAAQ,OACRgT,MAAS,KAAIgiB,kBACb14B,KAAS,GAAE,KAAK24B,mBAAmBjhB,CAAQ,KAE/C,KAAKkhB,oBAAoB91B,EAAQ,QAAQ,EACzC,CACIY,IAAQ,IACRgT,MAAQ,uBAEZ,KAAKkiB,oBAAoB3gB,EAAO,OAAO,CAAC,EAE/C,EAET,CAQA2gB,oBAAoB3rC,EAAO4rC,EAAM,OAC7B,MAAO,CACHn1B,IAAQ,OACRgT,MAAQ,CACH,KAAI6d,EAAY/oC,iBAAiBqtC,IAClC5rC,GAAS,MAAS,KAAIsnC,EAAY/oC,kBAAkB,EAExDwU,KAAO/S,GAAS,KAAO,KAAKgiB,EAAE,uBAAuB,GAAI7f,EAAA,KAAK0pC,kBAAkB7rC,CAAK,IAA5B,KAAAmC,EAAkC,GAEnG,CAOA0pC,kBAAkB7rC,EAAO,CACrB,OAAI6C,EAAWipC,OAAO9rC,CAAK,EAChB6C,EAAW6yB,OAAO11B,EAAO,KAAK82B,UAAU,EAE1C,OAAQ92B,GAAW,SACjBA,EAAM+rC,QAAQ,CAAC,EAEnB/rC,CACX,CAQA0rC,mBAAmBM,EAAc,CAC7B,OAAOpU,EAAaqU,SAASD,CAAY,CAC7C,CACAE,wBAAwBC,EAAkB,CACtC,MAAO,CACH9kC,MAAW8kC,EAAiB9kC,MAAM9H,KAClCoL,SAAWwhC,EAAiBxhC,SAASpL,KAE7C,CACA6sC,wBAAwBC,EAAkB,CACtC,MAAO,CACHr/B,KAAOq/B,EAAiBC,SAAS/sC,KACjCgtC,GAAOF,EAAiBG,OAAOjtC,KAEvC,CAOAisC,wBAAwBhhC,EAAQ,OAC5B,MACIhI,EAAK,KACL,CAAEiqC,WAAAA,EAAYhd,OAAAA,CAAO,EAAIjlB,EACzBkiC,EAAclqC,EAAGwf,EAAG,yBAAwB,EAChD,IAAI2oB,EACAgC,EAAS,CACLpuC,KAAOmuC,EAAYjd,EAAOlxB,IAAI,EAC9BgB,KAAOkwB,EAAOlwB,MAEtB,OAAIktC,IAAe,SACfE,EAAO3/B,KAAOk6B,GAAiB18B,EAAOwC,IAAI,EAC1C2/B,EAAOJ,GAAKrF,GAAiB18B,EAAO+hC,EAAE,GAI1C5B,EAAcnoC,EAAGwf,EAAG,cAAayqB,KAAatF,EAAAA,GAAiB1X,EAAOlxB,IAAI,IAA5B4oC,KAAAA,EAAiC,WAAW,EACtF1X,EAAOlxB,OAAS,kBAChBouC,EAASnqC,EAAG4pC,wBAAwB3c,CAAM,EAErCA,EAAOlxB,OAAS,oBACrBouC,EAASnqC,EAAG0pC,wBAAwBzc,CAAM,GAE9Ckb,EAAcA,EAAYhT,QAAQ,aAAc,CAACiV,EAAGC,IAAQ,OAAKF,OAAAA,EAAAA,EAAOE,CAAQ,IAAfF,KAAAA,EAAoBE,EAAQ,EACzFriC,EAAOsiC,SACPnC,EAAe,OAAMA,KAElBnoC,EAAGuqC,8BAA8BnV,EAAaoV,WAAWrC,CAAW,EAAGgC,CAAM,CACxF,CAMA,OAAOM,eAAeC,EAAMC,EAAM,CAC9B,GAAID,EAAKxsB,SAAWysB,EAAKzsB,QAAUwsB,EAAK1iC,QAAU2iC,EAAK3iC,OAAQ,CAC3D,MACI4iC,EAAUjhC,EAAQ+gC,EAAK1iC,OAAOsiC,OAC9BO,EAAUlhC,EAAQghC,EAAK3iC,OAAOsiC,OAC9B,CAAEL,WAAaa,EAAO7d,OAAS,CAAElxB,KAAOgvC,CAAY,GAAML,EAAK1iC,OAC/D,CAAEiiC,WAAae,EAAO/d,OAAS,CAAElxB,KAAOkvC,CAAY,GAAMN,EAAK3iC,OAEnE,OAAI4iC,IAAYC,EACLD,EAAU,GAAK,EAGnB9qB,KAAKorB,KAAK3G,GAAgBuG,CAAK,EAAIvG,GAAgByG,CAAK,CAAC,GAC5DlrB,KAAKorB,KAAK1G,GAAgBuG,CAAW,EAAIvG,GAAgByG,CAAW,CAAC,GACrE,EAER,MAAO,EACX,CACAE,eAAerE,EAAS,CAMpB,KAAKp+B,QAAQ,UAAW,CAAEo+B,QAAAA,CAAQ,CAAC,CACvC,CACAsE,eAAetE,EAAS,CAMpB,KAAKp+B,QAAQ,UAAW,CAAEo+B,QAAAA,CAAQ,CAAC,CACvC,CACAuE,mBAAmBvE,EAAS,CAKxB,KAAKp+B,QAAQ,aAAa,CAC9B,CASA6hC,8BAA8BruC,EAAM,CAChC,MAAM+sC,EAAY,KAAKnpC,YAAY/D,KACnC,MAAO,CACHyE,SAAW,CAAC,CACRyT,IAAW,OACXgT,MAAY,KAAIgiB,qBAChBzoC,SAAWtE,EAAK0S,MAAM,OAAO,EAAEisB,OAAO,CAACyQ,EAAKC,KACxCD,EAAI9qC,SAAS8E,KAAK,CACd2O,IAAQ,OACR/X,KAAQqvC,EACRtkB,MAAQqkB,EAAIE,SAAY,KAAIvC,uBAAiC,IACjE,CAAC,EACDqC,EAAIE,SAAW,CAACF,EAAIE,SACbF,GACR,CAAE9qC,SAAW,CAAA,EAAIgrC,SAAW,EAAM,CAAC,EAAEhrC,SAC3C,EAET,CACJ,EA7fe,IAAMskC,EAAN2G,EACXvoC,EADiB4hC,EACVhpC,QAAQ,eACfoH,EAFiB4hC,EAEV/oC,OAAO,eACdmH,EAHiB4hC,EAGVh8B,eAAe,CAClBpM,MAAQ,CACJqM,KAAa,GACbnF,WAAaghC,GACbiD,QAAa,CACT,CACI5rC,MAAY,aACZyvC,UAAY,EAChB,EACA5G,EAAY2F,cAAc,EAE9BkB,oBAAsB,IAM1BnvC,QAAU,KAKV+qC,2BAA6B,GAK7BD,sBAAwB,GAKxBQ,aAAe,GAKfC,mBAAqB,KACrB6D,KAAO,EACPp8B,SAAW,CACP1F,MAAQ,CACJ7N,MAAQ,MAEZilC,SAAW,CACP2K,2BAA6B,GAC7BC,qBAA6B,IAEjC3K,SAAW,CACP1vB,MAAQ,CACJs6B,UAAe,GACfC,IAAe,GACfC,KAAe,GACfC,MAAe,GACfC,aAAe,CACXjwC,KAAS,wBACTkwC,KAAS,qBACTC,OAASA,CAAC,CAAElvC,OAAAA,EAAQs0B,OAAS6a,CAAK,IAAM,CACpCA,EAAKC,aAAa,CACd9uC,GAASN,EAAOM,GAChB+uC,OAASF,EAAKnP,QAAQz9B,IAAI,aAAa,CAC3C,CAAC,CACL,GAEJ+sC,cAAgB,CACZvwC,KAAS,yBACTkwC,KAAS,qBACTC,OAASA,CAAC,CAAElvC,OAAAA,EAAQs0B,OAAS6a,CAAK,IAAM,CACpCA,EAAKnB,eAAehuC,EAAO0rC,YAAY,CAC3C,GAEJ6D,cAAgB,CACZxwC,KAAS,yBACTkwC,KAAS,wBACTC,OAASA,CAAC,CAAElvC,OAAAA,EAAQs0B,OAAS6a,CAAK,IAAM,CACpCA,EAAKlB,eAAejuC,EAAO0rC,YAAY,CAC3C,GAEJ8D,oBAAsB,CAClBzwC,KAAS,+BACTmwC,OAASA,CAAC,CAAElvC,OAAAA,EAAQs0B,OAAS6a,CAAK,IAAM,CACpCA,EAAKjB,mBAAkB,CAC3B,CACJ,CACJ,GAEJuB,aAAe,IAEnBzP,QAAU,CACN,CAAEphC,KAAO,OAAQG,KAAO,6BAA8BD,MAAQ,cAAe2vC,KAAO,EAAGiB,UAAY,GAAOlvC,SAAWA,CAAC,CAAE2uC,KAAAA,EAAM,GAAGQ,CAAK,IAAMR,EAAKxD,kBAAkB,CAAEwD,KAAAA,EAAM,GAAGQ,CAAK,CAAC,EAAGC,WAAa,EAAK,EACzM,CAAE7wC,KAAO,4BAA6BD,MAAQ,aAAcF,KAAO,OAAQ6vC,KAAO,EAAGiB,UAAY,EAAM,CAAC,EAM5GvY,WAAa,gBACb0Y,kBAAoB,CAChBC,oBAAoB,CAAEC,cAAgB,CAAEV,OAAAA,EAAQrvC,OAAAA,CAAO,CAAE,EAAG,CAExD,GAAI,EAAEqvC,EAAOvwC,QAAU,eAAiBkB,EAAO0rC,cAC3C,MAAO,IAGfsE,eAAe,CAAED,cAAgB,CAAE/vC,OAAAA,EAAQK,MAAAA,CAAM,CAAE,EAAG,CAClDL,EAAO0rC,aAAa9rC,KAAQS,GAAS,MAAQA,EAAM4vC,KAAI,EAAM5vC,EAAQ,MAEzE6vC,mBAAmB,CAAE5b,OAAAA,EAAQt0B,OAAAA,EAAQsU,MAAAA,CAAM,EAAG,CAC1CA,OAAAA,EAAMk7B,oBAAoB5+B,SAAW,CAAC0jB,EAAOsW,mBACtCp+B,EAAQxM,EAAO0rC,cAE1ByE,WAAW,CAAEnwC,OAAAA,EAAQowC,SAAAA,CAAS,EAAG,CAC7B,KAAKlI,cAAc1kC,IAAIxD,EAAOM,GAAI,CAAC8vC,CAAQ,CAC/C,CACJ,IAEJrqC,EAtHiB4hC,EAsHV7gB,YAAY,CACfyiB,eAAiB,CACb3qC,KAAoB,MACpByxC,kBAAoB,EACxB,IAoYR1I,EAAYjL,UAAS,EACrBiL,EAAY7mC,OAAS,eC7bpB,IAAM,CAEH,MACIwvC,EAAmB,CACf,cACA,UACA,kBACA,gBACA,oBACA,sBACA,wBACA,uBACA,mBACA,qBACA,YAAY,EAGhBC,EAAmB,CAAA,EACvB,GAAI,CAACvN,EAAcwN,YAAcF,EAAMzvB,KAAK4vB,GAAQC,SAASD,KAAK53B,SAAS43B,CAAI,CAAC,GAAK,SAASE,KAAKD,SAASE,IAAI,GAC5G,OAEJ,IAAIC,EACJ,SAASC,EAAiBrY,EAAOsY,EAAW,CACnCF,IACDA,EAAc,GACdG,EAAapqC,UAAU,CACnBmuB,OAAS0D,CACb,CAAC,GAGLA,EAAMwY,MAAQ,aAClB,CAGA,MAAMD,CAAa,CACf,OAAOpqC,UAAU8I,EAAQ,CACrB,MACI7M,EAAgB,KAChBquC,EAAgB,QAChBC,EAAgB,QAChBxH,EAAgB3G,EAAcoO,WAAWF,CAAO,EAChDG,EAAgBrO,EAAcwN,UAAY,IAAO,IAAO,GACxDc,EAAgBC,EAAcC,YAAYF,SAC9CrqC,OAAOC,OAAOrE,EAAI,CACd8mC,QAAAA,EACAuH,QAAAA,EACAO,QAAmBN,EACnBO,UAAmB1O,EAAcwN,UAAYc,EAAW,8BACxDK,QAAmB,GACnBC,iBAAmB,EACnBC,SAAoB,KAAIX,gBACxBY,gBAAoB,KAAIZ,iBACzBxhC,CAAM,EACJszB,EAAcwN,WACfvxB,QAAQ8yB,IAAK,WAAUZ,iBAA2B,EAEtDtuC,EAAGmvC,oBAAmB,EAClBnvC,EAAGovC,YACCtO,SAASuO,aAAe,WACxBrvC,EAAGsvC,eAAc,EAGjBxO,SAASyO,iBAAiB,mBAAoB,IAAM,CAC5CzO,SAASuO,aAAe,YACxBrvC,EAAGsvC,eAAc,CAEzB,CAAC,GAKTE,WAAW,IAAM,CACbxvC,EAAGyvC,oBAAmB,GACvBjB,CAAa,CACpB,CACA,OAAOW,qBAAsB,CACzB,MACInvC,EAAa,KACb0vC,EAAahB,EAAciB,oBAAoB3vC,EAAGgvC,QAAQ,EAC1DY,EAAaC,OAAOH,CAAU,EAC9BE,GAAQ,CAACE,MAAMF,CAAI,IACnB5vC,EAAG+vC,eAAiBH,GAExB5vC,EAAG+vC,eAAiB/vC,EAAG+vC,gBAAkB3wC,KAAKqjC,IAAG,EAEjDiM,EAAcsB,oBAAoBhwC,EAAGgvC,SAAUhvC,EAAG+vC,cAAc,CACpE,CACA,WAAWX,WAAY,CAAA,IAAAa,EAAAC,EACnB,OAAO,KAAKpB,SAAY1vC,KAAKqjC,IAAG,EAAK,KAAKsN,eAAiBI,MAAU,MAAGF,EAAIG,OAAOC,WAAO,MAAAJ,IAAAC,SAAAA,EAAdD,EAAiB,KAAK5B,OAAO,KAAC,MAAA6B,IAA9BA,OAAcA,OAAdA,EAAgCI,QAChH,CACA,OAAOb,qBAAsB,CACzB,MACIzvC,EAAsB,KACtBuwC,EAAsBA,IAAM7B,EAAcsB,oBAAoBhwC,EAAGivC,gBAAiB7vC,KAAKqjC,IAAG,CAAE,EAGhG,GAFAziC,EAAG+uC,iBAAmB/uC,EAAG+uC,kBAAoBL,EAAciB,oBAAoB3vC,EAAGivC,eAAe,GAAK,EAElGjvC,EAAAA,EAAG+uC,kBAAoB3vC,KAAKqjC,IAAG,EAAKziC,EAAG+uC,iBAAmBoB,OAG9D,GAAInwC,EAAG6uC,UAAW,CACd,MACI2B,EAASC,mBAAmB5C,SAASE,IAAI,EACzC2C,EAAU,GAAE1wC,EAAG6uC,gBAAgBuB,OAAOC,QAAQM,eAAeH,IAC7DI,EAAS,IAAIC,MACjBD,EAAIE,OAAS,IAAM,CAEXF,EAAIG,eAAiB,EACrB/wC,EAAGgxC,WAAU,EAIbT,EAAmB,GAG3BK,EAAIK,QAAU,IAAM,CAChBV,EAAmB,GAEvBK,EAAIM,IAAMR,OAGVH,EAAmB,CAE3B,CACA,OAAOjB,gBAAiB,CACpB,MAAM6B,EAAS,KAAKjf,OAAOkf,YACtB,KAAKC,kBACN,KAAKA,gBAAkB,GAClBlR,EAAcwN,WACfvxB,QAAQC,KAAM,WAAU,KAAKuyB,qJAAqJ,EAEtLuC,EAAOG,WAAaC,GAAMC,KAAK,CAC3BjhC,KAAe,sBAAqB,KAAKq+B,gHACzC6C,QAAc,IACdL,YAAcD,CAClB,CAAC,GAELjvB,EAAUwvB,mBAAmBP,EAAQ,mBAAmB,EACxDjvB,EAAUyvB,gBAAgBR,EAAQ,eAAgBz8B,GAAW,CACzD,MAAMwd,EAAS0f,GAAOC,YAAYn9B,EAAS,QAAQ,EAC/Cg5B,EAAiB1vB,KAAKoH,GAAO8M,aAAkB9M,CAAG,GAClD,KAAK0sB,kBAAkB5f,CAAM,CAErC,CAAC,CACL,CACA,OAAO8e,YAAa,CAChB,KAAKlC,QAAU,GAEfJ,EAAcqD,uBAAuB,KAAK9C,eAAe,EAEzDP,EAAcsB,oBAAoB,KAAKhB,SAAU,CAAC,EAClD,KAAKM,eAAc,CACvB,CACA,OAAOwC,kBAAkB5f,EAAQ,CAC7BA,EAAO8f,KAAK,CACR91C,KAAQ,oJACRkwC,KAAQ,kBACRrwC,KAAQ,QACRk2C,MAAQ,QACZ,CAAC,CACL,CACA,OAAOC,aAAax9B,EAAS,CACzBy9B,UAAAA,EAAY,4BACZC,WAAAA,EAAa,6BACb,CAAA,EAAI,CAAA,IAAAC,EAAAC,EAEJ,GAAI5D,EAAcC,YAAY4D,OAAS,KACnC,OAEJ,MACIC,GAAYH,EAAAnwB,EAAUuwB,aAAS,MAAAJ,IAAA,SAAAC,EAAnBD,EAAqBt1C,QAAIu1C,MAAAA,IAAzBA,QAAAA,EAA2BI,YAAW,EAAGC,SAAS,OAAO,EAAIR,EAAYC,EACrFQ,EAAa;sLACyJJ;;;;;;;;;;;wBAY1K99B,EAAQV,MAAM6+B,gBAAmB,kCAAiCzC,OAAO0C,KAAKF,CAAS,KAC3F,CACJ,CAmCI,OAAO/T,GAAqB,eAhCNqP,GAAa,CACnCR,EAAiBpoC,KAAK4oC,CAAS,EAC/B6E,GAASC,MAAM,KAAM,CACjB,WAAWC,QAAS,CAChB,MAAO,CACHhsB,MAAQinB,EAEhB,CACAjP,iBAAkB,CACd,MACIj/B,EAAgB,KAChBkzC,EAAgBA,IAAM,CAClB,MAAMC,EAAUnzC,EAAGozC,SAAWhvC,OAAO6e,OAAOjjB,EAAGozC,QAAQ,EAAI,CAACpzC,CAAE,EAC9D,UAAWizC,KAAUE,EACbF,EAAOv+B,SACPy5B,EAAa+D,aAAae,EAAOv+B,OAAO,GAIxDu5B,EAAiBjuC,CAAa,EAC9BkzC,EAAa,EAEbG,GAAaC,GAAG,QAAS,IAAM,CAC3BJ,EAAa,CACjB,CAAC,EACG/E,EAAaiB,WACbjB,EAAa2D,kBAAkB9xC,CAAE,CAEzC,CACJ,CAAC,IAIiB6+B,CAAgB,EAClCkU,GAASC,MAAM,KAAM,CACjB,WAAWC,QAAS,CAChB,MAAO,CACHhsB,MAAQssB,GAEhB,CACAzjC,mBAAoB,CAChB,OAAIq+B,EAAaiB,WAAa,KAAKlP,eACxB,CAAA,EAGA,KAAKsT,YAAY1jC,kBAAkBkjC,MAAM,KAAMlxC,SAAS,CAEvE,CACJ,CAAC,EAET,GAAC,GACA,IAAM,CAEH,MAAM2xC,EAAiB,wFAEvB,GAAI,CAAC3S,SAAS+M,UAAY4F,EAAe3F,KAAKhN,SAAS+M,SAASE,IAAI,GAAKqC,OAAO5kC,MAAQ4kC,OACpF,OAEJ,IAAI3yC,EACJ,MAAMi2C,EAAc,CAChB,cACA,SAAS,EAGTC,EAAa,CAAC,WAAY,OAAQ,QAAS,YAAa,eAAgB,WAAW,EACnFC,EAAa,CAAC,UAAW,QAAS,MAAO,OAAO,EACpDF,EAAY9vB,OAAO,EAAG,EAAG,GAAG+vB,EAAS3wC,IAAI6wC,GAAQD,EAAW5wC,IAAI8wC,GAAc,GAAEA,KAAaD,GAAM,CAAC,EAAE5M,OAAO,aAAa,EAAE8M,KAAI,CAAE,EAC9HjT,SAAS+M,SAASD,KAAKoG,MAAMN,EAAYpe,KAAK,GAAG,CAAC,EAClD73B,EAAK,eAGLA,EAAK,eAET,MAAMw2C,EAAYnT,SAAS1Y,cAAc,QAAQ,EACjD6rB,EAAUnD,OAAS,UAAW,CAC1BV,OAAO8D,UAAY9D,OAAO8D,WAAa,CAAA,EACvC,SAASC,GAAO,CACZ/D,OAAO8D,UAAU5uC,KAAKxD,SAAS,CACnC,CACAqyC,EAAK,KAAM,IAAI/0C,IAAM,EACrB+0C,EAAK,SAAU12C,CAAE,GAErBqjC,SAASsT,KAAKzuC,YAAYsuC,CAAS,EACnCA,EAAU/C,IAAM,+CAAiDzzC,CACrE,GAAC",
  "names": ["ResourceCalendarColumn", "Column", "mixin", "AttachToProjectMixin", "$name", "type", "defaults", "field", "text", "editor", "CalendarField", "clearable", "allowInvalid", "attachToProject", "project", "defaultCalendar", "store", "calendarManagerStore", "attachToResourceStore", "resourceStore", "ion", "name", "update", "thisObj", "onResourceUpdate", "record", "changes", "change", "_change$value", "oldValue", "value", "id", "refreshCell", "renderer", "getById", "getValue", "displayField", "ColumnStore", "registerColumnType", "_$name", "EventModel", "SchedulerProEvent", "derive", "TimeSpan", "RecurringTimeSpan", "PartOfProject", "EventModelMixin", "PercentDoneMixin", "fields", "defaultValue", "convert", "Duration", "getDefaultSegmentModelClass", "EventSegmentModel", "updateWrapDate", "date", "duration", "forward", "Date", "getTime", "milliseconds", "startDate", "dt", "isOccurrence", "get", "_a", "_startDate", "allDay", "constructor", "getAllDayStartDate", "me", "generation", "isParent", "$ignoreChange", "timeDiff", "DateHelper", "diff", "child", "children", "add", "batching", "set", "preamble", "wrapStartDate", "wrapEndDate", "endDate", "_endDate", "getAllDayEndDate", "postamble", "fullEffort", "unit", "effortUnit", "magnitude", "effort", "setEffort", "_wrapStartDate", "result", "_wrapEndDate", "data", "isObject", "arguments", "outerStartDate", "outerEndDate", "isEditable", "fieldName", "isLeaf", "manuallyScheduled", "stm", "_this$recurringEvent", "recurringEvent", "assigned", "isDelayingCalculation", "assignmentStore", "storage", "findItem", "getCurrentConfig", "options", "segments", "map", "segment", "__publicField", "isProEventModel", "EventStore", "RecurringEventsMixin", "GetEventsMixin", "DayIndexMixin", "EventStoreMixin", "ChronoEventStoreMixin", "AjaxStore", "defaultConfig", "modelClass", "ResourceUtilizationModel", "Model", "construct", "args", "_childrenIndex", "Map", "origin", "Object", "assign", "mapOriginValues", "generatedParent", "fillChildren", "isResourceModel", "isAssignmentModel", "_origin$event", "_origin$event2", "event", "iconCls", "_me$origin", "toRemove", "Set", "toAdd", "assignment", "has", "delete", "push", "new", "size", "removeChild", "length", "appendChild", "afterRemoveChild", "records", "forEach", "insertChild", "added", "_this$origin", "stores", "Array", "isArray", "traverse", "node", "setModelByOrigin", "getChildByOrigin", "convertEmptyParentToLeaf", "exposeProperties", "ResourceUtilizationStore", "AbstractPartOfProjectStoreMixin", "properties", "_modelByOrigin", "updateProject", "setResourceStore", "setAssignmentStore", "setEventStore", "eventStore", "fillStoreFromProject", "detachListeners", "onResourceStoreDataChanged", "onEventUpdate", "onAssignmentsChange", "refresh", "onAssignmentsRefresh", "onAssignmentsAdd", "onAssignmentUpdate", "remove", "onAssignmentsRemove", "isMove", "action", "resourceWrapper", "getModelByOrigin", "resource", "assignmentWrapper", "newResourceWrapper", "_this$_project", "_project", "isSpecialRow", "removeAll", "trigger", "removed", "clear", "model", "configurable", "tree", "sortFn", "a", "b", "ProHorizontalLayout", "Target", "Base", "weights", "groupBy", "groupByThisObj", "layoutFn", "grouped", "Boolean", "getGroupValue", "layoutData", "group", "eventRecord", "call", "Infinity", "getEventGroups", "events", "groups", "sort", "aValue", "bValue", "from", "ProHorizontalLayoutStack", "HorizontalLayoutStack", "layoutEventsInBands", "heightRun", "ProHorizontalLayoutPack", "HorizontalLayoutPack", "groupCount", "packEventsInBands", "j", "slot", "slotSize", "groupIndex", "indexOf", "adjustedSlotStart", "height", "top", "start", "inBandHeight", "inBandTop", "bandIndexToPxConvertFn", "bandIndexToPxConvertThisObj", "resourceRecord", "counter", "CalendarHighlightModel", "ResourceTimeRangeModel", "generateId", "domIdPrefix", "CalendarHighlight", "ResourceTimeRangesBase", "calendar", "unhighlightOnDrop", "collectAvailableResources", "rangeCls", "resourceTimeRangeModelClass", "inflate", "pluginConfig", "config", "afterConstruct", "client", "eventDragStart", "eventDragReset", "eventResizeStart", "eventResizeEnd", "dragCreateStart", "afterDragCreate", "highlightCalendar", "eventRecords", "resourceRecords", "ArrayHelper", "asArray", "highlightEventCalendars", "highlightResourceCalendars", "clearExisting", "_client$syncSplits", "disabled", "unhighlightCalendars", "flatMap", "$linkedResources", "highlight", "_eventRecord$calendar", "timespans", "getWorkingTimeRanges", "timespan", "currentOrientation", "refreshEventsForResource", "onRenderDone", "syncSplits", "split", "_me$client$syncSplits", "_me$client", "_resourceRecord$calen", "_me$client$syncSplits2", "_me$client2", "resources", "keys", "onEventDragStart", "context", "_me$collectAvailableR", "availableResources", "features", "eventDrag", "constrainDragToResource", "scheduler", "onEventResizeStart", "onDragCreateStart", "getEventsToRender", "_this$highlight", "onEventDataGenerated", "renderData", "isCalendarHighlightModel", "fillSize", "isVertical", "wrapperCls", "className", "html", "dataset", "taskBarFeature", "width", "left", "eventId", "generateElementId", "updateDisabled", "was", "shouldInclude", "featureClass", "GridFeatureManager", "registerFeature", "DependencyEdit", "TransactionalFeature", "SchedulerDependencyEdit", "showLagField", "editorConfig", "items", "activeField", "label", "editDependency", "startFeatureTransaction", "afterSave", "finishFeatureTransaction", "then", "afterDelete", "afterCancel", "rejectFeatureTransaction", "EventBuffer", "InstancePlugin", "showDuration", "tooltipTemplate", "$config", "chain", "updateTooltipTemplate", "tooltip", "Tooltip", "forElement", "timeAxisSubGridElement", "forSelector", "align", "offset", "getHtml", "activeTarget", "resolveEventRecord", "before", "matches", "_me$tooltip", "destroy", "useEventBuffer", "bufferBeforeWidth", "bufferAfterWidth", "wrapperChildren", "enabled", "isHorizontal", "sizeProp", "style", "tag", "toString", "undefined", "updateShowDuration", "isConfiguring", "refreshWithTransition", "doDisable", "disable", "isPainted", "element", "classList", "waitForAnimations", "EventSegmentDrag", "EventDrag", "capitalizedEventName", "getTriggerParams", "dragData", "assignmentRecords", "browserEvent", "triggerEventDrag", "triggerDragStart", "navigator", "skipNextClick", "triggerDragAbort", "triggerDragAbortFinalized", "triggerAfterDrop", "valid", "initialAssignmentsState", "find", "i", "_this$dragData$assign", "includes", "resourceId", "updateRecords", "copyKeyPressed", "externalDropTarget", "suspendAutoCommit", "updateSegment", "resumeAutoCommit", "isCopy", "targetEventRecord", "targetResourceRecord", "newResource", "mode", "suspendRefresh", "updated", "draggedEvent", "eventBar", "eventBarEls", "instanceMeta", "hasTemporaryDragElement", "transient", "slice", "newStartDate", "adjustStartDate", "origStart", "isEqual", "_me$endBatchUpdate", "endListeningForBatchedUpdates", "cancelBatchUpdate", "commitAsync", "endBatchUpdate", "resumeRefresh", "fillTicks", "el", "lastDomConfig", "isEventElementDraggable", "eventElement", "isEventSegment", "closest", "drag", "targetSelector", "buildDragHelperConfig", "getMinimalDragData", "info", "getElementFromContext", "resolveResourceRecord", "assignmentRecord", "resolveAssignmentRecord", "beginBatchUpdate", "beginBatch", "_eventRecord$event", "endBatch", "_eventRecord$event2", "cancelBatch", "setupProductDragData", "_me$getDateConstraint", "mainEventElement", "getElementsFromEventRecord", "Error", "ignoreSamePositionDrop", "rtl", "nextSegment", "listenToBatchedUpdates", "beginListeningForBatchedUpdates", "dateConstraints", "getDateConstraints", "constrainRectangle", "getConstrainingRectangle", "eventRegion", "Rectangle", "foregroundCanvas", "mainEventRegion", "translate", "x", "setupConstraints", "timeAxisViewModel", "snapPixelAmount", "draggedEntities", "suspendRecordElementRedrawing", "suspendElementRedrawing", "minDate", "maxDate", "previousSegment", "end", "tipId", "internalSnapToPosition", "snapTo", "updateDragContext", "dirty", "_client$features$even", "enableEventAnimations", "eventBuffer", "borderWidths", "border", "hollow", "NestedEvents", "Delayable", "refreshClient", "updateEventLayout", "layout", "console", "warn", "updateBarMargin", "updateResourceMargin", "changeEventHeight", "_eventHeights", "updateEventHeight", "updateHeaderHeight", "setProperty", "getEventLayout", "parentEventRecord", "eventLayout", "overridden", "getResourceMargin", "isRoot", "resourceMargin", "getBarMargin", "barMargin", "getAppliedResourceHeight", "childLevel", "borderWidth", "getEventStyle", "currentParentsHeight", "headerHeight", "getResourceWidth", "currentParentsWidth", "attachToEventStore", "onEventStoreChange", "some", "r", "parent", "onEventStoreBatchedUpdate", "beforeEventDragStart", "parentElement", "isDraggingNestedEvent", "originalParentElement", "originalBounds", "getElementFromAssignmentRecord", "bounds", "constrainDragToParent", "constrainDragToTimeline", "relativeBounds", "DomSync", "addChild", "afterEventDragStart", "parentBounds", "getBoundingClientRect", "setYConstraint", "setXConstraint", "checkEventDragValidity", "allowDeNestingOnDrop", "message", "L", "allowNestingOnDrop", "maxLevel", "maxNesting", "targetLevel", "maxChildLevel", "Math", "max", "allChildren", "relativeChildLevel", "processEventDrop", "toScheduler", "reassignedFrom", "eventsToAdd", "addedEvents", "draggedAssignment", "newParent", "targetResource", "rootNode", "existingAssignment", "assignments", "newParentElement", "getElementFromEventRecord", "syncIdMap", "nestedEventsContainer", "intersection", "syncId", "processCrossSchedulerEventDrop", "afterEventDragAbortFinalized", "animation", "getAnimations", "transitionProperty", "finished", "afterEventResizeStart", "constrainResizeToParent", "timespanRecord", "min", "returnWrapper", "_assignmentRecord$eve", "getChild", "scheduleEvent", "eventRect", "DomHelper", "setTranslateXY", "setTopLeft", "y", "filter", "isEventModel", "afterRenderEvent", "assignedChildren", "e", "_e$$linkedResources", "layouts", "layoutEvents", "overlappingEventSorter", "nestedEvents", "eventsData", "values", "absoluteTop", "absoluteLeft", "domConfig", "renderEvent", "containerDomConfig", "syncOptions", "syncIdField", "releaseThreshold", "index", "findIndex", "splice", "elementConfig", "level", "eventHeight", "override", "delayable", "ResourceNonWorkingTime", "resourceMap", "timeAxis", "reconfigure", "prio", "changePreCommit", "attachToCalendarManagerStore", "onTimeAxisReconfigure", "onResourceChange", "runWithTransition", "onCalendarChange", "shouldPaint", "maxTimeAxisUnit", "compareUnits", "effectiveCalendar", "ranges", "getNonWorkingTimeRanges", "range", "cls", "isNonWorking", "resolveResourceNonWorkingTimeInterval", "rangeElement", "_rangeElement$closest", "elementData", "enableMouseEvents", "entityName", "timespanDefaults", "isHighlightConfig", "TimeSpanHighlight", "domConfigs", "configs", "padding", "rowManager", "renderDone", "onViewChanged", "highlightTimeSpan", "draw", "surround", "taskRecord", "isTimeSpan", "animationId", "addTemporaryClass", "surroundTimeSpan", "rect", "isGanttBase", "getScheduleRegion", "visualize", "class", "sync", "targetElement", "containerEl", "onlyChildren", "timeSpan", "highlightTimeSpans", "timeSpans", "setPrototypeOf", "unhighlightTimeSpans", "fadeOut", "_client$syncSplits2", "opacity", "fadeOutDetacher", "EventHelper", "onTransitionEnd", "property", "handler", "_containerEl", "createElement", "retainElement", "onTimeAxisViewModelUpdate", "ChangeLogPropertyUpdate", "after", "freeze", "ProjectModel", "ProjectChangeHandlerMixin", "ProjectCrudManager", "ProjectModelMixin", "SchedulerProProjectMixin", "calendarModelClass", "CalendarModel", "dependencyModelClass", "DependencyModel", "eventModelClass", "assignmentModelClass", "AssignmentModel", "resourceModelClass", "ResourceModel", "calendarManagerStoreClass", "CalendarManagerStore", "dependencyStoreClass", "DependencyStore", "eventStoreClass", "assignmentStoreClass", "AssignmentStore", "resourceStoreClass", "ResourceStore", "calendarsData", "supportShortSyncResponseNote", "delayCalculation", "stmClass", "StateTrackingManager", "calendars", "taskStore", "allRecords", "updateCalendars", "SchedulerProEventRendering", "horizontalLayoutPackClass", "horizontalLayoutStackClass", "updateInternalEventLayout", "oldEventLayout", "clearLayouts", "key", "getEventLayoutHandler", "horizontal", "horizontalStack", "layoutEventVerticallyStack", "horizontalPack", "layoutEventVerticallyPack", "applyLayout", "widgetClass", "buildReturnedValue", "total", "allocation", "ResourceHistogram", "TimelineHistogram", "SchedulerStores", "SchedulerResourceRendering", "CrudManagerView", "currentTimeAxis", "_timeAxis", "partner", "endReconfigure", "afterConfigure", "onRecordAllocationCalculated", "bind", "onCommitAsyncCompletion", "onDestroy", "_this$project$getGrap", "_this$project", "graph", "getGraph", "ticksIdentifier", "removeIdentifier", "clearHistogramDataCache", "entity", "_this$getHistogramDat", "getHistogramDataCache", "entries", "_record$removeEntity", "removeEntity", "bindProject", "delayCalculationStart", "delayCalculationEnd", "repopulateReplica", "crudManager", "getRowHeight", "rowHeight", "convertEffortUnit", "toUnit", "run", "updateUseProjectTimeUnitsForScale", "eventParams", "scalePoints", "generateScalePoints", "_generatedScalePoints", "scheduleRefreshRows", "updateShowBarText", "_this$project2", "convertUnitsToHistogramValue", "useProjectTimeUnitsForScale", "TimeUnit", "Millisecond", "asMilliseconds", "convertHistogramValueToUnits", "as", "buildScalePointText", "scalePoint", "getShortNameOfUnit", "scaleMax", "_this$project3", "increment", "scaleStep", "getSmallerUnit", "round", "factor", "lastPoint", "updateViewPreset", "viewPreset", "_updatingViewPreset", "isInitialCommitPerformed", "onTimeAxisEndReconfigure", "onRepopulateReplica", "buildTicksIdentifier", "addIdentifier", "CalculatedValueGen", "prevTicksCalendar", "read", "clearCombinationsWith", "writeToGraph", "BaseCalendarMixin", "unspecifiedTimeIsWorking", "intervals", "ticks", "tick", "isWorking", "collectTicksWidth", "onProjectDelayCalculationStart", "onProjectDelayCalculationEnd", "projectUnitsHasChanged", "daysPerMonth", "_projectDaysPerMonth", "daysPerWeek", "_projectDaysPerWeek", "hoursPerDay", "_projectHoursPerDay", "internalOnProjectRefresh", "source", "isInitialCommit", "isCalculated", "topRow", "reinitialize", "relayStoreDataChange", "count", "histogramWidget", "changeHistogramWidget", "widget", "oldWidget", "series", "showMaxEffort", "maxEffort", "getRectConfig", "rectConfig", "datum", "inEventTimeSpan", "topValue", "forceHeight", "stretch", "getRectClassDefault", "isOverallocated", "isUnderallocated", "effortFormatter", "format", "effortFormat", "formatter", "_effortFormatter", "_effortFormat", "NumberFormat", "_lastFormat", "getEffortText", "showEffortUnit", "_this$project4", "scaleUnit", "localizedUnit", "effortInUnits", "getBarTipEffortUnit", "barTipEffortUnit", "defaultUnit", "getGroupBarTip", "allocated", "available", "assignmentTpl", "dateFormat", "resultFormat", "assignmentsSuffix", "Day", "Second", "Hour", "assignmentsArray", "resourceAllocation", "key1", "value1", "key2", "value2", "groupBarTipAssignmentLimit", "replace", "StringHelper", "encodeHtml", "join", "getResourceBarTip", "getBarTextEffortUnit", "barTextEffortUnit", "getBarTextDefault", "view", "owner", "showBarText", "updateShowMaxEffort", "_showMaxEffort", "_histogramWidget", "_seriesMaxEffort", "updateIncludeInactiveEvents", "_this$getHistogramDat2", "allocationReport", "includeInactiveEvents", "onTimeAxisEndReconfigureInternal", "_lastTimeAxisUnit", "_lastTimeAxisIncrement", "calculateRowHeights", "graphReady", "once", "extractHistogramDataArray", "renderRows", "timeView", "shiftPrevious", "shiftNext", "renderScheduledRecords", "_renderOnCommitPromise", "isDestroying", "setHistogramDataCache", "buildResourceAllocationReport", "resourceAllocationInfoClass", "getRecordAllocationData", "await", "addEntity", "readAsync", "$", "ongoing", "addListener", "onHistogramDataCacheSet", "aggregateRecordsHistogramData", "aggregationContext", "Objects", "isPromise", "initAggregatedAllocationEntry", "units", "isGroup", "aggregateAllocationEntry", "acc", "entry", "_recordIndex", "_entryIndex", "generateGroupScalePoints", "getGroupChildren", "groupParent", "processRecordRenderData", "isGroupRecord", "getTopValueByScalePoints", "scaleWidgetConfig", "histogramConfig", "updateLocalization", "projectModelClass", "sortFeatureStore", "timeAxisColumnCellCls", "getRecordData", "aggregateDataEntry", "initAggregatedDataEntry", "hardRefreshOnTimeAxisReconfigure", "barTooltipTemplate", "fixedRowHeight", "initClass", "ResourceUtilization", "renderRow", "buildStore", "updateResourceStore", "_resourceStore", "getTipHtml", "tooltipContext", "getRecordFromElement", "allocationData", "getRecordHistogramData", "parseInt", "resolveRecordToOrigin", "destroyStores", "_this$store", "byAssignments", "reduce", "resolveOriginToRecord", "onRowManagerRenderRow", "row", "assignCls", "$original", "isResourceUtilizationStore", "hasLinks", "link", "$links", "scheduleRecordRefresh", "scheduleRecordParentsRefresh", "getCell", "_data$record", "_data$record2", "isHistogram", "getBarTextRenderData", "getBarTextRenderDataDefault", "targetArray", "$resources", "members", "recordIndex", "entryIndex", "recordArray", "arrays", "resourceEntry", "aggregateHistogramData", "l", "showBarTip", "assignmentIntervals", "memberArray", "member", "_member$resource", "_member$event", "getAssignmentBarTip", "_ResourceUtilization", "scaleColumn", "readOnly", "columns", "localeClass", "Tree", "ProHorizontalRendering", "HorizontalRendering", "fillInnerSpanHorizontalPosition", "startMS", "innerStartMS", "endMS", "innerEndMS", "durationMS", "innerDurationMS", "calculateMS", "position", "calculateHorizontalPosition", "floor", "getTimeSpanRenderData", "rowRecord", "includeOutside", "ProVerticalRendering", "VerticalRendering", "fillInnerSpanVerticalPosition", "isBatchUpdating", "getCoordinateFromDate", "bottom", "getSingleUnitInPixels", "SchedulerProBase", "SchedulerBase", "ProjectProgressMixin", "SchedulingIssueResolution", "onPaintOverride", "_mode", "init", "vertical", "rendered", "toggleEmptyText", "bodyContainer", "toggleClasses", "rowCount", "isLoadingOrSyncing", "createEvent", "isWorkingTime", "taskEdit", "isEditing", "aftertaskedit", "dependencyIdField", "showTaskColorPickers", "isSchedulerPro", "VersionHelper", "setVersion", "SchedulerPro", "Timeline", "forceFit", "autoAdjust", "zoomOnMouseWheel", "zoomOnTimeAxisDoubleClick", "displayDateFormat", "fillFromTaskStore", "startDateLabel", "document", "endDateLabel", "initialCommitPerformed", "ObjectHelper", "cellEdit", "cellMenu", "columnAutoWidth", "columnLines", "columnPicker", "columnReorder", "columnResize", "contextMenu", "eventContextMenu", "eventDragCreate", "eventEdit", "eventFilter", "eventMenu", "eventResize", "eventTooltip", "headerMenu", "regionResize", "scheduleContextMenu", "scheduleMenu", "scheduleTooltip", "timeAxisHeaderMenu", "timeRanges", "Store", "now", "refreshPreCommit", "onTaskStoreChange", "resize", "onSizeChanged", "oldWidth", "reFit", "syncRowHeight", "fitTimeline", "isConnected", "offsetHeight", "zoomToFit", "leftMargin", "rightMargin", "updateStartEndLabels", "innerHTML", "getFormattedDate", "isCollapse", "needsFit", "task", "showInTimeline", "cloneTask", "timelineEvent", "clone", "render", "timelineTasks", "isScheduled", "isDestroyed", "onLocaleChange", "EMPTY_ARRAY", "actionTypeOrder", "entityTypeOrder", "TaskModel", "describePosition", "knownEntityTypes", "VersionGridRow", "GridRowModel", "VersionGrid", "TreeGrid", "_transactionChanges", "_versionChanges", "comparingRowCls", "_rowsByUnderlyingRecord", "WeakMap", "_expandedById", "merge", "refreshGrid", "updateDateFormat", "newDateFormat", "occurredAtColumn", "newProject", "_versionStore", "getCrudStore", "_transactionStore", "onVersionStoreChange", "onTransactionStoreChange", "updateShowNamedVersionsOnly", "updateShowUnattachedTransactions", "updateShowVersions", "updateComparingVersionId", "newVersionId", "oldVersionId", "oldHighlightedRow", "newHighlightedRow", "versionId", "processUpdates", "versions", "unique", "versionIds", "version", "String", "transactions", "concat", "query", "txn", "transaction", "replaceRows", "showNamedVersionsOnly", "showUnattachedTransactions", "rowsToReplaceSet", "transactionsByVersionId", "versionsToShow", "newRows", "getGridRows", "sorters", "showVersions", "comparingVersionId", "transactionRows", "_me$_expandedById", "expanded", "description", "occurredAt", "transactionModel", "rootVersionModel", "actions", "_me$_expandedById2", "_action$propertyUpdat", "propertyUpdates", "propertyUpdate", "savedAt", "versionModel", "renderDescription", "renderPropertyUpdate", "renderActionDescription", "clsPrefix", "formatPropertyName", "renderPropertyValue", "side", "formatValueString", "isDate", "toFixed", "propertyName", "separate", "getAssignmentTextTokens", "assignmentChange", "getDependencyTextTokens", "dependencyChange", "fromTask", "to", "toTask", "actionType", "entityNames", "tokens", "_", "variable", "isUser", "renderHighlightedTextElements", "capitalize", "sortActionRows", "row1", "row2", "isUser1", "isUser2", "type1", "entityType1", "type2", "entityType2", "sign", "triggerRestore", "triggerCompare", "triggerStopCompare", "out", "chunk", "isEntity", "_VersionGrid", "ascending", "reapplySortersOnAdd", "flex", "continueEditingOnCellClick", "editNextOnEnterPress", "removeRow", "cut", "copy", "paste", "renameButton", "icon", "onItem", "grid", "startEditing", "column", "restoreButton", "compareButton", "stopComparingButton", "rowCopyPaste", "groupable", "rest", "autoHeight", "internalListeners", "beforeCellEditStart", "editorContext", "finishCellEdit", "trim", "cellMenuBeforeShow", "toggleNode", "collapse", "cancelOutstanding", "HOSTS", "EXPIRING_CLASSES", "isTestEnv", "host", "location", "test", "href", "initialized", "initExpiryHelper", "baseClass", "ExpiryHelper", "__foo", "product", "productName", "getVersion", "callHomeDelay", "blockUrl", "BrowserHelper", "queryString", "Product", "verifyUrl", "blocked", "lastVersionCheck", "trialKey", "versionCheckKey", "log", "cacheTrialStartTime", "isExpired", "readyState", "onTrialExpired", "addEventListener", "setTimeout", "updateBlockedStatus", "timeString", "getLocalStorageItem", "time", "Number", "isNaN", "trialStartTime", "setLocalStorageItem", "_window$bryntum", "_window$bryntum$this$", "ONE_DAY", "window", "bryntum", "expired", "saveVersionCheckKey", "url", "encodeURIComponent", "logUrl", "license", "img", "Image", "onload", "naturalWidth", "blockTrial", "onerror", "src", "rootEl", "rootElement", "expirationShown", "floatRoot", "Toast", "show", "timeout", "removeEachSelector", "forEachSelector", "Widget", "fromElement", "maskExpiredWidget", "removeLocalStorageItem", "mask", "cover", "setWaterMark", "darkColor", "lightColor", "_DomHelper$themeInfo", "_DomHelper$themeInfo$", "thumb", "color", "themeInfo", "toLowerCase", "endsWith", "svgString", "backgroundImage", "btoa", "Override", "apply", "target", "setWatermarks", "targets", "subGrids", "GlobalEvents", "on", "SchedulerEventRendering", "_overridden", "ignoreDomainRe", "websiteUrls", "products", "frameworks", "prod", "framework", "flat", "match", "newScript", "dataLayer", "gtag", "head"]
}
