{"version":3,"file":"ExcelExporter.js","sources":["../../../../Grid/lib/Grid/column/ColorColumn.js","../../../../Grid/lib/Grid/feature/GroupSummary.js","../../../../Grid/lib/Grid/feature/Split.js","../../../../Grid/lib/Grid/util/TableExporter.js","../../../../Grid/lib/Grid/util/BooleanUnicodeSymbol.js","../../../../Grid/lib/Grid/feature/experimental/ExcelExporter.js"],"sourcesContent":["import Menu from '../../Core/widget/Menu.js';\nimport Column from './Column.js';\nimport  '../../Core/widget/ColorPicker.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/ColorColumn\n */\n\n/**\n * A column that displays color values (built-in color classes or CSS colors) as a colored element similar to\n * the {@link Core.widget.ColorField}. When the user clicks the element, a {@link Core.widget.ColorPicker} lets the user\n * select from a range of colors.\n *\n * {@inlineexample Grid/column/ColorColumn.js}\n *\n * ```javascript\n * new Grid({\n *    columns : [\n *       {\n *          type   : 'color',\n *          field  : 'color',\n *          text   : 'Color'\n *       }\n *    ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classType color\n */\nexport default class ColorColumn extends Column {\n    static $name = 'ColorColumn';\n\n    static type = 'color';\n\n    static fields = [\n        { name : 'colorEditorType', defaultValue : 'colorpicker' },\n\n        /**\n         * Array of CSS color strings to be able to chose from. This will override the\n         * {@link Core.widget.ColorPicker#config-colors pickers default colors}.\n         *\n         * Provide an array of string CSS colors:\n         * ```javascript\n         * new Grid({\n         *    columns : [\n         *       {\n         *          type   : 'color',\n         *          field  : 'color',\n         *          text   : 'Color',\n         *          colors : ['#00FFFF', '#F0FFFF', '#89CFF0', '#0000FF', '#7393B3']\n         *       }\n         *    ]\n         * });\n         * ```\n         * @prp {String[]}\n         */\n        'colors',\n\n        /**\n         * Adds an option in the picker to set no background color\n         * @prp {Boolean}\n         * @default true\n         */\n        { name : 'addNoColorItem', defaultValue : true }\n    ];\n\n    static defaults = {\n        align  : 'center',\n        editor : null\n    };\n\n    construct() {\n        super.construct(...arguments);\n\n        const\n            me       = this,\n            { grid } = me;\n\n        me.menu = new Menu({\n            owner             : grid,\n            rootElement       : grid.rootElement,\n            autoShow          : false,\n            align             : 't50-b50',\n            anchor            : true,\n            internalListeners : {\n                hide() {\n                    me.picker.navigator.activeItem = null;\n                    delete me._editingRecord;\n                }\n            },\n            items : [\n                Object.assign({\n                    type           : me.colorEditorType,\n                    ref            : 'list',\n                    addNoColorItem : me.addNoColorItem,\n                    colorSelected({ color }) {\n                        me._editingRecord?.set(me.field, color);\n                        me.menu.hide();\n                    }\n                }, me.colors?.length ? { colors : me.colors } : {})\n            ]\n        });\n    }\n\n    applyValue(useProp, field, value) {\n        if (!this.isConstructing) {\n            const { picker } = this;\n\n            if (field === 'colors') {\n                picker.colors = value;\n            }\n            else if (field === 'addNoColorItem') {\n                picker.addNoColorItem = value;\n            }\n        }\n\n        super.applyValue(...arguments);\n    }\n\n    get picker() {\n        return this.menu.widgetMap.list;\n    }\n\n    renderer({ value }) {\n        let colorClass      = 'b-empty',\n            backgroundColor = value;\n\n        if (value) {\n            const colorClassName = this.picker.getColorClassName(value);\n\n            if (colorClassName) {\n                colorClass      = colorClassName;\n                backgroundColor = null;\n            }\n            else {\n                colorClass = '';\n            }\n        }\n\n        return {\n            className : 'b-color-cell-inner ' + colorClass,\n            style     : {\n                backgroundColor\n            },\n            'data-btip' : value\n        };\n    }\n\n    onCellClick({ grid, record, target }) {\n        if (target.classList.contains('b-color-cell-inner') && !this.readOnly &&\n            !grid.readOnly && !record.isSpecialRow && !record.readOnly\n        ) {\n            const\n                { picker, menu } = this,\n                value            = record.get(this.field);\n\n            this._editingRecord = record;\n\n            picker.deselectAll();\n            picker.select(value);\n            picker.refresh();\n            menu.showBy(target);\n        }\n    }\n}\n\nColumnStore.registerColumnType(ColorColumn);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/GroupSummary\n */\n\n/**\n * Displays a summary row as a group footer in a grouped grid. Uses same configuration options on columns as\n * {@link Grid.feature.Summary}.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * features : {\n *     group        : 'city',\n *     groupSummary : true\n * }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/groupsummary\n * @classtype groupSummary\n * @feature\n *\n * @inlineexample Grid/feature/GroupSummary.js\n */\nexport default class GroupSummary extends SummaryFormatter(InstancePlugin) {\n    //region Init\n\n    static get $name() {\n        return 'GroupSummary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @member {Boolean} collapseToHeader\n             */\n            /**\n             * Configure as `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            collapseToHeader : true\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @config {Boolean}\n             */\n            collapseToHeader : null,\n\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * @member {'header'|'footer'} target\n             */\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            target : 'header'\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * @config {'header'|'footer'}\n             * @default\n             */\n            target : 'footer'\n        };\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        if (!grid.features.group) {\n            throw new Error('Requires Group feature to work, please enable');\n        }\n\n        this.bindStore(grid.store);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            renderCell      : 'renderCell',\n\n            // The feature gets to see cells being rendered after the Group feature\n            // because the Group feature injects header content into group header rows\n            // and adds rendering info to the cells renderData which we must comply with.\n            // In particular, it calculates the isFirstColumn flag which it adds to\n            // the cell renderData which we interrogate.\n            prio    : 1000,\n            thisObj : this\n        });\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            update  : 'onStoreUpdate',\n            // need to run before grids listener, to flag for full refresh\n            prio    : 1,\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDisable(disable) {\n        // Toggle footers if needed\n        this.updateTarget(this.target);\n\n        super.doDisable(disable);\n    }\n\n    changeTarget(target) {\n        ObjectHelper.assertString(target, 'target');\n\n        return target;\n    }\n\n    updateTarget(target) {\n        // Flag that will make the Store insert rows for group footers\n        this.store.useGroupFooters = !this.disabled && target === 'footer';\n\n        // Refresh groups to show/hide footers\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n\n    changeCollapseToHeader(collapseToHeader) {\n        ObjectHelper.assertBoolean(collapseToHeader, 'collapseToHeader');\n\n        return collapseToHeader;\n    }\n\n    updateCollapseToHeader() {\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group summary rows\n     * @private\n     */\n    onBeforeRenderRow({ row, record }) {\n        if (row.isGroupFooter && !('groupFooterFor' in record.meta)) {\n            // not a group row.\n            row.isGroupFooter = false;\n            // force full \"redraw\" when rendering cells\n            row.forceInnerHTML = true;\n        }\n        else if (row.isGroupHeader && !record.meta.collapsed) {\n            // remove any summary elements\n            row.eachElement(this.removeSummaryElements);\n        }\n    }\n\n    removeSummaryElements(rowEl) {}\n\n    /**\n     * Called when a cell is rendered, styles the group rows first cell.\n     * @private\n     */\n    renderCell({ column, cellElement, row, record, size, isFirstColumn }) {\n        const\n            me            = this,\n            { meta }      = record,\n            { rowHeight } = me.grid,\n            isGroupHeader = 'groupRowFor' in meta,\n            isGroupFooter = 'groupFooterFor' in meta,\n            targetsHeader = me.target === 'header',\n            rowClasses    = {\n                'b-group-footer'   : 0,\n                'b-header-summary' : 0\n            },\n            isSummaryTarget =\n                // Header cell should have summary content if we are targeting the header or if the group is collapsed\n                // and we are configured with collapseToHeader, excluding the first column which holds the group title\n                (isGroupHeader && (targetsHeader || me.collapseToHeader && meta.collapsed) && !isFirstColumn) ||\n                // Footer cell should have summary content if we are targeting the footer (won't render if collapsed)\n                (isGroupFooter && !targetsHeader);\n\n        // Needed to restore height when summary is no longer displayed\n        if (isGroupHeader || isGroupFooter) {\n            size.height = isGroupHeader ? (size.height || rowHeight) : rowHeight;\n        }\n\n        if (me.store.isGrouped && isSummaryTarget && !me.disabled) {\n            // clear cell before add any HTML in it. if the cell contained widgets, they will be properly destroyed.\n            column.clearCell(cellElement);\n\n            const groupRecord = isGroupHeader ? record : meta.groupRecord;\n\n            row.isGroupFooter = isGroupFooter;\n            row.isGroupHeader = isGroupHeader;\n\n            // This is a group footer row, add css\n            if (isGroupFooter) {\n                rowClasses['b-group-footer'] = 1;\n            }\n            // This is a group header row, add css\n            else {\n                rowClasses['b-header-summary'] = 1;\n            }\n\n            // returns height config or count. config format is { height, count }. where `height is in px and should be\n            // added to value calculated from `count\n            const\n                heightSetting = me.updateSummaryHtml(cellElement, column, groupRecord),\n                count         = typeof heightSetting === 'number' ? heightSetting : heightSetting.count;\n\n            // number of summaries returned, use to calculate cell height\n            if (count > 1) {\n                size.height += (meta.collapsed && !targetsHeader ? 0 : count * rowHeight * 0.1);\n            }\n\n            // height config with height specified, added to cell height\n            if (heightSetting.height) {\n                size.height += heightSetting.height;\n            }\n        }\n\n        // Sync row's classes with its status as a group header or footer.\n        row.assignCls(rowClasses);\n    }\n\n    updateSummaryHtml(cellElement, column, groupRecord) {\n        const records = groupRecord.groupChildren.slice();\n\n        // Group footers should not be included in summary calculations\n        if (records[records.length - 1].isGroupFooter) {\n            records.pop();\n        }\n\n        const html = this.generateHtml(column, records, 'b-grid-group-summary', groupRecord, groupRecord.meta.groupField, groupRecord.meta.groupRowFor);\n\n        // First time, set table\n        if (!cellElement.children.length) {\n            cellElement.innerHTML = html;\n        }\n        // Following times, sync changes\n        else {\n            DomHelper.sync(html, cellElement.firstElementChild);\n        }\n\n        // return summary \"count\", used to set row height\n        return column.summaries ? column.summaries.length : column.sum ? 1 : 0;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreUpdate({ source : store, changes }) {\n        if (!this.disabled && store.isGrouped) {\n            // If a grouping field is among the changes, StoreGroup#onDataChanged will\n            // take care of the update by re-sorting.\n            if (changes && store.groupers.find(grouper => grouper.field in changes)) {\n                return;\n            }\n            // only update summary when a field that affects summary is changed\n            // <remove-on-release>\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            // </remove-on-release>\n            const shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n\n            if (shouldUpdate) {\n                this.grid.forceFullRefresh = true;\n            }\n        }\n    }\n\n    //endregion\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.grid.columns.visibleColumns.forEach(column => {\n            if (this.hasSummary(column)) {\n                this.grid.refreshColumn(column);\n            }\n        });\n    }\n\n    hasSummary(column) {\n        return column.sum || column.summaries;\n    }\n}\n\nGroupSummary.featureClass = 'b-group-summary';\n\nGridFeatureManager.registerFeature(GroupSummary);\n","import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Splitter from '../../Core/widget/Splitter.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\n\n/**\n * @module Grid/feature/Split\n */\n\nconst\n    startScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'start'\n    }),\n    endScrollOptions = Object.freeze({\n        animate : false,\n        block   : 'end'\n    }),\n    splitterWidth = 7,\n    // Listeners for these events should not be added to splits\n    ignoreListeners     = {\n        split   : 1,\n        unsplit : 1\n    };\n;\n\n/**\n * This feature allows splitting the Grid into multiple views, either by using the cell context menu, or\n * programmatically by calling {@link #function-split split()}.\n *\n * {@inlineexample Grid/feature/Split.js}\n *\n * It handles splitting in 3 \"directions\":\n *\n * - `'horizontal'` - Splitting the grid into 2 sub-views, one above the other.\n * - `'vertical'` - Splitting the grid into 2 sub-views, one to the left of the other.\n * - `'both'` - Splitting the grid into 4 sub-views, one in each corner.\n *\n * Or, by supplying a record and/or a column to split by.\n *\n * The first sub-view (top, left or top-left depending on split direction) is the original grid, and the others are\n * clones of the original. The clones share the same store, columns and selection.\n *\n * Sub-views in the same column sync their scrolling horizontally, and sub-views in the same row sync their scrolling\n * vertically.\n *\n * Sub-views are separated by splitters, that can be dragged to resize the views.\n *\n * Splitting a multi-region grid (two regions supported) only includes the region in which the split was performed in\n * the split view.\n *\n * Splitting works best on grids that use fixed column widths, since flexed columns will resize when the grid is split.\n *\n * ## Splitting programmatically\n *\n * The split feature assigns two methods to the owning grid:\n *\n * - {@link #function-split split()} - Splits the grid into sub-views.\n * - {@link #function-unsplit unsplit()} - Re-joins the sub-views into a single grid.\n *\n * Use them to split programmatically in your app.\n *\n * ```javascript\n * // Split horizontally (eg. at the row in the center of the grid)\n * await grid.split({ direction : 'horizontal' });\n *\n * // Split both ways by a specific column and record\n * await grid.split({\n *    atRecord : grid.store.getById(10),\n *    atColumn : grid.columns.get('city')\n * });\n *\n * // Remove splits, returning to a single grid\n * grid.unsplit();\n * ```\n *\n * ## Splitting using the cell context menu\n *\n * The feature also adds a new sub-menu to the cell context menu, allowing the user to split (or un-split) the grid. See\n * the API documentation for the {@link Grid/feature/CellMenu} feature for more information on how to customize the\n * sub-menu.\n *\n * ## Accessing a sub-view\n * The sub-views are accessed by index. The original grid is at index 0, and the others are as shown below.\n * For 'horizontal' splits:\n *\n * <div style=\"font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-bottom: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-top: none; padding: 1em; width: 13em\">1 - Sub-view</div>\n * </div>\n *\n * For 'vertical' splits:\n *\n * <div style=\"display: flex; flex-direction: row;font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-left: none; padding: 1em; width: 13em\">1 - Sub-view</div>\n * </div>\n *\n * For 'both' splits:\n *\n * <div style=\"display: flex; flex-flow: row wrap; width : 27em;font-size: 0.8em\">\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999; border-bottom: 2px solid #999; padding: 1em; width: 13em\">0 - Original</div>\n *     <div style=\"border: 1px solid #ccc; border-left: none; border-bottom: 2px solid #999; padding: 1em; width: 13em\">1 - Sub-view</div>\n *     <div style=\"border: 1px solid #ccc; border-right: 2px solid #999;border-top: none; padding: 1em; width: 13em\">2 - Sub-view</div>\n *     <div style=\"border: 1px solid #ccc; border-top: none; border-left: none; padding: 1em; width: 13em\">3 - Sub-view</div>\n * </div>\n *\n * The {@link #property-subViews} property returns an array containing all sub-views, including the original. Note that\n * the property is also exposed on the owning Grid. Access a specific sub-view by index (see illustrations above). For\n * example to access the bottom right sub-view in a 'both' split:\n *\n * ```javascript\n * await grid.split({ direction : 'both' });\n * const bottomRight = grid.subViews[3];\n * await bottomRight.scrollRowIntoView(100);\n * ```\n *\n * ## Troubleshooting\n *\n * The splits are inserted into a container element (which has the `.b-split-container` CSS class), replacing the\n * original grid. If it does not render correctly out of the box, you should make sure that any CSS rules you have that\n * apply size to the grid also applies to the container element.\n *\n * For example if you use a CSS flex rule to size the grid:\n *\n * ```css\n * .b-grid {\n *     // Size grid using flex\n *     flex : 3;\n * }\n * ```\n *\n * Then you should also apply the same rule to the container element:\n *\n * ```css\n * .b-grid,\n * .b-split-container {\n *     flex : 3;\n * }\n * ```\n *\n * {@note}\n * Note that configuration changes at runtime, when already split, are not automatically propagated to the sub-views. If\n * you need to change a config at runtime, either first unsplit the grid, or change it on each sub-view individually. A\n * notable exception from this is that enabling / disabling features at runtime is reflected in the sub-views.\n * {/@note}\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype split\n * @feature\n */\nexport default class Split extends InstancePlugin {\n    static $name = 'Split';\n\n    static featureClass = '';\n\n    static configurable = {\n\n        /**\n         * An array of sub-views. The first sub-view is the original grid, and the others are clones of the original.\n         * See the \"Accessing a sub-view\" section above for more information.\n         *\n         * ```javascript\n         * await grid.split('vertical');\n         * const bottom = grid.subViews[1];\n         * await bottom.scrollRowIntoView(100);\n         * ```\n         *\n         * Note that this property is accessible directly on the grid instance.\n         *\n         * @member {Grid.view.Grid[]} subViews\n         * @on-owner\n         * @readonly\n         * @category Common\n         */\n        subViews : [], // Not a config, but still defined in configurable to allow assigning it in pluginConfig,\n\n        /**\n         * Properties whose changes should be relayed to sub-views at runtime.\n         *\n         * Supply an object with property names as keys, and a truthy value to relay the change, or a falsy value to not\n         * relay it. The object will be merged with the default values.\n         *\n         * By default, these properties are relayed:\n         * * {@link Grid/view/Grid#property-readOnly}\n         * * {@link Grid/view/Grid#property-rowHeight}\n         *\n         * Example of supplying a custom set of properties to relay:\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         split : {\n         *             relayProperties : {\n         *                 readOnly : false, // Do not relay readOnly changes\n         *                 myConfig : true   // Relay changes to the myConfig property\n         *             }\n         *         }\n         *     }\n         * }\n         * ```\n         * @config {Object<String,Boolean>}\n         */\n        relayProperties : {\n            value : {\n                readOnly  : 1,\n                rowHeight : 1\n            },\n            $config : {\n                merge : 'merge'\n            }\n        }\n    };\n\n    static pluginConfig = {\n        chain  : ['populateCellMenu', 'afterConfigChange', 'afterAddListener', 'afterRemoveListener'],\n        assign : ['split', 'unsplit', 'subViews', 'syncSplits']\n    };\n\n    // Flag used to ignore column changes that arise from syncing columns\n    #ignoreColumnChanges = false;\n\n    restorers = [];\n\n    doDestroy() {\n        this.unsplit(true);\n\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        const me = this;\n\n        if (!me.isConfiguring) {\n            if (disable) {\n                me._disabledSplitOptions = me._splitOptions;\n                me.unsplit();\n            }\n            else if (me._disabledSplitOptions) {\n                me.split(me._disabledSplitOptions);\n                me._disabledSplitOptions = null;\n            }\n        }\n    }\n\n    //region Split / unsplit\n\n    get isSplit() {\n        return Boolean(this.widgets?.length);\n    }\n\n    getClientConfig(appendTo, order, options, config = {}) {\n        const\n            { client }            = this,\n            { subGrids, regions } = client,\n            columns                = client.columns.records.slice(),\n            subGridConfigs         = ObjectHelper.assign({}, client.subGridConfigs);\n\n        // Match current sub-grid sizes\n        client.eachSubGrid(subGrid => {\n            const config = subGridConfigs[subGrid.region];\n            if (subGrid.flex) {\n                config.flex = subGrid.flex;\n            }\n            else {\n                config.width = subGrid.element.style.width;\n            }\n        });\n\n        if (options.atColumn && regions.length > 1 && order > 0) {\n            // Exclude regions to the left of the split\n            const subGridIndex = regions.indexOf(options.atColumn.region);\n\n            for (let i = 0; i < subGridIndex; i++) {\n                const subGrid = subGrids[regions[i]];\n\n                ArrayHelper.remove(columns, ...subGrid.columns.records);\n\n                delete subGridConfigs[regions[i]];\n            }\n        }\n\n        const clientConfig = ObjectHelper.assign({}, client.initialConfig, {\n            appendTo,\n            insertFirst  : null,\n            insertBefore : null,\n            splitFrom    : client,\n            owner        : client.owner,\n            // Use no toolbar or fake empty toolbar for things to line up nicely\n            tbar         : client.initialConfig.tbar && order === 1 ? {\n                height : client.tbar.height,\n                items  : [' ']\n            } : null,\n            // Share store & selection\n            store                    : client.store,\n            selectedRecordCollection : client.selectedRecordCollection,\n            subGridConfigs,\n            // Cannot directly share columns, since there is a 1-1 mapping between column and it's header\n            columns                  : this.cloneColumns(columns),\n            minHeight                : 0,\n            minWidth                 : 0\n        }, config);\n\n        // Listeners are removed from initialConfig during initialization, use non-internal current listeners\n        const appListeners = {};\n        for (const name in client.listeners) {\n            if (!ignoreListeners[name]) {\n                const [listener] = client.listeners[name];\n                if (!listener.$internal) {\n                    appListeners[name] = listener;\n                }\n            }\n        }\n\n        // Not internalListeners on purpose, these are app listeners\n        clientConfig.listeners = appListeners;\n\n        // Hide headers for bottom clone in horizontal split\n        if (options.direction === 'horizontal') {\n            clientConfig.hideHeaders = true;\n        }\n        // Hide headers for bottom clones in both split\n        else if (options.direction === 'both' && order !== 1) {\n            clientConfig.hideHeaders = true;\n        }\n\n        delete clientConfig.data;\n\n        return clientConfig;\n    }\n\n    cloneColumns(source) {\n        return source.flatMap(col => {\n            // Do not clone selection column, it will be injected by GridSelection.\n            // Ditto for the row expander column\n            if (col.meta.isSelectionColumn || col.field === 'expanderActionColumn') {\n                return [];\n            }\n\n            const data = { ...col.data };\n\n            if (col.children) {\n                data.children = col.children.map(child => ({ ...child.data }));\n            }\n\n            // RowNumberColumn \"pollutes\" headerRenderer, will create infinite loop if not cleaned up\n            delete data.headerRenderer;\n            delete data.parentId;\n\n            return data;\n        });\n    }\n\n    cloneClient(appendTo, order, options, config) {\n        const\n            clientConfig = this.getClientConfig(appendTo, order, options, config),\n            clone        = new this.client.constructor(clientConfig);\n\n        clone.element.classList.add('b-split-clone');\n\n        return clone;\n    }\n\n    // Process options, deducing direction, atRecord, etc.\n    processOptions(options) {\n        const\n            { client }                        = this,\n            { atRecord, atColumn, direction } = options;\n\n        if (!direction) {\n            // Infer direction from record & column\n            if (atRecord && atColumn) {\n                options.direction = 'both';\n            }\n            else if (atColumn) {\n                options.direction = 'vertical';\n            }\n            else {\n                options.direction = 'horizontal';\n            }\n        }\n        else {\n            // Only given a direction, cut roughly in half\n            if (direction !== 'vertical' && !atRecord && client.store.count) {\n                const\n                    centerY   = client._bodyRectangle.height / 2 + client.scrollable.y,\n                    centerRow = client.rowManager.getRowAt(centerY, true) ?? client.rowManager.rows[Math.ceil(client.rowManager.rows.length / 2)];\n\n                options.atRecord = client.store.getById(centerRow.id);\n            }\n\n            if (direction !== 'horizontal' && !atColumn) {\n                const bounds = Rectangle.from(client.element);\n\n                // Figure out subgrid intersecting center of grid\n                let centerX = bounds.center.x - bounds.x,\n                    subGrid = client.subGrids[client.regions[0]],\n                    i       = 0,\n                    column  = null;\n\n                while (centerX > subGrid.width) {\n                    centerX -= subGrid.width;\n                    subGrid = client.subGrids[client.regions[++i]];\n                }\n\n                // We want the center column in view, but iteration below is over all columns\n                centerX += subGrid.scrollable.x;\n\n                // Figure out column in the subgrid\n                const { visibleColumns } = subGrid.columns;\n                let x = 0, j = 0;\n                while (x < centerX && j < visibleColumns.length) {\n                    column = visibleColumns[j++];\n                    x += column.element.offsetWidth;\n                }\n\n                options.atColumn = column;\n            }\n        }\n\n        return options;\n    }\n\n    // Create element to contain the splits, it \"both\" mode it will hold a top container and a bottom container.\n    // In single mode, it will hold the splits + splitters directly.\n    createSplitContainer({ direction }) {\n        const\n            { client }  = this,\n            { element } = client;\n\n        return this.splitContainer = DomHelper.createElement({\n            parent    : element.parentElement,\n            className : {\n                'b-split-container'      : 1,\n                [`b-split-${direction}`] : 1,\n                'b-rtl'                  : client.rtl\n            },\n            style : {\n                width  : element.style.width,\n                height : element.style.height\n            },\n            children : [\n                // Split in one dir, use original as first child\n                direction !== 'both' && element,\n                // Split in both directions, make two sub-containers and put original in first\n                direction === 'both' && {\n                    className : 'b-split-top',\n                    children  : [\n                        element\n                    ]\n                },\n                direction === 'both' && {\n                    className : 'b-split-bottom'\n                }\n            ]\n        });\n    }\n\n    // Make the headers of all splits same height. Since headers shrinkwrap, they might differ depending on which\n    // subgrids was cloned to each split\n    syncHeaderHeights() {\n        let maxHeaderHeight = 0;\n\n        // Find tallest header\n        for (const split of this.subViews) {\n            split.eachSubGrid(subGrid => {\n                if (subGrid.header.height > maxHeaderHeight) {\n                    maxHeaderHeight = subGrid.header.height;\n                }\n            });\n        }\n\n        // Apply its height to all headers\n        for (const split of this.subViews) {\n            split.eachSubGrid(subGrid => {\n                subGrid.header.height = maxHeaderHeight;\n            });\n        }\n    }\n\n    // Clones can be created with correct subgrids, in the original we might instead need to hide some when splitting\n    // in a region that is not the last one (locked for example)\n    toggleOriginalSubGrids(options) {\n        const\n            me          = this,\n            { client }  = me,\n            { regions } = client;\n\n        // Split at a column with multiple regions\n        if (options.atColumn && regions.length > 1) {\n            const\n                subGridIndex = regions.indexOf(options.atColumn.region),\n                // Always process the original\n                splits = [client];\n\n            // And the bottom left one in a four way split\n            if (options.direction === 'both') {\n                splits.push(me.subViews[2]);\n            }\n\n            for (const split of splits) {\n                // Hide regions to the right of the split in the original\n                if (subGridIndex + 1 < regions.length) {\n                    const isOriginal = split === client;\n\n                    // Leftmost subgrid to keep visible\n                    const subGrid = split.subGrids[regions[subGridIndex]];\n\n                    // It won't need a splitter when succeeding subgrids are hidden\n                    subGrid.hideSplitter();\n                    isOriginal && me.restorers.push(() => subGrid.showSplitter());\n\n                    // Force flex to fill space left by hiding succeeding subgrids\n                    if (!subGrid.flex) {\n                        // Don't affect other splits\n                        client.inForEachOther = true;\n                        subGrid.flex = 1;\n                        client.inForEachOther = false;\n\n                        isOriginal && me.restorers.push(() => {\n                            subGrid.flex = null;\n                            subGrid.width = subGrid._initialWidth;\n                        });\n                    }\n\n                    // Hide succeeding subgrids\n                    for (let i = subGridIndex + 1; i < regions.length; i++) {\n                        const subGrid = split.subGrids[regions[i]];\n                        subGrid.hide();\n\n                        isOriginal && me.restorers.push(() => {\n                            subGrid.show();\n                        });\n                    }\n\n                    // Only one subgrid remains visible, use its width as splits width\n                    if (regions.length === 2) {\n                        split._initialWidth = split.element.style.width;\n                        split._initialFlex = split.flex;\n\n                        split.width = subGrid._initialWidth;\n\n                        isOriginal && me.restorers.push(() => {\n                            if (split._initialFlex !== null) {\n                                split.flex = split._initialFlex;\n                            }\n                            else if (split._initialWidth !== null) {\n                                split.width = split._initialWidth;\n                            }\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Split the grid into two or four parts.\n     *\n     * - Splits into two when passed `direction : 'vertical'`, `direction : 'horizontal'` or `atColumn` or `atRecord`.\n     * - Splits into four when passed `direction : 'both'` or `atColumn` and `atRecord`.\n     *\n     * ```javascript\n     * // Split horizontally (at the row in the center of the grid)\n     * await grid.split({ direction : 'horizontal' });\n     *\n     * // Split both ways by a specific column and record\n     * await grid.split({\n     *    atRecord : grid.store.getById(10),\n     *    atColumn : grid.columns.get('city')\n     * });\n     * ```\n     *\n     * To return to a single grid, call {@link #function-unsplit}.\n     *\n     * Note that this function is callable directly on the grid instance.\n     *\n     * @param {Object} [options] Split options\n     * @param {'vertical'|'horizontal'|'both'} [options.direction] Split direction, 'vertical', 'horizontal' or 'both'.\n     * Not needed when passing `atColumn` or `atRecord`.\n     * @param {Grid.column.Column} [options.atColumn] Column to split at\n     * @param {Core.data.Model} [options.atRecord] Record to split at\n     * @returns {Promise} Resolves when split is complete, and subviews are scrolled to the correct position.\n     * @async\n     * @on-owner\n     * @category Common\n     */\n    async split(options = {}) {\n        const\n            me         = this,\n            { client } = me;\n\n        // Can't split a split\n        if (client.splitFrom) {\n            return;\n        }\n\n        if (me.isSplit) {\n            await me.unsplit(true);\n        }\n\n        const\n            { rtl }                           = client,\n            { atRecord, atColumn, direction } = me.processOptions(options);\n\n        let { splitX, remainingWidth } = options,\n            splitY                     = null,\n            remainingHeight            = null;\n\n        if (atRecord) {\n            await client.scrollRowIntoView(atRecord);\n\n            const row = client.getRowFor(atRecord);\n            if (!row) {\n                throw new Error(`Could not find row for record ${atRecord.id}`);\n            }\n\n            splitY = Rectangle.from(row.cells[0], client.element).bottom;\n            remainingHeight = Rectangle.from(client.element).height - splitY;\n        }\n\n        if (atColumn && !splitX) {\n            splitX = Rectangle.from(atColumn.element, client.element).getEnd(rtl);\n            remainingWidth = Rectangle.from(client.element).width - splitX - DomHelper.scrollBarWidth;\n\n            if (rtl) {\n                const x = splitX;\n                splitX = remainingWidth + DomHelper.scrollBarWidth;\n                remainingWidth = x - DomHelper.scrollBarWidth;\n            }\n        }\n\n        const\n            scrollPromises        = [],\n            splitContainer        = me.createSplitContainer(options),\n            { visibleColumns }    = client.columns,\n            nextColumn            = atColumn ? visibleColumns[visibleColumns.indexOf(atColumn) + 1] : null,\n            nextRecord            = atRecord ? client.store.getNext(atRecord) : null;\n\n        client.eachSubGrid(subGrid => subGrid._initialWidth = subGrid.width);\n\n        if (direction !== 'both') {\n            const cloneConfig = {\n                flex   : `0 0 ${(splitY != null ? remainingHeight : remainingWidth) - splitterWidth}px`,\n                height : null\n            };\n\n            // Horizontal or vertical, only needs one splitter and one clone\n            const [, clone] = me.widgets = [\n                new Splitter({ appendTo : splitContainer }),\n                me.cloneClient(splitContainer, direction === 'vertical' ? 1 : 0, options, cloneConfig)\n            ];\n\n            if (splitX != null) {\n                // It does not like being thrown around in DOM and resized when scrolled, fix up\n                client.renderRows();\n\n                // Don't bother scrolling here if given a date, Schedulers feature handles that\n                if (!options.atDate) {\n                    scrollPromises.push(client.scrollColumnIntoView(atColumn, endScrollOptions));\n                    nextColumn && scrollPromises.push(clone.scrollColumnIntoView(nextColumn, startScrollOptions));\n                }\n            }\n\n            if (splitY != null) {\n                // Always have an atRecord to split at\n                scrollPromises.push(clone.scrollRowIntoView(nextRecord, startScrollOptions));\n            }\n\n            client.element.classList.add('b-split-start');\n            clone.element.classList.add('b-split-end');\n\n            // Sync scrolling\n            client.scrollable.addPartner(clone.scrollable, {\n                x : direction === 'horizontal',\n                y : direction !== 'horizontal'\n            });\n        }\n        else {\n            const rightConfig = {\n                flex : `0 0 ${remainingWidth - splitterWidth}px`\n            };\n\n            splitContainer.lastElementChild.style.flex = `0 0 ${remainingHeight - splitterWidth}px`;\n\n            // Both directions, 3 splitters (one horizontal with full span, two vertical halves) and 3 clones\n            me.widgets = [\n                new Splitter({ insertBefore : splitContainer.lastElementChild }), // Full horizontal\n                me.topSplitter = new Splitter({ appendTo : splitContainer.firstElementChild }), // Top vertical\n                me.cloneClient(splitContainer.firstElementChild, 1, options, rightConfig), // Top right\n                me.cloneClient(splitContainer.lastElementChild, 0, options), // Bottom left\n                me.bottomSplitter = new Splitter({ appendTo : splitContainer.lastElementChild }), // Bottom vertical\n                me.cloneClient(splitContainer.lastElementChild, 2, options, rightConfig) // Bottom right\n            ];\n\n            const\n                topLeft     = client,\n                topRight    = me.widgets[2],\n                bottomLeft  = me.widgets[3],\n                bottomRight = me.widgets[5];\n\n            topLeft.element.classList.add('b-split-top-start');\n            topRight.element.classList.add('b-split-top-end');\n            bottomLeft.element.classList.add('b-split-bottom-start');\n            bottomRight.element.classList.add('b-split-bottom-end');\n\n            if (splitX != null) {\n                // It does not like being thrown around in DOM and resized when scrolled, fix up\n                topLeft.renderRows();\n                bottomLeft.renderRows();\n\n                // Don't bother scrolling here if given a date, Schedulers feature handles that\n                if (atColumn && !options.atDate) {\n                    scrollPromises.push(client.scrollColumnIntoView(atColumn, endScrollOptions));\n                    nextColumn && scrollPromises.push(topRight.scrollColumnIntoView(nextColumn, startScrollOptions));\n                }\n            }\n            if (splitY != null) {\n                scrollPromises.push(\n                    bottomLeft.scrollRowIntoView(nextRecord, startScrollOptions),\n                    bottomRight.scrollRowIntoView(nextRecord, startScrollOptions)\n                );\n            }\n\n            // Sync scrolling\n            topLeft.scrollable.addPartner(topRight.scrollable, 'y');\n            topLeft.scrollable.addPartner(bottomLeft.scrollable, 'x');\n            topRight.scrollable.addPartner(bottomRight.scrollable, 'x');\n            bottomLeft.scrollable.addPartner(bottomRight.scrollable, 'y');\n\n            // Set up vertical splitter sync\n            me.topSplitter.ion({\n                splitterMouseDown : 'onSplitterMouseDown',\n                drag              : 'onSplitterDrag',\n                drop              : 'onSplitterDrop',\n                thisObj           : me\n            });\n\n            me.bottomSplitter.ion({\n                splitterMouseDown : 'onSplitterMouseDown',\n                drag              : 'onSplitterDrag',\n                drop              : 'onSplitterDrop',\n                thisObj           : me\n            });\n        }\n\n        me.subViews = [client, ...me.widgets.filter(w => w.isGridBase)];\n\n        me.toggleOriginalSubGrids(options);\n\n        me.syncHeaderHeights();\n\n        me._splitOptions = options;\n\n        await Promise.all(scrollPromises);\n\n        // Moving in DOM does not seem to trigger resize, do it manually\n        const bounds = Rectangle.from(client.element);\n        client.onInternalResize(client.element, bounds.width, bounds.height);\n\n        client.eachSubGrid(subGrid => {\n            const subGridBounds = Rectangle.from(subGrid.element);\n            subGrid.onInternalResize(subGrid.element, subGridBounds.width, subGridBounds.height);\n        });\n\n        // If scrolled, the original element gets out of sync when moved around in DOM\n        client.scrollable.x += 0.5;\n        client.scrollable.y += 0.5;\n\n        me.startSyncingColumns();\n\n        /**\n         * Fires when splitting the Grid.\n         * @event split\n         * @param {Grid.view.GridBase[]} subViews The sub views created by the split\n         * @param {Object} options The options passed to the split call\n         * @param {'horizontal'|'vertical'|'both'} options.direction The direction of the split\n         * @param {Grid.column.Column} options.atColumn The column to split at\n         * @param {Core.data.Model} options.atRecord The record to split at\n         * @on-owner\n         */\n        client.trigger('split', { subViews : me.subViews, options });\n\n        return me.subViews;\n    }\n\n    /**\n     * Remove splits, returning to a single grid.\n     *\n     * Note that this function is callable directly on the grid instance.\n     *\n     * @on-owner\n     * @async\n     * @category Common\n     */\n    async unsplit(silent = false) {\n        const\n            me          = this,\n            { client }  = me,\n            { element } = client;\n\n        if (me.isSplit) {\n            me.stopSyncingColumns();\n\n            me.widgets?.forEach(split => split.destroy());\n            me.widgets = null;\n\n            // Safari & FF looses scroll position when moving elements around in DOM,\n            // but reading it here fixes it\n            client.eachSubGrid(subGrid => subGrid.scrollable.x);\n            client.scrollable.y;\n\n            me.splitContainer.parentElement.appendChild(element);\n            me.splitContainer.remove();\n            me.splitContainer = null;\n\n            // Reset any size applied by splitter\n            element.style.flexBasis = element.style.flexGrow = '';\n            element.classList.remove('b-split-top-start', 'b-split-start');\n\n            me.subViews.length = 0;\n\n            if (!me.isDestroying) {\n                // We have been pretty violent with the DOM, so force a repaint of rows\n                client.renderRows();\n\n                me.unsplitCleanup();\n\n                for (const restorer of me.restorers) {\n                    restorer();\n                }\n\n                me.restorers.length = 0;\n\n                // Ugly, but FF needs a couple of frames to not lose scroll position if we are splitting again\n                await AsyncHelper.animationFrame();\n                await AsyncHelper.animationFrame();\n\n                if (me.isDestroyed) {\n                    return;\n                }\n\n                /**\n                 * Fires when un-splitting the Grid.\n                 * @event unsplit\n                 * @on-owner\n                 */\n                !silent && client.trigger('unsplit');\n\n                me._splitOptions = null;\n            }\n        }\n    }\n\n    unsplitCleanup() {}\n\n    //endregion\n\n    //region Context menu\n\n    populateCellMenu({ record, column, items }) {\n        const\n            me            = this,\n            { isSplit }   = me,\n            { splitFrom } = me.client;\n\n        if (!me.disabled) {\n            items.splitGrid = {\n                text        : 'L{split}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-split-vertical',\n                weight      : 500,\n                separator   : true,\n                hidden      : isSplit || splitFrom,\n                menu        : {\n                    splitHorizontally : {\n                        text        : 'L{horizontally}',\n                        icon        : 'b-icon b-icon-split-horizontal',\n                        localeClass : me,\n                        weight      : 100,\n                        onItem() {\n                            me.split({ atRecord : record });\n                        }\n                    },\n                    splitVertically : {\n                        text        : 'L{vertically}',\n                        icon        : 'b-icon b-icon-split-vertical',\n                        localeClass : me,\n                        weight      : 200,\n                        onItem() {\n                            me.split({ atColumn : column });\n                        }\n                    },\n                    splitBoth : {\n                        text        : 'L{both}',\n                        icon        : 'b-icon b-icon-split-both',\n                        localeClass : me,\n                        weight      : 300,\n                        onItem() {\n                            me.split({ atColumn : column, atRecord : record });\n                        }\n                    }\n                }\n            };\n\n            items.unsplitGrid = {\n                text        : 'L{unsplit}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-clear',\n                hidden      : !(isSplit || splitFrom),\n                weight      : 400,\n                separator   : true,\n                onItem() {\n                    (splitFrom || me).unsplit();\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    //region Syncing columns\n\n    startSyncingColumns() {\n        for (const subView of this.subViews) {\n            subView.columns.ion({\n                name    : 'columns',\n                change  : 'onColumnsChange',\n                thisObj : this\n            });\n        }\n    }\n\n    stopSyncingColumns() {\n        this.detachListeners('columns');\n    }\n\n    onColumnsChange({ source, isMove, action, /*index, */parent, records, changes }) {\n        const me = this;\n\n        if (!me.#ignoreColumnChanges) {\n            me.#ignoreColumnChanges = true;\n\n            for (const clone of me.subViews) {\n                const { columns } = clone;\n\n                if (source !== columns) {\n                    // Special handling for column moved from subgrid not in split to subgrid in split\n                    if (action === 'update' && changes.region && Object.keys(changes).length === 1) {\n                        // Move from non-existing to existing, add\n                        if (!columns.getById(records[0].id)) {\n                            const\n                                [column]     = records,\n                                targetParent = columns.getById(me.$before.parent.id) ?? columns.rootNode,\n                                targetBefore = me.$before.id !== null && columns.getById(me.$before.id);\n\n                            targetParent.insertChild(column.data, targetBefore);\n                        }\n                        // Vice versa, remove\n                        else {\n                            columns.remove(records[0].id);\n                        }\n\n                        me.$before = null;\n                    }\n                    else if (!isMove?.[records[0].id]) {\n                        if (action === 'add') {\n                            // Only add columns that are in a subgrid that is visible in the clone\n                            const relevantColumns = records.filter(column => clone.getSubGridFromColumn(column));\n                            columns.add(me.cloneColumns(relevantColumns));\n                        }\n                        else {\n                            columns.applyChangesFromStore(source);\n                        }\n                    }\n                    // We have to handle move separately, since it does not leave the column store modified (in any\n                    // meaningful way)\n                    else if (action === 'add') {\n                        const\n                            sourceColumn = records[0],\n                            sourceBefore = sourceColumn.nextSibling,\n                            targetColumn = columns.getById(sourceColumn.id); //columns.allRecords.find(r => r.id === sourceColumn.id);\n\n                        // When splitting a multi-region grid, not all columns are present in all splits. But, it might\n                        // be moved from locked to normal (etc.) in original, but split is not showing source region. In\n                        // that case, we handle it on the region update - and must store details here\n                        if (!targetColumn) {\n                            me.$before = {\n                                id : sourceBefore?.id,\n                                parent\n                            };\n                            me.#ignoreColumnChanges = false;\n                            return;\n                        }\n\n                        if (sourceColumn.meta.isSelectionColumn) {\n                            me.#ignoreColumnChanges = false;\n                            return;\n                        }\n                        const\n                            targetParent = columns.getById(parent.id) ?? columns.rootNode,\n                            targetBefore = sourceBefore && columns.getById(sourceBefore.id);\n\n                        targetParent.insertChild(targetColumn, targetBefore);\n                    }\n\n                    columns.commit();\n                }\n            }\n\n            source.commit();\n\n            me.#ignoreColumnChanges = false;\n        }\n    }\n\n    //endregion\n\n    //region Syncing splitters\n\n    getOtherSplitter(splitter) {\n        return splitter === this.topSplitter ? this.bottomSplitter : this.topSplitter;\n    }\n\n    onSplitterMouseDown({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseDown(event);\n        }\n    }\n\n    onSplitterDrag({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseMove(event);\n        }\n    }\n\n    onSplitterDrop({ source, event }) {\n        if (!event.handled) {\n            event.handled = true;\n            this.getOtherSplitter(source).onMouseUp(event);\n        }\n    }\n\n    //endregion\n\n    //region Relaying property changes & events\n\n    // Relay relevant config changes to other splits\n    afterConfigChange({ name, value }) {\n        if (this.isSplit && this.relayProperties[name]) {\n            this.syncSplits(split => {\n                split[name] = value;\n            });\n        }\n    }\n\n    // Sync listeners added at runtime to other splits\n    afterAddListener(eventName, listener) {\n        if (this.isSplit && !listener.$internal && !ignoreListeners[eventName]) {\n            // Not using `ion()` on purpose, these are app listeners\n            // eslint-disable-next-line bryntum/no-on-in-lib\n            this.syncSplits(split => split.on(eventName, listener));\n        }\n    }\n\n    afterRemoveListener(eventName, listener) {\n        if (!listener.$internal) {\n            this.syncSplits(split => split.un(eventName, listener));\n        }\n    }\n\n    //endregion\n\n    //region Util\n\n    // Call a fn for all splits except the on this fn is called on\n    forEachOther(fn) {\n        const original = this.client.splitFrom || this.client;\n\n        if (original.features.split.enabled && !original.inForEachOther) {\n            // Protect against infinite recursion by being called from the fn\n            original.inForEachOther = true;\n\n            for (const view of original.subViews) {\n                if (view !== this.client) {\n                    fn(view);\n                }\n            }\n\n            original.inForEachOther = false;\n        }\n    }\n\n    syncSplits(fn) {\n        this.forEachOther(fn);\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Split, false);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport Base from '../../Core/Base.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/util/TableExporter\n */\n\n/**\n * This class transforms grid component into two arrays: rows and columns. Columns array contains objects with\n * meta information about column: field name, column name, width and type of the rendered value, rows array contains\n * arrays of cell values.\n *\n * ```javascript\n * const exporter = new TableExporter({ target : grid });\n * exporter.export()\n *\n * // Output\n * {\n *     columns : [\n *         { field : 'name',     value : 'First name', type : 'string',  width : 100 },\n *         { field : 'surname',  value : 'Last name',  type : 'string',  width : 100 },\n *         { field : 'age',      value : 'Age',        type : 'number',  width : 50  },\n *         { field : 'married',  value : 'Married',    type : 'boolean', width : 50  },\n *         { field : 'children', value : 'Children',   type : 'object',  width : 100 }\n *     ],\n *     rows : [\n *         ['Michael', 'Scott',   40, false, []],\n *         ['Jim',     'Halpert', 30, true,  [...]]\n *     ]\n * }\n * ```\n *\n * ## How data is exported\n *\n * Exporter iterates over store records and processes each record for each column being exported. Exporter uses same\n * approach to retrieve data as column: reading record field, configured on the column, or calling renderer function\n * if one is provided. This means data can be of any type: primitives or objects. So children array in the above code\n * snippet may contain instances of child record class.\n *\n * ## Column renderers\n *\n * Column renderers are commonly used to style the cell, or even render more HTML into it, like {@link Grid.column.WidgetColumn}\n * does. This is not applicable in case of export. Also, given grid uses virtual rendering (only renders visible rows) and\n * exporter iterates over all records, not just visible ones, we cannot provide all data necessary to the renderer. Some\n * arguments, like cellElement and row, wouldn't exist. Thus renderer is called with as much data we have: value,\n * record, column, grid, other {@link Grid.column.Column#config-renderer documented arguments} would be undefined.\n *\n * Exporter adds one more flag for renderer function: isExport. When renderer receives this flag it knows\n * data is being exported and can skip DOM work to return simpler value. Below snippet shows simplified code of the\n * widget column handling export:\n *\n * ```javascript\n * renderer({ isExport }) {\n *     if (isExport) {\n *         return null;\n *     }\n *     else {\n *         // widget rendering routine\n *         ...\n *     }\n * }\n * ```\n *\n * ## Column types\n *\n * Column types are not actually a complete list of JavaScript types (you can get actual type of the cell using typeof) it\n * is a simple and helpful meta information.\n *\n * Available column types are:\n *  * string\n *  * number\n *  * boolean\n *  * date\n *  * object\n *\n * Everything which is not primitive like string/number/bool (or a date) is considered an object. This includes null, undefined,\n * arrays, classes, functions etc.\n *\n * ## Getting column type\n *\n * If existing grid column is used, column type first would be checked with {@link Grid.column.Column#config-exportedType exportedType}\n * config. If exportedType is undefined or column does not exist in grid, type is read from a record field definition.\n * If the field is not defined, object type is used.\n *\n * Configuring exported type:\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *         {\n *             name         : 'Name',\n *             field        : 'name',\n *             exportedType : 'object',\n *             renderer     : ({ value, isExport }) => {\n *                 if (isExport) {\n *                     return { value }; // return value wrapped into object\n *                 }\n *             }\n *     ]\n * })\n * ```\n *\n * @extends Core/Base\n */\nexport default class TableExporter extends Base {\n    static get defaultConfig() {\n        return {\n            /**\n             * Target grid instance to export data from\n             * @config {Grid.view.Grid} target\n             */\n            target : null,\n\n            /**\n             * Specifies a default column width if no width specified\n             * @config {Number} defaultColumnWidth\n             * @default\n             */\n            defaultColumnWidth : 100,\n\n            /**\n             * Set to false to export date as it is displayed by Date column formatter\n             * @config {Boolean}\n             * @default\n             */\n            exportDateAsInstance : true,\n\n            /**\n             * If true and the grid is grouped, shows the grouped value in the first column. True by default.\n             * @config {Boolean} showGroupHeader\n             * @default\n             */\n            showGroupHeader : true,\n\n            /**\n             * An array of column configuration objects used to specify column widths, header text, and data fields to get the data from.\n             * 'field' config is required. If 'text' is missing, it will read it from the grid column or the 'field' config.\n             * If 'width' is missing, it will try to get it retrieved from the grid column or {@link #config-defaultColumnWidth} config.\n             * If no columns provided the config will be generated from the grid columns.\n             *\n             * For example:\n             * ```javascript\n             * columns : [\n             *     'firstName', // field\n             *     'age', // field\n             *     { text : 'Starts', field : 'start', width : 140 },\n             *     { text : 'Ends', field : 'finish', width : 140 }\n             * ]\n             * ```\n             *\n             * @config {String[]|Object[]} columns\n             * @default\n             */\n            columns : null,\n\n            /**\n             * When true and tree is being exported, node names are indented with {@link #config-indentationSymbol}\n             * @config {Boolean}\n             * @default\n             */\n            indent : true,\n\n            /**\n             * This symbol (four spaces by default) is used to indent node names when {@link #config-indent} is true\n             * @config {String}\n             * @default\n             */\n            indentationSymbol : '\\u00A0\\u00A0\\u00A0\\u00A0'\n        };\n    }\n\n    /**\n     * Exports grid data according to provided config\n     * @param {Object} config\n     * @returns {{ rows : Object[][], columns : Object[] }}\n     */\n    export(config = {}) {\n        const me = this;\n\n        config = ObjectHelper.assign({}, me.config, config);\n\n        me.normalizeColumns(config);\n\n        return me.generateExportData(config);\n    }\n\n    generateExportData(config) {\n        const\n            me      = this,\n            columns = me.generateColumns(config),\n            rows    = me.generateRows(config);\n\n        return { rows, columns };\n    }\n\n    normalizeColumns(config) {\n        // In case columns are provided we need to use normalized config. If those are not provided, we are going\n        // to use real columns, possible invoking renderers (we need to pass column instance to the renderer to\n        // avoid breaking API too much)\n        const columns = config.columns || this.target.columns.visibleColumns.filter(rec => rec.exportable !== false);\n\n        config.columns = columns.map(col => {\n            if (typeof col === 'string') {\n                return this.target.columns.find(column => column.field === col) || { field : col };\n            }\n            else {\n                return col;\n            }\n        });\n    }\n\n    generateColumns(config) {\n        return config.columns.map(col => this.processColumn(col, config));\n    }\n\n    generateRows(config) {\n        const { columns, rows } = config;\n\n        if (columns.length === 0 || rows?.length === 0) {\n            return [];\n        }\n\n        const\n            me         = this,\n            { target } = me;\n\n        return (rows || target.store)\n            // although columns are taken from config, it is convenient to provide them as a separate argument\n            // because that allows to override set of columns to process\n            .map(record => me.processRecord(record, columns, config))\n            // filter out empty rows\n            .filter(cells => cells?.length);\n    }\n\n    getColumnType(column, store = this.target.store) {\n        let result = column.exportedType || 'object';\n\n        if (column.exportedType === undefined) {\n            if (column.field) {\n                const fieldDefinition = store.modelClass.getFieldDefinition(column.field);\n\n                if (fieldDefinition && fieldDefinition.type !== 'auto') {\n                    result = fieldDefinition.type;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Extracts export data from the column instance\n     * @param {Grid.column.Column} column\n     * @param {Object} config\n     * @private\n     * @returns {Object}\n     */\n    processColumn(column, config) {\n        const\n            me                     = this,\n            { target }             = me,\n            { defaultColumnWidth } = config;\n\n        let { field, text : value, width, minWidth } = column;\n\n        // If column is not configured with field, field is generated (see Column.js around line 514).\n        // In export we want empty string there\n        if (!(field in target.store.modelClass.fieldMap)) {\n            field = '';\n        }\n\n        // If name or width is missing try to retrieve them from the grid column and the field, or use default values.\n        if (!value || !width) {\n            const gridColumn = target.columns.find(col => col.field === field);\n\n            if (!value) {\n                value = gridColumn && gridColumn.text || field;\n            }\n\n            // null or undefined\n            if (width == null) {\n                width = gridColumn && gridColumn.width || defaultColumnWidth;\n            }\n        }\n\n        width = Math.max(width || defaultColumnWidth, minWidth || defaultColumnWidth);\n\n        return { field, value, width, type : me.getColumnType(column) };\n    }\n\n    /**\n     * Extracts export data from the record instance reading supplied column configs\n     * @param {Core.data.Model|null} record If null is passed, all columns will be filled with empty strings\n     * @param {Grid.column.Column[]} columns\n     * @param {Object} config\n     * @private\n     * @returns {Object[]}\n     */\n    processRecord(record, columns, config) {\n        const\n            { target } = this,\n            {\n                showGroupHeader,\n                indent,\n                indentationSymbol\n            }  = config;\n\n        let cells;\n\n        if (!record) {\n            cells = columns.map(() => '');\n        }\n        else if (record.isSpecialRow) {\n            if (showGroupHeader && record.meta.groupRowFor) {\n                cells = columns.map(column => {\n                    return target.features.group.buildGroupHeader({\n                        // Create dummy element to get html from\n                        cellElement : DomHelper.createElement(),\n                        grid        : target,\n                        record,\n                        column\n                    });\n                });\n            }\n        }\n        else {\n            cells = columns.map(column => {\n                let value = record.getValue(column.field);\n                const useRenderer = column.renderer || column.defaultRenderer;\n\n                if (useRenderer && !(value && column.isDateColumn && config.exportDateAsInstance)) {\n                    value = useRenderer.call(column, {\n                        value,\n                        record,\n                        column,\n                        grid     : target,\n                        isExport : true\n                    });\n                }\n\n                if (indent && column.tree) {\n                    value = `${indentationSymbol.repeat(record.childLevel)}${value}`;\n                }\n\n                return value;\n            });\n        }\n\n        return cells;\n    }\n}\n","export default class BooleanUnicodeSymbol {\n    constructor(value) {\n        this._value = value;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    toString() {\n        return Boolean(this.value) ? '✓' : '';\n    }\n}\n","import GridFeatureManager from '../GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport TableExporter from '../../util/TableExporter.js';\nimport BooleanUnicodeSymbol from '../../util/BooleanUnicodeSymbol.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/experimental/ExcelExporter\n */\n\n/**\n * **NOTE**: This class requires a 3rd party library to operate.\n *\n * A feature that allows exporting Grid data to Excel without involving the server. It uses {@link Grid.util.TableExporter}\n * class as data provider, [zipcelx library](https://www.npmjs.com/package/zipcelx)\n * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)\n * and [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n * Zipcelx should be either in global scope (window) or can be provided with {@link #config-zipcelx} config.\n *\n * ```html\n * // Global scope\n * <script src=\"zipcelx.js\"></script>\n * ```\n *\n * ```javascript\n * // importing from package\n * import zipcelx from 'zipcelx';\n *\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             zipcelx\n *         }\n *     }\n * })\n * ```\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             // Choose the date format for date fields\n *             dateFormat : 'YYYY-MM-DD HH:mm',\n *\n *             exporterConfig : {\n *                 // Choose the columns to include in the exported file\n *                 columns : ['name', 'role'],\n *                 // Optional, export only selected rows\n *                 rows    : grid.selectedRecords\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * And how to call it:\n *\n * ```javascript\n * grid.features.excelExporter.export({\n *     filename : 'Export',\n *     exporterConfig : {\n *         columns : [\n *             { text : 'First Name', field : 'firstName', width : 90 },\n *             { text : 'Age', field : 'age', width : 40 },\n *             { text : 'Starts', field : 'start', width : 140 },\n *             { text : 'Ends', field : 'finish', width : 140 }\n *         ]\n *     }\n * })\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/exporttoexcel\n * @classtype excelExporter\n * @feature\n */\nexport default class ExcelExporter extends InstancePlugin {\n    static get $name() {\n        return 'ExcelExporter';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Name of the exported file\n             * @config {String} filename\n             * @default\n             */\n            filename : null,\n\n            /**\n             * Defines how dates in a cell will be formatted\n             * @config {String} dateFormat\n             * @default\n             */\n            dateFormat : 'YYYY-MM-DD',\n\n            /**\n             * Exporter class to use as a data provider. {@link Grid.util.TableExporter} by default.\n             * @config {Grid.util.TableExporter}\n             * @typings {typeof TableExporter}\n             * @default\n             */\n            exporterClass : TableExporter,\n\n            /**\n             * Configuration object for {@link #config-exporterClass exporter class}.\n             * @config {Object}\n             */\n            exporterConfig : null,\n\n            /**\n             * Reference to zipcelx library. If not provided, exporter will look in the global scope.\n             * @config {Object}\n             */\n            zipcelx : null,\n\n            /**\n             * If this config is true, exporter will convert all empty values to ''. Empty values are:\n             * * undefined, null, NaN\n             * * Objects/class instances that do not have toString method defined and are stringified to [object Object]\n             * * functions\n             * @config {Boolean}\n             */\n            convertEmptyValueToEmptyString : true\n        };\n    }\n\n    processValue(value) {\n        if (\n            value === undefined ||\n            value === null ||\n            Number.isNaN(value) ||\n            typeof value === 'function' ||\n            (typeof value === 'object' && String(value) === '[object Object]')\n        ) {\n            return '';\n        }\n        else {\n            return value;\n        }\n    }\n\n    generateExportData(config) {\n        const\n            me                = this,\n            { rows, columns } = me.exporter.export(config.exporterConfig);\n\n        return {\n            rows : rows.map(row => {\n                return row.map((value, index) => {\n                    if (value instanceof Date) {\n                        value = DateHelper.format(value, config.dateFormat);\n                    }\n                    else if (typeof value === 'boolean') {\n                        value = new BooleanUnicodeSymbol(value);\n                    }\n\n                    if (me.convertEmptyValueToEmptyString) {\n                        value = me.processValue(value);\n                    }\n\n                    const type = columns[index]?.type === 'number' ? 'number' : 'string';\n\n                    return { value, type };\n                });\n            }),\n            columns : columns.map(col => {\n                let { field, value, width, type } = col;\n\n                // when number column is exported with zipcelx, excel warns that sheet is broken and asks for repair\n                // repair works, but having error on open doesn't look acceptable\n                // type = type === 'number' ? 'number' : 'string';\n                type = 'string';\n\n                return { field, value, width, type };\n            })\n        };\n    }\n\n    /**\n     * Generate and download an Excel file (.xslx).\n     * @param {Object} config Optional configuration object, which overrides initial settings of the feature/exporter.\n     * @param {String} [config.filename] Name of the exported file\n     * @param {String} [config.dateFormat] Defines how dates in a cell will be formatted\n     * @param {String[]|Object[]} [config.columns] An array of column configuration objects\n     * @param {Core.data.Model[]} [config.rows] An array of records to export\n     * @returns {Promise} Promise that resolves when the export is completed\n     */\n    export(config = {}) {\n        const\n            me      = this,\n            zipcelx = me.zipcelx || globalThis.zipcelx;\n\n        if (!zipcelx) {\n            throw new Error('ExcelExporter: \"zipcelx\" library is required');\n        }\n\n        if (me.disabled) {\n            return;\n        }\n\n        config = ObjectHelper.assign({}, me.config, config);\n\n        if (!config.filename) {\n            config.filename = me.client.$$name;\n        }\n\n        const\n            { filename }      = config,\n            { rows, columns } = me.generateExportData(config);\n\n        return zipcelx({\n            filename,\n            sheet : {\n                data : [columns].concat(rows),\n                cols : columns\n            }\n        });\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        if (!this.zipcelx) {\n            if (typeof zipcelx !== 'undefined') {\n                this.zipcelx = globalThis.zipcelx;\n            }\n        }\n    }\n\n    get exporter() {\n        const me = this;\n\n        return me._exporter || (me._exporter = me.exporterClass.new({ target : me.client }, me.exporterConfig));\n    }\n}\n\nGridFeatureManager.registerFeature(ExcelExporter, false, 'Grid');\n"],"names":["ColorColumn","Column","$name","type","fields","name","defaultValue","defaults","align","editor","construct","_me$colors","arguments","me","grid","menu","Menu","owner","rootElement","autoShow","anchor","internalListeners","hide","picker","navigator","activeItem","_editingRecord","items","Object","assign","colorEditorType","ref","addNoColorItem","colorSelected","color","_me$_editingRecord","set","field","colors","length","applyValue","useProp","value","isConstructing","widgetMap","list","renderer","colorClass","backgroundColor","colorClassName","getColorClassName","className","style","onCellClick","record","target","classList","contains","readOnly","isSpecialRow","get","deselectAll","select","refresh","showBy","ColumnStore","registerColumnType","_$name","GroupSummary","SummaryFormatter","InstancePlugin","configurable","collapseToHeader","config","features","group","Error","bindStore","store","rowManager","ion","beforeRenderRow","renderCell","prio","thisObj","detachListeners","update","doDisable","disable","updateTarget","changeTarget","ObjectHelper","assertString","useGroupFooters","disabled","isConfiguring","changeCollapseToHeader","assertBoolean","updateCollapseToHeader","pluginConfig","chain","onBeforeRenderRow","row","isGroupFooter","meta","forceInnerHTML","isGroupHeader","collapsed","eachElement","removeSummaryElements","rowEl","column","cellElement","size","isFirstColumn","rowHeight","targetsHeader","rowClasses","isSummaryTarget","height","isGrouped","clearCell","groupRecord","heightSetting","updateSummaryHtml","count","assignCls","records","groupChildren","slice","pop","html","generateHtml","groupField","groupRowFor","children","innerHTML","DomHelper","sync","firstElementChild","summaries","sum","onStoreUpdate","source","changes","groupers","find","grouper","shouldUpdate","keys","some","colField","columns","Boolean","forceFullRefresh","visibleColumns","forEach","hasSummary","refreshColumn","featureClass","GridFeatureManager","registerFeature","startScrollOptions","freeze","animate","block","endScrollOptions","splitterWidth","ignoreListeners","split","unsplit","Split","subViews","relayProperties","$config","merge","restorers","doDestroy","_disabledSplitOptions","_splitOptions","isSplit","_this$widgets","widgets","getClientConfig","appendTo","order","options","client","subGrids","regions","subGridConfigs","eachSubGrid","subGrid","region","flex","width","element","atColumn","subGridIndex","indexOf","i","ArrayHelper","remove","clientConfig","initialConfig","insertFirst","insertBefore","splitFrom","tbar","selectedRecordCollection","cloneColumns","minHeight","minWidth","appListeners","listeners","listener","$internal","direction","hideHeaders","data","flatMap","col","isSelectionColumn","map","child","headerRenderer","parentId","cloneClient","clone","constructor","add","processOptions","atRecord","centerY","_bodyRectangle","scrollable","y","centerRow","getRowAt","rows","Math","ceil","getById","id","bounds","Rectangle","from","centerX","center","x","j","offsetWidth","createSplitContainer","splitContainer","createElement","parent","parentElement","rtl","syncHeaderHeights","maxHeaderHeight","header","toggleOriginalSubGrids","splits","push","isOriginal","hideSplitter","showSplitter","inForEachOther","_initialWidth","show","_initialFlex","splitX","remainingWidth","splitY","remainingHeight","scrollRowIntoView","getRowFor","cells","bottom","getEnd","scrollBarWidth","scrollPromises","nextColumn","nextRecord","getNext","cloneConfig","Splitter","renderRows","atDate","scrollColumnIntoView","addPartner","rightConfig","lastElementChild","topSplitter","bottomSplitter","topLeft","topRight","bottomLeft","bottomRight","splitterMouseDown","drag","drop","filter","w","isGridBase","Promise","all","onInternalResize","subGridBounds","startSyncingColumns","trigger","silent","_me$widgets","stopSyncingColumns","destroy","appendChild","flexBasis","flexGrow","isDestroying","unsplitCleanup","restorer","AsyncHelper","animationFrame","isDestroyed","populateCellMenu","splitGrid","text","localeClass","icon","weight","separator","hidden","splitHorizontally","onItem","splitVertically","splitBoth","unsplitGrid","subView","change","onColumnsChange","isMove","action","targetParent","$before","rootNode","targetBefore","insertChild","relevantColumns","getSubGridFromColumn","applyChangesFromStore","sourceColumn","sourceBefore","nextSibling","targetColumn","commit","getOtherSplitter","splitter","onSplitterMouseDown","event","handled","onMouseDown","onSplitterDrag","onMouseMove","onSplitterDrop","onMouseUp","afterConfigChange","syncSplits","afterAddListener","eventName","on","afterRemoveListener","un","forEachOther","fn","original","enabled","view","TableExporter","Base","defaultConfig","defaultColumnWidth","exportDateAsInstance","showGroupHeader","indent","indentationSymbol","export","normalizeColumns","generateExportData","generateColumns","generateRows","rec","exportable","processColumn","processRecord","getColumnType","result","exportedType","undefined","fieldDefinition","modelClass","getFieldDefinition","fieldMap","gridColumn","max","buildGroupHeader","getValue","useRenderer","defaultRenderer","isDateColumn","call","isExport","tree","repeat","childLevel","BooleanUnicodeSymbol","_value","toString","ExcelExporter","filename","dateFormat","exporterClass","exporterConfig","zipcelx","convertEmptyValueToEmptyString","processValue","Number","isNaN","String","exporter","index","_columns$index","Date","DateHelper","format","globalThis","$$name","sheet","concat","cols","_exporter","new"],"mappings":"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"}