{"version":3,"file":"PdfExport.js","sources":["../../../../Grid/lib/Grid/feature/mixin/SummaryFormatter.js","../../../../Grid/lib/Grid/feature/RowReorder.js","../../../../Grid/lib/Grid/feature/Summary.js","../../../../Grid/lib/Grid/view/export/field/ExportRowsCombo.js","../../../../Grid/lib/Grid/view/export/field/ExportOrientationCombo.js","../../../../Grid/lib/Grid/view/export/ExportDialog.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js","../../../../Grid/lib/Grid/feature/export/exporter/SinglePageExporter.js","../../../../Grid/lib/Grid/feature/export/PdfExport.js"],"sourcesContent":["import Base from '../../../Core/Base.js';\n\n/**\n * @module Grid/feature/mixin/SummaryFormatter\n */\n\n/**\n * Mixin for Summary and GroupSummary that handles formatting sums.\n * @mixin\n * @private\n */\nexport default Target => class SummaryFormatter extends (Target || Base) {\n    static get $name() {\n        return 'SummaryFormatter';\n    }\n\n    /**\n     * Calculates sums and returns as a html table\n     * @param {Grid.column.Column} column Column to calculate sum for\n     * @param {Core.data.Model[]} records Records to include in calculation\n     * @param {String} cls CSS class to apply to summary table\n     * @param {Core.data.Model} groupRecord current group row record\n     * @param {String} groupField Current groups field name\n     * @param {String} groupValue Current groups value\n     * @returns {String} html content\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        const\n            store = this.store,\n            summaries = column.summaries ||\n                  (column.sum ? [{ sum : column.sum, renderer : column.summaryRenderer }] : []);\n\n        let html = `<table class=\"${cls}\">`;\n\n        summaries.forEach(config => {\n            let type = config.sum,\n                sum  = null;\n\n            if (type === true) type = 'sum';\n\n            switch (type) {\n                case 'sum':\n                case 'add':\n                    sum = store.sum(column.field, records);\n                    break;\n                case 'max':\n                    sum = store.max(column.field, records);\n                    break;\n                case 'min':\n                    sum = store.min(column.field, records);\n                    break;\n                case 'average':\n                case 'avg':\n                    sum = store.average(column.field, records);\n                    break;\n                case 'count':\n                    sum = records.length;\n                    break;\n                case 'countNotEmpty':\n                    sum = records.reduce((sum, record) => {\n                        const value = record.getValue(column.field);\n                        return sum + (value != null ? 1 : 0);\n                    }, 0);\n                    break;\n            }\n\n            if (typeof type === 'function') {\n                sum = records.reduce(type, 'seed' in config ? config.seed : 0);\n            }\n\n            if (sum !== null) {\n                const\n                    valueCls  = 'b-grid-summary-value',\n                    // optional label\n                    labelHtml = config.label\n                        ? `<td class=\"b-grid-summary-label\">${config.label}</td>`\n                        : '';\n\n                // value to display, either using renderer or as is\n                let valueHtml = config.renderer\n                        ? config.renderer({ config, sum })\n                        : sum,\n                    summaryHtml;\n\n                if (valueHtml == null) {\n                    valueHtml = '';\n                }\n\n                // no <td>s in html, wrap it (always the case when not using renderer)\n                if (!String(valueHtml).includes('<td>')) {\n                    summaryHtml = labelHtml\n                        // has label, use returned html as value cell\n                        ? `${labelHtml}<td class=\"${valueCls}\">${valueHtml}</td>`\n                        // no label, span entire table\n                        : `<td colspan=\"2\" class=\"${valueCls}\">${valueHtml}</td>`;\n                }\n                // user is in charge of giving correct formatting\n                else {\n                    summaryHtml = valueHtml;\n                }\n\n                html += `<tr>${summaryHtml}</tr>`;\n            }\n        });\n\n        return html + '</table>';\n    }\n};\n","/**\n * @module Grid/feature/RowReorder\n */\n\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * Object with information about a tree position\n * @typedef {Object} RecordPositionContext\n * @property {Core.data.Model} record Tree node\n * @property {Number} parentIndex Index among parents children\n * @property {String|Number} parentId Parent node's id\n */\n\n/**\n * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event\n * on the grid {@link Core.data.Store store}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n * This feature is **enabled** by default for Gantt.\n *\n * {@inlineexample Grid/feature/RowReorder.js}\n *\n * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled. Inside all event listeners you\n * have access a `context` object which has a `record` property (the dragged record).\n *\n * ## Validation\n * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to\n * the `index` property which is the target drop position. For trees you get access to the `parent` record and `index`,\n * where index means the child index inside the parent.\n *\n * You can also have an async finalization step using the {@link #event-gridRowBeforeDropFinalize}, for showing a\n * confirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)\n *\n * ```javascript\n * features : {\n *     rowReorder : {\n *         showGrip : true\n *     },\n *     listeners : {\n *        gridRowDrag : ({ context }) => {\n *           // Here you have access to context.insertBefore, and additionally context.parent for trees\n *        },\n *\n *        gridRowBeforeDropFinalize : async ({ context }) => {\n *           const result = await MessageDialog.confirm({\n *               title   : 'Please confirm',\n *               message : 'Did you want the row here?'\n *           });\n *\n *           // true to accept the drop or false to reject\n *           return result === MessageDialog.yesButton;\n *        }\n *    }\n * }\n * ```\n *\n * Note, that this feature uses the concept of \"insert before\" when choosing a drop point in the data. So the dropped\n * record's position is *before the visual next record's position*.\n *\n * This may look like a pointless distinction, but consider the case when a Store is filtered. The record *above* the\n * drop point may have several filtered out records below it. When unfiltered, the dropped record will be *below* these\n * because of the \"insert before\" behaviour.\n *\n * ## Behavior with multiple subgrids\n *\n * For grids with multiple subgrids, row reordering is only enabled for the first subgrid.\n *\n * NOTE: This feature cannot be used simultaneously with the `enableTextSelection` config.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/rowreordering\n * @classtype rowReorder\n * @feature\n */\nexport default class RowReorder extends Delayable(InstancePlugin) {\n    //region Events\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @preventable\n     * @event gridRowBeforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event gridRowDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @event gridRowDrag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @event gridRowBeforeDropFinalize\n     * @preventable\n     * @async\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @event gridRowDrop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model} context.record [DEPRECATED] The dragged row record\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired when a row drag operation is aborted\n     * @event gridRowAbort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    //endregion\n\n    //region Init\n\n    static $name = 'RowReorder';\n\n    static configurable = {\n        /**\n         * Set to `true` to show a grip icon on the left side of each row.\n         * @config {Boolean}\n         */\n        showGrip : null,\n\n        /**\n         * Set to `true` to only allow reordering by the {@link #config-showGrip} config\n         * @config {Boolean}\n         */\n        gripOnly : null,\n\n        /**\n         * If hovering over a parent node for this period of a time in a tree, the node will expand\n         * @config {Number}\n         */\n        hoverExpandTimeout : 1000,\n\n        /**\n         * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n         * @config {Number}\n         * @default\n         */\n        touchStartDelay : 300,\n\n        /**\n         * Enables creation of parents by dragging a row and dropping it onto a leaf row. Only works in a Grid with\n         * a tree store.\n         * @config {Boolean}\n         */\n        dropOnLeaf : false,\n\n        /**\n         * An object used to configure the internal {@link Core.helper.DragHelper} class\n         * @config {DragHelperConfig}\n         */\n        dragHelperConfig : null\n\n    };\n\n    static get deprecatedEvents() {\n        return {\n            gridRowBeforeDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrag : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrag` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowBeforeDropFinalize : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDropFinalize` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrop : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrop` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowAbort : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowAbort` event is deprecated, listen on this event on the Grid instead.'\n            }\n        };\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(...arguments);\n    }\n\n    doDestroy() {\n        this.dragHelper?.destroy();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize drag & drop (called on first paint)\n     * @private\n     */\n    init() {\n        const\n            me       = this,\n            { grid } = me;\n\n        me.dragHelper = DragHelper.new({\n            name               : 'rowReorder',\n            cloneTarget        : true,\n            dragThreshold      : 10,\n            proxyTopOffset     : 10,\n            targetSelector     : '.b-grid-row',\n            lockX              : true,\n            dragWithin         : grid.bodyContainer,\n            allowDropOutside   : true,\n            scrollManager      : grid.scrollManager,\n            outerElement       : me.targetSubGridElement,\n            touchStartDelay    : me.touchStartDelay,\n            isElementDraggable : me.isElementDraggable.bind(me),\n            monitoringConfig   : {\n                scrollables : [\n                    {\n                        element   : grid.scrollable.element,\n                        direction : 'vertical'\n                    }\n                ]\n            },\n            setXY(element, x, y) {\n                const { context } = this;\n\n                if (!context.started) {\n                    const\n                        elementRect       = Rectangle.from(context.element, this.dragWithin),\n                        pointerDownOffset = context.startPageY - globalThis.pageYOffset - context.element.getBoundingClientRect().top;\n\n                    // manually position the row a bit below the cursor\n                    y = elementRect.top + pointerDownOffset + this.proxyTopOffset;\n                }\n                DomHelper.setTranslateXY(element, x, y);\n            },\n            // Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree\n            ignoreSamePositionDrop : false,\n            createProxy(element) {\n                const\n                    clone     = element.cloneNode(true),\n                    container = document.createElement('div');\n\n                container.classList.add('b-row-reorder-proxy');\n\n                clone.removeAttribute('id');\n                // The containing element will be positioned instead, and sized using CSS\n                clone.style.transform = '';\n                clone.style.width = '';\n\n                container.appendChild(clone);\n\n                if (grid.selectedRecords.length > 1) {\n                    const clone2 = clone.cloneNode(true);\n\n                    clone2.classList.add('b-row-dragging-multiple');\n\n                    container.appendChild(clone2);\n                }\n\n                DomHelper.removeClsGlobally(container, 'b-selected', 'b-hover', 'b-focused');\n\n                return container;\n            },\n\n            internalListeners : {\n                beforedragstart : 'onBeforeDragStart',\n                dragstart       : 'onDragStart',\n                drag            : 'onDrag',\n                drop            : 'onDrop',\n                abort           : 'onAbort',\n                reset           : 'onReset',\n                prio            : 10000, // To ensure our listener is run before the relayed listeners (for the outside world)\n                thisObj         : me\n            }\n        }, me.dragHelperConfig);\n\n        // Remove in 6.0\n        me.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        grid.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        me.dropIndicator = DomHelper.createElement({\n            className : 'b-row-drop-indicator'\n        });\n\n        me.dropOverTargetCls = ['b-row-reordering-target', 'b-hover'];\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    static pluginConfig = {\n        after : ['onPaint']\n    };\n\n    get targetSubGridElement() {\n        const targetSubGrid = this.grid.regions[0];\n\n        return this.grid.subGrids[targetSubGrid].element;\n    }\n\n    //endregion\n\n    //region Events (drop)\n\n    isElementDraggable(el, event) {\n        if (!el.closest('.b-grid-cell .b-widget')) {\n            if (this.gripOnly) {\n                const firstCell = el.closest('.b-grid-cell:first-child');\n\n                // Event is in the first cell. Now check if it's on the handle\n                if (firstCell) {\n                    const\n                        gripperStyle = getComputedStyle(firstCell, ':before'),\n                        offsetX      = this.grid.rtl ? firstCell.getBoundingClientRect().width - event.borderOffsetX : event.borderOffsetX,\n                        onGrip       = DomHelper.roundPx(offsetX) <= DomHelper.roundPx(parseFloat(gripperStyle.width));\n\n                    // Prevent drag select if mousedown on grip, would collide with reordering\n                    // (reset by GridSelection)\n                    if (onGrip) {\n                        this.client.preventDragSelect = true;\n                    }\n\n                    return onGrip;\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    }\n\n    onBeforeDragStart({ event, source, context }) {\n        const\n            me        = this,\n            { grid }  = me,\n            subGridEl = me.targetSubGridElement;\n\n        // Only dragging enabled in the leftmost grid section\n        if (me.disabled || grid.readOnly || grid.isTreeGrouped || !subGridEl.contains(context.element)) {\n            return false;\n        }\n\n        const startRecord = context.startRecord = grid.getRecordFromElement(context.element);\n\n        // Don't allow starting drag on a readOnly record nor on special rows\n        if (startRecord.readOnly || startRecord.isSpecialRow) {\n            return false;\n        }\n\n        context.originalRowTop = grid.rowManager.getRowFor(startRecord).top;\n\n        // Don't select row if checkboxOnly is set\n        if (!grid.selectionMode.checkboxOnly) {\n            if (source.startEvent.pointerType === 'touch') {\n                // Touchstart doesn't focus/navigate on its own, so we do it at the last moment before drag start\n                if (!grid.isSelected(startRecord)) {\n                    grid.selectRow({\n                        record         : startRecord,\n                        addToSelection : false\n                    });\n                }\n            }\n            else if (!grid.isSelected(startRecord) && !event.shiftKey && !event.ctrlKey) {\n                // If record is not selected and shift/ctrl is not pressed then select single row\n                grid.selectRow({\n                    record : startRecord\n                });\n            }\n        }\n\n        // Read-only records will not be moved\n        const selectedRecords = grid.selectedRecords.filter(r => !r.readOnly);\n        context.records       = [startRecord];\n\n        // If clicked record is selected, move all selected records\n        if (selectedRecords.includes(startRecord)) {\n            context.records.push(...selectedRecords.filter(r => r !== startRecord));\n            context.records.sort((r1, r2) => grid.store.indexOf(r1) - grid.store.indexOf(r2));\n        }\n\n        return true;\n    }\n\n    onDragStart({ context }) {\n        const\n            me                                 = this,\n            { grid }                           = me,\n            { cellEdit, cellMenu, headerMenu } = grid.features;\n\n        if (cellEdit) {\n            me.cellEditDisabledState = cellEdit.disabled;\n            cellEdit.disabled        = true; // prevent editing from being started through keystroke during row reordering\n        }\n\n        cellMenu?.hideContextMenu?.(false);\n        headerMenu?.hideContextMenu?.(false);\n\n        grid.element.classList.add('b-row-reordering');\n\n        const focusedCell = context.element.querySelector('.b-focused');\n        focusedCell?.classList.remove('b-focused');\n\n        context.element.firstElementChild.classList.remove('b-selected', 'b-hover');\n\n        grid.bodyContainer.appendChild(me.dropIndicator);\n    }\n\n    onDrag({ context, event }) {\n        const\n            me                    = this,\n            { grid }              = me,\n            { store, rowManager } = grid,\n            { clientY }           = event;\n\n        let valid = true,\n            row   = rowManager.getRowAt(clientY),\n            overRecord,\n            dataIndex,\n            after,\n            over,\n            insertBefore;\n\n        if (row) {\n            const\n                rowTop        = row.top + grid.scrollable.element.getBoundingClientRect().top - grid.scrollable.y,\n                quarter       = row.height / 4,\n                topQuarter    = rowTop + quarter,\n                middleY       = rowTop + row.height / 2,\n                bottomQuarter = rowTop + quarter * 3;\n\n            dataIndex  = row.dataIndex;\n            overRecord = store.getAt(dataIndex);\n\n            // If Tree and pointer is in quarter 2 and 3, add as child of hovered row\n            if (store.tree) {\n                over = (overRecord.isParent || me.dropOnLeaf) && clientY > topQuarter && clientY < bottomQuarter;\n            }\n            else if (store.isGrouped) {\n                over = overRecord.isGroupHeader && overRecord.meta.collapsed;\n            }\n\n            // Else, drop after row below if mouse is in bottom half of hovered row\n            after = !over && event.clientY >= middleY;\n        }\n        // User dragged below last row or above the top row.\n        else {\n            if (event.pageY < grid._bodyRectangle.y) {\n                dataIndex  = 0;\n                overRecord = store.first;\n                after      = false;\n            }\n            else {\n                dataIndex  = store.count - 1;\n                overRecord = store.last;\n                after      = true;\n            }\n            row = grid.rowManager.getRow(dataIndex);\n        }\n\n        if (overRecord === me.overRecord && me.after === after && me.over === over) {\n            context.valid = me.reorderValid;\n            // nothing's changed\n            return;\n        }\n\n        if (me.overRecord !== overRecord) {\n            rowManager.getRowById(me.overRecord)?.removeCls(me.dropOverTargetCls);\n        }\n\n        me.overRecord = overRecord;\n        me.after      = after;\n        me.over       = over;\n\n        if (\n            // Hovering the dragged record. This is a no-op.\n            // But still gather the contextual data.\n            overRecord === context.startRecord ||\n            // Not allowed to drop above topmost group header or below a collapsed header\n            (!after && !over && dataIndex === 0 && store.isGrouped) ||\n            // Not allowed to drop after last collapsed group\n            (after && overRecord.isGroupHeader && overRecord.meta.collapsed && store.indexOf(overRecord) === store.count - 1)\n        ) {\n            valid = false;\n        }\n\n        if (store.tree) {\n            insertBefore = after ? overRecord.nextSibling : overRecord;\n\n            // For trees, prevent moving a parent into its own hierarchy\n            if (context.records.some(rec => rec.contains(overRecord))) {\n                valid = false;\n            }\n\n            context.parent = valid && over ? overRecord : overRecord.parent;\n\n            me.clearTimeout(me.hoverTimer);\n\n            if (overRecord && overRecord.isParent && !overRecord.isExpanded(store)) {\n                me.hoverTimer = me.setTimeout(() => grid.expand(overRecord), me.hoverExpandTimeout);\n            }\n        }\n        else {\n            insertBefore = after ? store.getAt(dataIndex + 1) : overRecord;\n        }\n\n        row.toggleCls(me.dropOverTargetCls, valid && over);\n\n        // If hovering results in same dataIndex, regardless of what row is hovered, and parent has not changed\n        if (!over && dataIndex === store.indexOf(context.startRecord) + (after ? -1 : 1) &&\n            context.parent && context.startRecord.parent === context.parent) {\n            valid = false;\n        }\n\n        // Provide visual clue to user of the drop position\n        // In FF (in tests) it might not have had time to redraw rows after scroll before getting here\n        row && DomHelper.setTranslateY(me.dropIndicator, Math.max(row.top + (after ? row.element.getBoundingClientRect().height : 0), 1));\n\n        // Don't show dropIndicator if holding over a row\n        me.dropIndicator.style.visibility = over ? 'hidden' : 'visible';\n        me.dropIndicator.classList.toggle('b-drag-invalid', !valid);\n\n        // Public property used for validation\n        context.insertBefore = insertBefore;\n\n        context.valid = me.reorderValid = valid;\n    }\n\n    /**\n     * Handle drop\n     * @private\n     */\n    async onDrop(event) {\n        const\n            me          = this,\n            { client }  = me,\n            { context } = event;\n\n        context.valid = context.valid && me.reorderValid;\n\n        if (context.valid) {\n            context.async = true;\n\n            if (client.store.tree) {\n                // For tree scenario, add context about previous positions of dragged tree nodes\n                context.oldPositionContext = context.records.map((record) => ({\n                    record,\n                    parentId    : record.parent?.id,\n                    parentIndex : record.parentIndex\n                }));\n            }\n\n            // Remove for 6.0\n            let result = await me.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            // Outside world provided us one or more Promises to wait for\n            result = await client.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            await me.dragHelper.animateProxyTo(me.dropIndicator, { align : 'l0-l0' });\n\n            await me.finalizeReorder(context);\n        }\n\n        // already dropped the node, don't have to expand any node hovered anymore\n        // (cancelling expand action after timeout)\n        me.clearTimeout(me.hoverTimer);\n\n        me.overRecord = me.after = me.over = null;\n\n        me.trigger('gridRowDrop', event);\n        client.trigger('gridRowDrop', event);\n    }\n\n    onAbort(event) {\n        this.client.trigger('gridRowDragAbort', event);\n    }\n\n    async finalizeReorder(context) {\n        const\n            me                     = this,\n            { grid }               = me,\n            { store, focusedCell } = grid;\n\n        let { records } = context;\n\n        context.valid = context.valid && !records.some(rec => !store.includes(rec));\n\n        if (context.valid) {\n            let result;\n\n            if (store.tree) {\n                // Remove any selected child records of parent nodes\n                records = records.filter(record => !record.parent || record.bubbleWhile(parent => !records.includes(parent), true));\n\n                result = await context.parent.tryInsertChild(records, me.over ? context.parent.children?.[0] : context.insertBefore);\n                // remove reorder cls from preview parent element dropped\n                grid.rowManager.forEach(r => r.removeCls(me.dropOverTargetCls));\n\n                // If parent wasn't expanded, expand it if it now has children\n                if (!context.parent.isExpanded() && context.parent.children?.length) {\n                    grid.expand(context.parent);\n                }\n\n                context.valid = result !== false;\n            }\n            else if (store.isGrouped && me.over) {\n                store.move(records, store.getAt(store.indexOf(context.insertBefore) + 1));\n            }\n            else {\n                // When dragging multiple rows, ensure the insertBefore reference is not one of the selected records\n                if (records.length > 1) {\n                    while (context.insertBefore && records.includes(context.insertBefore)) {\n                        context.insertBefore = store.getNext(context.insertBefore, false, true);\n                    }\n                }\n                store.move(records, context.insertBefore);\n            }\n\n            if (focusedCell?._rowIndex >= 0) {\n                grid._focusedCell = null;\n                // Refresh focused cell\n                grid.focusCell({\n                    grid,\n                    record   : focusedCell.record,\n                    columnId : focusedCell.columnId\n                });\n            }\n\n            store.clearSorters();\n        }\n\n        context.finalize(context.valid);\n\n        grid.element.classList.remove('b-row-reordering');\n    }\n\n    /**\n     * Clean up on reset\n     * @private\n     */\n    onReset() {\n        const\n            me       = this,\n            { grid } = me,\n            cellEdit = grid.features.cellEdit;\n\n        grid.element.classList.remove('b-row-reordering');\n\n        if (cellEdit) {\n            cellEdit.disabled = me.cellEditDisabledState;\n        }\n\n        me.dropIndicator.remove();\n\n        DomHelper.removeClsGlobally(\n            grid.element,\n            ...me.dropOverTargetCls\n        );\n    }\n\n    //endregion\n\n    //region Render\n\n    onPaint({ firstPaint }) {\n        // columns shown, hidden or reordered\n        if (firstPaint) {\n            this.init();\n        }\n    }\n\n    //endregion\n\n    updateShowGrip(show) {\n        this.grid.element.classList.toggle('b-row-reorder-with-grip', show);\n    }\n\n    get isDragging() {\n        return this.dragHelper.isDragging;\n    }\n}\n\nRowReorder.featureClass = '';\n\nGridFeatureManager.registerFeature(RowReorder, false);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\n\n/**\n * @module Grid/feature/Summary\n */\n\n/**\n * @typedef {Object} ColumnSummaryConfig\n * @property {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum Summary type, see\n * {@link Grid/column/Column#config-sum} for details\n * @property {Function} renderer Renderer function for summary, see\n * {@link Grid/column/Column#config-summaryRenderer} for details\n * @property {*} seed Initial value when using a function as `sum`\n */\n\n/**\n * Displays a summary row in the grid footer.\n *\n * {@inlineexample Grid/feature/Summary.js}\n *\n * Specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRenderer to format the calculated sum.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * { text : 'Score', data : 'score', width : 80, sum : 'sum' }\n * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n * ```\n *\n * Also, it is possible to set up multiple summaries as array of summary configs:\n * ```javascript\n * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype summary\n * @feature\n */\nexport default class Summary extends SummaryFormatter(InstancePlugin) {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to sum values of selected row records\n             * @config {Boolean}\n             */\n            selectedOnly : null,\n\n            hideFooters : false\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        this.bindStore(grid.store);\n\n        grid.hideFooters = this.hideFooters;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDestroy() {\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (disable) {\n            client.element.classList.add('b-summary-disabled');\n        }\n        else {\n            this.updateSummaries();\n            client.element.classList.remove('b-summary-disabled');\n            client.eachSubGrid(subGrid => subGrid.scrollable.syncPartners());\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderRows() {\n        this.updateSummaries();\n    }\n\n    /**\n     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):\n     * ```\n     * <table>\n     *     <tr><td colspan=\"2\">0</td></tr> // { sum : 'min' } Only a calculation, span entire table\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation\n     * </table>\n     * ```\n     * @private\n     */\n    updateSummaries() {\n        const\n            me              = this,\n            { grid, store } = me,\n            cells           = DomHelper.children(grid.element, '.b-grid-footer'),\n            selectedOnly    = me.selectedOnly && grid.selectedRecords.length > 0,\n            records         = (store.isFiltered ? store.storage.values : store.allRecords).filter(r => !r.isSpecialRow && (!selectedOnly || grid.isSelected(r)));\n\n        // reset seeds, to not have ever increasing sums :)\n        grid.columns.forEach(column => {\n            column.summaries?.forEach(config => {\n                if ('seed' in config) {\n                    if (!('initialSeed' in config)) {\n                        config.initialSeed = config.seed;\n                    }\n\n                    if (['number', 'string', 'date'].includes(typeof config.initialSeed)) {\n                        config.seed = config.initialSeed;\n                    }\n                    else {\n                        // create shallow copy\n                        config.seed = Object.assign({}, config.initialSeed);\n                    }\n                }\n            });\n        });\n\n        cells.forEach(cellElement => {\n            // Skip for special columns like checkbox selection\n            if (!cellElement.dataset.column) {\n                return;\n            }\n\n            const\n                column = grid.columns.get(cellElement.dataset.column),\n                html   = me.generateHtml(column, records, 'b-grid-footer-summary');\n\n            if (column.summaries ? column.summaries.length : column.sum ? 1 : 0) {\n                // First time, set table\n                if (!cellElement.children.length) {\n                    cellElement.innerHTML = html;\n                }\n                // Following times, sync changes\n                else {\n                    DomHelper.sync(html, cellElement.firstElementChild);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreChange({ action, changes }) {\n        let shouldUpdate = true;\n\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update') {\n            // only update summary when a field that affects summary is changed\n            // <remove-on-release>\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            // </remove-on-release>\n            shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n        }\n\n        if (shouldUpdate) {\n            this.updateSummaries();\n        }\n    }\n\n    //endregion\n\n    updateSelectedOnly(value) {\n        const me = this;\n        me.detachListeners('selectionChange');\n\n        if (value) {\n            me.grid.ion({\n                name            : 'selectionChange',\n                selectionChange : me.refresh,\n                thisObj         : me\n            });\n        }\n        me.refresh();\n    }\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.updateSummaries();\n    }\n}\n\nSummary.featureClass = 'b-summary';\n\nGridFeatureManager.registerFeature(Summary);\n","import { RowsRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportRowsCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportRowsCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportrowscombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : RowsRange.all, text : me.L('L{all}') },\n            { id : RowsRange.visible, text : me.L('L{visible}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportRowsCombo.initClass();\n","import { Orientation } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportOrientationCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportOrientationCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportorientationcombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : Orientation.portrait, text : me.L('L{portrait}') },\n            { id : Orientation.landscape, text : me.L('L{landscape}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportOrientationCombo.initClass();\n","import Popup from '../../../Core/widget/Popup.js';\nimport LocaleManager from '../../../Core/localization/LocaleManager.js';\nimport './field/ExportRowsCombo.js';\nimport './field/ExportOrientationCombo.js';\nimport { FileFormat, PaperFormat } from '../../feature/export/Utils.js';\nimport Checkbox from '../../../Core/widget/Checkbox.js';\nimport Field from '../../../Core/widget/Field.js';\n\nfunction buildComboItems(obj, fn = x => x) {\n    return Object.keys(obj).map(key => ({ id : key, text : fn(key) }));\n}\n\n/**\n * @module Grid/view/export/ExportDialog\n */\n\n/**\n * Dialog window used by the {@link Grid/feature/export/PdfExport PDF export feature}. It allows users to select export\n * options like paper format and columns to export. This dialog contains a number of predefined\n * {@link Core/widget/Field fields} which you can access through the popup's {@link #property-widgetMap}.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                         | Weight | Description                                          |\n * |------------------------|------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core/widget/Combo}    | 100    | Choose columns to export                             |\n * | `rowsRangeField`       | {@link Core/widget/Combo}    | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core/widget/Combo}    | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core/widget/Checkbox} | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core/widget/Checkbox} | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core/widget/Combo}    | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core/widget/Combo}    | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core/widget/Combo}    | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                                          |\n * |------------------------|----------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core/widget/Button} | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core/widget/Button} | 200    | Cancel export                                        |\n *\n * Bottom buttons may be customized using `bbar` config passed to `exportDialog`:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         exportButton : { text : 'Go!' }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Grid/feature/export/PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by the\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * a specific naming pattern - it should have `ref` config ending with `Field`, see other fields for reference -\n * `orientationField`, `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from\n * the dialog, `Field` part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField`\n * becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * grid.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Popup\n */\nexport default class ExportDialog extends Popup {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportDialog';\n    }\n\n    static get type() {\n        return 'exportdialog';\n    }\n\n    static get configurable() {\n        return {\n            autoShow  : false,\n            autoClose : false,\n            closable  : true,\n            centered  : true,\n\n            /**\n             * Returns map of values of dialog fields.\n             * @member {Object<String,Object>} values\n             * @readonly\n             */\n\n            /**\n             * Grid instance to build export dialog for\n             * @config {Grid.view.Grid}\n             */\n            client : null,\n\n            /**\n             * Set to `false` to not preselect all visible columns when the dialog is shown\n             * @config {Boolean}\n             */\n            autoSelectVisibleColumns : true,\n\n            /**\n             * Set to `false` to allow using PNG + Multipage config in export dialog\n             * @config {Boolean}\n             */\n            hidePNGMultipageOption : true,\n\n            title : 'L{exportSettings}',\n\n            maxHeight : '80%',\n\n            scrollable : {\n                overflowY : true\n            },\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                columnsField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.columns}',\n                    store        : {},\n                    valueField   : 'id',\n                    displayField : 'text',\n                    multiSelect  : true,\n                    weight       : 100,\n                    maxHeight    : 100\n                },\n                rowsRangeField : {\n                    type   : 'exportrowscombo',\n                    label  : 'L{ExportDialog.rows}',\n                    value  : 'all',\n                    weight : 200\n                },\n                exporterTypeField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.exporterType}',\n                    editable     : false,\n                    value        : 'singlepage',\n                    displayField : 'text',\n                    buildItems() {\n                        const dialog = this.parent;\n\n                        return dialog.exporters.map(exporter => ({\n                            id   : exporter.type,\n                            text : dialog.optionalL(exporter.title, this)\n                        }));\n                    },\n                    onChange({ value }) {\n                        this.owner.widgetMap.alignRowsField.hidden    = value === 'singlepage';\n                        this.owner.widgetMap.repeatHeaderField.hidden = value !== 'multipagevertical';\n                    },\n                    weight : 300\n                },\n                alignRowsField : {\n                    type    : 'checkbox',\n                    label   : 'L{ExportDialog.alignRows}',\n                    checked : false,\n                    hidden  : true,\n                    weight  : 400\n                },\n                repeatHeaderField : {\n                    type        : 'checkbox',\n                    label       : 'L{ExportDialog.repeatHeader}',\n                    localeClass : this,\n                    hidden      : true,\n                    weight      : 500\n                },\n                fileFormatField : {\n                    type        : 'combo',\n                    label       : 'L{ExportDialog.fileFormat}',\n                    localeClass : this,\n                    editable    : false,\n                    value       : 'pdf',\n                    items       : [],\n                    onChange({ value, oldValue }) {\n                        const dialog = this.parent;\n                        if (dialog.hidePNGMultipageOption) {\n                            const\n                                exporterField = dialog.widgetMap.exporterTypeField,\n                                exporter      = exporterField.store.find(r => r.id === 'singlepage');\n\n                            if (value === FileFormat.png && exporter) {\n                                this._previousDisabled = exporterField.disabled;\n                                exporterField.disabled = true;\n\n                                this._previousValue = exporterField.value;\n                                exporterField.value = 'singlepage';\n                            }\n                            else if (oldValue === FileFormat.png && this._previousValue) {\n                                exporterField.disabled = this._previousDisabled;\n                                exporterField.value    = this._previousValue;\n                            }\n                        }\n                    },\n                    weight : 600\n                },\n                paperFormatField : {\n                    type     : 'combo',\n                    label    : 'L{ExportDialog.paperFormat}',\n                    editable : false,\n                    value    : 'A4',\n                    items    : [],\n                    weight   : 700\n                },\n                orientationField : {\n                    type   : 'exportorientationcombo',\n                    label  : 'L{ExportDialog.orientation}',\n                    value  : 'portrait',\n                    weight : 800\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    exportButton : {\n                        color   : 'b-green',\n                        text    : 'L{ExportDialog.export}',\n                        weight  : 100,\n                        onClick : 'up.onExportClick'\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{ExportDialog.cancel}',\n                        weight  : 200,\n                        onClick : 'up.onCancelClick'\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    construct(config = {}) {\n        const\n            me         = this,\n            { client } = config;\n\n        if (!client) {\n            throw new Error('`client` config is required');\n        }\n\n        me.columnsStore = client.columns.chain(column => column.isLeaf && column.exportable, null, { excludeCollapsedRecords : false });\n\n        me.applyInitialValues(config);\n\n        super.construct(config);\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n    }\n\n    applyInitialValues(config) {\n        const\n            me    = this,\n            items = config.items = config.items || {};\n\n        config.width               = config.width || me.L('L{width}');\n        config.defaults            = config.defaults || {};\n        config.defaults.labelWidth = config.defaults.labelWidth || me.L('L{ExportDialog.labelWidth}');\n\n        items.columnsField     = items.columnsField || {};\n        items.fileFormatField  = items.fileFormatField || {};\n        items.paperFormatField = items.paperFormatField || {};\n\n        items.fileFormatField.items  = buildComboItems(FileFormat, value => value.toUpperCase());\n        items.paperFormatField.items = buildComboItems(PaperFormat);\n\n        items.columnsField.store = me.columnsStore;\n    }\n\n    onBeforeShow() {\n        const { columnsField, alignRowsField, exporterTypeField, repeatHeaderField } = this.widgetMap;\n\n        if (this.autoSelectVisibleColumns) {\n            columnsField.value = this.columnsStore.query(c => !c.hidden);\n        }\n        alignRowsField.hidden    = exporterTypeField.value === 'singlepage';\n        repeatHeaderField.hidden = exporterTypeField.value !== 'multipagevertical';\n\n        super.onBeforeShow?.(...arguments);\n    }\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('L{labelWidth}');\n\n        this.width = this.L('L{width}');\n\n        this.eachWidget(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n        });\n    }\n\n    onExportClick() {\n        const values = this.values;\n\n        /**\n         * Fires when export button is clicked\n         * @event export\n         * @param {Object} values Object containing config for {@link Grid.feature.export.PdfExport#function-export export()} method\n         * @category Export\n         */\n        this.trigger('export', { values });\n    }\n\n    onCancelClick() {\n        /**\n         * Fires when cancel button is clicked. Popup will hide itself.\n         * @event cancel\n         * @category Export\n         */\n        this.trigger('cancel');\n        this.hide();\n    }\n\n    get values() {\n        const\n            fieldRe = /field/i,\n            result  = {};\n\n        this.eachWidget(widget => {\n            if (fieldRe.test(widget.ref)) {\n                result[widget.ref.replace(fieldRe, '')] = widget instanceof Checkbox ? widget.checked : widget.value;\n            }\n        });\n\n        return result;\n    }\n}\n\nExportDialog.initClass();\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipage}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client, rowsRange, enableDirectRendering }) {\n        const { exportMeta } = this;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        delete exportMeta.lastExportedRowBottom;\n\n        // If current vertical position is greater than max vertical pages, switch to next column\n        if (exportMeta.verticalPosition >= exportMeta.verticalPages) {\n            Object.assign(exportMeta, {\n                verticalPosition     : 0,\n                horizontalPosition   : exportMeta.horizontalPosition + 1,\n                currentPageTopMargin : 0,\n                lastTop              : 0,\n                lastRowIndex         : rowsRange === RowsRange.visible ? client.rowManager.firstVisibleRow.dataIndex : 0\n            });\n\n            delete exportMeta.lastRowDataIndex;\n\n            if (!enableDirectRendering) {\n                await this.scrollRowIntoView(client, exportMeta.firstVisibleDataIndex, { block : 'start' });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Preparation\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                enableDirectRendering\n            }               = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            onlyVisibleRows = rowsRange === RowsRange.visible,\n            horizontalPages = Math.ceil(exportMeta.totalWidth / pageWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let contentHeight = pageHeight;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        let totalHeight, verticalPages, totalRows = client.store.count;\n\n        if (onlyVisibleRows) {\n            totalRows = me.getVisibleRowsCount(client);\n\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.bodyHeight;\n        }\n        else {\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !onlyVisibleRows) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(totalHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            verticalPages,\n            totalHeight,\n            contentHeight,\n            totalRows,\n            totalPages           : horizontalPages * verticalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : onlyVisibleRows ? client.rowManager.firstVisibleRow.dataIndex : 0\n        });\n\n        if (!enableDirectRendering) {\n            this.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    //endregion\n\n    async collectRows(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }              = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowDataIndex\n            }              = exportMeta,\n            { rowManager } = client,\n            { rows }       = rowManager,\n            onlyVisible    = rowsRange === RowsRange.visible,\n            hasMergeCells  = client.hasActiveFeature('mergeCells');\n\n        let remainingHeight, index;\n\n        if (onlyVisible && lastRowDataIndex != null) {\n            if (lastRowDataIndex === rows[rows.length - 1].dataIndex) {\n                index = rows.length - 1;\n            }\n            else {\n                index = rows.findIndex(r => r.dataIndex === lastRowDataIndex);\n            }\n        }\n        else {\n            index = onlyVisible\n                ? rows.findIndex(r => r.bottom > Math.ceil(client.scrollable.y))\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + client.headerHeight > 0);\n        }\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisible || verticalPosition === 0) ? 0 : rows[index].top + currentPageTopMargin + client.headerHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = rows[index - 1].bottom;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisible && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n            exportMeta.lastRowDataIndex = lastRow.dataIndex + 1;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisible) {\n            exportMeta.exactGridHeight -= exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }               = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowIndex,\n                fakeRow\n            }               = exportMeta,\n            { store }       = client,\n            hasMergeCells   = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows = rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisibleRows || verticalPosition === 0) ? 0 : lastTop + currentPageTopMargin + client.headerHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page contains header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex, previousTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = lastTop;\n            }\n            else {\n                previousTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // Last row is processed, still need to fill the view\n                if (++index === store.count && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = alignRows ? index : lastDataIndex;\n        exportMeta.lastTop = alignRows ? lastTop : previousTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.height - client.bodyHeight + client.scrollable.scrollHeight - me.getVirtualScrollerHeight(client);\n        }\n\n        let header, footer;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        let offset;\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n\n    prepareExportElement() {\n        const\n            me = this,\n            { element, exportMeta } = me;\n\n        if (exportMeta.scrollableTopMargin) {\n            element.querySelector('.b-grid-vertical-scroller').style.marginTop = `-${exportMeta.scrollableTopMargin}px`;\n        }\n\n        return super.prepareExportElement();\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            totalPages,\n            paperWidth,\n            paperHeight,\n            contentHeight\n        }  = exportMeta;\n\n    let currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', { text : me.L(MultiPageExporter.exportingPageText, { currentPage, totalPages }), progress : Math.round(((currentPage + 1) / totalPages) * 90) });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        height: ${exportMeta.exactGridHeight}px !important;\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-inline-start : ${-paperWidth * exportMeta.horizontalPosition}in;\n                        margin-top  : ${exportMeta.currentPageTopMargin}px;\n                    }\n                </style>\n            `];\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageVerticalExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipagevertical}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client }) {\n        const\n            { exportMeta } = this,\n            {\n                totalRows,\n                processedRows,\n                totalPages\n            } = exportMeta;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        // With variable row heights it is possible that initial pages estimation is wrong. If we're out but there are\n        // more rows to process - continue exporting\n        if (exportMeta.currentPage === totalPages && processedRows.size !== totalRows) {\n            ++exportMeta.totalPages;\n            ++exportMeta.verticalPages;\n        }\n    }\n\n    //endregion\n\n    estimateTotalPages(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                repeatHeader,\n                enableDirectRendering\n            }              = config,\n            {\n                pageWidth,\n                pageHeight,\n                totalWidth\n            }              = exportMeta,\n            scale          = me.getScaleValue(pageWidth, totalWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let\n            // bodyHeight does not always report correct value, read it from the DOM element instead, we don't care\n            // about forced reflow at this stage\n            totalHeight   = 0 - me.getVirtualScrollerHeight(client) + client.height - client.bodyElement.offsetHeight + client.scrollable.scrollHeight,\n            // We will be scaling content horizontally, need to adjust content height accordingly\n            contentHeight = pageHeight / scale,\n            totalRows     = client.store.count,\n            initialScroll = 0,\n            rowsHeight    = totalHeight,\n            verticalPages;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        // If we are repeating header on every page we have smaller contentHeight\n        if (repeatHeader) {\n            contentHeight -= client.headerHeight + client.footerHeight;\n            totalHeight -= client.headerHeight + client.footerHeight;\n        }\n\n        if (rowsRange === RowsRange.visible) {\n            const\n                rowManager = client.rowManager,\n                firstRow = rowManager.firstVisibleRow,\n                lastRow  = rowManager.lastVisibleRow;\n\n            // With direct rendering we start rendering from 0, no need to adjust anything\n            if (!enableDirectRendering) {\n                initialScroll = firstRow.top;\n            }\n\n            totalRows = me.getVisibleRowsCount(client);\n\n            if (enableDirectRendering) {\n                totalHeight = client.headerHeight + client.footerHeight + lastRow.bottom - firstRow.top;\n                rowsHeight = lastRow.bottom - firstRow.top;\n            }\n            else {\n                rowsHeight = totalHeight = totalHeight - client.scrollable.scrollHeight + lastRow.bottom - firstRow.top;\n            }\n\n            exportMeta.lastRowIndex = firstRow.dataIndex;\n            exportMeta.finishRowIndex = lastRow.dataIndex;\n        }\n        else {\n            exportMeta.finishRowIndex = client.store.count - 1;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !repeatHeader && rowsRange !== RowsRange.visible) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(rowsHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            scale,\n            contentHeight,\n            totalRows,\n            totalHeight,\n            verticalPages,\n            initialScroll,\n            horizontalPages : 1,\n            totalPages      : verticalPages\n        });\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            { client }      = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            horizontalPages = 1;\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : 0,\n            processedRows        : new Set()\n        });\n\n        me.estimateTotalPages(config);\n\n        if (!config.enableDirectRendering) {\n            me.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                 = this,\n            { exportMeta }     = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                  = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight\n            }                  = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight = repeatHeader ? 0 : client.headerHeight,\n            { rowManager }     = client,\n            { rows }           = rowManager,\n            onlyVisibleRows    = config.rowsRange === RowsRange.visible,\n            hasMergeCells      = client.hasActiveFeature('mergeCells');\n\n        let index = onlyVisibleRows\n                ? rows.findIndex(r => r.bottom > client.scrollable.y)\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + clientHeaderHeight > 0),\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : rows[index].top + currentPageTopMargin + clientHeaderHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(row.dataIndex);\n                }\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisibleRows) {\n            exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { exportMeta }        = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                     = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight,\n                lastRowIndex,\n                finishRowIndex,\n                fakeRow\n            }                     = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight    = repeatHeader ? 0 : client.headerHeight,\n            { store }             = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = config.rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : lastTop + currentPageTopMargin + clientHeaderHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            nextPageTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                nextPageTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(index);\n                }\n\n                // Last row is processed, still need to fill the view\n                if (index === finishRowIndex) {\n                    remainingHeight = 0;\n                }\n                else if ((++index - firstRowIndex) === totalRows && onlyVisibleRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = lastDataIndex;\n        exportMeta.lastTop = nextPageTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row to constrain column lines to the last\n            // row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n\n            if (!enableDirectRendering) {\n                exportMeta.totalHeight -= me.getVirtualScrollerHeight(client);\n            }\n        }\n\n        let header, footer, offset;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageVerticalExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            paperWidth,\n            paperHeight,\n            contentHeight,\n            scale,\n            initialScroll\n        }  = exportMeta;\n\n    let\n        { totalPages } = exportMeta,\n        currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', {\n            text     : me.L(MultiPageVerticalExporter.exportingPageText, { currentPage, totalPages }),\n            progress : Math.round(((currentPage + 1) / totalPages) * 90)\n        });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        transform: scale(${scale});\n                        transform-origin: top left;\n                        height: auto;\n                    }\n                </style>\n            `\n        ];\n\n        if (config.repeatHeader) {\n            const gridHeight = exportMeta.exactGridHeight ? `${exportMeta.exactGridHeight + exportMeta.currentPageTopMargin}px` : '100%';\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight} !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body {\n                        height: 100%;\n                        display: flex;\n                    }\n                \n                    .b-export-viewport {\n                        height: 100%;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: ${exportMeta.currentPageTopMargin - initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n        else {\n            const gridHeight = exportMeta.exactGridHeight || (contentHeight - exportMeta.currentPageTopMargin);\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight}px !important;\n                    }\n                    \n                    .b-export-body {\n                        overflow: hidden;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-top: ${exportMeta.currentPageTopMargin}px;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: -${initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        ({ totalPages } = exportMeta);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n","import BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\nimport Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class SinglePageExporter extends Exporter {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.localize('L{singlepage}');\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to center content horizontally on the page\n             * @config {Boolean}\n             */\n            centerContentHorizontally : false\n        };\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        Object.assign(this.exportMeta, {\n            verticalPages      : 1,\n            horizontalPages    : 1,\n            totalPages         : 1,\n            currentPage        : 0,\n            verticalPosition   : 0,\n            horizontalPosition : 0\n        });\n    }\n\n    async onRowsCollected() {}\n\n    positionRows(rows, config) {\n        if (config.enableDirectRendering) {\n            return rows.map(r => r[0]);\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            return rows.map(([html, , height]) => {\n                const result = html.replace(/translate\\(\\d+px, \\d+px\\)/, `translate(0px, ${currentTop}px)`);\n\n                currentTop += height;\n\n                return result;\n            });\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                    = this,\n            { client }            = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            { subGrids }          = me.exportMeta,\n            totalRows             = config.rowsRange === RowsRange.visible && store.count\n                // visibleRowCount is a projection of how much rows will fit the view, which should be\n                // maximum amount of exported rows. and there can be less\n                ? me.getVisibleRowsCount(client)\n                : store.count;\n\n        let { totalHeight } = me.exportMeta,\n            processedRows   = 0,\n            lastDataIndex   = -1;\n\n        if (rowManager.rows.length > 0) {\n            if (config.rowsRange === RowsRange.visible) {\n                lastDataIndex = rowManager.firstVisibleRow.dataIndex - 1;\n            }\n\n            if (hasMergeCells) {\n                for (const subGrid of Object.values(subGrids)) {\n                    subGrid.mergedCellsHtml = [];\n                }\n            }\n\n            // Collecting rows\n            while (processedRows < totalRows) {\n                const\n                    rows    = rowManager.rows,\n                    lastRow = rows[rows.length - 1],\n                    lastProcessedRowIndex = processedRows;\n\n                rows.forEach(row => {\n                    // When we are scrolling rows will be duplicated even with disabled buffers (e.g. when we are trying to\n                    // scroll last record into view). So we store last processed row dataIndex (which is always growing\n                    // sequence) and filter all rows with lower/same dataIndex\n                    if (row.dataIndex > lastDataIndex && processedRows < totalRows) {\n                        ++processedRows;\n                        totalHeight += row.offsetHeight;\n                        me.collectRow(row);\n                    }\n                });\n\n                // Collect merged cells per subgrid\n                if (hasMergeCells) {\n                    for (const subGridName in subGrids) {\n                        const\n                            subGrid     = subGrids[subGridName],\n                            mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                        for (const mergedCell of mergedCells) {\n                            subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                        }\n                    }\n                }\n\n                // Calculate new rows processed in this iteration e.g. to collect events\n                const\n                    firstNewRowIndex = rows.findIndex(r => r.dataIndex === lastDataIndex + 1),\n                    lastNewRowIndex  = firstNewRowIndex + (processedRows - lastProcessedRowIndex);\n\n                await me.onRowsCollected(rows.slice(firstNewRowIndex, lastNewRowIndex), config);\n\n                if (processedRows < totalRows) {\n                    lastDataIndex = lastRow.dataIndex;\n                    await me.scrollRowIntoView(client, lastDataIndex + 1);\n                }\n            }\n        }\n\n        return totalHeight;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { client, rowsRange } = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = rowsRange === RowsRange.visible;\n\n        let { totalHeight } = me.exportMeta;\n\n        if (store.count) {\n            const\n                { fakeRow }         = me.exportMeta,\n                { firstVisibleRow } = rowManager,\n                fromIndex           = onlyVisibleRows ? firstVisibleRow.dataIndex : 0,\n                toIndex             = onlyVisibleRows ? rowManager.lastVisibleRow.dataIndex : store.count - 1,\n                rows                = [];\n\n            let top = 0;\n\n            // Fake row might not have cells if there are no columns\n            if (fakeRow.cells.length) {\n                for (let i = fromIndex; i <= toIndex; i++) {\n                    fakeRow.render(i, store.getAt(i), true, false, true);\n\n                    top = fakeRow.translate(top);\n\n                    me.collectRow(fakeRow);\n\n                    // Push an object with data required to build merged cell\n                    rows.push({\n                        top          : fakeRow.top,\n                        bottom       : fakeRow.bottom,\n                        offsetHeight : fakeRow.offsetHeight,\n                        dataIndex    : fakeRow.dataIndex\n                    });\n                }\n\n                await me.onRowsCollected(rows, config);\n            }\n\n            totalHeight += top;\n\n            if (hasMergeCells) {\n                me.renderMergedCells(config, fromIndex, toIndex, rows);\n            }\n        }\n\n        return totalHeight;\n    }\n\n    buildPageHtml(config) {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml =  me.positionRows(rows, config).join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nSinglePageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    // When we prepared grid we stretched it horizontally, now we need to gather all rows\n    // There are two ways:\n    // 1. set component height to scrollable.scrollHeight value to render all rows at once (maybe a bit more complex\n    // if rows have variable height)\n    // 2. iterate over rows, scrolling new portion into view once in a while\n    // #1 sounds simpler, but that might require too much rendering, let's scroll rows instead\n\n    const\n        me             = this,\n        { client }     = config,\n        { totalWidth } = me.exportMeta,\n        styles         = me.stylesheets,\n        portrait       = config.orientation === Orientation.portrait,\n        paperFormat    = PaperFormat[config.paperFormat],\n        paperWidth     = portrait ? paperFormat.width : paperFormat.height,\n        paperHeight    = portrait ? paperFormat.height : paperFormat.width;\n\n    let totalHeight, header, footer;\n\n    if (config.enableDirectRendering) {\n        totalHeight = await me.renderRows(config);\n\n        totalHeight += client.headerHeight + client.footerHeight;\n    }\n    else {\n        totalHeight = await me.collectRows(config);\n\n        totalHeight += client.height - client.bodyHeight;\n    }\n\n    const html = me.buildPageHtml(config);\n\n    const totalClientHeight = totalHeight;\n\n    // Measure header and footer height\n    if (config.headerTpl) {\n        header = me.prepareHTML(config.headerTpl({ totalWidth }));\n        const height = me.measureElement(header);\n        totalHeight += height;\n    }\n\n    if (config.footerTpl) {\n        footer = me.prepareHTML(config.footerTpl({ totalWidth }));\n        const height = me.measureElement(footer);\n        totalHeight += height;\n    }\n\n    const\n        widthScale  = Math.min(1, me.getScaleValue(me.inchToPx(paperWidth), totalWidth)),\n        heightScale = Math.min(1, me.getScaleValue(me.inchToPx(paperHeight), totalHeight)),\n        scale       = Math.min(widthScale, heightScale);\n\n    // Now add style to stretch grid vertically\n    styles.push(\n        `<style>\n                #${client.id} {\n                    height: ${totalClientHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                \n                .b-export-content {\n                    ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                    transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                    transform-origin: top left;\n                    height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                }\n            </style>`\n    );\n\n    if (BrowserHelper.isIE11) {\n        styles.push(\n        `<style>\n                .b-export-body {\n                   min-height: ${totalClientHeight}px !important;\n                }\n         </style>`\n        );\n    }\n\n    // This is a single page exporter so we only yield one page\n    yield {\n        html : me.pageTpl({\n            html,\n            header,\n            footer,\n            styles,\n            paperWidth,\n            paperHeight\n        })\n    };\n};\n","import AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ExportDialog from '../../view/export/ExportDialog.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport Toast from '../../../Core/widget/Toast.js';\nimport { FileMIMEType } from './Utils.js';\n\n/**\n * @module Grid/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Grid component.\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * grid.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * grid.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : grid.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response } = result;\n * });\n * ```\n *\n * ## Exporters\n *\n * There are three exporters available by default: `singlepage`, `multipage` and `multipagevertical`:\n *  * `singlepage` -  generates single page with content scaled to fit the provided {@link #config-paperFormat}\n *  * `multipage` - generates as many pages as required to fit all requested content, unscaled\n *  * `multipagevertical` - a combination of two above: it scales content horizontally to fit into page width and then\n *  puts overflowing content on vertical pages. Like a scroll.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link #config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/export\n * @classtype pdfExport\n * @feature\n */\nexport default class PdfExport extends InstancePlugin {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get configurable() {\n        return {\n            dialogClass  : ExportDialog,\n            /**\n             * URL of the print server.\n             * @config {String}\n             */\n            exportServer : undefined,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Grid.view.export.ExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Grid.view.export.ExportDialog} widget.\n             * @config {ExportDialogConfig}\n             */\n            exportDialog : {\n                value : true,\n\n                $config : ['lazy']\n            },\n\n            /**\n             * Name of the exported file.\n             * @config {String}\n             */\n            fileName : null,\n\n            /**\n             * Format of the exported file, either `pdf` or `png`.\n             * @config {'pdf'|'png'}\n             * @default\n             * @category Export file config\n             */\n            fileFormat : 'pdf',\n\n            /**\n             * Export server will navigate to this url first and then will change page content to whatever client sent.\n             * This option is useful with react dev server, which uses a strict CORS policy.\n             * @config {String}\n             */\n            clientURL : null,\n\n            /**\n             * Export paper format. Available options are A1...A5, Legal, Letter.\n             * @config {'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'}\n             * @default\n             * @category Export file config\n             */\n            paperFormat : 'A4',\n\n            /**\n             * Orientation. Options are `portrait` and `landscape`.\n             * @config {'portrait'|'landscape'}\n             * @default\n             * @category Export file config\n             */\n            orientation : 'portrait',\n\n            /**\n             * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.\n             * @config {'all'|'visible'}\n             * @category Export file config\n             * @default\n             */\n            rowsRange : 'all',\n\n            /**\n             * Set to true to align row top to the page top on every exported page. Only applied to multipage export.\n             * @config {Boolean}\n             * @default\n             */\n            alignRows : false,\n\n            /**\n             * Set to true to show column headers on every page. This will also set {@link #config-alignRows} to true.\n             * Only applies to MultiPageVertical exporter.\n             * @config {Boolean}\n             * @default\n             */\n            repeatHeader : false,\n\n            /**\n             * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\n             * in the following form:\n             * ```javascript\n             * keepRegionSizes : {\n             *     locked : true\n             * }\n             * ```\n             * @config {Object<String,Boolean>}\n             * @default\n             */\n            keepRegionSizes : null,\n\n            /**\n             * When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\n             * length limit. This config allows to specify how many pages to send to server in one request.\n             * @config {Number}\n             * @default\n             * @private\n             */\n            pagesPerRequest : 0,\n\n            /**\n             * Config for exporter.\n             * @config {Object}\n             * @private\n             */\n            exporterConfig : null,\n\n            /**\n             * Type of the exporter to use. Should be one of the configured {@link #config-exporters}\n             * @config {String}\n             * @default\n             */\n            exporterType : 'singlepage',\n\n            /**\n             * List of exporter classes to use in export feature\n             * @config {Grid.feature.export.exporter.Exporter[]}\n             * @default\n             */\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n\n            /**\n             * When true, page will attempt to download generated file.\n             * @config {Boolean}\n             * @default\n             */\n            openAfterExport : true,\n\n            /**\n             * Set to true to receive binary file from the server instead of download link.\n             * @config {Boolean}\n             * @default\n             */\n            sendAsBinary : false,\n\n            /**\n             * False to open in the current tab, true - in a new tab\n             * @config {Boolean}\n             * @default\n             */\n            openInNewTab : false,\n\n            /**\n             * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *     appendTo   : 'container',\n             *     features : {\n             *         pdfExport : {\n             *             exportServer : 'http://localhost:8080/',\n             *             headerTpl : ({ currentPage, totalPages }) => `\n             *                 <div class=\"demo-export-header\">\n             *                     <img src=\"coolcorp-logo.png\"/>\n             *                     <dl>\n             *                         <dt>Date: ${DateHelper.format(new Date(), 'll LT')}</dt>\n             *                         <dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}</dd>\n             *                     </dl>\n             *                 </div>`\n             *          }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             */\n            headerTpl : null,\n\n            /**\n             * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *      appendTo   : 'container',\n             *      features : {\n             *          pdfExport : {\n             *              exportServer : 'http://localhost:8080/',\n             *              footerTpl    : () => '<div class=\"demo-export-footer\"><h3>© 2020 CoolCorp Inc</h3></div>'\n             *          }\n             *      }\n             * });\n             * ```\n             * @config {Function}\n             */\n            footerTpl : null,\n\n            /**\n             * An object containing the Fetch options to pass to the export server request. Use this to control if\n             * credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n             * @config {FetchOptions}\n             */\n            fetchOptions : null,\n\n            /**\n             * A message to be shown when Export feature is performing export.\n             * @config {String}\n             * @default \"Generating pages...\"\n             */\n            exportMask : 'L{Generating pages}',\n\n            /**\n             * A message to be shown when export is almost done.\n             * @config {String}\n             * @default \"Waiting for response from server...\"\n             */\n            exportProgressMask : 'L{Waiting for response from server}',\n\n            /**\n             * Set to `false` to not show Toast message on export error.\n             * @config {Boolean}\n             * @default\n             */\n            showErrorToast : true,\n\n            localizableProperties : ['exportMask', 'exportProgressMask'],\n\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use\n             * this hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles,\n\n            /**\n             * Enables direct rendering of the component content which significantly improves performance. To enable\n             * old export mode set this flag to false.\n             * @config {Boolean}\n             * @default\n             */\n            enableDirectRendering : true\n        };\n    }\n\n    updateEnableDirectRendering(value) {\n        if (!value) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Indirect rendering is deprecated');\n        }\n    }\n\n    doDestroy() {\n        this.exportDialog?.destroy();\n\n        this.exportersMap.forEach(exporter => exporter.destroy());\n\n        super.doDestroy();\n    }\n\n    /**\n     * When export is started from GUI ({@link Grid.view.export.ExportDialog}), export promise can be accessed via\n     * this property.\n     * @property {Promise|null}\n     */\n    get currentExportPromise() {\n        return this._currentExportPromise;\n    }\n\n    set currentExportPromise(value) {\n        this._currentExportPromise = value;\n    }\n\n    get exportersMap() {\n        return this._exportersMap || (this._exportersMap = new Map());\n    }\n\n    getExporter(config = {}) {\n        const\n            me               = this,\n            { exportersMap } = me,\n            { type }         = config;\n\n        let exporter;\n\n        if (exportersMap.has(type)) {\n            exporter = exportersMap.get(type);\n\n            Object.assign(exporter, config);\n        }\n        else {\n            const exporterClass = this.exporters.find(cls => cls.type === type);\n\n            if (!exporterClass) {\n                throw new Error(`Exporter type ${type} is not found. Make sure you've configured it`);\n            }\n\n            config = ObjectHelper.clone(config);\n            delete config.type;\n\n            exporter = new exporterClass(config);\n\n            exporter.relayAll(me);\n\n            exportersMap.set(type, exporter);\n        }\n\n        return exporter;\n    }\n\n    buildExportConfig(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                exportServer,\n                clientURL,\n                fileFormat,\n                fileName,\n                paperFormat,\n                rowsRange,\n                alignRows,\n                repeatHeader,\n                keepRegionSizes,\n                orientation,\n                translateURLsToAbsolute,\n                keepPathName,\n                sendAsBinary,\n                headerTpl,\n                footerTpl,\n                filterStyles,\n                enableDirectRendering\n            }  = me;\n\n        if (!config.columns) {\n            config.columns = client.columns.visibleColumns.filter(column => column.exportable).map(column => column.id);\n        }\n\n        const result = ObjectHelper.assign({\n            client,\n            exportServer,\n            clientURL,\n            fileFormat,\n            paperFormat,\n            rowsRange,\n            alignRows,\n            repeatHeader,\n            keepRegionSizes,\n            orientation,\n            translateURLsToAbsolute,\n            keepPathName,\n            sendAsBinary,\n            headerTpl,\n            footerTpl,\n            enableDirectRendering,\n            exporterType : me.exporterType,\n            fileName     : fileName || client.$$name\n        }, config);\n\n        // slice columns array to not modify it during export\n        result.columns = config.columns.slice();\n\n        // Only vertical exporter is supported\n        if (result.exporterType !== 'multipagevertical') {\n            result.repeatHeader = false;\n        }\n\n        // Align rows by default\n        if (!('alignRows' in config) && config.repeatHeader) {\n            result.alignRows = true;\n        }\n\n        result.exporterConfig = ObjectHelper.assign({\n            type                    : result.exporterType,\n            translateURLsToAbsolute : result.translateURLsToAbsolute,\n            keepPathName            : result.keepPathName,\n            filterStyles\n        }, result.exporterConfig || {});\n\n        delete result.exporterType;\n        delete result.translateURLsToAbsolute;\n        delete result.keepPathName;\n\n        return result;\n    }\n\n    /**\n     * Starts the export process. Accepts a config object which overrides any default configs.\n     * **NOTE**. Component should not be interacted with when export is in progress\n     *\n     * @param {Object} config\n     * @param {String[]} config.columns (required) List of column ids to export. E.g.\n     *\n     * ```javascript\n     * grid.features.pdfExport.export({ columns : grid.columns.map(c => c.id) })\n     * ```\n     * @returns {Promise} Object of the following structure\n     * ```\n     * {\n     *     response // Response instance\n     * }\n     * ```\n     */\n    async export(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                pagesPerRequest\n            }  = me;\n\n        config = me.buildExportConfig(config);\n\n        let result;\n\n        /**\n         * Fires on the owning Grid before export started. Return `false` to cancel the export.\n         * @event beforePdfExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (client.trigger('beforePdfExport', { config }) !== false) {\n            client.isExporting = true;\n\n            // This mask should be always visible to protect grid from changes even if the mask message is not visible\n            // due to the export dialog which is rendered above the grid's mask. The dialog has its own mask which shares the export message.\n            client.mask(me.exportMask);\n\n            try {\n                const exporter = me.getExporter(config.exporterConfig);\n\n                if (pagesPerRequest === 0) {\n                    const pages = await exporter.export(config);\n\n                    if (me.isDestroying) {\n                        return;\n                    }\n\n                    // Hide dialog\n                    me.exportDialog?.close();\n\n                    // We can unmask early\n                    client.unmask();\n\n                    /**\n                     * Fires when export progress changes\n                     * @event exportStep\n                     * @param {Number} progress Current progress, 0-100\n                     * @param {String} text Optional text to show\n                     */\n                    me.trigger('exportStep', { progress : 90, text : me.exportProgressMask, contentGenerated : true });\n\n                    const responsePromise = me.receiveExportContent(pages, config);\n\n                    // Show toast message indicating we're waiting for the server response\n                    me.toast = me.showLoadingToast(responsePromise);\n\n                    const response = await responsePromise;\n\n                    result = { response };\n\n                    await me.processExportContent(response, config);\n                }\n            }\n            catch (error) {\n                if (error instanceof Response) {\n                    result = { response : error };\n                }\n                else {\n                    result = { error };\n                }\n\n                throw error;\n            }\n            finally {\n                if (me.toast && !me.toast.isDestroying) {\n                    // Hide would also destroy the toast\n                    me.toast.hide();\n                }\n\n                if (!me.isDestroying) {\n                    // Close dialog on exception\n                    me.exportDialog?.close();\n                    client.unmask();\n\n                    if (me.showErrorToast) {\n                        // Do not show warning if user has cancelled request\n                        if (result.error) {\n                            if (result.error.name !== 'AbortError') {\n                                Toast.show({\n                                    html        : me.L('L{Export failed}'),\n                                    rootElement : me.rootElement\n                                });\n                            }\n                        }\n                        else if (!result.response.ok) {\n                            Toast.show({\n                                html        : me.L('L{Server error}'),\n                                rootElement : me.rootElement\n                            });\n                        }\n                    }\n\n                    /**\n                     * Fires on the owning Grid when export has finished\n                     * @event pdfExport\n                     * @on-owner\n                     * @param {Response} [response] Optional response, if received\n                     * @param {Error} [error] Optional error, if exception occurred\n                     */\n                    client.trigger('pdfExport', result);\n\n                    client.isExporting = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Sends request to the export server and returns Response instance. This promise can be cancelled by the user\n     * by clicking on the toast message. When the user clicks on the toast, `abort` method is called on the promise\n     * returned by this method. If you override this method you can implement `abort` method like in the snippet\n     * below to cancel the request.\n     *\n     * ```javascript\n     * class MyPdfExport extends PdfExport {\n     *     receiveExportContent(pages, config) {\n     *         let controller;\n     *\n     *         const promise = new Promise(resolve => {\n     *             controller = new AbortController();\n     *             const signal = controller.signal;\n     *\n     *             fetch(url, { signal })\n     *                 .then(response => resolve(response));\n     *         });\n     *\n     *         // This method will be called when user clicks on the toast message to cancel the request\n     *         promise.abort = () => controller.abort();\n     *\n     *         return promise;\n     *     }\n     * }\n     *\n     * const grid = new Grid({ features: { myPdfExport : {...} } });\n     *\n     * grid.features.myPdfExport.export().catch(e => {\n     *     // In case of aborted request do nothing\n     *     if (e.name !== 'AbortError') {\n     *         // handle other exceptions\n     *     }\n     * });\n     * ```\n     * @param {Object[]} pages Array of exported pages.\n     * @param {String} pages[].html pages HTML of the exported page.\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link.\n     * @returns {Promise} Returns Response instance\n     */\n    receiveExportContent(pages, config) {\n        return AjaxHelper.fetch(\n            config.exportServer,\n            Object.assign({\n                method      : 'POST',\n                credentials : 'omit',\n                headers     : { 'Content-Type' : 'application/json' },\n                body        : JSON.stringify({\n                    html         : pages,\n                    orientation  : config.orientation,\n                    format       : config.paperFormat,\n                    fileFormat   : config.fileFormat,\n                    fileName     : config.fileName,\n                    clientURL    : config.clientURL,\n                    sendAsBinary : config.sendAsBinary\n                })\n            }, this.fetchOptions)\n        );\n    }\n\n    /**\n     * Handles output of the {@link #function-receiveExportContent}. Server response can be of two different types depending\n     * on {@link #config-sendAsBinary} config:\n     * - `application/json` In this case JSON response contains url of the file to download\n     * - `application/octet-stream` In this case response contains stream of file binary data\n     *\n     * If {@link #config-openAfterExport} is true, this method will try to download content.\n     * @param {Response} response\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link. See {@link #config-sendAsBinary}\n     */\n    async processExportContent(response, config) {\n        const me = this;\n\n        if (response.ok && me.openAfterExport) {\n            // Clone Response to not block response stream\n            response = response.clone();\n\n            const contentType = response.headers.get('content-type');\n\n            if (contentType.match(/application\\/octet-stream/)) {\n                const\n                    MIMEType  = FileMIMEType[config.fileFormat],\n                    objectURL = await me.responseBlobToObjectURL(response, MIMEType),\n                    link      = me.getDownloadLink(config.fileName, objectURL);\n\n                link.click();\n            }\n            else if (contentType.match(/application\\/json/)) {\n                const responseJSON = await response.json();\n\n                if (responseJSON.success) {\n                    const link = me.getDownloadLink(config.fileName, responseJSON.url);\n\n                    link.click();\n                }\n                else {\n                    Toast.show({\n                        html        : responseJSON.msg,\n                        rootElement : this.rootElement\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates object URL from response content with given mimeType\n     * @param {Response} response Response instance\n     * @param {String} mimeType\n     * @returns {Promise} Returns string object URL\n     * @private\n     */\n    async responseBlobToObjectURL(response, mimeType) {\n        const blob = await response.blob();\n\n        return URL.createObjectURL(blob.slice(0, blob.size, mimeType));\n    }\n\n    /**\n     * Creates link to download the file.\n     * @param {String} name File name\n     * @param {String} href URL of the resource\n     * @returns {HTMLElement} HTMLAnchorElement\n     * @private\n     */\n    getDownloadLink(name, href) {\n        const link = document.createElement('a');\n\n        link.download = name;\n        link.href = href;\n\n        if (this.openInNewTab) {\n            link.target = '_blank';\n        }\n\n        return link;\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties({}, this, [\n            'client',\n            'exporters',\n            'exporterType',\n            'orientation',\n            'fileFormat',\n            'paperFormat',\n            'alignRows',\n            'rowsRange',\n            'repeatHeader'\n        ]);\n    }\n\n    changeExportDialog(exportDialog, oldExportDialog) {\n        const me = this;\n\n        oldExportDialog?.destroy();\n\n        if (exportDialog) {\n            const config = me.dialogClass.mergeConfigs({\n                rootElement : me.rootElement,\n                client      : me.client,\n                items       : {\n                    rowsRangeField : {\n                        value : me.rowsRange\n                    },\n\n                    exporterTypeField : {\n                        value : me.exporterType\n                    },\n\n                    orientationField : {\n                        value : me.orientation\n                    },\n\n                    paperFormatField : {\n                        value : me.paperFormat\n                    },\n\n                    repeatHeaderField : {\n                        value : me.repeatHeader\n                    },\n\n                    fileFormatField : {\n                        value : me.fileFormat\n                    },\n\n                    alignRowsField : {\n                        checked : me.alignRows\n                    }\n                }\n            }, me.defaultExportDialogConfig, exportDialog);\n\n            exportDialog = me.dialogClass.new(config);\n\n            exportDialog.ion({\n                export  : me.onExportButtonClick,\n                thisObj : me\n            });\n        }\n\n        return exportDialog;\n    }\n\n    /**\n     * Shows {@link Grid.view.export.ExportDialog export dialog}\n     */\n    async showExportDialog() {\n        return this.exportDialog.show();\n    }\n\n    onExportButtonClick({ values }) {\n        const\n            me         = this,\n            dialogMask = me.exportDialog.mask({\n                progress    : 0,\n                maxProgress : 100,\n                text        : me.exportMask\n            });\n\n        const detacher = me.ion({\n            exportstep({ progress, text, contentGenerated }) {\n                if (contentGenerated) {\n                    me.exportDialog.unmask();\n                    detacher();\n                }\n                else {\n                    dialogMask.progress = progress;\n\n                    if (text != null) {\n                        dialogMask.text = text;\n                    }\n                }\n            }\n        });\n\n        me.currentExportPromise = me.export(values);\n\n        // Clear current export promise\n        me.currentExportPromise.catch(() => {}).finally(() => {\n            detacher();\n            me.exportDialog?.unmask();\n            me.currentExportPromise = null;\n        });\n    }\n\n    showLoadingToast(exportPromise) {\n        const toast = Toast.show({\n            timeout      : 0,\n            showProgress : false,\n            rootElement  : this.rootElement,\n            html         : `\n    <span class=\"b-mask-icon b-icon b-icon-spinner\"></span>\n    <span>${this.exportProgressMask}</span>\n    <button class=\"b-button\">${this.L('L{Click to abort}')}</button>`\n        });\n\n        EventHelper.on({\n            element : toast.element,\n            click() {\n                exportPromise.abort?.();\n            }\n        });\n\n        return toast;\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Grid');\n\n// Format expected by export server\n// const pageFormat = {\n//     html       : '',\n//     column     : 1,\n//     number     : 1,\n//     row        : 1,\n//     rowsHeight : 1\n// };\n//\n// const format = {\n//     fileFormat  : 'pdf',\n//     format      : 'A4',\n//     orientation : 'portrait',\n//     range       : 'complete',\n//     html        : { array : JSON.stringify(pageFormat) }\n// };\n"],"names":["Target","SummaryFormatter","Base","$name","generateHtml","column","records","cls","groupRecord","groupField","groupValue","store","summaries","sum","renderer","summaryRenderer","html","forEach","config","type","field","max","min","average","length","reduce","record","value","getValue","seed","valueCls","labelHtml","label","valueHtml","summaryHtml","String","includes","RowReorder","Delayable","InstancePlugin","configurable","showGrip","gripOnly","hoverExpandTimeout","touchStartDelay","dropOnLeaf","dragHelperConfig","deprecatedEvents","gridRowBeforeDragStart","product","invalidAsOfVersion","message","gridRowDragStart","gridRowDrag","gridRowBeforeDropFinalize","gridRowDrop","gridRowAbort","construct","grid","arguments","doDestroy","_this$dragHelper","dragHelper","destroy","init","me","DragHelper","new","name","cloneTarget","dragThreshold","proxyTopOffset","targetSelector","lockX","dragWithin","bodyContainer","allowDropOutside","scrollManager","outerElement","targetSubGridElement","isElementDraggable","bind","monitoringConfig","scrollables","element","scrollable","direction","setXY","x","y","context","started","elementRect","Rectangle","from","pointerDownOffset","startPageY","globalThis","pageYOffset","getBoundingClientRect","top","DomHelper","setTranslateXY","ignoreSamePositionDrop","createProxy","clone","cloneNode","container","document","createElement","classList","add","removeAttribute","style","transform","width","appendChild","selectedRecords","clone2","removeClsGlobally","internalListeners","beforedragstart","dragstart","drag","drop","abort","reset","prio","thisObj","relayEvents","dropIndicator","className","dropOverTargetCls","pluginConfig","after","targetSubGrid","regions","subGrids","el","event","closest","firstCell","gripperStyle","getComputedStyle","offsetX","rtl","borderOffsetX","onGrip","roundPx","parseFloat","client","preventDragSelect","onBeforeDragStart","source","subGridEl","disabled","readOnly","isTreeGrouped","contains","startRecord","getRecordFromElement","isSpecialRow","originalRowTop","rowManager","getRowFor","selectionMode","checkboxOnly","startEvent","pointerType","isSelected","selectRow","addToSelection","shiftKey","ctrlKey","filter","r","push","sort","r1","r2","indexOf","onDragStart","_cellMenu$hideContext","_headerMenu$hideConte","cellEdit","cellMenu","headerMenu","features","cellEditDisabledState","hideContextMenu","call","focusedCell","querySelector","remove","firstElementChild","onDrag","clientY","valid","row","getRowAt","overRecord","dataIndex","over","insertBefore","rowTop","quarter","height","topQuarter","middleY","bottomQuarter","getAt","tree","isParent","isGrouped","isGroupHeader","meta","collapsed","pageY","_bodyRectangle","first","count","last","getRow","reorderValid","_rowManager$getRowByI","getRowById","removeCls","nextSibling","some","rec","parent","clearTimeout","hoverTimer","isExpanded","setTimeout","expand","toggleCls","setTranslateY","Math","visibility","toggle","onDrop","async","oldPositionContext","map","_record$parent","parentId","id","parentIndex","result","trigger","animateProxyTo","align","finalizeReorder","onAbort","_context$parent$child","_context$parent$child2","bubbleWhile","tryInsertChild","children","move","getNext","_rowIndex","_focusedCell","focusCell","columnId","clearSorters","finalize","onReset","onPaint","firstPaint","updateShowGrip","show","isDragging","featureClass","_$name","GridFeatureManager","registerFeature","Summary","selectedOnly","hideFooters","chain","bindStore","detachListeners","ion","change","doDisable","disable","updateSummaries","eachSubGrid","subGrid","syncPartners","renderRows","cells","isFiltered","storage","values","allRecords","columns","_column$summaries","initialSeed","Object","assign","cellElement","dataset","get","innerHTML","sync","onStoreChange","action","changes","shouldUpdate","keys","colField","Boolean","updateSelectedOnly","selectionChange","refresh","ExportRowsCombo","Combo","defaultConfig","editable","buildItems","RowsRange","all","text","L","visible","initClass","ExportOrientationCombo","Orientation","portrait","landscape","buildComboItems","obj","fn","key","ExportDialog","Popup","autoShow","autoClose","closable","centered","autoSelectVisibleColumns","hidePNGMultipageOption","title","maxHeight","overflowY","defaults","localeClass","items","columnsField","valueField","displayField","multiSelect","weight","rowsRangeField","exporterTypeField","dialog","exporters","exporter","optionalL","onChange","owner","widgetMap","alignRowsField","hidden","repeatHeaderField","checked","fileFormatField","oldValue","exporterField","find","FileFormat","png","_previousDisabled","_previousValue","paperFormatField","orientationField","bbar","exportButton","color","onClick","cancelButton","Error","columnsStore","isLeaf","exportable","excludeCollapsedRecords","applyInitialValues","LocaleManager","locale","labelWidth","toUpperCase","PaperFormat","onBeforeShow","_super$onBeforeShow","query","c","onLocaleChange","eachWidget","widget","Field","onExportClick","onCancelClick","hide","fieldRe","test","ref","replace","Checkbox","MultiPageExporter","Exporter","exportingPageText","stateNextPage","rowsRange","enableDirectRendering","exportMeta","currentPage","verticalPosition","lastExportedRowBottom","verticalPages","horizontalPosition","currentPageTopMargin","lastTop","lastRowIndex","firstVisibleRow","lastRowDataIndex","scrollRowIntoView","firstVisibleDataIndex","block","prepareComponent","headerTpl","footerTpl","alignRows","paperFormat","isPortrait","orientation","paperWidth","paperHeight","pageWidth","inchToPx","pageHeight","onlyVisibleRows","horizontalPages","ceil","totalWidth","contentHeight","measureElement","totalPages","totalHeight","totalRows","getVisibleRowsCount","headerHeight","footerHeight","bodyHeight","scrollHeight","rowHeight","rowOffsetHeight","rowsOnFirstPage","floor","rowsPerPage","remainingRows","adjustRowBuffer","restoreComponent","restoreRowBuffer","collectRows","rows","onlyVisible","hasMergeCells","hasActiveFeature","remainingHeight","index","findIndex","bottom","firstRowIndex","overflowingHeight","lastDataIndex","offset","offsetHeight","collectRow","subGridName","mergedCells","querySelectorAll","mergedCellsHtml","mergedCell","outerHTML","lastRow","exactGridHeight","footerContainer","headerContainer","onRowsCollected","slice","scrollableTopMargin","detacher","offsetRows","fakeRow","previousTop","render","translate","renderMergedCells","buildPage","getVirtualScrollerHeight","header","footer","prepareHTML","buildPageHtml","prepareExportElement","placeHolder","placeHolderText","contentHtml","join","marginTop","prototype","pagesExtractor","stylesheets","progress","round","styles","pageTpl","MultiPageVerticalExporter","processedRows","size","estimateTotalPages","repeatHeader","scale","getScaleValue","bodyElement","initialScroll","rowsHeight","firstRow","lastVisibleRow","finishRowIndex","Set","clientHeaderHeight","nextPageTop","gridHeight","SinglePageExporter","localize","centerContentHorizontally","positionRows","currentTop","lastProcessedRowIndex","firstNewRowIndex","lastNewRowIndex","fromIndex","toIndex","i","totalClientHeight","widthScale","heightScale","BrowserHelper","isIE11","PdfExport","dialogClass","exportServer","undefined","exportDialog","$config","fileName","fileFormat","clientURL","keepRegionSizes","pagesPerRequest","exporterConfig","exporterType","translateURLsToAbsolute","keepPathName","openAfterExport","sendAsBinary","openInNewTab","fetchOptions","exportMask","exportProgressMask","showErrorToast","localizableProperties","filterStyles","updateEnableDirectRendering","VersionHelper","deprecate","_this$exportDialog","exportersMap","currentExportPromise","_currentExportPromise","_exportersMap","Map","getExporter","has","exporterClass","ObjectHelper","relayAll","set","buildExportConfig","visibleColumns","$$name","export","isExporting","mask","_me$exportDialog","pages","isDestroying","close","unmask","contentGenerated","responsePromise","receiveExportContent","toast","showLoadingToast","response","processExportContent","error","Response","_me$exportDialog2","Toast","rootElement","ok","AjaxHelper","fetch","method","credentials","headers","body","JSON","stringify","format","contentType","match","MIMEType","FileMIMEType","objectURL","responseBlobToObjectURL","link","getDownloadLink","click","responseJSON","json","success","url","msg","mimeType","blob","URL","createObjectURL","href","download","target","defaultExportDialogConfig","copyProperties","changeExportDialog","oldExportDialog","mergeConfigs","onExportButtonClick","showExportDialog","dialogMask","maxProgress","exportstep","catch","finally","_me$exportDialog3","exportPromise","timeout","showProgress","EventHelper","on","_exportPromise$abort"],"mappings":"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,CAAyBH,uBAAAA,EAAAA,QAAS,CAAIG,EAAAA,EAAAA,SAAU,CAAM,KAAA,CAAA,CAAA;AACjE,SAAA;AACA;aACK;AACDC,UAAAA,WAAW,GAAGD,SAAS,CAAA;AAC3B,SAAA;QACAjB,IAAI,IAAK,CAAMkB,IAAAA,EAAAA,WAAY,CAAM,KAAA,CAAA,CAAA;AACrC,OAAA;AACJ,KAAC,CAAC,CAAA;IACF,OAAOlB,IAAI,GAAG,UAAU,CAAA;AAC5B,GAAA;AACJ,CAAC;;AC7FD;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMqB,UAAU,SAASC,SAAS,CAACC,cAAc,CAAC,CAAC;AAC9D;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;EACA,OAAOpC,KAAK,GAAG,YAAY,CAAA;AAC3B,EAAA,OAAOqC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACQC,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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMsR,SAAS,SAASlgB,cAAc,CAAC;EAClD,WAAWpC,KAAKA,GAAG;AACf,IAAA,OAAO,WAAW,CAAA;AACtB,GAAA;EACA,WAAWqC,YAAYA,GAAG;IACtB,OAAO;AACHkgB,MAAAA,WAAW,EAAIzN,YAAY;AAC3B;AACZ;AACA;AACA;AACY0N,MAAAA,YAAY,EAAGC,SAAS;AACxB;AACZ;AACA;AACA;AACY;AACZ;AACA;AACA;AACYC,MAAAA,YAAY,EAAG;AACXlhB,QAAAA,KAAK,EAAG,IAAI;QACZmhB,OAAO,EAAG,CAAC,MAAM,CAAA;OACpB;AACD;AACZ;AACA;AACA;AACYC,MAAAA,QAAQ,EAAG,IAAI;AACf;AACZ;AACA;AACA;AACA;AACA;AACYC,MAAAA,UAAU,EAAG,KAAK;AAClB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,SAAS,EAAG,IAAI;AAChB;AACZ;AACA;AACA;AACA;AACA;AACY9H,MAAAA,WAAW,EAAG,IAAI;AAClB;AACZ;AACA;AACA;AACA;AACA;AACYE,MAAAA,WAAW,EAAG,UAAU;AACxB;AACZ;AACA;AACA;AACA;AACA;AACYtB,MAAAA,SAAS,EAAG,KAAK;AACjB;AACZ;AACA;AACA;AACA;AACYmB,MAAAA,SAAS,EAAG,KAAK;AACjB;AACZ;AACA;AACA;AACA;AACA;AACY0F,MAAAA,YAAY,EAAG,KAAK;AACpB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYsC,MAAAA,eAAe,EAAG,IAAI;AACtB;AACZ;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,eAAe,EAAG,CAAC;AACnB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,cAAc,EAAG,IAAI;AACrB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,YAAY,EAAG,YAAY;AAC3B;AACZ;AACA;AACA;AACA;AACY9M,MAAAA,SAAS,EAAG,CAACkL,kBAAkB,EAAE9H,iBAAiB,EAAE6G,yBAAyB,CAAC;AAC9E;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACY8C,MAAAA,uBAAuB,EAAG,IAAI;AAC9B;AACZ;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,YAAY,EAAG,IAAI;AACnB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,eAAe,EAAG,IAAI;AACtB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,YAAY,EAAG,KAAK;AACpB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,YAAY,EAAG,KAAK;AACpB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY1I,MAAAA,SAAS,EAAG,IAAI;AAChB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,SAAS,EAAG,IAAI;AAChB;AACZ;AACA;AACA;AACA;AACA;AACY0I,MAAAA,YAAY,EAAG,IAAI;AACnB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,UAAU,EAAG,qBAAqB;AAClC;AACZ;AACA;AACA;AACA;AACYC,MAAAA,kBAAkB,EAAG,qCAAqC;AAC1D;AACZ;AACA;AACA;AACA;AACYC,MAAAA,cAAc,EAAG,IAAI;AACrBC,MAAAA,qBAAqB,EAAG,CAAC,YAAY,EAAE,oBAAoB,CAAC;AAC5D;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,YAAY,EAAG1D,MAAM,IAAIA,MAAM;AAC/B;AACZ;AACA;AACA;AACA;AACA;AACYtG,MAAAA,qBAAqB,EAAG,IAAA;KAC3B,CAAA;AACL,GAAA;EACAiK,2BAA2BA,CAACtiB,KAAK,EAAE;IAC/B,IAAI,CAACA,KAAK,EAAE;MACRuiB,aAAa,CAACC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,kCAAkC,CAAC,CAAA;AAChF,KAAA;AACJ,GAAA;AACAvgB,EAAAA,SAASA,GAAG;AAAA,IAAA,IAAAwgB,kBAAA,CAAA;IACR,CAAAA,kBAAA,GAAI,IAAA,CAACvB,YAAY,MAAA,IAAA,IAAAuB,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjBA,kBAAA,CAAmBrgB,OAAO,EAAE,CAAA;AAC5B,IAAA,IAAI,CAACsgB,YAAY,CAACpjB,OAAO,CAACuV,QAAQ,IAAIA,QAAQ,CAACzS,OAAO,EAAE,CAAC,CAAA;IACzD,KAAK,CAACH,SAAS,EAAE,CAAA;AACrB,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,IAAI0gB,oBAAoBA,GAAG;IACvB,OAAO,IAAI,CAACC,qBAAqB,CAAA;AACrC,GAAA;EACA,IAAID,oBAAoBA,CAAC3iB,KAAK,EAAE;IAC5B,IAAI,CAAC4iB,qBAAqB,GAAG5iB,KAAK,CAAA;AACtC,GAAA;EACA,IAAI0iB,YAAYA,GAAG;AACf,IAAA,OAAO,IAAI,CAACG,aAAa,KAAK,IAAI,CAACA,aAAa,GAAG,IAAIC,GAAG,EAAE,CAAC,CAAA;AACjE,GAAA;AACAC,EAAAA,WAAWA,CAACxjB,MAAM,GAAG,EAAE,EAAE;IACrB,MACI+C,EAAE,GAAiB,IAAI;AACvB,MAAA;AAAEogB,QAAAA,YAAAA;AAAa,OAAC,GAAGpgB,EAAE;AACrB,MAAA;AAAE9C,QAAAA,IAAAA;AAAK,OAAC,GAAWD,MAAM,CAAA;AAC7B,IAAA,IAAIsV,QAAQ,CAAA;AACZ,IAAA,IAAI6N,YAAY,CAACM,GAAG,CAACxjB,IAAI,CAAC,EAAE;AACxBqV,MAAAA,QAAQ,GAAG6N,YAAY,CAACpR,GAAG,CAAC9R,IAAI,CAAC,CAAA;AACjC0R,MAAAA,MAAM,CAACC,MAAM,CAAC0D,QAAQ,EAAEtV,MAAM,CAAC,CAAA;AACnC,KAAC,MACI;AACD,MAAA,MAAM0jB,aAAa,GAAG,IAAI,CAACrO,SAAS,CAACa,IAAI,CAAC7W,GAAG,IAAIA,GAAG,CAACY,IAAI,KAAKA,IAAI,CAAC,CAAA;MACnE,IAAI,CAACyjB,aAAa,EAAE;AAChB,QAAA,MAAM,IAAI5M,KAAK,CAAE,CAAgB7W,cAAAA,EAAAA,IAAK,+CAA8C,CAAC,CAAA;AACzF,OAAA;AACAD,MAAAA,MAAM,GAAG2jB,YAAY,CAACpe,KAAK,CAACvF,MAAM,CAAC,CAAA;MACnC,OAAOA,MAAM,CAACC,IAAI,CAAA;AAClBqV,MAAAA,QAAQ,GAAG,IAAIoO,aAAa,CAAC1jB,MAAM,CAAC,CAAA;AACpCsV,MAAAA,QAAQ,CAACsO,QAAQ,CAAC7gB,EAAE,CAAC,CAAA;AACrBogB,MAAAA,YAAY,CAACU,GAAG,CAAC5jB,IAAI,EAAEqV,QAAQ,CAAC,CAAA;AACpC,KAAA;AACA,IAAA,OAAOA,QAAQ,CAAA;AACnB,GAAA;AACAwO,EAAAA,iBAAiBA,CAAC9jB,MAAM,GAAG,EAAE,EAAE;IAC3B,MACI+C,EAAE,GAAG,IAAI;AACT,MAAA;QACIqF,MAAM;QACNqZ,YAAY;QACZM,SAAS;QACTD,UAAU;QACVD,QAAQ;QACR5H,WAAW;QACXpB,SAAS;QACTmB,SAAS;QACT0F,YAAY;QACZsC,eAAe;QACf7H,WAAW;QACXiI,uBAAuB;QACvBC,YAAY;QACZE,YAAY;QACZzI,SAAS;QACTC,SAAS;QACT+I,YAAY;AACZhK,QAAAA,qBAAAA;AACJ,OAAC,GAAI/V,EAAE,CAAA;AACX,IAAA,IAAI,CAAC/C,MAAM,CAACwR,OAAO,EAAE;MACjBxR,MAAM,CAACwR,OAAO,GAAGpJ,MAAM,CAACoJ,OAAO,CAACuS,cAAc,CAACna,MAAM,CAACzK,MAAM,IAAIA,MAAM,CAAC8X,UAAU,CAAC,CAAC/I,GAAG,CAAC/O,MAAM,IAAIA,MAAM,CAACkP,EAAE,CAAC,CAAA;AAC/G,KAAA;AACA,IAAA,MAAME,MAAM,GAAGoV,YAAY,CAAC/R,MAAM,CAAC;MAC/BxJ,MAAM;MACNqZ,YAAY;MACZM,SAAS;MACTD,UAAU;MACV7H,WAAW;MACXpB,SAAS;MACTmB,SAAS;MACT0F,YAAY;MACZsC,eAAe;MACf7H,WAAW;MACXiI,uBAAuB;MACvBC,YAAY;MACZE,YAAY;MACZzI,SAAS;MACTC,SAAS;MACTjB,qBAAqB;MACrBqJ,YAAY,EAAGpf,EAAE,CAACof,YAAY;AAC9BN,MAAAA,QAAQ,EAAOA,QAAQ,IAAIzZ,MAAM,CAAC4b,MAAAA;KACrC,EAAEhkB,MAAM,CAAC,CAAA;AACV;IACAuO,MAAM,CAACiD,OAAO,GAAGxR,MAAM,CAACwR,OAAO,CAACkM,KAAK,EAAE,CAAA;AACvC;AACA,IAAA,IAAInP,MAAM,CAAC4T,YAAY,KAAK,mBAAmB,EAAE;MAC7C5T,MAAM,CAACmR,YAAY,GAAG,KAAK,CAAA;AAC/B,KAAA;AACA;IACA,IAAI,EAAE,WAAW,IAAI1f,MAAM,CAAC,IAAIA,MAAM,CAAC0f,YAAY,EAAE;MACjDnR,MAAM,CAACyL,SAAS,GAAG,IAAI,CAAA;AAC3B,KAAA;AACAzL,IAAAA,MAAM,CAAC2T,cAAc,GAAGyB,YAAY,CAAC/R,MAAM,CAAC;MACxC3R,IAAI,EAAsBsO,MAAM,CAAC4T,YAAY;MAC7CC,uBAAuB,EAAG7T,MAAM,CAAC6T,uBAAuB;MACxDC,YAAY,EAAc9T,MAAM,CAAC8T,YAAY;AAC7CS,MAAAA,YAAAA;AACJ,KAAC,EAAEvU,MAAM,CAAC2T,cAAc,IAAI,EAAE,CAAC,CAAA;IAC/B,OAAO3T,MAAM,CAAC4T,YAAY,CAAA;IAC1B,OAAO5T,MAAM,CAAC6T,uBAAuB,CAAA;IACrC,OAAO7T,MAAM,CAAC8T,YAAY,CAAA;AAC1B,IAAA,OAAO9T,MAAM,CAAA;AACjB,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAAM0V,MAAMA,CAACjkB,MAAM,GAAG,EAAE,EAAE;IACtB,MACI+C,EAAE,GAAG,IAAI;AACT,MAAA;QACIqF,MAAM;AACN6Z,QAAAA,eAAAA;AACJ,OAAC,GAAIlf,EAAE,CAAA;AACX/C,IAAAA,MAAM,GAAG+C,EAAE,CAAC+gB,iBAAiB,CAAC9jB,MAAM,CAAC,CAAA;AACrC,IAAA,IAAIuO,MAAM,CAAA;AACV;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,IAAA,IAAInG,MAAM,CAACoG,OAAO,CAAC,iBAAiB,EAAE;AAAExO,MAAAA,MAAAA;KAAQ,CAAC,KAAK,KAAK,EAAE;MACzDoI,MAAM,CAAC8b,WAAW,GAAG,IAAI,CAAA;AACzB;AACA;AACA9b,MAAAA,MAAM,CAAC+b,IAAI,CAACphB,EAAE,CAAC2f,UAAU,CAAC,CAAA;MAC1B,IAAI;QACA,MAAMpN,QAAQ,GAAGvS,EAAE,CAACygB,WAAW,CAACxjB,MAAM,CAACkiB,cAAc,CAAC,CAAA;QACtD,IAAID,eAAe,KAAK,CAAC,EAAE;AAAA,UAAA,IAAAmC,gBAAA,CAAA;UACvB,MAAMC,KAAK,GAAG,MAAM/O,QAAQ,CAAC2O,MAAM,CAACjkB,MAAM,CAAC,CAAA;UAC3C,IAAI+C,EAAE,CAACuhB,YAAY,EAAE;AACjB,YAAA,OAAA;AACJ,WAAA;AACA;AACA,UAAA,CAAAF,gBAAA,GAAArhB,EAAE,CAAC4e,YAAY,MAAA,IAAA,IAAAyC,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,gBAAA,CAAiBG,KAAK,EAAE,CAAA;AACxB;UACAnc,MAAM,CAACoc,MAAM,EAAE,CAAA;AACf;AACpB;AACA;AACA;AACA;AACA;AACoBzhB,UAAAA,EAAE,CAACyL,OAAO,CAAC,YAAY,EAAE;AAAE0Q,YAAAA,QAAQ,EAAG,EAAE;YAAE/L,IAAI,EAAGpQ,EAAE,CAAC4f,kBAAkB;AAAE8B,YAAAA,gBAAgB,EAAG,IAAA;AAAK,WAAC,CAAC,CAAA;UAClG,MAAMC,eAAe,GAAG3hB,EAAE,CAAC4hB,oBAAoB,CAACN,KAAK,EAAErkB,MAAM,CAAC,CAAA;AAC9D;UACA+C,EAAE,CAAC6hB,KAAK,GAAG7hB,EAAE,CAAC8hB,gBAAgB,CAACH,eAAe,CAAC,CAAA;UAC/C,MAAMI,QAAQ,GAAG,MAAMJ,eAAe,CAAA;AACtCnW,UAAAA,MAAM,GAAG;AAAEuW,YAAAA,QAAAA;WAAU,CAAA;AACrB,UAAA,MAAM/hB,EAAE,CAACgiB,oBAAoB,CAACD,QAAQ,EAAE9kB,MAAM,CAAC,CAAA;AACnD,SAAA;OACH,CACD,OAAOglB,KAAK,EAAE;QACV,IAAIA,KAAK,YAAYC,QAAQ,EAAE;AAC3B1W,UAAAA,MAAM,GAAG;AAAEuW,YAAAA,QAAQ,EAAGE,KAAAA;WAAO,CAAA;AACjC,SAAC,MACI;AACDzW,UAAAA,MAAM,GAAG;AAAEyW,YAAAA,KAAAA;WAAO,CAAA;AACtB,SAAA;AACA,QAAA,MAAMA,KAAK,CAAA;AACf,OAAC,SACO;QACJ,IAAIjiB,EAAE,CAAC6hB,KAAK,IAAI,CAAC7hB,EAAE,CAAC6hB,KAAK,CAACN,YAAY,EAAE;AACpC;AACAvhB,UAAAA,EAAE,CAAC6hB,KAAK,CAACzM,IAAI,EAAE,CAAA;AACnB,SAAA;AACA,QAAA,IAAI,CAACpV,EAAE,CAACuhB,YAAY,EAAE;AAAA,UAAA,IAAAY,iBAAA,CAAA;AAClB;AACA,UAAA,CAAAA,iBAAA,GAAAniB,EAAE,CAAC4e,YAAY,MAAA,IAAA,IAAAuD,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,iBAAA,CAAiBX,KAAK,EAAE,CAAA;UACxBnc,MAAM,CAACoc,MAAM,EAAE,CAAA;UACf,IAAIzhB,EAAE,CAAC6f,cAAc,EAAE;AACnB;YACA,IAAIrU,MAAM,CAACyW,KAAK,EAAE;AACd,cAAA,IAAIzW,MAAM,CAACyW,KAAK,CAAC9hB,IAAI,KAAK,YAAY,EAAE;gBACpCiiB,KAAK,CAACrV,IAAI,CAAC;AACPhQ,kBAAAA,IAAI,EAAUiD,EAAE,CAACqQ,CAAC,CAAC,kBAAkB,CAAC;kBACtCgS,WAAW,EAAGriB,EAAE,CAACqiB,WAAAA;AACrB,iBAAC,CAAC,CAAA;AACN,eAAA;aACH,MACI,IAAI,CAAC7W,MAAM,CAACuW,QAAQ,CAACO,EAAE,EAAE;cAC1BF,KAAK,CAACrV,IAAI,CAAC;AACPhQ,gBAAAA,IAAI,EAAUiD,EAAE,CAACqQ,CAAC,CAAC,iBAAiB,CAAC;gBACrCgS,WAAW,EAAGriB,EAAE,CAACqiB,WAAAA;AACrB,eAAC,CAAC,CAAA;AACN,aAAA;AACJ,WAAA;AACA;AACpB;AACA;AACA;AACA;AACA;AACA;AACoBhd,UAAAA,MAAM,CAACoG,OAAO,CAAC,WAAW,EAAED,MAAM,CAAC,CAAA;UACnCnG,MAAM,CAAC8b,WAAW,GAAG,KAAK,CAAA;AAC9B,SAAA;AACJ,OAAA;AACJ,KAAA;AACA,IAAA,OAAO3V,MAAM,CAAA;AACjB,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIoW,EAAAA,oBAAoBA,CAACN,KAAK,EAAErkB,MAAM,EAAE;IAChC,OAAOslB,UAAU,CAACC,KAAK,CACnBvlB,MAAM,CAACyhB,YAAY,EACnB9P,MAAM,CAACC,MAAM,CAAC;AACV4T,MAAAA,MAAM,EAAQ,MAAM;AACpBC,MAAAA,WAAW,EAAG,MAAM;AACpBC,MAAAA,OAAO,EAAO;AAAE,QAAA,cAAc,EAAG,kBAAA;OAAoB;AACrDC,MAAAA,IAAI,EAAUC,IAAI,CAACC,SAAS,CAAC;AACzB/lB,QAAAA,IAAI,EAAWukB,KAAK;QACpBlK,WAAW,EAAIna,MAAM,CAACma,WAAW;QACjC2L,MAAM,EAAS9lB,MAAM,CAACia,WAAW;QACjC6H,UAAU,EAAK9hB,MAAM,CAAC8hB,UAAU;QAChCD,QAAQ,EAAO7hB,MAAM,CAAC6hB,QAAQ;QAC9BE,SAAS,EAAM/hB,MAAM,CAAC+hB,SAAS;QAC/BQ,YAAY,EAAGviB,MAAM,CAACuiB,YAAAA;OACzB,CAAA;AACL,KAAC,EAAE,IAAI,CAACE,YAAY,CACxB,CAAC,CAAA;AACL,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAAMsC,oBAAoBA,CAACD,QAAQ,EAAE9kB,MAAM,EAAE;IACzC,MAAM+C,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,IAAI+hB,QAAQ,CAACO,EAAE,IAAItiB,EAAE,CAACuf,eAAe,EAAE;AACnC;AACAwC,MAAAA,QAAQ,GAAGA,QAAQ,CAACvf,KAAK,EAAE,CAAA;MAC3B,MAAMwgB,WAAW,GAAGjB,QAAQ,CAACY,OAAO,CAAC3T,GAAG,CAAC,cAAc,CAAC,CAAA;AACxD,MAAA,IAAIgU,WAAW,CAACC,KAAK,CAAC,2BAA2B,CAAC,EAAE;AAChD,QAAA,MACIC,QAAQ,GAAIC,YAAY,CAAClmB,MAAM,CAAC8hB,UAAU,CAAC;UAC3CqE,SAAS,GAAG,MAAMpjB,EAAE,CAACqjB,uBAAuB,CAACtB,QAAQ,EAAEmB,QAAQ,CAAC;UAChEI,IAAI,GAAQtjB,EAAE,CAACujB,eAAe,CAACtmB,MAAM,CAAC6hB,QAAQ,EAAEsE,SAAS,CAAC,CAAA;QAC9DE,IAAI,CAACE,KAAK,EAAE,CAAA;OACf,MACI,IAAIR,WAAW,CAACC,KAAK,CAAC,mBAAmB,CAAC,EAAE;AAC7C,QAAA,MAAMQ,YAAY,GAAG,MAAM1B,QAAQ,CAAC2B,IAAI,EAAE,CAAA;QAC1C,IAAID,YAAY,CAACE,OAAO,EAAE;AACtB,UAAA,MAAML,IAAI,GAAGtjB,EAAE,CAACujB,eAAe,CAACtmB,MAAM,CAAC6hB,QAAQ,EAAE2E,YAAY,CAACG,GAAG,CAAC,CAAA;UAClEN,IAAI,CAACE,KAAK,EAAE,CAAA;AAChB,SAAC,MACI;UACDpB,KAAK,CAACrV,IAAI,CAAC;YACPhQ,IAAI,EAAU0mB,YAAY,CAACI,GAAG;YAC9BxB,WAAW,EAAG,IAAI,CAACA,WAAAA;AACvB,WAAC,CAAC,CAAA;AACN,SAAA;AACJ,OAAA;AACJ,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAAMgB,uBAAuBA,CAACtB,QAAQ,EAAE+B,QAAQ,EAAE;AAC9C,IAAA,MAAMC,IAAI,GAAG,MAAMhC,QAAQ,CAACgC,IAAI,EAAE,CAAA;AAClC,IAAA,OAAOC,GAAG,CAACC,eAAe,CAACF,IAAI,CAACpJ,KAAK,CAAC,CAAC,EAAEoJ,IAAI,CAACtH,IAAI,EAAEqH,QAAQ,CAAC,CAAC,CAAA;AAClE,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIP,EAAAA,eAAeA,CAACpjB,IAAI,EAAE+jB,IAAI,EAAE;AACxB,IAAA,MAAMZ,IAAI,GAAG3gB,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CAAA;IACxC0gB,IAAI,CAACa,QAAQ,GAAGhkB,IAAI,CAAA;IACpBmjB,IAAI,CAACY,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,IAAI,CAACzE,YAAY,EAAE;MACnB6D,IAAI,CAACc,MAAM,GAAG,QAAQ,CAAA;AAC1B,KAAA;AACA,IAAA,OAAOd,IAAI,CAAA;AACf,GAAA;EACA,IAAIe,yBAAyBA,GAAG;AAC5B,IAAA,OAAOzD,YAAY,CAAC0D,cAAc,CAAC,EAAE,EAAE,IAAI,EAAE,CACzC,QAAQ,EACR,WAAW,EACX,cAAc,EACd,aAAa,EACb,YAAY,EACZ,aAAa,EACb,WAAW,EACX,WAAW,EACX,cAAc,CACjB,CAAC,CAAA;AACN,GAAA;AACAC,EAAAA,kBAAkBA,CAAC3F,YAAY,EAAE4F,eAAe,EAAE;IAC9C,MAAMxkB,EAAE,GAAG,IAAI,CAAA;AACfwkB,IAAAA,eAAe,aAAfA,eAAe,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,eAAe,CAAE1kB,OAAO,EAAE,CAAA;AAC1B,IAAA,IAAI8e,YAAY,EAAE;AACd,MAAA,MAAM3hB,MAAM,GAAG+C,EAAE,CAACye,WAAW,CAACgG,YAAY,CAAC;QACvCpC,WAAW,EAAGriB,EAAE,CAACqiB,WAAW;QAC5Bhd,MAAM,EAAQrF,EAAE,CAACqF,MAAM;AACvBwM,QAAAA,KAAK,EAAS;AACVM,UAAAA,cAAc,EAAG;YACbzU,KAAK,EAAGsC,EAAE,CAAC8V,SAAAA;WACd;AACD1D,UAAAA,iBAAiB,EAAG;YAChB1U,KAAK,EAAGsC,EAAE,CAACof,YAAAA;WACd;AACD3L,UAAAA,gBAAgB,EAAG;YACf/V,KAAK,EAAGsC,EAAE,CAACoX,WAAAA;WACd;AACD5D,UAAAA,gBAAgB,EAAG;YACf9V,KAAK,EAAGsC,EAAE,CAACkX,WAAAA;WACd;AACDpE,UAAAA,iBAAiB,EAAG;YAChBpV,KAAK,EAAGsC,EAAE,CAAC2c,YAAAA;WACd;AACD3J,UAAAA,eAAe,EAAG;YACdtV,KAAK,EAAGsC,EAAE,CAAC+e,UAAAA;WACd;AACDnM,UAAAA,cAAc,EAAG;YACbG,OAAO,EAAG/S,EAAE,CAACiX,SAAAA;AACjB,WAAA;AACJ,SAAA;AACJ,OAAC,EAAEjX,EAAE,CAACqkB,yBAAyB,EAAEzF,YAAY,CAAC,CAAA;MAC9CA,YAAY,GAAG5e,EAAE,CAACye,WAAW,CAACve,GAAG,CAACjD,MAAM,CAAC,CAAA;MACzC2hB,YAAY,CAACjR,GAAG,CAAC;QACbuT,MAAM,EAAIlhB,EAAE,CAAC0kB,mBAAmB;AAChC3gB,QAAAA,OAAO,EAAG/D,EAAAA;AACd,OAAC,CAAC,CAAA;AACN,KAAA;AACA,IAAA,OAAO4e,YAAY,CAAA;AACvB,GAAA;AACA;AACJ;AACA;EACI,MAAM+F,gBAAgBA,GAAG;AACrB,IAAA,OAAO,IAAI,CAAC/F,YAAY,CAAC7R,IAAI,EAAE,CAAA;AACnC,GAAA;AACA2X,EAAAA,mBAAmBA,CAAC;AAAEnW,IAAAA,MAAAA;AAAO,GAAC,EAAE;IAC5B,MACIvO,EAAE,GAAW,IAAI;AACjB4kB,MAAAA,UAAU,GAAG5kB,EAAE,CAAC4e,YAAY,CAACwC,IAAI,CAAC;AAC9BjF,QAAAA,QAAQ,EAAM,CAAC;AACf0I,QAAAA,WAAW,EAAG,GAAG;QACjBzU,IAAI,EAAUpQ,EAAE,CAAC2f,UAAAA;AACrB,OAAC,CAAC,CAAA;AACN,IAAA,MAAM9E,QAAQ,GAAG7a,EAAE,CAAC2N,GAAG,CAAC;AACpBmX,MAAAA,UAAUA,CAAC;QAAE3I,QAAQ;QAAE/L,IAAI;AAAEsR,QAAAA,gBAAAA;AAAiB,OAAC,EAAE;AAC7C,QAAA,IAAIA,gBAAgB,EAAE;AAClB1hB,UAAAA,EAAE,CAAC4e,YAAY,CAAC6C,MAAM,EAAE,CAAA;AACxB5G,UAAAA,QAAQ,EAAE,CAAA;AACd,SAAC,MACI;UACD+J,UAAU,CAACzI,QAAQ,GAAGA,QAAQ,CAAA;UAC9B,IAAI/L,IAAI,IAAI,IAAI,EAAE;YACdwU,UAAU,CAACxU,IAAI,GAAGA,IAAI,CAAA;AAC1B,WAAA;AACJ,SAAA;AACJ,OAAA;AACJ,KAAC,CAAC,CAAA;IACFpQ,EAAE,CAACqgB,oBAAoB,GAAGrgB,EAAE,CAACkhB,MAAM,CAAC3S,MAAM,CAAC,CAAA;AAC3C;AACAvO,IAAAA,EAAE,CAACqgB,oBAAoB,CAAC0E,KAAK,CAAC,MAAM,EAAE,CAAC,CAACC,OAAO,CAAC,MAAM;AAAA,MAAA,IAAAC,iBAAA,CAAA;AAClDpK,MAAAA,QAAQ,EAAE,CAAA;AACV,MAAA,CAAAoK,iBAAA,GAAAjlB,EAAE,CAAC4e,YAAY,MAAA,IAAA,IAAAqG,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,iBAAA,CAAiBxD,MAAM,EAAE,CAAA;MACzBzhB,EAAE,CAACqgB,oBAAoB,GAAG,IAAI,CAAA;AAClC,KAAC,CAAC,CAAA;AACN,GAAA;EACAyB,gBAAgBA,CAACoD,aAAa,EAAE;AAC5B,IAAA,MAAMrD,KAAK,GAAGO,KAAK,CAACrV,IAAI,CAAC;AACrBoY,MAAAA,OAAO,EAAQ,CAAC;AAChBC,MAAAA,YAAY,EAAG,KAAK;MACpB/C,WAAW,EAAI,IAAI,CAACA,WAAW;AAC/BtlB,MAAAA,IAAI,EAAY,CAAA;AAC5B;AACA,UAAY,EAAA,IAAI,CAAC6iB,kBAAmB,CAAA;AACpC,6BAAA,EAA+B,IAAI,CAACvP,CAAC,CAAC,mBAAmB,CAAE,CAAA,SAAA,CAAA;AACnD,KAAC,CAAC,CAAA;IACFgV,WAAW,CAACC,EAAE,CAAC;MACXnkB,OAAO,EAAG0gB,KAAK,CAAC1gB,OAAO;AACvBqiB,MAAAA,KAAKA,GAAG;AAAA,QAAA,IAAA+B,oBAAA,CAAA;AACJ,QAAA,CAAAA,oBAAA,GAAAL,aAAa,CAACthB,KAAK,MAAA,IAAA,IAAA2hB,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnBA,oBAAA,CAAA1d,IAAA,CAAAqd,aAAsB,CAAC,CAAA;AAC3B,OAAA;AACJ,KAAC,CAAC,CAAA;AACF,IAAA,OAAOrD,KAAK,CAAA;AAChB,GAAA;AACJ,CAAA;AACArD,SAAS,CAACtR,MAAM,GAAG,WAAW,CAAA;AAAEC,kBAAkB,CAACC,eAAe,CAACoR,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}