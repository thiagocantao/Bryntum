{"version":3,"file":"Responsive.js","sources":["../../../../Core/lib/Core/mixin/Featureable.js","../../../../Core/lib/Core/mixin/Fencible.js","../../../../Core/lib/Core/widget/FilterField.js","../../../../Core/lib/Core/widget/mixin/Responsive.js"],"sourcesContent":["import Base from '../Base.js';\nimport DynamicObject from '../util/DynamicObject.js';\n\n/**\n * @module Core/mixin/Featureable\n */\n\n/**\n * This mixin provides management of a set of features that can be manipulated via the `features` config.\n *\n * The first step in using `Featureable` is to define the family of features using `Factoryable` to declare a base\n * class for features to extend:\n *\n * ```javascript\n *  class SuperWidgetFeature extends InstancePlugin.mixin(Factoryable) {\n *      static get factoryable() {\n *          //\n *      }\n *  }\n * ```\n *\n * The various feature classes extend the `SuperWidgetFeature` base class and call `initClass()` to register themselves:\n *\n * ```javascript\n *  export default class AmazingSuperWidgetFeature extends SuperWidgetFeature {\n *      static get type() {\n *          return 'amazing';\n *      }\n *  }\n *\n *  AmazingSuperWidgetFeature.initClass();\n * ```\n *\n * A class that supports these features via `Featureable` is declared like so:\n *\n * ```javascript\n *  class SuperWidget extends Widget.mixin(Featureable) {\n *      static get featureable() {\n *          return {\n *              factory : SuperWidgetFeature\n *          };\n *      }\n *\n *      static get configurable() {\n *          return {\n *              // Declare the default features. These can be disabled by setting them to a falsy value. Using\n *              // configurable(), the value defined by this class is merged with values defined by derived classes\n *              // and ultimately the instance.\n *              features : {\n *                  amazing : {\n *                      ...\n *                  }\n *              }\n *          };\n *      }\n *  }\n *```\n * @mixin\n * @internal\n */\nexport default Target => class Featureable extends (Target || Base) {\n    static get $name() {\n        return 'Featureable';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Specifies the features to create and associate with the instance. The keys of this object are the names\n             * of features. The values are config objects for those feature instances.\n             *\n             * After construction, this property can be used to access the feature instances and even reconfigure them.\n             *\n             * For example:\n             * ```\n             *  instance.features.amazing = {\n             *      // reconfigure this feature\n             *  }\n             * ```\n             * This can also be done in bulk:\n             * ```\n             *  instance.features = {\n             *      amazing : {\n             *          // reconfigure this feature\n             *      },\n             *      // reconfigure other features\n             *  }\n             * ```\n             * @config {Object}\n             */\n            features : null\n        };\n    }\n\n    static get declarable() {\n        return [\n            /**\n             * This property getter returns options that control feature management for the derived class. This\n             * property getter must be defined by the class that mixes in `Featureable` in order to initialize the\n             * class properly.\n             * ```\n             *  class SuperWidget extends Widget.mixin(Featureable) {\n             *      static get featureable() {\n             *          return {\n             *              factory : SuperWidgetFeature\n             *          };\n             *      }\n             *      ...\n             *  }\n             * ```\n             * @static\n             * @member {Object} featureable\n             * @property {Core.mixin.Factoryable} featureable.factory The factoryable class (not one of its instances)\n             * that will be used to create feature instances.\n             * @property {String} [featureable.ownerName='client'] The config or property to assign on each feature as\n             * a reference to its creator, the `Featureable` instance.\n             * @internal\n             */\n            'featureable'\n        ];\n    }\n\n    static setupFeatureable(cls) {\n        const featureable = {\n            ownerName : 'client',\n            ...cls.featureable\n        };\n\n        featureable.factory.initClass();\n\n        // Replace the class/static getter with a new one that returns the complete featureable object:\n        Reflect.defineProperty(cls, 'featureable', {\n            get() {\n                return featureable;\n            }\n        });\n    }\n\n    doDestroy() {\n        const features = this.features;\n\n        super.doDestroy();\n\n        for (const name in features) {\n            const feature = features[name];\n            // Feature might be false or destroyed already by Grid (EventList mixes in CalendarMixin which has this mixin)\n            feature.destroy?.();\n        }\n    }\n\n    /**\n     * Returns `true` if the specified feature is active for this instance and `false` otherwise.\n     * @param {String} name The feature name\n     * @returns {Boolean}\n     */\n    hasFeature(name) {\n        return Boolean(this.features?.[name]);\n    }\n\n    changeFeatures(features, was) {\n        if (this.isDestroying) {\n            return;\n        }\n\n        const\n            me = this,\n            { featureable } = me.constructor,\n            manager = me.$features || (me.$features = new DynamicObject({\n                configName : 'features',\n                factory    : featureable.factory,\n                owner      : me,\n                ownerName  : featureable.ownerName\n            }));\n\n        manager.update(features);\n\n        if (!was) {\n            // Only return the target once. Further calls are processed above so we need to return undefined to ensure\n            // onConfigChange is called. By returning the same target on 2nd+ call, it passes the === test and won't\n            // trigger onConfigChange.\n            return manager.target;\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    getCurrentConfig(options) {\n        const\n            result       = super.getCurrentConfig(options),\n            { features } = result;\n\n        if (features) {\n            // Replace empty configs with `true`\n            for (const featureName in features) {\n                if (Object.keys(features[featureName]).length === 0) {\n                    features[featureName] = true;\n                }\n            }\n        }\n\n        return result;\n    }\n};\n","import ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Base from '../Base.js';\n\n/**\n * @module Core/mixin/Fencible\n */\n\nconst\n    { defineProperty } = Object,\n    { hasOwn }         = ObjectHelper,\n    fencibleSymbol     = Symbol('fencible'),\n    NONE               = [],\n    distinct           = array => Array.from(new Set(array)),\n    parseNames         = names => names ? distinct(StringHelper.split(names)) : NONE,\n\n    fenceMethod = (target, name, options) => {\n        if (options === true) {\n            options = name;\n        }\n\n        if (!ObjectHelper.isObject(options)) {\n            options = {\n                all : options\n            };\n        }\n\n        let any = parseNames(options.any);\n\n        const\n            all      = parseNames(options.all),\n            lock     = options.lock ? parseNames(options.lock) : distinct(all.concat(any)),\n            implName = name + 'Impl',\n            fence    = function(...params) {  // cannot use => since we need to receive \"this\" from the caller\n                const\n                    me = this,\n                    // For static methods we have to be careful to use hasOwn to check the \"point of entry\" (i.e., the\n                    // class reference used to call the method) since \".\" will climb the constructor's __proto__ chain\n                    // to find properties from a super class. This does not happen to instances since we never put our\n                    // fences object on the prototype chain.\n                    fences = hasOwn(me, fencibleSymbol) ? me[fencibleSymbol] : (me[fencibleSymbol] = {}),\n                    isFree = key => !fences[key];\n\n                if (all.every(isFree) && (!any || any.some(isFree))) {\n                    try {\n                        lock.forEach(key => (fences[key] = (fences[key] || 0) + 1));\n\n                        return me[implName](...params);\n                    }\n                    finally {\n                        lock.forEach(key => --fences[key]);\n                    }\n                }\n            };\n\n        any = any.length ? any : null;  // [].some(f) is always false, but [].every(f) is always true\n\n        !target[implName] && defineProperty(target, implName, {\n            configurable : true,\n            value        : target[name]\n        });\n\n        defineProperty(target, name, {\n            configurable : true,\n            value        : fence\n        });\n    };\n\n/**\n * A description of how to protect a method from reentry.\n *\n * A value of `true` is transformed using the key as the `all` value. For example, this:\n *\n * ```javascript\n *  class Foo extends Base.mixin(Fencible) {\n *      static fenced = {\n *          foo : true\n *      };\n * ```\n *\n * Is equivalent to this:\n *\n * ```javascript\n *  class Foo extends Base.mixin(Fencible) {\n *      static fenced = {\n *          foo : {\n *              all : ['foo']\n *          }\n *      };\n * ```\n *\n * Strings are split on spaces to produce the `all` array. For example, this:\n *\n * ```javascript\n *  class Foo extends Base.mixin(Fencible) {\n *      static fenced = {\n *          foo : 'foo bar'\n *      };\n * ```\n *\n * Is equivalent to this:\n *\n * ```javascript\n *  class Foo extends Base.mixin(Fencible) {\n *      static fenced = {\n *          foo : {\n *              all : ['foo', 'bar']\n *          }\n *      };\n * ```\n *\n * This indicates that `foo()` cannot be reentered if `foo()` or `bar()` are already executing. On entry to `foo()`,\n * both `foo()` and `bar()` will be fenced (prevented from entering).\n *\n * @typedef {Object} MethodFence\n * @property {String|String[]} [all] One or more keys that must all be currently unlocked to allow entry to the fenced\n * method. String values are converted to an array by splitting on spaces.\n * @property {String|String[]} [any] One or more keys of which at least one must be currently unlocked to allow entry\n * to the fenced method. String values are converted to an array by splitting on spaces.\n * @property {String|String[]} [lock] One or more keys that will be locked on entry to the fenced method and released\n * on exit. String values are converted to an array by splitting on spaces. By default, this array includes all keys\n * in `all` and `any`.\n */\n\n/**\n * This mixin is used to apply reentrancy barriers to methods. For details, see\n * {@link Core.mixin.Fencible#property-fenced-static}.\n * @mixin\n * @internal\n */\nexport default Target => class Fencible extends (Target || Base) {\n    static $name = 'Fencible';\n\n    static declarable = [\n        /**\n         * This class property returns an object that specifies methods to be wrapped to prevent reentrancy.\n         *\n         * It is used like so:\n         * ```javascript\n         *  class Foo extends Base.mixin(Fencible) {\n         *      static fenced = {\n         *          reentrantMethod : true\n         *      };\n         *\n         *      reentrantMethod() {\n         *          // things() may cause reentrantMethod() to be called...\n         *          // but we won't be allowed to reenter this method since we are already inside it\n         *          this.things();\n         *      }\n         *  }\n         * ```\n         *\n         * This can also be used to protect mutually reentrant method groups:\n         *\n         * ```javascript\n         *  class Foo extends Base.mixin(Fencible) {\n         *      static fenced = {\n         *          foo : 'foobar'\n         *          bar : 'foobar'\n         *      };\n         *\n         *      foo() {\n         *          console.log('foo');\n         *          this.bar();\n         *      }\n         *\n         *      bar() {\n         *          console.log('bar');\n         *          this.foo();\n         *      }\n         *  }\n         *\n         *  instance = new Foo();\n         *  instance.foo();\n         *  >> foo\n         *  instance.bar();\n         *  >> bar\n         * ```\n         *\n         * The value for a fenced method value can be `true`, a string, an array of strings, or a\n         * {@link #typedef-MethodFence} options object.\n         *\n         * Internally these methods are protected by assigning a wrapper function in their place. The original function\n         * is moved to a new named property by appending 'Impl' to the original name. For example, in the above code,\n         * `foo` and `bar` are wrapper functions that apply reentrancy protection and call `fooImpl` and `barImpl`,\n         * respectively. This is important for inheritance and `super` calling because the new name must be used in\n         * order to retain the guard function implementations.\n         *\n         * @static\n         * @member {Object} fenced\n         * @internal\n         */\n        'fenced'\n    ];\n\n    static setupFenced(cls) {\n        let { fenced } = cls;\n        const\n            statics = fenced.static,\n            pairs = [];\n\n        if (statics) {\n            fenced = { ...fenced };\n            delete fenced.static;\n\n            pairs.push([statics, cls]);\n        }\n\n        pairs.push([fenced, cls.prototype]);\n\n        for (const [methods, target] of pairs) {\n            for (const methodName in methods) {\n                fenceMethod(target, methodName, methods[methodName]);\n            }\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n","import TextField from '../../Core/widget/TextField.js';\n\n/**\n * @module Core/widget/FilterField\n */\n\n/**\n * A simple text field for filtering a store.\n *\n * Allows filtering by {@link #config-field field}:\n *\n * ```javascript\n * const filterField = new FilterField({\n *    store : eventStore,\n *    field : 'name'\n * });\n * ```\n *\n * Or by using a {@link #config-filterFunction filter function} for greater control/custom logic:\n *\n * ```javascript\n * const filterField = new FilterField({\n *    store          : eventStore,\n *    filterFunction : (record, value) => record.name.includes(value)\n * });\n * ```\n *\n * @extends Core/widget/TextField\n * @classType filterfield\n * @widget\n */\nexport default class FilterField extends TextField {\n    static get $name() {\n        return 'FilterField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'filterfield';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The model field name to filter by. Can optionally be replaced by {@link #config-filterFunction}\n             * @config {String}\n             * @category Filtering\n             */\n            field : null,\n\n            /**\n             * The store to filter.\n             * @config {Core.data.Store}\n             * @category Filtering\n             */\n            store : null,\n\n            /**\n             * Optional filter function to be called with record and value as parameters for store filtering.\n             * ```javascript\n             * {\n             *     type           : 'filterfield',\n             *     store          : myStore,\n             *     filterFunction : (record, value)  => {\n             *        return record.text.includes(value);\n             *     }\n             * }\n             * ```\n             * @param {Core.data.Model} record Record for comparison\n             * @param {String} value Value to compare with\n             * @returns {Boolean} Return true if record matches comparison requirements\n             * @config {Function}\n             * @category Filtering\n             */\n            filterFunction : null,\n\n            clearable            : true,\n            revertOnEscape       : true,\n            keyStrokeChangeDelay : 100,\n\n            onChange({ value }) {\n                const { store, field, filterFunction } = this;\n\n                if (store) {\n                    const filterId = `${field || this.id}-Filter`;\n\n                    if (value.length === 0) {\n                        store.removeFilter(filterId);\n                    }\n                    else {\n                        let filterBy;\n\n                        if (filterFunction) {\n                            filterBy = record => filterFunction(record, value);\n                        }\n                        else {\n                            // We filter using a RegExp, so quote significant characters\n                            value = value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n                            filterBy = record => record.getValue(field)?.match(new RegExp(value, 'i'));\n                        }\n\n                        // A filter with an id replaces any previous filter with that id.\n                        // Leave any other filters which may be in use in place.\n                        store.filter({\n                            id : filterId,\n                            filterBy\n                        });\n                    }\n                }\n            }\n        };\n    }\n\n    updateValue(value, old) {\n        super.updateValue(value, old);\n\n        // Initial value, apply it\n        if (value && this.isConfiguring) {\n            this.onChange({ value });\n        }\n    }\n};\n\nFilterField.initClass();\n","import Base from '../../Base.js';\nimport BrowserHelper from '../../helper/BrowserHelper.js';\nimport FunctionHelper from '../../helper/FunctionHelper.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Fencible from '../../mixin/Fencible.js';\n\n/**\n * @module Core/widget/mixin/Responsive\n */\n\nconst\n    EMPTY = [],\n    isStateName = name => name[0] !== '*',\n    pop = (object, key) => {\n        const ret = object[key] || null;\n        delete object[key];\n        return ret;\n    },\n    responsiveRootFn = widget => widget.responsiveRoot,\n    scoring = {\n        number : threshold => ({ width }) => width <= threshold && threshold\n    },\n    splitConfigs = configs => {\n        delete configs.once;\n\n        return {\n            callback : pop(configs, 'callback'),\n            configs,\n            when     : pop(configs, 'when')\n        };\n    },\n    // We cheat a bit and leave \"once\", \"when\" and \"callback\" in the config object for the merge.\n    splitMergedConfigs = (cls, ...parts) => {\n        const\n            once = parts.flatMap(p => p?.once || EMPTY), // onces are not arrays, so are unchanged; ==> filter().map()\n            configs = cls.mergeConfigs(...parts),\n            ret = splitConfigs(configs);\n\n        ret.once = once.length ? splitConfigs(cls.mergeConfigs(...once)) : null;\n\n        return ret;\n    },\n    // Allow responsiveTarget to be a DOM element? (see git history for wrapElement impl)\n    wrapWidget = (widget, handler) => {\n        let triggers,\n            desc = Proxy.revocable(widget, {\n                get(o, name) {\n                    if (triggers) {\n                        triggers[name] = true;\n                    }\n\n                    return widget[name];\n                }\n            }),\n            detacher = FunctionHelper.after(widget, 'onConfigChange', (ignore, { name }) => {\n                if (triggers?.[name]) {\n                    handler();\n                }\n            }),\n            resizer = widget.ion({\n                resize : () => {\n                    handler();\n                }\n            });\n\n        widget.monitorResize = true;\n\n        return {\n            widget,\n\n            get object() {\n                return desc?.proxy;\n            },\n\n            destroy() {\n                if (desc) {\n                    desc.revoke();\n                    detacher();\n                    resizer();\n\n                    desc = detacher = resizer = null;\n                }\n            },\n\n            reset() {\n                triggers = Object.create(null);\n            }\n        };\n    };\n\n/**\n * A state definition object used by the {@link Core.widget.mixin.Responsive#config-responsive} config property.\n *\n * ```javascript\n *  {\n *      responsive : {\n *          small : {\n *              // a ResponsiveState object\n *              when : 400,\n *\n *              callback() {\n *                  console.log('Applied small not first time');\n *              },\n *\n *              once : {\n *                  mode : 'full',\n *\n *                  callback() {\n *                      console.log('Applied small first time');\n *                  }\n *              }\n *\n *              // All other properties are configs to apply when\n *              // the state is active\n *              text  : null,\n *              color : 'b-blue'\n *          }\n *      }\n *  }\n * ```\n *\n * See {@link Core.widget.mixin.Responsive} for more details.\n *\n * @typedef ResponsiveState\n * @property {ResponsiveState} once A `ResponsiveState` object applied only one time when a state is first activated. It\n * is not valid to specify a `when` or `once` property on these `ResponsiveState` objects. It is valid to supply a\n * `callback`, and if done, this callback will be called instead of the `callback` on the parent `ResponsiveState`\n * object on first activation.\n * @property {Function|Number} when A two argument function to return the score for the state, or a number for both the\n * width threshold and score. The arguments passed are as follows:\n *  - `widget` The {@link Core.widget.mixin.Responsive#config-responsiveTarget widget} whose properties should determine\n *  the state's score\n *  - `browserHelper` The {@link Core.helper.BrowserHelper} singleton object\n * @property {Function} [callback] An optional callback, called when the state is activated. This function receives an\n * object with the following properties:\n *  - `source` The instance whose state is being activated (typically a {@link Core.widget.Widget})\n *  - `target` The {@link Core.widget.Widget} identified as the {@link Core.widget.mixin.Responsive#config-responsiveTarget}\n *  - `state` The name of the newly active responsive state\n *  - `oldState` The name of the previously active responsive state\n */\n\n/**\n * A breakpoint definition. Used when defining breakpoints, see {@link #config-breakpoints}.\n *\n * ```javascript\n * {\n *     name    : 'Small',\n *     configs : {\n *         text  : null,\n *         color : 'b-blue'\n *     },\n *     callback() {\n *         console.log('Applied small');\n *     }\n * }\n * ```\n *\n * @typedef Breakpoint\n * @property {String} name Name of the breakpoint\n * @property {Object} [configs] An optional configuration object to apply to the widget when the breakpoint is activated\n * @property {Function} [callback] An optional callback, called when the breakpoint is activated\n * @deprecated 5.0 Breakpoints have been replaced by {@link Core.widget.mixin.Responsive#config-responsive}.\n */\n\n/**\n * This mixin provides management of a named set of {@link #typedef-ResponsiveState} objects that are conditionally\n * applied in response to the widget's size or other platform details. The names of the {@link #typedef-ResponsiveState}\n * objects are the keys of the {@link #config-responsive} config object. For example:\n *\n * ```javascript\n *  class ResponsiveButton extends Button.mixin(Responsive) {\n *      static configurable = {\n *          responsive : {\n *              small : {\n *                  // this is a ResponsiveState object named \"small\"\n *                  text : 'S'\n *              },\n *              medium : {\n *                  text : 'M'\n *              }\n *              large : {\n *                  text : 'L'\n *              }\n *          }\n *      };\n *  }\n * ```\n *\n * When the conditions are right for the button to be in the `'small'` responsive state, the `text` config will be set\n * to `'S'`.\n *\n * Any desired configs can be present in a {@link #typedef-ResponsiveState} object, however, the `when` and `callback`\n * properties have special meaning to this mixin and are reserved.\n *\n * ## Selecting the Responsive State\n *\n * To determine the current responsive state, the `when` property is consulted for each candidate state.\n *\n * If `when` is a number, it is understood to be a width threshold and, if the widget's `width` is equal or less than\n * that value, the score is that value. For example, a value of 400 would produce a score of 400 if the widget's width\n * were less than or equal to 400. If the widget's width is greater than 400, the state would be skipped.\n *\n * If `when` is a function, it is called with two parameters: a readonly reference to the widget and the\n * {@link Core.helper.BrowserHelper} singleton object. The function should return the numeric score if the state is\n * applicable, or `null` or `false` if the state should be skipped.\n *\n * The state that has the minimum score is selected as the responsive state for the widget.\n *\n * Consider the default responsive states and their `when` values:\n *\n * ```javascript\n *  responsive : {\n *      small : {\n *          when : 400\n *      },\n *\n *      medium : {\n *          when : 800\n *      },\n *\n *      large : {\n *          when : () => Infinity\n *      },\n *\n *      '*' : {}\n *  },\n * ```\n *\n * For example, if the width of the widget is 300: the score for the `small` responsive state is 400, the score for\n * the `medium` responsive state is 800, and the score for `large` is infinity. In effect, the `large` state is always\n * a candidate, but will also always lose to other candidate states. In this case, the `small` state has the minimum\n * score and is selected as the responsive state.\n *\n * If the width of the widget is 600: the `small` state would be skipped, while the `medium` and `large` states would\n * produce the same scores resulting in `medium` being the responsive state.\n *\n * The `when` functions have access to any properties of the widget instance in the first argument, but are also passed\n * the {@link Core.helper.BrowserHelper} singleton as a second argument. This can be used as shown in the following,\n * over-simplified example:\n *\n * ```javascript\n *  class ResponsiveWidget extends Widget.mixin(Responsive) {\n *      static configurable = {\n *          responsive : {\n *              small : {\n *                  when : ({ width }, { isMobileSafari }) => isMobileSafari && width <= 600 && 10\n *                  text : 'iPhone'\n *              },\n *              medium : {\n *                  when : ({ width }, { isMobileSafari }) => isMobileSafari && width <= 1024 && 20\n *                  text : 'iPad'\n *              }\n *              large : {\n *                  text : 'Desktop'\n *              }\n *          }\n *      };\n *  }\n * ```\n *\n * It is best to avoid mixing `when` threshold values and `when` functions as the resulting scores can be confusing.\n * @mixin\n */\nexport default Target => class Responsive extends (Target || Base).mixin(Delayable, Fencible) {\n    static $name = 'Responsive';\n\n    static configurable = {\n        /**\n         * Specifies the various responsive state objects keyed by their name. Each key (except `'*'`, see below) in\n         * this object is a state name (see {@link #config-responsiveState}) and its corresponding value is the\n         * associated {@link #typedef-ResponsiveState} object.\n         *\n         * Some properties of a `ResponsiveState` object are special, for example `when` and `callback`. All other\n         * properties of the state object are config properties to apply when that state is active.\n         *\n         * The `when` property can be a function that computes the score for the state. The state whose `when` function\n         * returns the lowest score is selected and its non-special properties will be assigned to the instance. If\n         * `when` is a number, it will be converted into a scoring function (see below).\n         *\n         * A `when` function accepts two readonly parameters and returns either a numeric score if the state should be\n         * considered, or `false` or `null` if the state should be ignored (i.e., it does match with the current state).\n         *\n         * The first parameter is a readonly proxy for the {@link #config-responsiveTarget widget} whose size and other\n         * properties determine the state's score. The proxy tracks property access to that widget in order to update\n         * the responsive state should any of those properties change.\n         *\n         * The second argument to a `when` function is the {@link Core.helper.BrowserHelper} singleton. This allows\n         * a `when` function to conveniently test platform and browser information.\n         *\n         * The state whose `when` function returns the lowest score is selected as the new\n         * {@link #config-responsiveState} and its config object (minus the `when` function and other special\n         * properties) is applied to the instance.\n         *\n         * If `when` is a number, it is converted to function. The following two snippets produce the same `when`\n         * scoring:\n         *\n         * ```javascript\n         *      small : {\n         *          when : 400,\n         *          ...\n         *      }\n         * ```\n         *\n         * The above converted to:\n         *\n         * ```javascript\n         *      small : {\n         *          when : ({ width }) => width <= 400 && 400,\n         *          ...\n         *      }\n         * ```\n         * Selecting the lowest score as the winner allows for the simple conversion of width threshold to score value,\n         * such that the state with the smallest matching width is selected.\n         *\n         * If the `responsive` config object has an asterisk key (`'*'`), its value is used as the default set of config\n         * properties to apply all other states. This will be the only config properties to apply if no `when` function\n         * returns a score. In this way, this special state object acts as a default state as well as a set of\n         * default values for other states to share. This state object has no `when` function.\n         *\n         * The default for this config is:\n         * ```javascript\n         *  {\n         *      small : {\n         *          when : 400\n         *      },\n         *\n         *      medium : {\n         *          when : 800\n         *      },\n         *\n         *      large : {\n         *          when : () => Infinity\n         *      },\n         *\n         *      '*' : {}\n         *  }\n         * ```\n         *\n         * A derived class (or instance) can use these states by populating other config properties, define\n         * additional states, and/or adjust the `when` properties to use different size thresholds.\n         *\n         * @config {Object}\n         */\n        responsive : {\n            $config : {\n                lazy : 'paint'\n            },\n\n            value : null\n        },\n\n        /**\n         * The defaults for the {@link #config-responsive} config. These are separated so that the act of setting the\n         * {@link #config-responsive} config is what triggers additional processing.\n         * @config {Object}\n         * @internal\n         * @default\n         */\n        responsiveDefaults : {\n            small : {\n                when : 400\n            },\n\n            medium : {\n                when : 800\n            },\n\n            large : {\n                when : () => Infinity\n            },\n\n            '*' : {}\n        },\n\n        /**\n         * Set to `true` to mark this instance as the default {@link #config-responsiveTarget} for descendants that do\n         * not specify an explicit {@link #config-responsiveTarget} of their own.\n         * @config {Boolean}\n         * @default false\n         */\n        responsiveRoot : null,\n\n        /**\n         * The name of the active state of the {@link #config-responsive} config. This is assigned internally\n         * and should not be assigned directly.\n         *\n         * @config {String}\n         * @readonly\n         */\n        responsiveState : null,\n\n        /**\n         * The widget whose size and other properties drive this object's responsive behavior. If this config is not\n         * specified, the closest ancestor that specified {@link #config-responsiveRoot responsiveRoot=true} will be\n         * used. If there is no such ancestor, then the instance using this mixin is used.\n         *\n         * If this value is set to `'@'`, then this instance is used even if there is a {@link #config-responsiveRoot}\n         * ancestor.\n         *\n         * If this config is a string that starts with `'@'`, the text following the first character is the name of the\n         * property on this instance that holds the target to use. For example, `'@owner'` to use the value of the\n         * `owner` property as the responsive target.\n         *\n         * If this config is a string that does not start with `'@'`, that string is passed to\n         * {@link Core.widget.Widget#function-up} to find the closest matching ancestor.\n         *\n         * If another widget is used as the `responsiveTarget` and if this instance does not specify any explicit `when`\n         * properties in its {@link #config-responsive} config, then the `when` definitions of the `responsiveTarget`\n         * will be used for this instance.\n         * @config {String|Core.widget.Widget}\n         */\n        responsiveTarget : {\n            value   : null,\n            $config : {\n                lazy : 'paint'\n            }\n        },\n\n        responsiveWidget : {\n            value   : null,\n            $config : {\n                nullify : true\n            }\n        },\n\n        /**\n         * Defines responsive breakpoints, based on max-width or max-height.\n         *\n         * When the widget is resized, the defined breakpoints are queried to find the closest larger or equal\n         * breakpoint for both width and height. If the found breakpoint differs from the currently applied, it is\n         * applied.\n         *\n         * Applying a breakpoint triggers an event that applications can catch to react to the change. It also\n         * optionally applies a set of configs and calls a configured callback.\n         *\n         * ```javascript\n         * breakpoints : {\n         *     width : {\n         *         50 : { name : 'small', configs : { text : 'Small', ... } }\n         *         100 : { name : 'medium', configs : { text : 'Medium', ... } },\n         *         '*' : { name : 'large', configs : { text : 'Large', ... } }\n         *     }\n         * }\n         * ```\n         *\n         * @config {Object}\n         * @param {Object} width Max-width breakpoints, with keys as numerical widths (or '*' for larger widths than the\n         * largest defined one) and the value as a {@link #typedef-Breakpoint breakpoint definition}\n         * @param {Object} height Max-height breakpoints, with keys as numerical heights (or '*' for larger widths than\n         * the largest defined one) and the value as a {@link #typedef-Breakpoint breakpoint definition}\n         * @deprecated 5.0 Use {@link #config-responsive} instead.\n         */\n        breakpoints : null\n    };\n\n    static delayable = {\n        responsiveUpdate : 'raf'\n    };\n\n    static fenced = {\n        syncResponsiveWidget : true\n    };\n\n    static prototypeProperties = {\n        responsiveStateChanges : 0,\n        responsiveUpdateCount  : 0\n    };\n\n    get isResponsivePending() {\n        return this.responsiveUpdateCount === 0 && this.hasConfig('responsive');\n    }\n\n    get isResponsiveUpdating() {\n        return this._responsiveUpdating || this.responsiveWidget?._responsiveUpdating;\n    }\n\n    // responsive\n\n    updateResponsive(responsive) {\n        const\n            me  = this,\n            cls = me.constructor,\n            { responsiveDefaults } = me,\n            stateNames = Array.from(\n                new Set(ObjectHelper.keys(responsive).concat(ObjectHelper.keys(responsiveDefaults)))).filter(isStateName);\n\n        let states = null,\n            hasWhen, name, state, when;\n\n        if (responsive) {\n            states = {\n                '*' : splitMergedConfigs(cls, responsiveDefaults['*'], responsive['*'])\n            };\n\n            for (name of stateNames) {\n                state = responsive[name];\n\n                if (state !== null && state !== false) {\n                    // Track whether any state has an explicit \"when\" property\n                    hasWhen = hasWhen || (state && 'when' in state);\n\n                    states[name] = splitMergedConfigs(cls,\n                        responsiveDefaults['*'], responsiveDefaults[name], responsive['*'], state);\n\n                    when = states[name].when;\n                    states[name].when = scoring[typeof when]?.(when) || when;  // convert numbers to fns based on width\n                }\n            }\n        }\n\n        me.$responsiveStates = states;\n        me.$responsiveWhen = hasWhen;\n        me.syncResponsiveWidget();\n    }\n\n    // responsiveState\n\n    updateResponsiveState(state, oldState) {\n        const\n            me = this,\n            { $responsiveStates : states } = me,\n            initial = ++me.responsiveStateChanges === 1,\n            classList = me.element?.classList,\n            defaults = states['*'],\n            def = states[state] || defaults,\n            once = initial && (def.once || defaults.once),\n            isStateful = initial && me.isStateful,\n            target = me.responsiveWidget;\n\n        let config = def.configs,\n            otherConfigs = once?.configs;\n\n        if (otherConfigs) {\n            // overlay \":once\" configs on normal configs (the mergeConfigs method clones the first parameter before\n            // merging it with other values)\n            config = config ? me.constructor.mergeConfigs(config, otherConfigs) : otherConfigs;\n        }\n\n        oldState && classList?.remove(`b-responsive-${oldState.toLowerCase()}`);\n        state && classList?.add(`b-responsive-${state.toLowerCase()}`);\n\n        if (isStateful) {\n            // our responsiveState is munged with the stateId to retrieve state info for this responsiveState (to track\n            // state by small/medium/large/etc). If we don't load the state on each call here we would end up smashing\n            // the values saved in state with those defined by the developer in the responsive config.\n            otherConfigs = me.loadStatefulData();\n\n            if (otherConfigs) {\n                // if there is stateful data for this responsiveState, it takes priority over our config object\n                config = config ? me.constructor.mergeConfigs(config, otherConfigs) : otherConfigs;\n            }\n\n            // We don't want responsive changes to configs to trigger state save:\n            me.suspendStateful();\n        }\n\n        me._responsiveUpdating = true;\n\n        try {\n            /**\n             * Triggered before a new {@link #config-responsiveState} is applied.\n             * @event beforeResponsiveStateChange\n             * @param {Core.widget.Widget} source The widget whose `responsiveState` is to be changed\n             * @param {String} state The new value for the widget's `responsiveState`\n             * @param {String} oldState The previous value for the widget's `responsiveState`\n             */\n            me.trigger?.('beforeResponsiveStateChange', { state, oldState, target });\n\n            config && me.setConfig(config);\n\n            def.callback?.({ source : me, state, oldState, target, initial });\n            once?.callback?.({ source : me, state, oldState, target, initial });\n\n            /**\n             * Triggered when a new {@link #config-responsiveState} is applied.\n             * @event responsiveStateChange\n             * @param {Core.widget.Widget} source The widget whose `responsiveState` has changed\n             * @param {String} state The new value for the widget's `responsiveState`\n             * @param {String} oldState The previous value for the widget's `responsiveState`\n             */\n            me.trigger?.('responsiveStateChange', { state, oldState, target });\n            // we normally would check for !me.isConstructing or !me.isConfiguring but this event needs to be fired\n            // during that time to allow the app to receive the initial responsive state since it is dynamic (i.e.,\n            // not something the app has configured into the widget)\n        }\n        finally {\n            // Be sure to reset these even if an exception occurs\n            me._responsiveUpdating = false;\n            isStateful && me.resumeStateful();\n        }\n    }\n\n    // responsiveTarget\n\n    get responsiveTarget() {\n        return this.responsiveWidget || this._responsiveTarget;\n    }\n\n    updateResponsiveTarget() {\n        this.syncResponsiveWidget();\n    }\n\n    // responsiveWidget\n\n    updateResponsiveWidget(target) {\n        const\n            me = this,\n            // being a delayable raf method effectively auto-bind's our this pointer\n            responsiveUpdate = target && me.responsiveUpdate;\n\n        me.$responsiveWrapper?.destroy();\n        me.$responsiveWrapper = target && wrapWidget(target, responsiveUpdate);\n\n        responsiveUpdate?.now();\n    }\n\n    // Support methods\n\n    responsiveUpdate() {\n        const\n            me = this,\n            { $responsiveStates : states, $responsiveWrapper : wrapper } = me,\n            responsiveTarget = wrapper?.widget;\n\n        if (states && wrapper) {\n            let best = null,\n                bestScore = 0,  // 0 doesn't get used (since !best) but data flow warnings arise w/o assignment\n                fromWhen = states,\n                score, state;\n\n            // If this instance has a responsiveWidget (via responsiveTarget being set to a widget), and that widget\n            // is not this instance, and if this instance did not specify any explicit \"when\" properties in its own\n            // \"responsive\" config, use those of the target\n            if (responsiveTarget && responsiveTarget !== me && !me.$responsiveWhen) {\n                responsiveTarget.getConfig('responsive');  // make sure the config has been evaluated\n                fromWhen = responsiveTarget.$responsiveStates || fromWhen;\n            }\n\n            wrapper.reset();\n\n            for (state in states) {\n                if (state !== '*') {\n                    score = fromWhen[state].when(wrapper.object, BrowserHelper);\n\n                    if (score != null && score !== false && (!best || score < bestScore)) {\n                        best = state;\n                        bestScore = score;\n                    }\n                }\n            }\n\n            ++me.responsiveUpdateCount; // this unlocks statefulId() getter in State mixin\n\n            me.responsiveState = best;\n        }\n    }\n\n    syncResponsiveWidget() {\n        const me = this;\n\n        let widget = null,\n            responsiveTarget;\n\n        if (!me.isDestroying && me.responsive) {\n            responsiveTarget = me.responsiveTarget;\n\n            if (!(widget = responsiveTarget)) {\n                widget = (!me.responsiveRoot && me.up?.(responsiveRootFn)) || me;\n            }\n            else if (typeof responsiveTarget === 'string') {\n                widget = responsiveTarget === '@' ? me : (\n                    responsiveTarget[0] === '@' ? me[responsiveTarget.substring(1)] : me.up(responsiveTarget)\n                );\n\n                if (!widget) {\n                    throw new Error(`No match for responsiveTarget=\"${responsiveTarget}\"`);\n                }\n            }\n\n            if (!widget.isWidget) {\n                throw new Error(`${widget.constructor.$$name} is not a widget and cannot be a responsiveTarget`);\n            }\n        }\n\n        me.responsiveWidget = widget;\n\n        return widget;\n    }\n\n    // <remove-on-release>\n    // TODO: Remove breakpoints in 6.0\n    // </remove-on-release>\n\n    changeBreakpoints(breakpoints) {\n        ObjectHelper.assertObject(breakpoints, 'breakpoints');\n\n        // Normalize breakpoints\n        if (breakpoints?.width) {\n            Object.keys(breakpoints.width).forEach(key => {\n                breakpoints.width[key].maxWidth = key;\n            });\n        }\n\n        if (breakpoints?.height) {\n            Object.keys(breakpoints.height).forEach(key => {\n                breakpoints.height[key].maxHeight = key;\n            });\n        }\n\n        return breakpoints;\n    }\n\n    updateBreakpoints(breakpoints) {\n        if (breakpoints) {\n            this.monitorResize = true;\n        }\n    }\n\n    // Get a width/height breakpoint for the supplied dimension\n    getBreakpoint(levels, dimension) {\n        const\n            // Breakpoints as reverse sorted array of numerical widths [NaN for *, 50, 100]\n            ascendingLevels = Object.keys(levels).map(l => parseInt(l)).sort(),\n            // Find first one larger than current width\n            breakpoint     = ascendingLevels.find(bp => dimension <= bp);\n\n        // Return matched breakpoint or * if available and none matched\n        return levels[breakpoint ?? (levels['*'] && '*')];\n    }\n\n    // Apply a breakpoints configs, trigger event and call any callback\n    activateBreakpoint(orientation, breakpoint) {\n        const\n            me             = this,\n            prevBreakpoint = me[`current${orientation}Breakpoint`];\n\n        if (breakpoint !== prevBreakpoint) {\n            me[`current${orientation}Breakpoint`] = breakpoint;\n\n            me.setConfig(breakpoint.configs);\n\n            prevBreakpoint && me.element.classList.remove(`b-breakpoint-${prevBreakpoint.name.toLowerCase()}`);\n            me.element.classList.add(`b-breakpoint-${breakpoint.name.toLowerCase()}`);\n\n            /**\n             * Triggered when a new max-width based breakpoint is applied.\n             * @event responsiveWidthChange\n             * @param {Core.widget.Widget} source The widget\n             * @param {Breakpoint} breakpoint The applied breakpoint\n             * @param {Breakpoint} prevBreakpoint The previously applied breakpoint\n             * @deprecated 5.0 This event is associated with {@link #config-breakpoints} which is deprecated in favor of\n             * {@link #config-responsive}.\n             */\n            /**\n             * Triggered when a new max-height based breakpoint is applied.\n             * @event responsiveHeightChange\n             * @param {Core.widget.Widget} source The widget\n             * @param {Breakpoint} breakpoint The applied breakpoint\n             * @param {Breakpoint} prevBreakpoint The previously applied breakpoint\n             * @deprecated 5.0 This event is associated with {@link #config-breakpoints} which is deprecated in favor of\n             * {@link #config-responsive}.\n             */\n\n            me.trigger(`responsive${orientation}Change`, { breakpoint, prevBreakpoint });\n\n            breakpoint.callback?.({ source : me, breakpoint, prevBreakpoint });\n\n            me.recompose?.();\n        }\n    }\n\n    // Called on resize to pick and apply a breakpoint, if size changed enough\n    applyResponsiveBreakpoints(width, height) {\n        const\n            me = this,\n            {\n                width  : widths,\n                height : heights\n            }  = me.breakpoints ?? {};\n\n        if (widths) {\n            const breakpoint = me.getBreakpoint(widths, width);\n            me.activateBreakpoint('Width', breakpoint);\n        }\n\n        if (heights) {\n            const breakpoint = me.getBreakpoint(heights, height);\n            me.activateBreakpoint('Height', breakpoint);\n        }\n    }\n\n    onInternalResize(element, width, height, oldWidth, oldHeight) {\n        super.onInternalResize(element, width, height, oldWidth, oldHeight);\n\n        this.applyResponsiveBreakpoints(width, height);\n    }\n};\n"],"names":["Target","Featureable","Base","$name","configurable","features","declarable","setupFeatureable","cls","featureable","ownerName","factory","initClass","Reflect","defineProperty","get","doDestroy","name","_feature$destroy","feature","destroy","call","hasFeature","_this$features","Boolean","changeFeatures","was","isDestroying","me","constructor","manager","$features","DynamicObject","configName","owner","update","target","widgetClass","getCurrentConfig","options","result","featureName","Object","keys","length","hasOwn","ObjectHelper","fencibleSymbol","Symbol","NONE","distinct","array","Array","from","Set","parseNames","names","StringHelper","split","fenceMethod","isObject","all","any","lock","concat","implName","fence","params","fences","isFree","key","every","some","forEach","value","Fencible","setupFenced","fenced","statics","static","pairs","push","prototype","methods","methodName","FilterField","TextField","type","field","store","filterFunction","clearable","revertOnEscape","keyStrokeChangeDelay","onChange","filterId","id","removeFilter","filterBy","record","replace","_record$getValue","getValue","match","RegExp","filter","updateValue","old","isConfiguring","_$name","EMPTY","isStateName","pop","object","ret","responsiveRootFn","widget","responsiveRoot","scoring","number","threshold","width","splitConfigs","configs","once","callback","when","splitMergedConfigs","parts","flatMap","p","mergeConfigs","wrapWidget","handler","triggers","desc","Proxy","revocable","o","detacher","FunctionHelper","after","ignore","_triggers","resizer","ion","resize","monitorResize","_desc","proxy","revoke","reset","create","Responsive","mixin","Delayable","responsive","$config","lazy","responsiveDefaults","small","medium","large","Infinity","responsiveState","responsiveTarget","responsiveWidget","nullify","breakpoints","delayable","responsiveUpdate","syncResponsiveWidget","prototypeProperties","responsiveStateChanges","responsiveUpdateCount","isResponsivePending","hasConfig","isResponsiveUpdating","_this$responsiveWidge","_responsiveUpdating","updateResponsive","stateNames","states","hasWhen","state","_scoring$when","$responsiveStates","$responsiveWhen","updateResponsiveState","oldState","_me$element","initial","classList","element","defaults","def","isStateful","config","otherConfigs","remove","toLowerCase","add","loadStatefulData","suspendStateful","_me$trigger","_def$callback","_once$callback","_me$trigger2","trigger","setConfig","source","resumeStateful","_responsiveTarget","updateResponsiveTarget","updateResponsiveWidget","_me$$responsiveWrappe","$responsiveWrapper","now","wrapper","best","bestScore","fromWhen","score","getConfig","BrowserHelper","_me$up","up","substring","Error","isWidget","$$name","changeBreakpoints","assertObject","maxWidth","height","maxHeight","updateBreakpoints","getBreakpoint","levels","dimension","ascendingLevels","map","l","parseInt","sort","breakpoint","find","bp","activateBreakpoint","orientation","prevBreakpoint","_breakpoint$callback","_me$recompose","recompose","applyResponsiveBreakpoints","widths","heights","onInternalResize","oldWidth","oldHeight"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAeA,CAAAA,MAAM,IAAI,MAAMC,WAAW,UAAUD,MAAM,IAAIE,IAAI,EAAE;EAChE,WAAWC,KAAKA,GAAG;AACf,IAAA,OAAO,aAAa,CAAA;AACxB,GAAA;EACA,WAAWC,YAAYA,GAAG;IACtB,OAAO;AACH;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,QAAQ,EAAG,IAAA;KACd,CAAA;AACL,GAAA;EACA,WAAWC,UAAUA,GAAG;IACpB,OAAO;AACH;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,IAAA,aAAa,CAChB,CAAA;AACL,GAAA;EACA,OAAOC,gBAAgBA,CAACC,GAAG,EAAE;AACzB,IAAA,MAAMC,WAAW,GAAG;AAChBC,MAAAA,SAAS,EAAG,QAAQ;AACpB,MAAA,GAAGF,GAAG,CAACC,WAAAA;KACV,CAAA;AACDA,IAAAA,WAAW,CAACE,OAAO,CAACC,SAAS,EAAE,CAAA;AAC/B;AACAC,IAAAA,OAAO,CAACC,cAAc,CAACN,GAAG,EAAE,aAAa,EAAE;AACvCO,MAAAA,GAAGA,GAAG;AACF,QAAA,OAAON,WAAW,CAAA;AACtB,OAAA;AACJ,KAAC,CAAC,CAAA;AACN,GAAA;AACAO,EAAAA,SAASA,GAAG;AACR,IAAA,MAAMX,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAA;IAC9B,KAAK,CAAC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I;AACnBsE,MAAAA,KAAK,EAAUR,KAAAA;AACnB,KAAC,CAAC,CAAA;GACL,CAAA;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAelE,CAAAA,MAAM,IAAI,MAAM2E,QAAQ,UAAU3E,MAAM,IAAIE,IAAI,EAAE;EAC7D,OAAOC,KAAK,GAAG,UAAU,CAAA;AACzB,EAAA,OAAOG,UAAU,GAAG;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA,QAAQ,CACX,CAAA;EACD,OAAOsE,WAAWA,CAACpE,GAAG,EAAE;IACpB,IAAI;AAAEqE,MAAAA,MAAAA;AAAO,KAAC,GAAGrE,GAAG,CAAA;AACpB,IAAA,MACIsE,OAAO,GAAGD,MAAM,CAACE,MAAM;AACvBC,MAAAA,KAAK,GAAG,EAAE,CAAA;AACd,IAAA,IAAIF,OAAO,EAAE;AACTD,MAAAA,MAAM,GAAG;QAAE,GAAGA,MAAAA;OAAQ,CAAA;MACtB,OAAOA,MAAM,CAACE,MAAM,CAAA;MACpBC,KAAK,CAACC,IAAI,CAAC,CAACH,OAAO,EAAEtE,GAAG,CAAC,CAAC,CAAA;AAC9B,KAAA;IACAwE,KAAK,CAACC,IAAI,CAAC,CAACJ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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAA,CAAexJ,MAAM,IAAI,MAAMyJ,UAAU,SAAS,CAACzJ,MAAM,IAAIE,IAAI,EAAEwJ,KAAK,CAACC,SAAS,EAAEhF,QAAQ,CAAC,CAAC;EAC1F,OAAOxE,KAAK,GAAG,YAAY,CAAA;AAC3B,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQwJ,IAAAA,UAAU,EAAG;AACTC,MAAAA,OAAO,EAAG;AACNC,QAAAA,IAAI,EAAG,OAAA;OACV;AACDpF,MAAAA,KAAK,EAAG,IAAA;KACX;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACQqF,IAAAA,kBAAkB,EAAG;AACjBC,MAAAA,KAAK,EAAG;AACJlC,QAAAA,IAAI,EAAG,GAAA;OACV;AACDmC,MAAAA,MAAM,EAAG;AACLnC,QAAAA,IAAI,EAAG,GAAA;OACV;AACDoC,MAAAA,KAAK,EAAG;QACJpC,IAAI,EAAGA,MAAMqC,QAAAA;OAChB;AACD,MAAA,GAAG,EAAG,EAAC;KACV;AACD;AACR;AACA;AACA;AACA;AACA;AACQ9C,IAAAA,cAAc,EAAG,IAAI;AACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACQ+C,IAAAA,eAAe,EAAG,IAAI;AACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,gBAAgB,EAAG;AACf3F,MAAAA,KAAK,EAAK,IAAI;AACdmF,MAAAA,OAAO,EAAG;AACNC,QAAAA,IAAI,EAAG,OAAA;AACX,OAAA;KACH;AACDQ,IAAAA,gBAAgB,EAAG;AACf5F,MAAAA,KAAK,EAAK,IAAI;AACdmF,MAAAA,OAAO,EAAG;AACNU,QAAAA,OAAO,EAAG,IAAA;AACd,OAAA;KACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,WAAW,EAAG,IAAA;GACjB,CAAA;AACD,EAAA,OAAOC,SAAS,GAAG;AACfC,IAAAA,gBAAgB,EAAG,KAAA;GACtB,CAAA;AACD,EAAA,OAAO7F,MAAM,GAAG;AACZ8F,IAAAA,oBAAoB,EAAG,IAAA;GAC1B,CAAA;AACD,EAAA,OAAOC,mBAAmB,GAAG;AACzBC,IAAAA,sBAAsB,EAAG,CAAC;AAC1BC,IAAAA,qBAAqB,EAAI,CAAA;GAC5B,CAAA;EACD,IAAIC,mBAAmBA,GAAG;IACtB,OAAO,IAAI,CAACD,qBAAqB,KAAK,CAAC,IAAI,IAAI,CAACE,SAAS,CAAC,YAAY,CAAC,CAAA;AAC3E,GAAA;EACA,IAAIC,oBAAoBA,GAAG;AAAA,IAAA,IAAAC,qBAAA,CAAA;AACvB,IAAA,OAAO,IAAI,CAACC,mBAAmB,KAAA,CAAAD,qBAAA,GAAI,IAAI,CAACZ,gBAAgB,MAAAY,IAAAA,IAAAA,qBAAA,KAArBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAuBC,mBAAmB,CAAA,CAAA;AACjF,GAAA;AACA;EACAC,gBAAgBA,CAACxB,UAAU,EAAE;IACzB,MACIhI,EAAE,GAAI,IAAI;MACVpB,GAAG,GAAGoB,EAAE,CAACC,WAAW;AACpB,MAAA;AAAEkI,QAAAA,kBAAAA;AAAmB,OAAC,GAAGnI,EAAE;AAC3ByJ,MAAAA,UAAU,GAAGjI,KAAK,CAACC,IAAI,CACnB,IAAIC,GAAG,CAACR,YAAY,CAACH,IAAI,CAACiH,UAAU,CAAC,CAAC5F,MAAM,CAAClB,YAAY,CAACH,IAAI,CAACoH,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAACtD,MAAM,CAACM,WAAW,CAAC,CAAA;IACjH,IAAIuE,MAAM,GAAG,IAAI;MACbC,OAAO;MAAEtK,IAAI;MAAEuK,KAAK;MAAE1D,IAAI,CAAA;AAC9B,IAAA,IAAI8B,UAAU,EAAE;AACZ0B,MAAAA,MAAM,GAAG;AACL,QAAA,GAAG,EAAGvD,kBAAkB,CAACvH,GAAG,EAAEuJ,kBAAkB,CAAC,GAAG,CAAC,EAAEH,UAAU,CAAC,GAAG,CAAC,CAAA;OACzE,CAAA;MACD,KAAK3I,IAAI,IAAIoK,UAAU,EAAE;AACrBG,QAAAA,KAAK,GAAG5B,UAAU,CAAC3I,IAAI,CAAC,CAAA;AACxB,QAAA,IAAIuK,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,EAAE;AAAA,UAAA,IAAAC,aAAA,CAAA;AACnC;AACAF,UAAAA,OAAO,GAAGA,OAAO,IAAKC,KAAK,IAAI,MAAM,IAAIA,KAAM,CAAA;UAC/CF,MAAM,CAACrK,IAAI,CAAC,GAAG8G,kBAAkB,CAACvH,GAAG,EACjCuJ,kBAAkB,CAAC,GAAG,CAAC,EAAEA,kBAAkB,CAAC9I,IAAI,CAAC,EAAE2I,UAAU,CAAC,GAAG,CAAC,EAAE4B,KAAK,CAAC,CAAA;AAC9E1D,UAAAA,IAAI,GAAGwD,MAAM,CAACrK,IAAI,CAAC,CAAC6G,IAAI,CAAA;AACxBwD,UAAAA,MAAM,CAACrK,IAAI,CAAC,CAAC6G,IAAI,GAAG,CAAA2D,CAAAA,aAAA,GAAAnE,OAAO,CAAC,OAAOQ,IAAI,CAAC,MAAA2D,IAAAA,IAAAA,aAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,aAAA,CAAApK,IAAA,CAAAiG,OAAO,EAAgBQ,IAAI,CAAC,KAAIA,IAAI,CAAC;AAC7D,SAAA;AACJ,OAAA;AACJ,KAAA;;IACAlG,EAAE,CAAC8J,iBAAiB,GAAGJ,MAAM,CAAA;IAC7B1J,EAAE,CAAC+J,eAAe,GAAGJ,OAAO,CAAA;IAC5B3J,EAAE,CAAC+I,oBAAoB,EAAE,CAAA;AAC7B,GAAA;AACA;AACAiB,EAAAA,qBAAqBA,CAACJ,KAAK,EAAEK,QAAQ,EAAE;AAAA,IAAA,IAAAC,WAAA,CAAA;IACnC,MACIlK,EAAE,GAAG,IAAI;AACT,MAAA;AAAE8J,QAAAA,iBAAiB,EAAGJ,MAAAA;AAAO,OAAC,GAAG1J,EAAE;AACnCmK,MAAAA,OAAO,GAAG,EAAEnK,EAAE,CAACiJ,sBAAsB,KAAK,CAAC;MAC3CmB,SAAS,GAAA,CAAAF,WAAA,GAAGlK,EAAE,CAACqK,OAAO,MAAA,IAAA,IAAAH,WAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,WAAA,CAAYE,SAAS;AACjCE,MAAAA,QAAQ,GAAGZ,MAAM,CAAC,GAAG,CAAC;AACtBa,MAAAA,GAAG,GAAGb,MAAM,CAACE,KAAK,CAAC,IAAIU,QAAQ;MAC/BtE,IAAI,GAAGmE,OAAO,KAAKI,GAAG,CAACvE,IAAI,IAAIsE,QAAQ,CAACtE,IAAI,CAAC;AAC7CwE,MAAAA,UAAU,GAAGL,OAAO,IAAInK,EAAE,CAACwK,UAAU;MACrChK,MAAM,GAAGR,EAAE,CAAC0I,gBAAgB,CAAA;AAChC,IAAA,IAAI+B,MAAM,GAAGF,GAAG,CAACxE,OAAO;AACpB2E,MAAAA,YAAY,GAAG1E,IAAI,KAAA,IAAA,IAAJA,IAAI,KAAJA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAED,OAAO,CAAA;AAChC,IAAA,IAAI2E,YAAY,EAAE;AACd;AACA;AACAD,MAAAA,MAAM,GAAGA,MAAM,GAAGzK,EAAE,CAACC,WAAW,CAACsG,YAAY,CAACkE,MAAM,EAAEC,YAAY,CAAC,GAAGA,YAAY,CAAA;AACtF,KAAA;AACAT,IAAAA,QAAQ,KAAIG,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAATA,SAAS,CAAEO,MAAM,CAAE,CAAA,aAAA,EAAeV,QAAQ,CAACW,WAAW,EAAG,EAAC,CAAC,CAAA,CAAA;AACvEhB,IAAAA,KAAK,KAAIQ,SAAS,KAAA,IAAA,IAATA,SAAS,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAATA,SAAS,CAAES,GAAG,CAAE,CAAA,aAAA,EAAejB,KAAK,CAACgB,WAAW,EAAG,EAAC,CAAC,CAAA,CAAA;AAC9D,IAAA,IAAIJ,UAAU,EAAE;AACZ;AACA;AACA;AACAE,MAAAA,YAAY,GAAG1K,EAAE,CAAC8K,gBAAgB,EAAE,CAAA;AACpC,MAAA,IAAIJ,YAAY,EAAE;AACd;AACAD,QAAAA,MAAM,GAAGA,MAAM,GAAGzK,EAAE,CAACC,WAAW,CAACsG,YAAY,CAACkE,MAAM,EAAEC,YAAY,CAAC,GAAGA,YAAY,CAAA;AACtF,OAAA;AACA;MACA1K,EAAE,CAAC+K,eAAe,EAAE,CAAA;AACxB,KAAA;IACA/K,EAAE,CAACuJ,mBAAmB,GAAG,IAAI,CAAA;IAC7B,IAAI;AAAA,MAAA,IAAAyB,WAAA,EAAAC,aAAA,EAAAC,cAAA,EAAAC,YAAA,CAAA;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,MAAA,CAAAH,WAAA,GAAAhL,EAAE,CAACoL,OAAO,MAAAJ,IAAAA,IAAAA,WAAA,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAA,CAAAvL,IAAA,CAAAO,EAAE,EAAW,6BAA6B,EAAE;QAAE4J,KAAK;QAAEK,QAAQ;AAAEzJ,QAAAA,MAAAA;AAAO,OAAC,CAAC,CAAA;AACxEiK,MAAAA,MAAM,IAAIzK,EAAE,CAACqL,SAAS,CAACZ,MAAM,CAAC,CAAA;AAC9B,MAAA,CAAAQ,aAAA,GAAAV,GAAG,CAACtE,QAAQ,MAAA,IAAA,IAAAgF,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZA,aAAA,CAAAxL,IAAA,CAAA8K,GAAG,EAAY;AAAEe,QAAAA,MAAM,EAAGtL,EAAE;QAAE4J,KAAK;QAAEK,QAAQ;QAAEzJ,MAAM;AAAE2J,QAAAA,OAAAA;AAAQ,OAAC,CAAC,CAAA;AACjEnE,MAAAA,IAAI,aAAJA,IAAI,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAkF,cAAA,GAAJlF,IAAI,CAAEC,QAAQ,MAAAiF,IAAAA,IAAAA,cAAA,uBAAdA,cAAA,CAAAzL,IAAA,CAAAuG,IAAI,EAAa;AAAEsF,QAAAA,MAAM,EAAGtL,EAAE;QAAE4J,KAAK;QAAEK,QAAQ;QAAEzJ,MAAM;AAAE2J,QAAAA,OAAAA;AAAQ,OAAC,CAAC,CAAA;AACnE;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,MAAA,CAAAgB,YAAA,GAAAnL,EAAE,CAACoL,OAAO,MAAAD,IAAAA,IAAAA,YAAA,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,YAAA,CAAA1L,IAAA,CAAAO,EAAE,EAAW,uBAAuB,EAAE;QAAE4J,KAAK;QAAEK,QAAQ;AAAEzJ,QAAAA,MAAAA;AAAO,OAAC,CAAC,CAAA;AAClE;AACA;AACA;AACJ,KAAC,SACO;AACJ;MACAR,EAAE,CAACuJ,mBAAmB,GAAG,KAAK,CAAA;AAC9BiB,MAAAA,UAAU,IAAIxK,EAAE,CAACuL,cAAc,EAAE,CAAA;AACrC,KAAA;AACJ,GAAA;AACA;EACA,IAAI9C,gBAAgBA,GAAG;AACnB,IAAA,OAAO,IAAI,CAACC,gBAAgB,IAAI,IAAI,CAAC8C,iBAAiB,CAAA;AAC1D,GAAA;AACAC,EAAAA,sBAAsBA,GAAG;IACrB,IAAI,CAAC1C,oBAAoB,EAAE,CAAA;AAC/B,GAAA;AACA;EACA2C,sBAAsBA,CAAClL,MAAM,EAAE;AAAA,IAAA,IAAAmL,qBAAA,CAAA;IAC3B,MACI3L,EAAE,GAAG,IAAI;AACT;AACA8I,MAAAA,gBAAgB,GAAGtI,MAAM,IAAIR,EAAE,CAAC8I,gBAAgB,CAAA;AACpD,IAAA,CAAA6C,qBAAA,GAAA3L,EAAE,CAAC4L,kBAAkB,MAAA,IAAA,IAAAD,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArBA,qBAAA,CAAuBnM,OAAO,EAAE,CAAA;IAChCQ,EAAE,CAAC4L,kBAAkB,GAAGpL,MAAM,IAAIgG,UAAU,CAAChG,MAAM,EAAEsI,gBAAgB,CAAC,CAAA;AACtEA,IAAAA,gBAAgB,aAAhBA,gBAAgB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,gBAAgB,CAAE+C,GAAG,EAAE,CAAA;AAC3B,GAAA;AACA;AACA/C,EAAAA,gBAAgBA,GAAG;IACf,MACI9I,EAAE,GAAG,IAAI;AACT,MAAA;AAAE8J,QAAAA,iBAAiB,EAAGJ,MAAM;AAAEkC,QAAAA,kBAAkB,EAAGE,OAAAA;AAAQ,OAAC,GAAG9L,EAAE;AACjEyI,MAAAA,gBAAgB,GAAGqD,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEtG,MAAM,CAAA;IACtC,IAAIkE,MAAM,IAAIoC,OAAO,EAAE;MACnB,IAAIC,IAAI,GAAG,IAAI;AACXC,QAAAA,SAAS,GAAG,CAAC;AAAG;AAChBC,QAAAA,QAAQ,GAAGvC,MAAM;QACjBwC,KAAK;QAAEtC,KAAK,CAAA;AAChB;AACA;AACA;MACA,IAAInB,gBAAgB,IAAIA,gBAAgB,KAAKzI,EAAE,IAAI,CAACA,EAAE,CAAC+J,eAAe,EAAE;AACpEtB,QAAAA,gBAAgB,CAAC0D,SAAS,CAAC,YAAY,CAAC,CAAC;AACzCF,QAAAA,QAAQ,GAAGxD,gBAAgB,CAACqB,iBAAiB,IAAImC,QAAQ,CAAA;AAC7D,OAAA;MACAH,OAAO,CAACnE,KAAK,EAAE,CAAA;MACf,KAAKiC,KAAK,IAAIF,MAAM,EAAE;QAClB,IAAIE,KAAK,KAAK,GAAG,EAAE;AACfsC,UAAAA,KAAK,GAAGD,QAAQ,CAACrC,KAAK,CAAC,CAAC1D,IAAI,CAAC4F,OAAO,CAACzG,MAAM,EAAE+G,aAAa,CAAC,CAAA;AAC3D,UAAA,IAAIF,KAAK,IAAI,IAAI,IAAIA,KAAK,KAAK,KAAK,KAAK,CAACH,IAAI,IAAIG,KAAK,GAAGF,SAAS,CAAC,EAAE;AAClED,YAAAA,IAAI,GAAGnC,KAAK,CAAA;AACZoC,YAAAA,SAAS,GAAGE,KAAK,CAAA;AACrB,WAAA;AACJ,SAAA;AACJ,OAAA;AACA,MAAA,EAAElM,EAAE,CAACkJ,qBAAqB,CAAC;MAC3BlJ,EAAE,CAACwI,eAAe,GAAGuD,IAAI,CAAA;AAC7B,KAAA;AACJ,GAAA;AACAhD,EAAAA,oBAAoBA,GAAG;IACnB,MAAM/I,EAAE,GAAG,IAAI,CAAA;IACf,IAAIwF,MAAM,GAAG,IAAI;MACbiD,gBAAgB,CAAA;IACpB,IAAI,CAACzI,EAAE,CAACD,YAAY,IAAIC,EAAE,CAACgI,UAAU,EAAE;MACnCS,gBAAgB,GAAGzI,EAAE,CAACyI,gBAAgB,CAAA;AACtC,MAAA,IAAI,EAAEjD,MAAM,GAAGiD,gBAAgB,CAAC,EAAE;AAAA,QAAA,IAAA4D,MAAA,CAAA;QAC9B7G,MAAM,GAAI,CAACxF,EAAE,CAACyF,cAAc,KAAA4G,CAAAA,MAAA,GAAIrM,EAAE,CAACsM,EAAE,cAAAD,MAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAALA,MAAA,CAAA5M,IAAA,CAAAO,EAAE,EAAMuF,gBAAgB,CAAC,CAAA,IAAKvF,EAAE,CAAA;AACpE,OAAC,MACI,IAAI,OAAOyI,gBAAgB,KAAK,QAAQ,EAAE;AAC3CjD,QAAAA,MAAM,GAAGiD,gBAAgB,KAAK,GAAG,GAAGzI,EAAE,GAClCyI,gBAAgB,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGzI,EAAE,CAACyI,gBAAgB,CAAC8D,SAAS,CAAC,CAAC,CAAC,CAAC,GAAGvM,EAAE,CAACsM,EAAE,CAAC7D,gBAAgB,CAC3F,CAAA;QACD,IAAI,CAACjD,MAAM,EAAE;AACT,UAAA,MAAM,IAAIgH,KAAK,CAAE,CAAiC/D,+BAAAA,EAAAA,gBAAiB,GAAE,CAAC,CAAA;AAC1E,SAAA;AACJ,OAAA;AACA,MAAA,IAAI,CAACjD,MAAM,CAACiH,QAAQ,EAAE;QAClB,MAAM,IAAID,KAAK,CAAE,CAAEhH,EAAAA,MAAM,CAACvF,WAAW,CAACyM,MAAO,CAAA,iDAAA,CAAkD,CAAC,CAAA;AACpG,OAAA;AACJ,KAAA;IACA1M,EAAE,CAAC0I,gBAAgB,GAAGlD,MAAM,CAAA;AAC5B,IAAA,OAAOA,MAAM,CAAA;AACjB,GAAA;EACAmH,iBAAiBA,CAAC/D,WAAW,EAAE;AAC3B1H,IAAAA,YAAY,CAAC0L,YAAY,CAAChE,WAAW,EAAE,aAAa,CAAC,CAAA;AACrD;AACA,IAAA,IAAIA,WAAW,KAAXA,IAAAA,IAAAA,WAAW,eAAXA,WAAW,CAAE/C,KAAK,EAAE;MACpB/E,MAAM,CAACC,IAAI,CAAC6H,WAAW,CAAC/C,KAAK,CAAC,CAAChD,OAAO,CAACH,GAAG,IAAI;QAC1CkG,WAAW,CAAC/C,KAAK,CAACnD,GAAG,CAAC,CAACmK,QAAQ,GAAGnK,GAAG,CAAA;AACzC,OAAC,CAAC,CAAA;AACN,KAAA;AACA,IAAA,IAAIkG,WAAW,KAAXA,IAAAA,IAAAA,WAAW,eAAXA,WAAW,CAAEkE,MAAM,EAAE;MACrBhM,MAAM,CAACC,IAAI,CAAC6H,WAAW,CAACkE,MAAM,CAAC,CAACjK,OAAO,CAACH,GAAG,IAAI;QAC3CkG,WAAW,CAACkE,MAAM,CAACpK,GAAG,CAAC,CAACqK,SAAS,GAAGrK,GAAG,CAAA;AAC3C,OAAC,CAAC,CAAA;AACN,KAAA;AACA,IAAA,OAAOkG,WAAW,CAAA;AACtB,GAAA;EACAoE,iBAAiBA,CAACpE,WAAW,EAAE;AAC3B,IAAA,IAAIA,WAAW,EAAE;MACb,IAAI,CAACrB,aAAa,GAAG,IAAI,CAAA;AAC7B,KAAA;AACJ,GAAA;AACA;AACA0F,EAAAA,aAAaA,CAACC,MAAM,EAAEC,SAAS,EAAE;AAC7B,IAAA;AACI;MACAC,eAAe,GAAGtM,MAAM,CAACC,IAAI,CAACmM,MAAM,CAAC,CAACG,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;AAClE;MACAC,UAAU,GAAOL,eAAe,CAACM,IAAI,CAACC,EAAE,IAAIR,SAAS,IAAIQ,EAAE,CAAC,CAAA;AAChE;IACA,OAAOT,MAAM,CAACO,UAAU,KAAKP,MAAM,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAA;AACrD,GAAA;AACA;AACAU,EAAAA,kBAAkBA,CAACC,WAAW,EAAEJ,UAAU,EAAE;IACxC,MACIzN,EAAE,GAAe,IAAI;AACrB8N,MAAAA,cAAc,GAAG9N,EAAE,CAAE,CAAS6N,OAAAA,EAAAA,WAAY,YAAW,CAAC,CAAA;IAC1D,IAAIJ,UAAU,KAAKK,cAAc,EAAE;MAAA,IAAAC,oBAAA,EAAAC,aAAA,CAAA;AAC/BhO,MAAAA,EAAE,CAAE,CAAS6N,OAAAA,EAAAA,WAAY,CAAW,UAAA,CAAA,CAAC,GAAGJ,UAAU,CAAA;AAClDzN,MAAAA,EAAE,CAACqL,SAAS,CAACoC,UAAU,CAAC1H,OAAO,CAAC,CAAA;AAChC+H,MAAAA,cAAc,IAAI9N,EAAE,CAACqK,OAAO,CAACD,SAAS,CAACO,MAAM,CAAE,CAAemD,aAAAA,EAAAA,cAAc,CAACzO,IAAI,CAACuL,WAAW,EAAG,EAAC,CAAC,CAAA;AAClG5K,MAAAA,EAAE,CAACqK,OAAO,CAACD,SAAS,CAACS,GAAG,CAAE,CAAA,aAAA,EAAe4C,UAAU,CAACpO,IAAI,CAACuL,WAAW,EAAG,EAAC,CAAC,CAAA;AACzE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY5K,MAAAA,EAAE,CAACoL,OAAO,CAAE,CAAYyC,UAAAA,EAAAA,WAAY,QAAO,EAAE;QAAEJ,UAAU;AAAEK,QAAAA,cAAAA;AAAe,OAAC,CAAC,CAAA;AAC5E,MAAA,CAAAC,oBAAA,GAAAN,UAAU,CAACxH,QAAQ,MAAA,IAAA,IAAA8H,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAnBA,oBAAA,CAAAtO,IAAA,CAAAgO,UAAU,EAAY;AAAEnC,QAAAA,MAAM,EAAGtL,EAAE;QAAEyN,UAAU;AAAEK,QAAAA,cAAAA;AAAe,OAAC,CAAC,CAAA;AAClE,MAAA,CAAAE,aAAA,GAAAhO,EAAE,CAACiO,SAAS,MAAA,IAAA,IAAAD,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZA,aAAA,CAAAvO,IAAA,CAAAO,EAAe,CAAC,CAAA;AACpB,KAAA;AACJ,GAAA;AACA;AACAkO,EAAAA,0BAA0BA,CAACrI,KAAK,EAAEiH,MAAM,EAAE;IACtC,MACI9M,EAAE,GAAG,IAAI;AACT,MAAA;AACI6F,QAAAA,KAAK,EAAIsI,MAAM;AACfrB,QAAAA,MAAM,EAAGsB,OAAAA;AACb,OAAC,GAAIpO,EAAE,CAAC4I,WAAW,IAAI,EAAE,CAAA;AAC7B,IAAA,IAAIuF,MAAM,EAAE;MACR,MAAMV,UAAU,GAAGzN,EAAE,CAACiN,aAAa,CAACkB,MAAM,EAAEtI,KAAK,CAAC,CAAA;AAClD7F,MAAAA,EAAE,CAAC4N,kBAAkB,CAAC,OAAO,EAAEH,UAAU,CAAC,CAAA;AAC9C,KAAA;AACA,IAAA,IAAIW,OAAO,EAAE;MACT,MAAMX,UAAU,GAAGzN,EAAE,CAACiN,aAAa,CAACmB,OAAO,EAAEtB,MAAM,CAAC,CAAA;AACpD9M,MAAAA,EAAE,CAAC4N,kBAAkB,CAAC,QAAQ,EAAEH,UAAU,CAAC,CAAA;AAC/C,KAAA;AACJ,GAAA;EACAY,gBAAgBA,CAAChE,OAAO,EAAExE,KAAK,EAAEiH,MAAM,EAAEwB,QAAQ,EAAEC,SAAS,EAAE;AAC1D,IAAA,KAAK,CAACF,gBAAgB,CAAChE,OAAO,EAAExE,KAAK,EAAEiH,MAAM,EAAEwB,QAAQ,EAAEC,SAAS,CAAC,CAAA;AACnE,IAAA,IAAI,CAACL,0BAA0B,CAACrI,KAAK,EAAEiH,MAAM,CAAC,CAAA;AAClD,GAAA;AACJ,CAAC;;;;"}