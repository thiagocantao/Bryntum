{"version":3,"file":"Scale.js","sources":["../../../../Core/lib/Core/widget/graph/Histogram.js","../../../../Core/lib/Core/widget/graph/Scale.js"],"sourcesContent":["import Widget from '../Widget.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport DomSync from '../../helper/DomSync.js';\nimport Tooltip from '../Tooltip.js';\nimport Objects from '../../helper/util/Objects.js';\n\n/**\n * @module Core/widget/graph/Histogram\n */\nconst\n    ns = 'http://www.w3.org/2000/svg',\n    // Outline series must overlay bars\n    typePrio = {\n        bar     : 1,\n        outline : 2,\n        text    : 3\n    },\n    byOrder = (l, r) => parseInt(l.order, 10) - parseInt(r.order, 10),\n    byDatasetOrder = (l, r) => parseInt(l.dataset.order, 10) - parseInt(r.dataset.order, 10),\n    getField = s => s.field,\n    returnFalse = () => false,\n    classesDelimiter = /\\s+/;\n\n/**\n * An object representing a series settings.\n *\n * @typedef {Object} HistogramSeries\n * @property {'bar'|'outline'} type The series type specifying how it is rendered, as solid bars or outlines.\n * @property {String} [field] The name of the property to to read value from. By default matches the series\n * identifier.\n * @property {Boolean} [stretch=false] Provide `true` to stretch the series bars to take the whole vertical space\n * Applicable to `bar` type series only.\n * @property {String} [id] The series identifier. When configuring the series this value is automatically taken from\n * the key name the series is provided. For example in the bellow code the series `id` will be set to `salary`:\n * ```javascript\n * series : {\n *     salary : {\n *         type : 'bar'\n *     },\n *     ...\n * }\n * ```\n */\n\n/**\n * Displays a simple bar histogram based upon an array of data objects passed in the {@link #config-data} config.\n * @extends Core/widget/Widget\n * @classtype histogram\n */\nexport default class Histogram extends Widget {\n    //region Config\n\n    static type = 'histogram';\n\n    static $name = 'Histogram';\n\n    static get configurable() {\n        return {\n            /**\n             * An array of data objects used to drive the histogram. The property/properties used\n             * are defined in the {@link #config-series} option.\n             * @config {Object[]}\n             * @default\n             */\n            data : null,\n\n            /**\n             * The values to represent in bar form.\n             * @config {Number[]}\n             */\n            values : null,\n\n            /**\n             * Object enumerating data series for the histogram.\n             * The object keys are treated as series identifiers and values are objects that\n             * can contain the following properties:\n             *  - `type` A String, either `'bar'` or `'outline'`\n             *  - `field` A String, the name of the property to use from the data objects in the {@link #config-data} option.\n             * If the value is omitted the series identifier is used as the property name.\n             * @config {Object<String, HistogramSeries>}\n             */\n            series : null,\n\n            /**\n             * By default, the bars are scaled based upon the detected max value across all the series.\n             * A specific top value to represent the 100% height may be configured.\n             * @config {Number}\n             */\n            topValue : null,\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup'\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            /**\n             * By default, all bars are rendered, even those with zero height. Configure this as `true`\n             * to omit zero height bars.\n             * @config {Boolean}\n             * @default\n             */\n            omitZeroHeightBars : false,\n\n            /**\n             * By default, the histogram calls {@link #config-getBarText} once per each datum.\n             * So the function is supposed to output all the series values the way it needs.\n             * Configure this as `false` to call the function for each series value\n             * if you need to display the values separately or having different styling.\n             * @config {Boolean}\n             * @default\n             */\n            singleTextForAllBars : true,\n\n            monitorResize : true,\n\n            /**\n             * A Function which returns a CSS class name to add to a rectangle element.\n             * The following parameters are passed:\n             * @param {HistogramSeries} series The series being rendered\n             * @param {Object} rectConfig The rectangle configuration object\n             * @param {Object} datum The datum being rendered\n             * @param {Number} index The index of the datum being rendered\n             * @returns {String} CSS class name of the rectangle element\n             * @config {Function}\n             */\n            getRectClass(series, rectConfig, datum, index) {\n                return '';\n            },\n\n            /**\n             * A Function which returns a CSS class name to add to a path element\n             * built for an `outline` type series.\n             * The following parameters are passed:\n             * @param {HistogramSeries} series The series being rendered\n             * @param {Object[]} data The series data\n             * @returns {String} CSS class name of the path element\n             * @config {Function}\n             */\n            getOutlineClass(series, data) {\n                return '';\n            },\n\n            /**\n             * A Function which returns the tooltip text to display when hovering a bar.\n             * The following parameters are passed:\n             * @param {HistogramSeries} series The series being rendered\n             * @param {Object} rectConfig The rectangle configuration object\n             * @param {Object} datum The datum being rendered\n             * @param {Number} index The index of the datum being rendered\n             * @config {Function}\n             */\n            getBarTip(series, rectConfig, datum, index) {},\n\n            /**\n             * A Function which returns the text to render inside a bar.\n             * The following parameters are passed:\n             * @param {Object} datum The datum being rendered\n             * @param {Number} index The index of the datum being rendered\n             * @param {HistogramSeries} [series] The series (provided if {@link #config-singleTextForAllBars}\n             * is `false`)\n             * @returns {String} Text to render in the bar.\n             * @config {Function}\n             */\n            getBarText(datum, index, series) {\n                return '';\n            },\n\n            getRectConfig : null,\n\n            getBarTextRenderData(renderData, datum, index, series) {\n                return renderData;\n            },\n\n            getBarTextTip(renderData, datum, index, series) {}\n        };\n    }\n\n    static properties = {\n        refreshSuspended : 0\n    };\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n        super.construct(config);\n        me.scheduleRefresh = me.createOnFrame(me.refresh, [], me, true);\n        me.refresh();\n    }\n\n    set tip(tip) {\n        const me = this;\n\n        me.tip?.destroy();\n\n        if (tip) {\n            me._tip = Tooltip.new({\n                owner             : me,\n                forElement        : me.svgElement,\n                forSelector       : 'rect',\n                internalListeners : {\n                    beforeShow : 'up.onBeforeTipShow'\n                }\n            }, tip);\n        }\n        else {\n            me._tip = null;\n        }\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n\n        const svgRect = this.svgElement.getBoundingClientRect();\n\n        this.scaledSvgGroup.setAttribute('transform', `scale(${svgRect.width} ${svgRect.height})`);\n    }\n\n    onBeforeTipShow({ source : tip }) {\n        const index = parseInt(tip.activeTarget.dataset.index);\n\n        tip.html = tip.contentTemplate({\n            histogram : this,\n            index\n        });\n    }\n\n    updateSeries(value) {\n        const\n            me     = this,\n            series = me._series = {};\n\n        let\n            index = 0,\n            barSeriesCount = 0;\n\n        for (const id in value) {\n            // Providing\n            //\n            // \"series\" : {\n            //     \"foo\" : false\n            //     ...\n            //\n            // disables the \"foo\" series (that could be defined on a prototype level for example)\n\n            if (value[id] !== false) {\n                const data = series[id] = Objects.merge({}, value[id]);\n\n                // default field name is series identifier\n                if (!data.field) {\n                    data.field = id;\n                }\n\n                // default type is \"bar\"\n                if (!data.type) {\n                    data.type = 'bar';\n                }\n\n                if (!('order' in data)) {\n                    data.order = typePrio[data.type] * 10 + index;\n                }\n\n                if (!('index' in data)) {\n                    data.index = index;\n                }\n\n                if (data.type === 'bar') {\n                    data.index = barSeriesCount++;\n                }\n\n                data.id = id;\n                index++;\n            }\n        }\n\n        // Calculate the top value from all the series\n        if (!me.topValue && me._data) {\n            me.topValue = me.getDataTopValue(me._data);\n        }\n\n        if (!me.refreshSuspended) {\n            me.scheduleRefresh();\n        }\n    }\n\n    getDataTopValue(data, series) {\n        const fields   = Object.values(series || this.series).map(getField);\n\n        let result = 0, datum;\n\n        for (let i = 0, { length } = data; i < length; i++) {\n            datum = data[i];\n            for (let j = 0, { length } = fields; j < length; j++) {\n                result = Math.max(result, datum[fields[j]]);\n            }\n        }\n\n        return result;\n    }\n\n    updateData(data) {\n        const me = this;\n\n        me._data = data;\n\n        // Calculate the top value from all the series\n        if (!me.topValue && me._data && me._series) {\n            me.topValue = me.getDataTopValue(data);\n        }\n\n        if (!me.refreshSuspended) {\n            me.scheduleRefresh();\n        }\n    }\n\n    updateTopValue(value) {\n        const me = this;\n\n        me._topValue = value;\n\n        // Calculate the top value from all the series\n        if (!value && me._data) {\n            me._topValue = me.getDataTopValue(me._data);\n        }\n\n        if (!me.refreshSuspended) {\n            me.scheduleRefresh();\n        }\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    suspendRefresh() {\n        this.refreshSuspended++;\n    }\n\n    resumeRefresh() {\n        if (this.refreshSuspended) {\n            this.refreshSuspended--;\n        }\n    }\n\n    refresh(params) {\n        const\n            me             = this,\n            {\n                series,\n                _tip,\n                topValue,\n                singleTextForAllBars\n            }              = me,\n            // extra arguments to pass through\n            extraArgs = params?.args || [],\n            histogramElements = [],\n            textElements = [];\n\n        // bail out if there is no series provided\n        if (!series) {\n            return;\n        }\n\n        for (const data of Object.values(series).sort(byOrder)) {\n            const elConfig = me[`draw${StringHelper.capitalize(data.type)}`](data, ...extraArgs);\n\n            if (Array.isArray(elConfig)) {\n                histogramElements.push.apply(histogramElements, elConfig);\n            }\n            else {\n                histogramElements.push(elConfig);\n            }\n\n            // if it's told we should have separate texts for bars\n            if (!singleTextForAllBars && data.type === 'bar') {\n                textElements.push(...me.drawText(data, ...extraArgs));\n            }\n        }\n\n        // sort again since user could change order in a hook\n        histogramElements.sort(byDatasetOrder);\n\n        if (singleTextForAllBars) {\n            textElements.push(...me.drawText(null, ...extraArgs));\n        }\n        else {\n            textElements.sort(byDatasetOrder);\n        }\n\n        DomSync.sync({\n            domConfig : {\n                width               : '100%',\n                height              : '100%',\n                preserveAspectRatio : 'none',\n                dataset             : {\n                    topValue\n                },\n                children : [\n                    {\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup',\n                        children  : histogramElements\n                    },\n                    {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup',\n                        children  : textElements\n                    }\n                ]\n            },\n            configEquality : returnFalse,\n            targetElement  : me.svgElement\n        });\n\n        if (_tip && _tip.isVisible) {\n            me.onBeforeTipShow({ source : _tip });\n        }\n    }\n\n    drawBar(series, ...args) {\n        const\n            me           = this,\n            {\n                topValue,\n                data,\n                omitZeroHeightBars,\n                barStyle\n            }            = me,\n            {\n                field,\n                order,\n                stretch\n            }            = series,\n            { length }   = data,\n            defaultWidth = 1 / length,\n            children     = [],\n            seriesId     = StringHelper.createId(series.id),\n            seriesIndex  = series.index,\n            forceHeight  = stretch ? 1 : undefined;\n\n        let width;\n\n        for (let index = 0, x = 0, { length } = data; index < length; index++, x += width) {\n            const datum = data[index];\n\n            let rectConfig = (datum.rectConfig = {\n                ns,\n                tag     : 'rect',\n                dataset : {}\n            });\n\n            const\n                value = datum[field],\n                // limit height with topValue otherwise the histogram looks fine\n                // yet the bar tooltip picks wrong Y-coordinate and there is an empty space between it and the bar\n                height = value ? forceHeight || datum.height || (value > topValue ? topValue : value) / topValue : 0,\n                y = 1 - height,\n                barTip = me.callback('getBarTip', me, [series, rectConfig, datum, index, ...args]);\n\n            // use either provided width or the calculated value\n            width = datum.width || defaultWidth;\n\n            if (barStyle) {\n                rectConfig.style = barStyle;\n            }\n            else {\n                delete rectConfig.style;\n            }\n\n            Object.assign(rectConfig.dataset, {\n                index,\n                order,\n                series : seriesId\n            });\n\n            const\n                rectClass = {\n                    [`b-series-${seriesId}`]          : 1,\n                    [`b-series-index-${seriesIndex}`] : 1\n                },\n                classes = me.callback('getRectClass', me, [series, rectConfig, datum, index, ...args]);\n\n            if (classes) {\n                classes.split(classesDelimiter).forEach(cls => rectClass[cls] = 1);\n            }\n\n            Object.assign(rectConfig, {\n                x,\n                y,\n                width,\n                height,\n                class : rectClass\n            });\n\n            if (barTip) {\n                rectConfig.dataset.btip = barTip;\n            }\n            else {\n                delete rectConfig.dataset.btip;\n            }\n\n            if (me.getRectConfig) {\n                rectConfig = me.getRectConfig(rectConfig, datum, index, series, ...args);\n            }\n\n            if (rectConfig && (rectConfig.height || !omitZeroHeightBars)) {\n                children.push(rectConfig);\n            }\n        }\n        return children;\n    }\n\n    changeGetRectConfig(fn) {\n        return fn ? this.bindCallback(fn) : null;\n    }\n\n    drawOutline(series, ...args) {\n        const\n            me           = this,\n            {\n                topValue,\n                data\n            }            = me,\n            {\n                field,\n                order,\n                id\n            }            = series,\n            defaultWidth = 1 / data.length,\n            coords       = ['M 0,1'],\n            result       = {\n                ns,\n                tag     : 'path',\n                dataset : {\n                    order,\n                    id\n                }\n            };\n\n        let\n            barWidth,\n            command1 = 'M',\n            command2 = 'L';\n\n        for (let i = 0, x = 0, { length } = data; i < length; i++) {\n            const barHeight = 1 - data[i][field] / topValue;\n\n            // use either provided with or the calculated value\n            barWidth = data[i].width || defaultWidth;\n\n            coords.push(`${command1} ${x},${barHeight} ${command2} ${x += barWidth},${barHeight}`);\n            command1 = command2 = '';\n        }\n        // coords.push('1,1');\n\n        result.class = `b-series-${series.id} b-series-index-${series.index} ` +\n            me.callback('getOutlineClass', me, [series, data, ...args]);\n\n        result.d = coords.join(' ');\n\n        return result;\n    }\n\n    drawText(series, ...args) {\n        const\n            me                = this,\n            { data }          = me,\n            defaultWidth      = 1 / data.length,\n            defaultY          = '100%',\n            unscaledSvgGroups = [];\n\n        for (let index = 0, width, x = 0, { length } = data; index < length; index++, x += width) {\n            width = data[index].width || defaultWidth;\n\n            const barText = me.callback('getBarText', me, [data[index], index, series, ...args]);\n\n            if (barText) {\n\n                const renderData = me.callback('getBarTextRenderData', me, [{\n                    ns,\n                    tag       : 'text',\n                    className : 'b-bar-legend',\n                    html      : barText,\n                    left      : x,\n                    width,\n                    x         : `${(x + width / 2) * 100}%`,\n                    y         : data[index].y !== undefined ? data[index].y : defaultY,\n                    dataset   : {\n                        index,\n                        series\n                    }\n                }, data[index], index, series, ...args]);\n\n                const barTip = me.callback('getBarTextTip', me, [renderData, data[index], index, series, ...args]);\n                if (barTip) {\n                    renderData.dataset.btip = barTip;\n                }\n                else {\n                    delete renderData.dataset.btip;\n                }\n\n                unscaledSvgGroups.push(renderData);\n            }\n        }\n\n        return unscaledSvgGroups;\n    }\n\n    //endregion\n}\n\nHistogram.initClass();\n","import Widget from '../Widget.js';\nimport DomSync from '../../helper/DomSync.js';\n\n/**\n * @module Core/widget/graph/Scale\n */\nconst\n    ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Displays a scale with ticks and labels.\n * @extends Core/widget/Widget\n * @classtype scale\n */\nexport default class Scale extends Widget {\n    //region Config\n\n    static get type() {\n        return 'scale';\n    }\n\n    static get $name() {\n        return 'Scale';\n    }\n\n    static get configurable() {\n        return {\n            scalePoints : null,\n\n            // Padding after the max scale point.\n            // Expressed as the share of the height.\n            scaleMaxPadding : 0.1,\n\n            /**\n             * Configure as `true` to create a horizontal scale. Scales are vertical by default.\n             * @config {Boolean}\n             */\n            horizontal : false,\n\n            /**\n             * Side to align the scale to. Defaults to `bottom` for {@link #config-horizontal} Scales\n             * and `right` for vertical Scales.\n             * @config {String}\n             */\n            align : {\n                value   : false,\n                $config : {\n                    merge : 'replace'\n                }\n            },\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup',\n                        children  : [{\n                            ns,\n                            tag       : 'path',\n                            reference : 'pathElement'\n                        }]\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            monitorResize : true\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.scheduleRefresh = this.createOnFrame(this.refresh, [], this, true);\n        this.refresh();\n    }\n\n    changeAlign(align) {\n        if (!align) {\n            align = this.horizontal ? 'bottom' : 'right';\n        }\n        return align;\n    }\n\n    updateAlign(align, oldAlign) {\n        this.element.classList.remove(`b-align-${oldAlign}`);\n        this.element.classList.add(`b-align-${align}`);\n    }\n\n    updateHorizontal(horizontal, oldHorizontal) {\n        this.element.classList.remove(`b-scale-${oldHorizontal ? 'horizontal' : 'vertical'}`);\n        this.element.classList.add(`b-scale-${horizontal ? 'horizontal' : 'vertical'}`);\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n        this.scheduleRefresh();\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    refresh() {\n        if (!this.scalePoints) {\n            return;\n        }\n\n        const\n            me             = this,\n            {\n                horizontal,\n                width,\n                height,\n                align,\n                scalePoints,\n                scaleMaxPadding\n            }                  = me,\n            scaleMax           = scalePoints[scalePoints.length - 1]?.value,\n            path               = [],\n            labels             = [];\n\n        const posFactor = 1 / (scaleMax + scaleMaxPadding * scaleMax);\n\n        me.scaledSvgGroup.setAttribute('transform', `scale(${horizontal ? width : 1} ${horizontal ? 1 : height})`);\n\n        for (const point of scalePoints) {\n            const isLabelStep = Boolean(point.text),\n                pos = posFactor * point.value;\n\n            if (isLabelStep) {\n                const label = {\n                    ns,\n                    tag       : 'text',\n                    className : 'b-scale-tick-label',\n                    html      : point.text,\n                    dataset   : {\n                        tick : point.value\n                    }\n                };\n\n                if (horizontal) {\n                    label.x = `${pos * 100}%`;\n                    label.y = align === 'top' ? '1.6em' : height - 12;\n                }\n                else {\n                    label.x = align === 'left' ? '12' : `${width - 12}`;\n                    label.y = `${(1 - pos) * 100}%`;\n                }\n                labels.push(label);\n            }\n\n            if (horizontal) {\n                if (align === 'top') {\n                    path.push(`M${pos},0 L${pos},${isLabelStep ? 10 : 5}`);\n                }\n                else {\n                    path.push(`M${pos},${height} L${pos},${height - (isLabelStep ? 10 : 5)}`);\n                }\n            }\n            else {\n                if (align === 'left') {\n                    path.push(`M0,${1 - pos} L${isLabelStep ? 10 : 5},${1 - pos}`);\n                }\n                else {\n                    path.push(`M${width},${1 - pos} L${width - (isLabelStep ? 10 : 5)},${1 - pos}`);\n                }\n            }\n        }\n        me.pathElement.setAttribute('d', path.join(''));\n        DomSync.syncChildren({\n            domConfig : { children : labels }\n        }, me.unscaledSvgGroup);\n    }\n\n    //endregion\n}\nScale.initClass();\n"],"names":["ns","typePrio","bar","outline","text","byOrder","l","r","parseInt","order","byDatasetOrder","dataset","getField","s","field","returnFalse","classesDelimiter","Histogram","Widget","type","$name","configurable","data","values","series","topValue","element","children","tag","reference","width","height","preserveAspectRatio","omitZeroHeightBars","singleTextForAllBars","monitorResize","getRectClass","rectConfig","datum","index","getOutlineClass","getBarTip","getBarText","getRectConfig","getBarTextRenderData","renderData","getBarTextTip","properties","refreshSuspended","construct","config","me","scheduleRefresh","createOnFrame","refresh","tip","_me$tip","destroy","_tip","Tooltip","new","owner","forElement","svgElement","forSelector","internalListeners","beforeShow","onElementResize","arguments","svgRect","getBoundingClientRect","scaledSvgGroup","setAttribute","onBeforeTipShow","source","activeTarget","html","contentTemplate","histogram","updateSeries","value","_series","barSeriesCount","id","Objects","merge","_data","getDataTopValue","fields","Object","map","result","i","length","j","Math","max","updateData","updateTopValue","_topValue","suspendRefresh","resumeRefresh","params","extraArgs","args","histogramElements","textElements","sort","elConfig","StringHelper","capitalize","Array","isArray","push","apply","drawText","DomSync","sync","domConfig","configEquality","targetElement","isVisible","drawBar","barStyle","stretch","defaultWidth","seriesId","createId","seriesIndex","forceHeight","undefined","x","y","barTip","callback","style","assign","rectClass","classes","split","forEach","cls","class","btip","changeGetRectConfig","fn","bindCallback","drawOutline","coords","barWidth","command1","command2","barHeight","d","join","defaultY","unscaledSvgGroups","barText","className","left","initClass","_$name","Scale","scalePoints","scaleMaxPadding","horizontal","align","$config","changeAlign","updateAlign","oldAlign","classList","remove","add","updateHorizontal","oldHorizontal","_scalePoints","scaleMax","path","labels","posFactor","point","isLabelStep","Boolean","pos","label","tick","pathElement","syncChildren","unscaledSvgGroup"],"mappings":"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"}