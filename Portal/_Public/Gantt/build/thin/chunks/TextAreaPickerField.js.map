{"version":3,"file":"TextAreaPickerField.js","sources":["../../../../Core/lib/Core/helper/XMLHelper.js","../../../../Core/lib/Core/helper/util/RandomGenerator.js","../../../../Core/lib/Core/util/Parser.js","../../../../Core/lib/Core/widget/TextAreaPickerField.js"],"sourcesContent":["import Objects from './util/Objects.js';\nimport StringHelper from './StringHelper.js';\n\n/**\n * @module Core/helper/XMLHelper\n */\n\n/**\n * Helper for XML manipulation.\n */\nexport default class XMLHelper {\n    /**\n     * Convert a JavaScript object to an XML string.\n     *\n     * From:\n     * ```javascript\n     * {\n     *     name : 'Task 1',\n     *     data : [\n     *         {\n     *             text : 'foo 1',\n     *             ref  : 'fooItem 1'\n     *         },\n     *         {\n     *             text : 'foo 2',\n     *             ref  : 'fooItem 2'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * To:\n     * ```xml\n     * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n     * <root>\n     *     <name>Task 1</name>\n     *     <data>\n     *         <element>\n     *             <text>foo 1</text>\n     *             <ref>fooItem 1</ref>\n     *         </element>\n     *         <element>\n     *             <text>foo 2</text>\n     *             <ref>fooItem 2</ref>\n     *         </element>\n     *     </data>\n     * </root>\n     * ```\n     *\n     * @param {Object} obj Object to convert.\n     * @param {Object} [options] Convert options.\n     * @param {String} [options.rootName] Root name for the XML. `root` by default.\n     * @param {String} [options.elementName] Element name for each node of the XML. `element` by default.\n     * @param {String} [options.xmlns] Add value for xmlns property for the root tag of the XML.\n     * @param {Boolean} [options.includeHeader] `false` to not include the header `<?xml version=\"1.0\" encoding=\"UTF-8\"?>` on top of the XML.\n     * @param {Boolean} [options.rootElementForArray] `false` to not include a root element for array of items. e.g. for the above example:\n     * ```xml\n     * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n     * <root>\n     *     <name>Task 1</name>\n     *     <element>\n     *         <text>foo 1</text>\n     *         <ref>fooItem 1</ref>\n     *     </element>\n     *     <element>\n     *         <text>foo 2</text>\n     *         <ref>fooItem 2</ref>\n     *     </element>\n     * </root>\n     * ```\n     * @returns {String} the XML\n     */\n    static convertFromObject(obj, options = {}) {\n        // override default values\n        Objects.assignIf(options, {\n            rootName            : 'root',\n            elementName         : 'element',\n            includeHeader       : true,\n            rootElementForArray : true\n        });\n\n        const { rootName, elementName, includeHeader, rootElementForArray } = options;\n        let { xmlns } = options;\n\n        xmlns = xmlns ? ` xmlns=\"${xmlns}\"` : '';\n        const header = includeHeader ? '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' : '';\n\n        const converter = (o) => {\n            const xmlItems = [];\n\n            for (const key in o) {\n                const item = o[key];\n\n                if (Array.isArray(item)) {\n                    if (rootElementForArray) {\n                        xmlItems.push(`<${key}>`);\n                    }\n\n                    for (const subItem of item) {\n                        if (elementName.length) {\n                            xmlItems.push(`<${elementName}>`);\n                        }\n                        else {\n                            xmlItems.push(`<${key}>`);\n                        }\n\n                        xmlItems.push(converter(subItem));\n\n                        if (elementName.length) {\n                            xmlItems.push(`</${elementName}>`);\n                        }\n                        else {\n                            xmlItems.push(`</${key}>`);\n                        }\n                    }\n\n                    if (rootElementForArray) {\n                        xmlItems.push(`</${key}>`);\n                    }\n                }\n                else if (Objects.isObject(item)) {\n                    xmlItems.push(`<${key}>${converter(item)}</${key}>`);\n                }\n                else {\n                    if (item == null) {\n                        xmlItems.push(`<${key}/>`);\n                    }\n                    else {\n                        xmlItems.push(`<${key}>${StringHelper.encodeHtml(item)}</${key}>`);\n                    }\n                }\n            }\n\n            return xmlItems.join('');\n        };\n\n        return `${header}<${rootName}${xmlns}>${converter(obj)}</${rootName}>`;\n    }\n}\n","/**\n * @module Core/helper/util/RandomGenerator\n */\n\n/**\n * Generates pseudo random numbers from predefined sequence of 100 numbers\n */\nexport default class RandomGenerator {\n\n    constructor() {\n        this.random100 = [46, 2, 36, 46, 54, 59, 18, 20, 71, 55, 88, 98, 13, 61, 61, 40, 2, 15, 3, 32, 51, 45, 64, 25, 81, 85, 54, 13, 57, 49, 64, 22, 81, 94, 0, 62, 17, 7, 11, 2, 33, 99, 85, 26, 83, 83, 96, 26, 20, 89, 91, 38, 26, 13, 11, 79, 32, 30, 5, 51, 70, 7, 5, 56, 58, 77, 37, 89, 40, 80, 78, 59, 26, 36, 8, 51, 60, 23, 86, 5, 11, 96, 64, 94, 87, 64, 4, 78, 17, 85, 35, 0, 90, 86, 23, 55, 53, 9, 35, 59, 29, 2, 64, 42, 8, 49, 43, 73, 6, 53, 38, 9, 39, 31, 32, 40, 49, 13, 78, 68, 20, 99, 24, 78, 35, 91, 73, 46, 67, 76, 89, 69, 30, 69, 25, 3, 4, 55, 1, 65, 66, 76, 83, 19, 67, 1, 95, 24, 54, 45, 56, 40, 67, 92, 72, 4, 69, 8, 47, 50, 27, 2, 38, 9, 14, 83, 12, 14, 62, 95, 22, 47, 35, 18, 38, 14, 86, 64, 68, 61, 52, 69, 39, 93, 20, 73, 32, 52, 74, 6, 56, 68, 99, 29, 24, 92, 40, 67, 6, 72, 31, 41, 91, 53, 80, 55, 33, 97, 97, 99, 18, 20, 5, 27, 82, 84, 61, 78, 27, 67, 7, 42, 75, 95, 91, 25, 63, 21, 70, 36, 46, 0, 1, 45, 84, 6, 86, 15, 10, 62, 96, 94, 10, 23, 93, 83, 94, 47, 5, 29, 29, 52, 51, 37, 77, 96, 43, 72, 43, 14, 54, 14, 72, 52, 4, 39, 15, 26, 68, 28, 25, 76, 60, 50, 22, 40, 72, 74, 68, 58, 8, 48, 40, 62, 52, 24, 9, 26, 47, 44, 49, 96, 7, 77, 90, 45, 76, 47, 5, 86, 1, 36, 18, 42, 19, 90, 34, 23, 70, 32, 69, 79, 0, 99, 57, 80, 72, 21, 19, 72, 85, 68, 4, 40, 86, 62, 0, 63, 4, 11, 69, 31, 78, 31, 21, 78, 29, 84, 13, 53, 57, 10, 26, 50, 24, 30, 90, 42, 51, 96, 93, 21, 99, 23, 81, 0, 89, 43, 86, 63, 93, 19, 54, 71, 92, 36, 4, 95, 37, 99, 60, 29, 23, 50, 68, 95, 57, 95, 77, 53, 99, 78, 75, 12, 92, 47, 23, 14, 0, 41, 98, 11, 34, 64, 26, 90, 50, 23, 38, 31, 74, 76, 16, 76, 66, 23, 22, 72, 48, 50, 20, 36, 37, 58, 5, 43, 49, 64, 81, 30, 8, 21, 98, 75, 60, 17, 50, 42, 27, 38, 90, 74, 45, 68, 67, 27, 31, 15, 58, 76, 41, 99, 23, 98, 53, 98, 56, 19, 79, 2, 4, 38, 96, 24, 65, 51, 43, 42, 41, 60, 46, 7, 90, 65, 3, 27, 63, 99, 51, 44, 86, 1, 54, 40, 15, 74, 3, 81, 51, 63, 87, 79, 84, 72, 22, 38, 96, 95, 33, 41, 21, 99, 21, 69, 7, 49, 40, 52, 41, 6, 91, 19, 76, 40, 54, 17, 33, 11, 11, 0, 1, 32, 94, 33, 13, 18, 45, 7, 85, 61, 42, 54, 45, 72, 78, 96, 17, 9, 80, 87, 41, 96, 66, 0, 8, 59, 18, 21, 2, 28, 64, 75, 97, 32, 80, 86, 97, 97, 55, 2, 73, 75, 11, 89, 67, 58, 70, 76, 12, 46, 64, 17, 22, 97, 25, 35, 93, 57, 82, 46, 57, 61, 31, 74, 27, 4, 32, 85, 53, 86, 53, 53, 42, 5, 28, 50, 65, 63, 70, 61, 73, 37, 13, 80, 7, 34, 22, 3, 26, 6, 62, 78, 12, 56, 87, 41, 58, 64, 31, 27, 45, 35, 18, 66, 62, 43, 89, 69, 94, 93, 33, 74, 2, 43, 85, 37, 82, 41, 74, 9, 15, 44, 33, 42, 65, 19, 1, 49, 78, 12, 29, 9, 78, 7, 55, 12, 45, 40, 33, 16, 86, 14, 52, 16, 73, 76, 0, 98, 75, 91, 78, 46, 99, 95, 90, 69, 78, 45, 62, 55, 37, 88, 49, 77, 27, 83, 38, 73, 39, 1, 75, 40, 65, 83, 54, 95, 7, 73, 4, 30, 26, 36, 89, 21, 5, 95, 11, 14, 87, 45, 36, 21, 77, 55, 5, 66, 51, 98, 48, 62, 74, 58, 23, 82, 30, 28, 19, 53, 89, 76, 98, 8, 34, 70, 28, 54, 16, 52, 35, 93, 54, 54, 72, 49, 18, 93, 72, 90, 71, 73, 15, 60, 38, 80, 76, 53, 70, 39, 69, 25, 5, 31, 61, 46, 6, 54, 34, 31, 52, 33, 36, 79, 76, 44, 29, 28, 38, 1, 66, 2, 90, 91, 1, 76, 78, 31, 55, 37, 71, 2, 3, 38, 85, 0, 95, 42, 2, 39, 57, 87, 61, 77, 98, 2, 24, 80, 48, 27, 47, 71, 15, 7, 49, 60, 86, 3, 2, 29, 38, 54, 36, 59, 83, 27, 47, 9, 36, 42, 8, 73, 85, 9, 16, 73, 60, 39, 12, 43, 25, 23, 29, 28, 47, 40, 77, 20, 89, 22, 30, 41, 59, 96, 19, 56, 20, 76, 73, 39, 46, 72, 40, 47, 37, 52, 29, 79, 37, 39, 50, 41, 87, 66, 17, 75, 31, 45, 26, 88, 70, 11, 90, 40, 74, 9, 32, 65, 72, 61, 6, 93, 54, 15, 84, 22, 99, 47, 10, 96, 4, 84, 19, 85, 73, 45, 25, 16, 8, 94, 99, 39, 28, 26, 68, 87, 48, 1, 65, 86, 46, 86, 7, 60, 82, 45, 75, 38, 56, 41, 35, 30, 86, 91, 97, 85, 45, 5, 14, 69, 85, 96, 37, 18, 26, 16, 38, 16, 1, 44, 94, 85, 58, 60, 20, 5, 47, 52, 41, 50, 71, 43, 42, 67, 64, 38, 65, 83, 99, 78, 96, 33, 20, 98, 24, 6, 2, 25, 16, 16, 44, 63, 24, 68, 56, 49, 91, 15, 59, 99, 27, 43, 34, 28, 36, 45, 1, 10, 19, 54, 26, 75, 17, 88, 96, 63, 24, 71, 93, 72, 97, 66, 87, 18, 86];\n        this.randomCache = {};\n        this.rndIndex    = 0;\n    }\n\n    /**\n     * Returns next pseudo random integer number from sequence between 0 and max parameter value (99 is maximum value)\n     * @param {Number} max max value\n     * @returns {Number}\n     */\n    nextRandom(max) {\n        const { randomCache } = this;\n        let randomNumbers;\n\n        if (randomCache[max]) {\n            randomNumbers = randomCache[max];\n        }\n        else {\n            randomNumbers    = this.random100.filter(num => num < max);\n            randomCache[max] = randomNumbers;\n        }\n\n        return randomNumbers[this.rndIndex++ % randomNumbers.length];\n    }\n\n    /**\n     * Resets sequence to initial number\n     */\n    reset() {\n        this.rndIndex = 0;\n    }\n\n    /**\n     * Returns pseudo random array element\n     * @param {Array} array input array\n     * @returns {*}\n     */\n    fromArray(array) {\n        return array[this.nextRandom(array.length)];\n    }\n\n    /**\n     * Creates a randon array from a larger array of possibilities\n     */\n    randomArray(array, maxLength) {\n        const\n            result = [],\n            length = this.nextRandom(maxLength + 1),\n            used   = {};\n\n        for (let i = 0, index = this.nextRandom(array.length); i < length; i++) {\n            // Each element must be unique\n            while (used[index]) {\n                index = this.nextRandom(array.length);\n            }\n\n            used[index] = true;\n            result.push(array[index]);\n        }\n        return result;\n    }\n}\n","import ObjectHelper from '../helper/ObjectHelper.js';\n\n// The code is based on https://epsil.github.io/gll/ article (MIT license).\n\n/**\n * @module Core/util/Parser\n */\n\n// Tools. Maybe move it to memoization module.\nlet nextObjectIdentity = 0;\nconst objectIdentityMap = new WeakMap();\n\nconst argsToCacheKey = (...args) => args.map((arg) => {\n    let result;\n\n    if (arg && typeof arg == 'object' || typeof arg == 'function') {\n        result = objectIdentityMap.get(arg);\n        if (result === undefined) {\n            result = ++nextObjectIdentity;\n            objectIdentityMap.set(arg, result);\n        }\n    }\n    else {\n        result = String(arg);\n    }\n\n    return result;\n}).join('-');\n\n/**\n * Generic memoization function. Wraps `fn` into higher order function which caches `fn` result\n * using stringified arguments as the cache key.\n *\n * @param {Function} fn function to memoize\n */\nexport const memo = (fn) => {\n    const mlist = new Map();\n\n    return (...args) => {\n        const mkey = argsToCacheKey(args);\n        let result = mlist.get(mkey);\n\n        if (result === undefined) {\n            result = fn(...args);\n            mlist.set(mkey, result);\n        }\n\n        return result;\n    };\n};\n\n/**\n * Specific memoization function caches `fn` calls. `fn` should receive 2 arguments, the first one\n * is a string, and the second one is a callback which should be called by `fn` with some result.\n * The function returned wraps `fn` and it's callback such that `fn` would be called only once\n * with a particular first argument, other time callback will be called instantly with the result cached.\n *\n * @param {Function} fn function to memoize\n */\nexport const memoCps = (fn) => {\n    const table = new Map(),\n        entryContinuations = (entry) => entry[0],\n        entryResults = (entry) => entry[1],\n        pushContinuation = (entry, cont) => entryContinuations(entry).push(cont),\n        pushResult = (entry, result) => entryResults(entry).push(result),\n        isResultSubsumed = (entry, result) => entryResults(entry).some(r => ObjectHelper.isEqual(r, result)),\n        makeEntry = () => [[], []],\n        isEmptyEntry = (entry) => !entryResults(entry).length && !entryContinuations(entry).length,\n        tableRef = (str) => {\n            let entry = table.get(str);\n\n            if (entry === undefined) {\n                entry = makeEntry();\n                table.set(str, entry);\n            }\n\n            return entry;\n        };\n\n    return (str, cont) => {\n        const entry = tableRef(str);\n\n        if (isEmptyEntry(entry)) {\n            pushContinuation(entry, cont);\n            fn(str, (result) => {\n                if (!isResultSubsumed(entry, result)) {\n                    pushResult(entry, result);\n                    entryContinuations(entry).forEach(cont => cont(result));\n                }\n            });\n        }\n        else {\n            pushContinuation(entry, cont);\n            entryResults(entry).forEach(result => cont(result));\n        }\n    };\n};\n// End of tools\n\nconst SUCCESS = Symbol('success');\nconst FAILURE = Symbol('failure');\n\n/**\n * Successful parsing result. Represented as array with 3 items:\n * - SUCCESS symbol which can be checked with {@link #function-isSuccess} function.\n * - Parsed payload\n * - Rest string left to parse\n *\n * @typedef {Array} SuccessResult\n */\n\n/**\n * Creates successful parsing result with parsed `val` and unparsed `rest`\n *\n * @param {String} val Parsed value\n * @param {String} rest Unparsed rest\n * @returns {SuccessResult}\n */\nexport const success = (val, rest) => [SUCCESS, val, rest];\n\n/**\n * Failure parsing result. Represented as array with 2 items:\n * - FAILURE symbol which can be checked with {@link #function-isSuccess} function\n * - Rest string left to parse\n *\n * @typedef {Array} FailureResult\n */\n\n/**\n * Creates failed parsing result with unparsed `rest`\n *\n * @param {String} rest Unparsed rest\n * @returns {FailureResult}\n */\nexport const failure = (rest) => [FAILURE, rest];\n\n/**\n * Checks if the given parsing `result` is successful\n *\n * @param {SuccessfulResult|FailureResult} result\n */\nexport const isSuccess = (result) => result.length && result[0] === SUCCESS;\n\n/**\n * Resolves parser when needed. Parser should be resolved if it's defined as a function\n * with no arguments which returns the actual parser function with more then one argument.\n *\n * @param {Function} p Parser factory\n * @returns {Function} Combinable parser function\n */\nexport const resolveParser = (p) => typeof p === 'function' && !p.length ? p() : p;\n\n/**\n * Returns combinable parser which always return successful parsing result with `val`\n * as parsed result and string parsed as `rest`.\n *\n * @param {*} val Successful parsing result parsed payload\n * @returns {Function} Combinable parser function\n *\n * @example\n * const sp = succeed('Ok');\n * sp('My string', (r) => console.dir(r)) // Will output successful parsing result with `Ok` payload and `My string` rest.\n */\nexport const succeed =\n    memo(\n        (val) =>\n            memoCps(\n                (str, cont) =>\n                    cont(success(val, str))\n            )\n    );\n\n/**\n * Returns combinable parser which succeeds if string parsed starts with `match`. The parsing\n * result will contain `match` as parsed result and rest of the string characters,\n * the ones after `match` as the unparsed rest.\n *\n * @param {String} match String to match\n * @returns {Function} Combinable parser function\n *\n * @example\n * const mp = string('My');\n * mp('My string', (r) => console.dir(r)); // Will output successful parsing result with `My` payload and `string` rest.\n */\nexport const string =\n    memo(\n        (match) =>\n            memoCps(\n                (str, cont) => {\n                    const len = Math.min(match.length, str.length),\n                        head = str.substr(0, len),\n                        tail = str.substr(len);\n\n                    cont(head === match ? success(head, tail) : failure(tail));\n                }\n            )\n    );\n\n/**\n * Binds parser or parser factory with a `fn` function which should receive one string argument\n * and return a combinable parser function.\n *\n * @param {Function} p Combinable parser function or combinable parser factory which can be\n *                     resolved using with {@link #function-resolveParser}.\n * @param {Function} fn A function receiving one string argument and returning combinable parser function.\n *\n * @internal\n */\nexport const bind = (p, fn) =>\n    (str, cont) =>\n        resolveParser(p)(str, (result) => {\n            if (isSuccess(result)) {\n                const [, val, rest] = result;\n                fn(val)(rest, cont);\n            }\n            else {\n                cont(result);\n            }\n        });\n\n/**\n * Combines several combined parser functions or combinable parser factories in sequence such that second starts after first succeeds\n * third after second etc, if first fails then second will not be called and so on.\n *\n * @param {...Function} parsers Combinable parser function or combinable parser factory which can be\n *                      resolved using with {@link #function-resolveParser}.\n * @returns {Function} Combinable parser function\n *\n * @example\n * const ab = seq(string('a'), string('b'));\n * ab('abc', (r) => console.dir(r)); // Will output successful parsing result with `ab` as parsed payload and `c` as the rest.\n */\nexport const seq =\n    memo(\n        (...parsers) => {\n            const seq2 = memo(\n                (a, b) =>\n                    memoCps(\n                        bind(\n                            a,\n                            (x) => bind(\n                                b,\n                                (y) => succeed([].concat(x, y))\n                            )\n                        )\n                    )\n            );\n\n            return parsers.reduce(seq2, succeed([]));\n        }\n    );\n\n/**\n * Combines several combined parser functions or combinable parser factories in alteration such that successful parsing result will be passed into\n * a callback if one of those parsers succeeds.\n *\n * @param {...Function} parsers Combinable parser function or combinable parser factory which can be\n *                      resolved using with {@link #function-resolveParser}.\n * @returns {Function} Combinable parser function\n *\n * @example\n * const aorb = alt(string('a'), string('b'));\n * aorb('abc', (r) => console.dir(r)); // Will output successful parsing result with `a` as parsed payload and `bc` as the rest.\n * aorb('bbc', (r) => console.dir(r)); // Will output successful parsing result with `b` as parsed payload and `bc` as the rest.\n */\nexport const alt =\n    memo(\n        (...parsers) =>\n            memoCps(\n                (str, cont) =>\n                    parsers.forEach(p => resolveParser(p)(str, cont))\n            )\n    );\n\n/**\n * Creates combinable parser which succeeds if string to parse starts from a substring which succeeds for the regular expression\n * `pattern` the parser is created with.\n *\n * @param {String} pattern Regular expression pattern\n * @returns {Function} Combinable parser function\n *\n * @example\n * const rp = regexp('a+');\n * rp('aaabb', (r) => console.dir(r)); // Will output successful parsing result with `aaa` as parsed payload and `bb` as the rest.\n */\nexport const regexp =\n    memo(\n        (pattern) =>\n            (str, cont) => {\n                const rexp = new RegExp(`^${pattern}`),\n                    match = rexp.exec(str);\n\n                if (match) {\n                    const head = match[0],\n                        tail = str.substr(head.length);\n\n                    cont(success(head, tail));\n                }\n                else {\n                    cont(failure(str));\n                }\n            }\n    );\n\n/**\n * Creates reducing combinable parser function which should be used to create semantic actions\n * on parsed results.\n *\n * @param {Function} p Combinable parser function or combinable parser factory which can be\n *                     resolved using with {@link #function-resolveParser}.\n * @param {Function} fn Semantic action function should be the same arity as the successful result arity\n *                      of `p` parser.\n * @returns {Function} Combinable parser function\n *\n * @example\n * const nump = red(\n *     regexp('\\d'),\n *     Number\n * );\n *\n * const plusp = string('+');\n *\n * const sump = red(\n *     seq(nump, plusp, nump),\n *     (a, _, b) => a + b\n * );\n *\n * sump('7+8', (r) => console.dir(r)); // Will return successful parsing result with `15` as parsing payload and `` as rest.\n */\nexport const red =\n    memo(\n        (p, fn) =>\n            bind(\n                p,\n                (...val) =>\n                    succeed(fn(...[].concat.apply([], val)))\n            )\n    );\n\n/**\n * Runs combinable parsing function returning totally parsed results only, i.e. such results which have\n * parsed the `str` string completely.\n *\n * @param {Function} body Combinable parser function\n * @param {String} str String to parse\n * @returns {SuccessfulResult[]} All totally parsed results possible for the given parsing function.\n */\nexport const runParser = (body, str) => {\n    const results = [];\n\n    body(str, (result) => {\n        if (isSuccess(result)) {\n            const [, , left] = result;\n            if (left === '') {\n                results.push(result);\n            }\n        }\n    });\n\n    return results;\n};\n\n/**\n * Helper function for combinable parser definition supplements combinable parser function\n * returning a higher order function which when called with 2 arguments (string to parse and\n * a callback function) behaves exactly like parser function, but when called with 1 argument\n * it wraps call to parser function with {@link function-runParser} thus returning array of\n * totally parsed results.\n *\n * @param {Function} body Combinable parser function\n */\nexport const defineParser = (body) =>\n    (str, cont) => cont ? resolveParser(body)(str, cont) : runParser(resolveParser(body), str);\n\n//Combines exports in an object such that it was possible to export parser utilities\n// in UMD/module bundles.\nexport default {\n    memo,\n    memoCps,\n    success,\n    failure,\n    isSuccess,\n    resolveParser,\n    succeed,\n    string,\n    bind,\n    seq,\n    alt,\n    regexp,\n    red,\n    runParser,\n    defineParser\n};\n","import PickerField from './PickerField.js';\nimport Objects from '../helper/util/Objects.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n\n/**\n * @module Core/widget/TextAreaPickerField\n */\n\n/**\n * TextAreaPickerField is a picker field with a drop down showing a `textarea` element for multiline text input. See also\n * {@link Core.widget.TextAreaField}.\n *\n * ```javascript\n * let textAreaField = new TextAreaPickerField({\n *   placeholder: 'Enter some text'\n * });\n *```\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for {@link Grid.column.Column Columns}.\n *\n * @extends Core/widget/PickerField\n * @classType textareapickerfield\n * @inlineexample Core/widget/TextAreaPickerField.js\n * @inputfield\n */\nexport default class TextAreaPickerField extends PickerField {\n    static get $name() {\n        return 'TextAreaPickerField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'textareapickerfield';\n    }\n\n    static get configurable() {\n        return {\n            picker : {\n                type         : 'widget',\n                tag          : 'textarea',\n                cls          : 'b-textareapickerfield-picker',\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't-b',\n                    axisLock : true\n                },\n                autoShow : false\n            },\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-picker',\n                    handler : 'onTriggerClick'\n                }\n            },\n\n            /**\n             * The resize style to apply to the `<textarea>` element.\n             * @config {'none'|'both'|'horizontal'|'vertical'}\n             * @default\n             */\n            resize : 'none',\n\n            inputType : null\n        };\n    }\n\n    startConfigure(config) {\n        if (typeof config.inline === 'boolean') {\n            VersionHelper.deprecate('Core', '6.0.0', 'TextAreaPickerField.inline config is no longer supported');\n        }\n\n        super.startConfigure(config);\n    }\n\n    get inputElement() {\n        const\n            result = super.inputElement;\n\n        result.readOnly = 'readonly';\n        result.reference = 'displayElement';\n        this.ariaElement = 'displayElement';\n\n        return result;\n    }\n\n    get focusElement() {\n        return this._picker?.isVisible ? this.input : this.displayElement;\n    }\n\n    get needsInputSync() {\n        return this.displayElement[this.inputValueAttr] !== String(this.inputValue ?? '');\n    }\n\n    showPicker() {\n        const\n            me         = this,\n            { picker } = me;\n\n        // Block picker if inline\n        if (!me.inline) {\n            picker.width = me.pickerWidth || me[me.pickerAlignElement].offsetWidth;\n\n            // Always focus the picker.\n            super.showPicker(true);\n        }\n    }\n\n    focusPicker() {\n        this.input.focus();\n    }\n\n    onPickerKeyDown(keyEvent) {\n        const\n            me        = this,\n            realInput = me.input;\n\n        switch (keyEvent.key.trim() || keyEvent.code) {\n            case 'Escape':\n                // <remove-on-release>\n                // TODO: revert value?\n                // </remove-on-release>\n                me.picker.hide();\n                return;\n            case 'Enter':\n                if (keyEvent.ctrlKey) {\n                    me.syncInputFieldValue();\n                    me.picker.hide();\n                }\n                break;\n        }\n\n        // Super's onPickerKeyDown fires through this.input, so avoid infinite recursion\n        // by redirecting it through the displayElement.\n        me.input     = me.displayElement;\n        const result = super.onPickerKeyDown(keyEvent);\n        me.input     = realInput;\n\n        return result;\n    }\n\n    syncInputFieldValue(skipHighlight) {\n        if (this.displayElement) {\n            this.displayElement.value = this.inputValue;\n        }\n\n        super.syncInputFieldValue(skipHighlight);\n    }\n\n    changeValue(value) {\n        return value == null ? '' : value;\n    }\n\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            pickerWidth = me.pickerWidth || picker?.width;\n\n        picker = TextAreaPickerField.reconfigure(oldPicker, picker ? Objects.merge({\n            owner      : me,\n            forElement : me[me.pickerAlignElement],\n            align      : {\n                matchSize : pickerWidth == null,\n                anchor    : me.overlayAnchor,\n                target    : me[me.pickerAlignElement]\n            },\n            id    : me.id + '-input',\n            style : {\n                resize : me.resize\n            },\n            html : me.value ?? ''\n        }, picker) : null, me);\n\n        // May have been set to null (destroyed)\n        if (picker) {\n            const input = me.input = picker.element;\n\n            me.inputListenerRemover = EventHelper.on({\n                element  : input,\n                thisObj  : me,\n                focus    : 'internalOnInputFocus',\n                change   : 'internalOnChange',\n                input    : 'internalOnInput',\n                keydown  : 'internalOnKeyEvent',\n                keypress : 'internalOnKeyEvent',\n                keyup    : 'internalOnKeyEvent'\n            });\n        }\n\n        return picker;\n    }\n}\n\n// Register this widget type with its Factory\nTextAreaPickerField.initClass();\n"],"names":["XMLHelper","convertFromObject","obj","options","Objects","assignIf","rootName","elementName","includeHeader","rootElementForArray","xmlns","header","converter","o","xmlItems","key","item","Array","isArray","push","subItem","length","isObject","StringHelper","encodeHtml","join","_$name","RandomGenerator","constructor","random100","randomCache","rndIndex","nextRandom","max","randomNumbers","filter","num","reset","fromArray","array","randomArray","maxLength","result","used","i","index","nextObjectIdentity","objectIdentityMap","WeakMap","argsToCacheKey","args","map","arg","get","undefined","set","String","memo","fn","mlist","Map","mkey","memoCps","table","entryContinuations","entry","entryResults","pushContinuation","cont","pushResult","isResultSubsumed","some","r","ObjectHelper","isEqual","makeEntry","isEmptyEntry","tableRef","str","forEach","SUCCESS","Symbol","FAILURE","success","val","rest","failure","isSuccess","resolveParser","p","succeed","string","match","len","Math","min","head","substr","tail","bind","seq","parsers","seq2","a","b","x","y","concat","reduce","alt","regexp","pattern","rexp","RegExp","exec","red","apply","runParser","body","results","left","defineParser","TextAreaPickerField","PickerField","$name","type","configurable","picker","tag","cls","scrollAction","align","axisLock","autoShow","triggers","expand","handler","resize","inputType","startConfigure","config","inline","VersionHelper","deprecate","inputElement","readOnly","reference","ariaElement","focusElement","_this$_picker","_picker","isVisible","input","displayElement","needsInputSync","inputValueAttr","inputValue","showPicker","me","width","pickerWidth","pickerAlignElement","offsetWidth","focusPicker","focus","onPickerKeyDown","keyEvent","realInput","trim","code","hide","ctrlKey","syncInputFieldValue","skipHighlight","value","changeValue","changePicker","oldPicker","reconfigure","merge","owner","forElement","matchSize","anchor","overlayAnchor","target","id","style","html","element","inputListenerRemover","EventHelper","on","thisObj","change","keydown","keypress","keyup","initClass"],"mappings":"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EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,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"}