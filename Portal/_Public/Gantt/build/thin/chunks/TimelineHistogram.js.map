{"version":3,"file":"TimelineHistogram.js","sources":["../../../../Scheduler/lib/Scheduler/column/ScaleColumn.js","../../../../Scheduler/lib/Scheduler/feature/base/ResourceTimeRangesBase.js","../../../../Scheduler/lib/Scheduler/view/DependencyEditor.js","../../../../Scheduler/lib/Scheduler/feature/DependencyEdit.js","../../../../Scheduler/lib/Scheduler/feature/ScheduleContext.js","../../../../Scheduler/lib/Scheduler/feature/EventCopyPaste.js","../../../../Scheduler/lib/Scheduler/feature/EventDrag.js","../../../../Scheduler/lib/Scheduler/feature/EventDragCreate.js","../../../../Scheduler/lib/Scheduler/feature/EventTooltip.js","../../../../Scheduler/lib/Scheduler/feature/StickyEvents.js","../../../../Scheduler/lib/Scheduler/feature/TimeRanges.js","../../../../Scheduler/lib/Scheduler/view/mixin/DelayedRecordsRendering.js","../../../../Scheduler/lib/Scheduler/view/TimelineHistogramRendering.js","../../../../Scheduler/lib/Scheduler/view/TimelineHistogramBase.js","../../../../Scheduler/lib/Scheduler/view/mixin/TimelineHistogramGrouping.js","../../../../Scheduler/lib/Scheduler/view/mixin/TimelineHistogramScaleColumn.js","../../../../Scheduler/lib/Scheduler/view/TimelineHistogram.js"],"sourcesContent":["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Scale from '../../Core/widget/graph/Scale.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/column/ScaleColumn\n */\n\n/**\n * An object representing a point on the scale displayed by {@link Scheduler.column.ScaleColumn}.\n *\n * @typedef {Object} ScalePoint\n * @property {Number} value Point value\n * @property {String} unit Point value unit\n * @property {String} text Point text label\n */\n\n/**\n * A specialized column showing a graduated scale from a defined array of values\n * and labels. This column is used in the {@link Scheduler.view.TimelineHistogram} and is not editable. Normally\n * you should not need to interact with this class directly.\n *\n * @extends Grid/column/Column\n * @classType scale\n * @column\n */\nexport default class ScaleColumn extends Column {\n\n    //region Config\n\n    static $name = 'ScaleColumn';\n\n    static type = 'scale';\n\n    static isScaleColumn = true;\n\n    static get fields() {\n        return [\n            'scalePoints'\n        ];\n    }\n\n    static get defaults() {\n        return {\n            text            : '\\xa0',\n            width           : 40,\n            minWidth        : 40,\n            field           : 'scalePoints',\n            cellCls         : 'b-scale-cell',\n            editor          : false,\n            sortable        : false,\n            groupable       : false,\n            filterable      : false,\n            alwaysClearCell : false,\n            scalePoints     : null\n        };\n    }\n\n    //endregion\n\n    //region Constructor/Destructor\n\n    onDestroy() {\n        this.scaleWidget.destroy();\n    }\n\n    //endregion\n\n    //region Internal\n\n    set width(width) {\n        super.width = width;\n        this.scaleWidget.width = width;\n    }\n\n    get width() {\n        return super.width;\n    }\n\n    applyValue(useProp, key, value) {\n        // pass value to scaleWidget\n        if (key === 'scalePoints') {\n            this.scaleWidget[key] = value;\n        }\n\n        return super.applyValue(...arguments);\n    }\n\n    buildScaleWidget() {\n        const me = this;\n\n        const scaleWidget = new Scale({\n            owner         : me.grid,\n            appendTo      : me.grid.floatRoot,\n            cls           : 'b-hide-offscreen',\n            align         : 'right',\n            scalePoints   : me.scalePoints,\n            monitorResize : false\n        });\n\n        Object.defineProperties(scaleWidget, {\n            width : {\n                get() {\n                    return me.width;\n                },\n                set(width) {\n                    this.element.style.width = `${width}px`;\n                    this._width = me.width;\n                }\n            },\n            height : {\n                get() {\n                    return this._height;\n                },\n                set(height) {\n                    this.element.style.height = `${height}px`;\n                    this._height = height;\n                }\n            }\n        });\n\n        scaleWidget.width = me.width;\n\n        return scaleWidget;\n    }\n\n    get scaleWidget() {\n        const me = this;\n\n        if (!me._scaleWidget) {\n            me._scaleWidget = me.buildScaleWidget();\n        }\n\n        return me._scaleWidget;\n    }\n\n    //endregion\n\n    //region Render\n\n    renderer({ cellElement, value, scaleWidgetConfig, scaleWidget = this.scaleWidget }) {\n        ObjectHelper.assign(scaleWidget, {\n            scalePoints : value || this.scalePoints,\n            height      : this.grid.rowHeight\n        }, scaleWidgetConfig);\n\n        scaleWidget.refresh();\n\n        // Clone the scale widget element since every row is supposed to have\n        // the same scale settings\n        const scaleCloneElement = scaleWidget.element.cloneNode(true);\n        scaleCloneElement.removeAttribute('id');\n        scaleCloneElement.classList.remove('b-hide-offscreen');\n\n        cellElement.innerHTML = '';\n        cellElement.appendChild(scaleCloneElement);\n    }\n\n    //endregion\n\n}\n\nColumnStore.registerColumnType(ScaleColumn);\n","import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport AttachToProjectMixin from '../../data/mixin/AttachToProjectMixin.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\n\n/**\n * @module Scheduler/feature/base/ResourceTimeRangesBase\n */\n\n/**\n * Abstract base class for ResourceTimeRanges and ResourceNonWorkingTime features.\n * You should not use this class directly.\n *\n * @extends Core/mixin/InstancePlugin\n * @abstract\n */\nexport default class ResourceTimeRangesBase extends InstancePlugin.mixin(AttachToProjectMixin) {\n    //region Config\n\n    static configurable = {\n        /**\n         * Specify value to use for the tabIndex attribute of range elements\n         * @config {Number}\n         * @category Misc\n         */\n        tabIndex : null,\n\n        entityName : 'resourceTimeRange'\n    };\n\n    static get pluginConfig()  {\n        return {\n            chain    : ['getEventsToRender', 'onEventDataGenerated', 'noFeatureElementsInAxis'],\n            override : ['matchScheduleCell', 'resolveResourceRecord']\n        };\n    }\n\n    // Let Scheduler know if we have ResourceTimeRanges in view or not\n    noFeatureElementsInAxis() {\n        const { timeAxis } = this.client;\n        return !this.needsRefresh && this.store && !this.store.storage.values.some(t => timeAxis.isTimeSpanInAxis(t));\n    }\n\n    //endregion\n\n    //region Init\n\n    doDisable(disable) {\n        if (this.client.isPainted) {\n            this.client.refresh();\n        }\n\n        super.doDisable(disable);\n    }\n\n    updateTabIndex() {\n        if (!this.isConfiguring) {\n            this.client.refresh();\n        }\n    }\n\n    //endregion\n\n    getEventsToRender(resource, events) {\n        throw new Error('Implement in subclass');\n    }\n\n    // Called for each event during render, allows manipulation of render data. Adjust any resource time ranges\n    // (chained function from Scheduler)\n    onEventDataGenerated(renderData) {\n        const\n            me                       = this,\n            { eventRecord, iconCls } = renderData;\n\n        if (me.shouldInclude(eventRecord)) {\n            if (me.client.isVertical) {\n                renderData.width = renderData.resourceRecord.columnWidth || me.client.resourceColumnWidth;\n            }\n            else {\n                renderData.top = 0;\n            }\n\n            // Flag that we should fill entire row/col\n            renderData.fillSize = true;\n            // Add our own cls\n            renderData.wrapperCls['b-sch-resourcetimerange'] = 1;\n            if (me.rangeCls) {\n                renderData.wrapperCls[me.rangeCls] = 1;\n            }\n            renderData.wrapperCls[`b-sch-color-${eventRecord.timeRangeColor}`] = eventRecord.timeRangeColor;\n            // Add label\n            renderData.eventContent.text = eventRecord.name;\n            renderData.children.push(renderData.eventContent);\n\n            // Allow configuring tabIndex\n            renderData.tabIndex = me.tabIndex != null ? String(me.tabIndex) : null;\n\n            // Add icon\n            if (iconCls?.length > 0) {\n                renderData.children.unshift({\n                    tag       : 'i',\n                    className : iconCls.toString()\n                });\n            }\n\n            // Event data for DOMSync comparison\n            renderData.eventId = me.generateElementId(eventRecord);\n        }\n    }\n\n    /**\n     * Generates ID from the passed time range record\n     * @param {Scheduler.model.TimeSpan} record\n     * @returns {String} Generated ID for the DOM element\n     * @internal\n     */\n    generateElementId(record) {\n        return record.domId;\n    }\n\n    resolveResourceTimeRangeRecord(rangeElement) {\n        return rangeElement?.closest(`.${this.rangeCls}`)?.elementData.eventRecord;\n    }\n\n    getElementFromResourceTimeRangeRecord(record) {\n        // return this.client.foregroundCanvas.querySelector(`[data-event-id=\"${record.domId}\"]`);\n        return this.client.foregroundCanvas.syncIdMap[record.domId];\n    }\n\n    resolveResourceRecord(event) {\n        const record = this.overridden.resolveResourceRecord(...arguments);\n\n        return record || this.resolveResourceTimeRangeRecord(event.target || event)?.resource;\n    }\n\n    shouldInclude(eventRecord) {\n        throw new Error('Implement in subclass');\n    }\n\n    // Called when a ResourceTimeRangeModel is manipulated, relays to Scheduler#onInternalEventStoreChange which updates to UI\n    onStoreChange(event) {\n        // Edge case for scheduler not using any events, it has to refresh anyway to get rid of ResourceTimeRanges\n        if (event.action === 'removeall' || event.action === 'dataset') {\n            this.needsRefresh = true;\n        }\n\n        this.client.onInternalEventStoreChange(event);\n\n        this.needsRefresh = false;\n    }\n\n    // Override to let scheduler find the time cell from a resource time range element\n    matchScheduleCell(target) {\n        let cell = this.overridden.matchScheduleCell(target);\n\n        if (!cell && this.enableMouseEvents) {\n            const\n                { client }   = this,\n                rangeElement = target.closest(`.${this.rangeCls}`);\n\n            cell = rangeElement && client.getCell({\n                record : client.isHorizontal ? rangeElement.elementData.resource : client.store.first,\n                column : client.timeAxisColumn\n            });\n        }\n\n        return cell;\n    }\n\n    handleRangeMouseEvent(domEvent) {\n        const\n            me           = this,\n            rangeElement = domEvent.target.closest(`.${me.rangeCls}`);\n\n        if (rangeElement) {\n            const\n                eventName               = EventHelper.eventNameMap[domEvent.type] ?? StringHelper.capitalize(domEvent.type),\n                resourceTimeRangeRecord = me.resolveResourceTimeRangeRecord(rangeElement);\n\n            me.client.trigger(me.entityName + eventName, {\n                feature                    : me,\n                [`${me.entityName}Record`] : resourceTimeRangeRecord,\n                resourceRecord             : me.client.resourceStore.getById(resourceTimeRangeRecord.resourceId),\n                domEvent\n            });\n        }\n    }\n\n    updateEnableMouseEvents(enable) {\n        const\n            me         = this,\n            { client } = me;\n\n        me.mouseEventsDetacher?.();\n        me.mouseEventsDetacher = null;\n\n        if (enable) {\n            function attachMouseEvents() {\n                me.mouseEventsDetacher = EventHelper.on({\n                    element     : client.foregroundCanvas,\n                    delegate    : `.${me.rangeCls}`,\n                    mousedown   : 'handleRangeMouseEvent',\n                    mouseup     : 'handleRangeMouseEvent',\n                    click       : 'handleRangeMouseEvent',\n                    dblclick    : 'handleRangeMouseEvent',\n                    contextmenu : 'handleRangeMouseEvent',\n                    mouseover   : 'handleRangeMouseEvent',\n                    mouseout    : 'handleRangeMouseEvent',\n                    thisObj     : me\n                });\n            }\n\n            client.whenVisible(attachMouseEvents);\n        }\n\n        client.element.classList.toggle('b-interactive-resourcetimeranges', Boolean(enable));\n    }\n}\n\n// No feature based styling needed, do not add a cls to Scheduler\nResourceTimeRangesBase.featureClass = '';\n","import Popup from '../../Core/widget/Popup.js';\n\n/**\n * @module Scheduler/view/DependencyEditor\n */\n\n/**\n * A dependency editor popup.\n *\n * @extends Core/widget/Popup\n * @private\n */\nexport default class DependencyEditor extends Popup {\n\n    static get $name() {\n        return 'DependencyEditor';\n    }\n\n    static get defaultConfig() {\n        return {\n            items     : [],\n            draggable : {\n                handleSelector : ':not(button,.b-field-inner)' // blacklist buttons and field inners\n            },\n            axisLock : 'flexible'\n        };\n    }\n\n    processWidgetConfig(widget) {\n        const { dependencyEditFeature } = this;\n\n        if (widget.ref === 'lagField' && !dependencyEditFeature.showLagField) {\n            return false;\n        }\n        if (widget.ref === 'deleteButton' && !dependencyEditFeature.showDeleteButton) {\n            return false;\n        }\n\n        return super.processWidgetConfig(widget);\n    }\n\n    afterShow(...args) {\n        const { deleteButton } = this.widgetMap;\n\n        // Only show delete button if the dependency record belongs to a store\n        if (deleteButton) {\n            deleteButton.hidden = !this.record.isPartOfStore();\n        }\n\n        super.afterShow(...args);\n    }\n\n    onInternalKeyDown(event) {\n        this.trigger('keyDown', { event });\n        super.onInternalKeyDown(event);\n    }\n}\n","import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport '../../Core/widget/DisplayField.js';\nimport '../../Core/widget/DurationField.js';\nimport DependencyEditor from '../view/DependencyEditor.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport Duration from '../../Core/data/Duration.js';\n\n/**\n * @module Scheduler/feature/DependencyEdit\n */\n\n/**\n * Feature that displays a popup containing fields for editing a dependency. Requires the\n * {@link Scheduler.feature.Dependencies} feature to be enabled. Double click a line in the demo below to show the\n * editor.\n *\n * {@inlineexample Scheduler/feature/Dependencies.js}\n *\n * ## Customizing the built-in widgets\n *\n * ```javascript\n *  const scheduler = new Scheduler({\n *      columns : [\n *          { field : 'name', text : 'Name', width : 100 }\n *      ],\n *      features : {\n *          dependencies   : true,\n *          dependencyEdit : {\n *              editorConfig : {\n *                  items : {\n *                      // Custom label for the type field\n *                      typeField : {\n *                          label : 'Kind'\n *                      }\n *                  },\n *\n *                  bbar : {\n *                      items : {\n *                          // Hiding save button\n *                          saveButton : {\n *                              hidden : true\n *                          }\n *                      }\n *                  }\n *              }\n *          }\n *      }\n *  });\n * ```\n *\n * ## Built in widgets\n *\n * | Widget ref             | Type                              | Weight | Description               |\n * |------------------------|-----------------------------------|--------|---------------------------|\n * | `fromNameField`        | {@link Core.widget.DisplayField}  | 100    | From task name (readonly) |\n * | `toNameField`          | {@link Core.widget.DisplayField}  | 200    | To task name (readonly)   |\n * | `typeField`            | {@link Core.widget.Combo}         | 300    | Edit type                 |\n * | `lagField`             | {@link Core.widget.DurationField} | 400    | Edit lag                  |\n *\n * The built in buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                       |\n * |------------------------|----------------------------|--------|-----------------------------------|\n * | `saveButton`           | {@link Core.widget.Button} | 100    | Save button on the bbar           |\n * | `deleteButton`         | {@link Core.widget.Button} | 200    | Delete button on the bbar         |\n * | `cancelButton`         | {@link Core.widget.Button} | 300    | Cancel editing button on the bbar |\n *\n * This feature is **off** by default.\n * For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Scheduler/dependencies\n * @classtype dependencyEdit\n * @feature\n */\nexport default class DependencyEdit extends InstancePlugin {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{StartToStart}',\n        'L{StartToEnd}',\n        'L{EndToStart}',\n        'L{EndToEnd}'\n    ];\n    // endregion\n    // </debug>\n\n    //region Config\n\n    static get $name() {\n        return 'DependencyEdit';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * True to hide this editor if a click is detected outside it (defaults to true)\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            autoClose : true,\n\n            /**\n             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            saveAndCloseOnEnter : true,\n\n            /**\n             * True to show a delete button in the form.\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showDeleteButton : true,\n\n            /**\n             * The event that shall trigger showing the editor. Defaults to `dependencydblclick`, set to empty string or\n             * `null` to disable editing of dependencies.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'dependencydblclick',\n\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : false,\n\n            dependencyRecord : null,\n\n            /**\n             * Default editor configuration, used to configure the Popup.\n             * @config {PopupConfig}\n             * @category Editor\n             */\n            editorConfig : {\n                title       : 'L{Edit dependency}',\n                localeClass : this,\n                closable    : true,\n\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    /**\n                     * Reference to the from name\n                     * @member {Core.widget.DisplayField} fromNameField\n                     * @readonly\n                     */\n                    fromNameField : {\n                        type   : 'display',\n                        weight : 100,\n                        label  : 'L{From}'\n                    },\n                    /**\n                     * Reference to the to name field\n                     * @member {Core.widget.DisplayField} toNameField\n                     * @readonly\n                     */\n                    toNameField : {\n                        type   : 'display',\n                        weight : 200,\n                        label  : 'L{To}'\n                    },\n                    /**\n                     * Reference to the type field\n                     * @member {Core.widget.Combo} typeField\n                     * @readonly\n                     */\n                    typeField : {\n                        type                  : 'combo',\n                        weight                : 300,\n                        label                 : 'L{Type}',\n                        name                  : 'type',\n                        editable              : false,\n                        valueField            : 'id',\n                        displayField          : 'name',\n                        localizeDisplayFields : true,\n                        buildItems            : function() {\n                            const dialog = this.parent;\n\n                            return Object.keys(DependencyModel.Type).map(type => ({\n                                id        : DependencyModel.Type[type],\n                                name      : dialog.L(type),\n                                localeKey : type\n                            }));\n                        }\n                    },\n\n                    /**\n                     * Reference to the lag field\n                     * @member {Core.widget.DurationField} lagField\n                     * @readonly\n                     */\n                    lagField : {\n                        type          : 'duration',\n                        weight        : 400,\n                        label         : 'L{Lag}',\n                        name          : 'lag',\n                        allowNegative : true\n                    }\n                },\n\n                bbar : {\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        foo : {\n                            type : 'widget',\n                            cls  : 'b-label-filler'\n                        },\n                        /**\n                         * Reference to the save button, if used\n                         * @member {Core.widget.Button} saveButton\n                         * @readonly\n                         */\n                        saveButton : {\n                            color : 'b-green',\n                            text  : 'L{Save}'\n                        },\n                        /**\n                         * Reference to the delete button, if used\n                         * @member {Core.widget.Button} deleteButton\n                         * @readonly\n                         */\n                        deleteButton : {\n                            color : 'b-gray',\n                            text  : 'L{Delete}'\n                        },\n                        /**\n                         * Reference to the cancel button, if used\n                         * @member {Core.widget.Button} cancelButton\n                         * @readonly\n                         */\n                        cancelButton : {\n                            color : 'b-gray',\n                            text  : 'L{Object.Cancel}'\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(client, config) {\n        const me = this;\n\n        client.dependencyEdit = me;\n\n        super.construct(client, config);\n\n        if (!client.features.dependencies) {\n            throw new Error('Dependencies feature required when using DependencyEdit');\n        }\n\n        me.clientListenersDetacher = client.ion({\n            [me.triggerEvent] : me.onActivateEditor,\n            thisObj           : me\n        });\n    }\n\n    doDestroy() {\n        this.clientListenersDetacher();\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Editing\n\n    changeEditorConfig(config) {\n        const\n            me                         = this,\n            { autoClose, cls, client } = me;\n\n        return ObjectHelper.assign({\n            owner        : client,\n            align        : 'b-t',\n            id           : `${client.id}-dependency-editor`, // no-sanity\n            autoShow     : false,\n            anchor       : true,\n            scrollAction : 'realign',\n            clippedBy    : [client.timeAxisSubGridElement, client.bodyContainer],\n            constrainTo  : globalThis,\n            autoClose,\n            cls\n        }, config);\n    }\n\n    //endregion\n\n    //region Save\n\n    get isValid() {\n        return Object.values(this.editor.widgetMap).every(field => {\n            if (!field.name || field.hidden) {\n                return true;\n            }\n\n            return field.isValid !== false;\n        });\n    }\n\n    get values() {\n        const values = {};\n\n        this.editor.eachWidget(widget => {\n            if (!widget.name || widget.hidden) return;\n\n            values[widget.name] = widget.value;\n        }, true);\n\n        return values;\n    }\n\n    /**\n     * Template method, intended to be overridden. Called before the dependency record has been updated.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record\n     *\n     **/\n    onBeforeSave(dependencyRecord) {}\n\n    /**\n     * Template method, intended to be overridden. Called after the dependency record has been updated.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record\n     *\n     **/\n    onAfterSave(dependencyRecord) {}\n\n    /**\n     * Updates record being edited with values from the editor\n     * @private\n     */\n    updateRecord(dependencyRecord) {\n        const { values } = this;\n\n        // Engine does not understand { magnitude, unit } syntax\n        if (values.lag) {\n            values.lagUnit = values.lag.unit;\n            values.lag = values.lag.magnitude;\n        }\n\n        // Type replaces fromSide/toSide, if they are used\n        if ('type' in values) {\n            dependencyRecord.fromSide != null && (values.fromSide = null);\n            dependencyRecord.toSide != null && (values.toSide = null);\n        }\n\n        // Chronograph doesn't filter out undefined fields, it nullifies them instead\n        // https://github.com/bryntum/chronograph/issues/11\n        ObjectHelper.cleanupProperties(values, true);\n\n        dependencyRecord.set(values);\n    }\n\n    //endregion\n\n    //region Events\n\n    onPopupKeyDown({ event }) {\n        if (event.key === 'Enter' && this.saveAndCloseOnEnter && event.target.tagName.toLowerCase() === 'input') {\n            // Need to prevent this key events from being fired on whatever receives focus after the editor is hidden\n            event.preventDefault();\n\n            this.onSaveClick();\n        }\n    }\n\n    onSaveClick() {\n        if (this.save()) {\n            this.afterSave();\n            this.editor.hide();\n        }\n    }\n\n    async onDeleteClick() {\n        if (await this.deleteDependency()) {\n            this.afterDelete();\n        }\n        this.editor.hide();\n    }\n\n    onCancelClick() {\n        this.afterCancel();\n        this.editor.hide();\n    }\n\n    afterSave() {}\n    afterDelete() {}\n    afterCancel() {}\n\n    //region Editing\n\n    // Called from editDependency() to actually show the editor\n    internalShowEditor(dependencyRecord) {\n        const\n            me         = this,\n            { client } = me,\n            editor     = me.getEditor(dependencyRecord);\n\n        me.loadRecord(dependencyRecord);\n\n        /**\n         * Fires on the owning Scheduler when the editor for a dependency is available but before it is shown. Allows\n         * manipulating fields before the widget is shown.\n         * @event beforeDependencyEditShow\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.\n         * @param {Core.widget.Popup} editor The editor popup\n         */\n        client.trigger('beforeDependencyEditShow', {\n            dependencyEdit : me,\n            dependencyRecord,\n            editor\n        });\n\n        let showPoint = me.lastPointerDownCoordinate;\n\n        if (!showPoint) {\n            const center = Rectangle.from(client.element).center;\n\n            showPoint = [center.x - editor.width / 2, center.y - editor.height / 2];\n        }\n\n        return editor.showBy(showPoint);\n    }\n\n    /**\n     * Opens a popup to edit the passed dependency.\n     * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency to edit\n     * @return {Promise} A Promise that yields `true` after the editor is shown\n     * or `false` if some application logic vetoed the editing (see `beforeDependencyEdit` in the docs).\n     */\n    async editDependency(dependencyRecord) {\n        const\n            me         = this,\n            { client } = me;\n\n        if (client.readOnly || dependencyRecord.readOnly ||\n            /**\n             * Fires on the owning Scheduler before an dependency is displayed in the editor.\n             * This may be listened for to allow an application to take over dependency editing duties. Return `false` to\n             * stop the default editing UI from being shown or a `Promise` yielding `true` or `false` for async vetoing.\n             * @event beforeDependencyEdit\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler\n             * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependencyEdit feature\n             * @param {Scheduler.model.DependencyModel} dependencyRecord The record about to be shown in the editor.\n             * @preventable\n             * @async\n             */\n            await client.trigger('beforeDependencyEdit', { dependencyEdit : me, dependencyRecord }) === false\n        ) {\n            return false;\n        }\n\n        // wait till the editor is shown\n        await this.internalShowEditor(dependencyRecord);\n\n        return true;\n    }\n\n    //endregion\n\n    //region Save\n\n    /**\n     * Gets an editor instance. Creates on first call, reuses on consecutive\n     * @internal\n     * @returns {Scheduler.view.DependencyEditor} Editor popup\n     */\n    getEditor() {\n        const me = this;\n\n        let { editor } = me;\n\n        if (editor) {\n            return editor;\n        }\n\n        editor = me.editor = DependencyEditor.new({\n            dependencyEditFeature : me,\n            autoShow              : false,\n            anchor                : true,\n            scrollAction          : 'realign',\n            constrainTo           : globalThis,\n            autoClose             : me.autoClose,\n            cls                   : me.cls,\n            rootElement           : me.client.rootElement,\n            internalListeners     : {\n                keydown : me.onPopupKeyDown,\n                thisObj : me\n            }\n        }, me.editorConfig);\n\n        if (editor.items.length === 0) {\n            console.warn('Editor configured without any `items`');\n        }\n\n        // assign widget refs\n        editor.eachWidget(widget => {\n            const ref = widget.ref || widget.id;\n            // don't overwrite if already defined\n            if (ref && !me[ref]) {\n                me[ref] = widget;\n            }\n        });\n\n        me.saveButton?.ion({ click : 'onSaveClick', thisObj : me });\n        me.deleteButton?.ion({ click : 'onDeleteClick', thisObj : me });\n        me.cancelButton?.ion({ click : 'onCancelClick', thisObj : me });\n\n        return me.editor;\n    }\n\n    //endregion\n\n    //region Delete\n\n    /**\n     * Sets fields values from record being edited\n     * @private\n     */\n    loadRecord(dependency) {\n        const me = this;\n\n        me.fromNameField.value = dependency.fromEvent.name;\n        me.toNameField.value = dependency.toEvent.name;\n\n        if (me.lagField) {\n            me.lagField.value = new Duration(dependency.lag, dependency.lagUnit);\n        }\n\n        me.editor.record = me.dependencyRecord = dependency;\n    }\n\n    //endregion\n\n    //region Stores\n\n    /**\n     * Saves the changes (applies them to record if valid, if invalid editor stays open)\n     * @private\n     * @fires beforeDependencySave\n     * @fires beforeDependencyAdd\n     * @fires afterDependencySave\n     * @returns {*}\n     */\n    async save() {\n        const\n            me                           = this,\n            { client, dependencyRecord } = me;\n\n        if (!dependencyRecord || !me.isValid) {\n            return;\n        }\n\n        const { dependencyStore, values } = me;\n\n        /**\n         * Fires on the owning Scheduler before a dependency is saved\n         * @event beforeDependencySave\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler instance\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved\n         * @param {Object} values The new values\n         * @preventable\n         */\n        if (client.trigger('beforeDependencySave', {\n            dependencyRecord,\n            values\n        }) !== false) {\n            me.onBeforeSave(dependencyRecord);\n\n            me.updateRecord(dependencyRecord);\n\n            // Check if this is a new record\n            if (dependencyStore && !dependencyRecord.stores.length) {\n                /**\n                 * Fires on the owning Scheduler before a dependency is added\n                 * @event beforeDependencyAdd\n                 * @on-owner\n                 * @param {Scheduler.view.Scheduler} source The scheduler\n                 * @param {Scheduler.feature.DependencyEdit} dependencyEdit The dependency edit feature\n                 * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be added\n                 * @preventable\n                 */\n                if (client.trigger('beforeDependencyAdd', { dependencyRecord, dependencyEdit : me }) === false) {\n                    return;\n                }\n\n                dependencyStore.add(dependencyRecord);\n            }\n\n            await client.project?.commitAsync();\n\n            /**\n             * Fires on the owning Scheduler after a dependency is successfully saved\n             * @event afterDependencySave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency about to be saved\n             */\n            client.trigger('afterDependencySave', { dependencyRecord });\n\n            me.onAfterSave(dependencyRecord);\n        }\n\n        return dependencyRecord;\n    }\n\n    /**\n     * Delete dependency being edited\n     * @private\n     * @fires beforeDependencyDelete\n     */\n    async deleteDependency() {\n        const { client, editor, dependencyRecord } = this;\n\n        /**\n         * Fires on the owning Scheduler before a dependency is deleted\n         * @event beforeDependencyDelete\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler instance\n         * @param {Scheduler.model.DependencyModel} dependencyRecord The dependency record about to be deleted\n         * @preventable\n         */\n        if (client.trigger('beforeDependencyDelete', { dependencyRecord }) !== false) {\n            if (editor.containsFocus) {\n                editor.revertFocus();\n            }\n\n            client.dependencyStore.remove(dependencyRecord);\n            await client.project?.commitAsync();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    get dependencyStore() {\n        return this.client.dependencyStore;\n    }\n    //endregion\n\n    //region Events\n\n    onActivateEditor({ dependency, event }) {\n        if (!this.disabled) {\n            this.lastPointerDownCoordinate = [event.clientX, event.clientY];\n            this.editDependency(dependency);\n        }\n    }\n\n    //endregion\n\n}\n\nGridFeatureManager.registerFeature(DependencyEdit, false);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\n/**\n * @module Scheduler/feature/ScheduleContext\n */\n\n/**\n * Allow visually selecting a schedule \"cell\" by clicking, or {@link #config-triggerEvent any other pointer gesture}.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         // Configure as a truthy value to enable the feature\n *         scheduleContext : {\n *             triggerEvent : 'hover',\n *             renderer     : (context, element) => {\n *                 element.innerText = '😎';\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * The contextual details are available in the {@link #property-context} property.\n *\n * **Note that the context is cleared upon change of {@link Scheduler.view.Scheduler#property-viewPreset}\n * such as when zooming in or out.**\n *\n * @extends Core/mixin/InstancePlugin\n * @inlineexample Scheduler/feature/ScheduleContext.js\n * @classtype scheduleContext\n * @feature\n */\nexport default class ScheduleContext extends InstancePlugin.mixin(Delayable) {\n    static get $name() {\n        return 'ScheduleContext';\n    }\n\n    static delayable = {\n        syncContextElement : 'raf'\n    };\n\n    static configurable = {\n        /**\n         * The pointer event type to use to update the context. May be `'hover'` to highlight the\n         * tick context when moving the mouse across the timeline.\n         * @config {'click'|'hover'|'contextmenu'|'mousedown'}\n         * @default\n         */\n        triggerEvent : 'click',\n\n        /**\n         * A function (or the name of a function) which may mutate the contents of the context overlay\n         * element which tracks the active resource/tick context.\n         * @config {String|Function}\n         * @param {TimelineContext} context The context being highlighted.\n         * @param {HTMLElement} element The context highlight element. This will be empty each time.\n         */\n        renderer : null,\n\n        /**\n         * The active context.\n         * @member {TimelineContext} timelineContext\n         * @readonly\n         */\n        context : {\n            $config : {\n                // Reject non-changes so that when using mousemove, we only update the context\n                // when it changes.\n                equal(c1, c2) {\n                    return c1?.index === c2?.index &&\n                        c1?.tickParentIndex === c2?.tickParentIndex &&\n                        !((c1?.tickStartDate || 0) - (c2?.tickStartDate || 0));\n                }\n            }\n        }\n    };\n\n    /**\n     * The contextual information about which cell was clicked on and highlighted.\n     *\n     * When the {@link Scheduler.view.Scheduler#property-viewPreset} is changed (such as when zooming)\n     * the context is cleared and the highlight is removed.\n     *\n     * @member {Object} context\n     * @property {Scheduler.view.TimelineBase} context.source The owning Scheduler\n     * @property {Date} context.date Date at mouse position\n     * @property {Scheduler.model.TimeSpan} context.tick A record which encapsulates the time axis tick clicked on.\n     * @property {Number} context.tickIndex The index of the time axis tick clicked on.\n     * @property {Date} context.tickStartDate The start date of the current time axis tick\n     * @property {Date} context.tickEndDate The end date of the current time axis tick\n     * @property {Grid.row.Row} context.row Clicked row (in horizontal mode only)\n     * @property {Number} context.index Index of clicked resource\n     * @property {Scheduler.model.ResourceModel} context.resourceRecord Resource record\n     * @property {MouseEvent} context.event Browser event\n     */\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        const\n            { triggerEvent } = this,\n            listeners        = {\n                datachange              : 'syncContextElement',\n                timeaxisviewmodelupdate : 'onTimeAxisViewModelUpdate',\n                presetchange            : 'clearContext',\n                thisObj                 : this\n            };\n\n        // If mousemove is our trigger, we cab use the client's timelineContextChange event\n        if (triggerEvent === 'mouseover') {\n            listeners.timelineContextChange = 'onTimelineContextChange';\n        }\n        // Otherwise, we have to listen for the required events on Schedule and events\n        else {\n            // Context menu will be expected to update the context if click or mousedown\n            // is the triggerEvent. Context menu is a mousedown gesture.\n            if (triggerEvent === 'click' || triggerEvent === 'mousedown') {\n                listeners.schedulecontextmenu = 'onScheduleContextGesture';\n            }\n\n            Object.assign(listeners, {\n                [`schedule${triggerEvent}`] : 'onScheduleContextGesture',\n                [`event${triggerEvent}`]    : 'onScheduleContextGesture',\n                ...listeners\n            });\n        }\n\n        // required to work\n        client.useBackgroundCanvas = true;\n\n        client.ion(listeners);\n        client.rowManager.ion({\n            rowheight : 'syncContextElement',\n            thisObj   : this\n        });\n    }\n\n    changeTriggerEvent(triggerEvent) {\n        // Both these things should route through to using the client's timelineContextChange event\n        if (triggerEvent === 'hover' || triggerEvent === 'mousemove') {\n            triggerEvent = 'mouseover';\n        }\n        return triggerEvent;\n    }\n\n    get element() {\n        return this._element || (this._element = DomHelper.createElement({\n            parent    : this.client.backgroundCanvas,\n            className : 'b-schedule-selected-tick'\n        }));\n    }\n\n    // Handle the Client's own timelineContextChange event which it maintains on mousemove\n    onTimelineContextChange({ context }) {\n        this.context = context;\n    }\n\n    // Handle the scheduleclick or eventclick Scheduler events if we re not using mouseover\n    onScheduleContextGesture(context) {\n        this.context = context;\n    }\n\n    onTimeAxisViewModelUpdate({ source : timeAxisViewModel }) {\n        // Just a mutation of existing tick details, sync the element\n        if (timeAxisViewModel.timeAxis.includes(this.context?.tick)) {\n            this.syncContextElement();\n        }\n        // The tick has gone, we have moved to a new ViewPreset, so clear the context.\n        else {\n            this.clearContext();\n        }\n    }\n\n    clearContext() {\n        this.context = null;\n    }\n\n    updateContext(context, oldContext) {\n        this.syncContextElement();\n    }\n\n    syncContextElement() {\n        if (this.context && this.enabled) {\n            const\n                me  = this,\n                {\n                    client,\n                    element,\n                    context,\n                    renderer\n                }   = me,\n                {\n                    isVertical\n                }   = client,\n                {\n                    style\n                }   = element,\n                row = isVertical ? client.rowManager.rows[0] : client.getRowFor(context.resourceRecord);\n\n            if (row) {\n                const\n                    {\n                        tickStartDate,\n                        tickEndDate,\n                        resourceRecord\n                    } = context,\n                    // get the position clicked based on dates\n                    renderData = client.currentOrientation.getTimeSpanRenderData({\n                        startDate   : tickStartDate,\n                        endDate     : tickEndDate,\n                        startDateMS : tickStartDate.getTime(),\n                        endDateMS   : tickEndDate.getTime()\n                    }, resourceRecord);\n\n                let top, width, height;\n\n                if (isVertical) {\n                    top = renderData.top;\n                    width = renderData.resourceWidth;\n                    height = renderData.height;\n                }\n                else {\n                    top = row.top;\n                    width = renderData.width;\n                    height = row.height;\n                }\n\n                // Move to current cell\n                style.display = '';\n                style.width = `${width}px`;\n                style.height = `${height}px`;\n                DomHelper.setTranslateXY(element, renderData.left, top);\n\n                // In case we updated on a datachange action : 'remove' or 'add' event.\n                context.index = row.index;\n\n                // Undo any contents added by the renderer last time round.\n                element.innerHTML = '';\n\n                // Show the context and the element to the renderer\n                renderer && me.callback(renderer, me, [context, element]);\n            }\n            // No row for resource might mean it's scrolled out of view or filtered out\n            // so just hide so that the next valid sync can restore it to visibility\n            else {\n                style.display = 'none';\n            }\n        }\n        else {\n            this.element.style.display = 'none';\n        }\n    }\n}\n\nScheduleContext.featureClass = 'b-scheduler-context';\n\nGridFeatureManager.registerFeature(ScheduleContext, false, ['Scheduler']);\n","import AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport CopyPasteBase from '../../Grid/feature/base/CopyPasteBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport './ScheduleContext.js';\n\n/**\n * @module Scheduler/feature/EventCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste events.\n *\n * This feature also adds entries to the {@link Scheduler/feature/EventMenu} for copying & cutting (see example below\n * for how to configure) and to the {@link Scheduler/feature/ScheduleMenu} for pasting.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}.\n *\n * {@inlineexample Scheduler/feature/EventCopyPaste.js}\n *\n * If you want to highlight the paste location when clicking in the schedule, consider enabling the\n * {@link Scheduler/feature/ScheduleContext} feature.\n *\n * <div class=\"note\">When used with Scheduler Pro, pasting will bypass any constraint set on the event to allow the\n * copy to be assigned the targeted date.</div>\n *\n * This feature is **enabled** by default.\n *\n * ## Customize menu items\n *\n * See {@link Scheduler/feature/EventMenu} and {@link Scheduler/feature/ScheduleMenu} for more info on customizing the\n * menu items supplied by the feature. This snippet illustrates the concept:\n *\n * ```javascript\n * // Custom copy text + remove cut option from event menu:\n * const scheduler = new Scheduler({\n *     features : {\n *         eventMenu : {\n *             items : {\n *                 copyEvent : {\n *                     text : 'Copy booking'\n *                 },\n *                 cutEvent  : false\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Keyboard shortcuts\n *\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action   | Action description                                |\n * |------------|----------|---------------------------------------------------|\n * | `Ctrl`+`C` | *copy*   | Copies selected event(s) into the clipboard.      |\n * | `Ctrl`+`X` | *cut*    | Cuts out selected event(s) into the clipboard.    |\n * | `Ctrl`+`V` | *paste*  | Insert copied or cut event(s) from the clipboard. |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Scheduler/guides/customization/keymap.md).\n *\n * ## Multi assigned events\n *\n * In a Scheduler that uses single assignment, copying and then pasting creates a clone of the event and assigns it\n * to the target resource. Cutting and pasting moves the original event to the target resource.\n *\n * In a Scheduler using multi assignment, the behaviour is slightly more complex. Cutting and pasting reassigns the\n * event to the target, keeping other assignments of the same event intact. The behaviour for copying and pasting is\n * configurable using the {@link #config-copyPasteAction} config. It accepts two values:\n *\n * * `'clone'` - The default, the event is cloned and the clone is assigned to the target resource. Very similar to the\n *   behaviour with single assignment (event count goes up by 1).\n * * `'assign'` - The original event is assigned to the target resource (event count is unaffected).\n *\n * This snippet shows how to reconfigure it:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventCopyPaste : {\n *             copyPasteAction : 'assign'\n *         }\n *     }\n * });\n * ```\n *\n * <div class=\"note\">Copying multiple assignments of the same event will always result in all but the first assignment\n * being removed on paste, since paste targets a single resource and an event can only be assigned to a resource once.\n * </div>\n *\n * ## Native/shared clipboard\n *\n * If you have multiple Schedulers (or other Bryntum products) on the same page, they will share clipboard. This makes\n * it possible to copy and paste between different Scheduler instances. It is also possible to use the native Clipboard\n * API if it is available and if you set {@link #config-useNativeClipboard} to `true`.\n *\n * Regardless of native clipboard availability, copy-pasting \"outside\" of the current Scheduler instance will convert\n * the copied events to a string. When pasting, the string will then be parsed back into events. In case of usage of the\n * native Clipboard API, this means it is possible to copy and paste events between completely different applications.\n *\n * To configure the fields that is converted and parsed from the copied string value, please see the\n * {@link #config-eventToStringFields} config.\n *\n * @extends Grid/feature/base/CopyPasteBase\n * @classtype eventCopyPaste\n * @feature\n */\n\nexport default class EventCopyPaste extends CopyPasteBase.mixin(AttachToProjectMixin) {\n    static $name = 'EventCopyPaste';\n\n    static pluginConfig = {\n        assign : [\n            'copyEvents',\n            'pasteEvents'\n        ],\n        chain : [\n            'populateEventMenu',\n            'populateScheduleMenu',\n            'onEventDataGenerated'\n        ]\n    };\n\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n\n        /**\n         * How to handle a copy paste operation when the host uses multi assignment. Either:\n         *\n         * - `'clone'`  - The default, clone the copied event, assigning the clone to the target resource.\n         * - `'assign'` - Add an assignment for the existing event to the target resource.\n         *\n         * For single assignment mode, it always uses the `'clone'` behaviour.\n         *\n         * @config {'clone'|'assign'}\n         * @default\n         */\n        copyPasteAction : 'clone',\n\n        /**\n         * When copying events (or assignments), data will be sent to the clipboard as a tab (`\\t`) and new-line (`\\n`)\n         * separated string with field values for fields present in this config (in specified order). The default\n         * included fields are (in this order):\n         * * name\n         * * startDate\n         * * endDate\n         * * duration\n         * * durationUnit\n         * * allDay\n         * To override, provide your own array of fields:\n         * ```javascript\n         * new Scheduler({\n         *     features : {\n         *         eventCopyPaste : {\n         *             eventToStringFields : [\n         *                'name',\n         *                'startDate',\n         *                'endDate',\n         *                'percentDone'\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         * <div class=\"note\">Please note that this config is both used for **converting** events to a string value and\n         * is also used to **parse** a string value to events.</div>\n         * @config {Array<String>}\n         */\n        eventToStringFields : ['name', 'startDate', 'endDate', 'duration', 'durationUnit', 'allDay']\n    };\n\n    construct(scheduler, config) {\n        super.construct(scheduler, config);\n\n        scheduler.ion({\n            eventClick    : 'onEventClick',\n            scheduleClick : 'onScheduleClick',\n            projectChange : () => {\n                this.clearClipboard();\n                this._cellClickedContext = null;\n            },\n            thisObj : this\n        });\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'event';\n\n    get scheduler() {\n        return this.client;\n    }\n\n    attachToEventStore(eventStore) {\n        super.attachToEventStore(eventStore);\n        delete this._eventClickedContext;\n    }\n\n    onEventDataGenerated(eventData) {\n        const { assignmentRecord } = eventData;\n\n        // No assignmentRecord for resource time ranges, which we want to ignore anyway\n        if (assignmentRecord) {\n            eventData.cls['b-cut-item'] = assignmentRecord.meta.isCut;\n        }\n    }\n\n    onEventClick(context) {\n        this._cellClickedContext = null;\n        this._eventClickedContext = context;\n    }\n\n    onScheduleClick(context) {\n        this._cellClickedContext = context;\n        this._eventClickedContext = null;\n    }\n\n    isActionAvailable({ event }) {\n        // No action if\n        // 1. there is selected text on the page\n        // 2. cell editing is active\n        // 3. cursor is not in the grid (filter bar etc)\n        // 4. focus is on specialrow\n        return !this.disabled &&\n            globalThis.getSelection().toString().length === 0 &&\n            !this.client.features.cellEdit?.isEditing &&\n            Boolean(event.target.closest('.b-timeaxissubgrid')) &&\n            !this.client.focusedCell?.isSpecialRow;\n    }\n\n    async copy() {\n        await this.copyEvents();\n    }\n\n    async cut() {\n        await this.copyEvents(undefined, true);\n    }\n\n    async paste() {\n        await this.pasteEvents();\n    }\n\n    /**\n     * Copy events (when using single assignment mode) or assignments (when using multi assignment mode) to clipboard to\n     * paste later\n     * @fires beforeCopy\n     * @fires copy\n     * @param {Scheduler.model.EventModel[]|Scheduler.model.AssignmentModel[]} [records] Pass records to copy them,\n     * leave out to copying current selection\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut instead\n     * @category Edit\n     * @on-owner\n     */\n    async copyEvents(records = this.scheduler.selectedAssignments, isCut = false) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        // Relay to original if split\n        if (scheduler.splitFrom) {\n            return scheduler.splitFrom.features.eventCopyPaste.copyEvents(records, isCut);\n        }\n\n        if (!records?.length) {\n            return;\n        }\n\n        let assignmentRecords = records.slice(); // Slice to not lose records if selection changes\n\n        if (records[0].isEventModel) {\n            assignmentRecords = records.map(r => r.assignments).flat();\n        }\n\n        // Prevent cutting readOnly events\n        if (isCut) {\n            assignmentRecords = assignmentRecords.filter(a => !a.event.readOnly);\n        }\n\n        const eventRecords = assignmentRecords.map(a => a.event);\n\n        if (!assignmentRecords.length || scheduler.readOnly) {\n            return;\n        }\n\n        await me.writeToClipboard({ assignmentRecords, eventRecords }, isCut);\n\n        /**\n         * Fires on the owning Scheduler after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords The event records that were copied\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other copy events\n         */\n        scheduler.trigger('copy', { assignmentRecords, eventRecords, isCut, entityName : me.entityName });\n\n        // refresh to call onEventDataGenerated and reapply the cls for records where the cut was canceled\n        scheduler.refreshWithTransition();\n\n        me._focusedEventOnCopy = me._eventClickedContext;\n    }\n\n    async beforeCopy({ data : { assignmentRecords, eventRecords }, isCut }) {\n        /**\n         * Fires on the owning Scheduler before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords The event records about to be copied\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignment records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other beforeCopy events\n         */\n        return await this.scheduler.trigger('beforeCopy',\n            { assignmentRecords,  eventRecords, isCut, entityName : this.entityName });\n    }\n\n    // Called from Clipboardable when cutData changes\n    handleCutData({ source }) {\n        const me = this;\n\n        if (source !== me && me.cutData?.length) {\n            const { assignmentRecords, eventRecords } = me.cutData[0];\n\n            if (assignmentRecords?.length) {\n                me.scheduler.assignmentStore.remove(assignmentRecords);\n            }\n            if (eventRecords?.length) {\n                me.scheduler.eventStore.remove(eventRecords);\n            }\n        }\n    }\n\n    /**\n     * Called from Clipboardable after writing a non-string value to the clipboard\n     * @param eventRecords\n     * @returns {string}\n     * @private\n     */\n    stringConverter({ eventRecords }) {\n        const rows = [];\n\n        for (const event of eventRecords) {\n            rows.push(this.eventToStringFields.map(field => {\n                const value = event[field];\n\n                if (value instanceof Date) {\n                    return DateHelper.format(value, this.dateFormat);\n                }\n\n                return value;\n            }).join('\\t'));\n        }\n\n        return rows.join('\\n');\n    }\n\n    // Called from Clipboardable for each cut out record\n    setIsCut({ assignmentRecords }, isCut) {\n        assignmentRecords.forEach(assignment => {\n            assignment.meta.isCut = isCut;\n        });\n        // refresh to call onEventDataGenerated and reapply the cls for records where the cut was canceled\n        this.scheduler.refreshWithTransition();\n    }\n\n    /**\n     * Paste events or assignments to specified date and resource\n     * @fires beforePaste\n     * @fires paste\n     * @param {Date} [date] Date where the events or assignments will be pasted\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] Resource to assign the pasted events or assignments to\n     * @category Edit\n     * @on-owner\n     */\n    async pasteEvents(date, resourceRecord) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        // Relay to original if split\n        if (scheduler.splitFrom) {\n            return scheduler.splitFrom.features.eventCopyPaste.pasteEvents(date, resourceRecord);\n        }\n\n        const\n            {\n                entityName,\n                isCut,\n                _cellClickedContext,\n                _eventClickedContext\n            }  = me,\n            {\n                eventStore,\n                assignmentStore\n            }  = scheduler;\n\n        if (arguments.length === 0) {\n            if (_cellClickedContext) {\n                date           = _cellClickedContext.date;\n                resourceRecord = _cellClickedContext.resourceRecord;\n            }\n            else if (me._focusedEventOnCopy !== _eventClickedContext) {\n                date           = _eventClickedContext.eventRecord.startDate;\n                resourceRecord = _eventClickedContext.resourceRecord;\n            }\n\n        }\n\n        if (resourceRecord) {\n            resourceRecord = resourceRecord.$original;\n        }\n\n        const clipboardData = await me.readFromClipboard({ resourceRecord, date });\n\n        if (!clipboardData?.assignmentRecords?.length) {\n            return;\n        }\n\n        const\n            {\n                assignmentRecords,\n                eventRecords\n            }            = clipboardData;\n        let toFocus      = null;\n\n        const\n            pastedEvents = new Set(),\n            pastedEventRecords = [];\n\n        for (const assignmentRecord of assignmentRecords) {\n            let { event }            = assignmentRecord;\n            const\n                targetResourceRecord = resourceRecord || assignmentRecord.resource,\n                targetDate           = date || assignmentRecord.event.startDate;\n\n            // Pasting targets a specific resource, we cannot have multiple assignments to the same so remove all but\n            // the first (happens when pasting multiple assignments of the same event)\n            if (pastedEvents.has(event)) {\n                if (isCut) {\n                    assignmentRecord.remove();\n                }\n                continue;\n            }\n\n            pastedEvents.add(event);\n\n            // Cut always means reassign\n            if (isCut) {\n                assignmentRecord.meta.isCut = false;\n                assignmentRecord.resource   = targetResourceRecord;\n                toFocus                     = assignmentRecord;\n            }\n            // Copy creates a new event in single assignment, or when configured to copy\n            else if (eventStore.usesSingleAssignment || me.copyPasteAction === 'clone') {\n                event      = event.copy();\n                event.name = me.generateNewName(event);\n                eventStore.add(event);\n                event.assign(targetResourceRecord);\n                toFocus = assignmentStore.last;\n            }\n            // Safeguard against pasting on a resource where the event is already assigned,\n            // a new assignment in multiassign mode will only change the date in such case\n            else if (!event.resources.includes(targetResourceRecord)) {\n                const newAssignmentRecord    = assignmentRecord.copy();\n                newAssignmentRecord.resource = targetResourceRecord;\n                [toFocus]                    = assignmentStore.add(newAssignmentRecord);\n            }\n\n            event.startDate = targetDate;\n\n            // Pro specific, to allow event to appear where pasted\n            if (event.constraintDate) {\n                event.constraintDate = null;\n            }\n\n            pastedEventRecords.push(event);\n        }\n\n        /**\n         * Fires on the owning Scheduler after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords Original events\n         * @param {Scheduler.model.EventModel[]} pastedEventRecords Pasted events\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Pasted assignments\n         * @param {Date} date date Pasted to this date\n         * @param {Scheduler.model.ResourceModel} resourceRecord The target resource record\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other paste events\n         */\n        scheduler.trigger('paste', { assignmentRecords, pastedEventRecords, eventRecords, resourceRecord, date, isCut, entityName });\n\n        // Focus the last pasted assignment\n        const detacher = scheduler.ion({\n            renderEvent({ assignmentRecord }) {\n                if (assignmentRecord === toFocus) {\n                    scheduler.navigateTo(assignmentRecord, { scrollIntoView : false });\n                    detacher();\n                }\n            }\n        });\n\n        if (isCut) {\n            await me.clearClipboard();\n        }\n    }\n\n    // Called from Clipboardable before finishing the internal clipboard read\n    async beforePaste({ data : { assignmentRecords, eventRecords }, resourceRecord, isCut, date }) {\n        const\n            { scheduler } = this,\n            eventData     = {\n                assignmentRecords,\n                eventRecords,\n                resourceRecord : resourceRecord || assignmentRecords[0].resource,\n                date,\n                isCut,\n                entityName     : this.entityName\n            };\n        let reason;\n\n        // No pasting to readOnly resources\n        if (resourceRecord?.readOnly) {\n            reason = 'resourceReadOnly';\n        }\n\n        if (!scheduler.allowOverlap) {\n            const pasteWouldResultInOverlap = assignmentRecords.some(assignmentRecord => !scheduler.isDateRangeAvailable(\n                assignmentRecord.event.startDate,\n                assignmentRecord.event.endDate,\n                isCut ? assignmentRecord.event : null,\n                assignmentRecord.resource)\n            );\n\n            if (pasteWouldResultInOverlap) {\n                reason = 'overlappingEvents';\n            }\n        }\n\n        /**\n         * Fires on the owning Scheduler if a paste action is not allowed\n         * @event pasteNotAllowed\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords\n         * @param {Date} date The paste date\n         * @param {Scheduler.model.ResourceModel} resourceRecord The target resource record\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other `pasteNotAllowed` events\n         * @param {'overlappingEvents'|'resourceReadOnly'} reason A string id to use for displaying an error message to the user.\n         */\n        if (reason) {\n            scheduler.trigger('pasteNotAllowed', {\n                ...eventData,\n                reason\n            });\n            return false;\n        }\n\n        /**\n         * Fires on the owning Scheduler before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Scheduler.view.Scheduler} source Owner scheduler\n         * @param {Scheduler.model.EventModel[]} eventRecords The events about to be pasted\n         * @param {Scheduler.model.AssignmentModel[]} assignmentRecords The assignments about to be pasted\n         * @param {Date} date The date when the pasted events will be scheduled\n         * @param {Scheduler.model.ResourceModel} resourceRecord The target resource record, the clipboard\n         * event records will be assigned to this resource.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'event' to distinguish this event from other beforePaste events\n         */\n        return await this.scheduler.trigger('beforePaste', eventData);\n    }\n\n    /**\n     * Called from Clipboardable after reading from clipboard, and it is determined that the clipboard data is\n     * \"external\"\n     * @param json\n     * @returns {Object}\n     * @private\n     */\n    stringParser(clipboardData) {\n        const\n            { eventStore, assignmentStore }    = this.scheduler,\n            { modifiedRecords : eventRecords } = this.setFromStringData(clipboardData, true, eventStore, this.eventToStringFields),\n            assignmentRecords                  = [];\n\n        for (const event of eventRecords) {\n            const assignment = new assignmentStore.modelClass({ eventId : event.id });\n            assignment.event = event;\n            assignmentRecords.push(assignment);\n        }\n        return { eventRecords, assignmentRecords };\n    }\n\n    populateEventMenu({ assignmentRecord, items }) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        if (!scheduler.readOnly) {\n            items.copyEvent = {\n                text        : 'L{copyEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => {\n                    const assignments = scheduler.isAssignmentSelected(assignmentRecord) ? scheduler.selectedAssignments : [assignmentRecord];\n\n                    me.copyEvents(assignments);\n                }\n            };\n\n            items.cutEvent = {\n                text        : 'L{cutEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 120,\n                disabled    : assignmentRecord.event.readOnly,\n                onItem      : () => {\n                    const assignments = scheduler.isAssignmentSelected(assignmentRecord) ? scheduler.selectedAssignments : [assignmentRecord];\n                    me.copyEvents(assignments, true);\n                }\n            };\n        }\n    }\n\n    populateScheduleMenu({ items, resourceRecord }) {\n        const\n            me            = this,\n            { scheduler } = me;\n\n        if (!scheduler.readOnly && me.hasClipboardData() !== false) {\n            items.pasteEvent = {\n                text        : 'L{pasteEvent}',\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                disabled    : scheduler.resourceStore.count === 0 || resourceRecord.readOnly,\n                weight      : 110,\n                onItem      : ({\n                    date, resourceRecord\n                }) => me.pasteEvents(date, resourceRecord, scheduler.getRowFor(resourceRecord))\n            };\n        }\n    }\n\n    /**\n     * A method used to generate the name for a copy pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix.\n     *\n     * @param {Scheduler.model.EventModel} eventRecord The new eventRecord being pasted\n     * @returns {String}\n     */\n    generateNewName(eventRecord) {\n        const originalName = eventRecord.getValue(this.nameField);\n        let counter = 2;\n\n        while (this.client.eventStore.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n\n        return `${originalName} - ${counter}`;\n    }\n}\n\nEventCopyPaste.featureClass = 'b-event-copypaste';\n\nGridFeatureManager.registerFeature(EventCopyPaste, true, 'Scheduler');\n","import DragBase from './base/DragBase.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Scheduler/feature/EventDrag\n */\n\n/**\n * Allows user to drag and drop events within the scheduler, to change startDate or resource assignment.\n *\n * This feature is **enabled** by default\n *\n * ## Customizing the drag drop tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * features: {\n *     eventDrag : {\n *         // A minimal start date tooltip\n *         tooltipTemplate : ({ eventRecord, startDate }) => {\n *             return DateHelper.format(startDate, 'HH:mm');\n *         }\n *     }\n * }\n * ```\n *\n * ## Constraining the drag drop area\n *\n * You can constrain how the dragged event is allowed to move by using the following configs\n * * {@link #config-constrainDragToResource} Resource fixed, only allowed to change start date\n * * {@link #config-constrainDragToTimeSlot} Start date is fixed, only move between resources\n * * {@link Scheduler.view.Scheduler#config-getDateConstraints} A method on the Scheduler instance\n *    which lets you define the date range for the dragged event programmatically\n *\n * ```js\n * // Enable dragging + constrain drag to current resource\n * const scheduler = new Scheduler({\n *     features : {\n *         eventDrag : {\n *             constrainDragToResource : true\n *         }\n *     }\n * });\n * ```\n *\n * ## Drag drop events from outside\n *\n * Dragging unplanned events from an external grid is a very popular use case. There are\n * several demos showing you how to do this. Please see the [Drag from grid demo](../examples/dragfromgrid)\n * and study the **Drag from grid guide** to learn more.\n *\n * ## Drag drop events to outside target\n *\n * You can also drag events outside the schedule area by setting {@link #config-constrainDragToTimeline} to `false`. You\n * should also either:\n * * provide a {@link #config-validatorFn} to programmatically define if a drop location is valid or not\n * * configure a {@link #config-externalDropTargetSelector} CSS selector to define where drops are allowed\n *\n * See [this demo](../examples/drag-outside) to see this in action.\n *\n * ## Validating drag drop\n *\n * It is easy to programmatically decide what is a valid drag drop operation. Use the {@link #config-validatorFn}\n * and return either `true` / `false` (optionally a message to show to the user).\n *\n * ```javascript\n * features : {\n *     eventDrag : {\n *        validatorFn({ eventRecords, newResource }) {\n *            const task  = eventRecords[0],\n *                  valid = newResource.role === task.resource.role;\n *\n *            return {\n *                valid   : newResource.role === task.resource.role,\n *                message : valid ? '' : 'Resource role does not match required role for this task'\n *            };\n *        }\n *     }\n * }\n * ```\n *\n * See [this demo](../examples/validation) to see validation in action.\n *\n * If you instead want to do a single validation upon drop, you can listen to {@link #event-beforeEventDropFinalize}\n * and set the `valid` flag on the context object provided.\n *\n * ```javascript\n *   const scheduler = new Scheduler({\n *      listeners : {\n *          beforeEventDropFinalize({ context }) {\n *              const { eventRecords } = context;\n *              // Don't allow dropping events in the past\n *              context.valid = Date.now() <= eventRecords[0].startDate;\n *          }\n *      }\n *  });\n * ```\n *\n * ## Preventing drag of certain events\n *\n * To prevent certain events from being dragged, you have two options. You can set {@link Scheduler.model.EventModel#field-draggable}\n * to `false` in your data, or you can listen for the {@link Scheduler.view.Scheduler#event-beforeEventDrag} event and\n * return `false` to block the drag.\n *\n * ```javascript\n * new Scheduler({\n *    listeners : {\n *        beforeEventDrag({ eventRecord }) {\n *            // Don't allow dragging events that have already started\n *            return Date.now() <= eventRecord.startDate;\n *        }\n *    }\n * })\n * ```\n *\n * @extends Scheduler/feature/base/DragBase\n * @demo Scheduler/basic\n * @inlineexample Scheduler/feature/EventDrag.js\n * @classtype eventDrag\n * @feature\n */\nexport default class EventDrag extends DragBase {\n    //region Config\n\n    static get $name() {\n        return 'EventDrag';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Template used to generate drag tooltip contents.\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventDrag : {\n             *             dragTipTemplate({eventRecord, startText}) {\n             *                 return `${eventRecord.name}: ${startText}`\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Scheduler.model.EventModel} data.eventRecord\n             * @param {Boolean} data.valid Currently over a valid drop target or not\n             * @param {Date} data.startDate New start date\n             * @param {Date} data.endDate New end date\n             * @returns {String}\n             */\n\n            /**\n             * Set to true to only allow dragging events within the same resource.\n             * @member {Boolean} constrainDragToResource\n             */\n            /**\n             * Set to true to only allow dragging events within the same resource.\n             * @config {Boolean}\n             * @default\n             */\n            constrainDragToResource : false,\n\n            /**\n             * Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.\n             * @member {Boolean} constrainDragToTimeSlot\n             */\n            /**\n             * Set to true to only allow dragging events to different resources, and disallow rescheduling by dragging.\n             * @config {Boolean}\n             * @default\n             */\n            constrainDragToTimeSlot : false,\n\n            /**\n             * A CSS selector specifying elements outside the scheduler element which are valid drop targets.\n             * @config {String}\n             */\n            externalDropTargetSelector : null,\n\n            /**\n             * An empty function by default, but provided so that you can perform custom validation on the item being\n             * dragged. This function is called during the drag and drop process and also after the drop is made.\n             * Return `true` if the new position is valid, `false` to prevent the drag.\n             *\n             * ```javascript\n             * features : {\n             *     eventDrag : {\n             *         validatorFn({ eventRecords, newResource }) {\n             *             const\n             *                 task  = eventRecords[0],\n             *                 valid = newResource.role === task.resource.role;\n             *\n             *             return {\n             *                 valid   : newResource.role === task.resource.role,\n             *                 message : valid ? '' : 'Resource role does not match required role for this task'\n             *             };\n             *         }\n             *     }\n             * }\n             * ```\n             * @param {Object} context A drag drop context object\n             * @param {Date} context.startDate New start date\n             * @param {Date} context.endDate New end date\n             * @param {Scheduler.model.AssignmentModel[]} context.assignmentRecords Assignment records which were dragged\n             * @param {Scheduler.model.EventModel[]} context.eventRecords Event records which were dragged\n             * @param {Scheduler.model.ResourceModel} context.newResource New resource record\n             * @param {Scheduler.model.EventModel} context.targetEventRecord Currently hovering this event record\n             * @param {Event} event The event object\n             * @returns {Boolean|Object} `true` if this validation passes, `false` if it does not.\n             *\n             * Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity,\n             * and `message` - String with a custom error message to display when invalid.\n             * @config {Function}\n             */\n            validatorFn : (context, event) => {},\n\n            /**\n             * The `this` reference for the validatorFn\n             * @config {Object}\n             */\n            validatorFnThisObj : null,\n\n            /**\n             * When the host Scheduler is `{@link Scheduler.view.mixin.EventSelection#config-multiEventSelect}: true`\n             * then, there are two modes of dragging *within the same Scheduler*.\n             *\n             * Non unified means that all selected events are dragged by the same number of resource rows.\n             *\n             * Unified means that all selected events are collected together and dragged as one, and are all dropped\n             * on the same targeted resource row at the same targeted time.\n             * @member {Boolean} unifiedDrag\n             */\n            /**\n             * When the host Scheduler is `{@link Scheduler.view.mixin.EventSelection#config-multiEventSelect}: true`\n             * then, there are two modes of dragging *within the same Scheduler*.\n             *\n             * Non unified means that all selected events are dragged by the same number of resource rows.\n             *\n             * Unified means that all selected events are collected together and dragged as one, and are all dropped\n             * on the same targeted resource row at the same targeted time.\n             * @config {Boolean}\n             * @default false\n             */\n            unifiedDrag : null,\n\n            /**\n             * A hook that allows manipulating the position the drag proxy snaps to. Manipulate the `snapTo` property\n             * to alter snap position.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventDrag : {\n             *             snapToPosition({ eventRecord, snapTo }) {\n             *                 if (eventRecord.late) {\n             *                     snapTo.x = 400;\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Function}\n             * @param {Object} context\n             * @param {Scheduler.model.AssignmentModel} context.assignmentRecord Dragged assignment\n             * @param {Scheduler.model.EventModel} context.eventRecord Dragged event\n             * @param {Scheduler.model.ResourceModel} context.resourceRecord Currently over this resource\n             * @param {Date} context.startDate Start date for current position\n             * @param {Date} context.endDate End date for current position\n             * @param {Object} context.snapTo\n             * @param {Number} context.snapTo.x X to snap to\n             * @param {Number} context.snapTo.y Y to snap to\n             */\n            snapToPosition : null,\n\n            /**\n             * A modifier key (CTRL, SHIFT, ALT, META) that when pressed will copy an event instead of moving it. Set to\n             * empty string to disable copying\n             * @prp {'CTRL'|'ALT'|'SHIFT'|'META'|''}\n             * @default\n             */\n            copyKey : 'SHIFT',\n\n            /**\n             * Event can be copied two ways: either by adding new assignment to an existing event ('assignment'), or\n             * by copying the event itself ('event'). 'auto' mode will pick 'event' for a single-assignment mode (when\n             * event has `resourceId` field) and 'assignment' mode otherwise.\n             * @prp {'auto'|'assignment'|'event'}\n             * @default\n             */\n            copyMode : 'auto',\n\n            /**\n             * Mode of the current drag drop operation.\n             * @member {'move'|'copy'}\n             * @readonly\n             */\n            mode : 'move',\n\n            capitalizedEventName : null\n        };\n    }\n\n    afterConstruct() {\n        this.capitalizedEventName = this.capitalizedEventName || this.client.capitalizedEventName;\n        super.afterConstruct(...arguments);\n    }\n\n    //endregion\n\n    changeMode(value) {\n        const { dragData, copyMode } = this;\n\n        // Do not create assignments in case scheduler doesn't use multiple assignments\n        // Do not allow to copy recurring events\n        if (\n            (copyMode === 'event' || copyMode === 'auto' ||\n                copyMode === 'assignment' && !this.scheduler.eventStore.usesSingleAssignment) &&\n            (!dragData || dragData.eventRecords.every(r => !r.isRecurring))\n        ) {\n            return value;\n        }\n    }\n\n    updateMode(mode) {\n        if (this.dragData) {\n            if (mode === 'copy') {\n                this.setCopying();\n            }\n            else {\n                this.setMoving();\n            }\n\n            /**\n             * Triggered when drag mode is changed, for example when copy key is\n             * pressed or released while dragging.\n             * @event eventDragModeChange\n             * @param {String} mode Drag mode, could be either 'move', 'copy', or 'auto'\n             * @on-owner\n             */\n            this.client.trigger('eventDragModeChange', { mode });\n        }\n    }\n\n    setCopying() {\n        const { dragData } = this;\n\n        if (!dragData) {\n            return;\n        }\n\n        // Check if proxies are added to the DOM by checking if any of them is\n        if (!dragData.eventBarCopies.some(el => el.isConnected)) {\n            dragData.eventBarCopies.forEach(el => {\n                el.classList.add('b-drag-proxy-copy');\n                // hidden class can be added by the drag feature if we're dragging event outside\n                el.classList.remove('b-hidden');\n\n                dragData.context.grabbedParent.appendChild(el);\n                // Mark this node as ignored for the DomSync\n                el.retainElement = true;\n            });\n        }\n        else {\n            dragData.eventBarCopies.forEach(el => {\n                el.classList.remove('b-hidden');\n            });\n        }\n    }\n\n    setMoving() {\n        const { dragData } = this;\n\n        if (!dragData) {\n            return;\n        }\n\n        dragData.eventBarCopies.forEach(el => {\n            el.classList.add('b-hidden');\n        });\n    }\n\n    //region Events\n\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting `context.async = true`\n     * in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeeventdropfinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} context.assignmentRecords Assignment records being dragged\n     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target\n     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler after event drop\n     * @event afterEventDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords\n     * @param {Scheduler.model.EventModel[]} eventRecords\n     * @param {Boolean} valid\n     * @param {Object} context\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when an event is dropped\n     * @event eventDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords\n     * @param {HTMLElement} externalDropTarget The HTML element dropped upon, if drop happened on a valid external drop target\n     * @param {Boolean} isCopy\n     * @param {Object} context\n     * @param {Scheduler.model.EventModel} context.targetEventRecord Event record for drop target\n     * @param {Scheduler.model.ResourceModel} context.newResource Resource record for drop target\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler before event dragging starts. Return `false` to prevent the action.\n     * @event beforeEventDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel} eventRecord Event record the drag starts from\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag starts from\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} event Browser event DEPRECATED (replaced by domEvent)\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event dragging starts\n     * @event eventDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag starts from\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} event Browser event DEPRECATED (replaced by domEvent)\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event is dragged\n     * @event eventDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the drag started from\n     * @param {Scheduler.model.ResourceModel} newResource Resource at the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     * @param {MouseEvent} domEvent Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event drag operation has been aborted\n     * @event eventDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Event records being dragged\n     * @param {Scheduler.model.AssignmentModel[]} assignmentRecords Assignment records being dragged\n     * @param {MouseEvent} domEvent Browser event\n     */\n    /**\n     * Fired on the owning Scheduler after an event drag operation regardless of the operation being cancelled or not\n     * @event eventDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n\n    //region Data layer\n\n    // Deprecated. Use this.client instead\n    get scheduler() {\n        return this.client;\n    }\n\n    //endregion\n\n    //#region Drag lifecycle\n\n    onAfterDragStart(event) {\n        const\n            me                        = this,\n            { context : { element } } = event;\n\n        super.onAfterDragStart(event);\n\n        me.handleKeyDownOrMove(event.event);\n\n        me.keyEventDetacher = EventHelper.on({\n            // In case we drag event between scheduler focused event gets moved and focus\n            // moves to the body. We only need to read the key from this event\n            element : DomHelper.getRootElement(element),\n            keydown : me.handleKeyDownOrMove,\n            keyup   : me.handleKeyUp,\n            thisObj : me\n        });\n    }\n\n    onDragReset(event) {\n        super.onDragReset(event);\n\n        this.keyEventDetacher?.();\n\n        this.mode = 'move';\n    }\n\n    onDrop(event) {\n        // Always remove proxy on drop\n        this.dragData.eventBarCopies?.forEach(el => el.remove());\n\n        return super.onDrop(event);\n    }\n\n    //#endregion\n\n    //region Drag events\n\n    getDraggableElement(el) {\n        return el?.closest(this.drag.targetSelector);\n    }\n\n    resolveEventRecord(eventElement, client = this.client) {\n        return client.resolveEventRecord(eventElement);\n    }\n\n    isElementDraggable(el, event) {\n        const\n            me           = this,\n            { client }   = me,\n            eventElement = me.getDraggableElement(el);\n\n        if (!eventElement || me.disabled || client.readOnly) {\n            return false;\n        }\n\n        // displaying something resizable within the event?\n        if (el.matches('[class$=\"-handle\"]')) {\n            return false;\n        }\n\n        const eventRecord = me.resolveEventRecord(eventElement, client);\n\n        if (!eventRecord || !eventRecord.isDraggable || eventRecord.readOnly) {\n            return false;\n        }\n\n        // Hook for features that need to prevent drag\n        const prevented = client[`is${me.capitalizedEventName}ElementDraggable`]?.(\n            eventElement, eventRecord, el, event\n        ) === false;\n\n        return !prevented;\n    }\n\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent : domEvent } = dragData;\n\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event   : domEvent, // Deprecated, remove on  6.0?\n            domEvent\n        };\n    }\n\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger(eventType, event);\n    }\n\n    triggerEventDrag(dragData, start) {\n        this.client.trigger('eventDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            newResource : dragData.newResource\n        }));\n    }\n\n    triggerDragStart(dragData) {\n        this.client.navigator.skipNextClick = true;\n\n        this.client.trigger('eventDragStart', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbort(dragData) {\n        this.client.trigger('eventDragAbort', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('eventDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        const me = this;\n\n        me.currentOverClient.trigger('afterEventDrop', Object.assign(me.getTriggerParams(dragData), {\n            valid\n        }));\n\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = me.client,\n                needRefresh                     = me.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== me.dragData.assignmentRecords[i]?.resourceId;\n                });\n\n            if (needRefresh) {\n                me.client.refresh();\n            }\n        }\n        // Reset the skipNextClick after a potential click event fires. https://github.com/bryntum/support/issues/5135\n        me.client.setTimeout(() => me.client.navigator.skipNextClick = false, 10);\n    }\n\n    handleKeyDownOrMove(event) {\n        if (this.mode !== 'copy') {\n            if (event.key && EventHelper.specialKeyFromEventKey(event.key) === this.copyKey?.toLowerCase() || event[`${this.copyKey?.toLowerCase()}Key`]) {\n                this.mode = 'copy';\n            }\n        }\n    }\n\n    handleKeyUp(event) {\n        if (EventHelper.specialKeyFromEventKey(event.key) === this.copyKey.toLowerCase()) {\n            this.mode = 'move';\n        }\n    }\n\n    //endregion\n\n    //region Finalization & validation\n\n    /**\n     * Checks if an event can be dropped on the specified position.\n     * @private\n     * @returns {Boolean} Valid (true) or invalid (false)\n     */\n    isValidDrop(dragData) {\n        const\n            {\n                newResource,\n                resourceRecord,\n                browserEvent\n            }            = dragData,\n            sourceRecord = dragData.draggedEntities[0],\n            { target }   = browserEvent;\n\n        // Only allowed to drop outside scheduler element if we hit an element matching the externalDropTargetSelector\n        if (!newResource) {\n            return (!this.constrainDragToTimeline && this.externalDropTargetSelector) ? Boolean(target.closest(this.externalDropTargetSelector)) : false;\n        }\n\n        // Not allowed to drop an event on a group header or a readOnly resource\n        if (newResource.isSpecialRow || newResource.readOnly) {\n            return false;\n        }\n\n        // Not allowed to assign an event twice to the same resource\n        if (resourceRecord !== newResource) {\n            return !sourceRecord.event.resources.includes(newResource);\n        }\n\n        return true;\n    }\n\n    checkDragValidity(dragData, event) {\n        const\n            me        = this,\n            scheduler = me.currentOverClient;\n\n        let result;\n\n        // Cannot assign anything to readOnly resources\n        if (dragData.newResource?.readOnly) {\n            return false;\n        }\n\n        // First make sure there's no overlap, if not run the external validatorFn\n        if (!scheduler.allowOverlap && !scheduler.isDateRangeAvailable(\n            dragData.startDate,\n            dragData.endDate,\n            dragData.draggedEntities[0],\n            dragData.newResource\n        )) {\n            result = {\n                valid   : false,\n                message : me.L('L{eventOverlapsExisting}')\n            };\n        }\n        else {\n            result = me.validatorFn.call(\n                me.validatorFnThisObj || me,\n                dragData,\n                event\n            );\n        }\n\n        if (!result || result.valid) {\n            // Hook for features to have a say on validity\n            result = scheduler['checkEventDragValidity']?.(dragData, event) ?? result;\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    //region Update records\n\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            me                            = this,\n            fromScheduler                                          = me.client,\n            toScheduler                                            = me.currentOverClient,\n            copyKeyPressed                                         = me.mode === 'copy',\n            { draggedEntities, timeDiff, initialAssignmentsState } = context,\n            originalStartDate                                      = initialAssignmentsState[0].startDate,\n            droppedStartDate                                       = me.adjustStartDate(originalStartDate, timeDiff);\n\n        let result;\n\n        if (!context.externalDropTarget) {\n            // Dropping dragged event completely outside the time axis is not allowed\n            if (!toScheduler.timeAxis.timeSpanInAxis(droppedStartDate, DateHelper.add(droppedStartDate, draggedEntities[0].event.durationMS, 'ms'))) {\n                context.valid = false;\n            }\n\n            if (context.valid) {\n                fromScheduler.eventStore.suspendAutoCommit();\n                toScheduler.eventStore.suspendAutoCommit();\n\n                result = await me.updateAssignments(fromScheduler, toScheduler, context, copyKeyPressed);\n\n                fromScheduler.eventStore.resumeAutoCommit();\n                toScheduler.eventStore.resumeAutoCommit();\n            }\n        }\n\n        // Might be flagged invalid in updateAssignments() above, if drop did not lead to any change\n        // (for example if dropped on non-working-time in Pro)\n        if (context.valid) {\n            // Tell the world there was a successful drop\n            toScheduler.trigger('eventDrop', Object.assign(me.getTriggerParams(context), {\n                isCopy               : copyKeyPressed,\n                copyMode             : me.copyMode,\n                domEvent             : context.browserEvent,\n                targetEventRecord    : context.targetEventRecord,\n                targetResourceRecord : context.newResource,\n                externalDropTarget   : context.externalDropTarget\n            }));\n        }\n\n        return result;\n    }\n\n    /**\n     * Update assignments being dragged\n     * @private\n     */\n    async updateAssignments(fromScheduler, toScheduler, context, copy) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            { copyMode }        = me,\n            isCrossScheduler    = (fromScheduler !== toScheduler),\n            { isVertical }      = toScheduler,\n            {\n                assignmentStore : fromAssignmentStore,\n                eventStore      : fromEventStore\n            }                   = fromScheduler,\n            {\n                assignmentStore : toAssignmentStore,\n                eventStore      : toEventStore\n            }                   = toScheduler,\n            // When using TreeGroup in horizontal mode, store != resourceStore. Does not apply for vertical mode.\n            fromResourceStore   = fromScheduler.isVertical ? fromScheduler.resourceStore : fromScheduler.store,\n            toResourceStore     = isVertical ? toScheduler.resourceStore : toScheduler.store,\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff,\n                initialAssignmentsState,\n                resourceRecord : fromResource,\n                newResource    : toResource\n            }                   = context,\n            { unifiedDrag }     = me,\n            // For an empty target event store, check if it has usesSingleAssignment explicitly set, otherwise use\n            // the value from the source event store\n            useSingleAssignment = (toEventStore.usesSingleAssignment ||\n                (toEventStore.usesSingleAssignment !== false && fromEventStore.usesSingleAssignment)),\n            // this value has clear semantic only for same scheduler case\n            effectiveCopyMode   = copyMode === 'event'\n                ? 'event'\n                : copyMode === 'assignment'\n                    ? 'assignment'\n                    : useSingleAssignment ? 'event' : 'assignment',\n            event1Date          = me.adjustStartDate(assignmentRecords[0].event.startDate, timeDiff),\n            eventsToAdd         = [],\n            eventsToRemove      = [],\n            assignmentsToAdd    = [],\n            assignmentsToRemove = [],\n            eventsToCheck       = [],\n            eventsToBatch       = new Set(),\n            resourcesInStore    = fromResourceStore.getAllDataRecords();\n\n        fromScheduler.suspendRefresh();\n        toScheduler.suspendRefresh();\n\n        let updated      = false,\n            updatedEvent = false,\n            indexDiff; // By how many resource rows has the drag moved.\n\n        if (isCrossScheduler) {\n            // The difference in indices via first dragged event will help us find resources for all the rest of the\n            // events accordingly\n            indexDiff = toResourceStore.indexOf(toResource) - fromResourceStore.indexOf(fromResource);\n        }\n        else if (me.constainDragToResource) {\n            indexDiff = 0;\n        }\n        else if (isVertical && toResourceStore.isGrouped) {\n            indexDiff = resourcesInStore.indexOf(fromResource) - resourcesInStore.indexOf(toResource);\n        }\n        else {\n            indexDiff = fromResourceStore.indexOf(fromResource) - fromResourceStore.indexOf(toResource);\n        }\n\n        if (isVertical) {\n            // <remove-on-release>\n            // TODO: Broken after merge, figure it out\n            // </remove-on-release>\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n\n                delete draggedEvent.instanceMeta(fromScheduler).hasTemporaryDragElement;\n\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n\n        const\n            eventBarEls          = context.eventBarEls.slice(),\n            addedEvents          = [],\n            // this map holds references between original assignment and its copy\n            copiedAssignmentsMap = {};\n\n        // Using for to support await inside\n        for (let i = 0; i < assignmentRecords.length; i++) {\n            const originalAssignment = assignmentRecords[i];\n\n            // Reassigned when dropped on other scheduler, thus not const\n            let draggedEvent = originalAssignment.event,\n                draggedAssignment;\n\n            if (copy) {\n                draggedAssignment                           = originalAssignment.copy();\n                copiedAssignmentsMap[originalAssignment.id] = draggedAssignment;\n            }\n            else {\n                draggedAssignment = originalAssignment;\n            }\n\n            if (!draggedAssignment.isOccurrenceAssignment && (!fromAssignmentStore.includes(originalAssignment) || !fromEventStore.includes(draggedEvent))) {\n                // Event was removed externally during the drag, just remove element from DOM (DomSync already has\n                // tried to clean it up at this point, but could not due to retainElement being set)\n                eventBarEls[i].remove();\n                eventBarEls.splice(i, 1);\n                assignmentRecords.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            const\n                initialState           = initialAssignmentsState[i],\n                originalEventRecord    = draggedEvent,\n                originalStartDate      = initialState.startDate,\n                // grabbing resource early, since after \".copy()\" the record won't belong to any store\n                // and \".getResources()\" won't work. If it's a move to another scheduler, ensure the\n                // array still has a length. The process function will do an assign as opposed\n                // to a reassignment\n                originalResourceRecord = initialState.resource,\n                // Calculate new startDate (and round it) based on timeDiff up here, might be added to another\n                // event store below in which case it is invalidated. But this is anyway the target date\n                newStartDate           = this.constrainDragToTimeSlot\n                    ? originalStartDate\n                    : (unifiedDrag\n                        ? event1Date\n                        : me.adjustStartDate(originalStartDate, timeDiff));\n\n            if (fromAssignmentStore !== toAssignmentStore) {\n                // Single assignment from a multi assigned event dragged over, event needs to be copied over\n                // Same if we hold the copy key\n                const keepEvent = originalEventRecord.assignments.length > 1 || copy;\n\n                let newAssignment;\n\n                if (copy) {\n                    // In a copy mode dragged assignment is already a copy\n                    newAssignment = draggedAssignment;\n                }\n                else {\n                    newAssignment                              = draggedAssignment.copy();\n                    copiedAssignmentsMap[draggedAssignment.id] = newAssignment;\n                }\n\n                // Pro Engine does not seem to handle having the event already in place on the copied assignment,\n                // replacing it with id to have events bucket properly set up on commit\n                if (newAssignment.event && !useSingleAssignment) {\n                    newAssignment.event    = newAssignment.event.id;\n                    newAssignment.resource = newAssignment.resource.id;\n                }\n\n                if (!copy) {\n                    // If we're not copying, remove assignment from source scheduler\n                    assignmentsToRemove.push(draggedAssignment);\n                }\n\n                // If it was the last assignment, the event should also be removed\n                if (!keepEvent) {\n                    eventsToRemove.push(originalEventRecord);\n                }\n\n                // If event does not already exist in target scheduler a copy is added\n                // if we're copying the event, we always need to create new record\n                if (\n                    copy && (copyMode === 'event' || (copyMode === 'auto' && toEventStore.usesSingleAssignment)) ||\n                    !toEventStore.getById(originalEventRecord.id)\n                ) {\n                    draggedEvent = toEventStore.createRecord({\n                        ...originalEventRecord.data,\n                        // If we're copying the event (not making new assignment to existing), we need to generate\n                        // phantom id to link event to the assignment record\n                        id       : copy && (copyMode === 'event' || copyMode === 'auto') ? undefined : originalEventRecord.id,\n                        // Engine gets mad if not nulled\n                        calendar : null\n                    });\n\n                    newAssignment.set({\n                        eventId : draggedEvent.id,\n                        event   : draggedEvent\n                    });\n\n                    eventsToAdd.push(draggedEvent);\n                }\n\n                // And add it to the target scheduler\n                // <remove-on-release>\n                // TODO: Should be handled on the data layer ideally\n                // </remove-on-release>\n                if (!useSingleAssignment) {\n                    assignmentsToAdd.push(newAssignment);\n                }\n                draggedAssignment = newAssignment;\n            }\n\n            let newResource    = toResource,\n                reassignedFrom = null;\n\n            if (!unifiedDrag) {\n                if (!isCrossScheduler) {\n                    // If not dragging events as a unified block, distribute each to a new resource\n                    // using the same offset as the dragged event.\n                    if (indexDiff !== 0) {\n                        let newIndex;\n                        if (isVertical && toResourceStore.isGrouped) {\n                            newIndex    = Math.max(\n                                Math.min(\n                                    resourcesInStore.indexOf(originalResourceRecord) - indexDiff,\n                                    resourcesInStore.length - 1\n                                ),\n                                0\n                            );\n                            newResource = resourcesInStore[newIndex];\n                        }\n                        else {\n                            newIndex = Math.max(\n                                Math.min(\n                                    fromResourceStore.indexOf(originalResourceRecord) - indexDiff,\n                                    fromResourceStore.count - 1\n                                ),\n                                0\n                            );\n\n                            newResource = fromResourceStore.getAt(newIndex);\n\n                            // Exclude group headers, footers, summary row etc\n                            if (newResource.isSpecialRow) {\n                                newResource = fromResourceStore.getNext(newResource, false, true) || fromResourceStore.getPrevious(newResource, false, true);\n                            }\n                        }\n\n                        newResource = newResource?.$original;\n                    }\n                    else {\n                        newResource = originalResourceRecord;\n                    }\n                }\n                // we have a resource for first dragged event in toResource\n                else if (i > 0) {\n                    const draggedEventResourceIndex = fromResourceStore.indexOf(originalResourceRecord);\n                    newResource                     = toResourceStore.getAt(draggedEventResourceIndex + indexDiff) || newResource;\n                }\n            }\n\n            const isCrossResource = draggedAssignment.resourceId !== newResource.id;\n\n            // Cannot rely on assignment generation to detect update, since it might be a new assignment\n            // <remove-on-release>\n            // TODO: what about a case when we drag between schedulers which have different resource with same ids?\n            // </remove-on-release>\n            if (isCrossResource) {\n                reassignedFrom = fromResourceStore.getById(draggedAssignment.resourceId);\n\n                if (copy && fromAssignmentStore === toAssignmentStore) {\n                    // Scheduler Core patch\n                    // need to completely clear the resource/resourceId on the copied assignment, before setting the new\n                    // otherwise, what happens is that in the `$beforeChange.resource/Id` are still\n                    // stored the resource/Id of the original assignment\n                    // then, when finalizing commit, Core engine performs this:\n                    //     // First silently revert any data change (used by buckets), otherwise it won't be detected by `set()`\n                    //     me.setData(me.$beforeChange)\n                    // and then updates the data to new, which is recorded as UpdateAction in the STM with old/new data\n                    // then, when that update action in STM is undo-ed, the old data is written back to the record\n                    // and newly added assignment is pointing to the old resource\n                    // then, when STM action is redo-ed, a \"duplicate assignment\" exception is thrown\n                    // this is covered with the test:\n                    // Scheduler/tests/features/EventDragCopy.t.js -> Should not remove the original when undo-ing the copy-drag action (\"multi-assignment\")\n                    draggedAssignment.setData({\n                        resource   : null,\n                        resourceId : null\n                    });\n                    // eof Scheduler Core patch\n\n                    draggedAssignment.resource = newResource;\n                    draggedAssignment.event    = toEventStore.getById(draggedAssignment.eventId);\n\n                    const shouldCopyEvent = copyMode === 'event' || (fromEventStore.usesSingleAssignment && copyMode === 'auto');\n\n                    if (shouldCopyEvent) {\n                        draggedEvent = draggedEvent.copy();\n                        // need to clear the `endDate` of the copy\n                        // this is because when we drag the copy to a different position on the timeline\n                        // it will set the new start date and re-calculate end date\n                        // as a result, in STM transaction for this drag-copy there will be \"add\" action\n                        // and \"update\" action and NO COMMIT in the middle\n                        // so when re-doing this transaction the duration change is lost\n                        // this is covered with the test:\n                        // \"Scheduler/tests/features/EventDragCopy.t.js -> Should not remove the original when undo-ing the copy-drag action (usesSingleAssignment)\",\n                        // Before doing it, save a copy of endDate in meta object, considering timeDiff: that's because below it will check if event is in timeAxis.\n                        draggedEvent.meta.endDateCached = me.adjustStartDate(draggedEvent.endDate, timeDiff);\n                        draggedEvent.endDate = null;\n\n                        draggedAssignment.event = draggedEvent;\n\n                        if (toEventStore.usesSingleAssignment) {\n                            draggedEvent.resource   = newResource;\n                            draggedEvent.resourceId = newResource.id;\n                        }\n                    }\n\n                    if (\n                        !toAssignmentStore.find(a => a.eventId === draggedAssignment.eventId && a.resourceId === draggedAssignment.resourceId) &&\n                        !assignmentsToAdd.find(r => r.eventId === draggedAssignment.eventId && r.resourceId === draggedAssignment.resourceId)\n                    ) {\n                        shouldCopyEvent && eventsToAdd.push(draggedEvent);\n                        assignmentsToAdd.push(draggedAssignment);\n                    }\n                }\n                else {\n                    draggedAssignment.resource = newResource;\n                }\n\n                // Actual events should be batched, not data for new events when dragging between\n                draggedEvent.isEvent && eventsToBatch.add(draggedEvent);\n                updated = true;\n\n                // When dragging an occurrence, the assignment is only temporary. We have to tag the newResource along\n                // to be picked up by the occurrence -> event conversion\n                // <remove-on-release>\n                // TODO: A hack, figure a better way out\n                // </remove-on-release>\n                if (draggedEvent.isOccurrence) {\n                    draggedEvent.set('newResource', newResource);\n                }\n\n                // <remove-on-release>\n                // TODO: Should be handled on the datalayer somehow, but it is kind of edge casey\n                // </remove-on-release>\n                if (isCrossScheduler && useSingleAssignment) {\n                    // In single assignment mode, when dragged to another scheduler it will not copy the assignment\n                    // over but instead set the resourceId of the event. To better match expected behaviour\n                    draggedEvent.resourceId = newResource.id;\n                }\n            }\n            else {\n                if (\n                    copy &&\n                    (copyMode === 'event' || (copyMode === 'auto' && fromEventStore.usesSingleAssignment)) &&\n                    !eventsToAdd.includes(draggedEvent)\n                ) {\n                    draggedEvent = draggedEvent.copy();\n                    // see the comment above\n                    draggedEvent.meta.endDateCached = me.adjustStartDate(draggedEvent.endDate, timeDiff);\n                    draggedEvent.endDate = null;\n\n                    eventsToAdd.push(draggedEvent);\n\n                    draggedAssignment.event = draggedEvent;\n\n                    if (toEventStore.usesSingleAssignment) {\n                        draggedEvent.set({\n                            resource   : newResource,\n                            resourceId : newResource.id\n                        });\n                    }\n\n                    // Always add assignment to the store to allow proper element reuse\n                    assignmentsToAdd.push(draggedAssignment);\n                }\n            }\n\n            // Same for event\n            if (!eventsToCheck.find(ev => ev.draggedEvent === draggedEvent) && !DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n\n                // only do for non occurence records\n                while (!draggedEvent.isOccurrence && draggedEvent.isBatchUpdating) {\n                    draggedEvent.endBatch(true);\n                }\n\n                // for same scheduler with multi-assignments, and copyMode === assignment, need to keep the start date\n                // because user intention is to create a new assignment, not re-schedule the event\n                // but only for cross-resource dragging, same resource dragging has semantic of regular drag\n                // <remove-on-release>\n                // TODO should also keep the proxy element on the same X coordinate\n                // </remove-on-release>\n                const shouldKeepStartDate = copy && !isCrossScheduler && !useSingleAssignment && effectiveCopyMode === 'assignment' && isCrossResource;\n\n                if (!shouldKeepStartDate) {\n                    draggedEvent.startDate = newStartDate;\n\n                    eventsToCheck.push({ draggedEvent, originalStartDate });\n                }\n\n                draggedEvent.isEvent && eventsToBatch.add(draggedEvent);\n                updatedEvent = true;\n            }\n\n            // Hook for features that need to do additional processing on drop (used by NestedEvents)\n            toScheduler.processEventDrop({\n                eventRecord    : draggedEvent,\n                resourceRecord : newResource,\n                element        : i === 0 ? context.context.element : context.context.relatedElements[i - 1],\n                context,\n                toScheduler,\n                reassignedFrom,\n                eventsToAdd,\n                addedEvents,\n                draggedAssignment\n            });\n\n            // There are two cases to consider when triggering this event - `copy` and `move` mode. In case we are\n            // copying the assignment (we can also copy the event) draggedAssignment will point to the copy of the\n            // original assignment record. Same for draggedEvent. These records are new records which are not yet added\n            // to the store and they contain correct state of the drop - which event is going to be assigned to which\n            // resource on what time.\n            // These records possess no knowledge about original records which they were cloned from. And that might be\n            // useful. Let's say you want to copy assignment (or event) to every row in the way. You need to know start\n            // row and the end row. That information is kept in the `originalAssignment` record. Which might be identical\n            // to the `draggedAssignment` record in `move` mode.\n            toScheduler.trigger('processEventDrop', {\n                originalAssignment,\n                draggedAssignment,\n                context,\n                copyMode,\n                isCopy : copy\n            });\n        }\n\n        fromAssignmentStore.remove(assignmentsToRemove);\n        fromEventStore.remove(eventsToRemove);\n        toAssignmentStore.add(assignmentsToAdd);\n\n        // Modify syncIdMap on the FGCanvas to make sure elements get animated nicely to new position\n        if (copy && fromAssignmentStore === toAssignmentStore) {\n            const { syncIdMap } = fromScheduler.foregroundCanvas;\n\n            Object.entries(copiedAssignmentsMap).forEach(([originalId, cloneRecord]) => {\n                const element = syncIdMap[originalId];\n                delete syncIdMap[originalId];\n                syncIdMap[cloneRecord.id] = element;\n            });\n        }\n\n        eventsToAdd.length && addedEvents.push(...toEventStore.add(eventsToAdd));\n\n        // When not constrained to timeline we are dragging a clone and need to manually do some cleanup if\n        // dropped in view\n        if (!me.constrainDragToTimeline) {\n            // go through assignmentRecords again after events has been added to toEventStore (if any)\n            // now we have updated assignment ids and can properly reuse event HTML elements\n            for (let i = 0; i < assignmentRecords.length; i++) {\n                const\n                    assignmentRecord     = copiedAssignmentsMap[assignmentRecords[i].id] || assignmentRecords[i],\n                    originalDraggedEvent = assignmentRecord.event,\n                    // try to get dragged event from addedEvents array, it will be there with updated ids\n                    // if toScheduler is different\n                    draggedEvent         = addedEvents?.find(r => r.id === originalDraggedEvent.id) || originalDraggedEvent,\n                    eventBar             = context.eventBarEls[i],\n                    element              = i === 0 ? context.context.element : context.context.relatedElements[i - 1],\n                    // Determine if in time axis here also, since the records date might be invalidated further below\n                    inTimeAxis           = toScheduler.isInTimeAxis(draggedEvent);\n\n                // after checking if is in time axis, imeta.endDateCached can be deleted\n                delete draggedEvent.meta.endDateCached;\n\n                if (!copy) {\n                    // Remove original element properly\n                    DomSync.removeChild(eventBar.parentElement, eventBar);\n                }\n\n                if (draggedEvent.resource && (isVertical || toScheduler.rowManager.getRowFor(draggedEvent.resource)) && inTimeAxis) {\n                    // Nested events are added to correct parent by the feature\n                    if (!draggedEvent.parent || draggedEvent.parent.isRoot) {\n                        const elRect = Rectangle.from(element, toScheduler.foregroundCanvas, true);\n\n                        // Ensure that after inserting the dragged element clone into the toScheduler's foregroundCanvas\n                        // it's at the same visual position that it was dragged to.\n                        DomHelper.setTopLeft(element, elRect.y, elRect.x);\n\n                        // Add element properly, so that DomSync will reuse it on next update\n                        DomSync.addChild(toScheduler.foregroundCanvas, element, draggedEvent.assignments[0].id);\n\n                        isCrossScheduler && toScheduler.processCrossSchedulerEventDrop({\n                            eventRecord : draggedEvent,\n                            toScheduler\n                        });\n                    }\n\n                    element.classList.remove('b-sch-event-hover', 'b-active', 'b-drag-proxy', 'b-dragging');\n                    element.retainElement = false;\n                }\n            }\n        }\n\n        addedEvents?.forEach(added => eventsToBatch.add(added));\n\n        // addedEvents order is the same with [context.element, ..context.relatedElements]\n        // Any added or removed events or assignments => something changed\n        if (assignmentsToRemove.length || eventsToRemove.length || assignmentsToAdd.length || eventsToAdd.length) {\n            updated = true;\n        }\n\n        // Commit changes to affected projects\n        if (updated || updatedEvent) {\n            // By batching event changes when using single assignment we avoid two updates, without it there will be one\n            // for date change and one when changed assignment updates resourceId on the event\n            useSingleAssignment && eventsToBatch.forEach(eventRecord => eventRecord.beginBatch());\n\n            await Promise.all([\n                toScheduler.project !== fromScheduler.project ? toScheduler.project.commitAsync() : null,\n                fromScheduler.project.commitAsync()\n            ]);\n\n            // End batch in engine friendly way, avoiding to have `set()` trigger another round of calculations\n            useSingleAssignment && eventsToBatch.forEach(eventRecord => eventRecord.endBatch(false, true));\n        }\n\n        if (!updated) {\n            // Engine might have reverted the date change, in which case this should be considered an invalid op\n            updated = eventsToCheck.some(({ draggedEvent, originalStartDate }) =>\n                !DateHelper.isEqual(draggedEvent.startDate, originalStartDate)\n            );\n        }\n\n        // Resumes self twice if not cross scheduler, but was suspended twice above also so all good\n        toScheduler.resumeRefresh();\n        fromScheduler.resumeRefresh();\n\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // Always force re-render of the bars, to return them to their original position when:\n                // * Fill ticks leading to small date adjustment not actually changing the DOM\n                //   (https://github.com/bryntum/support/issues/630)\n                // * Dragging straight down with multiselection, events in the last resource will still be assigned to\n                //   that resource = no change in the DOM (https://github.com/bryntum/support/issues/6293)\n                eventBarEls.forEach(el => delete el.lastDomConfig);\n\n                // Not doing full refresh above, to allow for animations\n                toScheduler.refreshWithTransition();\n\n                if (isCrossScheduler) {\n                    fromScheduler.refreshWithTransition();\n\n                    toScheduler.selectedEvents = addedEvents;\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Drag data\n\n    getProductDragContext(dragData) {\n        const\n            me                                = this,\n            { currentOverClient : scheduler } = me,\n            target                            = dragData.browserEvent.target,\n            previousResolvedResource          = dragData.newResource || dragData.resourceRecord,\n            previousTargetEventRecord         = dragData.targetEventRecord;\n\n        let\n            targetEventRecord = scheduler ? me.resolveEventRecord(target, scheduler) : null,\n            newResource, externalDropTarget;\n\n        // Ignore if over dragged event\n        if (dragData.eventRecords.includes(targetEventRecord)) {\n            targetEventRecord = null;\n        }\n\n        if (me.constrainDragToResource) {\n            newResource = dragData.resourceRecord;\n        }\n        else if (!me.constrainDragToTimeline) {\n            newResource = me.resolveResource();\n        }\n        else if (scheduler) {\n            newResource = me.resolveResource() || dragData.newResource || dragData.resourceRecord;\n        }\n\n        const\n            { assignmentRecords, eventRecords } = dragData,\n            isOverNewResource                   = previousResolvedResource !== newResource;\n\n        let valid = Boolean(newResource && !newResource.isSpecialRow);\n\n        if (!newResource && me.externalDropTargetSelector) {\n            externalDropTarget = target.closest(me.externalDropTargetSelector);\n            valid              = Boolean(externalDropTarget);\n        }\n\n        return {\n            valid,\n            externalDropTarget,\n            eventRecords,\n            assignmentRecords,\n            newResource,\n            targetEventRecord,\n            dirty         : isOverNewResource || targetEventRecord !== previousTargetEventRecord,\n            proxyElements : [dragData.context.element, ...dragData.context.relatedElements || []]\n        };\n    }\n\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { scheduler }     = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = me.resolveEventRecord(element, scheduler),\n            resourceRecord    = scheduler.resolveResourceRecord(element),\n            assignmentRecord  = scheduler.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [];\n\n        // We multi drag other selected events if the dragged event is already selected, or the ctrl key is pressed\n        if (assignmentRecord && (scheduler.isAssignmentSelected(assignmentRecords[0]) || (me.drag.startEvent.ctrlKey && scheduler.multiEventSelect))) {\n            assignmentRecords.push.apply(assignmentRecords, me.getRelatedRecords(assignmentRecord));\n        }\n\n        const eventRecords = [...new Set(assignmentRecords.map(assignment => assignment.event))];\n\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { scheduler } = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord,\n                assignmentRecord,\n                assignmentRecords\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [];\n\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n\n        let dateConstraints;\n\n        if (me.constrainDragToTimeline) {\n            dateConstraints = me.getDateConstraints?.(resourceRecord, eventRecord);\n\n            const\n                constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n                eventRegion        = Rectangle.from(element, scheduler.timeAxisSubGridElement);\n\n            super.setupConstraints(\n                constrainRectangle,\n                eventRegion,\n                scheduler.timeAxisViewModel.snapPixelAmount,\n                Boolean(dateConstraints.start)\n            );\n        }\n\n        // Collecting all elements to drag\n        assignmentRecords.forEach(assignment => {\n            let eventBarEl = scheduler.getElementFromAssignmentRecord(assignment, true);\n\n            if (!eventBarEl) {\n                eventBarEl = scheduler.currentOrientation.addTemporaryDragElement(assignment.event, assignment.resource);\n            }\n\n            eventBarEls.push(eventBarEl);\n        });\n\n        return {\n            record          : assignmentRecord,\n            draggedEntities : assignmentRecords,\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            // Create copies of the elements\n            eventBarCopies  : eventBarEls.map(el => me.createProxy(el)),\n            eventBarEls\n        };\n    }\n\n    getDateConstraints(resourceRecord, eventRecord) {\n        const\n            { scheduler }           = this,\n            externalDateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord);\n\n        let minDate, maxDate;\n\n        if (this.constrainDragToTimeSlot) {\n            minDate = eventRecord.startDate;\n            maxDate = eventRecord.endDate;\n        }\n        else if (externalDateConstraints) {\n            minDate = externalDateConstraints.start;\n            maxDate = externalDateConstraints.end;\n        }\n\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n\n    getConstrainingRectangle(dateRange, resourceRecord, eventRecord) {\n        return this.scheduler.getScheduleRegion(this.constrainDragToResource && resourceRecord, eventRecord, true, dateRange && {\n            start : dateRange.start, end : dateRange.end\n        });\n    }\n\n    /**\n     * Initializes drag data (dates, constraints, dragged events etc). Called when drag starts.\n     * @private\n     * @param info\n     * @returns {*}\n     */\n    getDragData(info) {\n        const dragData = this.getMinimalDragData(info) || {};\n\n        return {\n            ...super.getDragData(info),\n            ...dragData,\n            initialAssignmentsState : dragData.assignmentRecords.map(assignment => ({\n                startDate : assignment.event.startDate,\n                resource  : assignment.resource,\n                assignment\n            }))\n        };\n    }\n\n    /**\n     * Provide your custom implementation of this to allow additional selected records to be dragged together with the original one.\n     * @param {Scheduler.model.AssignmentModel} assignmentRecord The assignment about to be dragged\n     * @returns {Scheduler.model.AssignmentModel[]} An array of assignment records to drag together with the original\n     */\n    getRelatedRecords(assignmentRecord) {\n        return this.scheduler.selectedAssignments.filter(selectedRecord => selectedRecord !== assignmentRecord && !selectedRecord.resource.readOnly && selectedRecord.event.isDraggable);\n    }\n\n    /**\n     * Get correct axis coordinate depending on schedulers mode (horizontal -> x, vertical -> y). Also takes milestone\n     * layout into account.\n     * @private\n     * @param {Scheduler.model.EventModel} eventRecord Record being dragged\n     * @param {HTMLElement} element Element being dragged\n     * @param {Number[]} coord XY coordinates\n     * @returns {Number|Number[]} X,Y or XY\n     */\n    getCoordinate(eventRecord, element, coord) {\n        const scheduler = this.currentOverClient;\n\n        if (scheduler.isHorizontal) {\n            let x = coord[0];\n\n            // Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events\n            if (scheduler.milestoneLayoutMode !== 'default' && eventRecord.isMilestone) {\n                switch (scheduler.milestoneAlign) {\n                    case 'center':\n                        x += element.offsetWidth / 2;\n                        break;\n                    case 'end':\n                        x += element.offsetWidth;\n                        break;\n                }\n            }\n\n            return x;\n        }\n        else {\n            let y = coord[1];\n            // Adjust coordinate for milestones if using a layout mode, since they are aligned differently than events\n            if (scheduler.milestoneLayoutMode !== 'default' && eventRecord.isMilestone) {\n                switch (scheduler.milestoneAlign) {\n                    case 'center':\n                        y += element.offsetHeight / 2;\n                        break;\n                    case 'end':\n                        y += element.offsetHeight;\n                        break;\n                }\n            }\n\n            return y;\n        }\n    }\n\n    /**\n     * Get resource record occluded by the drag proxy.\n     * @private\n     * @returns {Scheduler.model.ResourceModel}\n     */\n    resolveResource() {\n        const\n            me                 = this,\n            client             = me.currentOverClient,\n            { isHorizontal }   = client,\n            {\n                context,\n                browserEvent,\n                dragProxy\n            }                  = me.dragData,\n            element            = dragProxy || context.element,\n            // Page coords for elementFromPoint\n            pageRect           = Rectangle.from(element, null, true),\n            y                  = (client.isVertical || me.unifiedDrag) ? context.clientY : pageRect.center.y,\n            // Local coords to resolve resource in vertical\n            localRect          = Rectangle.from(element, client.timeAxisSubGridElement, true),\n            { x : lx, y : ly } = localRect.center,\n            eventTarget        = me.getMouseMoveEventTarget(browserEvent);\n\n        let resource = null;\n\n        if (client.element.contains(eventTarget)) {\n            // This is benchmarked as the fastest way to find a Grid Row from a viewport Y coordinate\n            // so use it in preference to elementFromPoint (which causes a forced synchronous layout) in horizontal mode.\n            if (isHorizontal) {\n                const row = client.rowManager.getRowAt(y);\n\n                resource = row && client.store.getAt(row.dataIndex);\n            }\n            else {\n                // In vertical mode, just use the X coordinate to find out which resource we are under.\n                // The method requires that a .b-sch-timeaxis-cell element be passed.\n                // There is only one in vertical mode, so use that.\n                resource = client.resolveResourceRecord(client.timeAxisSubGridElement.querySelector('.b-sch-timeaxis-cell'), [lx, ly]);\n            }\n        }\n\n        return resource;\n    }\n\n    //endregion\n\n    //region Other stuff\n\n    adjustStartDate(startDate, timeDiff) {\n        const\n            scheduler = this.currentOverClient;\n\n        startDate = scheduler.timeAxis.roundDate(new Date(startDate - 0 + timeDiff), scheduler.snapRelativeToEventStartDate ? startDate : false);\n\n        return this.constrainStartDate(startDate);\n    }\n\n    getRecordElement(assignmentRecord) {\n        return this.client.getElementFromAssignmentRecord(assignmentRecord, true);\n    }\n\n    // Used by the Dependencies feature to draw lines to the drag proxy instead of the original event element\n    getProxyElement(assignmentRecord) {\n        if (this.isDragging) {\n            const index = this.dragData.assignmentRecords.indexOf(assignmentRecord);\n\n            if (index >= 0) {\n                return this.dragData.proxyElements[index];\n            }\n        }\n\n        return null;\n    }\n\n    //endregion\n\n    //#region Salesforce hooks\n\n    getMouseMoveEventTarget(event) {\n        return event.target;\n    }\n\n    //#endregion\n}\n\nGridFeatureManager.registerFeature(EventDrag, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventDrag, false, 'ResourceHistogram');\n","import DragCreateBase from './base/DragCreateBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/feature/EventDragCreate\n */\n\n/**\n * Feature that allows the user to create new events by dragging in empty parts of the scheduler rows.\n *\n * {@inlineexample Scheduler/feature/EventDragCreate.js}\n *\n * This feature is **enabled** by default.\n *\n * <div class=\"note\">Incompatible with the {@link Scheduler.feature.EventDragSelect EventDragSelect} and\n * {@link Scheduler.feature.Pan Pan} features. If either of those features are enabled, this feature has no effect.\n * </div>\n *\n * ## Conditionally preventing drag creation\n *\n * To conditionally prevent drag creation for a certain resource or a certain timespan, you listen for the\n * {@link #event-beforeDragCreate} event, add your custom logic to it and return `false` to prevent the operation\n * from starting. For example to not allow drag creation on the topmost resource:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     listeners : {\n *         beforeDragCreate({ resource }) {\n *             // Prevent drag creating on the topmost resource\n *             if (resource === scheduler.resourceStore.first) {\n *                 return false;\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * @extends Scheduler/feature/base/DragCreateBase\n * @demo Scheduler/basic\n * @classtype eventDragCreate\n * @feature\n */\nexport default class EventDragCreate extends DragCreateBase {\n    //region Config\n\n    static $name = 'EventDragCreate';\n\n    static configurable = {\n        /**\n         * An empty function by default, but provided so that you can perform custom validation on the event being\n         * created. Return `true` if the new event is valid, `false` to prevent an event being created.\n         * @param {Object} context A drag create context\n         * @param {Date} context.startDate Event start date\n         * @param {Date} context.endDate Event end date\n         * @param {Scheduler.model.EventModel} context.record Event record\n         * @param {Scheduler.model.ResourceModel} context.resourceRecord Resource record\n         * @param {Event} event The event object\n         * @returns {Boolean} `true` if this validation passes\n         * @config {Function}\n         */\n        validatorFn : () => true,\n\n        /**\n         * Locks the layout during drag create, overriding the default behaviour that uses the same rendering\n         * pathway for drag creation as for already existing events.\n         *\n         * This more closely resembles the behaviour of versions prior to 4.2.0.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        lockLayout : false\n    };\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires on the owning Scheduler after the new event has been created.\n     * @event dragCreateEnd\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The new `EventModel` record.\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource for the row in which the event is being\n     * created.\n     * @param {MouseEvent} event The ending mouseup event.\n     * @param {HTMLElement} eventElement The DOM element representing the newly created event un the UI.\n     */\n\n    /**\n     * Fires on the owning Scheduler at the beginning of the drag gesture. Returning `false` from a listener prevents\n     * the drag create operation from starting.\n     *\n     * ```javascript\n     * const scheduler = new Scheduler({\n     *     listeners : {\n     *         beforeDragCreate({ date }) {\n     *             // Prevent drag creating events in the past\n     *             return date >= Date.now();\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * @event beforeDragCreate\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.ResourceModel} resourceRecord\n     * @param {Date} date The datetime associated with the drag start point.\n     */\n\n    /**\n     * Fires on the owning Scheduler after the drag start has created a new Event record.\n     * @event dragCreateStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the new event.\n     */\n\n    /**\n     * Fires on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc\n     * ```javascript\n     *  scheduler.on('beforedragcreatefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeDragCreateFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the new Event record\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Scheduler at the end of the drag create gesture whether or not\n     * a new event was created by the gesture.\n     * @event afterDragCreate\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel} eventRecord The event record being created\n     * @param {Scheduler.model.ResourceModel} resourceRecord The resource record\n     * @param {HTMLElement} eventElement The element representing the created event record\n     */\n\n    //endregion\n\n    //region Init\n\n    get scheduler() {\n        return this.client;\n    }\n\n    get store() {\n        return this.client.eventStore;\n    }\n\n    get project() {\n        return this.client.project;\n    }\n\n    updateLockLayout(lock) {\n        this.dragActiveCls = `b-dragcreating${lock ? ' b-dragcreate-lock' : ''}`;\n    }\n\n    //endregion\n\n    //region Scheduler specific implementation\n\n    handleBeforeDragCreate(drag, eventRecord, event) {\n        const { resourceRecord } = drag;\n\n        if (resourceRecord.readOnly || !this.scheduler.resourceStore.isAvailable(resourceRecord)) {\n            return false;\n        }\n\n        const\n            { scheduler }      = this,\n            // For resources with a calendar, ensure the date is inside a working time range\n            isWorkingTime      = !scheduler.isSchedulerPro || eventRecord.ignoreResourceCalendar || resourceRecord.isWorkingTime(drag.mousedownDate),\n            result             = isWorkingTime && scheduler.trigger('beforeDragCreate', {\n                resourceRecord,\n                date : drag.mousedownDate,\n                event\n            });\n\n        // Save date constraints\n        this.dateConstraints = scheduler.getDateConstraints?.(resourceRecord, eventRecord);\n\n        return result;\n    }\n\n    dragStart(drag) {\n        const\n            me               = this,\n            { client }       = me,\n            {\n                eventStore,\n                assignmentStore,\n                enableEventAnimations,\n                enableTransactionalFeatures\n            }                  = client,\n            { resourceRecord } = drag,\n            eventRecord        = me.createEventRecord(drag),\n            resourceRecords    = [resourceRecord];\n\n        eventRecord.set('duration', DateHelper.diff(eventRecord.startDate, eventRecord.endDate, eventRecord.durationUnit, true));\n\n        // It's only a provisional event until gesture is completed (possibly longer if an editor dialog is shown after)\n        eventRecord.isCreating = true;\n\n        // Flag used by rendering to not draw a zero length event being drag created as a milestone\n        eventRecord.meta.isDragCreating = true;\n\n        // force the transaction canceling in the taskeditor early\n        // this is because we are going to add a new event record to the store, and it has to be out of the\n        // task editor's stm transaction\n        // now there's a re-entrant protection in that method, so hopefully when it will be called by the\n        // editor itself that's ok\n        // `taskEdit === false` in some cases, so can't just use `?.` here\n        client.features.taskEdit && client.features.taskEdit.doCancel();\n\n        // This presents the event to be scheduled for validation at the proposed mouse/date point\n        // If rejected, we cancel operation\n        if (me.handleBeforeDragCreate(drag, eventRecord, drag.event) === false) {\n            return false;\n        }\n\n        // This is an async function which will start transaction asynchronously. This workflow expect transaction to\n        // be started ASAP\n        me.captureStm(true);\n\n        let assignmentRecords = [];\n\n        if (resourceRecord) {\n            if (eventStore.usesSingleAssignment || !enableTransactionalFeatures) {\n                assignmentRecords = assignmentStore.assignEventToResource(eventRecord, resourceRecord);\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Max and Nick should investigate why this is needed, better if assignment could be there when\n                //   event is added to the store, to avoid having it included in chained stores that check for\n                //   unassigned events\n                // </remove-on-release>\n                // Do not add record to the store just yet, otherwise records would get to the STM queue assignment first,\n                // then event, which will break `store.added` bag after undo/redo.\n                assignmentRecords = [assignmentStore.createRecord({\n                    event    : eventRecord,\n                    resource : resourceRecord\n                })];\n            }\n        }\n\n        // Vetoable beforeEventAdd allows cancel of this operation\n        if (client.trigger('beforeEventAdd', { eventRecord, resourceRecords, assignmentRecords }) === false) {\n            if (eventStore.usesSingleAssignment || !enableTransactionalFeatures) {\n                assignmentStore.remove(assignmentRecords);\n            }\n            return false;\n        }\n\n        // When configured to lock layout during drag create, set a flag that HorizontalRendering will pick up to\n        // exclude the new event from the layout calculations. It will then be at the topmost position in the \"cell\"\n        if (me.lockLayout) {\n            eventRecord.meta.excludeFromLayout = true;\n        }\n\n        client.onEventCreated?.(eventRecord);\n\n        client.enableEventAnimations = false;\n        eventStore.addAsync(eventRecord).then(() => client.enableEventAnimations = enableEventAnimations);\n\n        if (!eventStore.usesSingleAssignment && enableTransactionalFeatures) {\n            // Add assignment after event only to keep STM transaction sane\n            assignmentStore.add(assignmentRecords[0]);\n        }\n\n        // Element must be created synchronously, not after the project's normalizing delays.\n        // Overrides the check for isEngineReady in VerticalRendering so that the newly added record\n        // will be rendered when we call refreshRows.\n        client.isCreating = true;\n        client.refreshRows();\n        client.isCreating = false;\n\n        // Set the element we are dragging\n        drag.itemElement = drag.element = client.getElementFromEventRecord(eventRecord);\n\n        // If the resource row is very tall, the event may have been rendered outside of the\n        // visible viewport. If so, scroll it into view.\n        if (!DomHelper.isInView(drag.itemElement)) {\n            client.scrollable.scrollIntoView(drag.itemElement, {\n                animate    : true,\n                edgeOffset : client.barMargin\n            });\n        }\n\n        return super.dragStart(drag);\n    }\n\n    checkValidity(context, event) {\n        const\n            me         = this,\n            { client } = me;\n\n        // Nicer for users of validatorFn\n        context.resourceRecord = me.dragging.resourceRecord;\n        return (\n            client.allowOverlap ||\n            client.isDateRangeAvailable(context.startDate, context.endDate, context.eventRecord, context.resourceRecord)\n        ) && me.createValidatorFn.call(me.validatorFnThisObj || me, context, event);\n    }\n\n    // Determine if resource already has events or not\n    isRowEmpty(resourceRecord) {\n        const events = this.store.getEventsForResource(resourceRecord);\n        return !events || !events.length;\n    }\n\n    //endregion\n\n    triggerBeforeFinalize(event) {\n        this.client.trigger(`beforeDragCreateFinalize`, event);\n    }\n\n    /**\n     * Creates an event by the event object coordinates\n     * @param {Object} drag The Bryntum event object\n     * @private\n     */\n    createEventRecord(drag) {\n        const\n            me          = this,\n            { client }  = me,\n            dimension   = client.isHorizontal ? 'X' : 'Y',\n            {\n                timeAxis,\n                eventStore,\n                weekStartDay\n            }           = client,\n            {\n                event,\n                mousedownDate\n            }           = drag,\n            draggingEnd = me.draggingEnd = event[`page${dimension}`] > drag.startEvent[`page${dimension}`],\n            eventConfig = {\n                name      : eventStore.modelClass.fieldMap.name.defaultValue || me.L('L{Object.newEvent}'),\n                startDate : draggingEnd ? DateHelper.floor(mousedownDate, timeAxis.resolution, null, weekStartDay) : mousedownDate,\n                endDate   : draggingEnd ? mousedownDate : DateHelper.ceil(mousedownDate, timeAxis.resolution, null, weekStartDay)\n            };\n\n        // if project model has been imported from Gantt, we have to define constraint data directly to correct\n        // auto-scheduling while dragCreate\n        if (client.project.isGanttProjectMixin) {\n            ObjectHelper.assign(eventConfig, {\n                constraintDate : eventConfig.startDate,\n                constraintType : 'startnoearlierthan'\n            });\n        }\n\n        return eventStore.createRecord(eventConfig);\n    }\n\n    async internalUpdateRecord(context, eventRecord) {\n        await super.internalUpdateRecord(context, eventRecord);\n\n        // Toggle isCreating after ending batch, to make sure assignments can become persistable\n        if (!this.client.hasEventEditor) {\n            context.eventRecord.isCreating = false;\n        }\n    }\n\n    async finalizeDragCreate(context) {\n        const { meta } = context.eventRecord;\n\n        // Remove the layout lock flag, event will jump into place as part of the finalization\n        meta.excludeFromLayout = false;\n        // Also allow new event to become a milestone now\n        meta.isDragCreating    = false;\n\n        const transferred = await super.finalizeDragCreate(context);\n\n        // if STM capture has NOT been transferred to the\n        // event editor, we need to finalize the STM transaction / release the capture\n        if (!transferred) {\n            await this.freeStm(true);\n        }\n        else {\n            // otherwise just freeing our capture\n            this.hasStmCapture = false;\n        }\n\n        return transferred;\n    }\n\n    async cancelDragCreate(context) {\n        await super.cancelDragCreate(context);\n\n        await this.freeStm(false);\n    }\n\n    getTipHtml(...args) {\n        const\n            html        = super.getTipHtml(...args),\n            { element } = this.tip;\n\n        element.classList.add('b-sch-dragcreate-tooltip');\n        element.classList.toggle('b-too-narrow', this.dragging.context.tooNarrow);\n\n        return html;\n    }\n\n    onAborted(context) {\n        const { eventRecord, resourceRecord } = context;\n\n        // The product this is being used in may not have resources.\n        this.store.unassignEventFromResource?.(eventRecord, resourceRecord);\n        this.store.remove(eventRecord);\n    }\n}\n\nGridFeatureManager.registerFeature(EventDragCreate, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventDragCreate, false, 'ResourceHistogram');\n","import TooltipBase from './base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport { parseAlign } from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Scheduler/feature/EventTooltip\n */\n\n// Alignment offsets to clear any dependency terminals depending on whether\n// the tooltip is aligned top/bottom (1) or left/right (2) as parsed from the\n// align string by Rectangle's parseAlign\nconst\n    zeroOffset = [0, 0],\n    depOffset  = [\n        null, [0, 10], [10, 0]\n    ];\n\n/**\n * Displays a tooltip when hovering events. The template used to render the tooltip can be customized, see {@link #config-template}.\n * Config options are also applied to the tooltip shown, see {@link Core.widget.Tooltip} for available options.\n *\n * ## Showing local data\n * To show a basic \"local\" tooltip (with data available in the Event record) upon hover:\n * ```javascript\n * new Scheduler({\n *   features : {\n *     eventTooltip : {\n *         // Tooltip configs can be used here\n *         align : 'l-r' // Align left to right,\n *         // A custom HTML template\n *         template : data => `<dl>\n *           <dt>Assigned to:</dt>\n *              <dt>Time:</dt>\n *              <dd>\n *                  ${DateHelper.format(data.eventRecord.startDate, 'LT')} - ${DateHelper.format(data.eventRecord.endDate, 'LT')}\n *              </dd>\n *              ${data.eventRecord.get('note') ? `<dt>Note:</dt><dd>${data.eventRecord.note}</dd>` : ''}\n *\n *              ${data.eventRecord.get('image') ? `<dt>Image:</dt><dd><img class=\"image\" src=\"${data.eventRecord.get('image')}\"/></dd>` : ''}\n *          </dl>`\n *     }\n *   }\n * });\n * ```\n *\n * ## Showing remotely loaded data\n * Loading remote data into the event tooltip is easy. Simply use the {@link #config-template} and return a Promise which yields the content to show.\n * ```javascript\n * new Scheduler({\n *   features : {\n *     eventTooltip : {\n *        template : ({ eventRecord }) => AjaxHelper.get(`./fakeServer?name=${eventRecord.name}`).then(response => response.text())\n *     }\n *   }\n * });\n * ```\n *\n * This feature is **enabled** by default\n *\n * By default, the tooltip {@link Core.widget.Widget#config-scrollAction realigns on scroll}\n * meaning that it will stay aligned with its target should a scroll interaction make the target move.\n *\n * If this is causing performance issues in a Scheduler, such as if there are many dozens of events\n * visible, you can configure this feature with `scrollAction: 'hide'`. This feature's configuration is\n * applied to the tooltip, so that will mean that the tooltip will hide if its target is moved by a\n * scroll interaction.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Scheduler/basic\n * @inlineexample Scheduler/feature/EventTooltip.js\n * @classtype eventTooltip\n * @feature\n */\nexport default class EventTooltip extends TooltipBase {\n    //region Config\n\n    static get $name() {\n        return 'EventTooltip';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A function which receives data about the event and returns a string,\n             * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\n             * This method will be called with an object containing the fields below\n             * @param {Object} data\n             * @param {Scheduler.model.EventModel} data.eventRecord\n             * @param {Date} data.startDate\n             * @param {Date} data.endDate\n             * @param {String} data.startText\n             * @param {String} data.endText\n             * @config {Function} template\n             */\n            template : data => `\n                ${data.eventRecord.name ? StringHelper.xss`<div class=\"b-sch-event-title\">${data.eventRecord.name}</div>` : ''}\n                ${data.startClockHtml}\n                ${data.endClockHtml}`,\n\n            cls : 'b-sch-event-tooltip',\n\n            monitorRecordUpdate : true,\n\n            /**\n             * Defines what to do if document is scrolled while the tooltip is visible.\n             *\n             * Valid values: ´null´: do nothing, ´hide´: hide the tooltip or ´realign´: realign to the target if possible.\n             *\n             * @config {'hide'|'realign'|null}\n             * @default\n             */\n            scrollAction : 'hide'\n        };\n    }\n\n    /**\n     * The event which the tooltip feature has been activated for.\n     * @member {Scheduler.model.EventModel} eventRecord\n     * @readonly\n     */\n\n    //endregion\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        if (typeof this.align === 'string') {\n            this.align = { align : this.align };\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint(...arguments);\n\n        if (firstPaint) {\n            const\n                { dependencies } = this.client.features;\n\n            if (dependencies) {\n                this.tooltip.ion({\n                    beforeAlign({ source : tooltip, offset = zeroOffset }) {\n                        const\n                            { edgeAligned }   = parseAlign(tooltip.align.align),\n                            depTerminalOffset = dependencies.disabled ? zeroOffset : depOffset[edgeAligned];\n\n                        // Add the spec's offset to the offset necessitated by dependency terminals\n                        arguments[0].offset = [\n                            offset[0] + depTerminalOffset[0],\n                            offset[1] + depTerminalOffset[1]\n                        ];\n                    }\n                });\n            }\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(EventTooltip, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventTooltip, false, 'ResourceHistogram');\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\n\n/**\n * @module Scheduler/feature/StickyEvents\n */\n\nconst zeroMargins = { width : 0, height : 0 };\n\n/**\n * This feature applies native `position: sticky` to event contents in horizontal mode, keeping the contents in view as\n * long as possible on scroll. For vertical mode it uses a programmatic solution to achieve the same result.\n *\n * Assign `eventRecord.stickyContents = false` to disable stickiness on a per event level (docs for\n * {@link Scheduler/model/EventModel#field-stickyContents}).\n *\n * This feature is **enabled** by default.\n *\n * ### Note\n * If a complex {@link Scheduler.view.Scheduler#config-eventRenderer} is used to create a DOM structure within the\n * `.b-sch-event-content` element, then application CSS will need to be written to cancel the stickiness on the\n * `.b-sch-event-content` element, and make some inner content element(s) sticky.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyEvents\n * @feature\n */\nexport default class StickyEvents extends InstancePlugin {\n    static $name = 'StickyEvents';\n\n    static type = 'stickyEvents';\n\n    static pluginConfig = {\n        chain : ['onEventDataGenerated']\n    };\n\n    construct(scheduler, config) {\n        super.construct(scheduler, config);\n\n        if (scheduler.isVertical) {\n            this.toUpdate = new Set();\n\n            scheduler.ion({\n                scroll           : 'onSchedulerScroll',\n                horizontalScroll : 'onHorizontalScroll',\n                thisObj          : this,\n                prio             : 10000\n            });\n        }\n    }\n\n    onEventDataGenerated(renderData) {\n        if (this.client.isHorizontal) {\n            renderData.wrapperCls['b-disable-sticky'] = renderData.eventRecord.stickyContents === false;\n        }\n        else {\n            this.syncEventContentPosition(renderData, undefined, true);\n            this.updateStyles();\n        }\n    }\n\n    //region Vertical mode\n\n    onSchedulerScroll() {\n        if (!this.disabled) {\n            this.verticalSyncAllEventsContentPosition(this.client);\n        }\n    }\n\n    // Have to sync also on horizontal scroll, since we reuse elements and dom configs\n    onHorizontalScroll({ subGrid }) {\n        if (subGrid === this.client.timeAxisSubGrid) {\n            this.verticalSyncAllEventsContentPosition(this.client);\n        }\n    }\n\n    updateStyles() {\n        for (const { contentEl, style } of this.toUpdate) {\n            DomHelper.applyStyle(contentEl, style);\n        }\n\n        this.toUpdate.clear();\n    }\n\n    verticalSyncAllEventsContentPosition(scheduler) {\n        const { resourceMap } = scheduler.currentOrientation;\n\n        for (const eventsData of resourceMap.values()) {\n            for (const { renderData, elementConfig } of Object.values(eventsData)) {\n                const args = [renderData];\n\n                if (elementConfig && renderData.eventRecord.isResourceTimeRange) {\n                    args.push(elementConfig.children[0]);\n                }\n\n                this.syncEventContentPosition.apply(this, args);\n            }\n        }\n        this.toUpdate.size && this.updateStyles();\n    }\n\n    syncEventContentPosition(renderData, eventContent = renderData.eventContent, duringGeneration = false) {\n        if (\n            this.disabled ||\n            // Allow client disable stickiness for certain events\n            renderData.eventRecord.stickyContents === false\n        ) {\n            return;\n        }\n\n        const\n            { client }        = this,\n            {\n                eventRecord,\n                resourceRecord,\n                useEventBuffer,\n                bufferAfterWidth,\n                bufferBeforeWidth,\n                top,\n                height\n            }                 = renderData,\n            scrollPosition    = client.scrollable.y,\n            wrapperEl         = duringGeneration ? null : client.getElementFromEventRecord(eventRecord, resourceRecord, true),\n            contentEl         = wrapperEl && DomSync.getChild(wrapperEl, 'event.content'),\n            meta              = eventRecord.instanceMeta(client),\n            style             = typeof eventContent.style === 'string'\n                ? (eventContent.style = DomHelper.parseStyle(eventContent.style))\n                : eventContent.style || (eventContent.style = {});\n\n        // Do not process events being dragged\n        if (wrapperEl?.classList.contains('b-dragging')) {\n            return;\n        }\n\n        let start       = top,\n            contentSize = height,\n            end         = start + contentSize;\n\n        if (useEventBuffer) {\n            start += bufferBeforeWidth;\n            contentSize = contentSize - bufferBeforeWidth - bufferAfterWidth;\n            end = start + contentSize;\n        }\n\n        // Only process non-milestones that are partially out of view\n        if (start < scrollPosition && end >= scrollPosition && !eventRecord.isMilestone) {\n            const\n                contentWidth = contentEl?.offsetWidth,\n                justify      = contentEl?.parentNode && DomHelper.getStyleValue(contentEl.parentNode, 'justifyContent'),\n                c            = justify === 'center' ? (renderData.width - contentWidth) / 2 : 0,\n                eventStart   = start,\n                eventEnd     = eventStart + contentSize - 1;\n\n            // Only process non-milestone events. Milestones have no width.\n            // If there's no offsetWidth, it's still b-released, so we cannot measure it.\n            // If the event starts off the left edge, but its right edge is still visible,\n            // translate the contentEl to compensate. If not, undo any translation.\n            if ((!contentEl || contentWidth) && eventStart < scrollPosition && eventEnd >= scrollPosition) {\n                const\n                    edgeSizes = this.getEventContentMargins(contentEl),\n                    maxOffset = contentEl\n                        ? (contentSize - contentEl.offsetHeight - edgeSizes.height) - c\n                        : Number.MAX_SAFE_INTEGER,\n                    offset = Math.min(scrollPosition - eventStart, maxOffset - 2);\n\n                style.transform = offset > 0 ? `translateY(${offset}px)` : '';\n                meta.stuck = true;\n            }\n            else {\n                style.transform = '';\n                meta.stuck = false;\n            }\n\n            if (contentEl) {\n                this.toUpdate.add({\n                    contentEl,\n                    style\n                });\n            }\n        }\n        else if (contentEl && meta.stuck) {\n            style.transform = '';\n            meta.stuck = false;\n\n            this.toUpdate.add({\n                contentEl,\n                style\n            });\n        }\n    }\n\n    // Only measure the margins of an event's contentEl once\n    getEventContentMargins(contentEl) {\n        if (contentEl?.classList.contains('b-sch-event-content')) {\n            return DomHelper.getEdgeSize(contentEl, 'margin');\n        }\n        return zeroMargins;\n    }\n\n    //endregion\n\n    doDisable() {\n        super.doDisable(...arguments);\n\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(StickyEvents, true, 'Scheduler');\nGridFeatureManager.registerFeature(StickyEvents, false, 'ResourceHistogram');\n","import AbstractTimeRanges from './AbstractTimeRanges.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport AttachToProjectMixin from '../data/mixin/AttachToProjectMixin.js';\nimport TimeSpan from '../model/TimeSpan.js';\n\n/**\n * @module Scheduler/feature/TimeRanges\n */\n\n/**\n * Feature that renders global ranges of time in the timeline. Use this feature to visualize a `range` like a 1 hr lunch\n * or some important point in time (a `line`, i.e. a range with 0 duration). This feature can also show a current time\n * indicator if you set {@link #config-showCurrentTimeLine} to true. To style the rendered elements, use the\n * {@link Scheduler.model.TimeSpan#field-cls cls} field of the `TimeSpan` class.\n *\n * {@inlineexample Scheduler/feature/TimeRanges.js}\n *\n * Each time range is represented by an instances of {@link Scheduler.model.TimeSpan}, held in a simple\n * {@link Core.data.Store}. The feature uses {@link Scheduler/model/ProjectModel#property-timeRangeStore} defined on the\n * project by default. The store's persisting/loading is handled by Crud Manager (if it's used by the component).\n *\n * Note that the feature uses virtualized rendering, only the currently visible ranges are available in the DOM.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ## Showing an icon in the time range header\n *\n * You can use Font Awesome icons easily (or set any other icon using CSS) by using the {@link Scheduler.model.TimeSpan#field-iconCls}\n * field. The JSON data below will show a flag icon:\n *\n * ```json\n * {\n *     \"id\"        : 5,\n *     \"iconCls\"   : \"b-fa b-fa-flag\",\n *     \"name\"      : \"v5.0\",\n *     \"startDate\" : \"2019-02-07 15:45\"\n * },\n * ```\n *\n * ## Recurring time ranges\n *\n * The feature supports recurring ranges in case the provided store and models\n * have {@link Scheduler/data/mixin/RecurringTimeSpansMixin} and {@link Scheduler/model/mixin/RecurringTimeSpan}\n * mixins applied:\n *\n * ```javascript\n * // We want to use recurring time ranges so we make a special model extending standard TimeSpan model with\n * // RecurringTimeSpan which adds recurrence support\n * class MyTimeRange extends RecurringTimeSpan(TimeSpan) {}\n *\n * // Define a new store extending standard Store with RecurringTimeSpansMixin mixin to add recurrence support to the\n * // store. This store will contain time ranges.\n * class MyTimeRangeStore extends RecurringTimeSpansMixin(Store) {\n *     static get defaultConfig() {\n *         return {\n *             // use our new MyResourceTimeRange model\n *             modelClass : MyTimeRange\n *         };\n *     }\n * };\n *\n * // Instantiate store for timeRanges using our new classes\n * const timeRangeStore = new MyTimeRangeStore({\n *     data : [{\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Lunch',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n *\n * const scheduler = new Scheduler({\n *     ...\n *     features : {\n *         timeRanges : true\n *     },\n *\n *     crudManager : {\n *         // store for \"timeRanges\" feature\n *         timeRangeStore\n *     }\n * });\n * ```\n *\n * @extends Scheduler/feature/AbstractTimeRanges\n * @classtype timeRanges\n * @feature\n * @demo Scheduler/timeranges\n */\nexport default class TimeRanges extends AbstractTimeRanges.mixin(AttachToProjectMixin) {\n    //region Config\n\n    static get $name() {\n        return 'TimeRanges';\n    }\n\n    static get defaultConfig() {\n        return {\n            store : true\n        };\n    }\n\n    static configurable = {\n        /**\n         * Store that holds the time ranges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof).\n         * A store will be automatically created if none is specified.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Misc\n         */\n        store : {\n            modelClass : TimeSpan\n        },\n\n        /**\n         * The interval (as amount of ms) defining how frequently the current timeline will be updated\n         * @config {Number}\n         * @default\n         * @category Misc\n         */\n        currentTimeLineUpdateInterval : 10000,\n\n        /**\n         * The date format to show in the header for the current time line (when {@link #config-showCurrentTimeLine} is configured).\n         * See {@link Core.helper.DateHelper} for the possible formats to use.\n         * @config {String}\n         * @default\n         * @category Common\n         */\n        currentDateFormat : 'HH:mm',\n\n        /**\n         * Show a line indicating current time. Either `true` or `false` or a {@link Scheduler.model.TimeSpan}\n         * configuration object to apply to this special time range (allowing you to provide a custom text):\n         *\n         * ```javascript\n         * showCurrentTimeLine : {\n         *     name : 'Now'\n         * }\n         * ```\n         *\n         * The line carries the CSS class name `b-sch-current-time`, and this may be used to add custom styling to it.\n         *\n         * @prp {Boolean|TimeSpanConfig}\n         * @default\n         * @category Common\n         */\n        showCurrentTimeLine : false\n    };\n\n    //endregion\n\n    //region Init & destroy\n\n    doDestroy() {\n        this.storeDetacher?.();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Returns the TimeRanges which occur within the client Scheduler's time axis.\n     * @property {Scheduler.model.TimeSpan[]}\n     */\n    get timeRanges() {\n        const me        = this;\n\n        if (!me._timeRanges) {\n            const { store } = me;\n\n            let { records } = store;\n\n            if (store.recurringEvents) {\n                const {\n                    startDate,\n                    endDate\n                } = me.client.timeAxis;\n\n                records = records.flatMap(timeSpan => {\n                    // Collect occurrences for the recurring events in the record set\n                    if (timeSpan.isRecurring) {\n                        return timeSpan.getOccurrencesForDateRange(startDate, endDate);\n                    }\n\n                    return timeSpan;\n                });\n            }\n\n            if (me.currentTimeLine) {\n                // Avoid polluting store records\n                if (!store.recurringEvents) {\n                    records = records.slice();\n                }\n\n                records.push(me.currentTimeLine);\n            }\n\n            me._timeRanges = records;\n        }\n\n        return me._timeRanges;\n    }\n    //endregion\n\n    //region Current time line\n\n    attachToProject(project) {\n        super.attachToProject(project);\n        const me = this;\n\n        me.projectTimeZoneChangeDetacher?.();\n\n        if (me.showCurrentTimeLine) {\n\n            // Update currentTimeLine immediately after a time zone change\n            me.projectTimeZoneChangeDetacher = me.client.project?.ion({ timeZoneChange : () => me.updateCurrentTimeLine() });\n\n            // Update currentTimeLine if its already created\n            if (me.currentTimeLine) {\n                me.updateCurrentTimeLine();\n            }\n        }\n    }\n\n    initCurrentTimeLine() {\n        const me = this;\n\n        if (me.currentTimeLine || !me.showCurrentTimeLine) {\n            return;\n        }\n\n        const data = typeof me.showCurrentTimeLine === 'object' ? me.showCurrentTimeLine : {};\n\n        me.currentTimeLine = me.store.modelClass.new({\n            id  : 'currentTime', // no-sanity\n            cls : 'b-sch-current-time'\n        }, data);\n\n        me.currentTimeInterval = me.setInterval(() => me.updateCurrentTimeLine(), me.currentTimeLineUpdateInterval);\n\n        me._timeRanges = null;\n\n        me.updateCurrentTimeLine();\n    }\n\n    updateCurrentTimeLine() {\n        const\n            me                  = this,\n            { currentTimeLine } = me;\n\n        currentTimeLine.timeZone = me.project?.timeZone;\n        currentTimeLine.setLocalDate('startDate', new Date());\n        currentTimeLine.endDate = currentTimeLine.startDate;\n\n        if (!currentTimeLine.originalData.name) {\n            currentTimeLine.name = DateHelper.format(currentTimeLine.startDate, me.currentDateFormat);\n        }\n\n        me.renderRanges();\n    }\n\n    hideCurrentTimeLine() {\n        const me = this;\n\n        if (!me.currentTimeLine) {\n            return;\n        }\n\n        me.clearInterval(me.currentTimeInterval);\n        me.currentTimeLine = null;\n\n        me.refresh();\n    }\n\n    updateShowCurrentTimeLine(show) {\n        if (show) {\n            this.initCurrentTimeLine();\n        }\n        else {\n            this.hideCurrentTimeLine();\n        }\n    }\n\n    //endregion\n\n    //region Menu items\n\n    /**\n     * Adds a menu item to show/hide current time line.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateTimeAxisHeaderMenu({ items }) {\n        items.currentTimeLine = {\n            weight   : 400,\n            text     : this.L('L{showCurrentTimeLine}'),\n            checked  : this.currentTimeLine,\n            onToggle : ({ checked }) => this.updateShowCurrentTimeLine(checked && this.showCurrentTimeLine)\n        };\n    }\n\n    //endregion\n\n    //region Store\n\n    attachToStore(store) {\n        const me = this;\n\n        let renderRanges = false;\n\n        // if we had some store assigned before we need to detach it\n        if (me.storeDetacher) {\n            me.storeDetacher();\n            // then we'll need to render ranges provided by the new store\n            renderRanges = true;\n        }\n\n        me.storeDetacher = store.ion({\n            change  : 'onStoreChange',\n            refresh : 'onStoreChange',\n            thisObj : me\n        });\n\n        me._timeRanges = null;\n\n        // render ranges if needed\n        renderRanges && me.renderRanges();\n    }\n\n    /**\n     * Returns the {@link Core.data.Store store} used by this feature\n     * @property {Core.data.Store}\n     * @category Misc\n     */\n    get store() {\n        return this.client.project.timeRangeStore;\n    }\n\n    updateStore(store) {\n        const\n            me          = this,\n            { client }  = me,\n            { project } = client;\n\n        store = project.timeRangeStore;\n\n        me.attachToStore(store);\n\n        // timeRanges can be set on scheduler/gantt, for convenience. Should only be processed by the TimeRanges and not\n        // any subclasses\n        if (client.timeRanges && !client._timeRangesExposed) {\n            store.add(client.timeRanges);\n            delete client.timeRanges;\n        }\n    }\n\n    // Called by ProjectConsumer after a new store is assigned at runtime\n    attachToTimeRangeStore(store) {\n        this.store = store;\n    }\n\n    resolveTimeRangeRecord(el) {\n        return this.store.getById(el.closest(this.baseSelector).dataset.id);\n    }\n\n    onStoreChange({ type, action }) {\n        const me = this;\n\n        // Force re-evaluating of which ranges to consider for render\n        me._timeRanges = null;\n\n        // https://github.com/bryntum/support/issues/1398 - checking also if scheduler is visible to change elements\n        if (me.disabled || !me.client.isVisible || me.isConfiguring || (type === 'refresh' && action !== 'batch')) {\n            return;\n        }\n\n        me.client.runWithTransition(() => me.renderRanges(), !me.client.refreshSuspended);\n    }\n\n    //endregion\n\n    //region Drag\n\n    onDragStart(event) {\n        const\n            me                = this,\n            { context }       = event,\n            record            = me.resolveTimeRangeRecord(context.element.closest(me.baseSelector)),\n            rangeBodyEl       = me.getBodyElementByRecord(record);\n\n        context.relatedElements = [rangeBodyEl];\n\n        Object.assign(context, {\n            record,\n            rangeBodyEl,\n            originRangeX : DomHelper.getTranslateX(rangeBodyEl),\n            originRangeY : DomHelper.getTranslateY(rangeBodyEl)\n        });\n\n        super.onDragStart(event);\n\n        me.showTip(context);\n    }\n\n    onDrop(event) {\n        const { context } = event;\n\n        if (!context.valid) {\n            return this.onInvalidDrop({ context });\n        }\n\n        const\n            me          = this,\n            { client }  = me,\n            { record }  = context,\n            box         = Rectangle.from(context.rangeBodyEl),\n            newStart    = client.getDateFromCoordinate(box.getStart(client.rtl, client.isHorizontal), 'round', false),\n            wasModified = (record.startDate - newStart !== 0);\n\n        if (wasModified) {\n            record.setStartDate(newStart);\n        }\n        else {\n            me.onInvalidDrop();\n        }\n\n        me.destroyTip();\n\n        super.onDrop(event);\n    }\n\n    //endregion\n\n    //region Resize\n\n    onResizeStart({ context }) {\n        const\n            me          = this,\n            record      = me.resolveTimeRangeRecord(context.element.closest(me.baseSelector)),\n            rangeBodyEl = me.getBodyElementByRecord(record);\n\n        Object.assign(context, {\n            record,\n            rangeBodyEl\n        });\n\n        me.showTip(context);\n    }\n\n    onResizeDrag({ context }) {\n        const\n            me              = this,\n            { rangeBodyEl } = context,\n            { client }      = me,\n            box             = Rectangle.from(context.element),\n            startPos        = box.getStart(client.rtl, client.isHorizontal),\n            endPos          = box.getEnd(client.rtl, client.isHorizontal),\n            startDate       = client.getDateFromCoordinate(startPos, 'round', false),\n            endDate         = client.getDateFromCoordinate(endPos, 'round', false);\n\n        if (me.client.isVertical) {\n            if (context.edge === 'top') {\n                DomHelper.setTranslateY(rangeBodyEl, context.newY);\n            }\n\n            rangeBodyEl.style.height = context.newHeight + 'px';\n        }\n        else {\n            if (context.edge === 'left') {\n                DomHelper.setTranslateX(rangeBodyEl, context.newX);\n            }\n\n            rangeBodyEl.style.width = context.newWidth + 'px';\n        }\n\n        me.updateDateIndicator({ startDate, endDate });\n    }\n\n    onResize({ context }) {\n        if (!context.valid) {\n            return this.onInvalidDrop({ context });\n        }\n\n        const\n            me          = this,\n            { client }  = me,\n            { rtl }     = client,\n            record      = context.record,\n            box         = Rectangle.from(context.element),\n            startPos    = box.getStart(rtl, client.isHorizontal),\n            endPos      = box.getEnd(rtl, client.isHorizontal),\n            newStart    = client.getDateFromCoordinate(startPos, 'round', false),\n            isStart     = (rtl && context.edge === 'right') || (!rtl && context.edge === 'left') || context.edge === 'top',\n            newEnd      = client.getDateFromCoordinate(endPos, 'round', false),\n            wasModified = (isStart && record.startDate - newStart !== 0) ||\n                (newEnd && record.endDate - newEnd !== 0);\n\n        if (wasModified && newEnd > newStart) {\n            if (isStart) {\n                // could be that the drag operation placed the range with start/end outside the axis\n                record.setStartDate(newStart, false);\n            }\n            else {\n                record.setEndDate(newEnd, false);\n            }\n        }\n        else {\n            me.onInvalidResize({ context });\n        }\n\n        me.destroyTip();\n    }\n\n    onInvalidResize({ context }) {\n        const me = this;\n\n        me.resize.reset();\n        // Allow DomSync to reapply original state\n        context.rangeBodyEl.parentElement.lastDomConfig = context.rangeBodyEl.lastDomConfig = null;\n        me.renderRanges();\n\n        me.destroyTip();\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TimeRanges, false, ['Scheduler', 'Gantt']);\n","import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/view/mixin/DelayedRecordsRendering\n */\n\n/**\n * Mixin that implements scheduling/unscheduling a delayed row refresh.\n * @mixin\n * @internal\n */\nexport default Target => class DelayedRecordsRendering extends (Target || Base) {\n\n    static $name = 'DelayedRecordsRendering';\n\n    static configurable = {\n        scheduledRecordsRefreshTimeout : 10\n    };\n\n    static get properties() {\n        return {\n            recordsToRefresh : new Set()\n        };\n    }\n\n    beforeRenderRow({ record }) {\n        // unscheduler records refresh when corresponding rows are rendered\n        if (this.recordIsReadyForRendering?.(record)) {\n            this.unscheduleRecordRefresh(record);\n        }\n\n        return super.beforeRenderRow(...arguments);\n    }\n\n    cleanupScheduledRecord() {\n        const { rowManager, store } = this;\n\n        for (const record of [...this.recordsToRefresh]) {\n            // Remove the record from to-refresh list if:\n            // - it's not in the view store\n            // - or it's not visible\n            if (!record.stores.includes(store) || !rowManager.getRowById(record)) {\n                this.recordsToRefresh.delete(record);\n            }\n        }\n    }\n\n    renderScheduledRecords() {\n        const me = this;\n\n        if (!me.refreshSuspended) {\n            // remove invisible records from the set of scheduled\n            me.cleanupScheduledRecord();\n\n            const\n                { rowManager } = me,\n                records        = [...me.recordsToRefresh],\n                rows           = records.map(record => rowManager.getRowById(record));\n\n            if (rows.length) {\n                rowManager.renderRows(rows);\n\n                /**\n                 * This event fires when records which rendering\n                 * was previously scheduled is finally done.\n                 * @event scheduledRecordsRender\n                 * @param {Grid.view.Grid} source The component.\n                 * @param {Core.data.Model[]} records Rendered records.\n                 * @param {Grid.row.Row[]} rows Rendered rows.\n                 */\n                me.trigger('scheduledRecordsRender', { records, rows });\n            }\n\n            if (me.recordsToRefresh.size) {\n                me.scheduleRecordRefresh();\n            }\n        }\n        // reschedule this call if view refresh is suspended\n        else {\n            me.scheduleRecordRefresh();\n        }\n    }\n\n    /**\n     * Cancels scheduled rows refresh.\n     * @param {Core.data.Model|Core.data.Model[]|Boolean} [clearRecords=true] `true` to also clear the list of records\n     * scheduled for refreshing. `false` will result only canceling the scheduled call and keeping intact\n     * the list of records planned for refreshing.\n     */\n    unscheduleRecordRefresh(clearRecords = true) {\n        const me = this;\n\n        if (clearRecords === true) {\n            me.recordsToRefresh.clear();\n        }\n        else if (clearRecords) {\n            ArrayHelper.asArray(clearRecords).forEach(record => me.recordsToRefresh.delete(record));\n        }\n\n        if (me.scheduledRecordsRefreshTimer && !me.recordsToRefresh.size) {\n            me.clearTimeout(me.scheduledRecordsRefreshTimer);\n        }\n    }\n\n    /**\n     * Schedules the provided record row refresh.\n     * @param {Core.data.Model} records Record to refresh the row of.\n     */\n    scheduleRecordRefresh(records) {\n        const me = this;\n\n        if (records) {\n            ArrayHelper.asArray(records).forEach(record => me.recordsToRefresh.add(record));\n        }\n\n        me.scheduledRecordsRefreshTimer = me.setTimeout({\n            fn                : 'renderScheduledRecords',\n            delay             : me.scheduledRecordsRefreshTimeout,\n            cancelOutstanding : true\n        });\n    }\n\n    get widgetClass() {}\n\n};\n","import Base from '../../Core/Base.js';\n\nexport default class TimelineHistogramRendering extends Base {\n\n    static configurable = {\n        scrollBuffer : 0\n    };\n\n    construct(client) {\n        super.construct();\n        this.client = client;\n    }\n\n    init() {}\n\n    onTimeAxisViewModelUpdate() {\n        const { scrollable } = this.client.timeAxisSubGrid;\n\n        // scrollLeft is the DOM's concept which is -ve in RTL mode.\n        // scrollX i always the +ve scroll offset from the origin.\n        // Both may be needed for different calculations.\n        this.updateFromHorizontalScroll(scrollable.x);\n    }\n\n    // Update header range on horizontal scroll\n    updateFromHorizontalScroll(scrollX) {\n        const\n            me            = this,\n            {\n                client,\n                // scrollBuffer is an export only thing\n                scrollBuffer\n            } = me,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = client,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = client.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = client.getDateFromCoord({ coord : Math.max(0, start - scrollBuffer), ignoreRTL : true }),\n            endDate       = returnEnd ? timeAxis.endDate : (client.getDateFromCoord({ coord : start + width + scrollBuffer, ignoreRTL : true }) || timeAxis.endDate);\n\n        if (startDate && !client._viewPresetChanging) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width + scrollBuffer, right : totalSize - scrollX - scrollBuffer }\n                // LTR all the way to the left\n                : { left : scrollX - scrollBuffer, right : scrollX + width + scrollBuffer };\n\n            // Update timeaxis header making it display the new dates\n            const range = client.timeView.range = { startDate, endDate };\n\n            client.onVisibleDateRangeChange(range);\n\n            // If refresh is suspended, someone else is responsible for updating the UI later\n            if (!client.refreshSuspended && client.rowManager.rows.length) {\n                // Gets here too early in Safari for ResourceHistogram. ResizeObserver triggers a scroll before rows are\n                // rendered first time. Could not track down why, bailing out\n                if (client.rowManager.rows[0].id === null) {\n                    return;\n                }\n\n                // re-render all rows is timeAxis range has been updated\n                if (me._timeAxisStartDate - timeAxis.startDate || me._timeAxisEndDate - timeAxis.endDate) {\n                    me._timeAxisStartDate = timeAxis.startDate;\n                    me._timeAxisEndDate = timeAxis.endDate;\n\n                    client.rowManager.renderRows(client.rowManager.rows);\n                }\n            }\n        }\n    }\n\n    onViewportResize() {}\n\n    refreshRows() {}\n\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n\n    translateToPageCoordinate(x) {\n        const\n            { client } = this,\n            { scrollable } = client.timeAxisSubGrid;\n\n        let result = x + client.timeAxisSubGridElement.getBoundingClientRect().left;\n\n        if (client.rtl) {\n            result -= scrollable.maxX - Math.abs(client.scrollLeft);\n        }\n        else {\n            result -= client.scrollLeft;\n        }\n\n        return result;\n    }\n\n    translateToScheduleCoordinate(x) {\n        const\n            { client } = this,\n            { scrollable } = client.timeAxisSubGrid;\n\n        let result = x - client.timeAxisSubGridElement.getBoundingClientRect().left - globalThis.scrollX;\n\n        // Because we use getBoundingClientRect's left, we have to adjust for page scroll.\n\n        if (client.rtl) {\n            result += scrollable.maxX - Math.abs(client.scrollLeft);\n        }\n        else {\n            result += client.scrollLeft;\n        }\n\n        return result;\n    }\n\n    getDateFromXY(xy, roundingMethod, local, allowOutOfRange = false) {\n        const { client } = this;\n\n        let coord = xy[0];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        coord = client.getRtlX(coord);\n\n        return client.timeAxisViewModel.getDateFromPosition(coord, roundingMethod, allowOutOfRange);\n    }\n\n}\n","import Objects from '../../Core/helper/util/Objects.js';\nimport Histogram from '../../Core/widget/graph/Histogram.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport '../../Grid/column/TreeColumn.js';\nimport '../../Grid/feature/Tree.js';\nimport '../column/TimeAxisColumn.js';\nimport '../feature/ColumnLines.js';\nimport DelayedRecordsRendering from './mixin/DelayedRecordsRendering.js';\nimport TimelineBase from './TimelineBase.js';\nimport TimelineHistogramRendering from './TimelineHistogramRendering.js';\n\n/**\n * @module Scheduler/view/TimelineHistogramBase\n */\n\nconst\n    histogramWidgetCleanState = {\n        series   : null,\n        topValue : null\n    },\n    emptyFn = () => {};\n\n/**\n * Histogram renderer parameters.\n *\n * @typedef {Object} HistogramRenderData\n * @property {Object} histogramData Histogram data\n * @property {HistogramConfig} histogramConfig Configuration object for the histogram widget\n * @property {HTMLElement|null} cellElement Cell element, for adding CSS classes, styling etc.\n *        Can be `null` in case of export\n * @property {Core.data.Model} record Record for the row\n * @property {Grid.column.Column} column This column\n * @property {Grid.view.Grid} grid This grid\n * @property {Grid.row.Row} row Row object. Can be null in case of export. Use the\n * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n */\n\n/**\n * Base class for {@link Scheduler/view/TimelineHistogram} class.\n *\n * @extends Scheduler/view/TimelineBase\n * @abstract\n */\nexport default class TimelineHistogramBase extends TimelineBase.mixin(DelayedRecordsRendering) {\n\n    //region Config\n\n    static $name = 'TimelineHistogramBase';\n\n    static type = 'timelinehistogrambase';\n\n    static configurable = {\n\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-timelinehistogram-cell',\n\n        mode : 'horizontal',\n\n        rowHeight : 50,\n\n        /**\n         * Set to `true` if you want to display a tooltip when hovering an allocation bar. You can also pass a\n         * {@link Core/widget/Tooltip#configs} config object.\n         * Please use {@link #config-barTooltipTemplate} function to customize the tooltip contents.\n         * @config {Boolean|TooltipConfig}\n         */\n        showBarTip : false,\n\n        barTooltip : null,\n\n        barTooltipClass : Tooltip,\n\n        /**\n         * Object enumerating data series for the histogram.\n         * The object keys are treated as the series identifiers and values are objects that\n         * must contain two properties:\n         *  - `type` A String, either `'bar'` or `'outline'`\n         *  - `field` A String, the name of the property to use from the data objects in the {@link #config-data} option.\n         *\n         * ```javascript\n         * histogram = new TimelineHistogram({\n         *     ...\n         *     series : {\n         *         s1 : {\n         *             type  : 'bar',\n         *             field : 's1'\n         *         },\n         *         s2 : {\n         *             type  : 'outline',\n         *             field : 's2'\n         *         }\n         *     },\n         *     store : new Store({\n         *         data : [\n         *             {\n         *                 id            : 'r1',\n         *                 name          : 'Record 1',\n         *                 histogramData : [\n         *                     { s1 : 200, s2 : 100 },\n         *                     { s1 : 150, s2 : 50 },\n         *                     { s1 : 175, s2 : 50 },\n         *                     { s1 : 175, s2 : 75 }\n         *                 ]\n         *             },\n         *             {\n         *                 id            : 'r2',\n         *                 name          : 'Record 2',\n         *                 histogramData : [\n         *                     { s1 : 100, s2 : 100 },\n         *                     { s1 : 150, s2 : 125 },\n         *                     { s1 : 175, s2 : 150 },\n         *                     { s1 : 175, s2 : 75 }\n         *                 ]\n         *             }\n         *         ]\n         *     })\n         * });\n         * ```\n         *\n         * @config {Object<String, HistogramSeries>}\n         */\n        series : null,\n\n        /**\n         * Record field from which the histogram data will be collected.\n         *\n         * ```javascript\n         * histogram = new TimelineHistogram({\n         *     ...\n         *     series : {\n         *         s1 : {\n         *             type : 'bar'\n         *         }\n         *     },\n         *     dataModelField : 'foo',\n         *     store : new Store({\n         *         data : [\n         *             {\n         *                 id   : 'r1',\n         *                 name : 'Record 1',\n         *                 foo  : [\n         *                     { s1 : 200 },\n         *                     { s1 : 150 },\n         *                     { s1 : 175 },\n         *                     { s1 : 175 }\n         *                 ]\n         *             },\n         *             {\n         *                 id   : 'r2',\n         *                 name : 'Record 2',\n         *                 foo  : [\n         *                     { s1 : 100 },\n         *                     { s1 : 150 },\n         *                     { s1 : 175 },\n         *                     { s1 : 175 }\n         *                 ]\n         *             }\n         *         ]\n         *     })\n         * });\n         * ```\n         *\n         * Alternatively {@link #config-getRecordData} function can be used to build a\n         * record's histogram data dynamically.\n         * @config {String}\n         * @default\n         */\n        dataModelField : 'histogramData',\n\n        /**\n         * A function, or name of a function which builds histogram data for the provided record.\n         *\n         * See also {@link #config-dataModelField} allowing to load histogram data from a record field.\n         *\n         * @config {Function|String} getRecordData\n         * @param {Core.data.Model} getRecordData.record Record to get histogram data for.\n         * @param {Object} [aggregationContext] Context object passed in case the data is being retrieved\n         * as a part of some parent record data collecting.\n         * @returns {Object} Histogram data.\n         */\n        getRecordData : null,\n\n        /**\n         * When set to `true` (default) the component reacts on time axis changes\n         * (zooming or changing the displayed time span), clears the histogram data cache of the records\n         * and then refreshes the view.\n         * @config {Boolean}\n         * @default\n         */\n        hardRefreshOnTimeAxisReconfigure : true,\n\n        /**\n         * A Function which returns a CSS class name to add to a rectangle element.\n         * The following parameters are passed:\n         * @param {HistogramSeries} series The series being rendered\n         * @param {DomConfig} rectConfig The rectangle configuration object\n         * @param {Object} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n         * being rendered.\n         * @returns {String} CSS classes of the rectangle element\n         * @config {Function}\n         */\n        getRectClass : null,\n\n        /**\n         * A Function which returns a CSS class name to add to a path element\n         * built for an `outline` type series.\n         * The following parameters are passed:\n         * @param {HistogramSeries} series The series being rendered\n         * @param {Object[]} data The series data\n         * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n         * being rendered.\n         * @returns {String} CSS class name of the path element\n         * @config {Function}\n         */\n        getOutlineClass(series) {\n            return '';\n        },\n\n        readOnly : true,\n\n        // <remove-on-release>\n        // TODO: get rid of getBarTip in 6.0\n        // </remove-on-release>\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {HistogramSeries} series The series being rendered\n         * @param {DomConfig} rectConfig The rectangle configuration object\n         * @param {Object} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @deprecated Since 5.0.0. Please use {@link #config-barTooltipTemplate}\n         * @config {Function}\n         */\n        getBarTip : null,\n\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} context The tooltip context info\n         * @param {Object} context.datum The histogram bar being hovered info\n         * @param {Core.widget.Tooltip} context.tip The tooltip instance\n         * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n         * @param {HTMLElement} context.activeTarget The target element that triggered the show\n         * @param {Event} context.event The raw DOM event\n         * @param {Core.data.Model} data.record The record which value\n         * the hovered bar displays.\n         * @returns {String} Tooltip HTML content\n         * @config {Function}\n         */\n        barTooltipTemplate : null,\n\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     series : {\n         *         foo : {\n         *             type  : 'bar',\n         *             field : 'foo'\n         *         }\n         *     },\n         *     getBarText(datum) {\n         *         // display the value in the bar\n         *         return datum.foo;\n         *     },\n         *     ...\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` will refer to the {@link Core/widget/graph/Histogram} instance, not\n         * this class instance.\n         * To access the view please use `this.owner` in the function:\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const timelineHistogram = this.owner;\n         *\n         *         .....\n         *     },\n         *     ...\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {Object} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @param {HistogramSeries} series The series (provided if histogram widget\n         * {@link Core/widget/graph/Histogram#config-singleTextForAllBars} is `false`)\n         * @param {HistogramRenderData} renderData Current render data giving access to the record, row and cell\n         * being rendered.\n         * @returns {String} Text to render inside the bar\n         * @config {Function}\n         */\n        getBarText : null,\n\n        getRectConfig : null,\n\n        getBarTextRenderData : undefined,\n\n        /**\n         * The class used for building the {@link #property-histogramWidget histogram widget}\n         * @config {Core.widget.graph.Histogram}\n         * @default\n         */\n        histogramWidgetClass : Histogram,\n\n        /**\n         * The underlying {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * @member {Core.widget.graph.Histogram} histogramWidget\n         */\n        /**\n         * An instance or a configuration object of the underlying {@link Core/widget/graph/Histogram}\n         * component that is used under the hood to render actual charts.\n         * In case a configuration object is provided the built class is defined with\n         * {@link #config-histogramWidgetClass} config.\n         * @config {Core.widget.graph.Histogram|HistogramConfig}\n         */\n        histogramWidget : {\n            cls                : 'b-hide-offscreen b-timelinehistogram-histogram',\n            omitZeroHeightBars : true,\n            data               : []\n        },\n\n        fixedRowHeight : true\n    };\n\n    static get properties() {\n        return {\n            histogramDataByRecord : new Map(),\n            collectingDataFor     : new Map()\n        };\n    }\n\n    updateGetRecordData(fn) {\n        this._getRecordData = fn ? this.resolveCallback(fn) : null;\n    }\n\n    updateHardRefreshOnTimeAxisReconfigure(value) {\n        const name = 'hardRefreshOnTimeAxisReconfigure';\n\n        if (value) {\n            this.timeAxis.ion({\n                name,\n                endReconfigure : 'onTimeAxisEndReconfigure',\n                thisObj        : this\n            });\n        }\n        else {\n            this.detachListeners(name);\n        }\n    }\n\n    //endregion\n\n    //region Constructor/Destructor\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        // debounce refreshRows calls\n        me.scheduleRefreshRows = me.createOnFrame(me.refreshRows, [], me, true);\n\n        me.rowManager.ion({\n            beforeRowHeight : 'onBeforeRowHeight',\n            thisObj         : me\n        });\n    }\n\n    onDestroy() {\n        this.clearHistogramDataCache();\n        this._histogramWidget?.destroy();\n        this.barTooltip = null;\n    }\n\n    //endregion\n\n    //region Internal\n\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {}\n\n    getScheduleMouseEventParams(cellData, event) {\n        const record = this.store.getById(cellData.id);\n\n        return { record };\n    }\n\n    get currentOrientation() {\n        if (!this._currentOrientation) {\n            this._currentOrientation = new TimelineHistogramRendering(this);\n        }\n\n        return this._currentOrientation;\n    }\n\n    updateSeries(value) {\n        const me = this;\n\n        me.histogramWidget.series = value;\n\n        me._series = me.histogramWidget.series;\n\n        if (me.isPainted && !me.isConfiguring) {\n            me.scheduleRefreshRows();\n        }\n    }\n\n    getAsyncEventSuffixForStore(store) {\n        // Use xxPreCommit version of events if the store is a part of a project\n        return store.isAbstractPartOfProjectStoreMixin ? 'PreCommit' : '';\n    }\n\n    /**\n     * Schedules the component rows refresh on the next animation frame. However many time it is\n     * called in one event run, it will only be scheduled to run once.\n     */\n    scheduleRefreshRows() {}\n\n    getRowHeight() {\n        return this.rowHeight;\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint({ firstPaint });\n\n        if (firstPaint && this.showBarTip) {\n            this.barTooltip = {};\n        }\n    }\n\n    updateGetBarTip(value) {\n        // reset barTooltipTemplate if custom getBarTip function is provided\n        if (value) {\n            this.barTooltipTemplate = null;\n        }\n\n        return value;\n    }\n\n    changeBarTooltip(tooltip, oldTooltip) {\n        oldTooltip?.destroy();\n\n        if (tooltip) {\n            return tooltip.isTooltip ? tooltip : this.barTooltipClass.new({\n                forElement  : this.timeAxisSubGridElement,\n                forSelector : '.b-histogram rect',\n                hoverDelay  : 0,\n                trackMouse  : false,\n                cls         : 'b-celltooltip-tip',\n                getHtml     : this.getTipHtml.bind(this)\n            }, this.showBarTip, tooltip);\n        }\n\n        return null;\n    }\n\n    async getTipHtml(args) {\n        if (this.showBarTip && this.barTooltipTemplate) {\n            const\n                { activeTarget } = args,\n                index            = parseInt(activeTarget.dataset.index, 10),\n                record           = this.getRecordFromElement(activeTarget),\n                histogramData    = await this.getRecordHistogramData(record);\n\n            return this.barTooltipTemplate({\n                ...args,\n                datum : this.extractHistogramDataArray(histogramData, record)[index],\n                record,\n                index\n            });\n        }\n    }\n\n    collectTicksWidth() {\n        const\n            { ticks }     = this.timeAxis,\n            prevDuration  = ticks[0].endDate - ticks[0].startDate,\n            tickDurations = { 0 : prevDuration };\n\n        let\n            totalDuration = prevDuration,\n            isMonotonous  = true;\n\n        for (let i = 1, { length } = ticks; i < length; i++) {\n            const\n                tick   = ticks[i],\n                duration = tick.endDate - tick.startDate;\n\n            // the ticks width is different -> reset isMonotonous flag\n            if (prevDuration !== duration) {\n                isMonotonous = false;\n            }\n\n            totalDuration    += duration;\n            tickDurations[i] = duration;\n        }\n\n        // if the ticks widths are not monotonous we need to calculate\n        // each bar width to provide it to the histogram widget later\n        if (!isMonotonous) {\n            const ticksWidth = {};\n            for (let i = 0, { length } = ticks; i < length; i++) {\n                ticksWidth[i] = tickDurations[i] / totalDuration;\n            }\n            this.ticksWidth = ticksWidth;\n        }\n        else {\n            this.ticksWidth = null;\n        }\n    }\n\n    changeHistogramWidget(widget) {\n        const me = this;\n\n        if (widget && !widget.isHistogram) {\n            if (me.getBarTextRenderData && !widget.getBarTextRenderData) {\n                widget.getBarTextRenderData = me.getBarTextRenderData;\n            }\n\n            widget = me.histogramWidgetClass.new({\n                owner           : me,\n                appendTo        : me.element,\n                height          : me.rowHeight,\n                width           : me.timeAxisColumn?.width || 0,\n                getBarTip       : !me.barTooltipTemplate && me.getBarTip || emptyFn,\n                getRectClass    : me.getRectClass || me.getRectClassDefault,\n                getBarText      : me.getBarText || me.getBarTextDefault,\n                getOutlineClass : me.getOutlineClass,\n                getRectConfig   : me.getRectConfig\n            }, widget);\n\n            widget.suspendRefresh();\n\n            // bind default getBarText in case it will be called from a custom getBarText()\n            me.getBarTextDefault = me.getBarTextDefault.bind(widget);\n        }\n\n        return widget;\n    }\n\n    // Injectable method.\n    getRectClassDefault(series, rectConfig, datum) {}\n\n    getBarTextDefault(datum, index) {}\n\n    updateShowBarTip(value) {\n        this.barTooltip = value;\n    }\n\n    //endregion\n\n    //region Columns\n\n    get columns() {\n        return super.columns;\n    }\n\n    set columns(columns) {\n        const me = this;\n\n        super.columns = columns;\n\n        if (!me.isDestroying) {\n            me.timeAxisColumn.renderer = me.histogramRenderer.bind(me);\n            me.timeAxisColumn.cellCls = me.timeAxisColumnCellCls;\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onHistogramDataCacheSet({ record, data }) {\n        // schedule record refresh for later\n        this.scheduleRecordRefresh(record);\n    }\n\n    onTimeAxisEndReconfigure() {\n        if (this.hardRefreshOnTimeAxisReconfigure) {\n            // reset histogram cache\n            this.clearHistogramDataCache();\n            // schedule records refresh (that will re-fetch the histogram data from the server since the cache is empty)\n            this.scheduleRefreshRows();\n        }\n    }\n\n    onStoreUpdateRecord({ record, changes }) {\n        const me = this;\n\n        // If we read histogram data from a field and that field got changed\n        // - clear the corresponding record cache\n        if (!me.getRecordData && me.dataModelField && changes[me.dataModelField]) {\n            me.clearHistogramDataCache(record);\n        }\n\n        return super.onStoreUpdateRecord(...arguments);\n    }\n\n    onStoreRemove({ records }) {\n        super.onStoreRemove(...arguments);\n\n        for (const record of records) {\n            this.clearHistogramDataCache(record);\n        }\n    }\n\n    onBeforeRowHeight({ height }) {\n        // <remove-on-release>\n        // TODO: histogramWidget getter requests timeAxisColumn column too early which causes an infinite cycle\n        // </remove-on-release>\n        if (this._timeAxisColumn) {\n            const widget = this._histogramWidget;\n\n            if (widget) {\n                widget.height = height;\n                widget.onElementResize(widget.element);\n            }\n        }\n    }\n\n    onTimeAxisViewModelUpdate() {\n        super.onTimeAxisViewModelUpdate(...arguments);\n\n        const widget = this._histogramWidget;\n\n        if (widget) {\n            widget.width = this.timeAxisViewModel.totalSize;\n            widget.onElementResize(widget.element);\n        }\n\n        this.collectTicksWidth();\n    }\n\n    //endregion\n\n    //region Data processing\n\n    extractHistogramDataArray(histogramData, record) {\n        return histogramData;\n    }\n\n    processRecordRenderData(renderData) {\n        return renderData;\n    }\n\n    /**\n     * Clears the histogram data cache for the provided record (if provided).\n     * If the record is not provided clears the cache for all records.\n     * @param {Core.data.Model} [record] Record to clear the cache for.\n     */\n    clearHistogramDataCache(record) {\n        if (record) {\n            this.histogramDataByRecord.delete(record);\n        }\n        else {\n            this.histogramDataByRecord.clear();\n        }\n    }\n\n    /**\n     * Caches the provided histogram data for the given record.\n     * @param {Core.data.Model} record Record to cache data for.\n     * @param {Object} data Histogram data to cache.\n     */\n    setHistogramDataCache(record, data) {\n        const eventData = { record, data };\n\n        /**\n         * Fires before the component stores a record's histogram data into the cache.\n         *\n         * A listener can be used to transform the collected data dynamically before\n         * it's cached:\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     series : {\n         *         foo : {\n         *             type  : 'bar',\n         *             field : 'f1'\n         *         }\n         *     },\n         *     ...\n         *     listeners : {\n         *         beforeHistogramDataCacheSet(eventData) {\n         *             // completely replace the data for a specific record\n         *             if (eventData.record.id === 123) {\n         *                 eventData.data = [\n         *                     { f1 : 10 },\n         *                     { f1 : 20 },\n         *                     { f1 : 30 },\n         *                     { f1 : 40 },\n         *                     { f1 : 50 },\n         *                     { f1 : 60 }\n         *                 ];\n         *             }\n         *         }\n         *     }\n         * })\n         * ```\n         *\n         * @param {Scheduler.view.TimelineHistogram} source The component instance\n         * @param {Core.data.Model} record Record the histogram data of which is ready.\n         * @param {Object} data The record histogram data.\n         * @event beforeHistogramDataCacheSet\n         */\n        this.trigger('beforeHistogramDataCacheSet', eventData);\n\n        this.histogramDataByRecord.set(eventData.record, eventData.data);\n\n        /**\n         * Fires after the component retrieves a record's histogram data and stores\n         * it into the cache.\n         *\n         * Unlike similar {@link #event-beforeHistogramDataCacheSet} event this event is triggered\n         * after the data is put into the cache.\n         *\n         * A listener can be used to transform the collected data dynamically:\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     series : {\n         *         bar : {\n         *             type : 'bar',\n         *             field : 'bar'\n         *         },\n         *         halfOfBar : {\n         *             type  : 'outline',\n         *             field : 'half'\n         *         }\n         *     },\n         *     ...\n         *     listeners : {\n         *         histogramDataCacheSet({ data }) {\n         *             // add extra entries to collected data\n         *             data.forEach(entry => {\n         *                 entry.half = entry.bar / 2;\n         *             });\n         *         }\n         *     }\n         * })\n         * ```\n         *\n         * @param {Scheduler.view.TimelineHistogram} source The component instance\n         * @param {Core.data.Model} record Record the histogram data of which is ready.\n         * @param {Object} data The record histogram data.\n         * @event histogramDataCacheSet\n         */\n        this.trigger('histogramDataCacheSet', eventData);\n    }\n\n    /**\n     * Returns entire histogram data cache if no record provided,\n     * or cached data for the provided record.\n     * @param {Core.data.Model} [record] Record to get the cached data for.\n     * @returns {Object} The provided record cached data or all the records data cache\n     * as a `Map` keyed by records.\n     */\n    getHistogramDataCache(record) {\n        return record ? this.histogramDataByRecord.get(record) : this.histogramDataByRecord;\n    }\n\n    /**\n     * Returns `true` if there is cached histogram data for the provided record.\n     * @param {Core.data.Model} record Record to check the cache existence for.\n     * @returns {Boolean} `True` if there is a cache for provided record.\n     */\n    hasHistogramDataCache(record) {\n        return this.histogramDataByRecord.has(record);\n    }\n\n    finalizeDataRetrievingInternal(record, data) {\n        // cleanup collectingDataFor map on data collecting completion\n        this.collectingDataFor.delete(record);\n\n        // cache record data\n        this.setHistogramDataCache(record, data);\n\n        // pass data through\n        return data;\n    }\n\n    finalizeDataRetrieving(record, data) {\n        if (Objects.isPromise(data)) {\n            this.collectingDataFor.set(record, data);\n\n            return data.then(data => this.finalizeDataRetrievingInternal(record, data));\n        }\n\n        return this.finalizeDataRetrievingInternal(record, data);\n    }\n\n    /**\n     * Retrieves the histogram data for the provided record.\n     *\n     * The method first checks if there is cached data for the record and returns it if found.\n     * Otherwise it starts collecting data by calling {@link #config-getRecordData} (if provided)\n     * or by reading it from {@link #config-dataModelField} record field.\n     *\n     * The method can be asynchronous depending on the provided {@link #config-getRecordData} function.\n     * If the function returns a `Promise` then the method will return a wrapping `Promise` in turn that will\n     * resolve with the collected histogram data.\n     *\n     * The method triggers {@link #event-histogramDataCacheSet} event when a record data is ready.\n     *\n     * @param {Core.data.Model} record Record to retrieve the histogram data for.\n     * @returns {Object|Promise} The histogram data for the provided record or a `Promise` that will provide the data\n     * when resolved.\n     */\n    getRecordHistogramData(record) {\n        const\n            me     = this,\n            { getRecordData } = me;\n\n        let result = me.collectingDataFor.get(record) || me.getHistogramDataCache(record);\n\n        if (!result && !me.hasHistogramDataCache(record)) {\n            // use \"getRecordData\" function if provided\n            if (getRecordData) {\n                result = getRecordData.handler.call(getRecordData.thisObj, ...arguments);\n            }\n            // or read data from the configured model field\n            else {\n                result = record.get(me.dataModelField);\n            }\n\n            result = me.finalizeDataRetrieving(record, result);\n        }\n\n        return result;\n    }\n\n    recordIsReadyForRendering(record) {\n        return !this.collectingDataFor.has(record);\n    }\n\n    //endregion\n\n    //region Render\n\n    beforeRenderRow(eventData) {\n        const\n            me = this,\n            histogramData = me.getRecordHistogramData(eventData.record);\n\n        if (!Objects.isPromise(histogramData)) {\n            const data = histogramData ? me.extractHistogramDataArray(histogramData, eventData.record) : [];\n\n            // if ticks widths are not monotonous\n            // we provide widths for each bar since in that case the histogram widget\n            // won't be able to calculate them properly\n            if (me.ticksWidth) {\n                for (let i = 0, { length } = data; i < length; i++) {\n                    data[i].width = me.ticksWidth[i];\n                }\n            }\n\n            const histogramConfig = Objects.merge(\n                // reset topValue by default to enable its auto-detection\n                { topValue : null },\n                me.initialConfig.histogramWidget,\n                {\n                    data,\n                    series : { ...me.series }\n                });\n\n            eventData = {\n                ...eventData,\n                histogramConfig,\n                histogramData,\n                histogramWidget : me.histogramWidget\n            };\n\n            /**\n             * Fires before the component renders a row.\n             *\n             * This event is recommended to use instead of generic {@link #event-beforeRenderRow} event since\n             * the component bails out of rendering rows for which histogram data is not ready yet\n             * (happens in case of async data collecting). The generic {@link #event-beforeRenderRow}\n             * is triggered in such cases too while this event is triggered only when the data is ready and the\n             * row is actually about to be rendered.\n             *\n             * Use a listener to adjust histograms rendering dynamically for individual rows:\n             *\n             * ```javascript\n             * new TimelineHistogram({\n             *     ...\n             *     listeners : {\n             *         beforeRenderHistogramRow({ record, histogramConfig }) {\n             *             // display an extra line for some specific record\n             *             if (record.id == 111) {\n             *                 histogramConfig.series.extraLine = {\n             *                     type  : 'outline',\n             *                     field : 'foo'\n             *                 };\n             *             }\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @param {Scheduler.view.TimelineHistogram} source The component instance\n             * @param {Core.data.Model} record Record the histogram data of which is ready.\n             * @param {HistogramConfig} histogramConfig Configuration object that will be applied to `histogramWidget`.\n             * @param {Core.widget.graph.Histogram} histogramWidget The underlying widget that is used to render a chart.\n             * @event beforeRenderHistogramRow\n             */\n            me.trigger('beforeRenderHistogramRow', eventData);\n\n            // We are going to use eventData as stored renderData\n            // so sanitize it from unwanted properties\n            delete eventData.eventName;\n            delete eventData.source;\n            delete eventData.type;\n            delete eventData.oldId;\n            delete eventData.row;\n            delete eventData.recordIndex;\n\n            me._recordRenderData = me.processRecordRenderData(eventData);\n        }\n\n        super.beforeRenderRow(...arguments);\n    }\n\n    applyHistogramWidgetConfig(histogramWidget = this.histogramWidget, histogramConfig) {\n        // reset some parameters (topValue and series) to force recalculations\n        // and apply new configuration after\n        Object.assign(histogramWidget, histogramWidgetCleanState, histogramConfig);\n    }\n\n    /**\n     * Renders a histogram for a row.\n     * The method applies passed data to the underlying {@link #property-histogramWidget} component.\n     * Then the component renders charts and the method injects them into the corresponding column cell.\n     * @param {HistogramRenderData} renderData Render data\n     * @internal\n     */\n    renderRecordHistogram(renderData) {\n        const\n            me = this,\n            { histogramData, cellElement } = renderData;\n\n        // reset the cell for rows not having histogram data\n        if (!histogramData) {\n            cellElement.innerHTML = '';\n            return;\n        }\n\n        /**\n         * Fires before the component renders a histogram in a cell.\n         *\n         * @param {Scheduler.view.TimelineHistogram} source The component instance\n         * @param {Core.data.Model} record Record the histogram data of which is ready.\n         * @param {HistogramConfig} histogramConfig Configuration object that will be applied to `histogramWidget`.\n         * @param {Core.widget.graph.Histogram} histogramWidget The underlying widget that is used to render a chart.\n         * @event beforeRenderRecordHistogram\n         */\n        me.trigger('beforeRenderRecordHistogram', renderData);\n\n        // sanitize renderData from unwanted properties\n        delete renderData.eventName;\n        delete renderData.type;\n        delete renderData.source;\n\n        const histogramWidget = renderData.histogramWidget || me.histogramWidget;\n\n        me.applyHistogramWidgetConfig(histogramWidget, renderData.histogramConfig);\n\n        histogramWidget.refresh({\n            // tell histogram we want it to pass renderData as an extra argument in nested calls of getBarText and\n            // other configured hooks\n            args : [renderData]\n        });\n\n        const histogramCloneElement = histogramWidget.element.cloneNode(true);\n        histogramCloneElement.removeAttribute('id');\n        histogramCloneElement.classList.remove('b-hide-offscreen');\n\n        cellElement.innerHTML = '';\n        cellElement.appendChild(histogramCloneElement);\n    }\n\n    /**\n     * TimeAxis column renderer used by this view to render row histograms.\n     * It first calls {@link #function-getRecordHistogramData} method to retrieve\n     * the histogram data for the renderer record.\n     * If the record data is ready the method renders the record histogram.\n     * And in case the method returns a `Promise` the renderer just\n     * schedules the record refresh for later and exits.\n     *\n     * @param {HistogramRenderData} renderData Object containing renderer parameters.\n     * @internal\n     */\n    histogramRenderer(renderData) {\n        const\n            me            = this,\n            histogramData = renderData.histogramData || me.getRecordHistogramData(renderData.record);\n\n        // If the data is ready we just render a histogram\n        // Otherwise we render nothing and the rendering will happen once the data is ready\n        // (which is signalized by histogramDataCacheSet event)\n\n        if (!Objects.isPromise(histogramData)) {\n            Object.assign(renderData, me._recordRenderData);\n\n            return me.renderRecordHistogram(...arguments);\n        }\n\n        return '';\n    }\n\n    /**\n     * Group feature hook triggered by the feature to render group headers\n     * @param {*} renderData\n     * @internal\n     */\n    buildGroupHeader(renderData) {\n        if (renderData.column === this.timeAxisColumn) {\n            return this.histogramRenderer(renderData);\n        }\n\n        return this.features.group.buildGroupHeader(renderData);\n    }\n\n    //endregion\n\n    get widgetClass() {}\n\n}\n\nTimelineHistogramBase.initClass();\n","import ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\nimport TimelineHistogramBase from '../TimelineHistogramBase.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineHistogramGrouping\n */\n\n/**\n * Mixin for {@link Scheduler/view/TimelineHistogram} that provides record grouping support.\n * The class implements API to work with groups and their members and allows to rollup group members data\n * to their parents.\n *\n * The _groups_ here are either group headers built with the {@link Grid/feature/Group} feature or\n * parent nodes built with the {@link Grid/feature/TreeGroup} feature.\n *\n * ## Parent histogram data aggregating\n *\n * The mixin provides a {@link #config-aggregateHistogramDataForGroups} config which enables automatically rolling up\n * child records histogram data to their parents. By default all registered {@link #config-series}' values are\n * just summed up on parents level, but that can be changed by providing `aggregate`\n * config to {@link #config-series}:\n *\n * ```javascript\n * new TimelineHistogram({\n *     series : {\n *         salary : {\n *            type : 'bar',\n *            // show maximum value on the parent level\n *            aggregate : 'max'\n *         }\n *     },\n *     ...\n * })\n * ```\n *\n * Here is the list of supported `aggregate` values:\n *\n * - `sum` or `add` - sum of values in the group (default)\n * - `min` - minimum value in the group\n * - `max` - maximum value in the group\n * - `count` - number of child records in the group\n * - `avg` - average of the child values in the group\n *\n * There are a few hooks allowing customization of the rolling up process:\n * {@link #config-aggregateDataEntry}, {@link #config-getDataEntryForAggregating} and\n * {@link #config-initAggregatedDataEntry}.\n *\n * @extends Scheduler/view/TimelineHistogramBase\n * @mixin\n */\nexport default Target => class TimelineHistogramGrouping extends (Target || TimelineHistogramBase) {\n\n    static $name = 'TimelineHistogramGrouping';\n\n    //region Configs\n\n    static configurable = {\n        /**\n         * When `true` the component will automatically calculate data for group records\n         * based on the groups members data by calling {@link #function-getGroupRecordHistogramData} method.\n         * @config {Boolean}\n         * @category Parent histogram data collecting\n         * @default\n         */\n        aggregateHistogramDataForGroups : true,\n\n        /**\n         * A function used for aggregating child records histogram data entries to their parent entry.\n         *\n         * It's called for each child entry and is meant to apply the child entry values to the\n         * target parent entry (provided in `aggregated` parameter).\n         * The function must return the resulting aggregated entry that will be passed as `aggregated`\n         * parameter to the next __aggregating__ step.\n         *\n         * Should be provided as a function, or name of a function in the ownership hierarchy which may be called.\n         * @config {Function|String} aggregateDataEntry\n         * @param {Object} aggregateDataEntry.aggregated Target parent data entry to aggregate the entry into.\n         * @param {Object} aggregateDataEntry.entry Current entry to aggregate into `aggregated`.\n         * @param {Number} aggregateDataEntry.arrayIndex Index of current array (index of the record among other\n         * records being aggregated).\n         * @param {Object[]} aggregateDataEntry.entryIndex Index of `entry` in the current array.\n         * @returns {Object} Return value becomes the value of the `aggregated` parameter on the next\n         * invocation of this function.\n         * @category Parent histogram data collecting\n         * @default\n         */\n        aggregateDataEntry : null,\n\n        /**\n         * Function that extracts a record histogram data entry for aggregating.\n         * By default it returns the entry as is. Override the function if you need a more complex way\n         * to retrieve the value for aggregating.\n         *\n         * Should be provided as a function, or name of a function in the ownership hierarchy which may be called.\n         * @config {Function|String} getDataEntryForAggregating\n         * @param {Object} getDataEntryForAggregating.entry Current data entry.\n         * @returns {Object} Entry to aggregate\n         * @category Parent histogram data collecting\n         * @default\n         */\n        getDataEntryForAggregating : null,\n\n        /**\n         * A function that initializes a target group record entry.\n         *\n         * Should be provided as a function, or name of a function in the ownership hierarchy which may be called.\n         * @config {Function|String} initAggregatedDataEntry\n         * @returns {Object} Target aggregated entry\n         * @category Parent histogram data collecting\n         * @default\n         */\n        initAggregatedDataEntry : null,\n\n        aggregateFunctions : {\n            sum : {\n                aliases : ['add'],\n                entry(seriesId, acc, entry) {\n                    acc[seriesId] = (acc[seriesId] || 0) + entry[seriesId];\n\n                    return acc;\n                }\n            },\n            min : {\n                entry(seriesId, acc, entry) {\n                    const entryValue = entry[seriesId];\n\n                    if (entryValue < (acc[seriesId] || Number.MAX_VALUE)) acc[seriesId] = entryValue;\n\n                    return acc;\n                }\n            },\n            max : {\n                entry(seriesId, acc, entry) {\n                    const entryValue = entry[seriesId];\n\n                    if (entryValue > (acc[seriesId] || Number.MIN_VALUE)) acc[seriesId] = entryValue;\n\n                    return acc;\n                }\n            },\n            count : {\n                init(seriesId, entry, entryIndex, aggregationContext) {\n                    entry[seriesId] = aggregationContext.arrays.length;\n                }\n            },\n            avg : {\n                entry(seriesId, acc, entry) {\n                    acc[seriesId] = (acc[seriesId] || 0) + entry[seriesId];\n\n                    return acc;\n                },\n                finalize(seriesId, data, recordsData, records, aggregationContext) {\n                    const cnt = aggregationContext.arrays.length;\n\n                    data.forEach(entry => entry[seriesId] /= cnt);\n                }\n            }\n        }\n    };\n\n    afterConfigure() {\n        const me = this;\n\n        me.internalAggregateDataEntry = me.internalAggregateDataEntry.bind(this);\n        me.internalInitAggregatedDataEntry = me.internalInitAggregatedDataEntry.bind(this);\n\n        super.afterConfigure();\n\n        if (me.features.treeGroup) {\n            me.features.treeGroup.ion({\n                // reset groups cache on store grouping change\n                beforeDataLoad : me.onTreeGroupBeforeDataLoad,\n                thisObj        : me\n            });\n        }\n    }\n\n    updateAggregateFunctions(value) {\n        for (const [id, fn] of Object.entries(value)) {\n            fn.id = id;\n            if (fn.aliases) {\n                for (const alias of fn.aliases) {\n                    value[alias] = fn;\n                }\n            }\n        }\n    }\n\n    updateStore(store) {\n        super.updateStore(...arguments);\n\n        this.detachListeners('store');\n\n        if (store) {\n            store.ion({\n                name    : 'store',\n                // reset groups cache on store grouping change\n                group   : this.onStoreGroup,\n                thisObj : this\n            });\n        }\n    }\n\n    changeAggregateDataEntry(fn) {\n        return this.bindCallback(fn);\n    }\n\n    changeGetDataEntryForAggregating(fn) {\n        return this.bindCallback(fn);\n    }\n\n    changeInitAggregatedDataEntry(fn) {\n        return this.bindCallback(fn);\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    onHistogramDataCacheSet({ record, data }) {\n        // schedule record refresh for later\n        super.onHistogramDataCacheSet(...arguments);\n\n        if (this.aggregateHistogramDataForGroups) {\n            this.scheduleRecordParentsRefresh(record);\n        }\n    }\n\n    onTreeGroupBeforeDataLoad() {\n        if (this.aggregateHistogramDataForGroups) {\n            // reset groups cache on store grouping change\n            this.resetGeneratedRecordsHistogramDataCache();\n        }\n    }\n\n    onStoreGroup() {\n        if (this.aggregateHistogramDataForGroups) {\n            // reset groups cache on store grouping change\n            this.resetGeneratedRecordsHistogramDataCache();\n        }\n    }\n\n    //endregion\n\n    // Override getRecordHistogramData to support data aggregating for parents\n    getRecordHistogramData(record, aggregationContext) {\n        const me = this;\n\n        let result;\n\n        // If that's a group record and records aggregating is enabled\n        // collect the aggregated data based on children\n        if (me.aggregateHistogramDataForGroups && me.isGroupRecord(record)) {\n\n            result = me.collectingDataFor.get(record) || me.getHistogramDataCache(record);\n\n            if (!result && !me.hasHistogramDataCache(record)) {\n                result = me.getGroupRecordHistogramData(record, aggregationContext);\n\n                result = me.finalizeDataRetrieving(record, result);\n            }\n        }\n        else {\n            result = super.getRecordHistogramData(...arguments);\n        }\n\n        return result;\n    }\n\n    //region ArrayHelper.aggregate default callbacks\n\n    internalAggregateDataEntry(acc, ...args) {\n        const { aggregateFunctions } = this;\n\n        // call series aggregate functions\n        for (const { id, aggregate = 'sum' } of Object.values(this.series)) {\n            let fn;\n            if (aggregate !== false && ((fn = aggregateFunctions[aggregate].entry))) {\n                acc = fn(id, acc, ...args);\n            }\n        }\n\n        return this.aggregateDataEntry ? this.aggregateDataEntry(acc, ...args) : acc;\n    }\n\n    internalInitAggregatedDataEntry() {\n        const\n            entry = this.initAggregatedDataEntry ? this.initAggregatedDataEntry(...arguments) : {},\n            { aggregateFunctions } = this;\n\n        // call series aggregate functions\n        for (const { id, aggregate = 'sum' } of Object.values(this.series)) {\n            const fn = aggregateFunctions[aggregate].init;\n            if (fn && aggregate !== false) {\n                fn(id, entry, ...arguments);\n            }\n        }\n\n        return entry;\n    }\n\n    //endregion\n\n    //region Public methods\n\n    /**\n     * Resets generated records (parents and links) data cache\n     */\n    resetGeneratedRecordsHistogramDataCache() {\n        const { store } = this;\n\n        for (const record of this.getHistogramDataCache().keys()) {\n            // clear cache for generated parents and links no longer in the store\n            if (record.isGroupHeader || record.generatedParent || (record.isLinked && !store.includes(record))) {\n                this.clearHistogramDataCache(record);\n            }\n        }\n    }\n\n    setHistogramDataCache(record, data) {\n        super.setHistogramDataCache(record, data);\n\n        // If that's a link let's update the original record cache too\n        if (record.isLinked) {\n            super.setHistogramDataCache(record.$original, data);\n        }\n        // if that's a record having links - update their caches too\n        else if (record.$links) {\n            const { store } = this;\n\n            for (const link of record.$links) {\n                // make sure the link belongs to this view store\n                if (store.includes(link)) {\n                    super.setHistogramDataCache(link, data);\n                }\n            }\n        }\n    }\n\n    // Override method to support links built by TreeGroup feature\n    // so for the links the method will retrieve original records cache\n    getHistogramDataCache(record) {\n        let result = super.getHistogramDataCache(record);\n\n        // if that's a link - try getting the original record cache\n        if (!result && record.isLinked) {\n            result = super.getHistogramDataCache(record.$original);\n        }\n\n        return result;\n    }\n\n    /**\n     * Aggregates the provided group record children histogram data.\n     * If some of the provided records data is not ready yet the method returns a `Promise`\n     * that's resolved once the data is ready and aggregated.\n     *\n     * ```javascript\n     * // get parent record aggregated histogram data\n     * const aggregatedData = await histogram.getGroupRecordHistogramData(record);\n     * ```\n     *\n     * @param {Core.data.Model} record Group record.\n     * @param {Object} [aggregationContext] Optional aggregation context object.\n     * When provided will be used as a shared object passed through while collecting the data.\n     * So can be used for some custom application purposes.\n     * @returns {Object[]|Promise} Either the provided group record histogram data or a `Promise` that\n     * returns the data when resolved.\n     * @category Parent histogram data collecting\n     */\n    getGroupRecordHistogramData(record, aggregationContext = {}) {\n        aggregationContext.parentRecord = record;\n\n        const result = this.aggregateRecordsHistogramData(this.getGroupChildren(record), aggregationContext);\n\n        return Objects.isPromise(result) ? result.then(res => res) : result;\n    }\n\n    /**\n     * Aggregates multiple records histogram data.\n     * If some of the provided records data is not ready yet the method returns a `Promise`\n     * that's resolved once the data is ready and aggregated.\n     *\n     * @param {Core.data.Model[]} records Records to aggregate data of.\n     * @param {Object} [aggregationContext] Optional aggregation context object.\n     * Can be used by to share some data between the aggregation steps.\n     * @returns {Object[]|Promise} Either the provided group record histogram data or a `Promise` that\n     * returns the data when resolved.\n     * @category Parent histogram data collecting\n     */\n    aggregateRecordsHistogramData(records, aggregationContext = {}) {\n        const\n            me = this,\n            recordsData = [],\n            { parentRecord } = aggregationContext;\n\n        let hasPromise = false;\n\n        // collect children data\n        for (const child of records) {\n            const childData = me.getRecordHistogramData(child, aggregationContext);\n\n            hasPromise = hasPromise || Objects.isPromise(childData);\n\n            childData && recordsData.push(childData);\n        }\n\n        // If some of children daa is not ready yet\n        if (hasPromise) {\n            // wait till all children data is ready\n            return Promise.all(recordsData).then(values => {\n                // re-apply parentRecord since it could get overridden in above getRecordHistogramData() calls\n                aggregationContext.parentRecord = parentRecord;\n\n                // filter out empty values\n                values = values.filter(x => x);\n\n                return me.aggregateHistogramData(values, records, aggregationContext);\n            });\n        }\n\n        // aggregate collected data\n        return me.aggregateHistogramData(recordsData, records, aggregationContext);\n    }\n\n    /**\n     * Indicates if the passed record represents a group header built by {@link Grid/feature/Group} feature\n     * or a group built by {@link Grid/feature/TreeGroup} feature.\n     *\n     * @param {Core.data.Model} record The view record\n     * @returns {Boolean} `true` if the record represents a group.\n     * @internal\n     */\n    isGroupRecord(record) {\n        return record.isGroupHeader || (this.isTreeGrouped && record.generatedParent);\n    }\n\n    /**\n     * For a record representing a group built by {@link Grid/feature/Group} or {@link Grid/feature/TreeGroup}\n     * feature returns the group members.\n     *\n     * @param {Core.data.Model} record A group record\n     * @returns {Core.data.Model[]} Records belonging to the group\n     * @internal\n     */\n    getGroupChildren(record) {\n        return record.groupChildren || record.children;\n    }\n\n    /**\n     * For a record belonging to a group built by {@link Grid/feature/Group} or {@link Grid/feature/TreeGroup}\n     * feature returns the group header or parent respectively.\n     *\n     * @param {Core.data.Model} record A member record\n     * @returns {Core.data.Model} The record group header or parent record\n     * @internal\n     */\n    getRecordParent(record) {\n        const instanceMeta = record.instanceMeta(this.store.id);\n\n        return instanceMeta?.groupParent || (this.isTreeGrouped && record.parent);\n    }\n\n    /**\n     * Schedules refresh of the provided record's parents.\n     * The method iterates up from the provided record parent to the root node\n     * and schedules the iterated node rows refresh.\n     * @param {Core.data.Model} record Record to refresh parent rows of.\n     * @param {Boolean} [clearCache=true] `true` to reset the scheduled records histogram data cache.\n     * @internal\n     */\n    scheduleRecordParentsRefresh(record, clearCache = true) {\n        const me = this;\n\n        let groupParent;\n\n        while ((groupParent = me.getRecordParent(record))) {\n            // reset group cache\n            clearCache && me.clearHistogramDataCache(groupParent);\n            // and scheduler its later refresh\n            me.scheduleRecordRefresh(groupParent);\n            // bubble up\n            record = groupParent;\n        }\n    }\n\n    //endregion\n\n    /**\n     * Aggregates collected child records data to its parent.\n     * The method is synchronous and is called when all the child records data is ready.\n     * Override the method if you need to preprocess or postprocess parent records aggregated data:\n     *\n     * ````javascript\n     * class MyHistogramView extends TimelineHistogram({\n     *\n     *     aggregateHistogramData(recordsData, records, aggregationContext) {\n     *         const result = super.aggregateHistogramData(recordsData, records, aggregationContext);\n     *\n     *         // postprocess averageSalary series values collected for a parent record\n     *         result.forEach(entry => {\n     *             entry.averageSalary = entry.averageSalary / records.length;\n     *         });\n     *\n     *         return result;\n     *     }\n     *\n     * });\n     * ```\n     *\n     * @param {Object[]} recordsData Child records histogram data.\n     * @param {Core.data.Model[]} records Child records.\n     * @param {Object} aggregationContext An object containing current shared info on the current aggregation process\n     */\n    aggregateHistogramData(recordsData, records, aggregationContext = {}) {\n        const\n            me = this,\n            { aggregateFunctions } = me;\n\n        aggregationContext.recordsData = recordsData;\n        aggregationContext.records     = records;\n\n        const arrays = recordsData.map((histogramData, index) => {\n            return me.extractHistogramDataArray(\n                histogramData,\n                records[index]\n            );\n        });\n\n        // summarize children histogram data\n        const result = ArrayHelper.aggregate(\n            arrays,\n            me.getDataEntryForAggregating || (entry => entry),\n            me.internalAggregateDataEntry,\n            me.internalInitAggregatedDataEntry,\n            aggregationContext\n        );\n\n        // call series aggregate functions\n        for (const { id, aggregate = 'sum' } of Object.values(me.series)) {\n            const fn = aggregateFunctions[aggregate].finalize;\n            if (fn && aggregate !== false) {\n                fn(id, result, ...arguments);\n            }\n        }\n\n        return result;\n    }\n\n    get widgetClass() {}\n\n};\n","import '../../column/ScaleColumn.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/view/mixin/TimelineHistogramScaleColumn\n */\n\n/**\n * Mixin of {@link Scheduler/view/TimelineHistogram} class that implements\n * {@link Scheduler/column/ScaleColumn} automatic injection and functioning.\n *\n * @mixin\n */\nexport default Target => class TimelineHistogramScaleColumn extends (Target) {\n\n    static $name = 'TimelineHistogramScaleColumn';\n\n    //region Config\n\n    static configurable = {\n\n        /**\n         * The locked grid scale column reference.\n         * @member {Scheduler.column.ScaleColumn} scaleColumn\n         * @readonly\n         * @category Scale column\n         */\n\n        /**\n         * An object with configuration for the {@link Scheduler/column/ScaleColumn}.\n         *\n         * Example:\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     scaleColumn : {\n         *         width : 50\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * Provide `null` to the config to get rid of the column completely:\n         *\n         * ```javascript\n         * new TimelineHistogram({\n         *     // do not add scale column\n         *     scaleColumn : null,\n         *     ...\n         * });\n         * ```\n         *\n         * @config {Object} scaleColumn\n         * @category Scale column\n         */\n        scaleColumn : {},\n\n        scalePoints : null,\n\n        scalePointsModelField : 'scalePoints',\n\n        calculateTopValueByScalePoints : true\n    };\n\n    updateScalePoints(scalePoints) {\n        const\n            me            = this,\n            topScalePoint = scalePoints[scalePoints.length - 1];\n\n        if (topScalePoint) {\n            me.scaleUnit = topScalePoint.unit;\n\n            // Applying new maximum value to the histogram.\n            me.histogramWidget.topValue = me.getTopValueByScalePoints(scalePoints);\n        }\n\n        // Applying new points to the scale column\n        if (me.scaleColumn) {\n            me.scaleColumn.scalePoints = scalePoints;\n        }\n    }\n\n    //endregion\n\n    //region Columns\n\n    changeColumns(columns, currentStore) {\n        const\n            me = this,\n            scaleColumn = me.getConfig('scaleColumn');\n\n        // No columns means destroy\n        if (columns && scaleColumn) {\n            const isArray = Array.isArray(columns);\n\n            let cols = columns;\n\n            if (!isArray) {\n                cols = columns.data;\n            }\n\n            let\n                scaleColumnIndex = cols?.length,\n                scaleColumnConfig = scaleColumn;\n\n            cols.some((col, index) => {\n                if (col.type === 'scale') {\n                    scaleColumnIndex  = index;\n                    scaleColumnConfig = ObjectHelper.assign(col, scaleColumnConfig);\n                    return true;\n                }\n            });\n\n            // We're going to mutate this array which we do not own, so copy it first.\n            cols = cols.slice();\n\n            // Fix up the scaleColumn config in place\n            cols[scaleColumnIndex] = {\n                type : 'scale',\n                ...scaleColumnConfig\n            };\n\n            if (isArray) {\n                columns = cols;\n            }\n            else {\n                columns.data = cols;\n            }\n        }\n\n        return super.changeColumns(columns, currentStore);\n    }\n\n    updateColumns(columns, was) {\n        super.updateColumns(columns, was);\n\n        // Extract the known columns by type. Sorting will have placed them into visual order.\n        if (columns) {\n            this._scaleColumn = this.columns.find(c => c.isScaleColumn);\n        }\n    }\n\n    onColumnsChanged({ action, changes, record : column, records }) {\n        const { scaleColumn, columns } = this;\n        // If someone replaces the column set (syncing leads to batch), ensure scale is always added\n        if (scaleColumn && (action === 'dataset' || action === 'batch') && !columns.includes(scaleColumn)) {\n            columns.add(scaleColumn, true);\n        }\n\n        super.onColumnsChanged(...arguments);\n    }\n\n    //endregion\n\n    //region Data processing\n\n    /**\n     * A hook to convert scale point values to histogram ones.\n     * In case they use different units.\n     *\n     * Override this method in a sub-class to implement your custom\n     * application specific conversion.\n     * @param {Number} value Scale point value\n     * @param {String} unit Scale point unit\n     * @internal\n     */\n    convertUnitsToHistogramValue(value, unit) {\n        return value;\n    }\n\n    /**\n     * A hook to convert histogram values to scale point ones.\n     * In case they use different units.\n     *\n     * Override this method in a sub-class to implement your custom\n     * application specific conversion.\n     * @param {Number} value Scale point value\n     * @param {String} unit Scale point unit\n     * @internal\n     */\n    convertHistogramValueToUnits(value, unit) {\n        return value;\n    }\n\n    extractHistogramDataArray(histogramData, record) {\n        return histogramData;\n    }\n\n    getTopValueByScalePoints(scalePoints) {\n        const\n            me              = this,\n            { scaleColumn } = me,\n            lastPoint       = scalePoints[scalePoints.length - 1],\n            { value, unit } = lastPoint;\n\n        let rawValue = value;\n\n        if (scaleColumn) {\n            // add padding to top value\n            rawValue *= 1 + (scaleColumn.scaleWidget.scaleMaxPadding || 0);\n        }\n\n        return me.convertUnitsToHistogramValue(rawValue, unit || me.scaleUnit);\n    }\n\n    processRecordRenderData(renderData) {\n        renderData = super.processRecordRenderData(...arguments);\n\n        if (this.scaleColumn) {\n            const\n                me = this,\n                { record, histogramData, histogramConfig = {} } = renderData;\n\n            let\n                topValue = me.initialConfig.histogramWidget?.topValue,\n                scalePoints = me.scalePoints || record.get(me.scalePointsModelField);\n\n            if (!topValue) {\n                // if no topValue provided but we have scalePoints\n                if (scalePoints && me.calculateTopValueByScalePoints) {\n                    // calculate topValue based on the max scale point\n                    topValue = me.getTopValueByScalePoints(scalePoints);\n                }\n\n                // if still no topValue\n                if (!topValue && histogramData) {\n                    const histogramWidget = renderData.histogramWidget || me.histogramWidget;\n\n                    ObjectHelper.assign(histogramWidget, histogramConfig);\n\n                    // get top value based on histogramData\n                    topValue = histogramWidget.getDataTopValue(histogramData);\n\n                    scalePoints = [{\n                        // <remove-on-release>\n                        // TODO append scale unit hook?\n                        // </remove-on-release>\n                        value : me.convertHistogramValueToUnits(topValue, me.scaleUnit),\n                        text  : me.convertHistogramValueToUnits(topValue, me.scaleUnit)\n                    }];\n\n                    topValue += me.scaleColumn.scaleWidget.scaleMaxPadding * topValue;\n                }\n\n                renderData.scaleWidgetConfig = { scalePoints };\n                renderData.histogramConfig = { ...histogramConfig, topValue };\n            }\n        }\n\n        return renderData;\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Group feature hook triggered by the feature to render group headers\n     * @param {Object} renderData\n     * @internal\n     */\n    buildGroupHeader(renderData) {\n        if (renderData.column === this.scaleColumn) {\n            return this.scaleColumn.renderer(renderData);\n        }\n\n        return super.buildGroupHeader(...arguments);\n    }\n\n    beforeRenderCell(renderData) {\n        if (this.scaleColumn && renderData.column === this.scaleColumn) {\n            renderData.histogramData = this.getRecordHistogramData(renderData.record);\n\n            // If data is read apply prepared render data\n            if (!ObjectHelper.isPromise(renderData.histogramData)) {\n                Object.assign(renderData, this._recordRenderData);\n            }\n        }\n\n        return super.beforeRenderCell(...arguments);\n    }\n\n    /**\n     * Renders record scale column content.\n     * @param {Core.data.Model} record Record to render scale for\n     * @param {Object} [renderData]\n     * @category Scale column\n     */\n    renderRecordScale(record, renderData) {\n        if (this.scaleColumn) {\n            const\n                row         = this.getRowFor(record),\n                cellElement = row?.getCell(this.scaleColumn.id);\n\n            if (cellElement) {\n                row.renderCell(cellElement);\n            }\n        }\n    }\n\n    get widgetClass() {}\n\n    //endregion\n};\n","import '../../Grid/column/TreeColumn.js';\nimport '../../Grid/feature/Tree.js';\nimport '../column/ScaleColumn.js';\nimport '../column/TimeAxisColumn.js';\nimport TimelineHistogramGrouping from './mixin/TimelineHistogramGrouping.js';\nimport '../feature/ColumnLines.js';\nimport '../feature/ScheduleTooltip.js';\nimport TimelineHistogramBase from './TimelineHistogramBase.js';\nimport TimelineHistogramScaleColumn from './mixin/TimelineHistogramScaleColumn.js';\n\n/**\n * @module Scheduler/view/TimelineHistogram\n */\n\n/**\n * This view displays histograms for the provided store records.\n *\n * A {@link Scheduler/column/ScaleColumn} is also added automatically.\n *\n * {@inlineexample Scheduler/view/TimelineHistogram.js}\n *\n * To create a standalone histogram, simply configure it with a {@link Core/data/Store} instance:\n *\n * ```javascript\n * const store = new Store({\n *     data : [\n *         {\n *             id            : 'r1',\n *             name          : 'Record 1',\n *             // data used to render a histogram for this record\n *             histogramData : [\n *                 { value1 : 200, value2 : 100 },\n *                 { value1 : 150, value2 : 50 },\n *                 { value1 : 175, value2 : 50 },\n *                 { value1 : 175, value2 : 75 }\n *             ]\n *         },\n *         {\n *             id            : 'r2',\n *             name          : 'Record 2',\n *             // data used to render a histogram for this record\n *             histogramData : [\n *                 { value1 : 100, value2 : 100 },\n *                 { value1 : 150, value2 : 125 },\n *                 { value1 : 175, value2 : 150 },\n *                 { value1 : 175, value2 : 75 }\n *             ]\n *         }\n *     ]\n * });\n *\n * const histogram = new TimelineHistogram({\n *     appendTo  : 'targetDiv',\n *     startDate : new Date(2022, 11, 26),\n *     endDate   : new Date(2022, 11, 30),\n *     store,\n *     // specify series displayed in the histogram\n *     series : {\n *         value1 : {\n *             type  : 'bar',\n *             field : 'value1'\n *         },\n *         value2 : {\n *             type  : 'bar',\n *             field : 'value2'\n *         }\n *     },\n *     columns : [\n *         {\n *             field : 'name',\n *             text  : 'Name'\n *         }\n *     ]\n * });\n * ```\n *\n * ## Providing histogram data\n *\n * There are two basic ways to provide histogram data:\n *\n * - the data can be provided statically in a record field configured as {@link #config-dataModelField}:\n *\n * ```javascript\n * const store = new Store({\n *     data : [\n *         {\n *             id   : 11,\n *             name : 'John Smith',\n *             // data used to render a histogram for this record\n *             hd   : [\n *                 { weight : 200, price : 100 },\n *                 { weight : 150, price : 105 },\n *                 { weight : 175, price : 90 },\n *                 { weight : 175, price : 95 }\n *             ]\n *         }\n *     ]\n * });\n *\n * const histogram = new TimelineHistogram({\n *     dataModelField : 'hd',\n *     series : {\n *         weight : {\n *             type : 'bar'\n *         },\n *         price : {\n *             type : 'outline'\n *         }\n *     },\n *     ...\n * });\n * ```\n * - the data can be collected dynamically with the provided {@link #config-getRecordData} function:\n *\n * ```javascript\n * const histogram = new TimelineHistogram({\n *     dataModelField : 'hd',\n *     series : {\n *         weight : {\n *             type : 'bar'\n *         },\n *         price : {\n *             type : 'outline'\n *         }\n *     },\n *     ...\n *     async getRecordData(record) {\n *         // we get record histogram data from the server\n *         const response = await fetch('https://some.url/to/get/data?' + new URLSearchParams({\n *             // pass the record identifier and the time span we need data for\n *             record    : record.id,\n *             startDate : DateHelper.format(this.startDate),\n *             endDate   : DateHelper.format(this.endDate),\n *         }));\n *         return response.json();\n *     }\n * });\n * ```\n *\n * Please check [\"Timeline histogram\" guide](#Scheduler/guides/timelinehistogram.md) for more details.\n *\n * @extends Scheduler/view/TimelineHistogramBase\n * @mixes Scheduler/view/mixin/TimelineHistogramGrouping\n * @mixes Scheduler/view/mixin/TimelineHistogramScaleColumn\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/ScheduleTooltip\n * @classtype timelinehistogram\n * @widget\n */\nexport default class TimelineHistogram extends TimelineHistogramBase.mixin(\n    TimelineHistogramGrouping,\n    TimelineHistogramScaleColumn\n) {\n\n    //region Config\n\n    static $name = 'TimelineHistogram';\n\n    static type = 'timelinehistogram';\n\n    /**\n     * Retrieves the histogram data for the provided record.\n     *\n     * The method first checks if there is cached data for the record and returns it if found.\n     * Otherwise it starts collecting data by calling {@link #config-getRecordData} (if provided)\n     * or by reading it from the {@link #config-dataModelField} record field.\n     *\n     * If the provided record represents a group and {@link #config-aggregateHistogramDataForGroups} is enabled\n     * then the group members data is calculated with a {@link #function-getGroupRecordHistogramData} method call.\n     *\n     * The method can be asynchronous depending on the provided {@link #config-getRecordData} function.\n     * If the function returns a `Promise` then the method will return a wrapping `Promise` in turn that will\n     * resolve with the collected histogram data.\n     *\n     * The method triggers the {@link #event-histogramDataCacheSet} event when a record data is ready.\n     *\n     * @param {Core.data.Model} record Record to retrieve the histogram data for.\n     * @param {Object} [aggregationContext] An optional object passed when the method is called when aggregating\n     * a group members histogram data.\n     *\n     * See {@link #function-getGroupRecordHistogramData} and {@link Core/helper/ArrayHelper#function-aggregate-static}\n     * for more details.\n     * @returns {Object|Promise} The histogram data for the provided record or a `Promise` that will provide the data\n     * when resolved.\n     * @function getRecordHistogramData\n     */\n\n}\n\nTimelineHistogram.initClass();\n"],"names":["ScaleColumn","Column","$name","type","isScaleColumn","fields","defaults","text","width","minWidth","field","cellCls","editor","sortable","groupable","filterable","alwaysClearCell","scalePoints","onDestroy","scaleWidget","destroy","applyValue","useProp","key","value","arguments","buildScaleWidget","me","Scale","owner","grid","appendTo","floatRoot","cls","align","monitorResize","Object","defineProperties","get","set","element","style","_width","height","_height","_scaleWidget","renderer","cellElement","scaleWidgetConfig","ObjectHelper","assign","rowHeight","refresh","scaleCloneElement","cloneNode","removeAttribute","classList","remove","innerHTML","appendChild","ColumnStore","registerColumnType","_$name","ResourceTimeRangesBase","InstancePlugin","mixin","AttachToProjectMixin","configurable","tabIndex","entityName","pluginConfig","chain","override","noFeatureElementsInAxis","timeAxis","client","needsRefresh","store","storage","values","some","t","isTimeSpanInAxis","doDisable","disable","isPainted","updateTabIndex","isConfiguring","getEventsToRender","resource","events","Error","onEventDataGenerated","renderData","eventRecord","iconCls","shouldInclude","isVertical","resourceRecord","columnWidth","resourceColumnWidth","top","fillSize","wrapperCls","rangeCls","timeRangeColor","eventContent","name","children","push","String","length","unshift","tag","className","toString","eventId","generateElementId","record","domId","resolveResourceTimeRangeRecord","rangeElement","_rangeElement$closest","closest","elementData","getElementFromResourceTimeRangeRecord","foregroundCanvas","syncIdMap","resolveResourceRecord","event","_this$resolveResource","overridden","target","onStoreChange","action","onInternalEventStoreChange","matchScheduleCell","cell","enableMouseEvents","getCell","isHorizontal","first","column","timeAxisColumn","handleRangeMouseEvent","domEvent","eventName","EventHelper","eventNameMap","StringHelper","capitalize","resourceTimeRangeRecord","trigger","feature","resourceStore","getById","resourceId","updateEnableMouseEvents","enable","_me$mouseEventsDetach","mouseEventsDetacher","call","attachMouseEvents","on","delegate","mousedown","mouseup","click","dblclick","contextmenu","mouseover","mouseout","thisObj","whenVisible","toggle","Boolean","featureClass","DependencyEditor","Popup","defaultConfig","items","draggable","handleSelector","axisLock","processWidgetConfig","widget","dependencyEditFeature","ref","showLagField","showDeleteButton","afterShow","args","deleteButton","widgetMap","hidden","isPartOfStore","onInternalKeyDown","DependencyEdit","autoClose","saveAndCloseOnEnter","triggerEvent","dependencyRecord","editorConfig","title","localeClass","closable","fromNameField","weight","label","toNameField","typeField","editable","valueField","displayField","localizeDisplayFields","buildItems","dialog","parent","keys","DependencyModel","Type","map","id","L","localeKey","lagField","allowNegative","bbar","foo","saveButton","color","cancelButton","construct","config","dependencyEdit","features","dependencies","clientListenersDetacher","ion","onActivateEditor","doDestroy","_this$editor","changeEditorConfig","autoShow","anchor","scrollAction","clippedBy","timeAxisSubGridElement","bodyContainer","constrainTo","globalThis","isValid","every","eachWidget","onBeforeSave","onAfterSave","updateRecord","lag","lagUnit","unit","magnitude","fromSide","toSide","cleanupProperties","onPopupKeyDown","tagName","toLowerCase","preventDefault","onSaveClick","save","afterSave","hide","onDeleteClick","deleteDependency","afterDelete","onCancelClick","afterCancel","internalShowEditor","getEditor","loadRecord","showPoint","lastPointerDownCoordinate","center","Rectangle","from","x","y","showBy","editDependency","readOnly","_me$saveButton","_me$deleteButton","_me$cancelButton","new","rootElement","internalListeners","keydown","console","warn","dependency","fromEvent","toEvent","Duration","dependencyStore","_client$project","stores","add","project","commitAsync","_client$project2","containsFocus","revertFocus","disabled","clientX","clientY","GridFeatureManager","registerFeature","ScheduleContext","Delayable","delayable","syncContextElement","context","$config","equal","c1","c2","index","tickParentIndex","tickStartDate","listeners","datachange","timeaxisviewmodelupdate","presetchange","timelineContextChange","schedulecontextmenu","useBackgroundCanvas","rowManager","rowheight","changeTriggerEvent","_element","DomHelper","createElement","backgroundCanvas","onTimelineContextChange","onScheduleContextGesture","onTimeAxisViewModelUpdate","source","timeAxisViewModel","_this$context","includes","tick","clearContext","updateContext","oldContext","enabled","row","rows","getRowFor","tickEndDate","currentOrientation","getTimeSpanRenderData","startDate","endDate","startDateMS","getTime","endDateMS","resourceWidth","display","setTranslateXY","left","callback","EventCopyPaste","CopyPasteBase","nameField","copyPasteAction","eventToStringFields","scheduler","eventClick","scheduleClick","projectChange","clearClipboard","_cellClickedContext","attachToEventStore","eventStore","_eventClickedContext","eventData","assignmentRecord","meta","isCut","onEventClick","onScheduleClick","isActionAvailable","_this$client$features","_this$client$focusedC","getSelection","cellEdit","isEditing","focusedCell","isSpecialRow","copy","copyEvents","cut","undefined","paste","pasteEvents","records","selectedAssignments","splitFrom","eventCopyPaste","assignmentRecords","slice","isEventModel","r","assignments","flat","filter","a","eventRecords","writeToClipboard","refreshWithTransition","_focusedEventOnCopy","beforeCopy","data","handleCutData","_me$cutData","cutData","assignmentStore","stringConverter","Date","DateHelper","format","dateFormat","join","setIsCut","forEach","assignment","date","_clipboardData$assign","$original","clipboardData","readFromClipboard","toFocus","pastedEvents","Set","pastedEventRecords","targetResourceRecord","targetDate","has","usesSingleAssignment","generateNewName","last","resources","newAssignmentRecord","constraintDate","detacher","renderEvent","navigateTo","scrollIntoView","beforePaste","reason","allowOverlap","pasteWouldResultInOverlap","isDateRangeAvailable","stringParser","modifiedRecords","setFromStringData","modelClass","populateEventMenu","copyEvent","icon","onItem","isAssignmentSelected","cutEvent","populateScheduleMenu","hasClipboardData","pasteEvent","count","originalName","getValue","counter","findRecord","EventDrag","DragBase","constrainDragToResource","constrainDragToTimeSlot","externalDropTargetSelector","validatorFn","validatorFnThisObj","unifiedDrag","snapToPosition","copyKey","copyMode","mode","capitalizedEventName","afterConstruct","changeMode","dragData","isRecurring","updateMode","setCopying","setMoving","eventBarCopies","el","isConnected","grabbedParent","retainElement","onAfterDragStart","handleKeyDownOrMove","keyEventDetacher","getRootElement","keyup","handleKeyUp","onDragReset","_this$keyEventDetache","onDrop","_this$dragData$eventB","getDraggableElement","drag","targetSelector","resolveEventRecord","eventElement","isElementDraggable","_client","matches","isDraggable","prevented","getTriggerParams","browserEvent","triggerBeforeEventDrag","eventType","triggerEventDrag","start","newResource","triggerDragStart","navigator","skipNextClick","triggerDragAbort","triggerDragAbortFinalized","triggerAfterDrop","valid","currentOverClient","needRefresh","initialAssignmentsState","find","i","_me$dragData$assignme","setTimeout","_this$copyKey","_this$copyKey2","specialKeyFromEventKey","isValidDrop","sourceRecord","draggedEntities","constrainDragToTimeline","checkDragValidity","_dragData$newResource","result","message","_scheduler$checkEvent","updateRecords","fromScheduler","toScheduler","copyKeyPressed","timeDiff","originalStartDate","droppedStartDate","adjustStartDate","externalDropTarget","timeSpanInAxis","durationMS","suspendAutoCommit","updateAssignments","resumeAutoCommit","isCopy","targetEventRecord","isCrossScheduler","fromAssignmentStore","fromEventStore","toAssignmentStore","toEventStore","fromResourceStore","toResourceStore","fromResource","toResource","useSingleAssignment","effectiveCopyMode","event1Date","eventsToAdd","eventsToRemove","assignmentsToAdd","assignmentsToRemove","eventsToCheck","eventsToBatch","resourcesInStore","getAllDataRecords","suspendRefresh","updated","updatedEvent","indexDiff","indexOf","constainDragToResource","isGrouped","draggedEvent","eventBar","eventBarEls","instanceMeta","hasTemporaryDragElement","dataset","transient","addedEvents","copiedAssignmentsMap","originalAssignment","draggedAssignment","isOccurrenceAssignment","splice","initialState","originalEventRecord","originalResourceRecord","newStartDate","keepEvent","newAssignment","createRecord","calendar","reassignedFrom","_newResource","newIndex","Math","max","min","getAt","getNext","getPrevious","draggedEventResourceIndex","isCrossResource","setData","shouldCopyEvent","endDateCached","isEvent","isOccurrence","ev","isEqual","isBatchUpdating","endBatch","shouldKeepStartDate","processEventDrop","relatedElements","entries","originalId","cloneRecord","originalDraggedEvent","inTimeAxis","isInTimeAxis","DomSync","removeChild","parentElement","isRoot","elRect","setTopLeft","addChild","processCrossSchedulerEventDrop","added","beginBatch","Promise","all","resumeRefresh","lastDomConfig","selectedEvents","getProductDragContext","previousResolvedResource","previousTargetEventRecord","resolveResource","isOverNewResource","dirty","proxyElements","getMinimalDragData","info","getElementFromContext","resolveAssignmentRecord","startEvent","ctrlKey","multiEventSelect","apply","getRelatedRecords","setupProductDragData","_dateConstraints","dateConstraints","_me$getDateConstraint","getDateConstraints","constrainRectangle","getConstrainingRectangle","eventRegion","setupConstraints","snapPixelAmount","eventBarEl","getElementFromAssignmentRecord","addTemporaryDragElement","createProxy","_scheduler$getDateCon","externalDateConstraints","minDate","maxDate","end","dateRange","getScheduleRegion","getDragData","selectedRecord","getCoordinate","coord","milestoneLayoutMode","isMilestone","milestoneAlign","offsetWidth","offsetHeight","dragProxy","pageRect","localRect","lx","ly","eventTarget","getMouseMoveEventTarget","contains","getRowAt","dataIndex","querySelector","roundDate","snapRelativeToEventStartDate","constrainStartDate","getRecordElement","getProxyElement","isDragging","EventDragCreate","DragCreateBase","lockLayout","updateLockLayout","lock","dragActiveCls","handleBeforeDragCreate","isAvailable","isWorkingTime","isSchedulerPro","ignoreResourceCalendar","mousedownDate","dragStart","_client$onEventCreate","enableEventAnimations","enableTransactionalFeatures","createEventRecord","resourceRecords","diff","durationUnit","isCreating","isDragCreating","taskEdit","doCancel","captureStm","assignEventToResource","excludeFromLayout","onEventCreated","addAsync","then","refreshRows","itemElement","getElementFromEventRecord","isInView","scrollable","animate","edgeOffset","barMargin","checkValidity","dragging","createValidatorFn","isRowEmpty","getEventsForResource","triggerBeforeFinalize","dimension","weekStartDay","draggingEnd","eventConfig","fieldMap","defaultValue","floor","resolution","ceil","isGanttProjectMixin","constraintType","internalUpdateRecord","hasEventEditor","finalizeDragCreate","transferred","freeStm","hasStmCapture","cancelDragCreate","getTipHtml","html","tip","tooNarrow","onAborted","_this$store$unassignE","_this$store","unassignEventFromResource","zeroOffset","depOffset","EventTooltip","TooltipBase","template","xss","startClockHtml","endClockHtml","monitorRecordUpdate","onPaint","firstPaint","tooltip","beforeAlign","offset","edgeAligned","parseAlign","depTerminalOffset","zeroMargins","StickyEvents","toUpdate","scroll","horizontalScroll","prio","stickyContents","syncEventContentPosition","updateStyles","onSchedulerScroll","verticalSyncAllEventsContentPosition","onHorizontalScroll","subGrid","timeAxisSubGrid","contentEl","applyStyle","clear","resourceMap","eventsData","elementConfig","isResourceTimeRange","size","duringGeneration","useEventBuffer","bufferAfterWidth","bufferBeforeWidth","scrollPosition","wrapperEl","getChild","parseStyle","contentSize","contentWidth","justify","parentNode","getStyleValue","c","eventStart","eventEnd","edgeSizes","getEventContentMargins","maxOffset","Number","MAX_SAFE_INTEGER","transform","stuck","getEdgeSize","TimeRanges","AbstractTimeRanges","TimeSpan","currentTimeLineUpdateInterval","currentDateFormat","showCurrentTimeLine","_this$storeDetacher","storeDetacher","timeRanges","_timeRanges","recurringEvents","flatMap","timeSpan","getOccurrencesForDateRange","currentTimeLine","attachToProject","_me$projectTimeZoneCh","projectTimeZoneChangeDetacher","_me$client$project","timeZoneChange","updateCurrentTimeLine","initCurrentTimeLine","currentTimeInterval","setInterval","_me$project","timeZone","setLocalDate","originalData","renderRanges","hideCurrentTimeLine","clearInterval","updateShowCurrentTimeLine","show","populateTimeAxisHeaderMenu","checked","onToggle","attachToStore","change","timeRangeStore","updateStore","_timeRangesExposed","attachToTimeRangeStore","resolveTimeRangeRecord","baseSelector","isVisible","runWithTransition","refreshSuspended","onDragStart","rangeBodyEl","getBodyElementByRecord","originRangeX","getTranslateX","originRangeY","getTranslateY","showTip","onInvalidDrop","box","newStart","getDateFromCoordinate","getStart","rtl","wasModified","setStartDate","destroyTip","onResizeStart","onResizeDrag","startPos","endPos","getEnd","edge","setTranslateY","newY","newHeight","setTranslateX","newX","newWidth","updateDateIndicator","onResize","isStart","newEnd","setEndDate","onInvalidResize","resize","reset","Target","DelayedRecordsRendering","Base","scheduledRecordsRefreshTimeout","properties","recordsToRefresh","beforeRenderRow","_this$recordIsReadyFo","recordIsReadyForRendering","unscheduleRecordRefresh","cleanupScheduledRecord","getRowById","delete","renderScheduledRecords","renderRows","scheduleRecordRefresh","clearRecords","ArrayHelper","asArray","scheduledRecordsRefreshTimer","clearTimeout","fn","delay","cancelOutstanding","widgetClass","TimelineHistogramRendering","scrollBuffer","init","updateFromHorizontalScroll","scrollX","totalSize","returnEnd","maxX","abs","round","getDateFromCoord","ignoreRTL","_viewPresetChanging","_visibleDateRange","startMS","endMS","viewportCoords","right","range","timeView","onVisibleDateRangeChange","_timeAxisStartDate","_timeAxisEndDate","onViewportResize","visibleDateRange","translateToPageCoordinate","getBoundingClientRect","scrollLeft","translateToScheduleCoordinate","getDateFromXY","xy","roundingMethod","local","allowOutOfRange","getRtlX","getDateFromPosition","histogramWidgetCleanState","series","topValue","emptyFn","TimelineHistogramBase","TimelineBase","timeAxisColumnCellCls","showBarTip","barTooltip","barTooltipClass","Tooltip","dataModelField","getRecordData","hardRefreshOnTimeAxisReconfigure","getRectClass","getOutlineClass","getBarTip","barTooltipTemplate","getBarText","getRectConfig","getBarTextRenderData","histogramWidgetClass","Histogram","histogramWidget","omitZeroHeightBars","fixedRowHeight","histogramDataByRecord","Map","collectingDataFor","updateGetRecordData","_getRecordData","resolveCallback","updateHardRefreshOnTimeAxisReconfigure","endReconfigure","detachListeners","scheduleRefreshRows","createOnFrame","beforeRowHeight","_this$_histogramWidge","clearHistogramDataCache","_histogramWidget","resolveTimeSpanRecord","getScheduleMouseEventParams","cellData","_currentOrientation","updateSeries","_series","getAsyncEventSuffixForStore","isAbstractPartOfProjectStoreMixin","getRowHeight","updateGetBarTip","changeBarTooltip","oldTooltip","isTooltip","forElement","forSelector","hoverDelay","trackMouse","getHtml","bind","activeTarget","parseInt","getRecordFromElement","histogramData","getRecordHistogramData","datum","extractHistogramDataArray","collectTicksWidth","ticks","prevDuration","tickDurations","totalDuration","isMonotonous","duration","ticksWidth","changeHistogramWidget","isHistogram","_me$timeAxisColumn","getRectClassDefault","getBarTextDefault","rectConfig","updateShowBarTip","columns","isDestroying","histogramRenderer","onHistogramDataCacheSet","onTimeAxisEndReconfigure","onStoreUpdateRecord","changes","onStoreRemove","onBeforeRowHeight","_timeAxisColumn","onElementResize","processRecordRenderData","setHistogramDataCache","getHistogramDataCache","hasHistogramDataCache","finalizeDataRetrievingInternal","finalizeDataRetrieving","Objects","isPromise","handler","histogramConfig","merge","initialConfig","oldId","recordIndex","_recordRenderData","applyHistogramWidgetConfig","renderRecordHistogram","histogramCloneElement","buildGroupHeader","group","initClass","TimelineHistogramGrouping","aggregateHistogramDataForGroups","aggregateDataEntry","getDataEntryForAggregating","initAggregatedDataEntry","aggregateFunctions","sum","aliases","entry","seriesId","acc","entryValue","MAX_VALUE","MIN_VALUE","entryIndex","aggregationContext","arrays","avg","finalize","recordsData","cnt","afterConfigure","internalAggregateDataEntry","internalInitAggregatedDataEntry","treeGroup","beforeDataLoad","onTreeGroupBeforeDataLoad","updateAggregateFunctions","alias","onStoreGroup","changeAggregateDataEntry","bindCallback","changeGetDataEntryForAggregating","changeInitAggregatedDataEntry","scheduleRecordParentsRefresh","resetGeneratedRecordsHistogramDataCache","isGroupRecord","getGroupRecordHistogramData","aggregate","isGroupHeader","generatedParent","isLinked","$links","link","parentRecord","aggregateRecordsHistogramData","getGroupChildren","res","hasPromise","child","childData","aggregateHistogramData","isTreeGrouped","groupChildren","getRecordParent","groupParent","clearCache","TimelineHistogramScaleColumn","scaleColumn","scalePointsModelField","calculateTopValueByScalePoints","updateScalePoints","topScalePoint","scaleUnit","getTopValueByScalePoints","changeColumns","currentStore","getConfig","_cols","isArray","Array","cols","scaleColumnIndex","scaleColumnConfig","col","updateColumns","was","_scaleColumn","onColumnsChanged","convertUnitsToHistogramValue","convertHistogramValueToUnits","lastPoint","rawValue","scaleMaxPadding","_me$initialConfig$his","getDataTopValue","beforeRenderCell","renderRecordScale","renderCell","TimelineHistogram"],"mappings":"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CH;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY;AACZ;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACYga,MAAAA,uBAAuB,EAAG,KAAK;AAC/B;AACZ;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACYC,MAAAA,uBAAuB,EAAG,KAAK;AAC/B;AACZ;AACA;AACA;AACYC,MAAAA,0BAA0B,EAAG,IAAI;AACjC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAGA,CAACrK,OAAO,EAAEhM,KAAK,KAAK,EAAE;AACpC;AACZ;AACA;AACA;AACYsW,MAAAA,kBAAkB,EAAG,IAAI;AACzB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,WAAW,EAAG,IAAI;AAClB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,cAAc,EAAG,IAAI;AACrB;AACZ;AACA;AACA;AACA;AACA;AACYC,MAAAA,OAAO,EAAG,OAAO;AACjB;AACZ;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,QAAQ,EAAG,MAAM;AACjB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,IAAI,EAAG,MAAM;AACbC,MAAAA,oBAAoB,EAAG,IAAA;KAC1B,CAAA;AACL,GAAA;AACAC,EAAAA,cAAcA,GAAG;IACb,IAAI,CAACD,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,IAAI,IAAI,CAAC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,IAAI,EAAE,WAAW,CAAC,CAAA;AAChGtK,kBAAkB,CAACC,eAAe,CAACqK,SAAS,EAAE,KAAK,EAAE,mBAAmB,CAAC;;ACn6CzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMyP,eAAe,SAASC,cAAc,CAAC;AACxD;EACA,OAAOztB,KAAK,GAAG,iBAAiB,CAAA;AAChC,EAAA,OAAOiE,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQma,WAAW,EAAGA,MAAM,IAAI;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQsP,IAAAA,UAAU,EAAG,KAAA;GAChB,CAAA;AACD;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;EACA,IAAIpW,SAASA,GAAG;IACZ,OAAO,IAAI,CAAC7S,MAAM,CAAA;AACtB,GAAA;EACA,IAAIE,KAAKA,GAAG;AACR,IAAA,OAAO,IAAI,CAACF,MAAM,CAACoT,UAAU,CAAA;AACjC,GAAA;EACA,IAAI5E,OAAOA,GAAG;AACV,IAAA,OAAO,IAAI,CAACxO,MAAM,CAACwO,OAAO,CAAA;AAC9B,GAAA;EACA0a,gB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GAAG1D,SAAS,CAAC,CAAA;AAC7B,IAAA,IAAI,CAAC,IAAI,CAAC8D,aAAa,EAAE;AACrB,MAAA,IAAI,CAACZ,MAAM,CAACwV,qBAAqB,EAAE,CAAA;AACvC,KAAA;AACJ,GAAA;AACJ,CAAA;AACA+Y,YAAY,CAACpvB,MAAM,GAAG,cAAc,CAAA;AAAE6P,kBAAkB,CAACC,eAAe,CAACsf,YAAY,EAAE,IAAI,EAAE,WAAW,CAAC,CAAA;AACzGvf,kBAAkB,CAACC,eAAe,CAACsf,YAAY,EAAE,KAAK,EAAE,mBAAmB,CAAC;;AC7K5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM6C,UAAU,SAASC,kBAAkB,CAAC/xB,KAAK,CAACC,oBAAoB,CAAC,CAAC;AACnF;EACA,WAAWhE,KAAKA,GAAG;AACf,IAAA,OAAO,YAAY,CAAA;AACvB,GAAA;EACA,WAAWiL,aAAaA,GAAG;IACvB,OAAO;AACHtG,MAAAA,KAAK,EAAG,IAAA;KACX,CAAA;AACL,GAAA;AACA,EAAA,OAAOV,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACQU,IAAAA,KAAK,EAAG;AACJqY,MAAAA,UAAU,EAAG+Y,QAAAA;KAChB;AACD;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,6BAA6B,EAAG,KAAK;AACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,iBAAiB,EAAG,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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQT,IAAAA,MAAM,EAAG,IAAI;AACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQU,IAAAA,cAAc,EAAG,eAAe;AAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,aAAa,EAAG,IAAI;AACpB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,gCAAgC,EAAG,IAAI;AACvC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQC,eAAeA,CAACd,MAAM,EAAE;AACpB,MAAA,OAAO,EAAE,CAAA;KACZ;AACDhtB,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ+tB,IAAAA,SAAS,EAAG,IAAI;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,kBAAkB,EAAG,IAAI;AACzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,IAAI;AACjBC,IAAAA,aAAa,EAAG,IAAI;AACpBC,IAAAA,oBA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"}