{"version":3,"file":"Tree.js","sources":["../../../../Grid/lib/Grid/column/NumberColumn.js","../../../../Grid/lib/Grid/column/TreeColumn.js","../../../../Grid/lib/Grid/feature/Tree.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/column/NumberColumn\n */\n\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency',\n *                currency : 'USD'\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classType number\n * @inlineexample Grid/column/NumberColumn.js\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n\n    static type = 'number';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = [\n        'format',\n\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n\n    static get defaults() {\n        return {\n            filterType : 'number',\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n\n        return formatter;\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n\n    /**\n     * Renderer that displays a formatted number in the cell. If you create a custom renderer, and want to include the\n     * formatted number you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type   : 'number',\n     *             text   : 'Total cost',\n     *             field  : 'totalCost',\n     *             format : {\n     *                 style    : 'currency',\n     *                 currency : 'USD'\n     *             },\n     *             renderer({ value }) {\n     *                  return `Total cost: ${this.defaultRenderer({ value })}`;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {String} Formatted number\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\n\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/column/TreeColumn\n */\n\nlet currentParentHasIcon = false;\n\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classType tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n\n    static $name = 'TreeColumn';\n\n    static type = 'tree';\n\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String|null} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String|null} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n             * Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n             * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current\n             * row. Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             * in case none is specified. Can be null in case of export\n             * @param {Number} [renderData.size.height] Set this to request a certain row height\n             * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n             * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during\n             * export.\n             * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n             * call. In which case an advanced renderer might need to take different actions.\n             * @config {Function} renderer\n             * @category Common\n             */\n            'renderer'\n        ];\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : {\n                    'b-tree-cell-inner' : 1\n                },\n                tag    : record.href ? 'a' : 'div',\n                href   : record.href,\n                target : record.target,\n                children\n            },\n            rowClasses  = {\n                'b-tree-parent-row'  : 0,\n                'b-tree-collapsed'   : 0,\n                'b-tree-expanded'    : 0,\n                'b-loading-children' : 0\n            };\n\n        let outputIsObject, iconCls, { value } = renderData,\n            renderingColumn = me;\n\n        const parentRenderer = grid.isTreeGrouped && !record.isLeaf && grid.features.treeGroup.parentRenderer;\n\n        if (me.originalRenderer || parentRenderer) {\n            let rendererHtml;\n\n            if (parentRenderer) {\n                if (record.field) {\n                    renderingColumn = grid.columns.get(record.field);\n                    value = renderingColumn.isWidgetColumn ? value\n                        : (renderingColumn.renderer || renderingColumn.defaultRenderer)?.call(\n                            renderingColumn,\n                            {\n                                ...renderData,\n                                column      : renderingColumn,\n                                value       : record.name,\n                                isTreeGroup : true\n                            }) ?? record.name;\n                }\n                rendererHtml = grid.features.treeGroup.parentRenderer({\n                    field  : record.field,\n                    value,\n                    column : renderingColumn,\n                    record : record.firstGroupChild,\n                    grid\n                });\n            }\n            else {\n                rendererHtml         = me.originalRenderer(renderData);\n            }\n\n            // Check if the cell content is going to be rendered by framework\n            const hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                cellContent : rendererHtml,\n                renderingColumn\n            });\n\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n\n        if (isExport) {\n            return value;\n        }\n\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n\n            rowClasses['b-tree-parent-row']  = 1;\n            rowClasses['b-tree-collapsed']   = isCollapsed;\n            rowClasses['b-tree-expanded']    = !isCollapsed;\n            rowClasses['b-loading-children'] = gridMeta.isLoadingChildren;\n\n            cellElement.classList.add('b-tree-parent-cell');\n\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            // <remove-on-release>\n            // TODO: Cleanup for reusing dom nodes should be done elsewhere, also cleanup selection\n            // </remove-on-release>\n            cellElement.classList.add('b-tree-leaf-cell');\n\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow) {\n            row.assignCls(rowClasses);\n\n            if (!record.isLeaf) {\n                row.setAttribute('aria-expanded', !isCollapsed);\n\n                if (isCollapsed) {\n                    row.removeAttribute('aria-owns');\n                }\n                else {\n                    for (const region in grid.subGrids) {\n                        const el = row.elements[region];\n\n                        // A branch node may be configured expanded, but yet have no children.\n                        // They may be added dynamically.\n                        DomHelper.setAttributes(el, {\n                            'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                        });\n                    }\n                }\n            }\n        }\n\n        // Array of DomConfigs\n        if (Array.isArray(value)) {\n            innerConfig.children = value;\n        }\n        // Single DomConfig\n        else if (outputIsObject) {\n            Object.assign(innerConfig, value);\n        }\n        // If we are encoding HTML, or there's no raw HTML, we can use the text property\n        // as the raw value, and DomSync will create a TextNode from that.\n        else if (renderingColumn.shouldHtmlEncode || !value.includes('<')) {\n            result.className['b-text-value'] = 1;\n            innerConfig.text = value;\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n\n        result.style = `padding-inline-start:${padding}em`;\n\n        return result;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n\n/**\n * @module Grid/feature/Tree\n */\n\nconst immediatePromise = Promise.resolve();\n\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                 | Action                   | Action description                                                   |\n * |----------------------|--------------------------|----------------------------------------------------------------------|\n * | `Space`              | *toggleCollapseByKey*    | When focus on a parent node, this expands or collapses it's children |\n * | `ArrowRight`         | *expandIfSingleColumn*   | Expands a focused parent node if grid consist of one column only     |\n * | `Shift`+`ArrowRight` | *expandByKey*            | Expands a focused parent node                                        |\n * | `ArrowLeft`          | *collapseIfSingleColumn* | Collapses a focused parent node if grid consist of one column only   |\n * | `Shift`+`ArrowLeft`  | *collapseByKey*          | Collapses a focused parent node                                      |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n\n    static $name = 'Tree';\n\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n\n        client.store && this.bindStore(client.store);\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n\n    get store() {\n        return this.client.store;\n    }\n\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n\n        return me._treeColumn;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n\n    //endregion\n\n    //region Expand & collapse\n\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @on-owner\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n\n        // Record generation is incremented to force React/Vue wrappers to recreate UI elements\n        record.generation++;\n\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n\n            if (row && record.ancestorsExpanded()) {\n                const cellElement = me.treeColumn && !me.treeColumn.subGrid.collapsed && row.getCell(me.treeColumn.id);\n\n                // Toggle cell's expanded/collapsed state\n                cellElement && row.renderCell(cellElement);\n            }\n\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     * @category Tree\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     * @category Tree\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.addCls('b-loading-children');\n    }\n\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     * @category Tree\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        // <remove-on-release>\n        // TODO: Some logic here and some in the store, keep in same place maybe\n        // </remove-on-release>\n        const\n            { client, store } = this,\n            promises          = [],\n            childRecords      = [];\n\n        client.trigger('beforeToggleAllNodes', { collapse });\n\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n\n            client.trigger('toggleAllNodes', { collapse });\n        });\n    }\n\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     * @category Tree\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     * @category Tree\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                = this,\n            { store, client } = me;\n\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n\n            return;\n        }\n\n        const record = store.getById(idOrRecord);\n\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n\n            client.suspendRefresh();\n\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false);\n                }\n            }\n\n            client.resumeRefresh?.();\n\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n\n        return false;\n    }\n\n    //endregion\n\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (record && focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\n\nTree.featureClass = 'b-tree';\n\nGridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],"names":["NumberColumn","Column","type","fieldType","fields","defaults","filterType","format","defaultEditor","name","max","min","step","largeStep","align","ObjectHelper","cleanupProperties","textAlign","formatter","me","_formatter","_lastFormat","NumberFormat","get","formatValue","value","unit","defaultRenderer","ColumnStore","registerColumnType","exposeProperties","_$name","currentParentHasIcon","TreeColumn","$name","tree","hideable","minWidth","defaultValue","constructor","config","store","arguments","shouldHtmlEncode","htmlEncode","setData","renderer","originalRenderer","treeRenderer","bind","renderData","grid","cellElement","row","record","isExport","gridMeta","instanceMeta","isCollapsed","isLeaf","collapsed","innerConfig","className","children","result","tag","href","target","rowClasses","outputIsObject","iconCls","renderingColumn","parentRenderer","isTreeGrouped","features","treeGroup","_grid$hasFrameworkRen","rendererHtml","field","_ref","columns","isWidgetColumn","call","column","isTreeGroup","firstGroupChild","hasFrameworkRenderer","cellContent","innerHTML","String","_record$children","isExpanded","expanderIconCls","expandIconCls","collapseIconCls","folderIconCls","collapsedFolderIconCls","expandedFolderIconCls","isLoadingChildren","classList","add","unshift","length","leafIconCls","splice","isRow","assignCls","setAttribute","removeAttribute","region","subGrids","_record$children2","_record$children3","el","elements","DomHelper","setAttributes","map","r","id","join","Array","isArray","Object","assign","includes","text","html","padding","childLevel","indentSize","style","getCurrentConfig","options","immediatePromise","Promise","resolve","Tree","InstancePlugin","mixin","Delayable","configurable","expandOnCellClick","keyMap","ArrowRight","ArrowLeft","pluginConfig","chain","construct","client","treeColumn","console","info","bindStore","doDisable","disable","Error","_treeColumn","find","isTreeColumn","detachListeners","ion","beforeLoadChildren","loadChildren","loadChildrenException","beforeToggleNode","thisObj","toggleCollapse","idOrRecord","collapse","rowManager","getById","meta","generation","getRowFor","ancestorsExpanded","subGrid","getCell","renderCell","isTogglingNode","element","requestAnimationFrame","remove","trigger","expand","onBeforeToggleNode","onBeforeLoadChildren","source","params","parent","modelClass","idField","addCls","onLoadChildren","removeCls","onLoadChildrenException","expandOrCollapseAll","topNode","rootNode","promises","childRecords","suspendEvents","traverse","push","resumeEvents","all","then","refreshRows","records","isCollapse","isCollapseAll","isExpand","isExpandAll","collapseAll","expandAll","expandTo","scrollIntoView","suspendRefresh","i","_me$expandTo","_client$resumeRefresh","resumeRefresh","refresh","hiddenByCollapse","_client$resumeRefresh2","_client$refreshRows","parents","isRoot","isDestroyed","scrollRowIntoView","onElementPointerUp","event","cellData","getCellDataFromEvent","clickedExpander","closest","isParent","onElementClick","preventDefault","toggleCollapseByKey","focusedCell","rowIndex","isActionable","expandIfSingleColumn","count","expandByKey","collapseIfSingleColumn","collapseByKey","deselectAll","focusCell","featureClass","GridFeatureManager","registerFeature"],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,YAAY,SAASC,MAAM,CAAC;AAC7C;EACA,OAAOC,IAAI,GAAG,QAAQ,CAAA;AACtB;EACA,OAAOC,SAAS,GAAG,QAAQ,CAAA;EAC3B,OAAOC,MAAM,GAAG,CACZ,QAAQ;AACR;AACR;AACA;AACA;AACA;EACQ,KAAK;AACL;AACR;AACA;AACA;AACA;EACQ,KAAK;AACL;AACR;AACA;AACA;AACA;EACQ,MAAM;AACN;AACR;AACA;AACA;AACA;EACQ,WAAW;AACX;AACR;AACA;AACA;AACA;AACQ,EAAA,MAAM,CACT,CAAA;EACD,WAAWC,QAAQA,GAAG;IAClB,OAAO;AACHC,MAAAA,UAAU,EAAG,QAAQ;AACrB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAG,EAAA;KACZ,CAAA;AACL,GAAA;AACA;AACA;EACA,IAAIC,aAAaA,GAAG;IAChB,MAAM;MAAED,MAAM;MAAEE,IAAI;MAAEC,GAAG;MAAEC,GAAG;MAAEC,IAAI;MAAEC,SAAS;AAAEC,MAAAA,KAAAA;AAAM,KAAC,GAAG,IAAI,CAAA;AAC/D;IACA,OAAOC,YAAY,CAACC,iBAAiB,CAAC;AAClCd,MAAAA,IAAI,EAAQ,aAAa;MACzBK,MAAM;MACNE,IAAI;MACJC,GAAG;MACHC,GAAG;MACHC,IAAI;MACJC,SAAS;AACTI,MAAAA,SAAS,EAAGH,KAAAA;AAChB,KAAC,CAAC,CAAA;AACN,GAAA;EACA,IAAII,SAASA,GAAG;IACZ,MACIC,EAAE,GAAW,IAAI;AACjB,MAAA;AAAEZ,QAAAA,MAAAA;AAAO,OAAC,GAAGY,EAAE,CAAA;AACnB,IAAA,IAAID,SAAS,GAAGC,EAAE,CAACC,UAAU,CAAA;IAC7B,IAAI,CAACF,SAAS,IAAIC,EAAE,CAACE,WAAW,KAAKd,MAAM,EAAE;AACzCY,MAAAA,EAAE,CAACC,UAAU,GAAGF,SAAS,GAAGI,YAAY,CAACC,GAAG,CAACJ,EAAE,CAACE,WAAW,GAAGd,MAAM,CAAC,CAAA;AACzE,KAAA;AACA,IAAA,OAAOW,SAAS,CAAA;AACpB,GAAA;EACAM,WAAWA,CAACC,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,IAAI,EAAE;MACfA,KAAK,GAAG,IAAI,CAACP,SAAS,CAACX,MAAM,CAACkB,KAAK,CAAC,CAAA;MACpC,IAAI,IAAI,CAACC,IAAI,EAAE;AACXD,QAAAA,KAAK,GAAI,CAAEA,EAAAA,KAAM,GAAE,IAAI,CAACC,IAAK,CAAC,CAAA,CAAA;AAClC,OAAA;AACJ,KAAA;IACA,OAAOD,KAAK,IAAI,EAAE,CAAA;AACtB,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,EAAAA,eAAeA,CAAC;AAAEF,IAAAA,KAAAA;AAAM,GAAC,EAAE;AACvB,IAAA,OAAO,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,CAAA;AAClC,GAAA;AACJ,CAAA;AACAG,WAAW,CAACC,kBAAkB,CAAC7B,YAAY,EAAE,IAAI,CAAC,CAAA;AAClDA,YAAY,CAAC8B,gBAAgB,EAAE,CAAA;AAC/B9B,YAAY,CAAC+B,MAAM,GAAG,cAAc;;ACjKpC;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG,KAAK,CAAA;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"}