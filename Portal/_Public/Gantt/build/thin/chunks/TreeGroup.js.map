{"version":3,"file":"TreeGroup.js","sources":["../../../../Grid/lib/Grid/feature/TreeGroup.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\n\n/**\n * @module Grid/feature/TreeGroup\n */\n\n/**\n * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n * record field per parent level. Parents are generated based on each leaf's value for those fields.\n *\n * {@inlineexample Grid/feature/TreeGroup.js}\n *\n * This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The actual\n * transformation happens in a new store, that contains links to the original records. The original store's structure is\n * kept intact and will be plugged back in when calling {@link #function-clearGroups}.\n *\n * Any modification of the links is relayed to the original store. So cell editing and other features will work as\n * expected and the original data will be updated.\n *\n * Combine this feature with {@link Grid/widget/GroupBar} to allow users to drag drop column header to group the tree\n * store.\n *\n * <div class=\"note\">\n * Please note that this feature requires using a {@link Grid/view/TreeGrid} or having the {@link Grid/feature/Tree}\n * feature enabled.\n * </div>\n *\n * This snippet shows how the sample dataset used in the demo above is transformed:\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Original data\n *     data : [\n *         { id : 1, name : 'Project 1', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { id : 2, name : 'Project 2', children : [\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n *         ]}\n *     ],\n *\n *     features : {\n *         treeGroup : {\n *             // Fields to build a new tree from\n *             levels : [ 'prio', 'status' ]\n *         }\n *     }\n * });\n *\n * // Resulting data\n * [\n *     { name : 'low', children : [\n *         { name : 'done', children : [\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n *         ]}\n *     ]},\n *     { name : 'high', children : [\n *         { name : 'done', children : [\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { name : 'wip', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n *         ]}\n *     ]}\n * ]\n * ```\n *\n * Generated parent records are indicated with `generatedParent` and `key` properties. The first one is set to\n * `true` and the latter one has a value for the group the parent represents.\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Moving nodes manually in the tree is not supported while it is grouped. The linked records have their own\n *   `parentId` fields, not linked to the original records value.\n * * The generated structure is not meant to be persisted.\n *\n * <div class=\"note\">\n * Please note that this feature is not supported in vertical mode in Scheduler.\n * </div>\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype treeGroup\n * @feature\n */\nexport default class TreeGroup extends InstancePlugin {\n    static $name = 'TreeGroup';\n\n    static configurable = {\n        /**\n         * An array of model field names or functions used to determine the levels in the resulting tree.\n         *\n         * When supplying a function, it will be called for each leaf in the original data, and it is expected to return\n         * an atomic value used to determine which parent the leaf will be added to at that level.\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 // First level is determined by the value of the status field\n         *                 'status',\n         *                 // Second level by the result of this function\n         *                 // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n         *                 record => (record.percentDone % 10) * 10\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * The function form can also be used as a formatter/renderer of sorts, simply by returning a string:\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 record => `Status: ${record.status}`\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * Assigning `null` restores the tree structure to its original state.\n         *\n         * @prp {Array<String|Function(Core.data.Model) : any>} levels\n         */\n        levels : [],\n\n        /**\n         * CSS class to apply to the generated parents.\n         *\n         * @config {String}\n         * @default\n         */\n        parentCls : 'b-generated-parent',\n\n        /**\n         * A function letting you format the text shown in the generated parent group levels. This method will be provided\n         * with the value produced by the column representing the grouped level. Each column's renderer method will be\n         * provided an extra `isTreeGroup` param to indicate that the value will be used for a generated parent. `cellElement`\n         * and other DOM specific args will be in the context of the tree column.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         treeGroup : {\n         *             hideGroupedColumns : true,\n         *             levels             : [\n         *                 'priority'\n         *             ],\n         *             parentRenderer({ field, value, column, record }) {\n         *                 // For generated group parent, prefix with the grouped column text\n         *                 return column.text + ': ' + value;\n         *             }\n         *         }\n         *     }\n         * })\n         * ```\n         * @config {Function}\n         * @param {Object} data The rendering data representing the generated tree parent record\n         * @param {String} data.field The field representing this group level (e.g. 'priority')\n         * @param {*} data.value The value representing this group level (e.g. 'high')\n         * @param {Grid.column.Column} data.column The value representing this group level (e.g. 'high')\n         * @param {Core.data.Model} data.record The first record for this parent\n         */\n        parentRenderer : null,\n\n        /**\n         * True to hide grouped columns. Only supported when using String to define levels.\n         *\n         * @config {Boolean}\n         */\n        hideGroupedColumns : null,\n\n        /**\n         * The number of milliseconds to wait after {@link #function-scheduleRefreshGroups} call\n         * before actually refreshing groups.\n         * Each further {@link #function-scheduleRefreshGroups} call during that timeout will restart the timer.\n         * @config {Number}\n         * @default\n         * @private\n         */\n        refreshGroupsTimeout : 100\n    };\n\n    static pluginConfig = {\n        chain  : ['populateHeaderMenu'],\n        assign : ['group', 'clearGroups', 'refreshGroups']\n    };\n\n    static properties = {\n        isApplying    : 0,\n        /**\n         * The original store used by the component before applying grouping. Use this to modify / load data\n         * while tree grouping is active.\n         * @property {Core.data.Store}\n         * @readonly\n         */\n        originalStore : null\n    };\n\n    construct(grid, config) {\n        this.treeColumn = grid.columns.find(col => col.isTreeColumn);\n\n        super.construct(grid, config);\n        this._levels = this._levels || [];\n\n        if (!grid.hasFeature('tree')) {\n            throw new Error('The TreeGroup feature requires the Tree feature to be enabled');\n        }\n    }\n\n    applyPluginConfig() {\n        /**\n         * A \"debounced\" version of {@link #function-refreshGroups} method.\n         * When first invoked will wait for {@link #config-refreshGroupsTimeout} before\n         * before actually refreshing groups.\n         * Each further {@link #function-scheduleRefreshGroups} call during that timeout will restart the timer.\n         *\n         * The function is useful to avoid excessive refreshes when reacting on some events tha could be triggered\n         * multiple times.\n         * @function scheduleRefreshGroups\n         * @private\n         */\n        this.scheduleRefreshGroups = FunctionHelper.createBuffered(this.refreshGroups, this.refreshGroupsTimeout, this);\n\n        return super.applyPluginConfig(...arguments);\n    }\n\n    processParentData(parentData) {\n        const me = this;\n        // Apply cls to allow custom styling of generated parents\n        if (me.parentCls) {\n            parentData.cls = me.parentCls;\n        }\n    }\n\n    processTransformedData(transformedData) {}\n\n    async waitForReadiness() {\n        const me = this;\n\n        // Wait for store to finish loading before transforming the data\n        if (me.originalStore.isLoading) {\n            await me.originalStore.await('load', false);\n\n            if (me.isDestroyed) {\n                return;\n            }\n        }\n\n        // For Scheduler, Pro & Gantt, to not have to implement a TreeGroup in Scheduler just to add this\n        const { crudManager } = this.client;\n\n        if (crudManager) {\n            if (crudManager.isLoadingOrSyncing || crudManager._autoLoadPromise) {\n                await crudManager.await('requestDone');\n            }\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            await me.client.project?.commitAsync();\n        }\n    }\n\n    async applyLevels(levels) {\n        const\n            me                     = this,\n            { client, treeColumn } = me;\n\n        let\n            { store } = client,\n            result    = null,\n            treeColumnField;\n\n        const { modelClass } = store;\n\n        // Get TreeColumn field name (if column.field is provided)\n        if (treeColumn?.field && modelClass.getFieldDefinition(treeColumn.field)) {\n            treeColumnField = modelClass.getFieldDataSource(treeColumn.field);\n        }\n\n        levels = levels || [];\n        if (levels.length === 0 && this.isConfiguring) {\n            return;\n        }\n\n        me._levels = levels;\n\n        me.isApplying++;\n\n        client.suspendRefresh();\n\n        if (!me.originalStore) {\n            me.originalStore = store;\n            store            = new store.constructor({\n                reapplyFilterOnAdd    : true,\n                reapplyFilterOnUpdate : true,\n                tree                  : true,\n                modelClass            : store.modelClass,\n                load                  : store.load?.bind(store),\n                commit                : store.commit.bind(store),\n                filter                : store.filter.bind(store),\n                clearFilters          : store.clearFilters.bind(store)\n            });\n            client.store     = store;\n\n            me.originalStore.ion({\n                name      : 'originalStore',\n                refresh   : me.onOriginalStoreRefresh,\n                add       : me.onOriginalStoreChanged,\n                remove    : me.onOriginalStoreChanged,\n                removeAll : me.onOriginalStoreChanged,\n                thisObj   : me\n            });\n        }\n\n        await me.waitForReadiness();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Applying custom levels\n        if (levels.length > 0) {\n            // Plug links in to allow transforming them below\n            store.data = me.originalStore.getAllDataRecords(false).flatMap(record => record.isLeaf ? record.link() : []);\n\n            // Transform it according to levels\n            result = store.treeify(levels, parentData => {\n                // Use group key as tree columns content (if the column field is provided)\n                if (treeColumnField) {\n                    ObjectHelper.setPath(parentData, treeColumnField, parentData.key);\n                }\n\n                // Let the outside world manipulate generated parents data before turning it into a record\n                me.processParentData(parentData);\n            });\n\n            me.processTransformedData(result);\n\n            await me.trigger('beforeDataLoad', { store, data : result.children });\n\n            // Load the transformed result into the \"display store\"\n            store.data = result.children;\n        }\n        // Clearing custom levels\n        else {\n            client.store = me.originalStore;\n            me.detachListeners('originalStore');\n            me.originalStore = null;\n        }\n\n        me.isApplying--;\n\n        client.resumeRefresh();\n\n        if (client.isPainted) {\n            client.renderRows(false);\n        }\n\n        client.trigger('treeGroupChange', { levels });\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clearGroups();\n        }\n\n        super.doDisable(disable);\n    }\n\n    onOriginalStoreChanged() {\n        this.scheduleRefreshGroups();\n    }\n\n    onOriginalStoreRefresh({ action }) {\n        if (action === 'dataset' || action === 'filter') {\n            this.scheduleRefreshGroups();\n        }\n    }\n\n    updateLevels(levels, old) {\n        const me         = this,\n            { client } = me;\n\n        if (me.hideGroupedColumns) {\n            old?.forEach(field => {\n                field = field.fieldName || field;\n\n                if (!levels.some(level => (level.fieldName || level) === field)) {\n                    client.columns.get(field).show();\n                }\n            });\n\n            levels?.forEach(field => {\n                field = field.fieldName || field;\n                if (!old || !old.some(fn => fn.fieldName === field)) {\n                    client._suspendRenderContentsOnColumnsChanged = true;\n                    client.columns.get(field).hide();\n                    client._suspendRenderContentsOnColumnsChanged = false;\n                }\n            });\n        }\n\n        if (levels || !me.isConfiguring) {\n            me.updatePromise = me.applyLevels(levels);\n\n            client.renderContents();\n        }\n    }\n\n    /**\n     *\n     * Transforms the data according to the supplied levels.\n     *\n     * Yields the same result as assigning to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Transform into a tree with two parent levels\n     * grid.group('status', record => (record.percentDone % 10) * 10);\n     * ```\n     *\n     * @param {Array<String|Grid.column.Column|Function(Core.data.Model) : any>} levels Field names or functions use to generate parents in resulting tree.\n     * @on-owner\n     * @category Common\n     */\n    async group(levels) {\n        ObjectHelper.assertArray(levels, 'group()');\n\n        await this.applyLevels(levels);\n    }\n\n    /**\n     * Clears the previously applied transformation, restoring data to its initial state.\n     *\n     * Yields the same result as assigning `null` to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Restore original data\n     * grid.clearGroups();\n     * ```\n     * @on-owner\n     * @category Common\n     */\n    async clearGroups() {\n        if (this.isGrouped) {\n            this.levels = [];\n            await this.updatePromise;\n        }\n    }\n\n    /**\n     * Refreshes the store tree grouping by re-applying the current transformation.\n     *\n     * ```javascript\n     * // Refresh groups\n     * grid.refreshGroups();\n     * ```\n     * @on-owner\n     * @category Common\n     * @private\n     */\n    refreshGroups() {\n        // since we have a buffered wrapper of this function\n        // we have to check if applyLevels exists in case the feature is destroyed\n        return this.applyLevels?.(this._levels);\n    }\n\n    /**\n     * Indicates if the feature has applied grouping and the component uses\n     * a transformed version of the store.\n     * @property {Boolean}\n     */\n    get isGrouped() {\n        return this._levels.length > 0;\n    }\n\n    /**\n     * Supply items for headers context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateHeaderMenu({ column, items }) {\n        const\n            me        = this,\n            groupable = column.groupable !== false && !column.isTreeColumn;\n\n        let separator = false;\n\n        if (groupable && !me.isGroupedByField(column.field)) {\n            items.groupAsc = {\n                text        : 'L{group}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-group-asc',\n                separator   : true,\n                weight      : 400,\n                disabled    : me.disabled,\n                onItem      : () => me.addGrouper(column)\n            };\n            separator      = true;\n        }\n\n        if (me.isGrouped) {\n            if (me.isGroupedByField(column.field)) {\n                items.groupRemove = {\n                    text        : 'L{stopGroupingThisColumn}',\n                    localeClass : me,\n                    icon        : 'b-fw-icon b-icon-clear',\n                    separator   : !separator,\n                    weight      : 420,\n                    disabled    : me.disabled,\n                    onItem      : () => me.removeGrouper(column)\n                };\n                separator         = true;\n            }\n\n            items.groupRemoveAll = {\n                text        : 'L{stopGrouping}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-clear',\n                separator   : !separator,\n                weight      : 420,\n                disabled    : me.disabled,\n                onItem      : () => me.clearGroups()\n            };\n        }\n    }\n\n    addGrouper(column) {\n        this.levels = this.levels.concat(column.field);\n    }\n\n    isGroupedByField(field) {\n        return this.levels.find(groupFn => groupFn.fieldName === field);\n    }\n\n    removeGrouper(column) {\n        this.levels.splice(this.levels.findIndex(groupFn => groupFn.fieldName === column.field), 1);\n        this.levels = this.levels.slice();\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup);\n"],"names":["TreeGroup","InstancePlugin","$name","configurable","levels","parentCls","parentRenderer","hideGroupedColumns","refreshGroupsTimeout","pluginConfig","chain","assign","properties","isApplying","originalStore","construct","grid","config","treeColumn","columns","find","col","isTreeColumn","_levels","hasFeature","Error","applyPluginConfig","scheduleRefreshGroups","FunctionHelper","createBuffered","refreshGroups","arguments","processParentData","parentData","me","cls","processTransformedData","transformedData","waitForReadiness","isLoading","await","isDestroyed","crudManager","client","_me$client$project","isLoadingOrSyncing","_autoLoadPromise","project","commitAsync","applyLevels","store","result","treeColumnField","modelClass","field","getFieldDefinition","getFieldDataSource","length","isConfiguring","suspendRefresh","_store$load","constructor","reapplyFilterOnAdd","reapplyFilterOnUpdate","tree","load","bind","commit","filter","clearFilters","ion","name","refresh","onOriginalStoreRefresh","add","onOriginalStoreChanged","remove","removeAll","thisObj","data","getAllDataRecords","flatMap","record","isLeaf","link","treeify","ObjectHelper","setPath","key","trigger","children","detachListeners","resumeRefresh","isPainted","renderRows","doDisable","disable","clearGroups","action","updateLevels","old","forEach","fieldName","some","level","get","show","fn","_suspendRenderContentsOnColumnsChanged","hide","updatePromise","renderContents","group","assertArray","isGrouped","_this$applyLevels","call","populateHeaderMenu","column","items","groupable","separator","isGroupedByField","groupAsc","text","localeClass","icon","weight","disabled","onItem","addGrouper","groupRemove","removeGrouper","groupRemoveAll","concat","groupFn","splice","findIndex","slice","_$name","GridFeatureManager","registerFeature"],"mappings":";;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,SAAS,SAASC,cAAc,CAAC;EAClD,OAAOC,KAAK,GAAG,WAAW,CAAA;AAC1B,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,EAAG,EAAE;AACX;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,EAAG,oBAAoB;AAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,EAAG,IAAI;AACrB;AACR;AACA;AACA;AACA;AACQC,IAAAA,kBAAkB,EAAG,IAAI;AACzB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,oBAAoB,EAAG,GAAA;GAC1B,CAAA;AACD,EAAA,OAAOC,YAAY,GAAG;IAClBC,KAAK,EAAI,CAAC,oBAAoB,CAAC;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"}