{"version":3,"file":"grid.module.thin.js","sources":["../../../Grid/lib/Grid/column/ActionColumn.js","../../../Grid/lib/Grid/column/AggregateColumn.js","../../../Grid/lib/Grid/column/PercentColumn.js","../../../Grid/lib/Grid/column/RatingColumn.js","../../../Grid/lib/Grid/column/TemplateColumn.js","../../../Grid/lib/Grid/column/TimeColumn.js","../../../Grid/lib/Grid/feature/CellCopyPaste.js","../../../Grid/lib/Grid/feature/CellTooltip.js","../../../Grid/lib/Grid/feature/ColumnRename.js","../../../Grid/lib/Grid/feature/FillHandle.js","../../../Grid/lib/Grid/feature/MergeCells.js","../../../Grid/lib/Grid/feature/QuickFind.js","../../../Grid/lib/Grid/feature/RowExpander.js","../../../Grid/lib/Grid/feature/Search.js","../../../Grid/lib/Grid/feature/StickyCells.js","../../../Grid/lib/Grid/feature/experimental/FileDrop.js","../../../Grid/lib/Grid/widget/GroupBar.js","../../../Grid/lib/Grid/widget/TreeCombo.js","../../../Grid/bundle/entry.thin.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Grid/column/ActionColumn\n */\n\n/**\n * Config object for an action in an ActionColumn.\n * @typedef {Object} ActionConfig\n * @property {String} cls CSS Class for action icon\n * @property {Function|String|TooltipConfig} tooltip Tooltip text, or a config object which can reconfigure the shared\n * tooltip by setting boolean, numeric and string config values, or a function to return the tooltip text, passed the\n * row's `record`\n * @property {Function|Boolean} visible Boolean to define the action icon visibility or a callback function, passed the\n * row's `record`, to change it dynamically\n * @property {Function} onClick Callback to handle click action item event, passed the row's `record`\n * @property {Boolean} showForGroup Set to true to have action icon visible in group headers only when using the `group`\n * feature\n * @property {Function|String} renderer A render function, or the name of a function in the Grid's ownership tree used\n * to define the action element. Passed the row's `record`, expected to return an HTML string or a DOM config object.\n * **Note**: when specified, the `cls` action config is ignored. Make sure you add an action icon manually, for example:\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : ({ record }) => '<i class=\"b-action-item b-fa b-fa-plus\"></i> ' + record.name,\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n *\n * or\n *\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : 'up.renderAction' // Defined on the Grid\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n */\n\n/**\n * A column that displays actions as clickable icons in the cell.\n *\n * {@inlineexample Grid/column/ActionColumn.js}\n *\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *     columns  : [{\n *         type    : 'action',\n *         text    : 'Increase amount',\n *         actions : [{\n *             cls      : 'b-fa b-fa-plus',\n *             renderer : ({ action, record }) => `<i class=\"b-action-item ${action.cls} b-${record.enabled ? \"green\" : \"red\"}-class\"></i>`,\n *             visible  : ({ record }) => record.canAdd,\n *             tooltip  : ({ record }) => `<p class=\"b-nicer-than-default\">Add to ${record.name}</p>`,\n *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n *         }, {\n *             cls     : 'b-fa b-fa-pencil',\n *             tooltip : 'Edit note',\n *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n *         }]\n *     }]\n * });\n * ```\n *\n * Actions may be placed in {@link Grid/feature/Group} headers, by setting `action.showForGroup` to `true`. Those\n * actions will not be shown on normal rows.\n *\n * @extends Grid/column/Column\n * @classType action\n * @column\n */\nexport default class ActionColumn extends Column {\n\n    static type = 'action';\n\n    static fields = [\n        /**\n         * An array of action config objects, see {@link #typedef-ActionConfig} for details.\n         *\n         * ```javascript\n         * new Grid({\n         *     columns  : [{\n         *         type    : 'action',\n         *         text    : 'Actions',\n         *         actions : [{\n         *             cls      : 'b-fa b-fa-plus',\n         *             visible  : ({ record }) => record.canAdd,\n         *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n         *         }, {\n         *             cls     : 'b-fa b-fa-pencil',\n         *             tooltip : 'Edit note',\n         *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n         *         }]\n         *     }]\n         * });\n         * ```\n         *\n         * @config {ActionConfig[]} actions List of action configs\n         * @category Common\n         */\n        { name : 'actions', type : 'array' },\n\n        /**\n         * Set true to hide disable actions in this column if the grid is {@link Core.widget.Widget#config-readOnly}\n         * @config {Boolean} disableIfGridReadOnly\n         * @default\n         * @category Common\n         */\n        { name : 'disableIfGridReadOnly', defaultValue : false }\n    ];\n\n    static defaults = {\n        /**\n         * Filtering by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} filterable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        filterable : false,\n\n        /**\n         * Grouping by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} groupable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        groupable : false,\n\n        /**\n         * Sorting by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} sortable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        sortable : false,\n\n        /**\n         * Editor for action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} editor\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        editor : false,\n\n        /**\n         * Searching by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} searchable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        searchable : false,\n\n        /**\n         * By default, for action column this flag is switched to `true`, because the content of this column is always HTML.\n         * @config {Boolean} htmlEncode\n         * @default false\n         * @category Misc\n         * @hide\n         */\n        htmlEncode : false,\n\n        /**\n         * Set to `true` to allow the column to being drag-resized when the ColumnResize plugin is enabled.\n         * @config {Boolean} resizable\n         * @default false\n         * @category Interaction\n         */\n        resizable : false,\n\n        /**\n         * Column minimal width. If value is Number then minimal width is in pixels.\n         * @config {Number|String} minWidth\n         * @default 30\n         * @category Layout\n         */\n        minWidth : 30\n    };\n\n    get groupHeaderReserved() {\n        return true;\n    }\n\n    construct(config, store) {\n        const me = this;\n\n        super.construct(...arguments);\n\n        // use auto-size only as default behaviour\n        if (!config.width && !config.flex) {\n            me.grid.ion({ paint : 'updateAutoWidth', thisObj : me });\n        }\n\n        if (me.disableIfGridReadOnly) {\n            me.grid.element.classList.add('b-actioncolumn-readonly');\n        }\n\n        // If column is cloned, renderer is already set up\n        if (me.renderer !== me.internalRenderer) {\n            me.externalRenderer = me.renderer;\n            me.renderer = me.internalRenderer;\n        }\n    }\n\n    /**\n     * Renderer that displays action icon(s) in the cell.\n     * @private\n     */\n    internalRenderer({ grid, column, record, callExternalRenderer = true }) {\n        const\n            inGroupTitle = record && ('groupRowFor' in record.meta),\n            { subGrid }  = column;\n\n        if (callExternalRenderer) {\n            this.externalRenderer?.(...arguments);\n        }\n\n        return {\n            className : { 'b-action-ct' : 1 },\n            children  : column.actions?.map((actionConfig, index) => {\n                if ('visible' in actionConfig) {\n                    if ((typeof actionConfig.visible === 'function') && actionConfig.visible({ record }) === false) {\n                        return '';\n                    }\n                    if (actionConfig.visible === false) {\n                        return '';\n                    }\n                }\n\n                // check if an action allowed to be shown in case of using grouping\n                if ((inGroupTitle && !actionConfig.showForGroup) || (!inGroupTitle && actionConfig.showForGroup)) {\n                    return '';\n                }\n\n                const\n                    {\n                        tooltip,\n                        renderer\n                    }    = actionConfig,\n                    btip = (typeof tooltip === 'function' || tooltip?.startsWith?.('up.')) ? subGrid.callback(tooltip, subGrid, [{ record }]) : tooltip || '';\n\n                // handle custom renderer if it is specified\n                if (renderer) {\n                    const customRendererData = subGrid.callback(renderer, subGrid, [{\n                        index,\n                        record,\n                        column,\n                        tooltip : btip,\n                        action  : actionConfig\n                    }]);\n\n                    // take of set data-index to make onClick handler work stable\n                    if (typeof customRendererData === 'string') {\n                        return {\n                            tag     : 'span',\n                            dataset : {\n                                ...Tooltip.encodeConfig(btip),\n                                index\n                            },\n                            html : customRendererData\n                        };\n                    }\n                    else {\n                        customRendererData.dataset = customRendererData.dataset || {};\n                        customRendererData.dataset.index = index;\n                        return customRendererData;\n                    }\n                }\n                else {\n                    return {\n                        tag     : 'button',\n                        dataset : {\n                            ...Tooltip.encodeConfig(btip),\n                            index\n                        },\n                        'aria-label' : btip,\n                        className    : {\n                            'b-tool'           : 1,\n                            'b-action-item'    : 1,\n                            [actionConfig.cls] : actionConfig.cls\n                        }\n                    };\n                }\n            })\n        };\n    }\n\n    /**\n     * Handle icon click and call action handler.\n     * @private\n     */\n    onCellClick({ column, record, target }) {\n        if (column !== this || !target.classList.contains('b-action-item')) {\n            return;\n        }\n\n        let actionIndex = target.dataset.index;\n        // index may be set in a parent node if user used an html string in his custom renderer\n        // and we take care to set this property to support onClick handler\n        if (!actionIndex) {\n            actionIndex = target.parentElement.dataset && target.parentElement.dataset.index;\n        }\n\n        const\n            action        = column.actions?.[actionIndex],\n            actionHandler = action?.onClick;\n\n        if (actionHandler) {\n            this.callback(actionHandler, column, [{ record, action, target }]);\n        }\n    }\n\n    /**\n     * Update width for actions column to fit content.\n     * @private\n     */\n    updateAutoWidth() {\n        const\n            me           = this,\n            groupActions = [],\n            {\n                actions : oldActions\n            }            = me;\n\n        // header may be disabled, in that case we won't be able to calculate the width properly\n        if (!me.element) {\n            return;\n        }\n\n        const actions = me.actions = [];\n\n        // collect group and non group actions to check length later\n        oldActions?.forEach(actionOriginal => {\n            const action = { ...actionOriginal };\n\n            // remove possible visibility condition to make sure an action will exists in test HTML\n            delete action.visible;\n            // group actions shows in different row and never together with non group\n            if (action.showForGroup) {\n                delete action.showForGroup;\n                groupActions.push(action);\n            }\n            else {\n                actions.push(action);\n            }\n        });\n\n        // use longest actions length to calculate column width\n        if (groupActions.length > actions.length) {\n            me._actions = groupActions;\n        }\n\n        const actionsHtml = DomHelper.createElement(me.internalRenderer({ column : me, callExternalRenderer : false })).outerHTML;\n\n        me.width = DomHelper.measureText(actionsHtml, me.element, true, me.element.parentElement);\n        me.actions = oldActions;\n    }\n}\n\nColumnStore.registerColumnType(ActionColumn);\nActionColumn.exposeProperties();\n","import ColumnStore from '../data/ColumnStore.js';\nimport NumberColumn from './NumberColumn.js';\n\n/**\n * @module Grid/column/AggregateColumn\n */\n\n/**\n * A column, which, when used as part of a {@link Grid.view.TreeGrid}, aggregates the values of this column's descendants using\n * a configured function which defaults to `sum`. The aggregate value is re-calculated after any change to the data,\n * and if you want aggregate values to be change-tracked, please set {@link #config-includeParentInChangeSet} to true.\n *\n * Default editor depends on the data field type. If it is a number, default editor is a {@link Core/widget/NumberField}.\n * Otherwise Default editor is a {@link Core/widget/TextField}.\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Custom aggregation handler.\n *     // For test purposes, this just does \"sum\"\n *     myAggregator(...values) {\n *         let result = 0;\n *\n *         for (let i = 0, { length } = values; i < length; i++) {\n *             result += parseInt(args[i], 10);\n *         }\n *         return result;\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name' },\n *\n *         // Will sum the ages of leaf nodes. This is the default.\n *         { type : 'aggregate', field : 'age', text : 'Age', renderer : ({ value }) => `<b>${value}<b>` },\n *\n *         // Will use AggregateColumn's built-in avg of scores of leaf nodes\n *         { type : 'aggregate', field : 'score', text : 'Score', function : 'avg' },\n *\n *         // Will use the grid's myAggregator function\n *         { type : 'aggregate', field : 'revenue', text : 'Revenue', function : 'up.myAggregator' },\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/NumberColumn\n * @classType aggregate\n * @column\n */\nexport default class AggregateColumn extends NumberColumn {\n    //region Config\n\n    static type = 'aggregate';\n\n    static fields = [\n        'function',\n        'includeParentInChangeSet'\n    ];\n\n    static get defaults() {\n        return {\n            /**\n             * Math Function name, or function name prepended by `\"up.\"` that is resolvable in an\n             * ancestor component (such as the owning Grid, or a height Container), or a function to\n             * use to aggregate child record values for this column, or a function.\n             *\n             * This Column is provided with a `sum` and `avg` function. The default function is `sum`\n             * which is used for the aggregation.\n             *\n             * The function is passed a set of child node values, each value in a separate argument\n             * and should return a single value based upon the value set passed.\n             * @config {'sum'|'avg'|'min'|'max'|Function}\n             * @category Common\n             */\n            function : 'sum',\n\n            /**\n             * Set to `true` to include changes to parent (aggregate) rows in the store's modification tracking.\n             * @config {Boolean} includeParentInChangeSet\n             * @category Common\n             */\n            includeParentInChangeSet : false\n        };\n    }\n\n    construct(data, columnStore) {\n        const me = this;\n        me.configuredAlign = 'align' in data;\n        me.configuredEditor = 'editor' in data;\n\n        super.construct(...arguments);\n\n        const { grid } = columnStore;\n\n        // 'sum' is reserved by Summary feature, so we use a different name\n        if (me.function === 'sum') {\n            me.function = 'sumChildren';\n        }\n\n        if (grid) {\n            me.store = grid.store;\n        }\n    }\n\n    set store(store) {\n        const\n            me             = this,\n            storeListeners = {\n                update  : 'onRecordUpdate',\n                thisObj : me,\n                prio    : 1000\n            },\n            oldStore = me._store;\n\n        if (store !== oldStore) {\n            if (oldStore) {\n                oldStore.un(storeListeners);\n            }\n\n            me._store = store;\n\n            const\n                { modelClass } = store,\n                field = modelClass.fieldMap[me.field];\n\n            // It's *likely*, but not certain that this will be used for a numeric field.\n            // Use numeric defaults unless configured otherwise if so.\n            if (field && field.type === 'number') {\n                if (!me.configuredAlign) {\n                    me.align = 'end';\n                }\n                if (!me.configuredEditor) {\n                    me.editor = 'number';\n                }\n            }\n\n            store.ion(storeListeners);\n        }\n    }\n\n    canEdit(record) {\n        return record.isLeaf;\n    }\n\n    get store() {\n        return this._store;\n    }\n\n    sumChildren(...args) {\n        let result = 0;\n\n        for (let i = 0, { length } = args; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result;\n    }\n\n    avg(...args) {\n        let result = 0;\n        const { length } = args;\n\n        for (let i = 0; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result / length;\n    }\n\n    onRecordUpdate({ record, changes }) {\n        const\n            me = this,\n            { rowManager } = me.grid;\n\n        if (me.field in changes) {\n            if (record.isLeaf) {\n                record.bubble(rec => {\n                    const row = rowManager.getRowFor(rec);\n\n                    if (row) {\n                        const cellElement = row.getCell(me.field);\n\n                        if (cellElement) {\n                            row.renderCell(cellElement);\n                        }\n                    }\n                }, true);\n            }\n        }\n    }\n\n    getRawValue(record) {\n        let value;\n\n        const\n            me        = this,\n            { field } = me;\n\n        if (record.children?.length) {\n            const\n                fn       = me.function,\n                isMathFn = typeof fn === 'string' && typeof Math[fn] === 'function',\n                {\n                    handler,\n                    thisObj\n                } = isMathFn ? {\n                    handler : Math[fn],\n                    thisObj : Math\n                } : me.resolveCallback(fn);\n\n            // Gather all child node values before passing them to the aggregator function.\n            value = handler.apply(thisObj, record.children.map(r => me.getRawValue(r)));\n            if (me.includeParentInChangeSet) {\n                record.set(field, value, true);\n            }\n            else {\n                record.setData(field, value);\n            }\n        }\n        else {\n            value = record.getValue(field);\n        }\n        return value;\n    }\n\n    canFillValue() {\n        return false;\n    }\n}\n\nColumnStore.registerColumnType(AggregateColumn, true);\nAggregateColumn.exposeProperties();\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/PercentColumn\n */\n\n/**\n * A column that display a basic progress bar.\n *\n * {@inlineexample Grid/column/PercentColumn.js}\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'percent', text: 'Progress', data: 'progress' }\n *     ]\n * });\n * ```\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classType percent\n * @column\n */\nexport default class PercentColumn extends NumberColumn {\n\n    static type = 'percent';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['showValue', 'lowThreshold'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 100,\n\n            /**\n             * Set to `true` to render the number value inside the bar, for example `'15%'`.\n             * @config {Boolean}\n             * @default\n             * @category Rendering\n             */\n            showValue : false,\n\n            /**\n             * When below this percentage the bar will have `b-low` CSS class added. By default it turns the bar red.\n             * @config {Number}\n             * @default\n             * @category Rendering\n             */\n            lowThreshold : 20,\n\n            htmlEncode      : false,\n            searchable      : false,\n            summaryRenderer : ({ sum }) => `${sum}%`,\n            fitMode         : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        this.internalCellCls = 'b-percent-bar-cell';\n    }\n\n    /**\n     * Renderer that displays a progress bar in the cell. If you create a custom renderer, and want to include the\n     * default markup you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type: 'percent',\n     *             text : 'Percent',\n     *             field : 'percent',\n     *             renderer({ value }) {\n     *                 const domConfig = this.defaultRenderer();\n     *\n     *                 if (value > 100) {\n     *                     domConfig.className = b-percent-bar-outer over-allocated';\n     *                 }\n     *\n     *                 return domConfig;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {DomConfig} DomConfig object representing the default markup for the cells content\n     */\n    defaultRenderer({ value }) {\n        value = value || 0;\n\n        return {\n            className       : 'b-percent-bar-outer',\n            role            : 'progressbar',\n            'aria-Valuemin' : 0,\n            'aria-Valuemax' : 100,\n            'aria-Valuenow' : value,\n            tabIndex        : 0,\n            children        : [\n                {\n                    tag       : 'div',\n                    className : {\n                        'b-percent-bar' : 1,\n                        'b-zero'        : value === 0,\n                        'b-low'         : value < this.lowThreshold\n                    },\n                    style : {\n                        width : value + '%'\n                    },\n                    children : [\n                        this.showValue ? {\n                            tag  : 'span',\n                            text : value + '%'\n                        } : undefined\n                    ]\n                }\n            ]\n        };\n    }\n\n    // Null implementation because the column width drives the width of its content.\n    // So the concept of sizing to content is invalid here.\n    resizeToFitContent() {}\n}\n\nPercentColumn.sum = 'average';\n\nColumnStore.registerColumnType(PercentColumn, true);\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Grid/column/RatingColumn\n */\n\n/**\n * A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.\n * Clicking the first and only star toggles it.\n *\n * This column uses a custom widget as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/NumberColumn\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'rating', max : 10, field: 'rating' }\n *     ]\n * });\n *\n * @classType rating\n * @inlineexample Grid/column/RatingColumn.js\n * @column\n */\nexport default class RatingColumn extends NumberColumn {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{Column.cellLabel}'\n    ];\n    // endregion\n    // </debug>\n\n    static $name = 'RatingColumn';\n\n    static type = 'rating';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['emptyIcon', 'filledIcon', 'editable'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 5,\n\n            /**\n             * The empty rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            emptyIcon : 'b-icon b-icon-star',\n\n            /**\n             * The filled rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            filledIcon : 'b-icon b-icon-star',\n\n            /**\n             * Allow user to click an icon to change the value\n             * @config {Boolean}\n             * @category Interaction\n             */\n            editable : true,\n\n            filterType : 'number',\n            searchable : false,\n            width      : '11.2em',\n            htmlEncode : false,\n            minWidth   : '11.2em',\n            editor     : false,\n            fitMode    : 'value'\n        };\n    }\n\n    /**\n     * Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.\n     * @private\n     */\n    renderer({ value }) {\n        return {\n            className : {\n                'b-rating-cell-inner' : 1,\n                'b-not-editable'      : !this.editable\n            },\n            children : ArrayHelper.populate(this.max, i => {\n                const filled = i < value;\n                return {\n                    tag       : 'i',\n                    className : {\n                        'b-rating-icon'                             : true,\n                        'b-filled'                                  : filled,\n                        'b-empty'                                   : !filled,\n                        [filled ? this.filledIcon : this.emptyIcon] : true\n                    }\n                };\n            })\n        };\n    }\n\n    onCellClick({ grid, column, record, target, event }) {\n        if (target.classList.contains('b-rating-icon') && !grid.readOnly && column.editable) {\n            let starIndex = [].indexOf.call(target.parentNode.childNodes, target);\n\n            if (target.classList.contains('b-filled') && (event.metaKey || event.shiftKey)) {\n                starIndex = starIndex - 1;\n            }\n\n            // Clicking first star when it is only one removes it\n            if (record.getValue(column.field) === 1 && starIndex === 0) {\n                starIndex = -1;\n            }\n\n            record.set(column.field, starIndex + 1);\n        }\n    }\n}\n\nColumnStore.registerColumnType(RatingColumn, true);\nRatingColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/TemplateColumn\n */\n\n/**\n * A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.\n * It should return a string which will be rendered in the cell.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'template', field: 'age', template: ({value}) => `${value} years old` }\n *     ]\n * });\n *\n * @classType template\n * @inlineexample Grid/column/TemplateColumn.js\n * @column\n */\nexport default class TemplateColumn extends Column {\n\n    static type = 'template';\n\n    static fields = [\n        /**\n         * Template function used to generate a value displayed in the cell. Called with arguments `{ value, record, field }`\n         * @config {Function} template\n         * @param {Object} data An object that contains data about the cell being rendered.\n         * @param {*} data.value The value (only present when you set a `field` on the column)\n         * @param {Core.data.Model} data.record The record representing the row\n         * @param {String} data.field The column field name\n         * @category Common\n         */\n        'template'\n    ];\n\n    static get defaults() {\n        return {\n            htmlEncode : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        if (!me.template) {\n            throw new Error('TemplateColumn needs a template');\n        }\n\n        if (typeof me.template !== 'function') {\n            throw new Error('TemplateColumn.template must be a function');\n        }\n    }\n\n    /**\n     * Renderer that uses a template for cell content.\n     * @private\n     */\n    renderer(renderData) {\n        // If it's a special row, such as a group row, we can't use the user's template\n        if (!renderData.record.isSpecialRow) {\n            return this.template({\n                value  : renderData.value,\n                record : renderData.record,\n                field  : this.field\n            });\n        }\n    }\n}\n\nColumnStore.registerColumnType(TemplateColumn, true);\nTemplateColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Grid/column/TimeColumn\n */\n\n/**\n * A column that displays a time in the specified format (see {@link Core.helper.DateHelper#function-format-static} for formatting options).\n *\n * Default editor is a {@link Core.widget.TimeField TimeField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }\n *     ]\n * });\n *\n * @classType time\n * @inlineexample Grid/column/TimeColumn.js\n * @column\n */\nexport default class TimeColumn extends Column {\n\n    //region Config\n\n    static type = 'time';\n\n    // Type to use when auto adding field\n    static fieldType = 'date';\n\n    static fields = ['format'];\n\n    static get defaults() {\n        return {\n            /**\n             * Time format\n             * @config {String}\n             * @category Common\n             */\n            format : 'LT',\n\n            minWidth : 140,\n\n            filterType : 'time'\n        };\n    }\n\n    //endregion\n\n    //region Display\n\n    /**\n     * Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n\n    /**\n     * Group renderer that displays the time with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n\n    //endregion\n\n    //region Formatter\n\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the time\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a time, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format);\n        }\n        return DateHelper.format(value, this.format);\n    }\n\n    //endregion\n\n    //region Getters/Setters\n    /**\n     * Get/Set format for time displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this;\n\n        this.set('format', value);\n\n        if (editor) {\n            editor.format = value;\n        }\n    }\n\n    get format() {\n        return  this.get('format');\n    }\n\n    get defaultEditor() {\n        return {\n            name   : this.field,\n            type   : 'time',\n            format : this.format\n        };\n    }\n\n    //endregion\n}\n\nColumnStore.registerColumnType(TimeColumn, true);\nTimeColumn.exposeProperties();\n","import CopyPasteBase from './base/CopyPasteBase.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellCopyPaste\n */\n\n/**\n * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n * makes cut, copy and paste actions available via the cell context menu.\n *\n * <div class=\"note\">\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated. Also, if the\n * {@link Grid/feature/CellEdit} feature is disabled, the {@link #config-copyOnly} config will default to `true` which\n * prevents cut and paste actions completely. Set {@link #config-copyOnly} to `false` to prevent this behaviour.\n * </div>\n *\n * This feature will work alongside with {@link Grid/feature/RowCopyPaste} but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there are only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there are only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do share clipboard, even if internal clipboard is used, so it is not possible to have rows and cells copied or\n *   cut at the same time.\n *\n * If the {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API} is available, that will\n * be used. This enables copying and pasting between different Bryntum products or completely different applications.\n * Please note that only string values are supported.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellCopyPaste.js}\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action  | Action description                                                                      |\n * |------------|---------|-----------------------------------------------------------------------------------------|\n * | `Ctrl`+`C` | *copy*  | Calls {@link #function-copy} which copies selected cell values into the clipboard.      |\n * | `Ctrl`+`X` | *cut*   | Calls {@link #function-cut} which cuts out selected cell values and saves in clipboard. |\n * | `Ctrl`+`V` | *paste* | Calls {@link #function-paste} which inserts string values from the clipboard.           |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [this guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Grid/feature/base/CopyPasteBase\n * @classtype cellCopyPaste\n * @feature\n */\nexport default class CellCopyPaste extends CopyPasteBase {\n    static $name = 'CellCopyPaste';\n\n    static pluginConfig = {\n        chain : [\n            'populateCellMenu', 'afterSelectionModeChange'\n        ]\n    };\n\n    static configurable = {\n\n        useNativeClipboard : !VersionHelper.isTestEnv,\n\n        copyText  : 'L{copy}',\n        cutText   : 'L{cut}',\n        pasteText : 'L{paste}'\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n        this.afterSelectionModeChange();\n    }\n\n    afterSelectionModeChange() {\n        const me = this;\n\n        if (!me.client.selectionMode.cell) {\n            me.disabled = true;\n        }\n        else if (me._disabledBySelectionMode) {\n            me.disabled = false;\n            delete me._disabledBySelectionMode;\n        }\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'cell';\n\n    set copyOnly(value) {\n        this._copyOnly = value;\n    }\n\n    get copyOnly() {\n        // If celledit is disabled, cut and paste actions are disabled by default\n        if (this._copyOnly == null) {\n            return !this.client.features.cellEdit?.enabled;\n        }\n\n        return Boolean(this._copyOnly);\n    }\n\n    get canCopy() {\n        const { client } = this;\n\n        return Boolean(!this.disabled && client.selectedCells.length &&\n            (\n                !client._selectedRows.length ||\n                client.features.rowCopyPaste?.disabled ||\n                client.focusedCell && client.isCellSelected(client.focusedCell)\n            ));\n    }\n\n    get canCutPaste() {\n        return this.canCopy && !this.copyOnly && !this.client.features.cellEdit?.isEditing && !this.client.readOnly;\n    }\n\n    // Called from keyMap. Also used internally here\n    isActionAvailable({ actionName }) {\n        return this.canCopy && (actionName === 'copy' || this.canCutPaste);\n    }\n\n    /**\n     * Cuts selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async cut() {\n        await this.copy(true);\n    }\n\n    /**\n     * Copies selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async copy(isCut = false) {\n        if (typeof isCut != 'boolean') {\n            isCut = false; // If called by keymap, arguments[0] will be an event\n        }\n\n        const\n            me                = this,\n            { selectedCells } = me.client,\n            cells             = isCut ? selectedCells.filter(r => !r.record?.readOnly) : selectedCells;\n\n        if (cells) {\n            if ((isCut ? !me.canCutPaste : !me.canCopy)) {\n                return;\n            }\n\n            const copiedDataString = me.cellsToString(cells);\n            await me.writeToClipboard(copiedDataString, isCut, { cells });\n\n            if (isCut === true) {\n                for (const cell of cells) {\n                    if (!cell.column.readOnly) {\n                        cell.record.set(cell.column.field, null);\n                    }\n                }\n            }\n\n            /**\n             * Fires on the owning Grid after a copy action is performed.\n             * @event copy\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {String} copiedDataString The concatenated data string that was copied or cut\n             * @param {Boolean} isCut `true` if this was a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other copy events\n             */\n            me.client.trigger('copy', { cells, copiedDataString, isCut, entityName : me.entityName });\n\n        }\n    }\n\n    // Called from Clipboardable before writing to the clipboard\n    async beforeCopy({ data, isCut, cells }) {\n        /**\n         * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n         * @param {String} data The string data about to be copied or cut\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'cell' to distinguish this event from other beforeCopy events\n         */\n        return await this.client.trigger('beforeCopy', { cells, data, isCut, entityName : this.entityName });\n    }\n\n    /**\n     * Pastes string data into a cell or a range of cells. Either from native clipboard if that is accessible or from a\n     * fallback clipboard that is only available to the owner Grid.\n     *\n     * The string data will be split on `\\n` and `\\t` and put in different rows and columns accordingly.\n     *\n     * Note that there must be a selected cell to paste the data into.\n     * @async\n     */\n    async paste() {\n        const\n            me                     = this,\n            { client, entityName } = me,\n            targetCell             = client.selectedCells[0];\n\n        if (!me.canCutPaste || !targetCell) {\n            return;\n        }\n\n        const clipboardData = await me.readFromClipboard({}, true);\n\n        if (!clipboardData) {\n            return;\n        }\n\n        const { modifiedRecords, targetCells } = me.setFromStringData(clipboardData);\n\n        if (client.selectedCells.length === 1 && targetCells.length > 1) {\n            client.selectCellRange(targetCells[0], targetCells[targetCells.length - 1]);\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData that was pasted\n         * @param {Core.data.Model[]} modifiedRecords The records which have been modified due to the paste action\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other paste events\n         */\n        client.trigger('paste', { clipboardData, targetCell, modifiedRecords : [...modifiedRecords], entityName });\n    }\n\n    // Called from Clipboardable before finishing the clipboard read\n    async beforePaste({ data }) {\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @async\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData about to be pasted\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other beforePaste events\n         */\n        return await this.client.trigger('beforePaste', {\n            clipboardData : data, targetCell : this.client.selectedCell, entityName : this.entityName\n        });\n    }\n\n    populateCellMenu({ record, items }) {\n        const me = this;\n\n        if (me.canCopy) {\n            items.cutCell = {\n                text        : me.cutText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 115,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.cut()\n            };\n\n            items.pasteCell = {\n                text        : me.pasteText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 120,\n                disabled    : record.readOnly || !me.canCutPaste || me.hasClipboardData() === false,\n                onItem      : () => me.paste()\n            };\n\n            items.copyCell = {\n                text        : me.copyText,\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => me.copy()\n            };\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(CellCopyPaste);\n","import Objects from '../../Core/helper/util/Objects.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellTooltip\n */\n\n/**\n * Displays a tooltip when hovering cells.\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n *\n * To show contents when hovering a cell, you can specify a global {@link #config-tooltipRenderer} function for the\n * feature, you can also define a {@link Grid.column.Column#config-tooltipRenderer} for individual columns.\n *\n * ```javascript\n * // Column with its own tooltip renderer\n * {\n *   text            : 'Name',\n *   field           : 'name',\n *   tooltipRenderer : ({ record }) => `My name is\\xa0<b>${record.name}</b>`\n * }\n * ```\n *\n * Configuration properties passed into this feature are used to configure the {@link Core.widget.Tooltip} instance\n * used.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Showing async content\n * Showing remotely loaded content is super easy using the {@link #config-tooltipRenderer}:\n *\n * ```javascript\n * // Async tooltip with some custom settings\n * const grid = new Grid({\n *   features: {\n *     cellTooltip: {\n *       // Time that mouse needs to be over cell before tooltip is shown\n *       hoverDelay : 4000,\n *       // Time after mouse out to hide the tooltip, 0 = instantly\n *       hideDelay  : 0,\n *       // Async tooltip renderer, return a Promise which yields the text content\n *       tooltipRenderer({ record, tip }) {\n *         return fetch(`tip.php?id=${record.id}`).then(response => response.text())\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @extendsconfigs Core/widget/Tooltip\n * @demo Grid/celltooltip\n * @classtype cellTooltip\n * @feature\n */\nexport default class CellTooltip extends InstancePlugin {\n    //region Config\n\n    static $name = 'CellTooltip';\n\n    static configurable = {\n        /**\n         * Function called to generate the HTML content for the cell tooltip.\n         * The function should return a string (your HTML), or a Promise yielding a string (for remotely loaded\n         * content)\n         * @prp {Function}\n         * @param {Object} context\n         * @param {HTMLElement} context.cellElement The cell element\n         * @param {Core.data.Model} context.record The row record\n         * @param {Grid.column.Column} context.column The column\n         * @param {Core.widget.Tooltip} context.tip The Tooltip instance\n         * @param {Grid.feature.CellTooltip} context.cellTooltip The feature\n         * @param {Event} context.event The raw DOM event\n         * @returns {String|Promise}\n         */\n        tooltipRenderer : null\n    };\n\n    //endregion\n\n    // region Init\n\n    construct(grid, config) {\n        super.construct(grid, this.processConfig(config));\n    }\n\n    initTip() {\n        const me = this;\n\n        me.tip = Tooltip.new({\n            forElement        : me.client.element,\n            forSelector       : '.b-grid-row:not(.b-group-row) .b-grid-cell, .b-grid-merged-cells',\n            hoverDelay        : 1000,\n            trackMouse        : false,\n            cls               : 'b-celltooltip-tip',\n            getHtml           : me.getTooltipContent.bind(me),\n            internalListeners : {\n                pointerOver : 'onPointerOver',\n                thisObj     : me\n            },\n            // eslint-disable-next-line bryntum/no-listeners-in-lib\n            listeners : me.configuredListeners\n        }, me.initialConfig);\n\n        me.relayEvents(me.tip, ['beforeShow', 'show']);\n    }\n\n    onPointerOver({ target }) {\n        const column = this.client.getColumnFromElement(target);\n\n        // Veto onPointerOver if column's tooltipRenderer is false\n        return column.tooltipRenderer !== false && Boolean(column.tooltipRenderer || this.tooltipRenderer);\n    }\n\n    // CellTooltip feature handles special config cases, where user can supply a function to use as tooltipRenderer\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'function') {\n            return {\n                tooltipRenderer : config\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it (used mainly from ReactGrid)\n    setConfig(config) {\n        super.setConfig(this.processConfig(config));\n    }\n\n    doDestroy() {\n        this.tip && this.tip.destroy();\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (!disable) {\n            this.initTip();\n        }\n        else if (this.tip) {\n            this.tip.destroy();\n            this.tip = null;\n        }\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    //region Content\n\n    /**\n     * Called from Tooltip to populate it with html.\n     * @private\n     */\n    getTooltipContent({ tip, activeTarget : cellElement, event }) {\n        const\n            me     = this,\n            record = me.client.getRecordFromElement(cellElement),\n            column = me.client.getColumnFromElement(cellElement),\n            arg    = { cellElement, record, column, event, tip, cellTooltip : me };\n\n        let result;\n\n        // If we have not changed context, we should not change content, unless we have a custom target selector (element within the cell)\n        if (!me.forSelector && record === me.lastRecord && record.generation === me.lastRecordGeneration && column === me.lastColumn) {\n            return me.tip._html;\n        }\n\n        me.lastRecord = record;\n        me.lastRecordGeneration = record.generation;\n        me.lastColumn = column;\n\n        // first, use columns tooltipRenderer if any\n        if (column.tooltipRenderer) {\n            result = column.tooltipRenderer(arg);\n        }\n        // secondly, try feature's renderer (specifying column.tooltipRenderer as false prevents tooltip in that column)\n        else if (me.tooltipRenderer && column.tooltipRenderer !== false) {\n            result = me.tooltipRenderer(arg);\n        }\n\n        // No caching of async requests\n        if (Objects.isPromise(result)) {\n            me.lastRecord = me.lastRecordGeneration = me.lastColumn = null;\n        }\n\n        // Tip should hide if no content is available\n        if (!result) {\n            tip.hide();\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(CellTooltip);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/ColumnRename\n */\n\n/**\n * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n * is focused.\n *\n * To get notified about column renaming listen to `change` event on {@link Grid.data.ColumnStore columns} store.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * {@inlineexample Grid/feature/ColumnRename.js}\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys          | Action           | Action description                        |\n * |---------------|------------------|-------------------------------------------|\n * | `F2`          | *startEdit*      | Starts editing focused column header text |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/columns\n * @classtype columnRename\n * @feature\n */\nexport default class ColumnRename extends InstancePlugin {\n\n    static $name = 'ColumnRename';\n\n    static configurable = {\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F2 : 'startEdit'\n        }\n    };\n\n    doDestroy() {\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    static get pluginConfig() {\n        return {\n            after : ['populateHeaderMenu']\n        };\n    }\n\n    populateHeaderMenu({ items, column }) {\n        items.rename = {\n            weight   : 215,\n            icon     : 'b-fw-icon b-icon-edit',\n            text     : this.L('L{rename}'),\n            disabled : column.readOnly,\n            onItem   : () => this.startEdit(column)\n        };\n    }\n\n    startEdit(column) {\n        if (column instanceof Event) {\n            // If started editing by key\n            column = this.client.getHeaderDataFromEvent(column)?.column;\n        }\n\n        if (column) {\n            if (column.readOnly) {\n                // return false to let keyMap know that we didn't handle this event\n                return false;\n            }\n\n            const { textWrapper } = column;\n            let { editor } = this;\n\n            if (!editor) {\n                this.editor = editor = new Editor({\n                    owner : this.client,\n                    align : {\n                        align : 't0-t0'\n                    }\n                });\n            }\n\n            editor.render(textWrapper);\n\n            editor.startEdit({\n                target : textWrapper,\n                record : column,\n                field  : 'text'\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(ColumnRename, false);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Location from '../../Grid/util/Location.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/FillHandle\n */\n\n/**\n * This features adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n * with values based on the values in the original selected range. This is similar to functionality normally seen in\n * various spreadsheet applications.\n *\n * {@inlineexample Grid/feature/FillHandle.js}\n *\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         fillHandle : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype fillHandle\n * @feature\n */\nexport default class FillHandle extends InstancePlugin.mixin(Delayable) {\n    static $name = 'FillHandle';\n\n    static configurable = {\n        /**\n         * Implement this function to be able to customize the value that cells will be filled with.\n         * Return `undefined` to use default calculations.\n         *\n         * ````javascript\n         * new Grid({\n         *    features : {\n         *        fillHandle : {\n         *           calculateFillValue({cell, column, range, record}) {\n         *              if(column.field === 'number') {\n         *                 return range.reduce(\n         *                    (sum, location) => sum + location.record[location.column.field]\n         *                 );\n         *              }\n         *           }\n         *        }\n         *    }\n         * });\n         * ````\n         *\n         * @param {Object} data Object containing information about current cell and fill value\n         * @param {Grid.util.Location} data.cell Current cell data\n         * @param {Grid.column.Column} data.column Current cell column\n         * @param {Grid.util.Location[]} data.range Range from where to calculate values\n         * @param {Core.data.Model} data.record Current cell record\n         * @returns {String|Number|Date} Value to fill current cell\n         * @config {Function}\n         */\n        calculateFillValue : null,\n\n        /**\n         * Set to `true` to enable the fill range to crop the original selected range. This clears the cells which were\n         * a part of the original selected range, but are no longer a part of the smaller range.\n         * @config {Boolean}\n         */\n        allowCropping : false\n\n    };\n\n    // Plugin configuration. This plugin chains/overrides some functions in Grid.\n    static pluginConfig = {\n        chain    : ['afterSelectionChange', 'onContentChange', 'afterColumnsChange', 'fixElementHeights'],\n        override : ['getCellDataFromEvent']\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        if (!this.client.selectionMode.cell) {\n            this.disabled = true;\n        }\n\n        this._fillListeners = {};\n    }\n\n    delayable = {\n        handleSelection : 'raf'\n    };\n\n    onContentChange() {\n        this.handleSelection();\n    }\n\n    afterColumnsChange() {\n        this.handleSelection();\n    }\n\n    fixElementHeights() {\n        this.handleSelection();\n    }\n\n    getCellDataFromEvent(event, includeSingleAxisMatch) {\n        if (includeSingleAxisMatch) {\n            includeSingleAxisMatch = !event.target.classList.contains('b-fill-handle');\n        }\n        return this.overridden.getCellDataFromEvent(event, includeSingleAxisMatch);\n    }\n\n    // region Pattern recognition\n    findPatternsIn2dRange(range, horizontal, negative) {\n        const values = {};\n\n        // Converts a cellselector range to values per column or row\n        for (const cell of range) {\n            const id = horizontal ? cell.id : cell.columnId;\n            let value = cell.record.getValue(cell.column.field);\n\n            // If a number string, convert to number\n            if (value && typeof value === 'string' && !isNaN(value)) {\n                value = parseFloat(value);\n            }\n\n            if (!values[id]) {\n                values[id] = [];\n            }\n            values[id].push(value);\n        }\n\n        // Find patterns for each column or row in range\n        for (const rowOrCol in values) {\n            values[rowOrCol].pattern = this.findPatternsIn1dRange(values[rowOrCol], negative);\n        }\n\n        return values;\n    }\n\n    findPatternsIn1dRange(range, negative) {\n        const\n            lastValue = range[negative ? 0 : (range.length - 1)],\n            pattern   = {\n                next : () => lastValue,\n                lastValue\n            };\n\n        // If all values in same column/row is either number or date\n        if (range.every(val => typeof val === 'number') || range.every(val => val instanceof Date)) {\n            const diffs = range.map((val, ix) => val - range[ix - 1]);\n            diffs.shift(); // Removes initial NaN\n\n            // Found a repeating pattern\n            if (new Set(diffs).size === 1) {\n                pattern.increaseBy = diffs[0] * (negative ? -1 : 1);\n\n                pattern.next = () => {\n                    if (pattern.lastValue instanceof Date) {\n                        pattern.lastValue = new Date(pattern.lastValue.getTime() + pattern.increaseBy);\n                    }\n                    else {\n                        pattern.lastValue += pattern.increaseBy;\n                    }\n                    return pattern.lastValue;\n                };\n            }\n        }\n        // Else it's treated as a string value\n        else if (range.length > 1) {\n            pattern.stringPattern = [...range];\n            pattern.next = () => {\n                if (pattern.currentIndex === undefined) {\n                    pattern.currentIndex = 0;\n                }\n                else {\n                    pattern.currentIndex += 1;\n                    if (pattern.currentIndex >= pattern.stringPattern.length) {\n                        pattern.currentIndex = 0;\n                    }\n                }\n                return pattern.stringPattern[pattern.currentIndex];\n            };\n        }\n        return pattern;\n    }\n\n    // endregion\n\n    afterSelectionChange() {\n        const me = this;\n\n        if (me.client.readOnly) {\n            me.removeElements();\n            return;\n        }\n\n        // If selection isn't finished, wait for mouse up and then add fill elements\n        if (GlobalEvents.isMouseDown()) {\n            me.client.delayUntilMouseUp(() => me.handleSelection(true));\n            // Remove prev elements immediately in this case\n            me.removeElements();\n        }\n        // Otherwise, add fill elements immediately\n        else {\n            me.handleSelection(true);\n        }\n    }\n\n    /**\n     * Checks selection and sees to it that fill handle and border is drawn.\n     * Runs on next animation frame\n     * @internal\n     */\n    handleSelection() {\n        if (!this._isExtending) {\n            const range = this.rangeSelection;\n\n            if (range) {\n                this.drawFillHandleAndBorder(range[0], range[range.length - 1]);\n            }\n            else {\n                this.removeElements();\n            }\n        }\n    }\n\n    // region Mouse events\n\n    // On fillHandle mouse down only\n    onMouseDown(event) {\n        const { client } = this;\n\n        if (!client.readOnly) {\n            this._fillListeners.mouseMoveOrUp = EventHelper.on({\n                element   : globalThis,\n                mouseover : {\n                    handler : 'onMouseOver',\n                    element : client.selectionDragMouseEventListenerElement\n                },\n                mouseup : 'onMouseUp',\n                thisObj : this\n            });\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            event.handled = true;\n        }\n    }\n\n    // Responsible for doing the filling\n    onMouseUp() {\n        const\n            me              = this,\n            {\n                client,\n                currentRange,\n                _isCropping\n            }               = me,\n            range           = me.rangeSelection,\n            selectionChange = range && currentRange && client.internalSelectRange(currentRange.from, currentRange.to),\n            selectedCells   = selectionChange?.selectedCells || [],\n            // For extending : Only modify cells that are not a part of original range\n            // For cropping  : Only clear cells that are not a part of new selection\n            extensionCells  = _isCropping ? me.croppingCells\n                : selectedCells.filter(cell => !range.some(sel => sel.equals(cell, true)));\n\n        delete me._isCropping; // Removing flag in case we bail out early\n\n        if (me._isExtending) {\n            client.disableScrollingCloseToEdges(client.items);\n            delete me._isExtending;\n        }\n\n        // If no extension, do nothing\n        if (!extensionCells?.length) {\n            me.handleSelection();\n            return;\n        }\n\n        client.suspendRefresh();\n\n        // If trimming (inverted extension), clear cells that where previously selected and not a part of new selection\n        if (_isCropping) {\n            extensionCells.forEach(cell => cell.record.set(cell.column.field, null, false, false, false, true));\n        }\n        // Extending cell values depending on pattern\n        else {\n            const\n                [firstCell] = extensionCells,\n                // If extensioncells has a record that is included in original selection, then we are dragging horizontally\n                horizontal  = range.some(sel => sel.record === firstCell.record),\n                // negative in this aspect, means dragging either upwards or to the left depending on horizontal or vertical\n                negative    = horizontal\n                    ? firstCell.columnIndex < range[0].columnIndex\n                    : firstCell.rowIndex < range[0].rowIndex,\n                patterns    = me.findPatternsIn2dRange(range, horizontal, negative),\n                changeMap   = new Map();\n\n            if (negative) {\n                extensionCells.reverse();\n            }\n\n            for (const cell of extensionCells) {\n                const { column, record } = cell;\n\n                if (!column.readOnly && column.canFillValue({ range, record, cell })) {\n                    let value   = me.calculateFillValue?.({ range, column, record, cell }),\n                        changed = changeMap.get(record);\n\n                    if (!changed) {\n                        changed = {};\n                        changeMap.set(record, changed);\n                    }\n\n                    if (value === undefined) {\n                        const pattern = patterns[horizontal ? cell.id : cell.columnId].pattern;\n                        value = pattern.next();\n                    }\n\n                    changed[column.field] = column.calculateFillValue?.({ value, record, range }) || value;\n                }\n            }\n\n            for (const [record, changes] of changeMap) {\n                record.set(changes, null, null, null, null, true);\n            }\n        }\n\n        client.resumeRefresh(true);\n\n        // Selects the extended area\n        client.performSelection(selectionChange);\n\n        delete me.currentRange;\n        me.handleSelection();\n    }\n\n    // The fill border and handle should refresh on mouse move\n    onMouseOver(event) {\n        const\n            me           = this,\n            {\n                client,\n                rangeSelection\n            }            = me,\n            first        = rangeSelection[0],\n            last         = rangeSelection[rangeSelection.length - 1],\n            cellData     = client.getCellDataFromEvent(event, true);\n        let cellSelector = cellData && client.normalizeCellContext(cellData.cellSelector);\n\n        if (cellSelector?._column?.region === first._column.region) {\n            const\n                equalOrSmaller = rangeSelection.some(cs => cs.equals(cellSelector, true));\n            let negative;\n\n            if (!me._isExtending) {\n                client.enableScrollingCloseToEdges(client.items);\n            }\n\n            if (equalOrSmaller) {\n                // If were smaller, were cropping (if it's allowed)\n                me._isCropping = me.allowCropping &&\n                    (cellSelector.rowIndex < last.rowIndex || cellSelector.columnIndex < last.columnIndex);\n            }\n            else {\n                // If cellSelector is on a row in range, endSelector should be current column but end/first row\n                if (cellSelector.rowIndex >= first.rowIndex && cellSelector.rowIndex <= last.rowIndex) {\n                    negative     = first.columnIndex > cellSelector.columnIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : negative ? first.record : last.record,\n                        column : cellSelector.column\n                    });\n                }\n                // Else endSelector should be current row but end/first column\n                else {\n                    negative     = first.rowIndex > cellSelector.rowIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : cellSelector.record,\n                        column : negative ? first.column : last.column\n                    });\n                }\n            }\n\n            // negative means that current mouse over cell is above or to the left\n            const\n                // If negative, draw from calculated mouse over cell\n                // otherwise, draw from top-left selection cell\n                from = negative ? cellSelector : first,\n                // If negative or were inside selection (but not cropping), draw to bottom-right selection cell\n                // otherwise, draw to calculated mouse over cell\n                to   = negative || (equalOrSmaller && !me._isCropping) ? last : cellSelector;\n\n            me.currentRange = { from, to };\n\n            // This flag is true even if were trimming\n            me._isExtending = true;\n\n            me.drawFillHandleAndBorder(from, to, true);\n        }\n    }\n\n    // endregion\n\n    // region Creating, updating and removing fillhandle and fillborder\n    drawFillHandleAndBorder(from, to, keepListeners = false) {\n        const\n            me        = this,\n            {\n                client,\n                currentRange,\n                _fillListeners\n            }         = me,\n            regionEl  = client.subGrids[from.column.region].element,\n            { x }     = Rectangle.from(from.cell || from.column.element, regionEl),\n            { right } = Rectangle.from(to.cell || to.column.element, regionEl),\n            { y }     = client.getRecordCoords(from.record, true),\n            bottom    = client.getRecordCoords(to.record, true).bottom - 1;\n        let {\n            borderElement,\n            handleElement\n        }             = me;\n\n        me.removeElements(keepListeners);\n\n        if (!borderElement) {\n            me.borderElement = borderElement = DomHelper.createElement({\n                className : 'b-fill-selection-border'\n            });\n\n            me.handleElement = handleElement = DomHelper.createElement({\n                className : 'b-fill-handle'\n            });\n        }\n\n        DomHelper.setRect(borderElement, { y, x, width : (right - x), height : (bottom - y) });\n        regionEl.appendChild(borderElement);\n\n        // If fill handle is drawn at right edge, put it to the left instead\n        DomHelper.setTopLeft(handleElement, bottom, right >= regionEl.scrollWidth ? x : right);\n        regionEl.appendChild(handleElement);\n\n        // Remove all previously cropping cls\n        me.toggleCroppingCls(false);\n        delete me.croppingCells;\n\n        // If were cropping, we should add cls class to the cells that will be \"shrunk\"\n        if (me._isCropping && me.rangeSelection?.length) {\n            const newCells = client.getRange(currentRange.from, currentRange.to);\n\n            me.croppingCells = me.rangeSelection.filter(sel => !newCells.some(cell => cell.equals(sel, true)));\n            me.toggleCroppingCls();\n        }\n\n        if (!_fillListeners.handleClick) {\n            _fillListeners.handleClick = EventHelper.on({\n                element   : client.rootElement,\n                delegate  : '.b-fill-handle',\n                mousedown : 'onMouseDown',\n                thisObj   : me\n            });\n        }\n\n        me.hasFillElements = true;\n    }\n\n    toggleCroppingCls(add = true) {\n        this.croppingCells?.forEach(sel => this.client.getCell(sel)?.classList.toggle('b-indicate-crop', add));\n    }\n\n    removeElements(keepListeners = false) {\n        const me = this;\n\n        me.handleElement?.remove();\n        me.borderElement?.remove();\n\n        if (!keepListeners) {\n            me.removeListeners();\n        }\n\n        me.hasFillElements = false;\n    }\n\n    // Detach listeners\n    removeListeners() {\n        const me = this;\n\n        for (const listener in me._fillListeners) {\n            me._fillListeners[listener]();\n        }\n        me._fillListeners = {};\n    }\n\n    // endregion\n\n    // Gets current selection range. Only allows for single range or single cell.\n    get rangeSelection() {\n        const\n            { client }        = this,\n            { selectedCells } = client,\n            range             = client._shiftSelectRange ?? (selectedCells.length === 1 && selectedCells);\n\n        // We only got one selected range, nothing else selected\n        // Only allow fill handle on single region selection\n        if (!client._selectedRows.length && range?.length && range.length === selectedCells.length &&\n            range.every(c1 => selectedCells.some(c2 => c1.equals(c2, true)) &&\n                c1._column.parent && c1._column.region === range[0]._column.region && client.store.isAvailable(c1.id)\n            )\n        ) {\n            return range;\n        }\n\n        return null;\n    }\n}\n\nGridFeatureManager.registerFeature(FillHandle);\n","import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\n\n/**\n * @module Grid/feature/MergeCells\n */\n\n// Maps DOM events to relayed events that need correct casing\nconst camelCase = {\n    mousedown   : 'mouseDown',\n    mousemove   : 'mouseMove',\n    mouseup     : 'mouseUp',\n    touchdown   : 'touchDown',\n    touchmove   : 'touchMove',\n    touchup     : 'touchUp',\n    pointerover : 'mouseOver',\n    mouseout    : 'mouseOut',\n    dblclick    : 'dblClick',\n    keydown     : 'keyDown',\n    keypress    : 'keyPress',\n    keyup       : 'keyUp',\n    contextmenu : 'contextMenu'\n};\n\n/**\n * This feature merges cells that have the same value in sorted (or {@link #config-sortedOnly optionally} any) columns\n * configured to {@link Grid/column/Column#config-mergeCells}.\n *\n * The content of merged cells is sticky for Grids with a single subgrid section when all columns fit in view (content\n * stays in view until the cell is scrolled fully out of view).\n *\n * {@note}\n * Support for sticky content is limited because of how <code>position: sticky</code> works. Grid\n * scrolls vertically in one element, and horizontally in another (to support multiple regions in the grid), and this\n * setup is not supported by current browsers implementation of sticky positioning\n * {/@note}\n *\n * Try scrolling in the demo below. As mentioned above, cells are by default merged only in sorted columns -  try\n * sorting by the other columns (\"City\" and \"Favorite food\" are configured to merge cells):\n *\n * {@inlineexample Grid/feature/MergeCells.js}\n *\n * By configuring the feature with `sortedOnly : false`, cells can be merged in any column:\n *\n * {@inlineexample Grid/feature/MergeCellsAll.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype mergeCells\n * @feature\n */\nexport default class MergeCells extends InstancePlugin {\n    //region Config\n\n    static $name = 'MergeCells';\n\n    static configurable = {\n        /**\n         * By default, merged cells allow pointer events to pass through to the underlying row/cell, to allow selecting\n         * a row and editing an individual cell even when they are merged. Configure as `false` to allow merged cells to\n         * catch and react to the pointer events instead.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         mergeCells : {\n         *             // Let merged cells react to pointer events\n         *             passthrough : false\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         */\n        passthrough : true,\n\n        /**\n         * Configure as `false` to allow merging cells in columns that are not sorted.\n         *\n         * {@note}\n         * Note that this will have a slight negative impact on performance, since cells in all columns configured to\n         * merge cells have to be iterated.\n         * {/@note}\n         *\n         * @config {Boolean}\n         * @default true\n         */\n        sortedOnly : true\n    };\n\n    // All current ranges (once rendered)\n    mergedRanges = [];\n    // Ranges indexed by row index & column id -> Each range included multiple times, for easy lookup\n    mergedMap    = {};\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                'beforeRenderCell',\n                'afterRenderRow',\n                'bindStore',\n                'afterColumnsChange',\n                'afterRemove',\n                'afterToggleGroup',\n                'afterToggleSubGrid',\n                'handleEvent',\n                'populateHeaderMenu',\n                // 'setHoveredRow'\n                'afterSelectionChange'\n            ],\n\n            // Grid must perform its update *after* we do.\n            before : [\n                'onInternalResize'\n            ],\n            override : [\n                'getColumnFromElement',\n                'getRecordFromElement'\n            ]\n        };\n    };\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n\n        // Each subgrid gets a merged cells container\n        client.eachSubGrid(subGrid => me.setupSubGrid(subGrid));\n\n        // Merged cells are synced after rows are updated\n        client.rowManager.ion({\n            renderDone : 'onRenderDone',\n            thisObj    : me\n        });\n\n        me.bindStore(client.store);\n    }\n\n    setupSubGrid(subGrid) {\n        // Element that will contain the merged cells\n        subGrid.$mergedCellsElement = DomHelper.createElement({\n            parent    : subGrid.element,\n            className : {\n                'b-grid-merged-cells-container' : 1\n            }\n        });\n\n        // Catch resizing region\n        subGrid.ion({\n            beforeInternalResize : 'refreshBounds',\n            thisObj              : this\n        });\n    }\n\n    doDisable(disable) {\n        if (!this.isConfiguring) {\n            // Flag to allow reset to redraw even though we are already disabled at this stage\n            this.isDisabling = true;\n            this.reset();\n            this.isDisabling = false;\n        }\n\n        super.doDisable(disable);\n    }\n\n    updatePassthrough(use) {\n        // Toggle CSS class that has `pointer-events : none`\n        this.client.element.classList.toggle('b-mergecells-passthrough', use);\n    }\n\n    updateSortedOnly(sortedOnly) {\n        if (!this.isConfiguring) {\n            this.reset(true, sortedOnly);\n        }\n    }\n\n    //endregion\n\n    //region Grid hooks\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            // Call our refresh logic before grids\n            refresh : {\n                prio : 1,\n                fn   : 'onStoreRefresh'\n            },\n            thisObj : this\n        });\n    }\n\n    // Refresh all ranges when grid is resized\n    onInternalResize() {\n        this.refreshBounds();\n    }\n\n    // Get / create ranges before cell contents are rendered, redirecting the contents to the range\n    beforeRenderCell(renderData) {\n        const\n            me                              = this,\n            { column, record, cellElement } = renderData,\n            subGrid                         = me.client.subGrids[column.region];\n\n        // Only affect sorted columns configured to merge cells\n        if (!me.disabled && column.mergeCells && (column.isSorted || !me.sortedOnly) && !record.isSpecialRow && !subGrid.collapsed) {\n            const mergedRange = me.getMergeRange(record, column);\n            if (mergedRange?.use) {\n                // Flag the unmerged cell to allow styling it\n                cellElement.classList.add('b-merged-cell');\n                // Make sure it is empty\n                cellElement.innerHTML = '';\n                // Redirect output to the merged cell\n                renderData.cellElement = mergedRange.cellElement;\n\n                // <remove-on-release>\n                // TODO: Consider bailing out after rendering first available cell of a merge. It would help with\n                //  performance, but any side effects from the renderer would be lost (such as assigning classes to row)\n                // </remove-on-release>\n            }\n        }\n    }\n\n    afterRenderRow({ row, oldId, oldHeight }) {\n        // Row reused for same record changed height\n        if (oldId === row.id && oldHeight !== row.height) {\n            this.heightChanged = true;\n        }\n    }\n\n    // Refresh all ranges when a column is resized (since it might affect their position and size)\n    afterColumnsChange({ action, changes, column }) {\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update' && changes.mergeCells && !column.mergeCells) {\n            // Remove all ranges for the column when mergeCells is set to false\n            for (const range of this.mergedRanges.slice()) {\n                if (range.column === column) {\n                    this.removeRange(range);\n                }\n            }\n\n            this.syncDom();\n            return;\n        }\n\n        this.refreshBounds();\n    }\n\n    // Remove might be transitioned, wait until it finishes before resetting (in the afterRemove hook)\n    afterRemove() {\n        !this.disabled && this.reset();\n    }\n\n    // Group collapsed or expanded\n    afterToggleGroup() {\n        !this.disabled && this.reset();\n    }\n\n    // SubGrid collapsed or expanded\n    afterToggleSubGrid() {\n        !this.disabled && this.reset();\n    }\n\n    // setHoveredRow(row) {\n    //     this.$hovered = row && this.mergedRanges.find(r => r.fromIndex <= row.dataIndex && r.toIndex >= row.dataIndex);\n    //\n    //     this.syncDom();\n    // }\n\n    // Selection changed, range is considered selected when all of its rows are selected (only in passthrough mode)\n    afterSelectionChange() {\n        if (!this.passthrough) {\n            const\n                { client } = this,\n                indices    = client.selectedRecords.map(r => client.store.indexOf(r));\n            let changed    = false;\n\n            for (const range of this.mergedRanges) {\n                let allSelected = true;\n                // Check if all records in the range are selected\n                for (let i = range.fromIndex; i <= range.toIndex && allSelected; i++) {\n                    allSelected = indices.includes(i);\n                }\n\n                if (range.isSelected !== allSelected) {\n                    range.isSelected = allSelected;\n                    changed = true;\n                }\n            }\n\n            // Only redraw if a range selection status changed\n            changed && this.syncDom();\n        }\n    }\n\n    //endregion\n\n    //region Grid overrides\n\n    // Extract record from merged cells\n    getRecordFromElement(element) {\n        if (element.elementData?.range) {\n            return this.client.store.getAt(element.elementData.range.fromIndex);\n        }\n\n        return this.overridden.getRecordFromElement(element);\n    }\n\n    // Extract column from merged cells\n    getColumnFromElement(element) {\n        if (element.elementData?.range) {\n            return element.elementData.range.column;\n        }\n\n        return this.overridden.getColumnFromElement(element);\n    }\n\n    //endregion\n\n    //region Header menu\n\n    // Allow toggling merging cells from the column header menu (unless column is explicitly disallowing it)\n    populateHeaderMenu({ column, items }) {\n        if (column.mergeable !== false) {\n            items.mergeCells = {\n                text     : 'L{MergeCells.mergeCells}',\n                icon     : `b-fw-icon ${column.mergeCells ? 'b-icon-checked' : 'b-icon-unchecked'}`,\n                tooltip  : 'L{MergeCells.menuTooltip}',\n                cls      : 'b-separator',\n                weight   : 500,\n                disabled : this.disabled,\n                onItem   : () => column.mergeCells = !column.mergeCells\n            };\n        }\n    }\n\n    //endregion\n\n    //region Relaying events\n\n    // Relay pointer events from the merged cell on grid\n    async handleEvent(event) {\n        if (!this.passthrough) {\n            const mergedCellsElement = event.target.closest('.b-grid-merged-cells');\n\n            if (mergedCellsElement) {\n                const\n                    { client }   = this,\n                    { range }    = mergedCellsElement.elementData,\n                    { cellEdit } = client.features,\n                    { column }   = range,\n                    type         = StringHelper.capitalize(camelCase[event.type] ?? event.type),\n                    eventData    = {\n                        grid        : client,\n                        records     : [],\n                        column,\n                        cellElement : mergedCellsElement.firstElementChild,\n                        target      : event.target,\n                        event\n                    };\n\n                for (let i = range.fromIndex; i <= range.toIndex; i++) {\n                    eventData.records.push(client.store.getAt(i));\n                }\n\n                client.trigger(`mergedCell${type}`, eventData);\n\n                // Cell editing, pass through to cell underneath even when not using passthrough mode\n                if (cellEdit?.triggerEvent.toLowerCase() === `cell${type}`.toLowerCase()) {\n                    const row = client.rowManager.getRowAt(event.clientY);\n                    await cellEdit.startEditing({ id : row.id, columnId : column.id });\n                }\n                // Select ranges rows when clicking the merged cell\n                else if (event.type === 'click') {\n                    this.onRangeClick({ range });\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Select ranges rows when clicking a merged cell\n    onRangeClick({ range }) {\n        const records = [];\n\n        for (let i = range.fromIndex; i <= range.toIndex; i++) {\n            records.push(this.client.store.getAt(i));\n        }\n\n        this.client.selectedRecords = records;\n    }\n\n    // Reset when data changes\n    onStoreChange() {\n        !this.disabled && this.reset();\n    }\n\n    // Reset before grids refresh listener come into play, grid will redraw\n    onStoreRefresh({ action }) {\n        // filter & dataset triggers change too, handled above\n        if (action !== 'filter' && action !== 'dataset') {\n            !this.disabled && this.reset(false);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    // Element is needed early since it is passed to column renderers, and syncing for each rendered cell would give a\n    // lot of overhead. Thus creating element directly instead\n    createRangeElement(range) {\n        const\n            parent = this.client.getSubGridFromColumn(range.column).$mergedCellsElement,\n            syncId = `${range.fromIndex}-@-${range.column.id}`;\n\n        // If there is already an element for the range (also if previously released), we grab that one.\n        // We are bending the rules of DomSync here by spawning the element early\n        let element = parent.syncIdMap?.[syncId] ?? parent.releasedIdMap?.[syncId];\n\n        // No longer considered released\n        if (parent.releasedIdMap) {\n            delete parent.releasedIdMap[syncId];\n        }\n\n        if (!element) {\n            element = DomHelper.createElement(this.createRangeDomConfig(range));\n        }\n\n        // New element or reusing released one, DomSync need to be made aware\n        DomSync.addChild(parent, element, syncId);\n\n        range.element = element;\n        range.cellElement = element.firstElementChild;\n\n        return element;\n    }\n\n    // Create a DomConfig object for the supplied range, used initially with DomHelper and thereafter with DomSync\n    createRangeDomConfig(range) {\n        const\n            { column, fromIndex, toIndex, top, left, width, height } = range,\n            { type } = column,\n            record = this.client.store.getAt(fromIndex),\n            domConfig = {\n                className : {\n                    'b-grid-merged-cells' : 1,\n                    // 'b-hover'             : this.$hovered === range,\n                    'b-selected'          : range.isSelected\n                },\n                elementData : {\n                    range\n                },\n                style : {\n                    top,\n                    left,\n                    height,\n                    width\n                },\n                dataset : {\n                    syncId   : `${fromIndex}-@-${column.id}`,\n                    fromIndex,\n                    toIndex,\n                    column   : column.field,\n                    columnId : column.id\n                },\n                children : [\n                    // Div for an actual cell\n                    {\n                        className : new DomClassList(this.client.cellCls).assign({\n                            [`b-${type?.toLowerCase()}-cell`] : type,\n                            [column.cellCls]                  : column.cellCls,\n                            [column.internalCellCls]          : column.internalCellCls\n                        }).assign(column.autoCls),\n                        // Don't touch cell children that might have been added by renderer\n                        keepChildren : true,\n                        // Tag along the range for easy resolving later\n                        elementData  : {\n                            range\n                        },\n                        // Dataset expected on cells\n                        dataset : {\n                            column   : column.field,\n                            columnId : column.id\n                        },\n                        // Size using configured row height, to at least have a chance of lining up with surrounding cells\n                        style : {\n                            height : this.client.rowManager.rowHeight\n                        }\n                    }\n                ]\n            };\n\n        // Allow application code a chance to affect the merged cell (intended for styling)\n        column.mergedRenderer?.({ domConfig, value : column.getRawValue(record), record, column, fromIndex, toIndex });\n\n        return domConfig;\n    }\n\n    buildMergedCellsConfig(fromIndex, toIndex, rows) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // When exporting content we render rows to a document fragment one by one without RowManager. In\n        // order to draw ranges correctly in this case we need provide some meta information - list of row-like\n        // objects from which we can size for merged cell element, i.e. top, bottom, height, dataIndex\n        // Match grids row buffer, drawing ranges from the topmost row to the bottommost\n        fromIndex = fromIndex ?? rowManager.topRow?.dataIndex;\n        toIndex = toIndex ?? rowManager.bottomRow?.dataIndex;\n\n        const\n            // { locked = [], normal = [] }\n            domConfigMap = client.regions.reduce((map, region) => {\n                map[region] = {\n                    className : {\n                        'b-grid-merged-cells-container' : 1\n                    },\n                    children : []\n                };\n                return map;\n            }, {});\n\n        // Determine and update visible ranges\n        for (const range of me.mergedRanges) {\n            if (range.use && range.fromIndex <= toIndex && range.toIndex >= fromIndex) {\n                // Update the range, in case more of it has been scrolled into view\n                me.updateRange(range, me.heightChanged, rows);\n                // Create a DomConfig for it\n                domConfigMap[range.column.region].children.push(me.createRangeDomConfig(range));\n            }\n        }\n\n        return domConfigMap;\n    }\n\n    syncDom(force = false) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // Bail out if we get here too early (happens in Scheduler) or are disabled\n        if (!force && !rowManager.topRow || me.disabled && !me.isDisabling) {\n            return;\n        }\n\n        const domConfigMap = this.buildMergedCellsConfig();\n\n        // Sync per subgrid\n        client.eachSubGrid(subGrid => {\n            DomSync.sync({\n                targetElement : subGrid.$mergedCellsElement,\n                syncIdField   : 'syncId',\n                domConfig     : domConfigMap[subGrid.region]\n            });\n        });\n\n        me.heightChanged = false;\n    }\n\n    // Called after rows are updated, sync visible ranges per subgrid\n    onRenderDone() {\n        this.syncDom();\n    }\n\n    //endregion\n\n    //region Ranges\n\n    // Remove range from list and index/column map, leaving no trace it since we don't know if it will ever\n    // come back (element will be released by DomSync)\n    removeRange(range) {\n        ArrayHelper.remove(this.mergedRanges, range);\n        for (let index = range.fromIndex; index <= range.toIndex; index++) {\n            delete this.mergedMap[`${index}-@-${range.column.id}`];\n        }\n    }\n\n    // Full reset, regenerating all ranges\n    reset(redraw = true, force = false) {\n        const\n            me        = this,\n            columns   = me.client.columns.visibleColumns.filter(c => c.mergeCells && (c.isSorted || !me.sortedOnly || force), true),\n            hadRanges = me.mergedRanges.length;\n\n        me.mergedRanges = [];\n        me.mergedMap = {};\n\n        if (redraw && !me.client.refreshSuspended) {\n            for (const row of me.client.rowManager.rows) {\n                for (const column of columns) {\n                    row.renderCell(row.getCell(column.id));\n                }\n            }\n\n            // Redraw, forcing it if all rows are gone\n            me.syncDom(hadRanges && !me.client.rowManager.rowCount);\n        }\n    }\n\n    // Refreshes existing ranges coords\n    refreshBounds() {\n        const\n            { mergedRanges } = this,\n            row              = this.client.rowManager.topRow,\n            boundsMap        = new Map();\n\n        for (const range of mergedRanges.slice()) {\n            const\n                { column }  = range,\n                cellElement = row.getCell(column.id);\n\n            // Column shown\n            if (cellElement) {\n                let bounds = boundsMap.get(column);\n\n                if (!bounds) {\n                    // Temporarily cache bounds to avoid calculating them multiple times\n                    boundsMap.set(column, bounds = Rectangle.from(cellElement, cellElement.parentElement));\n                }\n\n                range.left = bounds.left;\n                range.width = bounds.width;\n            }\n            // Column hidden or removed\n            else {\n                this.removeRange(range);\n            }\n        }\n\n        this.syncDom();\n    }\n\n    // Updates the range as user scrolls, until its start and end coords are fully known\n    // Rows argument is required to render merged cells on export. We provide row-like objects there\n    updateRange(range, force, rows = null) {\n        const\n            { store, rowManager }           = this.client,\n            { topRendered, bottomRendered } = range,\n            { rowOffsetHeight }             = rowManager;\n\n        let { fromIndex, toIndex } = range,\n            topRow, bottomRow;\n\n        force = rows ? rows.length > 0 : force;\n\n        // No need to update anything if bounds are correct already\n        if (!force && topRendered && bottomRendered) {\n            return;\n        }\n\n        if (!topRendered || force) {\n            if (rows) {\n                const index = rows.findIndex(row => row.dataIndex >= fromIndex);\n                topRow = rows[index];\n                fromIndex = topRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate top instead\n                // </remove-on-release>\n                do {\n                    topRow = rowManager.getRowById(store.getAt(fromIndex));\n                }\n                while (!topRow && fromIndex++ < toIndex);\n            }\n\n            // topRow is the actual topmost row in the range\n            range.topRendered = (fromIndex === range.fromIndex);\n\n            const rowsAbove = fromIndex - range.fromIndex;\n\n            range.top = topRow.top - rowsAbove * (rows ? topRow.offsetHeight : rowOffsetHeight);\n        }\n\n        if (!bottomRendered || force) {\n            if (rows) {\n                // We need to find last index, so we can just pick max between -1 and whatever we find\n                const index = rows.findIndex(row => row.dataIndex === toIndex);\n                bottomRow = rows[index === -1 ? rows.length - 1 : index];\n                fromIndex = bottomRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate bottom instead\n                // </remove-on-release>\n                do {\n                    bottomRow = rowManager.getRowById(store.getAt(toIndex));\n                }\n                while (!bottomRow && toIndex-- > fromIndex);\n            }\n\n            // bottomRow is the actual bottommost row in the range\n            range.bottomRendered = (toIndex === range.toIndex);\n\n            const rowsBelow = range.toIndex - toIndex;\n\n            range.bottom = bottomRow.bottom + rowsBelow * (rows ? bottomRow.offsetHeight : rowOffsetHeight);\n        }\n\n        range.height = range.bottom - range.top;\n    }\n\n    // Retrieve a range for the specified record / column, creating a new one if none found by walking upwards and\n    // downwards until a deviating value is found\n    getMergeRange(record, column) {\n        if (record.isSpecialRow) {\n            return;\n        }\n\n        const\n            me            = this,\n            { mergedMap } = me,\n            { store }     = me.client,\n            row           = me.client.rowManager.topRow,\n            columnId      = column.id,\n            index         = store.indexOf(record),\n            key           = `${index}-@-${columnId}`;\n\n        let range = mergedMap[key];\n\n        if (!range) {\n            const value = column.getRawValue(record);\n\n            range = mergedMap[key] = {\n                column\n            };\n\n            me.mergedRanges.push(range);\n\n            // Search up until encountering different value\n            let earlierRecord, earlierValue, earlierIndex = index;\n\n            do {\n                earlierRecord = store.getAt(--earlierIndex);\n                earlierValue  = earlierRecord && column.getRawValue(earlierRecord);\n\n                if (earlierValue === value) {\n                    mergedMap[`${earlierIndex}-@-${columnId}`] = range;\n                }\n\n            } while (earlierRecord && earlierValue === value);\n\n            // And down\n            let laterRecord, laterValue, laterIndex = index;\n\n            do {\n                laterRecord = store.getAt(++laterIndex);\n                laterValue  = laterRecord && column.getRawValue(laterRecord);\n\n                if (laterValue === value) {\n                    mergedMap[`${laterIndex}-@-${columnId}`] = range;\n                }\n            } while (laterRecord && laterValue === value);\n\n            range.fromIndex = earlierIndex + 1;\n            range.toIndex   = laterIndex - 1;\n\n            // We only care about ranges longer than 1 record\n            if (range.toIndex - range.fromIndex > 0) {\n                const\n                    cellElement = row.getCell(columnId),\n                    cellBounds  = Rectangle.from(cellElement, cellElement.parentElement);\n\n                range.left  = cellBounds.left;\n                range.width = cellBounds.width;\n                range.use = true;\n            }\n        }\n\n        if (!range.element && range.use) {\n            me.createRangeElement(range);\n        }\n\n        return range;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(MergeCells);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Handle date columns\n// TODO: Icons to navigate between hits in the header? or in each cell?\n// TODO: Icon to clear quickfind in header\n// TODO: regex for valid key pressed?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/QuickFind\n */\n\n/**\n * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                | Action             | Action description                |\n * |---------------------|--------------------|-----------------------------------|\n * | `F3`                | *goToNextHit*      | Move focus to next search hit     |\n * | `Shift`+F3`         | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`G`          | *goToNextHit*      | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G`  | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`Shift`+`F3` | *showFilterEditor* | Shows the filter editor           |\n * | `Escape`            | *clearSearch*      | Removes the search completely     |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable QuickFind\n * let grid = new Grid({\n *   features: {\n *     quickFind: true\n *   }\n * });\n *\n * // navigate to next hit programmatically\n * grid.features.quickFind.gotoNextHit();\n *\n * @demo Grid/quickfind\n * @classtype quickFind\n * @inlineexample Grid/feature/QuickFind.js\n * @feature\n */\nexport default class QuickFind extends InstancePlugin {\n    //region Config\n\n    static $name = 'QuickFind';\n\n    static configurable = {\n        mode : 'header',\n        find : '',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F3             : 'gotoNextHit',\n            'Shift+F3'     : 'gotoPrevHit',\n            'Ctrl+g'       : 'gotoNextHit',\n            'Ctrl+Shift+g' : 'gotoPrevHit',\n            'Ctrl+Shift+f' : 'showFilterEditor',\n            Escape         : 'clearSearch',\n\n            //Private\n            Backspace : 'onBackspace'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onElementKeyPress', 'onCellNavigate']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get properties() {\n        return {\n            hitCls          : 'b-quick-hit',\n            hitCellCls      : 'b-quick-hit-cell',\n            hitCellBadgeCls : 'b-quick-hit-cell-badge',\n            hitTextCls      : 'b-quick-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        Object.assign(this, {\n            grid,\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n    }\n\n    isActionAvailable() {\n        const { focusedCell } = this.grid;\n        return !this.disabled && focusedCell?.record && !focusedCell.isActionable && this.find.length > 0;\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Show/hide QuickFind\n\n    /**\n     * Shows a \"searchfield\" in the header. Triggered automatically when you have a cell focused and start typing.\n     * @private\n     */\n    showQuickFind() {\n        const\n            me       = this,\n            { grid } = me,\n            header   = grid.getHeaderElement(me.columnId);\n\n        if (header) {\n            if (!me.headerField) {\n                const [element, field, badge] = DomHelper.createElement({\n                    tag       : 'div',\n                    className : 'b-quick-hit-header',\n                    children  : [\n                        { tag : 'div', className : 'b-quick-hit-field' },\n                        { tag : 'div', className : 'b-quick-hit-badge' }\n                    ]\n                }, { returnAll : true });\n\n                if (me.mode === 'header') {\n                    header.appendChild(element);\n                }\n                else {\n                    element.className += ' b-quick-hit-mode-grid';\n                    grid.element.appendChild(element);\n                }\n\n                me.headerField = {\n                    header    : element,\n                    field,\n                    badge,\n                    colHeader : header\n                };\n            }\n\n            me.headerField.field.innerHTML = me.find;\n            me.headerField.badge.innerHTML = me.found.length;\n\n            header.classList.add('b-quick-find-header');\n        }\n\n        if ((header || grid.hideHeaders) && !me.renderListenerInitialized) {\n            grid.rowManager.ion({\n                rendercell : me.renderCell,\n                thisObj    : me\n            });\n            me.renderListenerInitialized = true;\n        }\n\n    }\n\n    /**\n     * Hide the \"searchfield\" and remove highlighted hits. Called automatically when pressing [esc] or backspacing away\n     * the keywords.\n     * @private\n     */\n    hideQuickFind() {\n        const\n            me                    = this,\n            { grid, headerField } = me;\n\n        // rerender cells to remove quick-find markup\n        for (const hit of (me.prevFound || me.found)) {\n            const row = grid.getRowById(hit.id);\n            if (row) {\n                // Need to force replace quick finds markup\n                row.forceInnerHTML = true;\n\n                const cellElement = row.getCell(me.columnId);\n                cellElement._content = null;\n                row.renderCell(cellElement);\n\n                row.forceInnerHTML = false;\n            }\n        }\n\n        if (headerField) {\n            headerField.header.parentNode.removeChild(headerField.header);\n            headerField.colHeader.classList.remove('b-quick-find-header');\n            me.headerField = null;\n        }\n\n        if (me.renderListenerInitialized) {\n            grid.rowManager.un({ rendercell : me.renderCell }, me);\n            me.renderListenerInitialized = false;\n        }\n\n        grid.trigger('hideQuickFind');\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits. If find is empty, QuickFind is closed.\n     * @param {String} find Text to search for\n     * @param {String} columnFieldOrId Column to search\n     */\n    search(find, columnFieldOrId = this.columnId, fromSplit = false) {\n        const\n            me       = this,\n            { grid } = me,\n            column   = grid.columns.getById(columnFieldOrId) || grid.columns.get(columnFieldOrId),\n            found    = me.store.findByField(column.field, find, column.mergeCells && column.isSorted);\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            find,\n            columnId  : column.id,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(find))})(\\\\s+)?`, 'ig')\n        });\n\n        if (find) {\n            me.showQuickFind();\n        }\n        else {\n            me.hideQuickFind();\n        }\n\n        // clear old hits\n        for (const cellElement of DomHelper.children(grid.element, `.${me.hitCls}`)) {\n            cellElement.classList.remove(me.hitCls, me.hitCellCls);\n\n            if (cellElement._originalContent) {\n                cellElement.innerHTML = cellElement._originalContent;\n                cellElement._originalContent = null;\n            }\n        }\n\n        if (!found) {\n            return;\n        }\n\n        if (found.length > 0 && !fromSplit) {\n            me.gotoClosestHit(grid.focusedCell, found);\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            me.foundMap[hit.id] = i++;\n\n            const row = grid.getRowById(hit.data.id);\n            row?.renderCell(row.getCell(column.id));\n\n            // limit highlighted hits\n            if (i > 1000) {\n                break;\n            }\n        }\n\n        // Relay to other grids when splitting\n        grid.syncSplits?.(other => other.features.quickFind.search(find, columnFieldOrId, true));\n\n        grid.trigger('quickFind', { find, found });\n    }\n\n    /**\n     * Clears and closes QuickFind.\n     */\n    clear() {\n        if (this.find || this.found?.length) {\n            this.search('');\n        }\n    }\n\n    /**\n     * Number of results found\n     * @type {Number}\n     * @readonly\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    /**\n     * Found results (as returned by Store#findByField), an array in format { index: x, data: record }\n     * @member {StoreSearchResult[]} found\n     * @readonly\n     */\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const nextHit = this.found[index];\n\n        if (nextHit) {\n            this.grid.focusCell({\n                columnId : this.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n\n        return !!nextHit;\n    }\n\n    gotoClosestHit(focusedCell, found) {\n        const\n            focusedIndex = focusedCell ? this.grid.store.indexOf(focusedCell.id) : 0,\n            foundSorted  = found.slice().sort(\n                (a, b) => Math.abs(a.index - focusedIndex) - Math.abs(b.index - focusedIndex)\n            );\n\n        this.gotoHit(found.indexOf(foundSorted[0]));\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit() {\n        const\n            me           = this,\n            { grid }     = me,\n            // start from focused cell, or if focus has left grid use lastFocusedCell\n            currentId    = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex = grid.store.indexOf(currentId) || 0,\n            nextHit      = me.found.find(hit => hit.index > currentIndex);\n\n        if (nextHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoFirstHit();\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me              = this,\n            { grid, found } = me,\n            currentId       = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex    = grid.store.indexOf(currentId) || 0;\n\n        let prevHit;\n\n        if (!found.length) {\n            return;\n        }\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            if (found[i].index < currentIndex) {\n                prevHit = found[i];\n                break;\n            }\n        }\n\n        if (prevHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : prevHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoLastHit();\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered.\n     * @private\n     */\n    renderCell({ cellElement, column, record }) {\n        const\n            me           = this,\n            { classList } = cellElement,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls\n            }           = me,\n            hitIndex    = me.columnId === column.id && me.foundMap?.[record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            classList.add(me.hitCls);\n            cellElement.isQuickHit = true;\n            cellElement._originalContent = cellElement.innerHTML;\n\n            // if features have added other stuff to the cell, value is in div.b-grid-cell-value\n            // highlight in cell if found in innerHTML\n            const inner = treeWalker.currentNode = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                const\n                    nodeToReplace = textNode,\n                    textContent   = textNode.nodeValue,\n                    newText       = ['<span>'];\n\n                // Move onto next text node before we replace the node with a highlight HTML sequence\n                textNode = treeWalker.nextNode();\n\n                let offset = findRe.lastIndex;\n\n                // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                // a highlighting span which contains the target text.\n                for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                    const\n                        preamble    = textContent.substring(offset, match.index),\n                        spaceBefore = match[1] ? '\\xa0' : '',\n                        v           = match[2],\n                        spaceAfter  = match[3] ? '\\xa0' : '';\n\n                    newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                    offset = findRe.lastIndex;\n                }\n\n                newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '</span>');\n\n                // Insert a fragment with each match wrapped with a span.\n                nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                    fragment : true\n                }), nodeToReplace);\n                nodeToReplace.remove();\n            }\n            DomHelper.createElement({\n                parent    : cellElement,\n                className : me.hitCellBadgeCls,\n                text      : hitIndex\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onBackspace(event) {\n        const me = this;\n        if (me.find) {\n            me.find = me.find.substr(0, me.find.length - 1);\n            me.search(me.find);\n            return true;\n        }\n        return false;\n    }\n\n    clearSearch() {\n        if (this.find) {\n            this.find = '';\n            this.search(this.find);\n            return true;\n        }\n        return false;\n    }\n\n    showFilterEditor() {\n        const\n            me = this,\n            { filter } = me.client.features;\n\n        if (filter && me.columnId && me.foundCount) {\n            me.clear();\n            filter.showFilterEditor(me.client.columns.getById(me.columnId), me.find);\n        }\n    }\n\n    /**\n     * Chained function called on grids keypress event. Handles input for \"searchfield\".\n     * @private\n     * @param event\n     */\n    onElementKeyPress(event) {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        // Only react to keystrokes on grid cell elements\n        if (!event.handled && !me.disabled && focusedCell?.record && !focusedCell.isActionable && event.key?.length === 1) {\n            const column = grid.columns.getById(grid._focusedCell.columnId);\n            // if trying to search in invalid column, it's a hard failure\n            //<debug>\n            console.assert(column, 'Focused cell column not found');\n            //</debug>\n            if (column && column.searchable !== false) {\n                me.columnId = grid._focusedCell.columnId;\n                me.find += event.key;\n                me.search(me.find);\n            }\n        }\n    }\n\n    onCellNavigate(grid, fromCellSelector, toCellSelector) {\n        const\n            me    = this;\n\n        if (me.find && (!toCellSelector || toCellSelector.columnId !== me.columnId)) {\n            me.clear();\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(QuickFind);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport '../column/ActionColumn.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\n/**\n * @module Grid/feature/RowExpander\n */\n\nconst storeRemoveActions = { remove : 1, filter : 1, dataset : 1, replace : 1 };\n\n/**\n * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n * a button that expands or collapses the row.\n *\n * {@inlineexample Grid/feature/RowExpander.js}\n *\n * The content of the expanded row body is rendered by providing either a {@link #config-renderer} function to the\n * rowExpander feature config:\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            renderer({record, region, expanderElement}){\n *                return htmlToBeExpanded;\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * Or a {@link #config-widget} configuration object:\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            widget : {\n *                type : 'detailGrid',\n *            },\n *            dataField : 'orderDetails'\n *        }\n *    }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/RowExpanderWidget.js}\n *\n * <div class=\"note\">Note that if used in a Gantt, the Gant's `fixedRowHeight` must be set to `false`.</div>\n *\n * This feature is **disabled** by default\n *\n * ## Expand on click\n * Set {@link #config-triggerEvent} to a Grid cell event that should trigger row expanding and collapsing.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            triggerEvent: 'celldblclick',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Expander column position\n * The expander column can either be inserted before or after the existing Grid columns. If the Grid has multiple\n * regions the column will be added to the first region.\n *\n * Adjust expander column position to last in a specific Grid region by setting {@link #config-columnPosition}\n * to `last` and configuring the {@link #config-column} with a region name.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            column: {\n *                region: 'last'\n *            },\n *            columnPosition: 'last',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Record update\n * If the expander content depends on row record data, the expander can be re-rendered on record update by setting\n * {@link #config-refreshOnRecordChange} to `true`.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            refreshOnRecordChange: true,\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Async\n * When the content of the row expander should be rendered async just see to it that you return a promise.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            async renderer({record, region, expanderElement}){\n *                return fetchFromBackendAndRenderData(record);\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowExpander\n * @feature\n */\nexport default class RowExpander extends InstancePlugin.mixin(Delayable) {\n\n    //region Config\n    static $name = 'RowExpander';\n\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            // CSS classes\n            expanderBodyClass        : 'b-rowexpander-body',\n            expandedRowClass         : 'b-rowexpander-row-expanded',\n            shadowRootContainerClass : 'b-rowexpander-shadowroot-container',\n            // Map where the keys are the expanded records and values are an object\n            // {rowHeight, cellHeight, expandedBodyElements}\n            recordStateMap           : new Map(),\n            collapsingStateMap       : new Map()\n        };\n    }\n\n    static configurable = {\n\n        /**\n         * The implementation of this function is called each time the body of an expanded row is rendered. Either\n         * return an HTML string, a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup or any\n         * Widget configuration object, like a Grid configuration object for example.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return htmlToBeExpanded;\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * Or return a {@link Core.helper.DomHelper#typedef-DomConfig} object.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return {\n         *                   tag       : 'form',\n         *                   className : 'expanded-row-form',\n         *                   children  : [\n         *                       {\n         *                           tag        : 'textarea',\n         *                           name       : 'description',\n         *                           className  : 'expanded-textarea'\n         *                       },\n         *                       {\n         *                           tag        : 'button',\n         *                           text       : 'Save',\n         *                           className  : 'expanded-save-button',\n         *                       }\n         *                   ]\n         *                };\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * Or return a Widget configuration object. What differs a Widget configuration object from a DomConfig object\n         * is the presence of the `type` property and the absence of a `tag` property.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            async renderer({record, region, expanderElement}){\n         *                const myData = await fetch('myURL');\n         *                return {\n         *                   type : 'grid',\n         *                   autoHeight : true,\n         *                   columns : [\n         *                       ...\n         *                   ],\n         *                   data : myData\n         *                };\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * It is also possible to add markup directly to the expanderElement.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                new UIComponent({\n         *                    appendTo: expanderElement,\n         *                    ...\n         *                });\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * The renderer function can also be asynchronous.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            async renderer({record, region, expanderElement}){\n         *                return await awaitAsynchronousOperation();\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * @param {Object} renderData Object containing renderer parameters\n         * @param {Core.data.Model} renderData.record Record for the row\n         * @param {HTMLElement} renderData.expanderElement Expander body element\n         * @param {HTMLElement} renderData.rowElement Row element\n         * @param {String} renderData.region Grid region name\n         * @returns {String|DomConfig} Row expander body content\n         * @config {Function}\n         * @async\n         */\n        renderer : null,\n\n        /**\n         * The name of the Grid event that will toggle expander. Defaults to `null` but can be set to any event such\n         * as {@link Grid.view.mixin.GridElementEvents#event-cellDblClick} or\n         * {@link Grid.view.mixin.GridElementEvents#event-cellClick}.\n         *\n         * ```javascript\n         * features : {\n         *     rowExpander : {\n         *         triggerEvent : 'cellclick'\n         *     }\n         * }\n         * ```\n         *\n         * @config {String}\n         */\n        triggerEvent : null,\n\n        /**\n         * Provide a column config object to display a button with expand/collapse functionality.\n         * Shown by default, set to `null` to not include.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            column: {\n         *                // Use column config options here\n         *                region: 'last'\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {ActionColumnConfig|Grid.column.ActionColumn}\n         */\n        column : {},\n\n        /**\n         * Makes the expand/collapse button column appear either as the first column (default or `first`) or as the\n         * last (set to `last`). Note that the column by default will be added to the first region, if the Grid\n         * has multiple regions. Use the {@link #config-column} config to change region.\n         * @config {String}\n         * @default\n         */\n        columnPosition : 'first',\n\n        /**\n         * If set to `true`, the RowExpander will, on record update, re-render an expanded row by calling the\n         * {@link #config-renderer} function or recreate the configured {@link #config-widget}.\n         * @config {Boolean}\n         * @default\n         */\n        refreshOnRecordChange : false,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator height.\n         * @config {Number}\n         * @defalt\n         */\n        loadingIndicatorHeight : 100,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator text.\n         * @config {String}\n         * @default Loading\n         */\n        loadingIndicatorText : 'L{loading}',\n\n        /**\n         * Use this to disable expand and collapse animations.\n         * @config {Boolean}\n         * @default\n         */\n        enableAnimations : true,\n\n        /**\n         * A widget configuration object that will be used to create a widget to render into the row expander body. Can\n         * be used instead of providing a {@link #config-renderer}.\n         *\n         * If the widget needs a store, it can be populated by use of the {@link #config-dataField} config. This will\n         * create a store from the expanded record's corresponding `dataField` value, which needs to be an array of\n         * objects or a store itself.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            widget : {\n         *                type : 'detailGrid',\n         *            },\n         *            dataField : 'orderDetails'\n         *        }\n         *    }\n         * });\n         *\n         * @config {ContainerItemConfig}\n         */\n        widget : null,\n\n        /**\n         * Used together with {@link #config-widget} to populate the widget's Store from the expanded record's\n         * corresponding `dataField` value, which needs to be an array of objects or a store itself.\n         * @config {String}\n         */\n        dataField : null,\n\n        keyMap : {\n            // Private\n            Tab         : { handler : 'onTab', weight : 50 },\n            'Shift+Tab' : { handler : 'onShiftTab', weight : 50 }\n        },\n\n        /**\n         * When expanding a row and the expanded body element is not completely in view, setting this to `true` will\n         * automatically scroll the expanded row into view.\n         * @config {Boolean}\n         * @default\n         */\n        autoScroll : false\n    };\n\n    // Plugin configuration. This plugin chains/overrides some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain    : ['afterColumnsChange', 'beforeRenderRow', 'processRowHeight', 'bindStore', 'navigateUp'],\n            override : ['onGridBodyFocusIn', 'navigateDown', 'catchFocus', 'keyMapOnKeyDown']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n\n        if (!me.renderer && !me.widget) {\n            console.warn('RowExpander requires either a widget config or implementing the renderer function.');\n            return;\n        }\n        if (client.isGanttBase && client.fixedRowHeight !== false) {\n            console.warn('When using RowExpander on a Gantt, the Gantt`s fixedRowHeight config must be set to false.');\n        }\n\n        if (me.widget) {\n            GlobalEvents.ion({\n                theme   : me.onThemeChange,\n                thisObj : me\n            });\n        }\n\n        // Bind initial store\n        me.bindStore(client.store);\n\n        if (me.triggerEvent) {\n            client.ion({ [me.triggerEvent] : 'onTriggerEvent', thisObj : me });\n        }\n\n        me.addColumn();\n\n        me.resizeObserver = new ResizeObserver((entries) => me.onExpanderBodyResize(entries));\n    }\n\n    bindStore(store) {\n        const me = this;\n\n        me.recordStateMap.clear();\n        me.collapsingStateMap.clear();\n        me.detachListeners('clientStoreChange');\n\n        store.ion({\n            name    : 'clientStoreChange',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n\n    doDisable(disable) {\n        const { client } = this;\n\n        if (disable) {\n            this.recordStateMap.clear();\n            this.collapsingStateMap.clear();\n        }\n\n        if (!client.isConfiguring) {\n            client.rowManager.renderFromRow();\n        }\n        super.doDisable(disable);\n    }\n\n    changeLoadingIndicatorText(text) {\n        return text ? this.L(text) : text;\n    }\n\n    // Overrides onGridBodyFocusIn to ignore events on row expander body.\n    onGridBodyFocusIn(event) {\n        const me = this;\n\n        if (me.widget ? !event.target.matches(`.${me.expanderBodyClass}, .${me.shadowRootContainerClass}`)\n            : !me.client.lastMousedownEvent?.target?.closest('.' + me.expanderBodyClass)\n        ) {\n            me.overridden.onGridBodyFocusIn(event);\n        }\n    }\n\n    // Override keyMap key down so to not acting on keydown inside nested grid\n    keyMapOnKeyDown({ target }) {\n        if (!this.widget || !target.classList?.contains(this.shadowRootContainerClass)) {\n            this.overridden.keyMapOnKeyDown(...arguments);\n        }\n    }\n\n    get isAnimating() {\n        return this.client.isAnimating;\n    }\n\n    set isAnimating(value) {\n        const\n            { client }     = this,\n            wasAnimating   = client.isAnimating;\n        client.isAnimating = value;\n\n        if (client.isAnimating !== wasAnimating) {\n            client.element.classList.toggle('b-rowexpander-animating');\n        }\n    }\n\n    //endregion\n\n    //region Events\n    /**\n     * This event fires before row expand is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to expand the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeExpand\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires before row collapse is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to collapse the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeCollapse\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires when a row expand has finished expanding.\n     *\n     * Note that this event fires when actual row expander body is rendered, and not necessarily in immediate succession\n     * of an expand action. In the case of expanding a row that is not yet rendered into view by scrolling, it can happen\n     * much later.\n     *\n     * @event expand\n     * @param {Core.data.Model} record Record\n     * @param {Object} expandedElements An object with the Grid region name as property and the expanded body\n     * element as value\n     * @param {Core.widget.Widget} widget In case of expanding a Widget, this will be a reference to the instance\n     * created by the actual expansion\n     */\n\n    /**\n     * This event fires when a row has finished collapsing.\n     *\n     * @event collapse\n     * @param {Core.data.Model} record Record\n     */\n    //endregion\n\n    //region ExpanderColumn\n    afterColumnsChange() {\n        this.addColumn();\n    }\n\n    changeColumn(config) {\n        if (config == null) {\n            return config;\n        }\n        return {\n            type    : 'action',\n            actions : [{\n                cls     : 'b-icon b-icon-collapse-down',\n                tooltip : ({ record }) => this.L(this.recordStateMap.has(record) ? 'L{RowExpander.collapse}' : 'L{RowExpander.expand}'),\n                onClick : ({ record }) => this.toggleExpand(record)\n            }],\n            width    : 40,\n            hideable : false,\n            align    : 'center',\n            region   : this.client.regions[0],\n            ...config,\n            field    : 'expanderActionColumn'\n        };\n    }\n\n    // Called in construct and if grid columns change\n    addColumn() {\n        const\n            me          = this,\n            { column }  = me,\n            { columns } = me.client;\n\n        if (!me._isAddingExpanderColumn && column && (!me._expander || !columns.includes(me._expander))) {\n            me._isAddingExpanderColumn = true;\n            if (me.columnPosition === 'last') {\n                [me._expander] = columns.add(column);\n            }\n            else {\n                [me._expander] = columns.insert(0, column);\n            }\n            me._isAddingExpanderColumn = false;\n        }\n    }\n\n    //endregion\n\n    //region UI events\n\n    onTriggerEvent({ target }) {\n        // Only grid cell event is handled. Action-cell event has its own handler.\n        if (this.disabled || target?.closest('.b-action-cell') || !target.closest('.b-grid-cell')) {\n            return;\n        }\n        this.toggleExpand(this.client.getRecordFromElement(target));\n    }\n\n    /**\n     * Toggles expanded state.\n     * @private\n     * @param {Core.data.Model} record The record that should be toggled\n     * @category Internal\n     */\n    toggleExpand(record) {\n        if (record) {\n            if (this.recordStateMap.has(record)) {\n                this.collapse(record);\n            }\n            else {\n                this.expand(record);\n            }\n        }\n    }\n\n    onExpanderBodyResize(entries) {\n        const\n            { client } = this,\n            { store }  = client;\n\n        for (const entry of entries) {\n            const\n                record      = store.getById(entry.target.parentElement?._domData?.id),\n                recordState = record && this.recordStateMap.get(record);\n\n            if (recordState && !recordState.ignoreResize) {\n                const oldHeight = recordState.expanderBodyHeight;\n\n                recordState.expanderBodyHeight = null; // Clears saved height to recalc in processRowHeight\n                if (this.processRowHeight(record, 0) !== oldHeight) {\n                    // bufferedRenderer takes care of multiple rendering calls\n                    this.bufferedRenderer(record);\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Listens to changes in the Grid Store. Will remove expand State data on Store removal.\n     * If the refreshOnRecordChange config is `true`, it will trigger a re-render of the expander.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Store} source\n     * @param {Core.data.Model[]} records\n     * @category Internal\n     */\n    onStoreChange({ action, source, records, changes }) {\n        const\n            me                                     = this,\n            { recordStateMap, collapsingStateMap } = me,\n            changedKeys                            = changes && Object.keys(changes);\n\n        if (changedKeys?.length === 1 && source.modelClass.fieldMap[changedKeys[0]].type === 'store') {\n            return;\n        }\n        if (me.disabled) {\n            return;\n        }\n        if (action === 'removeAll') {\n            recordStateMap.clear();\n            collapsingStateMap.clear();\n        }\n        else if (storeRemoveActions[action]) {\n            for (const [record, state] of recordStateMap) {\n                if (!source.includes(record)) {\n                    state.widget?.destroy();\n                    recordStateMap.delete(record);\n                    collapsingStateMap.delete(record);\n                }\n            }\n        }\n        else if (me.refreshOnRecordChange && records?.length) {\n            if (action === 'update') {\n                const recordState = recordStateMap.get(records[0]);\n                if (recordState?.isCreated) {\n                    recordState.isCreated = false;\n                    me.client.rowManager.renderFromRecord(records[0]);\n                }\n            }\n            else if (action === 'updatemultiple') {\n                let topRecordIndex,\n                    topRecord;\n\n                for (const rec of records) {\n                    const recordState = recordStateMap.get(rec);\n\n                    if (recordState?.isCreated) {\n                        const index           = source.records.indexOf(rec);\n                        recordState.isCreated = false;\n\n                        if (!topRecord || topRecordIndex > index) {\n                            topRecordIndex = index;\n                            topRecord      = rec;\n                        }\n                    }\n                }\n                if (topRecord) {\n                    me.client.rowManager.renderFromRecord(topRecord);\n                }\n            }\n        }\n    }\n\n    // Implements grid.processRowHeight hook\n    processRowHeight(record, height) {\n        const recordState = this.recordStateMap.get(record);\n        if (recordState) {\n            // If we are waiting for async rendering, height is calculated from a fixed loadingIndicatorHeight.\n            if (!recordState.isCreated && recordState.isRenderingAsync) {\n                return this.loadingIndicatorHeight + height;\n            }\n\n            // If we have a recordState but no expanderBodyHeight, we should recalculate height.\n            if (!recordState.expanderBodyHeight) {\n                for (const region of this.client.regions) {\n                    const height = recordState.expandedBodyElements[region].offsetHeight;\n                    if (height > recordState.expanderBodyHeight) {\n                        recordState.expanderBodyHeight = height;\n                    }\n                }\n            }\n        }\n        return (recordState?.expanderBodyHeight ?? 0) + height;\n    }\n\n    /**\n     * Hooks on before row render to render or remove row expander content depending on record state.\n     * @private\n     * @category Internal\n     */\n    beforeRenderRow({ row, record }) {\n        const\n            me           = this,\n            { regions }  = me.client,\n            {\n                expandedRowClass,\n                collapsingStateMap\n            }            = me,\n            // The map only contains record that are expanded\n            recordState  = me.recordStateMap.get(record);\n\n        row.cls.toggle('b-rowexpander-disabled', me.disabled);\n\n        // If current row is expanded\n        if (row.cls[expandedRowClass]) {\n            // If animating a collapse, content should not be removed until animation is complete\n            if (me.enableAnimations && me.isAnimating && collapsingStateMap.has(record)) {\n                me.waitForTransition(row, () => {\n                    // Make sure record still should be collapsed after animation is complete\n                    const collapsingState = collapsingStateMap.get(record);\n\n                    if (collapsingState) {\n                        collapsingStateMap.delete(record);\n                        me.removeExpander(row);\n                        collapsingState.widget?.destroy();\n                    }\n                });\n            }\n            // Row is expanded but record should not be, remove expander\n            else if (!recordState) {\n                me.removeExpander(row);\n            }\n        }\n        else {\n            // Makes sure record should collapse no longer\n            collapsingStateMap.delete(record);\n        }\n\n        if (!me.disabled && recordState) {\n            // Expander content is created once, then reused.\n            if (!recordState.isCreated) {\n                recordState.ignoreResize = true; // Tells the resizeObserver to ignore this element right now\n                me.renderExpander(record, row, recordState);\n            }\n\n            row.cls.add(expandedRowClass);\n\n            for (const region of regions) {\n                const rowElement = row.getElement(region);\n\n                // isCreated means that the content has finished its creation process, which can be async\n                if (recordState.isCreated) {\n                    const bodyElement = recordState.expandedBodyElements[region];\n\n                    // If the bodyElement is connected to our rowElement, we do not need to do anything\n                    if (bodyElement.parentElement !== rowElement) {\n                        // If not, remove current content and add the created element\n                        DomHelper.removeEachSelector(rowElement, '.' + me.expanderBodyClass);\n                        rowElement.appendChild(bodyElement);\n\n                        // Observe body element to refresh grid when the body element resizes\n                        me.resizeObserver.observe(bodyElement);\n                    }\n\n                    recordState.ignoreResize = false;\n\n                    // Resolve the expand promise on next animation frame\n                    if (recordState.renderPromiseResolver) {\n                        me.delay(recordState.renderPromiseResolver);\n                        recordState.renderPromiseResolver = null;\n                    }\n                }\n                else {\n                    // If the renderer is async, we show a loading indicator.\n                    me.renderLoadingIndicator(rowElement, recordState);\n                }\n                me.lockCellHeight(rowElement, recordState.cellHeight, false);\n            }\n\n            // If expander body is rendered not fully in view, it will be scrolled into view\n            if (me._shouldScrollIntoView && me.autoScroll) {\n                me._shouldScrollIntoView = false;\n                if (!DomHelper.isInView(recordState.expandedBodyElements[regions[0]], true)) {\n                    // Wait for rendering to complete, then scroll\n                    me.client.rowManager.ion({\n                        once       : true,\n                        thisObj    : me,\n                        renderDone : () => me.scrollRowIntoView(row, record)\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Scrolls expanded row into view. This function is called after rowManager has finished rendering.\n     * @private\n     * @category Internal\n     */\n    scrollRowIntoView(row, record) {\n        // If animating expand, need to wait for the animation to end before scrolling.\n        if (this.isAnimating) {\n            this.waitForTransition(row, () => this.client.scrollRowIntoView(record));\n        }\n        else {\n            this.client.scrollRowIntoView(record);\n        }\n    }\n\n    /**\n     * Waits for height transition on the provided rows element. Then calls provided function.\n     * @private\n     * @category Internal\n     */\n    waitForTransition(row, fn) {\n        EventHelper.onTransitionEnd({\n            element  : row.element,\n            property : 'height',\n            handler  : fn,\n            thisObj  : this,\n            duration : DomHelper.getPropertyTransitionDuration(row.element, 'height') ?? 1\n        });\n    }\n\n    removeExpander(row, destroyWidget) {\n        row.cls.remove(this.expandedRowClass);\n\n        for (const region of this.client.regions) {\n            const rowElement = row.getElement(region);\n\n            for (const child of rowElement.querySelectorAll('.' + this.expanderBodyClass)) {\n                destroyWidget && child.widget?.destroy();\n                this.resizeObserver.unobserve(child);\n                child.remove();\n            }\n\n            // If this function is called after animation finished, we need to remove class `manually`\n            rowElement.classList.remove(this.expandedRowClass);\n\n            this.lockCellHeight(rowElement, null, false);\n        }\n    }\n\n    renderLoadingIndicator(rowElement, recordState) {\n        recordState.loadingIndicators.push(DomHelper.createElement({\n            parent    : rowElement,\n            className : this.expanderBodyClass + ' b-rowexpander-loading',\n            style     : {\n                top    : recordState.cellHeight,\n                height : this.loadingIndicatorHeight\n            },\n            children : [\n                {\n                    tag       : 'i',\n                    className : 'b-icon b-icon-spinner'\n                },\n                this.loadingIndicatorText\n            ]\n        }));\n    }\n\n    /**\n     * Creates expander element for each grid region and calls the renderer, also for each grid region.\n     * @private\n     * @param {Core.data.Model} record\n     * @param {Grid.row.Row} row\n     * @param {Object} recordState\n     * @category Internal\n     */\n    renderExpander(record, row, recordState) {\n        const\n            me                                   = this,\n            { client : grid, widget, dataField } = me,\n            cellHeight                           = row.cells[0]?.offsetHeight,\n            { expandedBodyElements = {} }        = recordState,\n            renderPromises                       = [],\n            // Will be called sync or async depending on the implementation of the renderer function.\n            continueRendering                    = (content, expanderElement, region) => {\n                if (content != null) {\n                    if (typeof content === 'string') {\n                        expanderElement.innerHTML = content;\n                    }\n                    else if (content.type && !content.tag) {\n                        createWidget(content, expanderElement);\n                    }\n                    // Everything else will be treated as a dom config for now\n                    else {\n                        content = DomHelper.createElement(content);\n                        expanderElement.appendChild(content);\n                    }\n                }\n                expandedBodyElements[region] = expanderElement;\n            },\n            createWidget = (widgetConfig, expanderElement) => {\n                const\n                    themeName           = DomHelper.getThemeInfo()?.name,\n                    shadowRootContainer = DomHelper.createElement({\n                        parent    : expanderElement,\n                        className : me.shadowRootContainerClass,\n                        style     : 'flex : 1'\n                    }),\n                    shadowRoot = shadowRootContainer._shadowRoot = shadowRootContainer.attachShadow({ mode : 'closed' });\n\n                renderPromises.push(DomHelper.cloneStylesIntoShadowRoot(shadowRoot).then(() => {\n                    if (grid.isDestroyed) {\n                        return;\n                    }\n\n                    if (dataField) {\n                        const fieldData = record.getValue(dataField);\n                        // This path is used if field is a StoreDataField\n                        if (fieldData?.isStore) {\n                            widgetConfig.store = fieldData;\n                        }\n                        else if (grid.store[`${dataField}Store`]) {\n                            const relatedStore = grid.store[`${dataField}Store`];\n                            widgetConfig.store = relatedStore.chain(r => record.getValue(dataField).includes(r));\n                        }\n                        else {\n                            widgetConfig.data = fieldData;\n                        }\n                    }\n\n                    if (themeName) {\n                        const\n                            { cls }  = widgetConfig,\n                            themeCls = `b-theme-${themeName.toLowerCase()}`;\n\n                        widgetConfig.cls = cls ? cls + ' ' + themeCls : themeCls;\n                    }\n\n                    recordState.widget = expanderElement.widget = Widget.create(ObjectHelper.assign({\n                        appendTo  : shadowRoot,\n                        owner     : grid,\n                        flex      : 1,\n                        minHeight : '5em',\n                        isNested  : true\n                    }, widgetConfig));\n\n                    if (dataField) {\n                        // If we have created a store, refresh expanded row on store changes\n                        recordState.widget.store.ion({\n                            change  : () => !row.isDestroyed && row.render(),\n                            thisObj : me\n                        });\n                    }\n\n                }).catch((href) => {\n                    throw new Error('Could not load stylesheet ' + href);\n                }));\n            };\n\n        // If another rendering of the same record is made while waiting for async, we should ignore it.\n        if (recordState.isRenderingAsync) {\n            return;\n        }\n\n        Object.assign(recordState, { cellHeight, expandedBodyElements, expanderBodyHeight : 0, loadingIndicators : [] });\n\n        for (const region of grid.regions) {\n            const\n                rowElement = row.getElement(region);\n            let expanderBodyElement = expandedBodyElements[region];\n\n            // class needed at this point to give the expander container correct height\n            row.addCls(me.expandedRowClass);\n\n            if (!expanderBodyElement) {\n                // Create expand container\n                // Expander element needs to be in the DOM for appendTo to work correctly\n                expanderBodyElement = DomHelper.createElement({\n                    parent    : rowElement,\n                    tabIndex  : -1,\n                    className : me.expanderBodyClass,\n                    style     : {\n                        top : cellHeight + 'px'\n                    }\n                });\n\n                me.resizeObserver.observe(expanderBodyElement);\n            }\n\n            let renderResponse;\n\n            if (widget) {\n                createWidget(widget, expanderBodyElement);\n            }\n            else {\n                // The renderer can be async or sync\n                renderResponse = me.renderer({\n                    record, expanderElement : expanderBodyElement, rowElement, region, grid\n                });\n            }\n\n            if (Objects.isPromise(renderResponse)) {\n                renderPromises.push(renderResponse.then(content => continueRendering(content, expanderBodyElement, region)));\n            }\n            else {\n                continueRendering(renderResponse, expanderBodyElement, region);\n            }\n        }\n\n        // If we have async renderer, wait for all to complete\n        if (renderPromises.length) {\n            recordState.isRenderingAsync = true;\n            Promise.all(renderPromises).then(() => {\n                // One of the promises (createWidget) can, while resolving, add another promise to the array\n                // That's why we need to do this twice\n                Promise.all(renderPromises).then(() => {\n                    if (grid.isDestroyed) {\n                        return;\n                    }\n                    // Flag that indicates the completion of expand rendering\n                    recordState.isCreated = true;\n                    // Remove loading indicator\n                    recordState.loadingIndicators?.forEach(li => li.remove());\n                    recordState.loadingIndicators.length = 0;\n\n                    recordState.ignoreResize = false;\n                    recordState.isRenderingAsync = false;\n\n                    // Initiate a render if all current states is created, this code should be executed once for each\n                    // state\n                    for (const [, state] of me.recordStateMap) {\n                        if (!state.isCreated) {\n                            return;\n                        }\n                    }\n\n                    // (?. since we might have been destroyed while waiting for promises)\n                    me.renderRowsWithAnimation?.(record, true);\n\n                });\n            });\n        }\n        else {\n            // Sync rendering\n            recordState.isCreated = true;\n        }\n    }\n\n    /**\n     * Called when grid rows needs to re-render, for example on expand or collapse.\n     * Activates animations on grid, and deactivates them when they are completed.\n     * @private\n     * @param {Core.data.Model} record Record whose row was toggled\n     * @category Internal\n     */\n    renderRowsWithAnimation(record) {\n        const me = this;\n\n        if (me.enableAnimations) {\n            const row = me.client.rowManager.getRowById(record);\n\n            if (row) {\n                me.isAnimating = true;\n\n                if (me.collapsingStateMap.has(record)) {\n                    row.addCls('b-row-is-collapsing');\n                }\n\n                me.waitForTransition(row, () => {\n                    me.isAnimating = false;\n                    if (!row.isDestroyed) {\n                        row.removeCls?.('b-row-is-collapsing');\n                    }\n                });\n            }\n        }\n        return me.bufferedRenderer(record);\n    }\n\n    /**\n     * Collects a rendering call for each record, saves them in array and calls the delayed (RAF) rafRenderer function\n     * @private\n     * @param {Core.data.Model} record Record whose row was toggled\n     * @category Internal\n     */\n    bufferedRenderer(record) {\n        (this._bufferedRecords ?? (this._bufferedRecords = [])).push(record);\n\n        if (!this._rafPromise) {\n            this._rafPromise = new Promise(resolve => {\n                requestAnimationFrame(() => {\n                    this.internalRender?.(resolve);\n                    this._rafPromise = null;\n                });\n            });\n        }\n\n        return this._rafPromise;\n    }\n\n    /**\n     * Re-renders the grid from the topmost record of those saved in bufferedRenderer\n     * @private\n     * @category Internal\n     */\n    internalRender(resolvePromise) {\n        const\n            me                   = this,\n            { _bufferedRecords } = me,\n            { store }            = me.client;\n\n        me.recordStateMap.forEach((state, record) => {\n            if (state.renderPromiseResolver && state.isCreated && !_bufferedRecords.includes(record)) {\n                _bufferedRecords.push(record);\n            }\n        });\n\n        const [top] = _bufferedRecords.sort((a, b) => store.indexOf(a) - store.indexOf(b));\n\n        me.client.rowManager.renderFromRecord(top);\n        _bufferedRecords.length = 0;\n\n        // So that rendering is completed when promises are resolved\n        me.delay(resolvePromise);\n    }\n\n    /**\n     * Called when row is expanded. This function locks all cell's height to current height (before expanding).\n     * @private\n     * @param {HTMLElement} rowElement\n     * @param {Number} cellHeight The height to lock\n     * @param {Boolean} unlock To remove locked cell height when the row is collapsed\n     * @category Internal\n     */\n    lockCellHeight(rowElement, cellHeight, unlock) {\n        for (let a = 0; a < rowElement.children.length; a++) {\n            const child = rowElement.children[a];\n            // Should not lock expander element\n            if (!child.classList.contains(this.expanderBodyClass)) {\n                child.style.height = unlock ? '' : cellHeight + 'px';\n            }\n        }\n    }\n\n    //endregion\n\n    //region Public\n\n    /**\n     * Tells the RowExpander that the provided record should be expanded. If or when the record is rendered into view,\n     * the record will be expanded.\n     *\n     * Promise will resolve when the row gets expanded. Note that this can be much later than the actual expand call,\n     * depending on response times and if current record is in view or not.\n     *\n     * @param {Core.data.Model} record Record whose row should be expanded\n     * @category Common\n     */\n    async expand(record, fromSplit = false) {\n        const me = this;\n\n        if (me.disabled || me.recordStateMap.has(record) || await me.trigger('beforeExpand', { record }) === false) {\n            return;\n        }\n\n        let recordState;\n\n        return new Promise((resolve) => {\n            recordState = {\n                isCreated             : false,\n                renderPromiseResolver : resolve\n            };\n            // Tells renderer that this record should be expanded\n            me.recordStateMap.set(record, recordState);\n\n            // In the event that we have expanded a record which is in collapsing animation state\n            me.collapsingStateMap.delete(record);\n            me._shouldScrollIntoView = true;\n\n            me.renderRowsWithAnimation(record);\n\n            // Propagate to splits\n            if (!fromSplit) {\n                me.client.syncSplits?.(other => other.features.rowExpander.expand(record, true));\n            }\n\n        }).then(() => {\n            me.trigger?.('expand', {\n                record,\n                expandedElements : recordState.expandedBodyElements,\n                widget           : recordState.widget\n            });\n        });\n    }\n\n    /**\n     * Tells the RowExpander that the provided record should be collapsed. If the record is in view, it will be\n     * collapsed. If the record is not in view, it will simply not be expanded when rendered into view.\n     *\n     * @param {Core.data.Model} record Record whose row should be collapsed\n     * @category Common\n     */\n    async collapse(record, fromSplit = false) {\n        const\n            me          = this,\n            recordState = me.recordStateMap.get(record);\n\n        if (me.disabled || await me.trigger('beforeCollapse', { record }) === false) {\n            return;\n        }\n\n        // Unobserve resize\n        if (recordState?.expandedBodyElements) {\n            for (const region in recordState.expandedBodyElements) {\n                me.resizeObserver.unobserve(recordState.expandedBodyElements[region]);\n            }\n        }\n\n        me.recordStateMap.delete(record);\n        me.collapsingStateMap.set(record, recordState);\n\n        await me.renderRowsWithAnimation(record);\n\n        me.trigger('collapse', { record });\n\n        // Propagate to splits\n        if (!fromSplit) {\n            me.client.syncSplits?.(other => other.features.rowExpander.collapse(record, true));\n        }\n    }\n\n    //endregion\n\n    // region Nested navigation\n\n    // Overrides the original, hence the if statement\n    navigateDown() {\n        if (!this.onKeyboardIn()) {\n            return this.overridden.navigateDown(...arguments);\n        }\n    }\n\n    // Chains the original\n    navigateUp() {\n        this.onKeyboardIn(true);\n    }\n\n    // Detects if focus is being reverted here by a nested grid, and focuses either the expanded row or the row below\n    catchFocus({ navigationDirection, source, editing }) {\n        if (this.widget) {\n            const\n                { client }      = this,\n                { focusedCell } = client;\n\n            for (let [record, state] of this.recordStateMap.entries()) {\n                for (const body in state.expandedBodyElements) {\n                    if (state.expandedBodyElements[body].widget === source) {\n                        if (navigationDirection === 'down') {\n                            record = client.store.getNext(record, undefined, true);\n                        }\n\n                        let column;\n                        // If a column has been navigated to earlier, focus that\n                        if (!editing && focusedCell && !focusedCell._isDefaultFocus) {\n                            column = focusedCell.column;\n                        }\n                        // Else, get best candidate\n                        else {\n                            column = this.getNavigateableColumn(client, true, editing && navigationDirection === 'up');\n                        }\n\n                        // In case the cell we want to revert to is the one that was focused previously\n                        client._focusedCell = null;\n\n                        const cellContext = client.normalizeCellContext({ record, column });\n\n                        client.focusCell(cellContext);\n\n                        if (editing) {\n                            client.startEditing(cellContext);\n                        }\n\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if the user keyboard navigates either from the expanded row and down, or the row below the expanded row\n    // and up. If so, and there is a Grid in the expanded body, it starts to keyboard navigate there\n    onKeyboardIn(up) {\n        if (this.widget) {\n            const\n                { focusedCell } = this.client,\n                state           = focusedCell && this.recordStateMap.get(focusedCell.record),\n                widget          = state?.expandedBodyElements?.[focusedCell?.column?.region]?.widget;\n\n            if (widget?.isGrid) {\n                let column;\n                // If a column has been navigated to earlier, focus that\n                if (widget.focusedCell && !widget.focusedCell._isDefaultFocus) {\n                    column = widget.focusedCell.column;\n                }\n                // Else, get the best possible candidate\n                else {\n                    column = this.getNavigateableColumn(widget);\n                }\n\n                // In case the cell we want to revert to is the one that was focused previously\n                widget._focusedCell = null;\n\n                widget.focusCell(widget.normalizeCellContext({ record : widget[`${up ? 'last' : 'first'}VisibleRow`], column }));\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Get the first column that is not the `checkboxSelectionColumn` and not the expander column.\n     * @param grid\n     * @param editable Also checks that the column has an `editor`\n     * @param reverse If `true`, this functions returns the last column which meets the requirements\n     * @private\n     */\n    getNavigateableColumn(grid, editable = true, reverse = false) {\n        const columns = reverse ? [...grid.columns.visibleColumns].reverse() : grid.columns.visibleColumns;\n\n        return columns.find(c =>\n            c !== grid.checkboxSelectionColumn &&\n            c !== grid.features.rowExpander?._expander &&\n            (!editable || c.editor)\n        ) ?? columns[0];\n    }\n\n    isActionAvailable({ action }) {\n        if (this.isDisabled) {\n            return false;\n        }\n\n        if (['rowExpander.onTab', 'rowExpander.onShiftTab'].includes(action)) {\n            return this.client.features.cellEdit?.isEditing;\n        }\n        // Return true to let customized actions through\n        return true;\n    }\n\n    onTab(previous) {\n        const\n            { client }   = this,\n            { cellEdit } = client.features;\n\n        if (cellEdit?.enabled) {\n            const\n                next             = previous !== true,\n                { activeRecord } = cellEdit,\n                nextCell         = cellEdit.getAdjacentEditableCell(client.focusedCell, next),\n                expandedRecord   = next ? activeRecord : (nextCell ? client.store.getById(nextCell.id) : null),\n                widget           = expandedRecord && this.recordStateMap.get(expandedRecord)?.widget;\n\n            if (activeRecord?.id !== nextCell?.id && widget?.features.cellEdit?.enabled) {\n                cellEdit.finishEditing().then(() => {\n                    const\n                        record = widget[`${next ? 'first' : 'last'}VisibleRow`],\n                        column = this.getNavigateableColumn(widget, true, !next);\n\n                    widget.startEditing(widget.normalizeCellContext({ record, column }));\n                });\n                return true;\n            }\n\n        }\n\n        // KeyMap continues to call action handlers for this shortcut\n        return false;\n    }\n\n    onShiftTab() {\n        return this.onTab(true);\n    }\n\n    // endregion\n\n    doDestroy() {\n        this.resizeObserver?.disconnect();\n        delete this.resizeObserver;\n\n        // destroy any nested widgets\n        for (const [, state] of this.recordStateMap) {\n            state.widget?.destroy();\n        }\n\n        super.doDestroy();\n    }\n\n    onThemeChange({ prev, theme }) {\n        for (const [, entry] of this.recordStateMap) {\n            Object.values(entry.expandedBodyElements).forEach(bodyElement => {\n                const shadowRootContainer = bodyElement.querySelector('.' + this.shadowRootContainerClass);\n                if (shadowRootContainer?._shadowRoot) {\n                    DomHelper.cloneStylesIntoShadowRoot(shadowRootContainer?._shadowRoot, true);\n                    bodyElement.widget?.element?.classList.remove(`b-theme-${prev}`);\n                    bodyElement.widget?.element?.classList.add(`b-theme-${theme}`);\n                }\n            });\n        }\n    }\n\n    /**\n     * Gets the corresponding expanded record from either a nested widget or an element in the expanded body.\n     * @param {HTMLElement|Core.widget.Widget} elementOrWidget\n     * @returns {Core.data.Model}\n     */\n    getExpandedRecord(elementOrWidget) {\n        for (const [rec, obj] of this.recordStateMap.entries()) {\n            if (elementOrWidget.isWidget && obj.widget) {\n                if (obj.widget === elementOrWidget) {\n                    return rec;\n                }\n            }\n            else {\n                const { expandedBodyElements } = obj;\n\n                for (const region in expandedBodyElements) {\n                    const curEl = expandedBodyElements[region];\n\n                    if (curEl === elementOrWidget || curEl.contains(elementOrWidget)) {\n                        return rec;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n}\n\nGridFeatureManager.registerFeature(RowExpander);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Should listen for store search also, to work the other way around\n// TODO: Buggy sometimes, try searching for Barcelona tigers, navigate using buttons\n// TODO: Allow regex\n// TODO: Optional case sensitive\n// TODO: build in UI, popup with keyboard shortcut?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/Search\n */\n\n/**\n * {@inlineexample Grid/feature/Search.js}\n *\n * Feature that allows the user to search the entire grid. Navigate between hits using the\n * keyboard, [F3] or [Ctrl/CMD + G] moves to next, also pressing [Shift] moves to previous.\n *\n * Note that this feature does not include a UI, please build your own and call appropriate methods in the feature.\n * For a demo implementation, see <a href=\"../examples/search/\" target=\"_blank\">Search example</a>.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n *\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys               | Action        | Action description                |\n * |--------------------|---------------|-----------------------------------|\n * | `F3`               | *goToNextHit* | Move focus to next search hit     |\n * | `Shift`+`F3`       | *goToPrevHit* | Move focus to previous search hit |\n * | `Ctrl`+`G`         | *goToNextHit* | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G` | *goToPrevHit* | Move focus to previous search hit |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable Search\n * let grid = new Grid({\n *   features: {\n *     search: true\n *   }\n * });\n *\n * // perform search\n * grid.features.search.search('steve');\n *\n * @demo Grid/search\n * @classtype search\n * @feature\n */\nexport default class Search extends Delayable(InstancePlugin) {\n    //region Init\n\n    static $name = 'Search';\n\n    static configurable = {\n        /**\n         * The maximum amount of search hits\n         * @config {Number}\n         * @default\n         */\n        limit : 1000,\n\n        /**\n         * Set to false to not show the search hit index numbers\n         * @config {Boolean}\n         * @default\n         */\n        showHitIndex : true,\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F3             : 'gotoNextHit',\n            'Ctrl+g'       : 'gotoNextHit',\n            'Shift+F3'     : 'gotoPrevHit',\n            'Ctrl+Shift+g' : 'gotoPrevHit'\n        }\n    };\n\n    static get properties() {\n        return {\n            hitCls          : 'b-search-hit',\n            hitCellCls      : 'b-search-hit-cell',\n            hitCellBadgeCls : 'b-search-hit-cell-badge',\n            hitTextCls      : 'b-search-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        Object.assign(this, {\n            grid,\n            text       : '',\n            hitEls     : [],\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n\n        // When new nodes appear due to node expand, include them in the search\n        grid.ion({\n            expandNode : 'onTreeNodeExpand',\n            thisObj    : this\n        });\n    }\n\n    isActionAvailable() {\n        return Boolean(this.text);\n    }\n\n    onTreeNodeExpand() {\n        if (this.text) {\n            this.requestAnimationFrame(this.search, [this.text, false, true]);\n        }\n    }\n\n    doDestroy() {\n        this.clear(true);\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['populateCellMenu']\n        };\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits.\n     * @param {String} text Text to search for\n     * @param {Boolean} [gotoHit] Go to first hit after search\n     * @param {Boolean} [reapply] Pass true to force search\n     * @param {String[]} [fields] An array of the fields to search for the value in\n     */\n    async search(text, gotoHit = true, reapply = false, fields, fromSplit = false) {\n        const me = this;\n\n        // empty search considered a clear\n        if (!text) {\n            return me.clear();\n        }\n\n        // searching for same thing again, do nothing\n        if (!reapply && text === me.text || me.disabled) {\n            return;\n        }\n\n        const\n            { grid, store } = me,\n            // Only search columns in use\n            columns         = grid.columns.visibleColumns.filter(col => col.searchable !== false),\n            formatters      = [];\n\n        fields      = fields || columns.map(col => {\n            // For date / number columns\n            formatters.push(col.formatValue?.bind(col));\n            return col.field;\n        });\n        const found = store.search(text, fields, formatters);\n\n        if (store.isTree && found.length) {\n            await grid.expandTo(found.map(hit => hit.id));\n        }\n\n        // Only include first result for merged cells in the count\n        for (const column of columns) {\n            if (column.mergeCells && column.isSorted) {\n                let prevValue = null,\n                    belongsTo = null;\n\n                for (const hit of found) {\n                    if (hit.field === column.field) {\n                        const value = hit.data[hit.field];\n                        if (value === prevValue) {\n                            hit.belongsTo = belongsTo;\n                        }\n                        prevValue = value;\n                        belongsTo = `${hit.field}-${hit.id}`;\n                    }\n                }\n            }\n        }\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            text,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(text))})(\\\\s+)?`, 'ig')\n        });\n\n        me.clearHits();\n\n        if (!found) {\n            return;\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            // merged cells reuse the index of the first hit in the range\n            me.foundMap[`${hit.field}-${hit.id}`] = hit.belongsTo ? me.foundMap[hit.belongsTo] : i++;\n            // limit hits\n            if (i > me.limit) {\n                break;\n            }\n        }\n\n        if (!me.listenersInitialized) {\n            grid.rowManager.ion({\n                name       : 'renderCell',\n                renderCell : 'renderCell',\n                thisObj    : me\n            });\n            store.ion({\n                name                                : 'storeRefresh',\n                [`refresh${grid.asyncEventSuffix}`] : 'onStoreRefresh',\n                thisObj                             : me\n            });\n            me.listenersInitialized = true;\n        }\n\n        grid.refreshRows();\n\n        grid.trigger('search', { grid, find : text, found });\n\n        if (gotoHit && !me.isHitFocused && !fromSplit) {\n            me.gotoNextHit(true);\n        }\n\n        grid.syncSplits?.(other => other.features.search.search(text, gotoHit, reapply, fields, true));\n\n        return found;\n    }\n\n    clearHits() {\n        // Clear old hits\n        for (const cellElement of DomHelper.children(this.grid.element, '.' + this.hitCls)) {\n            cellElement.classList.remove(this.hitCls, this.hitCellCls);\n\n            // Rerender cell to remove search-hit-text\n            const row = DomDataStore.get(cellElement).row;\n\n            // Merged cells have no row, but they will be cleared anyway by their own DomSync call\n            if (row) {\n                // Need to force replace the markup\n                row.forceInnerHTML = true;\n                row.renderCell(cellElement);\n                row.forceInnerHTML = false;\n            }\n        }\n    }\n\n    /**\n     * Clears search results.\n     */\n    clear(silent = false) {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.foundMap) {\n            delete me.foundMap;\n        }\n\n        me.text = null;\n\n        me.clearHits();\n\n        if (me.listenersInitialized) {\n            me.detachListeners('renderCell');\n            me.detachListeners('storeRefresh');\n            me.listenersInitialized = false;\n        }\n\n        if (!silent) {\n            grid.trigger('clearSearch', { grid });\n\n            // Propagate to other grids when splitting\n            grid.syncSplits?.(other => other.features.search.clear());\n        }\n    }\n\n    /**\n     * Number of results found\n     * @readonly\n     * @property {Number}\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Returns true if focused row is a hit\n     * @property {Boolean}\n     * @readonly\n     */\n    get isHitFocused() {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        if (focusedCell?.cell?.contains(DomHelper.getActiveElement(grid.element))) {\n            const { rowIndex, column } = focusedCell;\n\n            return rowIndex !== -1 && me.found.some(hit =>\n                hit.index === rowIndex && column && hit.field === column.field\n            );\n        }\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit(fromStart = false) {\n        const\n            me = this;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, store } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell && fromStart !== true ? store.indexOf(fromCell.record, undefined, true) : -1,\n            nextHit         = me.found.findIndex(hit => hit.index > currentIndex);\n\n        if (nextHit !== -1) {\n            me.gotoHit(nextHit);\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me        = this,\n            { store } = me;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, found } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell ? store.indexOf(fromCell.record, undefined, true) : 0;\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            const hit = found[i];\n            if (hit.index < currentIndex) {\n                me.gotoHit(i);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const\n            { grid } = this,\n            nextHit  = this.found[index];\n\n        if (nextHit) {\n            grid.focusCell({\n                field : nextHit.field,\n                id    : nextHit.id\n            });\n        }\n\n        return Boolean(nextHit);\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered. Highlights search hits.\n     * @private\n     */\n    renderCell({ cellElement, column, record, value }) {\n        const\n            me       = this,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls,\n                showHitIndex\n            }        = me,\n            hitIndex = me.foundMap?.[column.field + '-' + record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            cellElement.classList.add(me.hitCls);\n\n            // Remove any previous hit badge\n            showHitIndex && cellElement.querySelector(`.${me.hitCellBadgeCls}`)?.remove();\n\n            // highlight in cell if found in innerHTML\n            const inner = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            if (String(value).toLowerCase() === String(me.text).toLowerCase()) {\n                inner.innerHTML = `<span class=\"${me.hitTextCls}\">${inner.innerHTML}</span>${showHitIndex ? `<div class=\"${me.hitCellBadgeCls}\">${hitIndex}</div>` : ''}`;\n            }\n            // Replace every occurrence of the text in every descendant text node with a span\n            // encapsulating the matched string.\n            else {\n                treeWalker.currentNode = inner;\n                for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                    const\n                        nodeToReplace = textNode,\n                        textContent   = textNode.nodeValue,\n                        newText       = ['<span>'];\n\n                    // Move onto next text node before we replace the node with a highlihght HTML sequence\n                    textNode = treeWalker.nextNode();\n\n                    let offset = findRe.lastIndex;\n\n                    // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                    // a highlighting span which contains the target text.\n                    for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                        const\n                            preamble    = textContent.substring(offset, match.index),\n                            spaceBefore = match[1] ? '\\xa0' : '',\n                            v           = match[2],\n                            spaceAfter  = match[3] ? '\\xa0' : '';\n\n                        newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${StringHelper.encodeHtml(v)}</span>${spaceAfter}`);\n                        offset = findRe.lastIndex;\n                    }\n\n                    newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '<span>');\n\n                    // Insert a fragment with each match wrapped with a span.\n                    nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                        fragment : true\n                    }), nodeToReplace);\n                    nodeToReplace.remove();\n                }\n\n                if (showHitIndex) {\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : me.hitCellBadgeCls,\n                        text      : hitIndex\n                    });\n                }\n            }\n\n            me.hitEls.push(cellElement);\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Add search menu item to cell context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ column, record, items, cellElement }) {\n        const me = this;\n\n        if (column.searchable) {\n            items.search = {\n                text        : 'L{searchForValue}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-search',\n                cls         : 'b-separator',\n                weight      : 200,\n                disabled    : me.disabled,\n                onItem      : () => {\n                    // <remove-on-release>\n                    // TODO: Only extract selection from current cell instead? Lazy way for now\n                    // </remove-on-release>\n                    let sel = globalThis.getSelection().toString();\n\n                    if (!sel) {\n                        sel = cellElement.innerText;\n                    }\n\n                    me.search(sel);\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onStoreRefresh() {\n        this.search(this.text, false, true);\n    }\n\n    //endregion\n}\n\nSearch.featureClass = 'b-search';\n\nGridFeatureManager.registerFeature(Search);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/StickyCells\n */\n\n/**\n * A feature which pins configurable content from a grid row to the top of the grid\n * while the row scrolls off the top but is still visible.\n *\n * As soon as the row becomes too small to contain the content, it is unpinned, and\n * scrolls out naturally, and the following row's configured content becomes pinned.\n *\n * For example:\n *\n * ```javascript\n *     new Grid({\n *         features : {\n *             stickyCells : {\n *                 // Identifies elements to clone and pin to the grid top.\n *                 contentSelector : '.myClassName'\n *             }\n *         }\n *     });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyCells\n * @feature\n */\nexport default class StickyCells extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'StickyCells';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A CSS selector which must identify the content within your grid row which you\n             * require to be pinned to the grid while the row if the topmost row, and remains visible.\n             * @config {String}\n             */\n            contentSelector : null,\n\n            currentTopRowCls : 'b-sticky-cells-current-top-row'\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            before : ['renderRows']\n        };\n    }\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        // We cannot chain our client's onGridScroll because that is now a delayable injected method.\n        grid.ion({\n            scroll  : 'onGridScroll',\n            thisObj : this\n        });\n        Object.assign(this, DomHelper.createElement({\n            reference : 'element',\n            parent    : grid.element,\n            className : 'b-grid-sticky-row',\n            children  : [{\n                reference : 'contentElement',\n                className : 'b-grid-cell'\n            }]\n        }));\n\n        // Clean these classes from copied cell and row classLists\n        this.removeClasses = {\n            'b-focused'             : false,\n            'b-hover'               : false,\n            'b-selected'            : false,\n            [this.currentTopRowCls] : false\n        };\n    }\n\n    renderRows() {\n        // Do not leave stranded sticky row visible on data change\n        this.element.classList.add('b-hide-visibility');\n    }\n\n    onGridScroll() {\n        const\n            me = this,\n            {\n                client : grid,\n                element,\n                contentElement\n            } = me,\n            gridViewport  = Rectangle.client(grid.bodyContainer).roundPx(),\n            currentTopRow = grid.rowManager.getRowAt(gridViewport.y),\n            topRowChanged = currentTopRow !== me.currentTopRow;\n\n        if (currentTopRow) {\n            if (topRowChanged) {\n                if (me.currentTopRow) {\n                    me.currentTopRow.removeCls(me.currentTopRowCls);\n                    me.currentTopRow.removeCls('b-not-enough-height');\n                }\n\n                me.currentTopRow = currentTopRow;\n                currentTopRow.addCls(me.currentTopRowCls);\n\n                contentElement.innerHTML = '';\n                contentElement.appendChild(me.updateStickyContent());\n            }\n\n            // If the outgoing row is not too tall, and doesn't *need* the content\n            // pinning to the top, hide the sticky row, and make the source sticky\n            // elements pin themselves to the bottom of the cell using the b-not-enough-height\n            // class to switch them to align-self: flex-end\n            const notEnoughHeight = me.currentTopRow.bottom - me.client.scrollable.y <= me.stickyContentHeight;\n            me.element.classList[notEnoughHeight ? 'add' : 'remove']('b-hide-visibility');\n            me.currentTopRow[notEnoughHeight ? 'addCls' : 'removeCls']('b-not-enough-height');\n\n            // Keep sticky row aligned while constrained to the viewport.\n            // This keeps it pinned to the top.\n            gridViewport.y += me.stickyContentTop;\n            DomHelper.alignTo(element, me.stickyEls[0], { align : 't0-t0', constrainTo : gridViewport }, true);\n        }\n\n        me.lastProcessedTopRow = currentTopRow;\n    }\n\n    updateStickyContent() {\n        const\n            me            = this,\n            {\n                currentTopRow,\n                removeClasses\n            }             = me,\n            rowClasses   = {\n                'b-grid-sticky-row' : 1\n            },\n            cellClasses  = {},\n            stickyContent = me.stickyContent || (me.stickyContent = document.createDocumentFragment()),\n            stickyEls     = me.stickyEls || (me.stickyEls = []);\n\n        // Release the sticky state on the previous row's sticky elements\n        stickyEls.forEach(e => {\n            e.classList.remove('b-sticky-content-el');\n        });\n\n        // Collect the elements we need to clone from the current top row\n        stickyEls.length = 0;\n        currentTopRow.eachElement(rowEl => {\n            stickyEls.push(...rowEl.querySelectorAll(me.contentSelector));\n        });\n\n        // Clear the documentFragment which we use to hold our clones\n        while (stickyContent.firstChild) {\n            stickyContent.remove(stickyContent.firstChild);\n        }\n\n        me.stickyContentHeight = 0;\n        me.stickyContentTop = 0;\n\n        // Clone the selected elements and measure them for alignment.\n        stickyEls.map(e => {\n            // Collect the app classes that may be necessary on the cell and row elements.\n            e.closest('.b-grid-cell').classList.forEach(cls => cellClasses[cls] = 1);\n            e.closest('.b-grid-row').classList.forEach(cls => rowClasses[cls] = 1);\n\n            // Clean out grid's classes from the class sets.\n            Object.assign(cellClasses, removeClasses);\n            Object.assign(rowClasses,  removeClasses);\n\n            const eTop = e.offsetTop;\n\n            me.stickyContentTop = Math.max(me.stickyContentTop, eTop);\n\n            // We need to know how tall the sticky content is\n            e.style.alignSelf = 'flex-end';\n            me.stickyContentHeight = Math.max(me.stickyContentHeight, me.currentTopRow.height - e.offsetTop + eTop);\n            e.style.alignSelf = '';\n\n            const result = e.cloneNode(true);\n\n            // Tag the content al *after* cloning it.\n            e.classList.add('b-sticky-content-el');\n\n            stickyContent.appendChild(result);\n\n            return result;\n        });\n\n        cellClasses['b-focused'] = false;\n        DomHelper.syncClassList(me.contentElement, cellClasses);\n        DomHelper.syncClassList(me.element, rowClasses);\n\n        return stickyContent;\n    }\n}\n\nGridFeatureManager.registerFeature(StickyCells, false);\n","import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\n\n/**\n * @module Grid/feature/experimental/FileDrop\n */\n\n/**\n * An experimental feature that lets users drop files on a Widget. The widget fires an event when a file is dropped onto it.\n * In the event, you get access to the raw files as strings, that were parsed by calling `readAsBinaryString`.\n *\n * NOTE: Currently only supports dropping one file at a time.\n *\n * @experimental\n * @extends Core/mixin/InstancePlugin\n * @classtype fileDrop\n * @feature\n */\nexport default class FileDrop extends InstancePlugin {\n    static $name = 'FileDrop';\n\n    construct(client, config) {\n        const me = this;\n\n        super.construct(client, config);\n\n        // Setup event listeners for dragging files onto the grid element\n        EventHelper.on({\n            element   : client.element,\n            thisObj   : me,\n            drop      : me.onFileDrop,\n            dragover  : me.onFileDragOver,\n            dragenter : me.onFileDragEnter,\n            dragleave : me.onFileDragLeave\n        });\n    }\n\n    onFileLoad(domEvent) {\n\n        this.client.trigger('fileDrop', {\n            file : this.file, domEvent\n        });\n    }\n\n    onFileDragEnter() {\n        // Mouse over styling while dragging a file\n        this.client.element.classList.add('b-dragging-file');\n    }\n\n    onFileDragOver(event) {\n        event.preventDefault();\n    }\n\n    onFileDragLeave(event) {\n        const { element } = this.client;\n\n        if (event.relatedTarget && !element.contains(event.relatedTarget)) {\n            this.client.element.classList.remove('b-dragging-file');\n        }\n    }\n\n    onFileDrop(domEvent) {\n        // Prevent default behavior (prevents the file from being opened)\n        domEvent.preventDefault();\n        const file = domEvent.dataTransfer.items[0].getAsFile();\n\n        /**\n         * Fired when a file is dropped on the widget element\n         * @event fileDrop\n         * @param {Grid.view.Grid} source The owning Grid instance\n         * @param {DataTransferItem} file The dropped file descriptor\n         * @param {DragEvent} domEvent The native DragEvent\n         * @on-owner\n         */\n        this.client.trigger('fileDrop', { file, domEvent });\n\n        this.onFileDragLeave(domEvent);\n    }\n}\n\nGridFeatureManager.registerFeature(FileDrop, false, 'Grid');\n","import ChipView from '../../Core/widget/ChipView.js';\nimport Store from '../../Core/data/Store.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Grid/widget/GroupBar\n */\n\n/**\n * A widget used to manage grouping of a tree with the {@link Grid.feature.TreeGroup} feature. Column headers can be\n * drag-dropped on this widget to regroup the data in the tree store. This widget only handles column-based grouping,\n * and doesn't handle custom group functions.\n *\n * ```javascript\n * const tree = new TreeGrid({\n *     appendTo : 'container',\n *     features : {\n *         treeGroup : {\n *             hideGroupedColumns : true,\n *             levels             : [\n *                 'manager',\n *                 'airline'\n *             ],\n *             parentRenderer : (field, data) => `${StringHelper.capitalize(field)}: ${data.name}`\n *         }\n *     },\n *\n *     columns : [\n *         {\n *             text  : 'Name',\n *             field : 'name',\n *             flex  : 3,\n *             type  : 'tree'\n *         },\n *         {\n *             text   : 'Airline',\n *             field  : 'airline',\n *             align  : 'center',\n *             flex   : 2,\n *         },\n *         {\n *             type  : 'check',\n *             text  : 'Domestic',\n *             field : 'domestic',\n *             align : 'left',\n *             flex  : 1\n *         },\n *         {\n *             type  : 'number',\n *             text  : 'Capacity',\n *             field : 'capacity',\n *             flex  : 1\n *         },\n *         {\n *             type  : 'number',\n *             text  : 'Crew',\n *             field : 'crew',\n *             flex  : 1\n *         }\n *     ],\n *\n *     tbar : [\n *         'Group by',\n *         {\n *             type : 'groupbar'\n *         }\n *     ]\n * ```\n * @classtype groupbar\n * @extends Core/widget/ChipView\n * @demo Grid/tree-grouping\n * @widget\n */\nexport default class GroupBar extends ChipView {\n    static type  = 'groupbar';\n    static $name = 'GroupBar';\n\n    static configurable = {\n        selectedCls : 'not-used',\n        itemTpl(record) {\n            return StringHelper.encodeHtml(StringHelper.capitalize(record.getValue(this.displayField)));\n        }\n    };\n\n    construct() {\n        super.construct(...arguments);\n\n        const treeGrid = this.treeGrid = this.up('gridbase', true);\n\n        if (!treeGrid) {\n            throw new Error('GroupBar must be used inside a Grid component');\n        }\n        treeGrid.ion({\n            paint   : this.onTreePaint,\n            once    : true,\n            thisObj : this\n        });\n    }\n\n    onTreePaint() {\n        const\n            me           = this,\n            { treeGrid } = me,\n            { treeGroup, columnReorder } = treeGrid.features;\n\n        if (!treeGroup) {\n            throw new Error('GroupBar widget requires the TreeGroup feature to be present');\n        }\n\n        columnReorder.usingGroupBarWidget = true;\n\n        me.store = new Store({\n            fields            : ['cls', 'ascending'],\n            internalListeners : {\n                add     : me.onStoreChanged,\n                remove  : me.onStoreChanged,\n                thisObj : me\n            }\n        });\n\n        treeGrid.ion({\n            treeGroupChange          : me.onTreeGroupChanged,\n            beforeColumnDropFinalize : me.onBeforeColumnDropFinalize,\n            columnDrag               : me.onColumnDrag,\n            columnDragStart          : me.onColumnDragStart,\n            columnDrop               : me.onColumnDrop,\n            thisObj                  : me\n        });\n\n        me.onTreeGroupChanged({ levels : treeGroup.levels });\n    }\n\n    onStoreChanged({ records }) {\n        const\n            me           = this,\n            { treeGrid } = me;\n\n        if (!me.treeGrid.isConstructing && records?.[0]?.cls !== 'b-drop-target') {\n            me.ignoreGroupChange               = true;\n            treeGrid.features.treeGroup.levels = me.store.map(({ field }) => field);\n            me.ignoreGroupChange               = false;\n        }\n    }\n\n    onTreeGroupChanged({ levels }) {\n        if (!this.ignoreGroupChange) {\n            if (levels.some(level => level instanceof Function && !level.fieldName)) {\n                throw new Error('GroupBar only supports column grouping');\n            }\n            this.store.data = (levels || []).map(level => {\n                level = level.fieldName || level;\n                return this.treeGrid.columns.get(level);\n            });\n        }\n    }\n\n    onColumnDragStart() {\n        this.store.add({ id : 'placeholder', cls : 'b-drop-target' }); // no-sanity\n    }\n\n    onColumnDrag({ context, column, event }) {\n        const overGroupBar = event.target.closest('.b-groupbar');\n\n        if (overGroupBar) {\n            context.valid = true;\n        }\n    }\n\n    onBeforeColumnDropFinalize({ column, event }) {\n        const droppedOnGroupBar = event.target.closest('.b-groupbar');\n\n        if (droppedOnGroupBar) {\n            if (!column.isTreeColumn) {\n                this.store.getById('placeholder').remove();\n                this.store.add(column);\n            }\n        }\n    }\n\n    onColumnDrop() {\n        this.store.getById('placeholder')?.remove();\n    }\n}\n\nGroupBar.initClass();\n","import Combo from '../../Core/widget/Combo.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Grid/view/TreeGrid.js';\n\n/**\n * @module Grid/widget/TreeCombo\n */\n\n/**\n * A powerful {@link Core/widget/Combo} box using a {@link Grid/view/TreeGrid} as its drop down widget. You can define\n * your own set of columns to display and use all the regular features of the Grid.\n *\n * {@inlineexample Grid/widget/TreeCombo.js}\n *\n * ```javascript\n * new TreeCombo({\n *     label    : 'Pick task(s)',\n *     width    : '30em',\n *     appendTo : document.body,\n *     picker   : {\n *         // Define the columns to show in the grid\n *         columns : [\n *             { type : 'tree', text : 'Tasks', field : 'name', flex : 1 },\n *             { text : 'Priority', field : 'prio' }\n *         ]\n *     },\n *     chipView : {\n *         // Render the chips in the combo field\n *         itemTpl(record) {\n *             return StringHelper.xss`${record.name}`;\n *         }\n *     },\n *     store : {\n *         fields     : [\n *             'prio'\n *         ],\n *         data : [\n *             {\n *                 name     : 'Development Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 1, name : 'Improve React docs', prio : 'High' },\n *                     { id : 2, name : 'Build Angular module', prio : 'Low' },\n *                     { id : 3, name : 'Creat Vue project', prio : 'Low' }\n *                 ]\n *             },\n *             { name : 'Customer meeting', prio : 'Normal' },\n *             {\n *                 name     : 'Customer Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 4, name : 'Intro meeting', prio : 'Normal' },\n *                     { id : 5, name : 'Build POC', prio : 'High' },\n *                     { id : 6, name : 'Documentation', prio : 'Low' }\n *                 ]\n *             }\n *         ]\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype treecombo\n * @inputfield\n */\nexport default class TreeCombo extends Combo {\n    static $name = 'TreeCombo';\n\n    static type = 'treecombo';\n\n    static configurable = {\n        multiSelect : true,\n        picker      : {\n            type                       : 'treegrid',\n            minWidth                   : '35em',\n            disableGridRowModelWarning : true,\n            selectionMode              : {\n                row                  : true,\n                rowCheckboxSelection : true\n            }\n        },\n        chipView : {\n            itemTpl(record) {\n                return StringHelper.xss`${record.name}`;\n            },\n            scrollable : {\n                overflowX : 'hidden-scroll'\n            }\n        }\n    };\n\n    changePicker(picker, oldPicker) {\n        picker = super.changePicker(picker, oldPicker);\n\n        picker?.ion({\n            selectionChange : 'onPickerSelectionChange',\n            thisObj         : this\n        });\n\n        return picker;\n    }\n\n    updateMultiSelect(multiSelect) {\n        super.updateMultiSelect(...arguments);\n\n        this.picker.selectionMode.multiSelect = multiSelect;\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(...arguments);\n\n        this.picker.readOnly = readOnly;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    set value(value) {\n        // indicate we are setting the field value\n        this._settingValue = true;\n\n        super.value = value;\n\n        // select provided value enitres in the picker\n        this.picker.selectedRecords = value.map?.(val => this.store.getById(val)) || [];\n\n        this._settingValue = false;\n    }\n\n    onPickerSelectionChange({ selection }) {\n        // apply selection to value (if we aren't in the middle of value setting)\n        if (!this._settingValue) {\n            this.value = selection;\n        }\n    }\n}\n\nTreeCombo.initClass();\n","// column\nexport { default as ActionColumn } from '../lib/Grid/column/ActionColumn.js';\nexport { default as AggregateColumn } from '../lib/Grid/column/AggregateColumn.js';\nexport { default as CheckColumn } from '../lib/Grid/column/CheckColumn.js';\nexport { default as ColorColumn } from '../lib/Grid/column/ColorColumn.js';\nexport { default as Column } from '../lib/Grid/column/Column.js';\nexport { default as DateColumn } from '../lib/Grid/column/DateColumn.js';\nexport { default as NumberColumn } from '../lib/Grid/column/NumberColumn.js';\nexport { default as PercentColumn } from '../lib/Grid/column/PercentColumn.js';\nexport { default as RatingColumn } from '../lib/Grid/column/RatingColumn.js';\nexport { default as RowNumberColumn } from '../lib/Grid/column/RowNumberColumn.js';\nexport { default as TemplateColumn } from '../lib/Grid/column/TemplateColumn.js';\nexport { default as TimeColumn } from '../lib/Grid/column/TimeColumn.js';\nexport { default as TreeColumn } from '../lib/Grid/column/TreeColumn.js';\nexport { default as WidgetColumn } from '../lib/Grid/column/WidgetColumn.js';\n\n// data\nexport { default as ColumnStore } from '../lib/Grid/data/ColumnStore.js';\nexport { default as GridRowModel } from '../lib/Grid/data/GridRowModel.js';\n\n// feature\nexport { default as CellCopyPaste } from '../lib/Grid/feature/CellCopyPaste.js';\nexport { default as CellEdit } from '../lib/Grid/feature/CellEdit.js';\nexport { default as CellMenu } from '../lib/Grid/feature/CellMenu.js';\nexport { default as CellTooltip } from '../lib/Grid/feature/CellTooltip.js';\nexport { default as ColumnAutoWidth } from '../lib/Grid/feature/ColumnAutoWidth.js';\nexport { default as ColumnDragToolbar } from '../lib/Grid/feature/ColumnDragToolbar.js';\nexport { default as ColumnPicker } from '../lib/Grid/feature/ColumnPicker.js';\nexport { default as ColumnRename } from '../lib/Grid/feature/ColumnRename.js';\nexport { default as ColumnReorder } from '../lib/Grid/feature/ColumnReorder.js';\nexport { default as ColumnResize } from '../lib/Grid/feature/ColumnResize.js';\nexport { default as FillHandle } from '../lib/Grid/feature/FillHandle.js';\nexport { default as Filter } from '../lib/Grid/feature/Filter.js';\nexport { default as FilterBar } from '../lib/Grid/feature/FilterBar.js';\nexport { default as GridFeatureManager } from '../lib/Grid/feature/GridFeatureManager.js';\nexport { default as Group } from '../lib/Grid/feature/Group.js';\nexport { default as GroupSummary } from '../lib/Grid/feature/GroupSummary.js';\nexport { default as HeaderMenu } from '../lib/Grid/feature/HeaderMenu.js';\nexport { default as MergeCells } from '../lib/Grid/feature/MergeCells.js';\nexport { default as QuickFind } from '../lib/Grid/feature/QuickFind.js';\nexport { default as RegionResize } from '../lib/Grid/feature/RegionResize.js';\nexport { default as RowCopyPaste } from '../lib/Grid/feature/RowCopyPaste.js';\nexport { default as RowExpander } from '../lib/Grid/feature/RowExpander.js';\nexport { default as RowReorder } from '../lib/Grid/feature/RowReorder.js';\nexport { default as Search } from '../lib/Grid/feature/Search.js';\nexport { default as Sort } from '../lib/Grid/feature/Sort.js';\nexport { default as StickyCells } from '../lib/Grid/feature/StickyCells.js';\nexport { default as Stripe } from '../lib/Grid/feature/Stripe.js';\nexport { default as Split } from '../lib/Grid/feature/Split.js';\nexport { default as Summary } from '../lib/Grid/feature/Summary.js';\nexport { default as Tree } from '../lib/Grid/feature/Tree.js';\nexport { default as TreeGroup } from '../lib/Grid/feature/TreeGroup.js';\n\n// feature base\nexport { default as CopyPasteBase } from '../lib/Grid/feature/base/CopyPasteBase.js';\n\n// export feature\nexport { default as ExportDialog } from '../lib/Grid/view/export/ExportDialog.js';\nexport { default as Exporter } from '../lib/Grid/feature/export/exporter/Exporter.js';\nexport { default as ExportOrientationCombo } from '../lib/Grid/view/export/field/ExportOrientationCombo.js';\nexport { default as ExportRowsCombo } from '../lib/Grid/view/export/field/ExportRowsCombo.js';\nexport { default as MultiPageExporter } from '../lib/Grid/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Grid/feature/export/PdfExport.js';\nexport { default as SinglePageExporter } from '../lib/Grid/feature/export/exporter/SinglePageExporter.js';\nexport { FileFormat, Orientation, PaperFormat, RowsRange } from '../lib/Grid/feature/export/Utils.js';\n\n// feature experimental\nexport { default as ExcelExporter } from '../lib/Grid/feature/experimental/ExcelExporter.js';\nexport { default as FileDrop } from '../lib/Grid/feature/experimental/FileDrop.js';\n\n// row\nexport { default as Row } from '../lib/Grid/row/Row.js';\n\n// util\nexport { default as Location } from '../lib/Grid/util/Location.js';\nexport { default as TableExporter } from '../lib/Grid/util/TableExporter.js';\n\n// view\nexport { default as Bar } from '../lib/Grid/view/Bar.js';\nexport { default as Footer } from '../lib/Grid/view/Footer.js';\nexport { default as Grid } from '../lib/Grid/view/Grid.js';\nexport { default as GridBase } from '../lib/Grid/view/GridBase.js';\nexport { default as Header } from '../lib/Grid/view/Header.js';\nexport { default as RowManager } from '../lib/Grid/row/RowManager.js';\nexport { default as SubGrid } from '../lib/Grid/view/SubGrid.js';\nexport { default as TreeGrid } from '../lib/Grid/view/TreeGrid.js';\n\n// view mixin\nexport { default as GridElementEvents } from '../lib/Grid/view/mixin/GridElementEvents.js';\nexport { default as GridFeatures } from '../lib/Grid/view/mixin/GridFeatures.js';\nexport { default as GridResponsive } from '../lib/Grid/view/mixin/GridResponsive.js';\nexport { default as GridSelection } from '../lib/Grid/view/mixin/GridSelection.js';\nexport { default as GridState } from '../lib/Grid/view/mixin/GridState.js';\nexport { default as GridSubGrids } from '../lib/Grid/view/mixin/GridSubGrids.js';\n\n// widget\nexport { default as GridFieldFilterPicker } from '../lib/Grid/widget/GridFieldFilterPicker.js';\nexport { default as GridFieldFilterPickerGroup } from '../lib/Grid/widget/GridFieldFilterPickerGroup.js';\nexport { default as GroupBar } from '../lib/Grid/widget/GroupBar.js';\nexport { default as TreeCombo } from '../lib/Grid/widget/TreeCombo.js';\n"],"names":["ActionColumn","Column","type","fields","name","defaultValue","defaults","filterable","groupable","sortable","editor","searchable","htmlEncode","resizable","minWidth","groupHeaderReserved","construct","config","store","me","arguments","width","flex","grid","ion","paint","thisObj","disableIfGridReadOnly","element","classList","add","renderer","internalRenderer","externalRenderer","column","record","callExternalRenderer","_column$actions","inGroupTitle","meta","subGrid","_this$externalRendere","call","className","children","actions","map","actionConfig","index","_tooltip$startsWith","visible","showForGroup","tooltip","btip","startsWith","callback","customRendererData","action","tag","dataset","Tooltip","encodeConfig","html","cls","onCellClick","target","_column$actions2","contains","actionIndex","parentElement","actionHandler","onClick","updateAutoWidth","groupActions","oldActions","forEach","actionOriginal","push","length","_actions","actionsHtml","DomHelper","createElement","outerHTML","measureText","ColumnStore","registerColumnType","exposeProperties","_$name","AggregateColumn","NumberColumn","function","includeParentInChangeSet","data","columnStore","configuredAlign","configuredEditor","storeListeners","update","prio","oldStore","_store","un","modelClass","field","fieldMap","align","canEdit","isLeaf","sumChildren","args","result","i","parseFloat","avg","onRecordUpdate","changes","rowManager","bubble","rec","row","getRowFor","cellElement","getCell","renderCell","getRawValue","_record$children","value","fn","isMathFn","Math","handler","resolveCallback","apply","r","set","setData","getValue","canFillValue","PercentColumn","fieldType","min","max","showValue","lowThreshold","summaryRenderer","sum","fitMode","constructor","internalCellCls","defaultRenderer","role","tabIndex","style","text","undefined","resizeToFitContent","RatingColumn","$name","emptyIcon","filledIcon","editable","filterType","ArrayHelper","populate","filled","event","readOnly","starIndex","indexOf","parentNode","childNodes","metaKey","shiftKey","TemplateColumn","template","Error","renderData","isSpecialRow","TimeColumn","format","formatValue","groupRenderer","groupRowFor","innerHTML","DateHelper","parse","get","defaultEditor","CellCopyPaste","CopyPasteBase","pluginConfig","chain","configurable","useNativeClipboard","VersionHelper","isTestEnv","copyText","cutText","pasteText","afterConstruct","afterSelectionModeChange","client","selectionMode","cell","disabled","_disabledBySelectionMode","entityName","copyOnly","_copyOnly","_this$client$features","features","cellEdit","enabled","Boolean","canCopy","_client$features$rowC","selectedCells","_selectedRows","rowCopyPaste","focusedCell","isCellSelected","canCutPaste","_this$client$features2","isEditing","isActionAvailable","actionName","cut","copy","isCut","cells","filter","_r$record","copiedDataString","cellsToString","writeToClipboard","trigger","beforeCopy","paste","targetCell","clipboardData","readFromClipboard","modifiedRecords","targetCells","setFromStringData","selectCellRange","beforePaste","selectedCell","populateCellMenu","items","cutCell","localeClass","icon","weight","onItem","pasteCell","hasClipboardData","copyCell","GridFeatureManager","registerFeature","CellTooltip","InstancePlugin","tooltipRenderer","processConfig","initTip","tip","new","forElement","forSelector","hoverDelay","trackMouse","getHtml","getTooltipContent","bind","internalListeners","pointerOver","listeners","configuredListeners","initialConfig","relayEvents","onPointerOver","getColumnFromElement","setConfig","doDestroy","destroy","doDisable","disable","activeTarget","getRecordFromElement","arg","cellTooltip","lastRecord","generation","lastRecordGeneration","lastColumn","_html","Objects","isPromise","hide","ColumnRename","keyMap","F2","_this$editor","after","populateHeaderMenu","rename","L","startEdit","Event","_this$client$getHeade","getHeaderDataFromEvent","textWrapper","Editor","owner","render","FillHandle","mixin","Delayable","calculateFillValue","allowCropping","override","_fillListeners","delayable","handleSelection","onContentChange","afterColumnsChange","fixElementHeights","getCellDataFromEvent","includeSingleAxisMatch","overridden","findPatternsIn2dRange","range","horizontal","negative","values","id","columnId","isNaN","rowOrCol","pattern","findPatternsIn1dRange","lastValue","next","every","val","Date","diffs","ix","shift","Set","size","increaseBy","getTime","stringPattern","currentIndex","afterSelectionChange","removeElements","GlobalEvents","isMouseDown","delayUntilMouseUp","_isExtending","rangeSelection","drawFillHandleAndBorder","onMouseDown","mouseMoveOrUp","EventHelper","on","globalThis","mouseover","selectionDragMouseEventListenerElement","mouseup","preventDefault","stopImmediatePropagation","handled","onMouseUp","currentRange","_isCropping","selectionChange","internalSelectRange","from","to","extensionCells","croppingCells","some","sel","equals","disableScrollingCloseToEdges","suspendRefresh","firstCell","columnIndex","rowIndex","patterns","changeMap","Map","reverse","_me$calculateFillValu","_column$calculateFill","changed","resumeRefresh","performSelection","onMouseOver","_cellSelector","_cellSelector$_column","first","last","cellData","cellSelector","normalizeCellContext","_column","region","equalOrSmaller","cs","enableScrollingCloseToEdges","Location","keepListeners","_me$rangeSelection","regionEl","subGrids","x","Rectangle","right","y","getRecordCoords","bottom","borderElement","handleElement","setRect","height","appendChild","setTopLeft","scrollWidth","toggleCroppingCls","newCells","getRange","handleClick","rootElement","delegate","mousedown","hasFillElements","_this$croppingCells","_this$client$getCell","toggle","_me$handleElement","_me$borderElement","remove","removeListeners","listener","_shiftSelectRange","c1","c2","parent","isAvailable","camelCase","mousemove","touchdown","touchmove","touchup","pointerover","mouseout","dblclick","keydown","keypress","keyup","contextmenu","MergeCells","passthrough","sortedOnly","mergedRanges","mergedMap","before","eachSubGrid","setupSubGrid","renderDone","bindStore","$mergedCellsElement","beforeInternalResize","isConfiguring","isDisabling","reset","updatePassthrough","use","updateSortedOnly","detachListeners","change","refresh","onInternalResize","refreshBounds","beforeRenderCell","mergeCells","isSorted","collapsed","mergedRange","getMergeRange","afterRenderRow","oldId","oldHeight","heightChanged","slice","removeRange","syncDom","afterRemove","afterToggleGroup","afterToggleSubGrid","indices","selectedRecords","allSelected","fromIndex","toIndex","includes","isSelected","_element$elementData","elementData","getAt","_element$elementData2","mergeable","handleEvent","mergedCellsElement","closest","StringHelper","capitalize","eventData","records","firstElementChild","triggerEvent","toLowerCase","getRowAt","clientY","startEditing","onRangeClick","onStoreChange","onStoreRefresh","createRangeElement","_parent$syncIdMap","_parent$releasedIdMap","getSubGridFromColumn","syncId","syncIdMap","releasedIdMap","createRangeDomConfig","DomSync","addChild","_column$mergedRendere","top","left","domConfig","DomClassList","cellCls","assign","autoCls","keepChildren","rowHeight","mergedRenderer","buildMergedCellsConfig","rows","_rowManager$topRow","_rowManager$bottomRow","topRow","dataIndex","bottomRow","domConfigMap","regions","reduce","updateRange","force","sync","targetElement","syncIdField","onRenderDone","redraw","columns","visibleColumns","c","hadRanges","refreshSuspended","rowCount","boundsMap","bounds","topRendered","bottomRendered","rowOffsetHeight","findIndex","getRowById","rowsAbove","offsetHeight","rowsBelow","key","earlierRecord","earlierValue","earlierIndex","laterRecord","laterValue","laterIndex","cellBounds","QuickFind","mode","find","F3","Escape","Backspace","properties","hitCls","hitCellCls","hitCellBadgeCls","hitTextCls","Object","treeWalker","setupTreeWalker","NodeFilter","SHOW_TEXT","FILTER_ACCEPT","isActionable","clear","showQuickFind","header","getHeaderElement","headerField","badge","returnAll","colHeader","found","hideHeaders","renderListenerInitialized","rendercell","hideQuickFind","hit","prevFound","forceInnerHTML","_content","removeChild","search","columnFieldOrId","fromSplit","_grid$syncSplits","getById","findByField","foundMap","findRe","RegExp","escapeRegExp","String","_originalContent","gotoClosestHit","syncSplits","other","quickFind","_this$found","foundCount","_this$found2","gotoHit","nextHit","focusCell","doSelect","focusedIndex","foundSorted","sort","a","b","abs","gotoFirstHit","gotoLastHit","gotoNextHit","_grid$_focusedCell","_grid$lastFocusedCell","currentId","_focusedCell","lastFocusedCell","gotoPrevHit","_grid$_focusedCell2","_grid$lastFocusedCell2","prevHit","_me$foundMap","hitIndex","isQuickHit","inner","currentNode","down","textNode","nextNode","nodeToReplace","textContent","nodeValue","newText","offset","lastIndex","match","exec","preamble","substring","spaceBefore","v","spaceAfter","encodeHtml","insertBefore","createElementFromTemplate","join","fragment","onBackspace","substr","clearSearch","showFilterEditor","onElementKeyPress","_event$key","onCellNavigate","fromCellSelector","toCellSelector","storeRemoveActions","replace","RowExpander","expanderBodyClass","expandedRowClass","shadowRootContainerClass","recordStateMap","collapsingStateMap","columnPosition","refreshOnRecordChange","loadingIndicatorHeight","loadingIndicatorText","enableAnimations","widget","dataField","Tab","autoScroll","console","warn","isGanttBase","fixedRowHeight","theme","onThemeChange","addColumn","resizeObserver","ResizeObserver","entries","onExpanderBodyResize","renderFromRow","changeLoadingIndicatorText","onGridBodyFocusIn","_me$client$lastMoused","_me$client$lastMoused2","matches","lastMousedownEvent","keyMapOnKeyDown","_target$classList","isAnimating","wasAnimating","changeColumn","has","toggleExpand","hideable","_isAddingExpanderColumn","_expander","insert","onTriggerEvent","collapse","expand","entry","_entry$target$parentE","_entry$target$parentE2","_domData","recordState","ignoreResize","expanderBodyHeight","processRowHeight","bufferedRenderer","source","changedKeys","keys","state","_state$widget","delete","isCreated","renderFromRecord","topRecordIndex","topRecord","isRenderingAsync","expandedBodyElements","beforeRenderRow","waitForTransition","collapsingState","_collapsingState$widg","removeExpander","renderExpander","rowElement","getElement","bodyElement","removeEachSelector","observe","renderPromiseResolver","delay","renderLoadingIndicator","lockCellHeight","cellHeight","_shouldScrollIntoView","isInView","once","scrollRowIntoView","onTransitionEnd","property","duration","getPropertyTransitionDuration","destroyWidget","child","querySelectorAll","_child$widget","unobserve","loadingIndicators","_row$cells$","renderPromises","continueRendering","content","expanderElement","createWidget","widgetConfig","_DomHelper$getThemeIn","themeName","getThemeInfo","shadowRootContainer","shadowRoot","_shadowRoot","attachShadow","cloneStylesIntoShadowRoot","then","isDestroyed","fieldData","isStore","relatedStore","themeCls","Widget","create","ObjectHelper","appendTo","minHeight","isNested","catch","href","expanderBodyElement","addCls","renderResponse","Promise","all","_recordState$loadingI","_me$renderRowsWithAni","li","renderRowsWithAnimation","_row$removeCls","removeCls","_bufferedRecords","_rafPromise","resolve","requestAnimationFrame","_this$internalRender","internalRender","resolvePromise","unlock","_me$client$syncSplits","_me$client","rowExpander","_me$trigger","expandedElements","_me$client$syncSplits2","_me$client2","navigateDown","onKeyboardIn","navigateUp","catchFocus","navigationDirection","editing","body","getNext","_isDefaultFocus","getNavigateableColumn","cellContext","up","_state$expandedBodyEl","_state$expandedBodyEl2","_focusedCell$column","isGrid","_grid$features$rowExp","checkboxSelectionColumn","isDisabled","onTab","previous","_this$recordStateMap$","_widget$features$cell","activeRecord","nextCell","getAdjacentEditableCell","expandedRecord","finishEditing","onShiftTab","_this$resizeObserver","disconnect","_state$widget2","prev","querySelector","_bodyElement$widget","_bodyElement$widget$e","_bodyElement$widget2","_bodyElement$widget2$","getExpandedRecord","elementOrWidget","obj","isWidget","curEl","Search","limit","showHitIndex","hitEls","expandNode","onTreeNodeExpand","reapply","col","formatters","_col$formatValue","isTree","expandTo","prevValue","belongsTo","clearHits","listenersInitialized","asyncEventSuffix","refreshRows","isHitFocused","DomDataStore","silent","_grid$syncSplits2","_focusedCell$cell","getActiveElement","fromStart","_me$found","fromCell","_me$found2","_cellElement$querySel","getSelection","toString","innerText","featureClass","StickyCells","defaultConfig","contentSelector","currentTopRowCls","scroll","reference","removeClasses","renderRows","onGridScroll","contentElement","gridViewport","bodyContainer","roundPx","currentTopRow","topRowChanged","updateStickyContent","notEnoughHeight","scrollable","stickyContentHeight","stickyContentTop","alignTo","stickyEls","constrainTo","lastProcessedTopRow","rowClasses","cellClasses","stickyContent","document","createDocumentFragment","e","eachElement","rowEl","firstChild","eTop","offsetTop","alignSelf","cloneNode","syncClassList","FileDrop","drop","onFileDrop","dragover","onFileDragOver","dragenter","onFileDragEnter","dragleave","onFileDragLeave","onFileLoad","domEvent","file","relatedTarget","dataTransfer","getAsFile","GroupBar","ChipView","selectedCls","itemTpl","displayField","treeGrid","onTreePaint","treeGroup","columnReorder","usingGroupBarWidget","Store","onStoreChanged","treeGroupChange","onTreeGroupChanged","beforeColumnDropFinalize","onBeforeColumnDropFinalize","columnDrag","onColumnDrag","columnDragStart","onColumnDragStart","columnDrop","onColumnDrop","levels","_records$","isConstructing","ignoreGroupChange","level","Function","fieldName","context","overGroupBar","valid","droppedOnGroupBar","isTreeColumn","_this$store$getById","initClass","TreeCombo","Combo","multiSelect","picker","disableGridRowModelWarning","rowCheckboxSelection","chipView","xss","overflowX","changePicker","oldPicker","_picker","updateMultiSelect","updateReadOnly","_value$map","_settingValue","onPickerSelectionChange","selection","HOSTS","ONE_DAY","EXPIRING_CLASSES","host","location","test","initialized","initExpiryHelper","baseClass","ExpiryHelper","__foo","product","productName","version","getVersion","callHomeDelay","blockUrl","BrowserHelper","queryString","Product","verifyUrl","blocked","lastVersionCheck","trialKey","versionCheckKey","log","cacheTrialStartTime","isExpired","readyState","onTrialExpired","addEventListener","setTimeout","updateBlockedStatus","timeString","getLocalStorageItem","time","Number","trialStartTime","now","setLocalStorageItem","_window$bryntum","_window$bryntum$this$","window","bryntum","expired","saveVersionCheckKey","url","encodeURIComponent","logUrl","license","img","Image","onload","naturalWidth","blockTrial","onerror","src","rootEl","expirationShown","floatRoot","Toast","show","timeout","forEachSelector","fromElement","maskExpiredWidget","removeLocalStorageItem","mask","cover","setWaterMark","darkColor","lightColor","_DomHelper$themeInfo","_DomHelper$themeInfo$","thumb","color","themeInfo","endsWith","svgString","backgroundImage","btoa","applyBaseOverride","Override","class","onPaintOverride","setWatermarks","targets","GridBase","RowManager","matchRowCount","_this$grid","isScheduler","_overridden","_this$grid2","_this$grid3","ignoreDomainRe","websiteUrls","products","frameworks","splice","prod","framework","concat","flat","newScript","dataLayer","gtag","head"],"mappings":";;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,YAAY,SAASC,MAAM,CAAC;EAC7C,OAAOC,IAAI,GAAG,QAAQ,CAAA;AACtB,EAAA,OAAOC,MAAM,GAAG;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEC,IAAAA,IAAI,EAAG,SAAS;AAAEF,IAAAA,IAAI,EAAG,OAAA;GAAS;AACpC;AACR;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEE,IAAAA,IAAI,EAAG,uBAAuB;AAAEC,IAAAA,YAAY,EAAG,KAAA;AAAM,GAAC,CAC3D,CAAA;AACD,EAAA,OAAOC,QAAQ,GAAG;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,EAAG,KAAK;AACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,KAAK;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,EAAG,KAAK;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,EAAG,KAAK;AACjB;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,EAAA;GACd,CAAA;EACD,IAAIC,mBAAmBA,GAAG;AACtB,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACAC,EAAAA,SAASA,CAACC,MAAM,EAAEC,KAAK,EAAE;IACrB,MAAMC,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,KAAK,CAACH,SAAS,CAAC,GAAGI,SAAS,CAAC,CAAA;AAC7B;IACA,IAAI,CAACH,MAAM,CAACI,KAAK,IAAI,CAACJ,MAAM,CAACK,IAAI,EAAE;AAC/BH,MAAAA,EAAE,CAACI,IAAI,CAACC,GAAG,CAAC;AAAEC,QAAAA,KAAK,EAAG,iBAAiB;AAAEC,QAAAA,OAAO,EAAGP,EAAAA;AAAG,OAAC,CAAC,CAAA;AAC5D,KAAA;IACA,IAAIA,EAAE,CAACQ,qBAAqB,EAAE;MAC1BR,EAAE,CAACI,IAAI,CAACK,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAA;AAC5D,KAAA;AACA;AACA,IAAA,IAAIX,EAAE,CAACY,QAAQ,KAAKZ,EAAE,CAACa,gBAAgB,EAAE;AACrCb,MAAAA,EAAE,CAACc,gBAAgB,GAAGd,EAAE,CAACY,QAAQ,CAAA;AACjCZ,MAAAA,EAAE,CAACY,QAAQ,GAAGZ,EAAE,CAACa,gBAAgB,CAAA;AACrC,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACIA,EAAAA,gBAAgBA,CAAC;IAAET,IAAI;IAAEW,MAAM;IAAEC,MAAM;AAAEC,IAAAA,oBAAoB,GAAG,IAAA;AAAK,GAAC,EAAE;AAAA,IAAA,IAAAC,eAAA,CAAA;IACpE,MACIC,YAAY,GAAGH,MAAM,IAAK,aAAa,IAAIA,MAAM,CAACI,IAAK;AACvD,MAAA;AAAEC,QAAAA,OAAAA;AAAQ,OAAC,GAAIN,MAAM,CAAA;AACzB,IAAA,IAAIE,oBAAoB,EAAE;AAAA,MAAA,IAAAK,qBAAA,CAAA;AACtB,MAAA,CAAAA,qBAAA,GAAA,IAAI,CAACR,gBAAgB,cAAAQ,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArBA,qBAAA,CAAAC,IAAA,CAAA,IAAI,EAAoB,GAAGtB,SAAS,CAAC,CAAA;AACzC,KAAA;IACA,OAAO;AACHuB,MAAAA,SAAS,EAAG;AAAE,QAAA,aAAa,EAAG,CAAA;OAAG;AACjCC,MAAAA,QAAQ,GAAAP,eAAA,GAAIH,MAAM,CAACW,OAAO,MAAAR,IAAAA,IAAAA,eAAA,KAAdA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,eAAA,CAAgBS,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,KAAK;AAAA,QAAA,IAAAC,mBAAA,CAAA;QACrD,IAAI,SAAS,IAAIF,YAAY,EAAE;UAC3B,IAAK,OAAOA,YAAY,CAACG,OAAO,KAAK,UAAU,IAAKH,YAAY,CAACG,OAAO,CAAC;AAAEf,YAAAA,MAAAA;WAAQ,CAAC,KAAK,KAAK,EAAE;AAC5F,YAAA,OAAO,EAAE,CAAA;AACb,WAAA;AACA,UAAA,IAAIY,YAAY,CAACG,OAAO,KAAK,KAAK,EAAE;AAChC,YAAA,OAAO,EAAE,CAAA;AACb,WAAA;AACJ,SAAA;AACA;AACA,QAAA,IAAKZ,YAAY,IAAI,CAACS,YAAY,CAACI,YAAY,IAAM,CAACb,YAAY,IAAIS,YAAY,CAACI,YAAa,EAAE;AAC9F,UAAA,OAAO,EAAE,CAAA;AACb,SAAA;QACA,MACI;YACIC,OAAO;AACPrB,YAAAA,QAAAA;AACJ,WAAC,GAAMgB,YAAY;AACnBM,UAAAA,IAAI,GAAI,OAAOD,OAAO,KAAK,UAAU,IAAIA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,gBAAAH,mBAAA,GAAPG,OAAO,CAAEE,UAAU,MAAAL,IAAAA,IAAAA,mBAAA,KAAnBA,KAAAA,CAAAA,IAAAA,mBAAA,CAAAP,IAAA,CAAAU,OAAO,EAAe,KAAK,CAAC,GAAIZ,OAAO,CAACe,QAAQ,CAACH,OAAO,EAAEZ,OAAO,EAAE,CAAC;AAAEL,YAAAA,MAAAA;AAAO,WAAC,CAAC,CAAC,GAAGiB,OAAO,IAAI,EAAE,CAAA;AAC7I;AACA,QAAA,IAAIrB,QAAQ,EAAE;UACV,MAAMyB,kBAAkB,GAAGhB,OAAO,CAACe,QAAQ,CAACxB,QAAQ,EAAES,OAAO,EAAE,CAAC;YAC5DQ,KAAK;YACLb,MAAM;YACND,MAAM;AACNkB,YAAAA,OAAO,EAAGC,IAAI;AACdI,YAAAA,MAAM,EAAIV,YAAAA;AACd,WAAC,CAAC,CAAC,CAAA;AACH;AACA,UAAA,IAAI,OAAOS,kBAAkB,KAAK,QAAQ,EAAE;YACxC,OAAO;AACHE,cAAAA,GAAG,EAAO,MAAM;AAChBC,cAAAA,OAAO,EAAG;AACN,gBAAA,GAAGC,OAAO,CAACC,YAAY,CAACR,IAAI,CAAC;AAC7BL,gBAAAA,KAAAA;eACH;AACDc,cAAAA,IAAI,EAAGN,kBAAAA;aACV,CAAA;AACL,WAAC,MACI;YACDA,kBAAkB,CAACG,OAAO,GAAGH,kBAAkB,CAACG,OAAO,IAAI,EAAE,CAAA;AAC7DH,YAAAA,kBAAkB,CAACG,OAAO,CAACX,KAAK,GAAGA,KAAK,CAAA;AACxC,YAAA,OAAOQ,kBAAkB,CAAA;AAC7B,WAAA;AACJ,SAAC,MACI;UACD,OAAO;AACHE,YAAAA,GAAG,EAAO,QAAQ;AAClBC,YAAAA,OAAO,EAAG;AACN,cAAA,GAAGC,OAAO,CAACC,YAAY,CAACR,IAAI,CAAC;AAC7BL,cAAAA,KAAAA;aACH;AACD,YAAA,YAAY,EAAGK,IAAI;AACnBV,YAAAA,SAAS,EAAM;AACX,cAAA,QAAQ,EAAa,CAAC;AACtB,cAAA,eAAe,EAAM,CAAC;AACtB,cAAA,CAACI,YAAY,CAACgB,GAAG,GAAIhB,YAAY,CAACgB,GAAAA;AACtC,aAAA;WACH,CAAA;AACL,SAAA;OACH,CAAA;KACJ,CAAA;AACL,GAAA;AACA;AACJ;AACA;AACA;AACIC,EAAAA,WAAWA,CAAC;IAAE9B,MAAM;IAAEC,MAAM;AAAE8B,IAAAA,MAAAA;AAAO,GAAC,EAAE;AAAA,IAAA,IAAAC,gBAAA,CAAA;AACpC,IAAA,IAAIhC,MAAM,KAAK,IAAI,IAAI,CAAC+B,MAAM,CAACpC,SAAS,CAACsC,QAAQ,CAAC,eAAe,CAAC,EAAE;AAChE,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,IAAIC,WAAW,GAAGH,MAAM,CAACN,OAAO,CAACX,KAAK,CAAA;AACtC;AACA;IACA,IAAI,CAACoB,WAAW,EAAE;AACdA,MAAAA,WAAW,GAAGH,MAAM,CAACI,aAAa,CAACV,OAAO,IAAIM,MAAM,CAACI,aAAa,CAACV,OAAO,CAACX,KAAK,CAAA;AACpF,KAAA;AACA,IAAA,MACIS,MAAM,GAAA,CAAAS,gBAAA,GAAUhC,MAAM,CAACW,OAAO,MAAA,IAAA,IAAAqB,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAdA,gBAAA,CAAiBE,WAAW,CAAC;AAC7CE,MAAAA,aAAa,GAAGb,MAAM,KAAA,IAAA,IAANA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEc,OAAO,CAAA;AACnC,IAAA,IAAID,aAAa,EAAE;AACf,MAAA,IAAI,CAACf,QAAQ,CAACe,aAAa,EAAEpC,MAAM,EAAE,CAAC;QAAEC,MAAM;QAAEsB,MAAM;AAAEQ,QAAAA,MAAAA;AAAO,OAAC,CAAC,CAAC,CAAA;AACtE,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACIO,EAAAA,eAAeA,GAAG;IACd,MACIrD,EAAE,GAAa,IAAI;AACnBsD,MAAAA,YAAY,GAAG,EAAE;AACjB,MAAA;AACI5B,QAAAA,OAAO,EAAG6B,UAAAA;AACd,OAAC,GAAcvD,EAAE,CAAA;AACrB;AACA,IAAA,IAAI,CAACA,EAAE,CAACS,OAAO,EAAE;AACb,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,MAAMiB,OAAO,GAAG1B,EAAE,CAAC0B,OAAO,GAAG,EAAE,CAAA;AAC/B;IACA6B,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAVA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,CAAEC,OAAO,CAACC,cAAc,IAAI;AAClC,MAAA,MAAMnB,MAAM,GAAG;QAAE,GAAGmB,cAAAA;OAAgB,CAAA;AACpC;MACA,OAAOnB,MAAM,CAACP,OAAO,CAAA;AACrB;MACA,IAAIO,MAAM,CAACN,YAAY,EAAE;QACrB,OAAOM,MAAM,CAACN,YAAY,CAAA;AAC1BsB,QAAAA,YAAY,CAACI,IAAI,CAACpB,MAAM,CAAC,CAAA;AAC7B,OAAC,MACI;AACDZ,QAAAA,OAAO,CAACgC,IAAI,CAACpB,MAAM,CAAC,CAAA;AACxB,OAAA;AACJ,KAAC,CAAC,CAAA;AACF;AACA,IAAA,IAAIgB,YAAY,CAACK,MAAM,GAAGjC,OAAO,CAACiC,MAAM,EAAE;MACtC3D,EAAE,CAAC4D,QAAQ,GAAGN,YAAY,CAAA;AAC9B,KAAA;IACA,MAAMO,WAAW,GAAGC,SAAS,CAACC,aAAa,CAAC/D,EAAE,CAACa,gBAAgB,CAAC;AAAEE,MAAAA,MAAM,EAAGf,EAAE;AAAEiB,MAAAA,oBAAoB,EAAG,KAAA;KAAO,CAAC,CAAC,CAAC+C,SAAS,CAAA;IACzHhE,EAAE,CAACE,KAAK,GAAG4D,SAAS,CAACG,WAAW,CAACJ,WAAW,EAAE7D,EAAE,CAACS,OAAO,EAAE,IAAI,EAAET,EAAE,CAACS,OAAO,CAACyC,aAAa,CAAC,CAAA;IACzFlD,EAAE,CAAC0B,OAAO,GAAG6B,UAAU,CAAA;AAC3B,GAAA;AACJ,CAAA;AACAW,WAAW,CAACC,kBAAkB,CAACtF,YAAY,CAAC,CAAA;AAC5CA,YAAY,CAACuF,gBAAgB,EAAE,CAAA;AAC/BvF,YAAY,CAACwF,MAAM,GAAG,cAAc;;AChVpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,eAAe,SAASC,YAAY,CAAC;AACtD;EACA,OAAOxF,IAAI,GAAG,WAAW,CAAA;AACzB,EAAA,OAAOC,MAAM,GAAG,CACZ,UAAU,EACV,0BAA0B,CAC7B,CAAA;EACD,WAAWG,QAAQA,GAAG;IAClB,OAAO;AACH;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYqF,MAAAA,QAAQ,EAAG,KAAK;AAChB;AACZ;AACA;AACA;AACA;AACYC,MAAAA,wBAAwB,EAAG,KAAA;KAC9B,CAAA;AACL,GAAA;AACA5E,EAAAA,SAASA,CAAC6E,IAAI,EAAEC,WAAW,EAAE;IACzB,MAAM3E,EAAE,GAAG,IAAI,CAAA;AACfA,IAAAA,EAAE,CAAC4E,eAAe,GAAG,OAAO,IAAIF,IAAI,CAAA;AACpC1E,IAAAA,EAAE,CAAC6E,gBAAgB,GAAG,QAAQ,IAAIH,IAAI,CAAA;AACtC,IAAA,KAAK,CAAC7E,SAAS,CAAC,GAAGI,SAAS,CAAC,CAAA;IAC7B,MAAM;AAAEG,MAAAA,IAAAA;AAAK,KAAC,GAAGuE,WAAW,CAAA;AAC5B;AACA,IAAA,IAAI3E,EAAE,CAACwE,QAAQ,KAAK,KAAK,EAAE;MACvBxE,EAAE,CAACwE,QAAQ,GAAG,aAAa,CAAA;AAC/B,KAAA;AACA,IAAA,IAAIpE,IAAI,EAAE;AACNJ,MAAAA,EAAE,CAACD,KAAK,GAAGK,IAAI,CAACL,KAAK,CAAA;AACzB,KAAA;AACJ,GAAA;EACA,IAAIA,KAAKA,CAACA,KAAK,EAAE;IACb,MACIC,EAAE,GAAe,IAAI;AACrB8E,MAAAA,cAAc,GAAG;AACbC,QAAAA,MAAM,EAAI,gBAAgB;AAC1BxE,QAAAA,OAAO,EAAGP,EAAE;AACZgF,QAAAA,IAAI,EAAM,IAAA;OACb;MACDC,QAAQ,GAAGjF,EAAE,CAACkF,MAAM,CAAA;IACxB,IAAInF,KAAK,KAAKkF,QAAQ,EAAE;AACpB,MAAA,IAAIA,QAAQ,EAAE;AACVA,QAAAA,QAAQ,CAACE,EAAE,CAACL,cAAc,CAAC,CAAA;AAC/B,OAAA;MACA9E,EAAE,CAACkF,MAAM,GAAGnF,KAAK,CAAA;MACjB,MACI;AAAEqF,UAAAA,UAAAA;AAAW,SAAC,GAAGrF,KAAK;QACtBsF,KAAK,GAAGD,UAAU,CAACE,QAAQ,CAACtF,EAAE,CAACqF,KAAK,CAAC,CAAA;AACzC;AACA;AACA,MAAA,IAAIA,KAAK,IAAIA,KAAK,CAACtG,IAAI,KAAK,QAAQ,EAAE;AAClC,QAAA,IAAI,CAACiB,EAAE,CAAC4E,eAAe,EAAE;UACrB5E,EAAE,CAACuF,KAAK,GAAG,KAAK,CAAA;AACpB,SAAA;AACA,QAAA,IAAI,CAACvF,EAAE,CAAC6E,gBAAgB,EAAE;UACtB7E,EAAE,CAACT,MAAM,GAAG,QAAQ,CAAA;AACxB,SAAA;AACJ,OAAA;AACAQ,MAAAA,KAAK,CAACM,GAAG,CAACyE,cAAc,CAAC,CAAA;AAC7B,KAAA;AACJ,GAAA;EACAU,OAAOA,CAACxE,MAAM,EAAE;IACZ,OAAOA,MAAM,CAACyE,MAAM,CAAA;AACxB,GAAA;EACA,IAAI1F,KAAKA,GAAG;IACR,OAAO,IAAI,CAACmF,MAAM,CAAA;AACtB,GAAA;EACAQ,WAAWA,CAAC,GAAGC,IAAI,EAAE;IACjB,IAAIC,MAAM,GAAG,CAAC,CAAA;AACd,IAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAE;AAAElC,QAAAA,MAAAA;OAAQ,GAAGgC,IAAI,EAAEE,CAAC,GAAGlC,MAAM,EAAEkC,CAAC,EAAE,EAAE;MAChDD,MAAM,IAAIE,UAAU,CAACH,IAAI,CAACE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;AAC1C,KAAA;AACA,IAAA,OAAOD,MAAM,CAAA;AACjB,GAAA;EACAG,GAAGA,CAAC,GAAGJ,IAAI,EAAE;IACT,IAAIC,MAAM,GAAG,CAAC,CAAA;IACd,MAAM;AAAEjC,MAAAA,MAAAA;AAAO,KAAC,GAAGgC,IAAI,CAAA;IACvB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,MAAM,EAAEkC,CAAC,EAAE,EAAE;MAC7BD,MAAM,IAAIE,UAAU,CAACH,IAAI,CAACE,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAA;AAC1C,KAAA;IACA,OAAOD,MAAM,GAAGjC,MAAM,CAAA;AAC1B,GAAA;AACAqC,EAAAA,cAAcA,CAAC;IAAEhF,MAAM;AAAEiF,IAAAA,OAAAA;AAAQ,GAAC,EAAE;IAChC,MACIjG,EAAE,GAAG,IAAI;AACT,MAAA;AAAEkG,QAAAA,UAAAA;OAAY,GAAGlG,EAAE,CAACI,IAAI,CAAA;AAC5B,IAAA,IAAIJ,EAAE,CAACqF,KAAK,IAAIY,OAAO,EAAE;MACrB,IAAIjF,MAAM,CAACyE,MAAM,EAAE;AACfzE,QAAAA,MAAM,CAACmF,MAAM,CAACC,GAAG,IAAI;AACjB,UAAA,MAAMC,GAAG,GAAGH,UAAU,CAACI,SAAS,CAACF,GAAG,CAAC,CAAA;AACrC,UAAA,IAAIC,GAAG,EAAE;YACL,MAAME,WAAW,GAAGF,GAAG,CAACG,OAAO,CAACxG,EAAE,CAACqF,KAAK,CAAC,CAAA;AACzC,YAAA,IAAIkB,WAAW,EAAE;AACbF,cAAAA,GAAG,CAACI,UAAU,CAACF,WAAW,CAAC,CAAA;AAC/B,aAAA;AACJ,WAAA;SACH,EAAE,IAAI,CAAC,CAAA;AACZ,OAAA;AACJ,KAAA;AACJ,GAAA;EACAG,WAAWA,CAAC1F,MAAM,EAAE;AAAA,IAAA,IAAA2F,gBAAA,CAAA;AAChB,IAAA,IAAIC,KAAK,CAAA;IACT,MACI5G,EAAE,GAAU,IAAI;AAChB,MAAA;AAAEqF,QAAAA,KAAAA;AAAM,OAAC,GAAGrF,EAAE,CAAA;IAClB,IAAA2G,CAAAA,gBAAA,GAAI3F,MAAM,CAACS,QAAQ,MAAAkF,IAAAA,IAAAA,gBAAA,KAAfA,KAAAA,CAAAA,IAAAA,gBAAA,CAAiBhD,MAAM,EAAE;AACzB,MAAA,MACIkD,EAAE,GAAS7G,EAAE,CAACwE,QAAQ;AACtBsC,QAAAA,QAAQ,GAAG,OAAOD,EAAE,KAAK,QAAQ,IAAI,OAAOE,IAAI,CAACF,EAAE,CAAC,KAAK,UAAU;AACnE,QAAA;UACIG,OAAO;AACPzG,UAAAA,OAAAA;SACH,GAAGuG,QAAQ,GAAG;AACXE,UAAAA,OAAO,EAAGD,IAAI,CAACF,EAAE,CAAC;AAClBtG,UAAAA,OAAO,EAAGwG,IAAAA;AACd,SAAC,GAAG/G,EAAE,CAACiH,eAAe,CAACJ,EAAE,CAAC,CAAA;AAC9B;MACAD,KAAK,GAAGI,OAAO,CAACE,KAAK,CAAC3G,OAAO,EAAES,MAAM,CAACS,QAAQ,CAACE,GAAG,CAACwF,CAAC,IAAInH,EAAE,CAAC0G,WAAW,CAACS,CAAC,CAAC,CAAC,CAAC,CAAA;MAC3E,IAAInH,EAAE,CAACyE,wBAAwB,EAAE;QAC7BzD,MAAM,CAACoG,GAAG,CAAC/B,KAAK,EAAEuB,KAAK,EAAE,IAAI,CAAC,CAAA;AAClC,OAAC,MACI;AACD5F,QAAAA,MAAM,CAACqG,OAAO,CAAChC,KAAK,EAAEuB,KAAK,CAAC,CAAA;AAChC,OAAA;AACJ,KAAC,MACI;AACDA,MAAAA,KAAK,GAAG5F,MAAM,CAACsG,QAAQ,CAACjC,KAAK,CAAC,CAAA;AAClC,KAAA;AACA,IAAA,OAAOuB,KAAK,CAAA;AAChB,GAAA;AACAW,EAAAA,YAAYA,GAAG;AACX,IAAA,OAAO,KAAK,CAAA;AAChB,GAAA;AACJ,CAAA;AACArD,WAAW,CAACC,kBAAkB,CAACG,eAAe,EAAE,IAAI,CAAC,CAAA;AACrDA,eAAe,CAACF,gBAAgB,EAAE,CAAA;AAClCE,eAAe,CAACD,MAAM,GAAG,iBAAiB;;AChM1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMmD,aAAa,SAASjD,YAAY,CAAC;EACpD,OAAOxF,IAAI,GAAG,SAAS,CAAA;AACvB;EACA,OAAO0I,SAAS,GAAG,QAAQ,CAAA;AAC3B,EAAA,OAAOzI,MAAM,GAAG,CAAC,WAAW,EAAE,cAAc,CAAC,CAAA;EAC7C,WAAWG,QAAQA,GAAG;IAClB,OAAO;AACHuI,MAAAA,GAAG,EAAG,CAAC;AACPC,MAAAA,GAAG,EAAG,GAAG;AACT;AACZ;AACA;AACA;AACA;AACA;AACYC,MAAAA,SAAS,EAAG,KAAK;AACjB;AACZ;AACA;AACA;AACA;AACA;AACYC,MAAAA,YAAY,EAAG,EAAE;AACjBpI,MAAAA,UAAU,EAAQ,KAAK;AACvBD,MAAAA,UAAU,EAAQ,KAAK;AACvBsI,MAAAA,eAAe,EAAGA,CAAC;AAAEC,QAAAA,GAAAA;OAAK,KAAM,CAAEA,EAAAA,GAAI,CAAE,CAAA,CAAA;AACxCC,MAAAA,OAAO,EAAW,KAAA;KACrB,CAAA;AACL,GAAA;AACAC,EAAAA,WAAWA,CAACnI,MAAM,EAAEC,KAAK,EAAE;IACvB,KAAK,CAAC,GAAGE,SAAS,CAAC,CAAA;IACnB,IAAI,CAACiI,eAAe,GAAG,oBAAoB,CAAA;AAC/C,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,eAAeA,CAAC;AAAEvB,IAAAA,KAAAA;AAAM,GAAC,EAAE;IACvBA,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAA;IAClB,OAAO;AACHpF,MAAAA,SAAS,EAAS,qBAAqB;AACvC4G,MAAAA,IAAI,EAAc,aAAa;AAC/B,MAAA,eAAe,EAAG,CAAC;AACnB,MAAA,eAAe,EAAG,GAAG;AACrB,MAAA,eAAe,EAAGxB,KAAK;AACvByB,MAAAA,QAAQ,EAAU,CAAC;AACnB5G,MAAAA,QAAQ,EAAU,CACd;AACIc,QAAAA,GAAG,EAAS,KAAK;AACjBf,QAAAA,SAAS,EAAG;AACR,UAAA,eAAe,EAAG,CAAC;UACnB,QAAQ,EAAUoF,KAAK,KAAK,CAAC;AAC7B,UAAA,OAAO,EAAWA,KAAK,GAAG,IAAI,CAACiB,YAAAA;SAClC;AACDS,QAAAA,KAAK,EAAG;UACJpI,KAAK,EAAG0G,KAAK,GAAG,GAAA;SACnB;AACDnF,QAAAA,QAAQ,EAAG,CACP,IAAI,CAACmG,SAAS,GAAG;AACbrF,UAAAA,GAAG,EAAI,MAAM;UACbgG,IAAI,EAAG3B,KAAK,GAAG,GAAA;AACnB,SAAC,GAAG4B,SAAS,CAAA;OAEpB,CAAA;KAER,CAAA;AACL,GAAA;AACA;AACA;EACAC,kBAAkBA,GAAG,EAAC;AAC1B,CAAA;AACAjB,aAAa,CAACO,GAAG,GAAG,SAAS,CAAA;AAC7B7D,WAAW,CAACC,kBAAkB,CAACqD,aAAa,EAAE,IAAI,CAAC,CAAA;AACnDA,aAAa,CAACnD,MAAM,GAAG,eAAe;;ACzHtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMqE,YAAY,SAASnE,YAAY,CAAC;EACnD,OAAOoE,KAAK,GAAG,cAAc,CAAA;EAC7B,OAAO5J,IAAI,GAAG,QAAQ,CAAA;AACtB;EACA,OAAO0I,SAAS,GAAG,QAAQ,CAAA;EAC3B,OAAOzI,MAAM,GAAG,CAAC,WAAW,EAAE,YAAY,EAAE,UAAU,CAAC,CAAA;EACvD,WAAWG,QAAQA,GAAG;IAClB,OAAO;AACHuI,MAAAA,GAAG,EAAG,CAAC;AACPC,MAAAA,GAAG,EAAG,CAAC;AACP;AACZ;AACA;AACA;AACA;AACYiB,MAAAA,SAAS,EAAG,oBAAoB;AAChC;AACZ;AACA;AACA;AACA;AACYC,MAAAA,UAAU,EAAG,oBAAoB;AACjC;AACZ;AACA;AACA;AACA;AACYC,MAAAA,QAAQ,EAAG,IAAI;AACfC,MAAAA,UAAU,EAAG,QAAQ;AACrBvJ,MAAAA,UAAU,EAAG,KAAK;AAClBU,MAAAA,KAAK,EAAQ,QAAQ;AACrBT,MAAAA,UAAU,EAAG,KAAK;AAClBE,MAAAA,QAAQ,EAAK,QAAQ;AACrBJ,MAAAA,MAAM,EAAO,KAAK;AAClByI,MAAAA,OAAO,EAAM,OAAA;KAChB,CAAA;AACL,GAAA;AACA;AACJ;AACA;AACA;AACIpH,EAAAA,QAAQA,CAAC;AAAEgG,IAAAA,KAAAA;AAAM,GAAC,EAAE;IAChB,OAAO;AACHpF,MAAAA,SAAS,EAAG;AACR,QAAA,qBAAqB,EAAG,CAAC;QACzB,gBAAgB,EAAQ,CAAC,IAAI,CAACsH,QAAAA;OACjC;MACDrH,QAAQ,EAAGuH,WAAW,CAACC,QAAQ,CAAC,IAAI,CAACtB,GAAG,EAAE9B,CAAC,IAAI;AAC3C,QAAA,MAAMqD,MAAM,GAAGrD,CAAC,GAAGe,KAAK,CAAA;QACxB,OAAO;AACHrE,UAAAA,GAAG,EAAS,GAAG;AACff,UAAAA,SAAS,EAAG;AACR,YAAA,eAAe,EAA+B,IAAI;AAClD,YAAA,UAAU,EAAoC0H,MAAM;YACpD,SAAS,EAAqC,CAACA,MAAM;YACrD,CAACA,MAAM,GAAG,IAAI,CAACL,UAAU,GAAG,IAAI,CAACD,SAAS,GAAI,IAAA;AAClD,WAAA;SACH,CAAA;OACJ,CAAA;KACJ,CAAA;AACL,GAAA;AACA/F,EAAAA,WAAWA,CAAC;IAAEzC,IAAI;IAAEW,MAAM;IAAEC,MAAM;IAAE8B,MAAM;AAAEqG,IAAAA,KAAAA;AAAM,GAAC,EAAE;AACjD,IAAA,IAAIrG,MAAM,CAACpC,SAAS,CAACsC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC5C,IAAI,CAACgJ,QAAQ,IAAIrI,MAAM,CAAC+H,QAAQ,EAAE;AACjF,MAAA,IAAIO,SAAS,GAAG,EAAE,CAACC,OAAO,CAAC/H,IAAI,CAACuB,MAAM,CAACyG,UAAU,CAACC,UAAU,EAAE1G,MAAM,CAAC,CAAA;AACrE,MAAA,IAAIA,MAAM,CAACpC,SAAS,CAACsC,QAAQ,CAAC,UAAU,CAAC,KAAKmG,KAAK,CAACM,OAAO,IAAIN,KAAK,CAACO,QAAQ,CAAC,EAAE;QAC5EL,SAAS,GAAGA,SAAS,GAAG,CAAC,CAAA;AAC7B,OAAA;AACA;AACA,MAAA,IAAIrI,MAAM,CAACsG,QAAQ,CAACvG,MAAM,CAACsE,KAAK,CAAC,KAAK,CAAC,IAAIgE,SAAS,KAAK,CAAC,EAAE;QACxDA,SAAS,GAAG,CAAC,CAAC,CAAA;AAClB,OAAA;MACArI,MAAM,CAACoG,GAAG,CAACrG,MAAM,CAACsE,KAAK,EAAEgE,SAAS,GAAG,CAAC,CAAC,CAAA;AAC3C,KAAA;AACJ,GAAA;AACJ,CAAA;AACAnF,WAAW,CAACC,kBAAkB,CAACuE,YAAY,EAAE,IAAI,CAAC,CAAA;AAClDA,YAAY,CAACtE,gBAAgB,EAAE,CAAA;AAC/BsE,YAAY,CAACrE,MAAM,GAAG,cAAc;;ACtGpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMsF,cAAc,SAAS7K,MAAM,CAAC;EAC/C,OAAOC,IAAI,GAAG,UAAU,CAAA;AACxB,EAAA,OAAOC,MAAM,GAAG;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA,UAAU,CACb,CAAA;EACD,WAAWG,QAAQA,GAAG;IAClB,OAAO;AACHM,MAAAA,UAAU,EAAG,KAAA;KAChB,CAAA;AACL,GAAA;AACAwI,EAAAA,WAAWA,CAACnI,MAAM,EAAEC,KAAK,EAAE;IACvB,KAAK,CAAC,GAAGE,SAAS,CAAC,CAAA;IACnB,MAAMD,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,IAAI,CAACA,EAAE,CAAC4J,QAAQ,EAAE;AACd,MAAA,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAA;AACtD,KAAA;AACA,IAAA,IAAI,OAAO7J,EAAE,CAAC4J,QAAQ,KAAK,UAAU,EAAE;AACnC,MAAA,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC,CAAA;AACjE,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;EACIjJ,QAAQA,CAACkJ,UAAU,EAAE;AACjB;AACA,IAAA,IAAI,CAACA,UAAU,CAAC9I,MAAM,CAAC+I,YAAY,EAAE;MACjC,OAAO,IAAI,CAACH,QAAQ,CAAC;QACjBhD,KAAK,EAAIkD,UAAU,CAAClD,KAAK;QACzB5F,MAAM,EAAG8I,UAAU,CAAC9I,MAAM;QAC1BqE,KAAK,EAAI,IAAI,CAACA,KAAAA;AAClB,OAAC,CAAC,CAAA;AACN,KAAA;AACJ,GAAA;AACJ,CAAA;AACAnB,WAAW,CAACC,kBAAkB,CAACwF,cAAc,EAAE,IAAI,CAAC,CAAA;AACpDA,cAAc,CAACvF,gBAAgB,EAAE,CAAA;AACjCuF,cAAc,CAACtF,MAAM,GAAG,gBAAgB;;ACrExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM2F,UAAU,SAASlL,MAAM,CAAC;AAC3C;EACA,OAAOC,IAAI,GAAG,MAAM,CAAA;AACpB;EACA,OAAO0I,SAAS,GAAG,MAAM,CAAA;AACzB,EAAA,OAAOzI,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAA;EAC1B,WAAWG,QAAQA,GAAG;IAClB,OAAO;AACH;AACZ;AACA;AACA;AACA;AACY8K,MAAAA,MAAM,EAAG,IAAI;AACbtK,MAAAA,QAAQ,EAAG,GAAG;AACdoJ,MAAAA,UAAU,EAAG,MAAA;KAChB,CAAA;AACL,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACIZ,EAAAA,eAAeA,CAAC;AAAEvB,IAAAA,KAAAA;AAAM,GAAC,EAAE;IACvB,OAAOA,KAAK,GAAG,IAAI,CAACsD,WAAW,CAACtD,KAAK,CAAC,GAAG,EAAE,CAAA;AAC/C,GAAA;AACA;AACJ;AACA;AACA;AACIuD,EAAAA,aAAaA,CAAC;IAAE5D,WAAW;AAAE6D,IAAAA,WAAAA;AAAY,GAAC,EAAE;IACxC7D,WAAW,CAAC8D,SAAS,GAAG,IAAI,CAACH,WAAW,CAACE,WAAW,CAAC,CAAA;AACzD,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;EACIF,WAAWA,CAACtD,KAAK,EAAE;AACf;AACA,IAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BA,KAAK,GAAG0D,UAAU,CAACC,KAAK,CAAC3D,KAAK,EAAE,IAAI,CAACqD,MAAM,CAAC,CAAA;AAChD,KAAA;IACA,OAAOK,UAAU,CAACL,MAAM,CAACrD,KAAK,EAAE,IAAI,CAACqD,MAAM,CAAC,CAAA;AAChD,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;EACI,IAAIA,MAAMA,CAACrD,KAAK,EAAE;IACd,MAAM;AAAErH,MAAAA,MAAAA;AAAO,KAAC,GAAG,IAAI,CAAA;AACvB,IAAA,IAAI,CAAC6H,GAAG,CAAC,QAAQ,EAAER,KAAK,CAAC,CAAA;AACzB,IAAA,IAAIrH,MAAM,EAAE;MACRA,MAAM,CAAC0K,MAAM,GAAGrD,KAAK,CAAA;AACzB,KAAA;AACJ,GAAA;EACA,IAAIqD,MAAMA,GAAG;AACT,IAAA,OAAQ,IAAI,CAACO,GAAG,CAAC,QAAQ,CAAC,CAAA;AAC9B,GAAA;EACA,IAAIC,aAAaA,GAAG;IAChB,OAAO;MACHxL,IAAI,EAAK,IAAI,CAACoG,KAAK;AACnBtG,MAAAA,IAAI,EAAK,MAAM;MACfkL,MAAM,EAAG,IAAI,CAACA,MAAAA;KACjB,CAAA;AACL,GAAA;AACA;AACJ,CAAA;;AACA/F,WAAW,CAACC,kBAAkB,CAAC6F,UAAU,EAAE,IAAI,CAAC,CAAA;AAChDA,UAAU,CAAC5F,gBAAgB,EAAE,CAAA;AAC7B4F,UAAU,CAAC3F,MAAM,GAAG,YAAY;;ACnGhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMqG,aAAa,SAASC,aAAa,CAAC;EACrD,OAAOhC,KAAK,GAAG,eAAe,CAAA;AAC9B,EAAA,OAAOiC,YAAY,GAAG;AAClBC,IAAAA,KAAK,EAAG,CACJ,kBAAkB,EAAE,0BAA0B,CAAA;GAErD,CAAA;AACD,EAAA,OAAOC,YAAY,GAAG;AAClBC,IAAAA,kBAAkB,EAAG,CAACC,aAAa,CAACC,SAAS;AAC7CC,IAAAA,QAAQ,EAAI,SAAS;AACrBC,IAAAA,OAAO,EAAK,QAAQ;AACpBC,IAAAA,SAAS,EAAG,UAAA;GACf,CAAA;AACDC,EAAAA,cAAcA,GAAG;IACb,KAAK,CAACA,cAAc,EAAE,CAAA;IACtB,IAAI,CAACC,wBAAwB,EAAE,CAAA;AACnC,GAAA;AACAA,EAAAA,wBAAwBA,GAAG;IACvB,MAAMtL,EAAE,GAAG,IAAI,CAAA;IACf,IAAI,CAACA,EAAE,CAACuL,MAAM,CAACC,aAAa,CAACC,IAAI,EAAE;MAC/BzL,EAAE,CAAC0L,QAAQ,GAAG,IAAI,CAAA;AACtB,KAAC,MACI,IAAI1L,EAAE,CAAC2L,wBAAwB,EAAE;MAClC3L,EAAE,CAAC0L,QAAQ,GAAG,KAAK,CAAA;MACnB,OAAO1L,EAAE,CAAC2L,wBAAwB,CAAA;AACtC,KAAA;AACJ,GAAA;AACA;AACAC,EAAAA,UAAU,GAAG,MAAM,CAAA;EACnB,IAAIC,QAAQA,CAACjF,KAAK,EAAE;IAChB,IAAI,CAACkF,SAAS,GAAGlF,KAAK,CAAA;AAC1B,GAAA;EACA,IAAIiF,QAAQA,GAAG;AACX;AACA,IAAA,IAAI,IAAI,CAACC,SAAS,IAAI,IAAI,EAAE;AAAA,MAAA,IAAAC,qBAAA,CAAA;AACxB,MAAA,OAAO,EAAAA,CAAAA,qBAAA,GAAC,IAAI,CAACR,MAAM,CAACS,QAAQ,CAACC,QAAQ,MAAAF,IAAAA,IAAAA,qBAAA,KAA7BA,KAAAA,CAAAA,IAAAA,qBAAA,CAA+BG,OAAO,CAAA,CAAA;AAClD,KAAA;AACA,IAAA,OAAOC,OAAO,CAAC,IAAI,CAACL,SAAS,CAAC,CAAA;AAClC,GAAA;EACA,IAAIM,OAAOA,GAAG;AAAA,IAAA,IAAAC,qBAAA,CAAA;IACV,MAAM;AAAEd,MAAAA,MAAAA;AAAO,KAAC,GAAG,IAAI,CAAA;IACvB,OAAOY,OAAO,CAAC,CAAC,IAAI,CAACT,QAAQ,IAAIH,MAAM,CAACe,aAAa,CAAC3I,MAAM,KAEpD,CAAC4H,MAAM,CAACgB,aAAa,CAAC5I,MAAM,KAAA0I,CAAAA,qBAAA,GAC5Bd,MAAM,CAACS,QAAQ,CAACQ,YAAY,MAAAH,IAAAA,IAAAA,qBAAA,uBAA5BA,qBAAA,CAA8BX,QAAQ,CAAA,IACtCH,MAAM,CAACkB,WAAW,IAAIlB,MAAM,CAACmB,cAAc,CAACnB,MAAM,CAACkB,WAAW,CAAC,CAClE,CAAC,CAAA;AACV,GAAA;EACA,IAAIE,WAAWA,GAAG;AAAA,IAAA,IAAAC,sBAAA,CAAA;AACd,IAAA,OAAO,IAAI,CAACR,OAAO,IAAI,CAAC,IAAI,CAACP,QAAQ,IAAI,EAAA,CAAAe,sBAAA,GAAC,IAAI,CAACrB,MAAM,CAACS,QAAQ,CAACC,QAAQ,MAAAW,IAAAA,IAAAA,sBAAA,eAA7BA,sBAAA,CAA+BC,SAAS,CAAA,IAAI,CAAC,IAAI,CAACtB,MAAM,CAACnC,QAAQ,CAAA;AAC/G,GAAA;AACA;AACA0D,EAAAA,iBAAiBA,CAAC;AAAEC,IAAAA,UAAAA;AAAW,GAAC,EAAE;IAC9B,OAAO,IAAI,CAACX,OAAO,KAAKW,UAAU,KAAK,MAAM,IAAI,IAAI,CAACJ,WAAW,CAAC,CAAA;AACtE,GAAA;AACA;AACJ;AACA;AACA;EACI,MAAMK,GAAGA,GAAG;AACR,IAAA,MAAM,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC,CAAA;AACzB,GAAA;AACA;AACJ;AACA;AACA;AACI,EAAA,MAAMA,IAAIA,CAACC,KAAK,GAAG,KAAK,EAAE;AACtB,IAAA,IAAI,OAAOA,KAAK,IAAI,SAAS,EAAE;MAC3BA,KAAK,GAAG,KAAK,CAAC;AAClB,KAAA;;IACA,MACIlN,EAAE,GAAkB,IAAI;AACxB,MAAA;AAAEsM,QAAAA,aAAAA;OAAe,GAAGtM,EAAE,CAACuL,MAAM;AAC7B4B,MAAAA,KAAK,GAAeD,KAAK,GAAGZ,aAAa,CAACc,MAAM,CAACjG,CAAC,IAAA;AAAA,QAAA,IAAAkG,SAAA,CAAA;QAAA,OAAI,EAAA,CAAAA,SAAA,GAAClG,CAAC,CAACnG,MAAM,MAAA,IAAA,IAAAqM,SAAA,KAAA,KAAA,CAAA,IAARA,SAAA,CAAUjE,QAAQ,CAAA,CAAA;AAAA,OAAA,CAAC,GAAGkD,aAAa,CAAA;AAC9F,IAAA,IAAIa,KAAK,EAAE;MACP,IAAKD,KAAK,GAAG,CAAClN,EAAE,CAAC2M,WAAW,GAAG,CAAC3M,EAAE,CAACoM,OAAO,EAAG;AACzC,QAAA,OAAA;AACJ,OAAA;AACA,MAAA,MAAMkB,gBAAgB,GAAGtN,EAAE,CAACuN,aAAa,CAACJ,KAAK,CAAC,CAAA;AAChD,MAAA,MAAMnN,EAAE,CAACwN,gBAAgB,CAACF,gBAAgB,EAAEJ,KAAK,EAAE;AAAEC,QAAAA,KAAAA;AAAM,OAAC,CAAC,CAAA;MAC7D,IAAID,KAAK,KAAK,IAAI,EAAE;AAChB,QAAA,KAAK,MAAMzB,IAAI,IAAI0B,KAAK,EAAE;AACtB,UAAA,IAAI,CAAC1B,IAAI,CAAC1K,MAAM,CAACqI,QAAQ,EAAE;AACvBqC,YAAAA,IAAI,CAACzK,MAAM,CAACoG,GAAG,CAACqE,IAAI,CAAC1K,MAAM,CAACsE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC5C,WAAA;AACJ,SAAA;AACJ,OAAA;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYrF,MAAAA,EAAE,CAACuL,MAAM,CAACkC,OAAO,CAAC,MAAM,EAAE;QAAEN,KAAK;QAAEG,gBAAgB;QAAEJ,KAAK;QAAEtB,UAAU,EAAG5L,EAAE,CAAC4L,UAAAA;AAAW,OAAC,CAAC,CAAA;AAC7F,KAAA;AACJ,GAAA;AACA;AACA,EAAA,MAAM8B,UAAUA,CAAC;IAAEhJ,IAAI;IAAEwI,KAAK;AAAEC,IAAAA,KAAAA;AAAM,GAAC,EAAE;AACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAO,MAAM,IAAI,CAAC5B,MAAM,CAACkC,OAAO,CAAC,YAAY,EAAE;MAAEN,KAAK;MAAEzI,IAAI;MAAEwI,KAAK;MAAEtB,UAAU,EAAG,IAAI,CAACA,UAAAA;AAAW,KAAC,CAAC,CAAA;AACxG,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM+B,KAAKA,GAAG;IACV,MACI3N,EAAE,GAAuB,IAAI;AAC7B,MAAA;QAAEuL,MAAM;AAAEK,QAAAA,UAAAA;AAAW,OAAC,GAAG5L,EAAE;AAC3B4N,MAAAA,UAAU,GAAerC,MAAM,CAACe,aAAa,CAAC,CAAC,CAAC,CAAA;AACpD,IAAA,IAAI,CAACtM,EAAE,CAAC2M,WAAW,IAAI,CAACiB,UAAU,EAAE;AAChC,MAAA,OAAA;AACJ,KAAA;IACA,MAAMC,aAAa,GAAG,MAAM7N,EAAE,CAAC8N,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;IAC1D,IAAI,CAACD,aAAa,EAAE;AAChB,MAAA,OAAA;AACJ,KAAA;IACA,MAAM;MAAEE,eAAe;AAAEC,MAAAA,WAAAA;AAAY,KAAC,GAAGhO,EAAE,CAACiO,iBAAiB,CAACJ,aAAa,CAAC,CAAA;AAC5E,IAAA,IAAItC,MAAM,CAACe,aAAa,CAAC3I,MAAM,KAAK,CAAC,IAAIqK,WAAW,CAACrK,MAAM,GAAG,CAAC,EAAE;AAC7D4H,MAAAA,MAAM,CAAC2C,eAAe,CAACF,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAACA,WAAW,CAACrK,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;AAC/E,KAAA;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ4H,IAAAA,MAAM,CAACkC,OAAO,CAAC,OAAO,EAAE;MAAEI,aAAa;MAAED,UAAU;AAAEG,MAAAA,eAAe,EAAG,CAAC,GAAGA,eAAe,CAAC;AAAEnC,MAAAA,UAAAA;AAAW,KAAC,CAAC,CAAA;AAC9G,GAAA;AACA;AACA,EAAA,MAAMuC,WAAWA,CAAC;AAAEzJ,IAAAA,IAAAA;AAAK,GAAC,EAAE;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,OAAO,MAAM,IAAI,CAAC6G,MAAM,CAACkC,OAAO,CAAC,aAAa,EAAE;AAC5CI,MAAAA,aAAa,EAAGnJ,IAAI;AAAEkJ,MAAAA,UAAU,EAAG,IAAI,CAACrC,MAAM,CAAC6C,YAAY;MAAExC,UAAU,EAAG,IAAI,CAACA,UAAAA;AACnF,KAAC,CAAC,CAAA;AACN,GAAA;AACAyC,EAAAA,gBAAgBA,CAAC;IAAErN,MAAM;AAAEsN,IAAAA,KAAAA;AAAM,GAAC,EAAE;IAChC,MAAMtO,EAAE,GAAG,IAAI,CAAA;IACf,IAAIA,EAAE,CAACoM,OAAO,EAAE;MACZkC,KAAK,CAACC,OAAO,GAAG;QACZhG,IAAI,EAAUvI,EAAE,CAACmL,OAAO;AACxBqD,QAAAA,WAAW,EAAGxO,EAAE;AAChByO,QAAAA,IAAI,EAAU,mBAAmB;AACjCC,QAAAA,MAAM,EAAQ,GAAG;QACjBhD,QAAQ,EAAM1K,MAAM,CAACoI,QAAQ,IAAI,CAACpJ,EAAE,CAAC2M,WAAW;AAChDgC,QAAAA,MAAM,EAAQA,MAAM3O,EAAE,CAACgN,GAAG,EAAC;OAC9B,CAAA;MACDsB,KAAK,CAACM,SAAS,GAAG;QACdrG,IAAI,EAAUvI,EAAE,CAACoL,SAAS;AAC1BoD,QAAAA,WAAW,EAAGxO,EAAE;AAChByO,QAAAA,IAAI,EAAU,qBAAqB;AACnCC,QAAAA,MAAM,EAAQ,GAAG;AACjBhD,QAAAA,QAAQ,EAAM1K,MAAM,CAACoI,QAAQ,IAAI,CAACpJ,EAAE,CAAC2M,WAAW,IAAI3M,EAAE,CAAC6O,gBAAgB,EAAE,KAAK,KAAK;AACnFF,QAAAA,MAAM,EAAQA,MAAM3O,EAAE,CAAC2N,KAAK,EAAC;OAChC,CAAA;MACDW,KAAK,CAACQ,QAAQ,GAAG;QACbvG,IAAI,EAAUvI,EAAE,CAACkL,QAAQ;AACzBsD,QAAAA,WAAW,EAAGxO,EAAE;AAChB4C,QAAAA,GAAG,EAAW,aAAa;AAC3B6L,QAAAA,IAAI,EAAU,oBAAoB;AAClCC,QAAAA,MAAM,EAAQ,GAAG;AACjBC,QAAAA,MAAM,EAAQA,MAAM3O,EAAE,CAACiN,IAAI,EAAC;OAC/B,CAAA;AACL,KAAA;AACJ,GAAA;AACJ,CAAA;AACAvC,aAAa,CAACrG,MAAM,GAAG,eAAe,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAACtE,aAAa,CAAC;;AChQzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMuE,WAAW,SAASC,cAAc,CAAC;AACpD;EACA,OAAOvG,KAAK,GAAG,aAAa,CAAA;AAC5B,EAAA,OAAOmC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQqE,IAAAA,eAAe,EAAG,IAAA;GACrB,CAAA;AACD;AACA;AACAtP,EAAAA,SAASA,CAACO,IAAI,EAAEN,MAAM,EAAE;IACpB,KAAK,CAACD,SAAS,CAACO,IAAI,EAAE,IAAI,CAACgP,aAAa,CAACtP,MAAM,CAAC,CAAC,CAAA;AACrD,GAAA;AACAuP,EAAAA,OAAOA,GAAG;IACN,MAAMrP,EAAE,GAAG,IAAI,CAAA;AACfA,IAAAA,EAAE,CAACsP,GAAG,GAAG7M,OAAO,CAAC8M,GAAG,CAAC;AACjBC,MAAAA,UAAU,EAAUxP,EAAE,CAACuL,MAAM,CAAC9K,OAAO;AACrCgP,MAAAA,WAAW,EAAS,kEAAkE;AACtFC,MAAAA,UAAU,EAAU,IAAI;AACxBC,MAAAA,UAAU,EAAU,KAAK;AACzB/M,MAAAA,GAAG,EAAiB,mBAAmB;MACvCgN,OAAO,EAAa5P,EAAE,CAAC6P,iBAAiB,CAACC,IAAI,CAAC9P,EAAE,CAAC;AACjD+P,MAAAA,iBAAiB,EAAG;AAChBC,QAAAA,WAAW,EAAG,eAAe;AAC7BzP,QAAAA,OAAO,EAAOP,EAAAA;OACjB;AACD;MACAiQ,SAAS,EAAGjQ,EAAE,CAACkQ,mBAAAA;AACnB,KAAC,EAAElQ,EAAE,CAACmQ,aAAa,CAAC,CAAA;AACpBnQ,IAAAA,EAAE,CAACoQ,WAAW,CAACpQ,EAAE,CAACsP,GAAG,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAA;AAClD,GAAA;AACAe,EAAAA,aAAaA,CAAC;AAAEvN,IAAAA,MAAAA;AAAO,GAAC,EAAE;IACtB,MAAM/B,MAAM,GAAG,IAAI,CAACwK,MAAM,CAAC+E,oBAAoB,CAACxN,MAAM,CAAC,CAAA;AACvD;AACA,IAAA,OAAO/B,MAAM,CAACoO,eAAe,KAAK,KAAK,IAAIhD,OAAO,CAACpL,MAAM,CAACoO,eAAe,IAAI,IAAI,CAACA,eAAe,CAAC,CAAA;AACtG,GAAA;AACA;AACA;EACAC,aAAaA,CAACtP,MAAM,EAAE;AAClB,IAAA,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;MAC9B,OAAO;AACHqP,QAAAA,eAAe,EAAGrP,MAAAA;OACrB,CAAA;AACL,KAAA;AACA,IAAA,OAAOA,MAAM,CAAA;AACjB,GAAA;AACA;EACAyQ,SAASA,CAACzQ,MAAM,EAAE;IACd,KAAK,CAACyQ,SAAS,CAAC,IAAI,CAACnB,aAAa,CAACtP,MAAM,CAAC,CAAC,CAAA;AAC/C,GAAA;AACA0Q,EAAAA,SAASA,GAAG;IACR,IAAI,CAAClB,GAAG,IAAI,IAAI,CAACA,GAAG,CAACmB,OAAO,EAAE,CAAA;IAC9B,KAAK,CAACD,SAAS,EAAE,CAAA;AACrB,GAAA;EACAE,SAASA,CAACC,OAAO,EAAE;IACf,IAAI,CAACA,OAAO,EAAE;MACV,IAAI,CAACtB,OAAO,EAAE,CAAA;AAClB,KAAC,MACI,IAAI,IAAI,CAACC,GAAG,EAAE;AACf,MAAA,IAAI,CAACA,GAAG,CAACmB,OAAO,EAAE,CAAA;MAClB,IAAI,CAACnB,GAAG,GAAG,IAAI,CAAA;AACnB,KAAA;AACA,IAAA,KAAK,CAACoB,SAAS,CAACC,OAAO,CAAC,CAAA;AAC5B,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACId,EAAAA,iBAAiBA,CAAC;IAAEP,GAAG;AAAEsB,IAAAA,YAAY,EAAGrK,WAAW;AAAE4C,IAAAA,KAAAA;AAAM,GAAC,EAAE;IAC1D,MACInJ,EAAE,GAAO,IAAI;MACbgB,MAAM,GAAGhB,EAAE,CAACuL,MAAM,CAACsF,oBAAoB,CAACtK,WAAW,CAAC;MACpDxF,MAAM,GAAGf,EAAE,CAACuL,MAAM,CAAC+E,oBAAoB,CAAC/J,WAAW,CAAC;AACpDuK,MAAAA,GAAG,GAAM;QAAEvK,WAAW;QAAEvF,MAAM;QAAED,MAAM;QAAEoI,KAAK;QAAEmG,GAAG;AAAEyB,QAAAA,WAAW,EAAG/Q,EAAAA;OAAI,CAAA;AAC1E,IAAA,IAAI4F,MAAM,CAAA;AACV;IACA,IAAI,CAAC5F,EAAE,CAACyP,WAAW,IAAIzO,MAAM,KAAKhB,EAAE,CAACgR,UAAU,IAAIhQ,MAAM,CAACiQ,UAAU,KAAKjR,EAAE,CAACkR,oBAAoB,IAAInQ,MAAM,KAAKf,EAAE,CAACmR,UAAU,EAAE;AAC1H,MAAA,OAAOnR,EAAE,CAACsP,GAAG,CAAC8B,KAAK,CAAA;AACvB,KAAA;IACApR,EAAE,CAACgR,UAAU,GAAGhQ,MAAM,CAAA;AACtBhB,IAAAA,EAAE,CAACkR,oBAAoB,GAAGlQ,MAAM,CAACiQ,UAAU,CAAA;IAC3CjR,EAAE,CAACmR,UAAU,GAAGpQ,MAAM,CAAA;AACtB;IACA,IAAIA,MAAM,CAACoO,eAAe,EAAE;AACxBvJ,MAAAA,MAAM,GAAG7E,MAAM,CAACoO,eAAe,CAAC2B,GAAG,CAAC,CAAA;AACxC,KAAA;AACA;SACK,IAAI9Q,EAAE,CAACmP,eAAe,IAAIpO,MAAM,CAACoO,eAAe,KAAK,KAAK,EAAE;AAC7DvJ,MAAAA,MAAM,GAAG5F,EAAE,CAACmP,eAAe,CAAC2B,GAAG,CAAC,CAAA;AACpC,KAAA;AACA;AACA,IAAA,IAAIO,OAAO,CAACC,SAAS,CAAC1L,MAAM,CAAC,EAAE;MAC3B5F,EAAE,CAACgR,UAAU,GAAGhR,EAAE,CAACkR,oBAAoB,GAAGlR,EAAE,CAACmR,UAAU,GAAG,IAAI,CAAA;AAClE,KAAA;AACA;IACA,IAAI,CAACvL,MAAM,EAAE;MACT0J,GAAG,CAACiC,IAAI,EAAE,CAAA;AACd,KAAA;AACA,IAAA,OAAO3L,MAAM,CAAA;AACjB,GAAA;AACA;AACJ,CAAA;;AACAqJ,WAAW,CAAC5K,MAAM,GAAG,aAAa,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAACC,WAAW,CAAC;;ACzKnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMuC,YAAY,SAAStC,cAAc,CAAC;EACrD,OAAOvG,KAAK,GAAG,cAAc,CAAA;AAC7B,EAAA,OAAOmC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACQ2G,IAAAA,MAAM,EAAG;AACLC,MAAAA,EAAE,EAAG,WAAA;AACT,KAAA;GACH,CAAA;AACDlB,EAAAA,SAASA,GAAG;AAAA,IAAA,IAAAmB,YAAA,CAAA;IACR,CAAAA,YAAA,GAAI,IAAA,CAACpS,MAAM,MAAA,IAAA,IAAAoS,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,YAAA,CAAalB,OAAO,EAAE,CAAA;IACtB,KAAK,CAACD,SAAS,EAAE,CAAA;AACrB,GAAA;EACA,WAAW5F,YAAYA,GAAG;IACtB,OAAO;MACHgH,KAAK,EAAG,CAAC,oBAAoB,CAAA;KAChC,CAAA;AACL,GAAA;AACAC,EAAAA,kBAAkBA,CAAC;IAAEvD,KAAK;AAAEvN,IAAAA,MAAAA;AAAO,GAAC,EAAE;IAClCuN,KAAK,CAACwD,MAAM,GAAG;AACXpD,MAAAA,MAAM,EAAK,GAAG;AACdD,MAAAA,IAAI,EAAO,uBAAuB;AAClClG,MAAAA,IAAI,EAAO,IAAI,CAACwJ,CAAC,CAAC,WAAW,CAAC;MAC9BrG,QAAQ,EAAG3K,MAAM,CAACqI,QAAQ;AAC1BuF,MAAAA,MAAM,EAAKA,MAAM,IAAI,CAACqD,SAAS,CAACjR,MAAM,CAAA;KACzC,CAAA;AACL,GAAA;EACAiR,SAASA,CAACjR,MAAM,EAAE;IACd,IAAIA,MAAM,YAAYkR,KAAK,EAAE;AAAA,MAAA,IAAAC,qBAAA,CAAA;AACzB;AACAnR,MAAAA,MAAM,IAAAmR,qBAAA,GAAG,IAAI,CAAC3G,MAAM,CAAC4G,sBAAsB,CAACpR,MAAM,CAAC,MAAAmR,IAAAA,IAAAA,qBAAA,KAA1CA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA4CnR,MAAM,CAAA;AAC/D,KAAA;AACA,IAAA,IAAIA,MAAM,EAAE;MACR,IAAIA,MAAM,CAACqI,QAAQ,EAAE;AACjB;AACA,QAAA,OAAO,KAAK,CAAA;AAChB,OAAA;MACA,MAAM;AAAEgJ,QAAAA,WAAAA;AAAY,OAAC,GAAGrR,MAAM,CAAA;MAC9B,IAAI;AAAExB,QAAAA,MAAAA;AAAO,OAAC,GAAG,IAAI,CAAA;MACrB,IAAI,CAACA,MAAM,EAAE;AACT,QAAA,IAAI,CAACA,MAAM,GAAGA,MAAM,GAAG,IAAI8S,MAAM,CAAC;UAC9BC,KAAK,EAAG,IAAI,CAAC/G,MAAM;AACnBhG,UAAAA,KAAK,EAAG;AACJA,YAAAA,KAAK,EAAG,OAAA;AACZ,WAAA;AACJ,SAAC,CAAC,CAAA;AACN,OAAA;AACAhG,MAAAA,MAAM,CAACgT,MAAM,CAACH,WAAW,CAAC,CAAA;MAC1B7S,MAAM,CAACyS,SAAS,CAAC;AACblP,QAAAA,MAAM,EAAGsP,WAAW;AACpBpR,QAAAA,MAAM,EAAGD,MAAM;AACfsE,QAAAA,KAAK,EAAI,MAAA;AACb,OAAC,CAAC,CAAA;AACN,KAAA;AACJ,GAAA;AACJ,CAAA;AACAmM,YAAY,CAACnN,MAAM,GAAG,cAAc,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAACwC,YAAY,EAAE,KAAK,CAAC;;ACrF7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMgB,UAAU,SAAStD,cAAc,CAACuD,KAAK,CAACC,SAAS,CAAC,CAAC;EACpE,OAAO/J,KAAK,GAAG,YAAY,CAAA;AAC3B,EAAA,OAAOmC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ6H,IAAAA,kBAAkB,EAAG,IAAI;AACzB;AACR;AACA;AACA;AACA;AACQC,IAAAA,aAAa,EAAG,KAAA;GACnB,CAAA;AACD;AACA,EAAA,OAAOhI,YAAY,GAAG;IAClBC,KAAK,EAAM,CAAC,sBAAsB,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;IACjGgI,QAAQ,EAAG,CAAC,sBAAsB,CAAA;GACrC,CAAA;AACDxH,EAAAA,cAAcA,GAAG;IACb,KAAK,CAACA,cAAc,EAAE,CAAA;IACtB,IAAI,CAAC,IAAI,CAACE,MAAM,CAACC,aAAa,CAACC,IAAI,EAAE;MACjC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAA;AACxB,KAAA;AACA,IAAA,IAAI,CAACoH,cAAc,GAAG,EAAE,CAAA;AAC5B,GAAA;AACAC,EAAAA,SAAS,GAAG;AACRC,IAAAA,eAAe,EAAG,KAAA;GACrB,CAAA;AACDC,EAAAA,eAAeA,GAAG;IACd,IAAI,CAACD,eAAe,EAAE,CAAA;AAC1B,GAAA;AACAE,EAAAA,kBAAkBA,GAAG;IACjB,IAAI,CAACF,eAAe,EAAE,CAAA;AAC1B,GAAA;AACAG,EAAAA,iBAAiBA,GAAG;IAChB,IAAI,CAACH,eAAe,EAAE,CAAA;AAC1B,GAAA;AACAI,EAAAA,oBAAoBA,CAACjK,KAAK,EAAEkK,sBAAsB,EAAE;AAChD,IAAA,IAAIA,sBAAsB,EAAE;MACxBA,sBAAsB,GAAG,CAAClK,KAAK,CAACrG,MAAM,CAACpC,SAAS,CAACsC,QAAQ,CAAC,eAAe,CAAC,CAAA;AAC9E,KAAA;IACA,OAAO,IAAI,CAACsQ,UAAU,CAACF,oBAAoB,CAACjK,KAAK,EAAEkK,sBAAsB,CAAC,CAAA;AAC9E,GAAA;AACA;AACAE,EAAAA,qBAAqBA,CAACC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,EAAE;IAC/C,MAAMC,MAAM,GAAG,EAAE,CAAA;AACjB;AACA,IAAA,KAAK,MAAMlI,IAAI,IAAI+H,KAAK,EAAE;MACtB,MAAMI,EAAE,GAAGH,UAAU,GAAGhI,IAAI,CAACmI,EAAE,GAAGnI,IAAI,CAACoI,QAAQ,CAAA;AAC/C,MAAA,IAAIjN,KAAK,GAAG6E,IAAI,CAACzK,MAAM,CAACsG,QAAQ,CAACmE,IAAI,CAAC1K,MAAM,CAACsE,KAAK,CAAC,CAAA;AACnD;AACA,MAAA,IAAIuB,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,CAACkN,KAAK,CAAClN,KAAK,CAAC,EAAE;AACrDA,QAAAA,KAAK,GAAGd,UAAU,CAACc,KAAK,CAAC,CAAA;AAC7B,OAAA;AACA,MAAA,IAAI,CAAC+M,MAAM,CAACC,EAAE,CAAC,EAAE;AACbD,QAAAA,MAAM,CAACC,EAAE,CAAC,GAAG,EAAE,CAAA;AACnB,OAAA;AACAD,MAAAA,MAAM,CAACC,EAAE,CAAC,CAAClQ,IAAI,CAACkD,KAAK,CAAC,CAAA;AAC1B,KAAA;AACA;AACA,IAAA,KAAK,MAAMmN,QAAQ,IAAIJ,MAAM,EAAE;AAC3BA,MAAAA,MAAM,CAACI,QAAQ,CAAC,CAACC,OAAO,GAAG,IAAI,CAACC,qBAAqB,CAACN,MAAM,CAACI,QAAQ,CAAC,EAAEL,QAAQ,CAAC,CAAA;AACrF,KAAA;AACA,IAAA,OAAOC,MAAM,CAAA;AACjB,GAAA;AACAM,EAAAA,qBAAqBA,CAACT,KAAK,EAAEE,QAAQ,EAAE;AACnC,IAAA,MACIQ,SAAS,GAAGV,KAAK,CAACE,QAAQ,GAAG,CAAC,GAAIF,KAAK,CAAC7P,MAAM,GAAG,CAAE,CAAC;AACpDqQ,MAAAA,OAAO,GAAK;QACRG,IAAI,EAAGA,MAAMD,SAAS;AACtBA,QAAAA,SAAAA;OACH,CAAA;AACL;IACA,IAAIV,KAAK,CAACY,KAAK,CAACC,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,CAAC,IAAIb,KAAK,CAACY,KAAK,CAACC,GAAG,IAAIA,GAAG,YAAYC,IAAI,CAAC,EAAE;AACxF,MAAA,MAAMC,KAAK,GAAGf,KAAK,CAAC7R,GAAG,CAAC,CAAC0S,GAAG,EAAEG,EAAE,KAAKH,GAAG,GAAGb,KAAK,CAACgB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAA;AACzDD,MAAAA,KAAK,CAACE,KAAK,EAAE,CAAC;AACd;MACA,IAAI,IAAIC,GAAG,CAACH,KAAK,CAAC,CAACI,IAAI,KAAK,CAAC,EAAE;AAC3BX,QAAAA,OAAO,CAACY,UAAU,GAAGL,KAAK,CAAC,CAAC,CAAC,IAAIb,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACnDM,OAAO,CAACG,IAAI,GAAG,MAAM;AACjB,UAAA,IAAIH,OAAO,CAACE,SAAS,YAAYI,IAAI,EAAE;AACnCN,YAAAA,OAAO,CAACE,SAAS,GAAG,IAAII,IAAI,CAACN,OAAO,CAACE,SAAS,CAACW,OAAO,EAAE,GAAGb,OAAO,CAACY,UAAU,CAAC,CAAA;AAClF,WAAC,MACI;AACDZ,YAAAA,OAAO,CAACE,SAAS,IAAIF,OAAO,CAACY,UAAU,CAAA;AAC3C,WAAA;UACA,OAAOZ,OAAO,CAACE,SAAS,CAAA;SAC3B,CAAA;AACL,OAAA;AACJ,KAAA;AACA;AAAA,SACK,IAAIV,KAAK,CAAC7P,MAAM,GAAG,CAAC,EAAE;AACvBqQ,MAAAA,OAAO,CAACc,aAAa,GAAG,CAAC,GAAGtB,KAAK,CAAC,CAAA;MAClCQ,OAAO,CAACG,IAAI,GAAG,MAAM;AACjB,QAAA,IAAIH,OAAO,CAACe,YAAY,KAAKvM,SAAS,EAAE;UACpCwL,OAAO,CAACe,YAAY,GAAG,CAAC,CAAA;AAC5B,SAAC,MACI;UACDf,OAAO,CAACe,YAAY,IAAI,CAAC,CAAA;UACzB,IAAIf,OAAO,CAACe,YAAY,IAAIf,OAAO,CAACc,aAAa,CAACnR,MAAM,EAAE;YACtDqQ,OAAO,CAACe,YAAY,GAAG,CAAC,CAAA;AAC5B,WAAA;AACJ,SAAA;AACA,QAAA,OAAOf,OAAO,CAACc,aAAa,CAACd,OAAO,CAACe,YAAY,CAAC,CAAA;OACrD,CAAA;AACL,KAAA;AACA,IAAA,OAAOf,OAAO,CAAA;AAClB,GAAA;AACA;AACAgB,EAAAA,oBAAoBA,GAAG;IACnB,MAAMhV,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,IAAIA,EAAE,CAACuL,MAAM,CAACnC,QAAQ,EAAE;MACpBpJ,EAAE,CAACiV,cAAc,EAAE,CAAA;AACnB,MAAA,OAAA;AACJ,KAAA;AACA;AACA,IAAA,IAAIC,YAAY,CAACC,WAAW,EAAE,EAAE;AAC5BnV,MAAAA,EAAE,CAACuL,MAAM,CAAC6J,iBAAiB,CAAC,MAAMpV,EAAE,CAACgT,eAAe,CAAC,IAAI,CAAC,CAAC,CAAA;AAC3D;MACAhT,EAAE,CAACiV,cAAc,EAAE,CAAA;AACvB,KAAA;AACA;SACK;AACDjV,MAAAA,EAAE,CAACgT,eAAe,CAAC,IAAI,CAAC,CAAA;AAC5B,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;AACIA,EAAAA,eAAeA,GAAG;AACd,IAAA,IAAI,CAAC,IAAI,CAACqC,YAAY,EAAE;AACpB,MAAA,MAAM7B,KAAK,GAAG,IAAI,CAAC8B,cAAc,CAAA;AACjC,MAAA,IAAI9B,KAAK,EAAE;AACP,QAAA,IAAI,CAAC+B,uBAAuB,CAAC/B,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAACA,KAAK,CAAC7P,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;AACnE,OAAC,MACI;QACD,IAAI,CAACsR,cAAc,EAAE,CAAA;AACzB,OAAA;AACJ,KAAA;AACJ,GAAA;AACA;AACA;EACAO,WAAWA,CAACrM,KAAK,EAAE;IACf,MAAM;AAAEoC,MAAAA,MAAAA;AAAO,KAAC,GAAG,IAAI,CAAA;AACvB,IAAA,IAAI,CAACA,MAAM,CAACnC,QAAQ,EAAE;MAClB,IAAI,CAAC0J,cAAc,CAAC2C,aAAa,GAAGC,WAAW,CAACC,EAAE,CAAC;AAC/ClV,QAAAA,OAAO,EAAKmV,UAAU;AACtBC,QAAAA,SAAS,EAAG;AACR7O,UAAAA,OAAO,EAAG,aAAa;UACvBvG,OAAO,EAAG8K,MAAM,CAACuK,sCAAAA;SACpB;AACDC,QAAAA,OAAO,EAAG,WAAW;AACrBxV,QAAAA,OAAO,EAAG,IAAA;AACd,OAAC,CAAC,CAAA;MACF4I,KAAK,CAAC6M,cAAc,EAAE,CAAA;MACtB7M,KAAK,CAAC8M,wBAAwB,EAAE,CAAA;MAChC9M,KAAK,CAAC+M,OAAO,GAAG,IAAI,CAAA;AACxB,KAAA;AACJ,GAAA;AACA;AACAC,EAAAA,SAASA,GAAG;IACR,MACInW,EAAE,GAAgB,IAAI;AACtB,MAAA;QACIuL,MAAM;QACN6K,YAAY;AACZC,QAAAA,WAAAA;AACJ,OAAC,GAAiBrW,EAAE;MACpBwT,KAAK,GAAaxT,EAAE,CAACsV,cAAc;AACnCgB,MAAAA,eAAe,GAAG9C,KAAK,IAAI4C,YAAY,IAAI7K,MAAM,CAACgL,mBAAmB,CAACH,YAAY,CAACI,IAAI,EAAEJ,YAAY,CAACK,EAAE,CAAC;MACzGnK,aAAa,GAAK,CAAAgK,eAAe,KAAfA,IAAAA,IAAAA,eAAe,uBAAfA,eAAe,CAAEhK,aAAa,KAAI,EAAE;AACtD;AACA;AACAoK,MAAAA,cAAc,GAAIL,WAAW,GAAGrW,EAAE,CAAC2W,aAAa,GAC1CrK,aAAa,CAACc,MAAM,CAAC3B,IAAI,IAAI,CAAC+H,KAAK,CAACoD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,MAAM,CAACrL,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;AAClF,IAAA,OAAOzL,EAAE,CAACqW,WAAW,CAAC;IACtB,IAAIrW,EAAE,CAACqV,YAAY,EAAE;AACjB9J,MAAAA,MAAM,CAACwL,4BAA4B,CAACxL,MAAM,CAAC+C,KAAK,CAAC,CAAA;MACjD,OAAOtO,EAAE,CAACqV,YAAY,CAAA;AAC1B,KAAA;AACA;IACA,IAAI,EAACqB,cAAc,KAAdA,IAAAA,IAAAA,cAAc,eAAdA,cAAc,CAAE/S,MAAM,CAAE,EAAA;MACzB3D,EAAE,CAACgT,eAAe,EAAE,CAAA;AACpB,MAAA,OAAA;AACJ,KAAA;IACAzH,MAAM,CAACyL,cAAc,EAAE,CAAA;AACvB;AACA,IAAA,IAAIX,WAAW,EAAE;MACbK,cAAc,CAAClT,OAAO,CAACiI,IAAI,IAAIA,IAAI,CAACzK,MAAM,CAACoG,GAAG,CAACqE,IAAI,CAAC1K,MAAM,CAACsE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAA;AACvG,KAAA;AACA;SACK;AACD,MAAA,MACI,CAAC4R,SAAS,CAAC,GAAGP,cAAc;AAC5B;AACAjD,QAAAA,UAAU,GAAID,KAAK,CAACoD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC7V,MAAM,KAAKiW,SAAS,CAACjW,MAAM,CAAC;AAChE;QACA0S,QAAQ,GAAMD,UAAU,GAClBwD,SAAS,CAACC,WAAW,GAAG1D,KAAK,CAAC,CAAC,CAAC,CAAC0D,WAAW,GAC5CD,SAAS,CAACE,QAAQ,GAAG3D,KAAK,CAAC,CAAC,CAAC,CAAC2D,QAAQ;QAC5CC,QAAQ,GAAMpX,EAAE,CAACuT,qBAAqB,CAACC,KAAK,EAAEC,UAAU,EAAEC,QAAQ,CAAC;AACnE2D,QAAAA,SAAS,GAAK,IAAIC,GAAG,EAAE,CAAA;AAC3B,MAAA,IAAI5D,QAAQ,EAAE;QACVgD,cAAc,CAACa,OAAO,EAAE,CAAA;AAC5B,OAAA;AACA,MAAA,KAAK,MAAM9L,IAAI,IAAIiL,cAAc,EAAE;QAC/B,MAAM;UAAE3V,MAAM;AAAEC,UAAAA,MAAAA;AAAO,SAAC,GAAGyK,IAAI,CAAA;QAC/B,IAAI,CAAC1K,MAAM,CAACqI,QAAQ,IAAIrI,MAAM,CAACwG,YAAY,CAAC;UAAEiM,KAAK;UAAExS,MAAM;AAAEyK,UAAAA,IAAAA;AAAK,SAAC,CAAC,EAAE;UAAA,IAAA+L,qBAAA,EAAAC,qBAAA,CAAA;AAClE,UAAA,IAAI7Q,KAAK,GAAA,CAAA4Q,qBAAA,GAAKxX,EAAE,CAAC2S,kBAAkB,MAAA6E,IAAAA,IAAAA,qBAAA,uBAArBA,qBAAA,CAAAjW,IAAA,CAAAvB,EAAE,EAAsB;cAAEwT,KAAK;cAAEzS,MAAM;cAAEC,MAAM;AAAEyK,cAAAA,IAAAA;AAAK,aAAC,CAAC;AAClEiM,YAAAA,OAAO,GAAGL,SAAS,CAAC7M,GAAG,CAACxJ,MAAM,CAAC,CAAA;UACnC,IAAI,CAAC0W,OAAO,EAAE;YACVA,OAAO,GAAG,EAAE,CAAA;AACZL,YAAAA,SAAS,CAACjQ,GAAG,CAACpG,MAAM,EAAE0W,OAAO,CAAC,CAAA;AAClC,WAAA;UACA,IAAI9Q,KAAK,KAAK4B,SAAS,EAAE;AACrB,YAAA,MAAMwL,OAAO,GAAGoD,QAAQ,CAAC3D,UAAU,GAAGhI,IAAI,CAACmI,EAAE,GAAGnI,IAAI,CAACoI,QAAQ,CAAC,CAACG,OAAO,CAAA;AACtEpN,YAAAA,KAAK,GAAGoN,OAAO,CAACG,IAAI,EAAE,CAAA;AAC1B,WAAA;UACAuD,OAAO,CAAC3W,MAAM,CAACsE,KAAK,CAAC,GAAG,CAAA,CAAAoS,qBAAA,GAAA1W,MAAM,CAAC4R,kBAAkB,MAAA,IAAA,IAAA8E,qBAAA,KAAzBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAAlW,IAAA,CAAAR,MAAM,EAAsB;YAAE6F,KAAK;YAAE5F,MAAM;AAAEwS,YAAAA,KAAAA;WAAO,CAAC,KAAI5M,KAAK,CAAA;AAC1F,SAAA;AACJ,OAAA;MACA,KAAK,MAAM,CAAC5F,MAAM,EAAEiF,OAAO,CAAC,IAAIoR,SAAS,EAAE;AACvCrW,QAAAA,MAAM,CAACoG,GAAG,CAACnB,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;AACrD,OAAA;AACJ,KAAA;AACAsF,IAAAA,MAAM,CAACoM,aAAa,CAAC,IAAI,CAAC,CAAA;AAC1B;AACApM,IAAAA,MAAM,CAACqM,gBAAgB,CAACtB,eAAe,CAAC,CAAA;IACxC,OAAOtW,EAAE,CAACoW,YAAY,CAAA;IACtBpW,EAAE,CAACgT,eAAe,EAAE,CAAA;AACxB,GAAA;AACA;EACA6E,WAAWA,CAAC1O,KAAK,EAAE;IAAA,IAAA2O,aAAA,EAAAC,qBAAA,CAAA;IACf,MACI/X,EAAE,GAAa,IAAI;AACnB,MAAA;QACIuL,MAAM;AACN+J,QAAAA,cAAAA;AACJ,OAAC,GAActV,EAAE;AACjBgY,MAAAA,KAAK,GAAU1C,cAAc,CAAC,CAAC,CAAC;MAChC2C,IAAI,GAAW3C,cAAc,CAACA,cAAc,CAAC3R,MAAM,GAAG,CAAC,CAAC;MACxDuU,QAAQ,GAAO3M,MAAM,CAAC6H,oBAAoB,CAACjK,KAAK,EAAE,IAAI,CAAC,CAAA;IAC3D,IAAIgP,YAAY,GAAGD,QAAQ,IAAI3M,MAAM,CAAC6M,oBAAoB,CAACF,QAAQ,CAACC,YAAY,CAAC,CAAA;IACjF,IAAI,CAAA,CAAAL,aAAA,GAAAK,YAAY,MAAA,IAAA,IAAAL,aAAA,KAAAC,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,qBAAA,GAAZD,aAAA,CAAcO,OAAO,cAAAN,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArBA,qBAAA,CAAuBO,MAAM,MAAKN,KAAK,CAACK,OAAO,CAACC,MAAM,EAAE;AACxD,MAAA,MACIC,cAAc,GAAGjD,cAAc,CAACsB,IAAI,CAAC4B,EAAE,IAAIA,EAAE,CAAC1B,MAAM,CAACqB,YAAY,EAAE,IAAI,CAAC,CAAC,CAAA;AAC7E,MAAA,IAAIzE,QAAQ,CAAA;AACZ,MAAA,IAAI,CAAC1T,EAAE,CAACqV,YAAY,EAAE;AAClB9J,QAAAA,MAAM,CAACkN,2BAA2B,CAAClN,MAAM,CAAC+C,KAAK,CAAC,CAAA;AACpD,OAAA;AACA,MAAA,IAAIiK,cAAc,EAAE;AAChB;QACAvY,EAAE,CAACqW,WAAW,GAAGrW,EAAE,CAAC4S,aAAa,KAC5BuF,YAAY,CAAChB,QAAQ,GAAGc,IAAI,CAACd,QAAQ,IAAIgB,YAAY,CAACjB,WAAW,GAAGe,IAAI,CAACf,WAAW,CAAC,CAAA;AAC9F,OAAC,MACI;AACD;AACA,QAAA,IAAIiB,YAAY,CAAChB,QAAQ,IAAIa,KAAK,CAACb,QAAQ,IAAIgB,YAAY,CAAChB,QAAQ,IAAIc,IAAI,CAACd,QAAQ,EAAE;AACnFzD,UAAAA,QAAQ,GAAOsE,KAAK,CAACd,WAAW,GAAGiB,YAAY,CAACjB,WAAW,CAAA;UAC3DiB,YAAY,GAAG,IAAIO,QAAQ,CAAC;AACxBtY,YAAAA,IAAI,EAAKmL,MAAM;YACfvK,MAAM,EAAG0S,QAAQ,GAAGsE,KAAK,CAAChX,MAAM,GAAGiX,IAAI,CAACjX,MAAM;YAC9CD,MAAM,EAAGoX,YAAY,CAACpX,MAAAA;AAC1B,WAAC,CAAC,CAAA;AACN,SAAA;AACA;aACK;AACD2S,UAAAA,QAAQ,GAAOsE,KAAK,CAACb,QAAQ,GAAGgB,YAAY,CAAChB,QAAQ,CAAA;UACrDgB,YAAY,GAAG,IAAIO,QAAQ,CAAC;AACxBtY,YAAAA,IAAI,EAAKmL,MAAM;YACfvK,MAAM,EAAGmX,YAAY,CAACnX,MAAM;YAC5BD,MAAM,EAAG2S,QAAQ,GAAGsE,KAAK,CAACjX,MAAM,GAAGkX,IAAI,CAAClX,MAAAA;AAC5C,WAAC,CAAC,CAAA;AACN,SAAA;AACJ,OAAA;AACA;AACA,MAAA;AACI;AACA;AACAyV,QAAAA,IAAI,GAAG9C,QAAQ,GAAGyE,YAAY,GAAGH,KAAK;AACtC;AACA;AACAvB,QAAAA,EAAE,GAAK/C,QAAQ,IAAK6E,cAAc,IAAI,CAACvY,EAAE,CAACqW,WAAY,GAAG4B,IAAI,GAAGE,YAAY,CAAA;MAChFnY,EAAE,CAACoW,YAAY,GAAG;QAAEI,IAAI;AAAEC,QAAAA,EAAAA;OAAI,CAAA;AAC9B;MACAzW,EAAE,CAACqV,YAAY,GAAG,IAAI,CAAA;MACtBrV,EAAE,CAACuV,uBAAuB,CAACiB,IAAI,EAAEC,EAAE,EAAE,IAAI,CAAC,CAAA;AAC9C,KAAA;AACJ,GAAA;AACA;AACA;EACAlB,uBAAuBA,CAACiB,IAAI,EAAEC,EAAE,EAAEkC,aAAa,GAAG,KAAK,EAAE;AAAA,IAAA,IAAAC,kBAAA,CAAA;IACrD,MACI5Y,EAAE,GAAU,IAAI;AAChB,MAAA;QACIuL,MAAM;QACN6K,YAAY;AACZtD,QAAAA,cAAAA;AACJ,OAAC,GAAW9S,EAAE;AACd6Y,MAAAA,QAAQ,GAAItN,MAAM,CAACuN,QAAQ,CAACtC,IAAI,CAACzV,MAAM,CAACuX,MAAM,CAAC,CAAC7X,OAAO;AACvD,MAAA;AAAEsY,QAAAA,CAAAA;AAAE,OAAC,GAAOC,SAAS,CAACxC,IAAI,CAACA,IAAI,CAAC/K,IAAI,IAAI+K,IAAI,CAACzV,MAAM,CAACN,OAAO,EAAEoY,QAAQ,CAAC;AACtE,MAAA;AAAEI,QAAAA,KAAAA;AAAM,OAAC,GAAGD,SAAS,CAACxC,IAAI,CAACC,EAAE,CAAChL,IAAI,IAAIgL,EAAE,CAAC1V,MAAM,CAACN,OAAO,EAAEoY,QAAQ,CAAC;AAClE,MAAA;AAAEK,QAAAA,CAAAA;OAAG,GAAO3N,MAAM,CAAC4N,eAAe,CAAC3C,IAAI,CAACxV,MAAM,EAAE,IAAI,CAAC;AACrDoY,MAAAA,MAAM,GAAM7N,MAAM,CAAC4N,eAAe,CAAC1C,EAAE,CAACzV,MAAM,EAAE,IAAI,CAAC,CAACoY,MAAM,GAAG,CAAC,CAAA;IAClE,IAAI;MACAC,aAAa;AACbC,MAAAA,aAAAA;AACJ,KAAC,GAAetZ,EAAE,CAAA;AAClBA,IAAAA,EAAE,CAACiV,cAAc,CAAC0D,aAAa,CAAC,CAAA;IAChC,IAAI,CAACU,aAAa,EAAE;MAChBrZ,EAAE,CAACqZ,aAAa,GAAGA,aAAa,GAAGvV,SAAS,CAACC,aAAa,CAAC;AACvDvC,QAAAA,SAAS,EAAG,yBAAA;AAChB,OAAC,CAAC,CAAA;MACFxB,EAAE,CAACsZ,aAAa,GAAGA,aAAa,GAAGxV,SAAS,CAACC,aAAa,CAAC;AACvDvC,QAAAA,SAAS,EAAG,eAAA;AAChB,OAAC,CAAC,CAAA;AACN,KAAA;AACAsC,IAAAA,SAAS,CAACyV,OAAO,CAACF,aAAa,EAAE;MAAEH,CAAC;MAAEH,CAAC;MAAE7Y,KAAK,EAAI+Y,KAAK,GAAGF,CAAE;MAAES,MAAM,EAAIJ,MAAM,GAAGF,CAAAA;AAAG,KAAC,CAAC,CAAA;AACtFL,IAAAA,QAAQ,CAACY,WAAW,CAACJ,aAAa,CAAC,CAAA;AACnC;AACAvV,IAAAA,SAAS,CAAC4V,UAAU,CAACJ,aAAa,EAAEF,MAAM,EAAEH,KAAK,IAAIJ,QAAQ,CAACc,WAAW,GAAGZ,CAAC,GAAGE,KAAK,CAAC,CAAA;AACtFJ,IAAAA,QAAQ,CAACY,WAAW,CAACH,aAAa,CAAC,CAAA;AACnC;AACAtZ,IAAAA,EAAE,CAAC4Z,iBAAiB,CAAC,KAAK,CAAC,CAAA;IAC3B,OAAO5Z,EAAE,CAAC2W,aAAa,CAAA;AACvB;AACA,IAAA,IAAI3W,EAAE,CAACqW,WAAW,IAAA,CAAAuC,kBAAA,GAAI5Y,EAAE,CAACsV,cAAc,cAAAsD,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBjV,MAAM,EAAE;AAC7C,MAAA,MAAMkW,QAAQ,GAAGtO,MAAM,CAACuO,QAAQ,CAAC1D,YAAY,CAACI,IAAI,EAAEJ,YAAY,CAACK,EAAE,CAAC,CAAA;MACpEzW,EAAE,CAAC2W,aAAa,GAAG3W,EAAE,CAACsV,cAAc,CAAClI,MAAM,CAACyJ,GAAG,IAAI,CAACgD,QAAQ,CAACjD,IAAI,CAACnL,IAAI,IAAIA,IAAI,CAACqL,MAAM,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;MAClG7W,EAAE,CAAC4Z,iBAAiB,EAAE,CAAA;AAC1B,KAAA;AACA,IAAA,IAAI,CAAC9G,cAAc,CAACiH,WAAW,EAAE;AAC7BjH,MAAAA,cAAc,CAACiH,WAAW,GAAGrE,WAAW,CAACC,EAAE,CAAC;QACxClV,OAAO,EAAK8K,MAAM,CAACyO,WAAW;AAC9BC,QAAAA,QAAQ,EAAI,gBAAgB;AAC5BC,QAAAA,SAAS,EAAG,aAAa;AACzB3Z,QAAAA,OAAO,EAAKP,EAAAA;AAChB,OAAC,CAAC,CAAA;AACN,KAAA;IACAA,EAAE,CAACma,eAAe,GAAG,IAAI,CAAA;AAC7B,GAAA;AACAP,EAAAA,iBAAiBA,CAACjZ,GAAG,GAAG,IAAI,EAAE;AAAA,IAAA,IAAAyZ,mBAAA,CAAA;IAC1B,CAAAA,mBAAA,GAAI,IAAA,CAACzD,aAAa,MAAA,IAAA,IAAAyD,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAlBA,mBAAA,CAAoB5W,OAAO,CAACqT,GAAG,IAAA;AAAA,MAAA,IAAAwD,oBAAA,CAAA;MAAA,OAAAA,CAAAA,oBAAA,GAAI,IAAI,CAAC9O,MAAM,CAAC/E,OAAO,CAACqQ,GAAG,CAAC,MAAA,IAAA,IAAAwD,oBAAA,KAAxBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAA,CAA0B3Z,SAAS,CAAC4Z,MAAM,CAAC,iBAAiB,EAAE3Z,GAAG,CAAC,CAAA;KAAC,CAAA,CAAA;AAC1G,GAAA;AACAsU,EAAAA,cAAcA,CAAC0D,aAAa,GAAG,KAAK,EAAE;IAAA,IAAA4B,iBAAA,EAAAC,iBAAA,CAAA;IAClC,MAAMxa,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,CAAAua,iBAAA,GAAAva,EAAE,CAACsZ,aAAa,MAAA,IAAA,IAAAiB,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,iBAAA,CAAkBE,MAAM,EAAE,CAAA;AAC1B,IAAA,CAAAD,iBAAA,GAAAxa,EAAE,CAACqZ,aAAa,MAAA,IAAA,IAAAmB,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,iBAAA,CAAkBC,MAAM,EAAE,CAAA;IAC1B,IAAI,CAAC9B,aAAa,EAAE;MAChB3Y,EAAE,CAAC0a,eAAe,EAAE,CAAA;AACxB,KAAA;IACA1a,EAAE,CAACma,eAAe,GAAG,KAAK,CAAA;AAC9B,GAAA;AACA;AACAO,EAAAA,eAAeA,GAAG;IACd,MAAM1a,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,KAAK,MAAM2a,QAAQ,IAAI3a,EAAE,CAAC8S,cAAc,EAAE;AACtC9S,MAAAA,EAAE,CAAC8S,cAAc,CAAC6H,QAAQ,CAAC,EAAE,CAAA;AACjC,KAAA;AACA3a,IAAAA,EAAE,CAAC8S,cAAc,GAAG,EAAE,CAAA;AAC1B,GAAA;AACA;AACA;EACA,IAAIwC,cAAcA,GAAG;IACjB,MACI;AAAE/J,QAAAA,MAAAA;AAAO,OAAC,GAAU,IAAI;AACxB,MAAA;AAAEe,QAAAA,aAAAA;AAAc,OAAC,GAAGf,MAAM;AAC1BiI,MAAAA,KAAK,GAAejI,MAAM,CAACqP,iBAAiB,KAAKtO,aAAa,CAAC3I,MAAM,KAAK,CAAC,IAAI2I,aAAa,CAAC,CAAA;AACjG;AACA;AACA,IAAA,IAAI,CAACf,MAAM,CAACgB,aAAa,CAAC5I,MAAM,IAAI6P,KAAK,KAALA,IAAAA,IAAAA,KAAK,eAALA,KAAK,CAAE7P,MAAM,IAAI6P,KAAK,CAAC7P,MAAM,KAAK2I,aAAa,CAAC3I,MAAM,IACtF6P,KAAK,CAACY,KAAK,CAACyG,EAAE,IAAIvO,aAAa,CAACsK,IAAI,CAACkE,EAAE,IAAID,EAAE,CAAC/D,MAAM,CAACgE,EAAE,EAAE,IAAI,CAAC,CAAC,IAC3DD,EAAE,CAACxC,OAAO,CAAC0C,MAAM,IAAIF,EAAE,CAACxC,OAAO,CAACC,MAAM,KAAK9E,KAAK,CAAC,CAAC,CAAC,CAAC6E,OAAO,CAACC,MAAM,IAAI/M,MAAM,CAACxL,KAAK,CAACib,WAAW,CAACH,EAAE,CAACjH,EAAE,CACxG,CAAC,EACH;AACE,MAAA,OAAOJ,KAAK,CAAA;AAChB,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACJ,CAAA;AACAhB,UAAU,CAACnO,MAAM,GAAG,YAAY,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAACwD,UAAU,CAAC;;AClbhF;AACA;AACA;AACA;AACA,MAAMyI,SAAS,GAAG;AACdf,EAAAA,SAAS,EAAK,WAAW;AACzBgB,EAAAA,SAAS,EAAK,WAAW;AACzBnF,EAAAA,OAAO,EAAO,SAAS;AACvBoF,EAAAA,SAAS,EAAK,WAAW;AACzBC,EAAAA,SAAS,EAAK,WAAW;AACzBC,EAAAA,OAAO,EAAO,SAAS;AACvBC,EAAAA,WAAW,EAAG,WAAW;AACzBC,EAAAA,QAAQ,EAAM,UAAU;AACxBC,EAAAA,QAAQ,EAAM,UAAU;AACxBC,EAAAA,OAAO,EAAO,SAAS;AACvBC,EAAAA,QAAQ,EAAM,UAAU;AACxBC,EAAAA,KAAK,EAAS,OAAO;AACrBC,EAAAA,WAAW,EAAG,aAAA;AAClB,CAAC,CAAA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,UAAU,SAAS3M,cAAc,CAAC;AACnD;EACA,OAAOvG,KAAK,GAAG,YAAY,CAAA;AAC3B,EAAA,OAAOmC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQgR,IAAAA,WAAW,EAAG,IAAI;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,IAAA;GAChB,CAAA;AACD;AACAC,EAAAA,YAAY,GAAG,EAAE,CAAA;AACjB;EACAC,SAAS,GAAM,EAAE,CAAA;EACjB,WAAWrR,YAAYA,GAAG;IACtB,OAAO;AACHC,MAAAA,KAAK,EAAG,CACJ,kBAAkB,EAClB,gBAAgB,EAChB,WAAW,EACX,oBAAoB,EACpB,aAAa,EACb,kBAAkB,EAClB,oBAAoB,EACpB,aAAa,EACb,oBAAoB;AACpB;AACA,MAAA,sBAAsB,CACzB;AACD;MACAqR,MAAM,EAAG,CACL,kBAAkB,CACrB;AACDrJ,MAAAA,QAAQ,EAAG,CACP,sBAAsB,EACtB,sBAAsB,CAAA;KAE7B,CAAA;AACL,GAAA;AACA;AACA;AACAxH,EAAAA,cAAcA,GAAG;IACb,MACIrL,EAAE,GAAW,IAAI;AACjB,MAAA;AAAEuL,QAAAA,MAAAA;AAAO,OAAC,GAAGvL,EAAE,CAAA;AACnB;IACAuL,MAAM,CAAC4Q,WAAW,CAAC9a,OAAO,IAAIrB,EAAE,CAACoc,YAAY,CAAC/a,OAAO,CAAC,CAAC,CAAA;AACvD;AACAkK,IAAAA,MAAM,CAACrF,UAAU,CAAC7F,GAAG,CAAC;AAClBgc,MAAAA,UAAU,EAAG,cAAc;AAC3B9b,MAAAA,OAAO,EAAMP,EAAAA;AACjB,KAAC,CAAC,CAAA;AACFA,IAAAA,EAAE,CAACsc,SAAS,CAAC/Q,MAAM,CAACxL,KAAK,CAAC,CAAA;AAC9B,GAAA;EACAqc,YAAYA,CAAC/a,OAAO,EAAE;AAClB;AACAA,IAAAA,OAAO,CAACkb,mBAAmB,GAAGzY,SAAS,CAACC,aAAa,CAAC;MAClDgX,MAAM,EAAM1Z,OAAO,CAACZ,OAAO;AAC3Be,MAAAA,SAAS,EAAG;AACR,QAAA,+BAA+B,EAAG,CAAA;AACtC,OAAA;AACJ,KAAC,CAAC,CAAA;AACF;IACAH,OAAO,CAAChB,GAAG,CAAC;AACRmc,MAAAA,oBAAoB,EAAG,eAAe;AACtCjc,MAAAA,OAAO,EAAgB,IAAA;AAC3B,KAAC,CAAC,CAAA;AACN,GAAA;EACAmQ,SAASA,CAACC,OAAO,EAAE;AACf,IAAA,IAAI,CAAC,IAAI,CAAC8L,aAAa,EAAE;AACrB;MACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAAA;MACvB,IAAI,CAACC,KAAK,EAAE,CAAA;MACZ,IAAI,CAACD,WAAW,GAAG,KAAK,CAAA;AAC5B,KAAA;AACA,IAAA,KAAK,CAAChM,SAAS,CAACC,OAAO,CAAC,CAAA;AAC5B,GAAA;EACAiM,iBAAiBA,CAACC,GAAG,EAAE;AACnB;AACA,IAAA,IAAI,CAACtR,MAAM,CAAC9K,OAAO,CAACC,SAAS,CAAC4Z,MAAM,CAAC,0BAA0B,EAAEuC,GAAG,CAAC,CAAA;AACzE,GAAA;EACAC,gBAAgBA,CAACf,UAAU,EAAE;AACzB,IAAA,IAAI,CAAC,IAAI,CAACU,aAAa,EAAE;AACrB,MAAA,IAAI,CAACE,KAAK,CAAC,IAAI,EAAEZ,UAAU,CAAC,CAAA;AAChC,KAAA;AACJ,GAAA;AACA;AACA;EACAO,SAASA,CAACvc,KAAK,EAAE;AACb,IAAA,IAAI,CAACgd,eAAe,CAAC,OAAO,CAAC,CAAA;IAC7Bhd,KAAK,CAACM,GAAG,CAAC;AACNpB,MAAAA,IAAI,EAAM,OAAO;AACjB+d,MAAAA,MAAM,EAAI,eAAe;AACzB;AACAC,MAAAA,OAAO,EAAG;AACNjY,QAAAA,IAAI,EAAG,CAAC;AACR6B,QAAAA,EAAE,EAAK,gBAAA;OACV;AACDtG,MAAAA,OAAO,EAAG,IAAA;AACd,KAAC,CAAC,CAAA;AACN,GAAA;AACA;AACA2c,EAAAA,gBAAgBA,GAAG;IACf,IAAI,CAACC,aAAa,EAAE,CAAA;AACxB,GAAA;AACA;EACAC,gBAAgBA,CAACtT,UAAU,EAAE;IACzB,MACI9J,EAAE,GAAgC,IAAI;AACtC,MAAA;QAAEe,MAAM;QAAEC,MAAM;AAAEuF,QAAAA,WAAAA;AAAY,OAAC,GAAGuD,UAAU;MAC5CzI,OAAO,GAA2BrB,EAAE,CAACuL,MAAM,CAACuN,QAAQ,CAAC/X,MAAM,CAACuX,MAAM,CAAC,CAAA;AACvE;AACA,IAAA,IAAI,CAACtY,EAAE,CAAC0L,QAAQ,IAAI3K,MAAM,CAACsc,UAAU,KAAKtc,MAAM,CAACuc,QAAQ,IAAI,CAACtd,EAAE,CAAC+b,UAAU,CAAC,IAAI,CAAC/a,MAAM,CAAC+I,YAAY,IAAI,CAAC1I,OAAO,CAACkc,SAAS,EAAE;MACxH,MAAMC,WAAW,GAAGxd,EAAE,CAACyd,aAAa,CAACzc,MAAM,EAAED,MAAM,CAAC,CAAA;AACpD,MAAA,IAAIyc,WAAW,KAAXA,IAAAA,IAAAA,WAAW,eAAXA,WAAW,CAAEX,GAAG,EAAE;AAClB;AACAtW,QAAAA,WAAW,CAAC7F,SAAS,CAACC,GAAG,CAAC,eAAe,CAAC,CAAA;AAC1C;QACA4F,WAAW,CAAC8D,SAAS,GAAG,EAAE,CAAA;AAC1B;AACAP,QAAAA,UAAU,CAACvD,WAAW,GAAGiX,WAAW,CAACjX,WAAW,CAAA;AACpD,OAAA;AACJ,KAAA;AACJ,GAAA;AACAmX,EAAAA,cAAcA,CAAC;IAAErX,GAAG;IAAEsX,KAAK;AAAEC,IAAAA,SAAAA;AAAU,GAAC,EAAE;AACtC;IACA,IAAID,KAAK,KAAKtX,GAAG,CAACuN,EAAE,IAAIgK,SAAS,KAAKvX,GAAG,CAACmT,MAAM,EAAE;MAC9C,IAAI,CAACqE,aAAa,GAAG,IAAI,CAAA;AAC7B,KAAA;AACJ,GAAA;AACA;AACA3K,EAAAA,kBAAkBA,CAAC;IAAE5Q,MAAM;IAAE2D,OAAO;AAAElF,IAAAA,MAAAA;AAAO,GAAC,EAAE;IAC5C,IAAI,IAAI,CAAC2K,QAAQ,EAAE;AACf,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,IAAIpJ,MAAM,KAAK,QAAQ,IAAI2D,OAAO,CAACoX,UAAU,IAAI,CAACtc,MAAM,CAACsc,UAAU,EAAE;AACjE;MACA,KAAK,MAAM7J,KAAK,IAAI,IAAI,CAACwI,YAAY,CAAC8B,KAAK,EAAE,EAAE;AAC3C,QAAA,IAAItK,KAAK,CAACzS,MAAM,KAAKA,MAAM,EAAE;AACzB,UAAA,IAAI,CAACgd,WAAW,CAACvK,KAAK,CAAC,CAAA;AAC3B,SAAA;AACJ,OAAA;MACA,IAAI,CAACwK,OAAO,EAAE,CAAA;AACd,MAAA,OAAA;AACJ,KAAA;IACA,IAAI,CAACb,aAAa,EAAE,CAAA;AACxB,GAAA;AACA;AACAc,EAAAA,WAAWA,GAAG;IACV,CAAC,IAAI,CAACvS,QAAQ,IAAI,IAAI,CAACiR,KAAK,EAAE,CAAA;AAClC,GAAA;AACA;AACAuB,EAAAA,gBAAgBA,GAAG;IACf,CAAC,IAAI,CAACxS,QAAQ,IAAI,IAAI,CAACiR,KAAK,EAAE,CAAA;AAClC,GAAA;AACA;AACAwB,EAAAA,kBAAkBA,GAAG;IACjB,CAAC,IAAI,CAACzS,QAAQ,IAAI,IAAI,CAACiR,KAAK,EAAE,CAAA;AAClC,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3H,EAAAA,oBAAoBA,GAAG;AACnB,IAAA,IAAI,CAAC,IAAI,CAAC8G,WAAW,EAAE;MACnB,MACI;AAAEvQ,UAAAA,MAAAA;AAAO,SAAC,GAAG,IAAI;AACjB6S,QAAAA,OAAO,GAAM7S,MAAM,CAAC8S,eAAe,CAAC1c,GAAG,CAACwF,CAAC,IAAIoE,MAAM,CAACxL,KAAK,CAACuJ,OAAO,CAACnC,CAAC,CAAC,CAAC,CAAA;MACzE,IAAIuQ,OAAO,GAAM,KAAK,CAAA;AACtB,MAAA,KAAK,MAAMlE,KAAK,IAAI,IAAI,CAACwI,YAAY,EAAE;QACnC,IAAIsC,WAAW,GAAG,IAAI,CAAA;AACtB;AACA,QAAA,KAAK,IAAIzY,CAAC,GAAG2N,KAAK,CAAC+K,SAAS,EAAE1Y,CAAC,IAAI2N,KAAK,CAACgL,OAAO,IAAIF,WAAW,EAAEzY,CAAC,EAAE,EAAE;AAClEyY,UAAAA,WAAW,GAAGF,OAAO,CAACK,QAAQ,CAAC5Y,CAAC,CAAC,CAAA;AACrC,SAAA;AACA,QAAA,IAAI2N,KAAK,CAACkL,UAAU,KAAKJ,WAAW,EAAE;UAClC9K,KAAK,CAACkL,UAAU,GAAGJ,WAAW,CAAA;AAC9B5G,UAAAA,OAAO,GAAG,IAAI,CAAA;AAClB,SAAA;AACJ,OAAA;AACA;AACAA,MAAAA,OAAO,IAAI,IAAI,CAACsG,OAAO,EAAE,CAAA;AAC7B,KAAA;AACJ,GAAA;AACA;AACA;AACA;EACAnN,oBAAoBA,CAACpQ,OAAO,EAAE;AAAA,IAAA,IAAAke,oBAAA,CAAA;IAC1B,IAAAA,CAAAA,oBAAA,GAAIle,OAAO,CAACme,WAAW,MAAAD,IAAAA,IAAAA,oBAAA,KAAnBA,KAAAA,CAAAA,IAAAA,oBAAA,CAAqBnL,KAAK,EAAE;AAC5B,MAAA,OAAO,IAAI,CAACjI,MAAM,CAACxL,KAAK,CAAC8e,KAAK,CAACpe,OAAO,CAACme,WAAW,CAACpL,KAAK,CAAC+K,SAAS,CAAC,CAAA;AACvE,KAAA;AACA,IAAA,OAAO,IAAI,CAACjL,UAAU,CAACzC,oBAAoB,CAACpQ,OAAO,CAAC,CAAA;AACxD,GAAA;AACA;EACA6P,oBAAoBA,CAAC7P,OAAO,EAAE;AAAA,IAAA,IAAAqe,qBAAA,CAAA;IAC1B,IAAAA,CAAAA,qBAAA,GAAIre,OAAO,CAACme,WAAW,MAAAE,IAAAA,IAAAA,qBAAA,KAAnBA,KAAAA,CAAAA,IAAAA,qBAAA,CAAqBtL,KAAK,EAAE;AAC5B,MAAA,OAAO/S,OAAO,CAACme,WAAW,CAACpL,KAAK,CAACzS,MAAM,CAAA;AAC3C,KAAA;AACA,IAAA,OAAO,IAAI,CAACuS,UAAU,CAAChD,oBAAoB,CAAC7P,OAAO,CAAC,CAAA;AACxD,GAAA;AACA;AACA;AACA;AACAoR,EAAAA,kBAAkBA,CAAC;IAAE9Q,MAAM;AAAEuN,IAAAA,KAAAA;AAAM,GAAC,EAAE;AAClC,IAAA,IAAIvN,MAAM,CAACge,SAAS,KAAK,KAAK,EAAE;MAC5BzQ,KAAK,CAAC+O,UAAU,GAAG;AACf9U,QAAAA,IAAI,EAAO,0BAA0B;QACrCkG,IAAI,EAAQ,aAAY1N,MAAM,CAACsc,UAAU,GAAG,gBAAgB,GAAG,kBAAmB,CAAC,CAAA;AACnFpb,QAAAA,OAAO,EAAI,2BAA2B;AACtCW,QAAAA,GAAG,EAAQ,aAAa;AACxB8L,QAAAA,MAAM,EAAK,GAAG;QACdhD,QAAQ,EAAG,IAAI,CAACA,QAAQ;QACxBiD,MAAM,EAAKA,MAAM5N,MAAM,CAACsc,UAAU,GAAG,CAACtc,MAAM,CAACsc,UAAAA;OAChD,CAAA;AACL,KAAA;AACJ,GAAA;AACA;AACA;AACA;EACA,MAAM2B,WAAWA,CAAC7V,KAAK,EAAE;AACrB,IAAA,IAAI,CAAC,IAAI,CAAC2S,WAAW,EAAE;MACnB,MAAMmD,kBAAkB,GAAG9V,KAAK,CAACrG,MAAM,CAACoc,OAAO,CAAC,sBAAsB,CAAC,CAAA;AACvE,MAAA,IAAID,kBAAkB,EAAE;QACpB,MACI;AAAE1T,YAAAA,MAAAA;AAAO,WAAC,GAAK,IAAI;AACnB,UAAA;AAAEiI,YAAAA,KAAAA;WAAO,GAAMyL,kBAAkB,CAACL,WAAW;AAC7C,UAAA;AAAE3S,YAAAA,QAAAA;WAAU,GAAGV,MAAM,CAACS,QAAQ;AAC9B,UAAA;AAAEjL,YAAAA,MAAAA;AAAO,WAAC,GAAKyS,KAAK;AACpBzU,UAAAA,IAAI,GAAWogB,YAAY,CAACC,UAAU,CAACnE,SAAS,CAAC9R,KAAK,CAACpK,IAAI,CAAC,IAAIoK,KAAK,CAACpK,IAAI,CAAC;AAC3EsgB,UAAAA,SAAS,GAAM;AACXjf,YAAAA,IAAI,EAAUmL,MAAM;AACpB+T,YAAAA,OAAO,EAAO,EAAE;YAChBve,MAAM;YACNwF,WAAW,EAAG0Y,kBAAkB,CAACM,iBAAiB;YAClDzc,MAAM,EAAQqG,KAAK,CAACrG,MAAM;AAC1BqG,YAAAA,KAAAA;WACH,CAAA;AACL,QAAA,KAAK,IAAItD,CAAC,GAAG2N,KAAK,CAAC+K,SAAS,EAAE1Y,CAAC,IAAI2N,KAAK,CAACgL,OAAO,EAAE3Y,CAAC,EAAE,EAAE;AACnDwZ,UAAAA,SAAS,CAACC,OAAO,CAAC5b,IAAI,CAAC6H,MAAM,CAACxL,KAAK,CAAC8e,KAAK,CAAChZ,CAAC,CAAC,CAAC,CAAA;AACjD,SAAA;QACA0F,MAAM,CAACkC,OAAO,CAAE,CAAA,UAAA,EAAY1O,IAAK,CAAC,CAAA,EAAEsgB,SAAS,CAAC,CAAA;AAC9C;QACA,IAAI,CAAApT,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,uBAARA,QAAQ,CAAEuT,YAAY,CAACC,WAAW,EAAE,MAAM,OAAM1gB,IAAK,CAAA,CAAC,CAAC0gB,WAAW,EAAE,EAAE;UACtE,MAAMpZ,GAAG,GAAGkF,MAAM,CAACrF,UAAU,CAACwZ,QAAQ,CAACvW,KAAK,CAACwW,OAAO,CAAC,CAAA;UACrD,MAAM1T,QAAQ,CAAC2T,YAAY,CAAC;YAAEhM,EAAE,EAAGvN,GAAG,CAACuN,EAAE;YAAEC,QAAQ,EAAG9S,MAAM,CAAC6S,EAAAA;AAAG,WAAC,CAAC,CAAA;AACtE,SAAA;AACA;AAAA,aACK,IAAIzK,KAAK,CAACpK,IAAI,KAAK,OAAO,EAAE;UAC7B,IAAI,CAAC8gB,YAAY,CAAC;AAAErM,YAAAA,KAAAA;AAAM,WAAC,CAAC,CAAA;AAChC,SAAA;AACJ,OAAA;AACJ,KAAA;AACJ,GAAA;AACA;AACA;AACA;AACAqM,EAAAA,YAAYA,CAAC;AAAErM,IAAAA,KAAAA;AAAM,GAAC,EAAE;IACpB,MAAM8L,OAAO,GAAG,EAAE,CAAA;AAClB,IAAA,KAAK,IAAIzZ,CAAC,GAAG2N,KAAK,CAAC+K,SAAS,EAAE1Y,CAAC,IAAI2N,KAAK,CAACgL,OAAO,EAAE3Y,CAAC,EAAE,EAAE;AACnDyZ,MAAAA,OAAO,CAAC5b,IAAI,CAAC,IAAI,CAAC6H,MAAM,CAACxL,KAAK,CAAC8e,KAAK,CAAChZ,CAAC,CAAC,CAAC,CAAA;AAC5C,KAAA;AACA,IAAA,IAAI,CAAC0F,MAAM,CAAC8S,eAAe,GAAGiB,OAAO,CAAA;AACzC,GAAA;AACA;AACAQ,EAAAA,aAAaA,GAAG;IACZ,CAAC,IAAI,CAACpU,QAAQ,IAAI,IAAI,CAACiR,KAAK,EAAE,CAAA;AAClC,GAAA;AACA;AACAoD,EAAAA,cAAcA,CAAC;AAAEzd,IAAAA,MAAAA;AAAO,GAAC,EAAE;AACvB;AACA,IAAA,IAAIA,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,SAAS,EAAE;MAC7C,CAAC,IAAI,CAACoJ,QAAQ,IAAI,IAAI,CAACiR,KAAK,CAAC,KAAK,CAAC,CAAA;AACvC,KAAA;AACJ,GAAA;AACA;AACA;AACA;AACA;EACAqD,kBAAkBA,CAACxM,KAAK,EAAE;IAAA,IAAAyM,iBAAA,EAAAC,qBAAA,CAAA;AACtB,IAAA,MACInF,MAAM,GAAG,IAAI,CAACxP,MAAM,CAAC4U,oBAAoB,CAAC3M,KAAK,CAACzS,MAAM,CAAC,CAACwb,mBAAmB;MAC3E6D,MAAM,GAAI,CAAE5M,EAAAA,KAAK,CAAC+K,SAAU,CAAK/K,GAAAA,EAAAA,KAAK,CAACzS,MAAM,CAAC6S,EAAG,CAAC,CAAA,CAAA;AACtD;AACA;IACA,IAAInT,OAAO,GAAG,CAAA,CAAAwf,iBAAA,GAAAlF,MAAM,CAACsF,SAAS,MAAA,IAAA,IAAAJ,iBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,iBAAA,CAAmBG,MAAM,CAAC,MAAAF,CAAAA,qBAAA,GAAInF,MAAM,CAACuF,aAAa,MAAAJ,IAAAA,IAAAA,qBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAuBE,MAAM,CAAC,CAAA,CAAA;AAC1E;IACA,IAAIrF,MAAM,CAACuF,aAAa,EAAE;AACtB,MAAA,OAAOvF,MAAM,CAACuF,aAAa,CAACF,MAAM,CAAC,CAAA;AACvC,KAAA;IACA,IAAI,CAAC3f,OAAO,EAAE;MACVA,OAAO,GAAGqD,SAAS,CAACC,aAAa,CAAC,IAAI,CAACwc,oBAAoB,CAAC/M,KAAK,CAAC,CAAC,CAAA;AACvE,KAAA;AACA;IACAgN,OAAO,CAACC,QAAQ,CAAC1F,MAAM,EAAEta,OAAO,EAAE2f,MAAM,CAAC,CAAA;IACzC5M,KAAK,CAAC/S,OAAO,GAAGA,OAAO,CAAA;AACvB+S,IAAAA,KAAK,CAACjN,WAAW,GAAG9F,OAAO,CAAC8e,iBAAiB,CAAA;AAC7C,IAAA,OAAO9e,OAAO,CAAA;AAClB,GAAA;AACA;EACA8f,oBAAoBA,CAAC/M,KAAK,EAAE;AAAA,IAAA,IAAAkN,qBAAA,CAAA;IACxB,MACI;QAAE3f,MAAM;QAAEwd,SAAS;QAAEC,OAAO;QAAEmC,GAAG;QAAEC,IAAI;QAAE1gB,KAAK;AAAEsZ,QAAAA,MAAAA;AAAO,OAAC,GAAGhG,KAAK;AAChE,MAAA;AAAEzU,QAAAA,IAAAA;AAAK,OAAC,GAAGgC,MAAM;MACjBC,MAAM,GAAG,IAAI,CAACuK,MAAM,CAACxL,KAAK,CAAC8e,KAAK,CAACN,SAAS,CAAC;AAC3CsC,MAAAA,SAAS,GAAG;AACRrf,QAAAA,SAAS,EAAG;AACR,UAAA,qBAAqB,EAAG,CAAC;AACzB;UACA,YAAY,EAAYgS,KAAK,CAACkL,UAAAA;SACjC;AACDE,QAAAA,WAAW,EAAG;AACVpL,UAAAA,KAAAA;SACH;AACDlL,QAAAA,KAAK,EAAG;UACJqY,GAAG;UACHC,IAAI;UACJpH,MAAM;AACNtZ,UAAAA,KAAAA;SACH;AACDsC,QAAAA,OAAO,EAAG;AACN4d,UAAAA,MAAM,EAAM,CAAE7B,EAAAA,SAAU,MAAKxd,MAAM,CAAC6S,EAAG,CAAC,CAAA;UACxC2K,SAAS;UACTC,OAAO;UACPzd,MAAM,EAAKA,MAAM,CAACsE,KAAK;UACvBwO,QAAQ,EAAG9S,MAAM,CAAC6S,EAAAA;SACrB;AACDnS,QAAAA,QAAQ,EAAG;AACP;AACA,QAAA;AACID,UAAAA,SAAS,EAAG,IAAIsf,YAAY,CAAC,IAAI,CAACvV,MAAM,CAACwV,OAAO,CAAC,CAACC,MAAM,CAAC;AACrD,YAAA,CAAE,CAAIjiB,EAAAA,EAAAA,IAAI,KAAJA,IAAAA,IAAAA,IAAI,KAAJA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAE0gB,WAAW,EAAG,CAAM,KAAA,CAAA,GAAI1gB,IAAI;AACxC,YAAA,CAACgC,MAAM,CAACggB,OAAO,GAAqBhgB,MAAM,CAACggB,OAAO;AAClD,YAAA,CAAChgB,MAAM,CAACmH,eAAe,GAAanH,MAAM,CAACmH,eAAAA;AAC/C,WAAC,CAAC,CAAC8Y,MAAM,CAACjgB,MAAM,CAACkgB,OAAO,CAAC;AACzB;AACAC,UAAAA,YAAY,EAAG,IAAI;AACnB;AACAtC,UAAAA,WAAW,EAAI;AACXpL,YAAAA,KAAAA;WACH;AACD;AACAhR,UAAAA,OAAO,EAAG;YACNzB,MAAM,EAAKA,MAAM,CAACsE,KAAK;YACvBwO,QAAQ,EAAG9S,MAAM,CAAC6S,EAAAA;WACrB;AACD;AACAtL,UAAAA,KAAK,EAAG;AACJkR,YAAAA,MAAM,EAAG,IAAI,CAACjO,MAAM,CAACrF,UAAU,CAACib,SAAAA;AACpC,WAAA;SACH,CAAA;OAER,CAAA;AACL;AACA,IAAA,CAAAT,qBAAA,GAAA3f,MAAM,CAACqgB,cAAc,MAAA,IAAA,IAAAV,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAArBA,qBAAA,CAAAnf,IAAA,CAAAR,MAAM,EAAkB;MAAE8f,SAAS;AAAEja,MAAAA,KAAK,EAAG7F,MAAM,CAAC2F,WAAW,CAAC1F,MAAM,CAAC;MAAEA,MAAM;MAAED,MAAM;MAAEwd,SAAS;AAAEC,MAAAA,OAAAA;AAAQ,KAAC,CAAC,CAAA;AAC9G,IAAA,OAAOqC,SAAS,CAAA;AACpB,GAAA;AACAQ,EAAAA,sBAAsBA,CAAC9C,SAAS,EAAEC,OAAO,EAAE8C,IAAI,EAAE;IAAA,IAAAC,kBAAA,EAAAC,qBAAA,CAAA;IAC7C,MACIxhB,EAAE,GAAe,IAAI;AACrB,MAAA;AAAEuL,QAAAA,MAAAA;AAAO,OAAC,GAAOvL,EAAE;AACnB,MAAA;AAAEkG,QAAAA,UAAAA;AAAW,OAAC,GAAGqF,MAAM,CAAA;AAC3B;AACA;AACA;AACA;AACAgT,IAAAA,SAAS,GAAGA,SAAS,KAAAgD,CAAAA,kBAAA,GAAIrb,UAAU,CAACub,MAAM,MAAAF,IAAAA,IAAAA,kBAAA,KAAjBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,kBAAA,CAAmBG,SAAS,CAAA,CAAA;AACrDlD,IAAAA,OAAO,GAAGA,OAAO,KAAAgD,CAAAA,qBAAA,GAAItb,UAAU,CAACyb,SAAS,MAAAH,IAAAA,IAAAA,qBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAAsBE,SAAS,CAAA,CAAA;AACpD,IAAA;AACI;IACAE,YAAY,GAAGrW,MAAM,CAACsW,OAAO,CAACC,MAAM,CAAC,CAACngB,GAAG,EAAE2W,MAAM,KAAK;MAClD3W,GAAG,CAAC2W,MAAM,CAAC,GAAG;AACV9W,QAAAA,SAAS,EAAG;AACR,UAAA,+BAA+B,EAAG,CAAA;SACrC;AACDC,QAAAA,QAAQ,EAAG,EAAA;OACd,CAAA;AACD,MAAA,OAAOE,GAAG,CAAA;KACb,EAAE,EAAE,CAAC,CAAA;AACV;AACA,IAAA,KAAK,MAAM6R,KAAK,IAAIxT,EAAE,CAACgc,YAAY,EAAE;AACjC,MAAA,IAAIxI,KAAK,CAACqJ,GAAG,IAAIrJ,KAAK,CAAC+K,SAAS,IAAIC,OAAO,IAAIhL,KAAK,CAACgL,OAAO,IAAID,SAAS,EAAE;AACvE;QACAve,EAAE,CAAC+hB,WAAW,CAACvO,KAAK,EAAExT,EAAE,CAAC6d,aAAa,EAAEyD,IAAI,CAAC,CAAA;AAC7C;AACAM,QAAAA,YAAY,CAACpO,KAAK,CAACzS,MAAM,CAACuX,MAAM,CAAC,CAAC7W,QAAQ,CAACiC,IAAI,CAAC1D,EAAE,CAACugB,oBAAoB,CAAC/M,KAAK,CAAC,CAAC,CAAA;AACnF,OAAA;AACJ,KAAA;AACA,IAAA,OAAOoO,YAAY,CAAA;AACvB,GAAA;AACA5D,EAAAA,OAAOA,CAACgE,KAAK,GAAG,KAAK,EAAE;IACnB,MACIhiB,EAAE,GAAe,IAAI;AACrB,MAAA;AAAEuL,QAAAA,MAAAA;AAAO,OAAC,GAAOvL,EAAE;AACnB,MAAA;AAAEkG,QAAAA,UAAAA;AAAW,OAAC,GAAGqF,MAAM,CAAA;AAC3B;AACA,IAAA,IAAI,CAACyW,KAAK,IAAI,CAAC9b,UAAU,CAACub,MAAM,IAAIzhB,EAAE,CAAC0L,QAAQ,IAAI,CAAC1L,EAAE,CAAC0c,WAAW,EAAE;AAChE,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,MAAMkF,YAAY,GAAG,IAAI,CAACP,sBAAsB,EAAE,CAAA;AAClD;AACA9V,IAAAA,MAAM,CAAC4Q,WAAW,CAAC9a,OAAO,IAAI;MAC1Bmf,OAAO,CAACyB,IAAI,CAAC;QACTC,aAAa,EAAG7gB,OAAO,CAACkb,mBAAmB;AAC3C4F,QAAAA,WAAW,EAAK,QAAQ;AACxBtB,QAAAA,SAAS,EAAOe,YAAY,CAACvgB,OAAO,CAACiX,MAAM,CAAA;AAC/C,OAAC,CAAC,CAAA;AACN,KAAC,CAAC,CAAA;IACFtY,EAAE,CAAC6d,aAAa,GAAG,KAAK,CAAA;AAC5B,GAAA;AACA;AACAuE,EAAAA,YAAYA,GAAG;IACX,IAAI,CAACpE,OAAO,EAAE,CAAA;AAClB,GAAA;AACA;AACA;AACA;AACA;EACAD,WAAWA,CAACvK,KAAK,EAAE;IACfxK,WAAW,CAACyR,MAAM,CAAC,IAAI,CAACuB,YAAY,EAAExI,KAAK,CAAC,CAAA;AAC5C,IAAA,KAAK,IAAI3R,KAAK,GAAG2R,KAAK,CAAC+K,SAAS,EAAE1c,KAAK,IAAI2R,KAAK,CAACgL,OAAO,EAAE3c,KAAK,EAAE,EAAE;AAC/D,MAAA,OAAO,IAAI,CAACoa,SAAS,CAAE,CAAEpa,EAAAA,KAAM,CAAK2R,GAAAA,EAAAA,KAAK,CAACzS,MAAM,CAAC6S,EAAG,EAAC,CAAC,CAAA;AAC1D,KAAA;AACJ,GAAA;AACA;EACA+I,KAAKA,CAAC0F,MAAM,GAAG,IAAI,EAAEL,KAAK,GAAG,KAAK,EAAE;IAChC,MACIhiB,EAAE,GAAU,IAAI;AAChBsiB,MAAAA,OAAO,GAAKtiB,EAAE,CAACuL,MAAM,CAAC+W,OAAO,CAACC,cAAc,CAACnV,MAAM,CAACoV,CAAC,IAAIA,CAAC,CAACnF,UAAU,KAAKmF,CAAC,CAAClF,QAAQ,IAAI,CAACtd,EAAE,CAAC+b,UAAU,IAAIiG,KAAK,CAAC,EAAE,IAAI,CAAC;AACvHS,MAAAA,SAAS,GAAGziB,EAAE,CAACgc,YAAY,CAACrY,MAAM,CAAA;IACtC3D,EAAE,CAACgc,YAAY,GAAG,EAAE,CAAA;AACpBhc,IAAAA,EAAE,CAACic,SAAS,GAAG,EAAE,CAAA;IACjB,IAAIoG,MAAM,IAAI,CAACriB,EAAE,CAACuL,MAAM,CAACmX,gBAAgB,EAAE;MACvC,KAAK,MAAMrc,GAAG,IAAIrG,EAAE,CAACuL,MAAM,CAACrF,UAAU,CAACob,IAAI,EAAE;AACzC,QAAA,KAAK,MAAMvgB,MAAM,IAAIuhB,OAAO,EAAE;UAC1Bjc,GAAG,CAACI,UAAU,CAACJ,GAAG,CAACG,OAAO,CAACzF,MAAM,CAAC6S,EAAE,CAAC,CAAC,CAAA;AAC1C,SAAA;AACJ,OAAA;AACA;AACA5T,MAAAA,EAAE,CAACge,OAAO,CAACyE,SAAS,IAAI,CAACziB,EAAE,CAACuL,MAAM,CAACrF,UAAU,CAACyc,QAAQ,CAAC,CAAA;AAC3D,KAAA;AACJ,GAAA;AACA;AACAxF,EAAAA,aAAaA,GAAG;IACZ,MACI;AAAEnB,QAAAA,YAAAA;AAAa,OAAC,GAAG,IAAI;AACvB3V,MAAAA,GAAG,GAAgB,IAAI,CAACkF,MAAM,CAACrF,UAAU,CAACub,MAAM;AAChDmB,MAAAA,SAAS,GAAU,IAAItL,GAAG,EAAE,CAAA;IAChC,KAAK,MAAM9D,KAAK,IAAIwI,YAAY,CAAC8B,KAAK,EAAE,EAAE;MACtC,MACI;AAAE/c,UAAAA,MAAAA;AAAO,SAAC,GAAIyS,KAAK;QACnBjN,WAAW,GAAGF,GAAG,CAACG,OAAO,CAACzF,MAAM,CAAC6S,EAAE,CAAC,CAAA;AACxC;AACA,MAAA,IAAIrN,WAAW,EAAE;AACb,QAAA,IAAIsc,MAAM,GAAGD,SAAS,CAACpY,GAAG,CAACzJ,MAAM,CAAC,CAAA;QAClC,IAAI,CAAC8hB,MAAM,EAAE;AACT;AACAD,UAAAA,SAAS,CAACxb,GAAG,CAACrG,MAAM,EAAE8hB,MAAM,GAAG7J,SAAS,CAACxC,IAAI,CAACjQ,WAAW,EAAEA,WAAW,CAACrD,aAAa,CAAC,CAAC,CAAA;AAC1F,SAAA;AACAsQ,QAAAA,KAAK,CAACoN,IAAI,GAAGiC,MAAM,CAACjC,IAAI,CAAA;AACxBpN,QAAAA,KAAK,CAACtT,KAAK,GAAG2iB,MAAM,CAAC3iB,KAAK,CAAA;AAC9B,OAAA;AACA;WACK;AACD,QAAA,IAAI,CAAC6d,WAAW,CAACvK,KAAK,CAAC,CAAA;AAC3B,OAAA;AACJ,KAAA;IACA,IAAI,CAACwK,OAAO,EAAE,CAAA;AAClB,GAAA;AACA;AACA;EACA+D,WAAWA,CAACvO,KAAK,EAAEwO,KAAK,EAAEV,IAAI,GAAG,IAAI,EAAE;IACnC,MACI;QAAEvhB,KAAK;AAAEmG,QAAAA,UAAAA;OAAY,GAAa,IAAI,CAACqF,MAAM;AAC7C,MAAA;QAAEuX,WAAW;AAAEC,QAAAA,cAAAA;AAAe,OAAC,GAAGvP,KAAK;AACvC,MAAA;AAAEwP,QAAAA,eAAAA;AAAgB,OAAC,GAAe9c,UAAU,CAAA;IAChD,IAAI;QAAEqY,SAAS;AAAEC,QAAAA,OAAAA;AAAQ,OAAC,GAAGhL,KAAK;MAC9BiO,MAAM;MAAEE,SAAS,CAAA;IACrBK,KAAK,GAAGV,IAAI,GAAGA,IAAI,CAAC3d,MAAM,GAAG,CAAC,GAAGqe,KAAK,CAAA;AACtC;AACA,IAAA,IAAI,CAACA,KAAK,IAAIc,WAAW,IAAIC,cAAc,EAAE;AACzC,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,IAAI,CAACD,WAAW,IAAId,KAAK,EAAE;AACvB,MAAA,IAAIV,IAAI,EAAE;AACN,QAAA,MAAMzf,KAAK,GAAGyf,IAAI,CAAC2B,SAAS,CAAC5c,GAAG,IAAIA,GAAG,CAACqb,SAAS,IAAInD,SAAS,CAAC,CAAA;AAC/DkD,QAAAA,MAAM,GAAGH,IAAI,CAACzf,KAAK,CAAC,CAAA;QACpB0c,SAAS,GAAGkD,MAAM,CAACC,SAAS,CAAA;AAChC,OAAC,MACI;QACD,GAAG;UACCD,MAAM,GAAGvb,UAAU,CAACgd,UAAU,CAACnjB,KAAK,CAAC8e,KAAK,CAACN,SAAS,CAAC,CAAC,CAAA;AAC1D,SAAC,QACM,CAACkD,MAAM,IAAIlD,SAAS,EAAE,GAAGC,OAAO,EAAA;AAC3C,OAAA;AACA;AACAhL,MAAAA,KAAK,CAACsP,WAAW,GAAIvE,SAAS,KAAK/K,KAAK,CAAC+K,SAAU,CAAA;AACnD,MAAA,MAAM4E,SAAS,GAAG5E,SAAS,GAAG/K,KAAK,CAAC+K,SAAS,CAAA;AAC7C/K,MAAAA,KAAK,CAACmN,GAAG,GAAGc,MAAM,CAACd,GAAG,GAAGwC,SAAS,IAAI7B,IAAI,GAAGG,MAAM,CAAC2B,YAAY,GAAGJ,eAAe,CAAC,CAAA;AACvF,KAAA;AACA,IAAA,IAAI,CAACD,cAAc,IAAIf,KAAK,EAAE;AAC1B,MAAA,IAAIV,IAAI,EAAE;AACN;AACA,QAAA,MAAMzf,KAAK,GAAGyf,IAAI,CAAC2B,SAAS,CAAC5c,GAAG,IAAIA,GAAG,CAACqb,SAAS,KAAKlD,OAAO,CAAC,CAAA;AAC9DmD,QAAAA,SAAS,GAAGL,IAAI,CAACzf,KAAK,KAAK,CAAC,CAAC,GAAGyf,IAAI,CAAC3d,MAAM,GAAG,CAAC,GAAG9B,KAAK,CAAC,CAAA;QACxD0c,SAAS,GAAGoD,SAAS,CAACD,SAAS,CAAA;AACnC,OAAC,MACI;QACD,GAAG;UACCC,SAAS,GAAGzb,UAAU,CAACgd,UAAU,CAACnjB,KAAK,CAAC8e,KAAK,CAACL,OAAO,CAAC,CAAC,CAAA;AAC3D,SAAC,QACM,CAACmD,SAAS,IAAInD,OAAO,EAAE,GAAGD,SAAS,EAAA;AAC9C,OAAA;AACA;AACA/K,MAAAA,KAAK,CAACuP,cAAc,GAAIvE,OAAO,KAAKhL,KAAK,CAACgL,OAAQ,CAAA;AAClD,MAAA,MAAM6E,SAAS,GAAG7P,KAAK,CAACgL,OAAO,GAAGA,OAAO,CAAA;AACzChL,MAAAA,KAAK,CAAC4F,MAAM,GAAGuI,SAAS,CAACvI,MAAM,GAAGiK,SAAS,IAAI/B,IAAI,GAAGK,SAAS,CAACyB,YAAY,GAAGJ,eAAe,CAAC,CAAA;AACnG,KAAA;IACAxP,KAAK,CAACgG,MAAM,GAAGhG,KAAK,CAAC4F,MAAM,GAAG5F,KAAK,CAACmN,GAAG,CAAA;AAC3C,GAAA;AACA;AACA;AACAlD,EAAAA,aAAaA,CAACzc,MAAM,EAAED,MAAM,EAAE;IAC1B,IAAIC,MAAM,CAAC+I,YAAY,EAAE;AACrB,MAAA,OAAA;AACJ,KAAA;IACA,MACI/J,EAAE,GAAc,IAAI;AACpB,MAAA;AAAEic,QAAAA,SAAAA;AAAU,OAAC,GAAGjc,EAAE;AAClB,MAAA;AAAED,QAAAA,KAAAA;OAAO,GAAOC,EAAE,CAACuL,MAAM;AACzBlF,MAAAA,GAAG,GAAarG,EAAE,CAACuL,MAAM,CAACrF,UAAU,CAACub,MAAM;MAC3C5N,QAAQ,GAAQ9S,MAAM,CAAC6S,EAAE;AACzB/R,MAAAA,KAAK,GAAW9B,KAAK,CAACuJ,OAAO,CAACtI,MAAM,CAAC;AACrCsiB,MAAAA,GAAG,GAAc,CAAA,EAAEzhB,KAAM,CAAA,GAAA,EAAKgS,QAAS,CAAC,CAAA,CAAA;AAC5C,IAAA,IAAIL,KAAK,GAAGyI,SAAS,CAACqH,GAAG,CAAC,CAAA;IAC1B,IAAI,CAAC9P,KAAK,EAAE;AACR,MAAA,MAAM5M,KAAK,GAAG7F,MAAM,CAAC2F,WAAW,CAAC1F,MAAM,CAAC,CAAA;AACxCwS,MAAAA,KAAK,GAAGyI,SAAS,CAACqH,GAAG,CAAC,GAAG;AACrBviB,QAAAA,MAAAA;OACH,CAAA;AACDf,MAAAA,EAAE,CAACgc,YAAY,CAACtY,IAAI,CAAC8P,KAAK,CAAC,CAAA;AAC3B;AACA,MAAA,IAAI+P,aAAa;QAAEC,YAAY;AAAEC,QAAAA,YAAY,GAAG5hB,KAAK,CAAA;MACrD,GAAG;AACC0hB,QAAAA,aAAa,GAAGxjB,KAAK,CAAC8e,KAAK,CAAC,EAAE4E,YAAY,CAAC,CAAA;QAC3CD,YAAY,GAAID,aAAa,IAAIxiB,MAAM,CAAC2F,WAAW,CAAC6c,aAAa,CAAC,CAAA;QAClE,IAAIC,YAAY,KAAK5c,KAAK,EAAE;UACxBqV,SAAS,CAAE,GAAEwH,YAAa,CAAA,GAAA,EAAK5P,QAAS,CAAC,CAAA,CAAC,GAAGL,KAAK,CAAA;AACtD,SAAA;AACJ,OAAC,QAAQ+P,aAAa,IAAIC,YAAY,KAAK5c,KAAK,EAAA;AAChD;AACA,MAAA,IAAI8c,WAAW;QAAEC,UAAU;AAAEC,QAAAA,UAAU,GAAG/hB,KAAK,CAAA;MAC/C,GAAG;AACC6hB,QAAAA,WAAW,GAAG3jB,KAAK,CAAC8e,KAAK,CAAC,EAAE+E,UAAU,CAAC,CAAA;QACvCD,UAAU,GAAID,WAAW,IAAI3iB,MAAM,CAAC2F,WAAW,CAACgd,WAAW,CAAC,CAAA;QAC5D,IAAIC,UAAU,KAAK/c,KAAK,EAAE;UACtBqV,SAAS,CAAE,GAAE2H,UAAW,CAAA,GAAA,EAAK/P,QAAS,CAAC,CAAA,CAAC,GAAGL,KAAK,CAAA;AACpD,SAAA;AACJ,OAAC,QAAQkQ,WAAW,IAAIC,UAAU,KAAK/c,KAAK,EAAA;AAC5C4M,MAAAA,KAAK,CAAC+K,SAAS,GAAGkF,YAAY,GAAG,CAAC,CAAA;AAClCjQ,MAAAA,KAAK,CAACgL,OAAO,GAAKoF,UAAU,GAAG,CAAC,CAAA;AAChC;MACA,IAAIpQ,KAAK,CAACgL,OAAO,GAAGhL,KAAK,CAAC+K,SAAS,GAAG,CAAC,EAAE;AACrC,QAAA,MACIhY,WAAW,GAAGF,GAAG,CAACG,OAAO,CAACqN,QAAQ,CAAC;UACnCgQ,UAAU,GAAI7K,SAAS,CAACxC,IAAI,CAACjQ,WAAW,EAAEA,WAAW,CAACrD,aAAa,CAAC,CAAA;AACxEsQ,QAAAA,KAAK,CAACoN,IAAI,GAAIiD,UAAU,CAACjD,IAAI,CAAA;AAC7BpN,QAAAA,KAAK,CAACtT,KAAK,GAAG2jB,UAAU,CAAC3jB,KAAK,CAAA;QAC9BsT,KAAK,CAACqJ,GAAG,GAAG,IAAI,CAAA;AACpB,OAAA;AACJ,KAAA;IACA,IAAI,CAACrJ,KAAK,CAAC/S,OAAO,IAAI+S,KAAK,CAACqJ,GAAG,EAAE;AAC7B7c,MAAAA,EAAE,CAACggB,kBAAkB,CAACxM,KAAK,CAAC,CAAA;AAChC,KAAA;AACA,IAAA,OAAOA,KAAK,CAAA;AAChB,GAAA;AACA;AACJ,CAAA;;AACAqI,UAAU,CAACxX,MAAM,GAAG,YAAY,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAAC6M,UAAU,CAAC;;AChpBhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMiI,SAAS,SAAS5U,cAAc,CAAC;AAClD;EACA,OAAOvG,KAAK,GAAG,WAAW,CAAA;AAC1B,EAAA,OAAOmC,YAAY,GAAG;AAClBiZ,IAAAA,IAAI,EAAG,QAAQ;AACfC,IAAAA,IAAI,EAAG,EAAE;AACT;AACR;AACA;AACA;AACQvS,IAAAA,MAAM,EAAG;AACLwS,MAAAA,EAAE,EAAe,aAAa;AAC9B,MAAA,UAAU,EAAO,aAAa;AAC9B,MAAA,QAAQ,EAAS,aAAa;AAC9B,MAAA,cAAc,EAAG,aAAa;AAC9B,MAAA,cAAc,EAAG,kBAAkB;AACnCC,MAAAA,MAAM,EAAW,aAAa;AAC9B;AACAC,MAAAA,SAAS,EAAG,aAAA;AAChB,KAAA;GACH,CAAA;AACD;EACA,WAAWvZ,YAAYA,GAAG;IACtB,OAAO;AACHC,MAAAA,KAAK,EAAG,CAAC,mBAAmB,EAAE,gBAAgB,CAAA;KACjD,CAAA;AACL,GAAA;AACA;AACA;EACA,WAAWuZ,UAAUA,GAAG;IACpB,OAAO;AACHC,MAAAA,MAAM,EAAY,aAAa;AAC/BC,MAAAA,UAAU,EAAQ,kBAAkB;AACpCC,MAAAA,eAAe,EAAG,wBAAwB;AAC1CC,MAAAA,UAAU,EAAQ,kBAAA;KACrB,CAAA;AACL,GAAA;AACA3kB,EAAAA,SAASA,CAACO,IAAI,EAAEN,MAAM,EAAE;AACpB,IAAA,KAAK,CAACD,SAAS,CAACO,IAAI,EAAEN,MAAM,CAAC,CAAA;AAC7B2kB,IAAAA,MAAM,CAACzD,MAAM,CAAC,IAAI,EAAE;MAChB5gB,IAAI;MACJskB,UAAU,EAAGtkB,IAAI,CAACukB,eAAe,CAACvkB,IAAI,CAACK,OAAO,EAAEqD,SAAS,CAAC8gB,UAAU,CAACC,SAAS,EAAE,MAAM/gB,SAAS,CAAC8gB,UAAU,CAACE,aAAa,CAAA;AAC5H,KAAC,CAAC,CAAA;AACN,GAAA;AACAhY,EAAAA,iBAAiBA,GAAG;IAChB,MAAM;AAAEL,MAAAA,WAAAA;KAAa,GAAG,IAAI,CAACrM,IAAI,CAAA;IACjC,OAAO,CAAC,IAAI,CAACsL,QAAQ,KAAIe,WAAW,KAAXA,IAAAA,IAAAA,WAAW,KAAXA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,CAAEzL,MAAM,KAAI,CAACyL,WAAW,CAACsY,YAAY,IAAI,IAAI,CAACf,IAAI,CAACrgB,MAAM,GAAG,CAAC,CAAA;AACrG,GAAA;EACA+M,SAASA,CAACC,OAAO,EAAE;AACf,IAAA,IAAIA,OAAO,EAAE;MACT,IAAI,CAACqU,KAAK,EAAE,CAAA;AAChB,KAAA;AACA,IAAA,KAAK,CAACtU,SAAS,CAACC,OAAO,CAAC,CAAA;AAC5B,GAAA;EACA,IAAI5Q,KAAKA,GAAG;AACR,IAAA,OAAO,IAAI,CAACK,IAAI,CAACL,KAAK,CAAA;AAC1B,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACIklB,EAAAA,aAAaA,GAAG;IACZ,MACIjlB,EAAE,GAAS,IAAI;AACf,MAAA;AAAEI,QAAAA,IAAAA;AAAK,OAAC,GAAGJ,EAAE;MACbklB,MAAM,GAAK9kB,IAAI,CAAC+kB,gBAAgB,CAACnlB,EAAE,CAAC6T,QAAQ,CAAC,CAAA;AACjD,IAAA,IAAIqR,MAAM,EAAE;AACR,MAAA,IAAI,CAACllB,EAAE,CAAColB,WAAW,EAAE;QACjB,MAAM,CAAC3kB,OAAO,EAAE4E,KAAK,EAAEggB,KAAK,CAAC,GAAGvhB,SAAS,CAACC,aAAa,CAAC;AACpDxB,UAAAA,GAAG,EAAS,KAAK;AACjBf,UAAAA,SAAS,EAAG,oBAAoB;AAChCC,UAAAA,QAAQ,EAAI,CACR;AAAEc,YAAAA,GAAG,EAAG,KAAK;AAAEf,YAAAA,SAAS,EAAG,mBAAA;AAAoB,WAAC,EAChD;AAAEe,YAAAA,GAAG,EAAG,KAAK;AAAEf,YAAAA,SAAS,EAAG,mBAAA;WAAqB,CAAA;AAExD,SAAC,EAAE;AAAE8jB,UAAAA,SAAS,EAAG,IAAA;AAAK,SAAC,CAAC,CAAA;AACxB,QAAA,IAAItlB,EAAE,CAAC+jB,IAAI,KAAK,QAAQ,EAAE;AACtBmB,UAAAA,MAAM,CAACzL,WAAW,CAAChZ,OAAO,CAAC,CAAA;AAC/B,SAAC,MACI;UACDA,OAAO,CAACe,SAAS,IAAI,wBAAwB,CAAA;AAC7CpB,UAAAA,IAAI,CAACK,OAAO,CAACgZ,WAAW,CAAChZ,OAAO,CAAC,CAAA;AACrC,SAAA;QACAT,EAAE,CAAColB,WAAW,GAAG;AACbF,UAAAA,MAAM,EAAMzkB,OAAO;UACnB4E,KAAK;UACLggB,KAAK;AACLE,UAAAA,SAAS,EAAGL,MAAAA;SACf,CAAA;AACL,OAAA;MACAllB,EAAE,CAAColB,WAAW,CAAC/f,KAAK,CAACgF,SAAS,GAAGrK,EAAE,CAACgkB,IAAI,CAAA;MACxChkB,EAAE,CAAColB,WAAW,CAACC,KAAK,CAAChb,SAAS,GAAGrK,EAAE,CAACwlB,KAAK,CAAC7hB,MAAM,CAAA;AAChDuhB,MAAAA,MAAM,CAACxkB,SAAS,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAA;AAC/C,KAAA;IACA,IAAI,CAACukB,MAAM,IAAI9kB,IAAI,CAACqlB,WAAW,KAAK,CAACzlB,EAAE,CAAC0lB,yBAAyB,EAAE;AAC/DtlB,MAAAA,IAAI,CAAC8F,UAAU,CAAC7F,GAAG,CAAC;QAChBslB,UAAU,EAAG3lB,EAAE,CAACyG,UAAU;AAC1BlG,QAAAA,OAAO,EAAMP,EAAAA;AACjB,OAAC,CAAC,CAAA;MACFA,EAAE,CAAC0lB,yBAAyB,GAAG,IAAI,CAAA;AACvC,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;AACIE,EAAAA,aAAaA,GAAG;IACZ,MACI5lB,EAAE,GAAsB,IAAI;AAC5B,MAAA;QAAEI,IAAI;AAAEglB,QAAAA,WAAAA;AAAY,OAAC,GAAGplB,EAAE,CAAA;AAC9B;IACA,KAAK,MAAM6lB,GAAG,IAAK7lB,EAAE,CAAC8lB,SAAS,IAAI9lB,EAAE,CAACwlB,KAAK,EAAG;MAC1C,MAAMnf,GAAG,GAAGjG,IAAI,CAAC8iB,UAAU,CAAC2C,GAAG,CAACjS,EAAE,CAAC,CAAA;AACnC,MAAA,IAAIvN,GAAG,EAAE;AACL;QACAA,GAAG,CAAC0f,cAAc,GAAG,IAAI,CAAA;QACzB,MAAMxf,WAAW,GAAGF,GAAG,CAACG,OAAO,CAACxG,EAAE,CAAC6T,QAAQ,CAAC,CAAA;QAC5CtN,WAAW,CAACyf,QAAQ,GAAG,IAAI,CAAA;AAC3B3f,QAAAA,GAAG,CAACI,UAAU,CAACF,WAAW,CAAC,CAAA;QAC3BF,GAAG,CAAC0f,cAAc,GAAG,KAAK,CAAA;AAC9B,OAAA;AACJ,KAAA;AACA,IAAA,IAAIX,WAAW,EAAE;MACbA,WAAW,CAACF,MAAM,CAAC3b,UAAU,CAAC0c,WAAW,CAACb,WAAW,CAACF,MAAM,CAAC,CAAA;MAC7DE,WAAW,CAACG,SAAS,CAAC7kB,SAAS,CAAC+Z,MAAM,CAAC,qBAAqB,CAAC,CAAA;MAC7Dza,EAAE,CAAColB,WAAW,GAAG,IAAI,CAAA;AACzB,KAAA;IACA,IAAIplB,EAAE,CAAC0lB,yBAAyB,EAAE;AAC9BtlB,MAAAA,IAAI,CAAC8F,UAAU,CAACf,EAAE,CAAC;QAAEwgB,UAAU,EAAG3lB,EAAE,CAACyG,UAAAA;OAAY,EAAEzG,EAAE,CAAC,CAAA;MACtDA,EAAE,CAAC0lB,yBAAyB,GAAG,KAAK,CAAA;AACxC,KAAA;AACAtlB,IAAAA,IAAI,CAACqN,OAAO,CAAC,eAAe,CAAC,CAAA;AACjC,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACIyY,EAAAA,MAAMA,CAAClC,IAAI,EAAEmC,eAAe,GAAG,IAAI,CAACtS,QAAQ,EAAEuS,SAAS,GAAG,KAAK,EAAE;AAAA,IAAA,IAAAC,gBAAA,CAAA;IAC7D,MACIrmB,EAAE,GAAS,IAAI;AACf,MAAA;AAAEI,QAAAA,IAAAA;AAAK,OAAC,GAAGJ,EAAE;AACbe,MAAAA,MAAM,GAAKX,IAAI,CAACkiB,OAAO,CAACgE,OAAO,CAACH,eAAe,CAAC,IAAI/lB,IAAI,CAACkiB,OAAO,CAAC9X,GAAG,CAAC2b,eAAe,CAAC;MACrFX,KAAK,GAAMxlB,EAAE,CAACD,KAAK,CAACwmB,WAAW,CAACxlB,MAAM,CAACsE,KAAK,EAAE2e,IAAI,EAAEjjB,MAAM,CAACsc,UAAU,IAAItc,MAAM,CAACuc,QAAQ,CAAC,CAAA;IAC7F,IAAIzX,CAAC,GAAG,CAAC,CAAA;AACT4e,IAAAA,MAAM,CAACzD,MAAM,CAAChhB,EAAE,EAAE;MACdwmB,QAAQ,EAAI,EAAE;MACdV,SAAS,EAAG9lB,EAAE,CAACwlB,KAAK;MACpBA,KAAK;MACLxB,IAAI;MACJnQ,QAAQ,EAAI9S,MAAM,CAAC6S,EAAE;AACrB6S,MAAAA,MAAM,EAAM,IAAIC,MAAM,CAAE,CAAA,QAAA,EAAUvH,YAAY,CAACwH,YAAY,CAACC,MAAM,CAAC5C,IAAI,CAAC,CAAE,CAAA,QAAA,CAAS,EAAE,IAAI,CAAA;AAC7F,KAAC,CAAC,CAAA;AACF,IAAA,IAAIA,IAAI,EAAE;MACNhkB,EAAE,CAACilB,aAAa,EAAE,CAAA;AACtB,KAAC,MACI;MACDjlB,EAAE,CAAC4lB,aAAa,EAAE,CAAA;AACtB,KAAA;AACA;AACA,IAAA,KAAK,MAAMrf,WAAW,IAAIzC,SAAS,CAACrC,QAAQ,CAACrB,IAAI,CAACK,OAAO,EAAG,CAAGT,CAAAA,EAAAA,EAAE,CAACqkB,MAAO,CAAA,CAAC,CAAC,EAAE;AACzE9d,MAAAA,WAAW,CAAC7F,SAAS,CAAC+Z,MAAM,CAACza,EAAE,CAACqkB,MAAM,EAAErkB,EAAE,CAACskB,UAAU,CAAC,CAAA;MACtD,IAAI/d,WAAW,CAACsgB,gBAAgB,EAAE;AAC9BtgB,QAAAA,WAAW,CAAC8D,SAAS,GAAG9D,WAAW,CAACsgB,gBAAgB,CAAA;QACpDtgB,WAAW,CAACsgB,gBAAgB,GAAG,IAAI,CAAA;AACvC,OAAA;AACJ,KAAA;IACA,IAAI,CAACrB,KAAK,EAAE;AACR,MAAA,OAAA;AACJ,KAAA;IACA,IAAIA,KAAK,CAAC7hB,MAAM,GAAG,CAAC,IAAI,CAACyiB,SAAS,EAAE;MAChCpmB,EAAE,CAAC8mB,cAAc,CAAC1mB,IAAI,CAACqM,WAAW,EAAE+Y,KAAK,CAAC,CAAA;AAC9C,KAAA;AACA;AACA,IAAA,KAAK,MAAMK,GAAG,IAAIL,KAAK,EAAE;MACrBxlB,EAAE,CAACwmB,QAAQ,CAACX,GAAG,CAACjS,EAAE,CAAC,GAAG/N,CAAC,EAAE,CAAA;MACzB,MAAMQ,GAAG,GAAGjG,IAAI,CAAC8iB,UAAU,CAAC2C,GAAG,CAACnhB,IAAI,CAACkP,EAAE,CAAC,CAAA;AACxCvN,MAAAA,GAAG,KAAHA,IAAAA,IAAAA,GAAG,KAAHA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAG,CAAEI,UAAU,CAACJ,GAAG,CAACG,OAAO,CAACzF,MAAM,CAAC6S,EAAE,CAAC,CAAC,CAAA;AACvC;MACA,IAAI/N,CAAC,GAAG,IAAI,EAAE;AACV,QAAA,MAAA;AACJ,OAAA;AACJ,KAAA;AACA;AACA,IAAA,CAAAwgB,gBAAA,GAAAjmB,IAAI,CAAC2mB,UAAU,MAAA,IAAA,IAAAV,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,gBAAA,CAAA9kB,IAAA,CAAAnB,IAAI,EAAc4mB,KAAK,IAAIA,KAAK,CAAChb,QAAQ,CAACib,SAAS,CAACf,MAAM,CAAClC,IAAI,EAAEmC,eAAe,EAAE,IAAI,CAAC,CAAC,CAAA;AACxF/lB,IAAAA,IAAI,CAACqN,OAAO,CAAC,WAAW,EAAE;MAAEuW,IAAI;AAAEwB,MAAAA,KAAAA;AAAM,KAAC,CAAC,CAAA;AAC9C,GAAA;AACA;AACJ;AACA;AACIR,EAAAA,KAAKA,GAAG;AAAA,IAAA,IAAAkC,WAAA,CAAA;AACJ,IAAA,IAAI,IAAI,CAAClD,IAAI,IAAA,CAAAkD,WAAA,GAAI,IAAI,CAAC1B,KAAK,cAAA0B,WAAA,KAAA,KAAA,CAAA,IAAVA,WAAA,CAAYvjB,MAAM,EAAE;AACjC,MAAA,IAAI,CAACuiB,MAAM,CAAC,EAAE,CAAC,CAAA;AACnB,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,IAAIiB,UAAUA,GAAG;AAAA,IAAA,IAAAC,YAAA,CAAA;AACb,IAAA,OAAO,CAAAA,CAAAA,YAAA,GAAI,IAAA,CAAC5B,KAAK,MAAA,IAAA,IAAA4B,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,YAAA,CAAYzjB,MAAM,KAAI,CAAC,CAAA;AAClC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACI;AACA;AACA;AACJ;AACA;AACA;EACI0jB,OAAOA,CAACxlB,KAAK,EAAE;AACX,IAAA,MAAMylB,OAAO,GAAG,IAAI,CAAC9B,KAAK,CAAC3jB,KAAK,CAAC,CAAA;AACjC,IAAA,IAAIylB,OAAO,EAAE;AACT,MAAA,IAAI,CAAClnB,IAAI,CAACmnB,SAAS,CAAC;QAChB1T,QAAQ,EAAG,IAAI,CAACA,QAAQ;QACxBD,EAAE,EAAS0T,OAAO,CAAC1T,EAAAA;AACvB,OAAC,EAAE;AAAE4T,QAAAA,QAAQ,EAAG,IAAA;AAAK,OAAC,CAAC,CAAA;AAC3B,KAAA;IACA,OAAO,CAAC,CAACF,OAAO,CAAA;AACpB,GAAA;AACAR,EAAAA,cAAcA,CAACra,WAAW,EAAE+Y,KAAK,EAAE;AAC/B,IAAA,MACIiC,YAAY,GAAGhb,WAAW,GAAG,IAAI,CAACrM,IAAI,CAACL,KAAK,CAACuJ,OAAO,CAACmD,WAAW,CAACmH,EAAE,CAAC,GAAG,CAAC;AACxE8T,MAAAA,WAAW,GAAIlC,KAAK,CAAC1H,KAAK,EAAE,CAAC6J,IAAI,CAC7B,CAACC,CAAC,EAAEC,CAAC,KAAK9gB,IAAI,CAAC+gB,GAAG,CAACF,CAAC,CAAC/lB,KAAK,GAAG4lB,YAAY,CAAC,GAAG1gB,IAAI,CAAC+gB,GAAG,CAACD,CAAC,CAAChmB,KAAK,GAAG4lB,YAAY,CAChF,CAAC,CAAA;AACL,IAAA,IAAI,CAACJ,OAAO,CAAC7B,KAAK,CAAClc,OAAO,CAACoe,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/C,GAAA;AACA;AACJ;AACA;AACIK,EAAAA,YAAYA,GAAG;AACX,IAAA,IAAI,CAACV,OAAO,CAAC,CAAC,CAAC,CAAA;AACnB,GAAA;AACA;AACJ;AACA;AACIW,EAAAA,WAAWA,GAAG;IACV,IAAI,CAACX,OAAO,CAAC,IAAI,CAAC7B,KAAK,CAAC7hB,MAAM,GAAG,CAAC,CAAC,CAAA;AACvC,GAAA;AACA;AACJ;AACA;AACIskB,EAAAA,WAAWA,GAAG;IAAA,IAAAC,kBAAA,EAAAC,qBAAA,CAAA;IACV,MACInoB,EAAE,GAAa,IAAI;AACnB,MAAA;AAAEI,QAAAA,IAAAA;AAAK,OAAC,GAAOJ,EAAE;AACjB;MACAooB,SAAS,GAAM,CAAAF,CAAAA,kBAAA,GAAA9nB,IAAI,CAACioB,YAAY,MAAA,IAAA,IAAAH,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjBA,kBAAA,CAAmBtU,EAAE,MAAAuU,CAAAA,qBAAA,GAAI/nB,IAAI,CAACkoB,eAAe,cAAAH,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,qBAAA,CAAsBvU,EAAE,CAAA;MAChEmB,YAAY,GAAG3U,IAAI,CAACL,KAAK,CAACuJ,OAAO,CAAC8e,SAAS,CAAC,IAAI,CAAC;AACjDd,MAAAA,OAAO,GAAQtnB,EAAE,CAACwlB,KAAK,CAACxB,IAAI,CAAC6B,GAAG,IAAIA,GAAG,CAAChkB,KAAK,GAAGkT,YAAY,CAAC,CAAA;AACjE,IAAA,IAAIuS,OAAO,EAAE;MACTlnB,IAAI,CAACmnB,SAAS,CAAC;QACX1T,QAAQ,EAAG7T,EAAE,CAAC6T,QAAQ;QACtBD,EAAE,EAAS0T,OAAO,CAAC1T,EAAAA;AACvB,OAAC,EAAE;AAAE4T,QAAAA,QAAQ,EAAG,IAAA;AAAK,OAAC,CAAC,CAAA;AAC3B,KAAC,MACI;MACDxnB,EAAE,CAAC+nB,YAAY,EAAE,CAAA;AACrB,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACIQ,EAAAA,WAAWA,GAAG;IAAA,IAAAC,mBAAA,EAAAC,sBAAA,CAAA;IACV,MACIzoB,EAAE,GAAgB,IAAI;AACtB,MAAA;QAAEI,IAAI;AAAEolB,QAAAA,KAAAA;AAAM,OAAC,GAAGxlB,EAAE;MACpBooB,SAAS,GAAS,CAAAI,CAAAA,mBAAA,GAAApoB,IAAI,CAACioB,YAAY,MAAA,IAAA,IAAAG,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjBA,mBAAA,CAAmB5U,EAAE,MAAA6U,CAAAA,sBAAA,GAAIroB,IAAI,CAACkoB,eAAe,cAAAG,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,sBAAA,CAAsB7U,EAAE,CAAA;MACnEmB,YAAY,GAAM3U,IAAI,CAACL,KAAK,CAACuJ,OAAO,CAAC8e,SAAS,CAAC,IAAI,CAAC,CAAA;AACxD,IAAA,IAAIM,OAAO,CAAA;AACX,IAAA,IAAI,CAAClD,KAAK,CAAC7hB,MAAM,EAAE;AACf,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,KAAK,IAAIkC,CAAC,GAAG2f,KAAK,CAAC7hB,MAAM,GAAG,CAAC,EAAEkC,CAAC,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAE;MACxC,IAAI2f,KAAK,CAAC3f,CAAC,CAAC,CAAChE,KAAK,GAAGkT,YAAY,EAAE;AAC/B2T,QAAAA,OAAO,GAAGlD,KAAK,CAAC3f,CAAC,CAAC,CAAA;AAClB,QAAA,MAAA;AACJ,OAAA;AACJ,KAAA;AACA,IAAA,IAAI6iB,OAAO,EAAE;MACTtoB,IAAI,CAACmnB,SAAS,CAAC;QACX1T,QAAQ,EAAG7T,EAAE,CAAC6T,QAAQ;QACtBD,EAAE,EAAS8U,OAAO,CAAC9U,EAAAA;AACvB,OAAC,EAAE;AAAE4T,QAAAA,QAAQ,EAAG,IAAA;AAAK,OAAC,CAAC,CAAA;AAC3B,KAAC,MACI;MACDxnB,EAAE,CAACgoB,WAAW,EAAE,CAAA;AACpB,KAAA;AACJ,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACIvhB,EAAAA,UAAUA,CAAC;IAAEF,WAAW;IAAExF,MAAM;AAAEC,IAAAA,MAAAA;AAAO,GAAC,EAAE;AAAA,IAAA,IAAA2nB,YAAA,CAAA;IACxC,MACI3oB,EAAE,GAAa,IAAI;AACnB,MAAA;AAAEU,QAAAA,SAAAA;AAAU,OAAC,GAAG6F,WAAW;AAC3B,MAAA;QACIme,UAAU;QACV+B,MAAM;AACNjC,QAAAA,UAAAA;AACJ,OAAC,GAAaxkB,EAAE;MAChB4oB,QAAQ,GAAM5oB,EAAE,CAAC6T,QAAQ,KAAK9S,MAAM,CAAC6S,EAAE,KAAA,CAAA+U,YAAA,GAAI3oB,EAAE,CAACwmB,QAAQ,cAAAmC,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,YAAA,CAAc3nB,MAAM,CAAC4S,EAAE,CAAC,CAAA,CAAA;AACvE,IAAA,IAAIgV,QAAQ,EAAE;AACV;AACAloB,MAAAA,SAAS,CAACC,GAAG,CAACX,EAAE,CAACqkB,MAAM,CAAC,CAAA;MACxB9d,WAAW,CAACsiB,UAAU,GAAG,IAAI,CAAA;AAC7BtiB,MAAAA,WAAW,CAACsgB,gBAAgB,GAAGtgB,WAAW,CAAC8D,SAAS,CAAA;AACpD;AACA;AACA,MAAA,MAAMye,KAAK,GAAGpE,UAAU,CAACqE,WAAW,GAAGjlB,SAAS,CAACklB,IAAI,CAACziB,WAAW,EAAE,uCAAuC,CAAC,IAAIA,WAAW,CAAA;AAC1H,MAAA,KAAK,IAAI0iB,QAAQ,GAAGvE,UAAU,CAACwE,QAAQ,EAAE,EAAED,QAAQ,IAAIH,KAAK,CAAC9lB,QAAQ,CAACimB,QAAQ,CAAC,GAAG;QAC9E,MACIE,aAAa,GAAGF,QAAQ;UACxBG,WAAW,GAAKH,QAAQ,CAACI,SAAS;UAClCC,OAAO,GAAS,CAAC,QAAQ,CAAC,CAAA;AAC9B;AACAL,QAAAA,QAAQ,GAAGvE,UAAU,CAACwE,QAAQ,EAAE,CAAA;AAChC,QAAA,IAAIK,MAAM,GAAG9C,MAAM,CAAC+C,SAAS,CAAA;AAC7B;AACA;QACA,KAAK,IAAIC,KAAK,GAAGhD,MAAM,CAACiD,IAAI,CAACN,WAAW,CAAC,EAAEK,KAAK,EAAEA,KAAK,GAAGhD,MAAM,CAACiD,IAAI,CAACN,WAAW,CAAC,EAAE;UAChF,MACIO,QAAQ,GAAMP,WAAW,CAACQ,SAAS,CAACL,MAAM,EAAEE,KAAK,CAAC5nB,KAAK,CAAC;YACxDgoB,WAAW,GAAGJ,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE;AACpCK,YAAAA,CAAC,GAAaL,KAAK,CAAC,CAAC,CAAC;YACtBM,UAAU,GAAIN,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,CAAA;AACxCH,UAAAA,OAAO,CAAC5lB,IAAI,CAAE,GAAEyb,YAAY,CAAC6K,UAAU,CAACL,QAAQ,CAAE,CAAEE,EAAAA,WAAY,gBAAerF,UAAW,CAAA,EAAA,EAAIsF,CAAE,CAASC,OAAAA,EAAAA,UAAW,EAAC,CAAC,CAAA;UACtHR,MAAM,GAAG9C,MAAM,CAAC+C,SAAS,CAAA;AAC7B,SAAA;AACAF,QAAAA,OAAO,CAAC5lB,IAAI,CAACyb,YAAY,CAAC6K,UAAU,CAACZ,WAAW,CAACQ,SAAS,CAACL,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,CAAA;AAC/E;AACAJ,QAAAA,aAAa,CAAC5f,UAAU,CAAC0gB,YAAY,CAACnmB,SAAS,CAAComB,yBAAyB,CAACZ,OAAO,CAACa,IAAI,CAAC,EAAE,CAAC,EAAE;AACxFC,UAAAA,QAAQ,EAAG,IAAA;SACd,CAAC,EAAEjB,aAAa,CAAC,CAAA;QAClBA,aAAa,CAAC1O,MAAM,EAAE,CAAA;AAC1B,OAAA;MACA3W,SAAS,CAACC,aAAa,CAAC;AACpBgX,QAAAA,MAAM,EAAMxU,WAAW;QACvB/E,SAAS,EAAGxB,EAAE,CAACukB,eAAe;AAC9Bhc,QAAAA,IAAI,EAAQqgB,QAAAA;AAChB,OAAC,CAAC,CAAA;AACN,KAAA;AACJ,GAAA;AACA;AACA;EACAyB,WAAWA,CAAClhB,KAAK,EAAE;IACf,MAAMnJ,EAAE,GAAG,IAAI,CAAA;IACf,IAAIA,EAAE,CAACgkB,IAAI,EAAE;AACThkB,MAAAA,EAAE,CAACgkB,IAAI,GAAGhkB,EAAE,CAACgkB,IAAI,CAACsG,MAAM,CAAC,CAAC,EAAEtqB,EAAE,CAACgkB,IAAI,CAACrgB,MAAM,GAAG,CAAC,CAAC,CAAA;AAC/C3D,MAAAA,EAAE,CAACkmB,MAAM,CAAClmB,EAAE,CAACgkB,IAAI,CAAC,CAAA;AAClB,MAAA,OAAO,IAAI,CAAA;AACf,KAAA;AACA,IAAA,OAAO,KAAK,CAAA;AAChB,GAAA;AACAuG,EAAAA,WAAWA,GAAG;IACV,IAAI,IAAI,CAACvG,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,GAAG,EAAE,CAAA;AACd,MAAA,IAAI,CAACkC,MAAM,CAAC,IAAI,CAAClC,IAAI,CAAC,CAAA;AACtB,MAAA,OAAO,IAAI,CAAA;AACf,KAAA;AACA,IAAA,OAAO,KAAK,CAAA;AAChB,GAAA;AACAwG,EAAAA,gBAAgBA,GAAG;IACf,MACIxqB,EAAE,GAAG,IAAI;AACT,MAAA;AAAEoN,QAAAA,MAAAA;AAAO,OAAC,GAAGpN,EAAE,CAACuL,MAAM,CAACS,QAAQ,CAAA;IACnC,IAAIoB,MAAM,IAAIpN,EAAE,CAAC6T,QAAQ,IAAI7T,EAAE,CAACmnB,UAAU,EAAE;MACxCnnB,EAAE,CAACglB,KAAK,EAAE,CAAA;AACV5X,MAAAA,MAAM,CAACod,gBAAgB,CAACxqB,EAAE,CAACuL,MAAM,CAAC+W,OAAO,CAACgE,OAAO,CAACtmB,EAAE,CAAC6T,QAAQ,CAAC,EAAE7T,EAAE,CAACgkB,IAAI,CAAC,CAAA;AAC5E,KAAA;AACJ,GAAA;AACA;AACJ;AACA;AACA;AACA;EACIyG,iBAAiBA,CAACthB,KAAK,EAAE;AAAA,IAAA,IAAAuhB,UAAA,CAAA;IACrB,MACI1qB,EAAE,GAAgB,IAAI;AACtB,MAAA;AAAEI,QAAAA,IAAAA;AAAK,OAAC,GAAUJ,EAAE;AACpB,MAAA;AAAEyM,QAAAA,WAAAA;AAAY,OAAC,GAAGrM,IAAI,CAAA;AAC1B;AACA,IAAA,IAAI,CAAC+I,KAAK,CAAC+M,OAAO,IAAI,CAAClW,EAAE,CAAC0L,QAAQ,IAAIe,WAAW,KAAXA,IAAAA,IAAAA,WAAW,KAAXA,KAAAA,CAAAA,IAAAA,WAAW,CAAEzL,MAAM,IAAI,CAACyL,WAAW,CAACsY,YAAY,IAAI,CAAA2F,CAAAA,UAAA,GAAAvhB,KAAK,CAACma,GAAG,MAAA,IAAA,IAAAoH,UAAA,KAATA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAA,CAAW/mB,MAAM,MAAK,CAAC,EAAE;AAC/G,MAAA,MAAM5C,MAAM,GAAGX,IAAI,CAACkiB,OAAO,CAACgE,OAAO,CAAClmB,IAAI,CAACioB,YAAY,CAACxU,QAAQ,CAAC,CAAA;AAC/D;AACA,MAAA,IAAI9S,MAAM,IAAIA,MAAM,CAACvB,UAAU,KAAK,KAAK,EAAE;AACvCQ,QAAAA,EAAE,CAAC6T,QAAQ,GAAGzT,IAAI,CAACioB,YAAY,CAACxU,QAAQ,CAAA;AACxC7T,QAAAA,EAAE,CAACgkB,IAAI,IAAI7a,KAAK,CAACma,GAAG,CAAA;AACpBtjB,QAAAA,EAAE,CAACkmB,MAAM,CAAClmB,EAAE,CAACgkB,IAAI,CAAC,CAAA;AACtB,OAAA;AACJ,KAAA;AACJ,GAAA;AACA2G,EAAAA,cAAcA,CAACvqB,IAAI,EAAEwqB,gBAAgB,EAAEC,cAAc,EAAE;IACnD,MACI7qB,EAAE,GAAM,IAAI,CAAA;AAChB,IAAA,IAAIA,EAAE,CAACgkB,IAAI,KAAK,CAAC6G,cAAc,IAAIA,cAAc,CAAChX,QAAQ,KAAK7T,EAAE,CAAC6T,QAAQ,CAAC,EAAE;MACzE7T,EAAE,CAACglB,KAAK,EAAE,CAAA;AACd,KAAA;AACJ,GAAA;AACA;AACJ,CAAA;;AACAlB,SAAS,CAACzf,MAAM,GAAG,WAAW,CAAA;AAAE0K,kBAAkB,CAACC,eAAe,CAAC8U,SAAS,CAAC;;ACrc7E;AACA;AACA;AACA,MAAMgH,kBAAkB,GAAG;AAAErQ,EAAAA,MAAM,EAAG,CAAC;AAAErN,EAAAA,MAAM,EAAG,CAAC;AAAE5K,EAAAA,OAAO,EAAG,CAAC;AAAEuoB,EAAAA,OAAO,EAAG,CAAA;AAAE,CAAC,CAAA;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,WAAW,SAAS9b,cAAc,CAACuD,KAAK,CAACC,SAAS,CAAC,CAAC;AACrE;EACA,OAAO/J,KAAK,GAAG,aAAa,CAAA;AAC5B;EACA,WAAWyb,UAAUA,GAAG;IACpB,OAAO;AACH;AACA6G,MAAAA,iBAAiB,EAAU,oBAAoB;AAC/CC,MAAAA,gBAAgB,EAAW,4BAA4B;AACvDC,MAAAA,wBAAwB,EAAG,oCAAoC;AAC/D;AACA;AACAC,MAAAA,cAAc,EAAa,IAAI9T,GAAG,EAAE;MACpC+T,kBAAkB,EAAS,IAAI/T,GAAG,EAAC;KACtC,CAAA;AACL,GAAA;AACA,EAAA,OAAOxM,YAAY,GAAG;AACllK,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ4e,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQze,MAAM,EAAG,EAAE;AACX;AACR;AACA;AACA;AACA;AACA;AACA;AACQu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"}