{"version":3,"file":"taskboard.module.thin.js","sources":["../../../TaskBoard/lib/TaskBoard/feature/TaskBoardFeature.js","../../../TaskBoard/lib/TaskBoard/feature/ColumnDrag.js","../../../TaskBoard/lib/TaskBoard/feature/ColumnHeaderMenu.js","../../../TaskBoard/lib/TaskBoard/feature/ColumnToolbars.js","../../../TaskBoard/lib/TaskBoard/view/item/TaskItem.js","../../../TaskBoard/lib/TaskBoard/feature/SimpleTaskEdit.js","../../../TaskBoard/lib/TaskBoard/feature/SwimlaneDrag.js","../../../TaskBoard/lib/TaskBoard/feature/TaskDrag.js","../../../TaskBoard/lib/TaskBoard/feature/TaskDragSelect.js","../../../TaskBoard/lib/TaskBoard/widget/mixin/TaskBoardLinked.js","../../../TaskBoard/lib/TaskBoard/widget/base/ColorBoxCombo.js","../../../TaskBoard/lib/TaskBoard/widget/ColumnCombo.js","../../../TaskBoard/lib/TaskBoard/widget/ResourcesCombo.js","../../../TaskBoard/lib/TaskBoard/widget/SwimlaneCombo.js","../../../TaskBoard/lib/TaskBoard/widget/TaskColorPicker.js","../../../TaskBoard/lib/TaskBoard/widget/TaskColorCombo.js","../../../TaskBoard/lib/TaskBoard/widget/TaskEditor.js","../../../TaskBoard/lib/TaskBoard/feature/TaskEdit.js","../../../TaskBoard/lib/TaskBoard/feature/TaskMenu.js","../../../TaskBoard/lib/TaskBoard/feature/TaskTooltip.js","../../../TaskBoard/lib/TaskBoard/model/ColumnModel.js","../../../TaskBoard/lib/TaskBoard/model/TaskModel.js","../../../TaskBoard/lib/TaskBoard/store/TaskStore.js","../../../TaskBoard/lib/TaskBoard/model/ProjectModel.js","../../../TaskBoard/lib/TaskBoard/model/SwimlaneModel.js","../../../TaskBoard/lib/TaskBoard/view/mixin/ExpandCollapse.js","../../../TaskBoard/lib/TaskBoard/view/mixin/ResponsiveCards.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardColumns.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardDom.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardDomEvents.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardScroll.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardStores.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardSwimlanes.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskBoardVirtualization.js","../../../TaskBoard/lib/TaskBoard/view/item/TextItem.js","../../../TaskBoard/lib/TaskBoard/view/item/ResourceAvatarsItem.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskItems.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskNavigation.js","../../../TaskBoard/lib/TaskBoard/view/mixin/TaskSelection.js","../../../TaskBoard/lib/TaskBoard/view/item/ImageItem.js","../../../TaskBoard/lib/TaskBoard/view/item/ProgressItem.js","../../../TaskBoard/lib/TaskBoard/view/item/RatingItem.js","../../../TaskBoard/lib/TaskBoard/view/item/SeparatorItem.js","../../../TaskBoard/lib/TaskBoard/widget/TagCombo.js","../../../TaskBoard/lib/TaskBoard/view/item/TagsItem.js","../../../TaskBoard/lib/TaskBoard/view/item/TemplateItem.js","../../../TaskBoard/lib/TaskBoard/view/item/TodoListItem.js","../../../TaskBoard/lib/TaskBoard/localization/En.js","../../../TaskBoard/lib/TaskBoard/view/TaskBoardBase.js","../../../TaskBoard/lib/TaskBoard/view/item/TaskMenuItem.js","../../../TaskBoard/lib/TaskBoard/view/TaskBoard.js","../../../TaskBoard/lib/TaskBoard/widget/ColumnFilterField.js","../../../TaskBoard/lib/TaskBoard/widget/ColumnPickerButton.js","../../../TaskBoard/lib/TaskBoard/widget/ColumnScrollButton.js","../../../TaskBoard/lib/TaskBoard/widget/ProjectCombo.js","../../../TaskBoard/lib/TaskBoard/widget/SwimlaneFilterField.js","../../../TaskBoard/lib/TaskBoard/widget/SwimlanePickerButton.js","../../../TaskBoard/lib/TaskBoard/widget/SwimlaneScrollButton.js","../../../TaskBoard/lib/TaskBoard/widget/TaskFilterField.js","../../../TaskBoard/lib/TaskBoard/widget/TodoListField.js","../../../TaskBoard/lib/TaskBoard/widget/UndoRedo.js","../../../TaskBoard/lib/TaskBoard/widget/ZoomSlider.js","../../../TaskBoard/bundle/entry.thin.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Factoryable from '../../Core/mixin/Factoryable.js';\n\n/**\n * @module TaskBoard/feature/TaskBoardFeature\n */\n\n/**\n * The abstract base class for TaskBoard features.\n *\n * @extends Core/mixin/InstancePlugin\n * @abstract\n */\nexport default class TaskBoardFeature extends InstancePlugin.mixin(Factoryable) {\n    static factoryable = {};\n\n    static configurable = {};\n\n    // This makes all feature config changes after initialization recompose TaskBoard\n    onConfigChange(args) {\n        if (!this.isConfiguring && !this.isDestroying) {\n            this.client.recompose();\n        }\n        super.onConfigChange(args);\n    }\n}\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport Base from '../../Core/Base.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport Droppable from '../../Core/mixin/Droppable.js';\nimport Events from '../../Core/mixin/Events.js';\n\n/**\n * @module TaskBoard/feature/ColumnDrag\n */\n\n/**\n * This feature allows users to drag columns on the TaskBoard to change the column order. Drag is initiated upon\n * mouse down in the column header. Try it out below!\n *\n * {@inlineexample TaskBoard/feature/ColumnDrag.js}\n *\n * Works just as well when using swimlanes:\n *\n * {@inlineexample TaskBoard/feature/ColumnDragSwimlanes.js}\n *\n * ## Drag events\n *\n * The different stages of a drag operation trigger different events, in order of appearance:\n *\n * | Event                           | Description                                                                    |\n * |---------------------------------|--------------------------------------------------------------------------------|\n * | {@link #event-beforeColumnDrag} | Preventable event fired before a drag starts                                   |\n * | {@link #event-columnDragStart}  | Fired when dragging starts                                                     |\n * | {@link #event-columnDrag}       | Fired when movement during a drag will lead to changes                         |\n * | {@link #event-beforeColumnDrop} | Preventable event fired before finalizing a valid drop. Allows async listeners |\n * | {@link #event-columnDrop}       | Fired after finalizing a valid drop                                            |\n * | {@link #event-columnDragAbort}  | Fired when a drag is aborted (ESC, drop out of bounds or by a listener)        |\n * | {@link #event-columnDragEnd}    | Fired when a started drag ends, no matter the outcome                          |\n *\n * This feature is **disabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype columnDrag\n * @feature\n */\nexport default class ColumnDrag extends TaskBoardFeature {\n    static $name = 'ColumnDrag';\n\n    static type = 'columnDrag';\n\n    static pluginConfig = {\n        after : ['initialCompose', 'populateColumnHeaderMenu']\n    };\n\n    initialCompose() {\n        const me = this;\n\n        // Cannot use configurable since bodyElement is not available yet when feature is pulled in\n        me.draggable = ColumnZone.new({\n            dragRootElement : me.disabled ? null : me.client.bodyWrapElement,\n            dropRootElement : me.client.bodyWrapElement,\n            owner           : me,\n\n            internalListeners : {\n                beforeDragStart : 'onBeforeDragStart',\n                dragStart       : 'onDragStart',\n                thisObj         : me\n            }\n        }, me.draggable);\n    }\n\n    doDestroy() {\n        this.draggable?.destroy();\n\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this.draggable) {\n            this.draggable.dragRootElement = disable ? null : this.client.bodyWrapElement;\n        }\n    }\n\n    movePrev(columnRecord) {\n        const { columns } = this.client;\n\n        columns.move(columnRecord, columns.getPrev(columnRecord));\n    }\n\n    moveNext(columnRecord) {\n        const\n            { columns } = this.client,\n            beforeIndex = Math.min(columns.indexOf(columnRecord) + 2, columns.count);\n\n        columns.move(columnRecord, columns.getAt(beforeIndex));\n    }\n\n    populateColumnHeaderMenu({ items, columnRecord }) {\n        const\n            { client }       = this,\n            { columns, rtl } = client;\n\n        if (!client.readOnly && !this.disabled) {\n            items.moveColumnLeft = {\n                text     : 'L{TaskBoard.moveColumnLeft}',\n                icon     : 'b-fw-icon b-icon-left',\n                disabled : columnRecord === columns[rtl ? 'last' : 'first'],\n                weight   : 200,\n                onItem   : () => this['move' + (rtl ? 'Next' : 'Prev')](columnRecord)\n            };\n\n            items.moveColumnRight = {\n                text     : 'L{TaskBoard.moveColumnRight}',\n                icon     : 'b-fw-icon b-icon-right',\n                disabled : columnRecord === columns[rtl ? 'first' : 'last'],\n                weight   : 300,\n                onItem   : () => this['move' + (rtl ? 'Prev' : 'Next')](columnRecord)\n            };\n        }\n    }\n\n    onBeforeDragStart({ drag, event }) {\n        /**\n         * Fires on the owning TaskBoard before column dragging starts. Return `false` to prevent the action\n         * @event beforeColumnDrag\n         * @preventable\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.ColumnModel} columnRecord Column to be dragged\n         */\n        return this.client.trigger('beforeColumnDrag', { drag, event, columnRecord : drag.columnRecord });\n    }\n\n    onDragStart({ drag, event }) {\n        /**\n         * Fires on the owning TaskBoard when column dragging starts\n         * @event columnDragStart\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.ColumnModel} columnRecord Column to be dragged\n         */\n        return this.client.trigger('columnDragStart', { drag, event, columnRecord : drag.columnRecord });\n    }\n}\n\nColumnDrag.initClass();\n\nclass ColumnZone extends Base.mixin(Draggable, Droppable, Events) {\n    static get configurable() {\n        return {\n            dragSelector     : '.b-taskboard-column-header, .b-taskboard-column-header *',\n            dragItemSelector : '.b-taskboard-column-header',\n\n            // Column has multiple parts (header + one element per swimlane), going to add cls manually to them\n            draggingItemCls : null,\n\n            dragProxy : {\n                type : 'default',\n\n                async open(drag) {\n                    const\n                        { owner }    = this,\n                        {\n                            itemElement,\n                            startEvent,\n                            columnRecord\n                        }            = drag,\n                        taskBoard    = owner.owner.client,\n                        headerBounds = Rectangle.from(itemElement, owner.dragRootElement),\n                        // Offset from cursor\n                        proxyOffset  = EventHelper.getClientPoint(startEvent).getDelta(headerBounds),\n                        // Drag proxy, positioned over column being dragged\n                        proxy        = DomHelper.createElement({\n                            className : 'b-taskboard-column-drag-proxy',\n                            parent    : owner.dragRootElement,\n                            style     : {\n                                // Using fixed top, only draggable horizontally\n                                top   : headerBounds.y,\n                                // Offset from cursor to be positioned over original column\n                                left  : EventHelper.getClientPoint(startEvent).translate(proxyOffset[0], 0).x,\n                                // Need a fixed width on the proxy, since columns width might be flexed etc\n                                width : itemElement.getBoundingClientRect().width\n                            },\n                            // Don't want it being removed while dragging\n                            retainElement : true\n                        }),\n                        // A column consists of multiple elements, a header and one \"column\" per swimlane (at least one)\n                        elements     = [itemElement, ...taskBoard.getColumnElements(columnRecord)];\n\n                    // Things we want to access later on drag\n                    Object.assign(drag, {\n                        proxy,\n                        elements,\n                        proxyOffset\n                    });\n\n                    // Clone all dragged column elements and put them in the proxy\n                    elements.forEach((element, i) => {\n                        const\n                            columnClone = element.cloneNode(true),\n                            bounds      = element.getBoundingClientRect();\n\n                        // Store size, used to size drop indicator later\n                        element.originalWidth = bounds.width;\n                        element.originalHeight = bounds.height;\n\n                        // Mimic element structure, swimlane > column (not fully mimicking it for now, should suffice)\n                        if (element.matches('.b-taskboard-column')) {\n                            const\n                                swimlane      = element.closest('.b-taskboard-swimlane'),\n                                header        = DomSync.getChild(swimlane, 'header'),\n                                body          = DomSync.getChild(swimlane, 'body'),\n                                swimlaneClone = swimlane.cloneNode(),\n                                headerClone   = header?.cloneNode(true),\n                                bodyClone     = body.cloneNode();\n\n                            let height = swimlane.getBoundingClientRect().height;\n\n                            // Last swimlane has bottom padding that we do not want in proxy\n                            if (i === elements.length - 1) {\n                                const paddingBottom = DomHelper.getStyleValue(element.parentElement, 'padding-bottom');\n                                height -= parseFloat(paddingBottom);\n                            }\n\n                            // Use fixed height on the swimlanes in the drag proxy, to have it exactly match the board.\n                            // Otherwise it would shrinkwrap\n                            swimlaneClone.style.flex = `0 0 ${height}px`;\n\n                            headerClone && swimlaneClone.appendChild(headerClone);\n                            bodyClone.appendChild(columnClone);\n                            swimlaneClone.appendChild(bodyClone);\n\n                            proxy.appendChild(swimlaneClone);\n                        }\n                        // Column header\n                        else {\n                            proxy.appendChild(columnClone);\n                        }\n\n                        // Hide original column after measuring it above\n                        element.classList.add('b-drag-original');\n                    });\n                },\n\n                dragMove({ proxy, event, proxyOffset }) {\n                    // Move along x-axis only\n                    const position = EventHelper.getClientPoint(event).translate(proxyOffset[0], 0);\n\n                    proxy.style.left = `${position.x}px`;\n                }\n            }\n        };\n    }\n\n    setupDragContext(event) {\n        const\n            result = super.setupDragContext(event),\n            { client } = this.owner;\n\n        result.scrollManager = client.scrollManager;\n        result.monitoringConfig = {\n            scrollables : [{\n                element   : client.bodyElement,\n                direction : 'horizontal'\n            }]\n        };\n\n        return result;\n    }\n\n    // Populate the drag context early, to have something to take decisions on in beforeDragStart listeners\n    startDrag(drag) {\n        drag.columnRecord = this.owner.client.resolveColumnRecord(drag.itemElement);\n\n        return super.startDrag(drag);\n    }\n\n    dragStart(drag) {\n        // Even though the size of other columns should not be affected, we might decide to animate in the future.\n        // Suspending responsiveness to not have it kick in if we do...\n        this.owner.client.suspendResponsiveness();\n\n        drag.wasStarted = true;\n    }\n\n    dragEnter(drag) {\n        // Only accept columns\n        if (!drag.itemElement.matches(this.dragItemSelector)) {\n            return false;\n        }\n\n        // Create drop indicators on first enter\n        if (!drag.dropIndicators) {\n            // Need one indicator for each part of the column\n            drag.dropIndicators = drag.elements.map((element, i) => DomHelper.createElement({\n                className   : 'b-taskboard-column-drop-indicator',\n                elementData : {\n                    dropIndicator : true,\n                    // Tag along the element, to be able to return the drop indicator to its position for\n                    // invalid drop targets. NOTE: Currently not used\n                    element\n                },\n                // Use same size as dragged column had originally\n                style : {\n                    width  : element.originalWidth,\n                    height : element.originalHeight\n                }\n            }));\n\n            this.insertDropIndicators(drag, drag.columnRecord);\n        }\n    }\n\n    insertDropIndicators(drag, beforeColumnRecord) {\n        // Figure out insertion index among headers, will use same index within swimlanes\n        const\n            { client } = this.owner,\n            insertAt   = client.columns.indexOf(beforeColumnRecord);\n\n        // Insert all drop indicators\n        drag.dropIndicators.forEach((dropIndicator, i) => {\n            // Header\n            if (i === 0) {\n                // Insert at correct place among column headers\n                const\n                    headerContainer = DomSync.getChild(client.bodyElement, 'header'),\n                    actualHeaders   = [...headerContainer.children];\n\n                ArrayHelper.remove(actualHeaders, dropIndicator);\n\n                headerContainer.insertBefore(dropIndicator, actualHeaders[insertAt]);\n            }\n            // Column\n            else {\n                // Insert it at correct place within corresponding swimlane\n                const\n                    // Get corresponding swimlane (default if swimlanes not used)\n                    swimlaneRecord = client.swimlanes?.getAt(i - 1) ?? { domId : 'default' },\n                    swimlaneBody   = DomSync.getChild(client.getSwimlaneElement(swimlaneRecord), 'body'),\n                    actualColumns  = [...swimlaneBody.children];\n\n                ArrayHelper.remove(actualColumns, dropIndicator);\n\n                swimlaneBody.insertBefore(dropIndicator, actualColumns[insertAt]);\n            }\n        });\n    }\n\n    updateValidity(drag, valid) {\n        drag.proxy.classList.toggle('b-invalid', !valid);\n        drag.dropIndicators.forEach(dropIndicator => dropIndicator.classList.toggle('b-invalid', !valid));\n        drag.invalid = !valid;\n    }\n\n    dragMove(drag) {\n        const\n            { client }          = this.owner,\n            documentRoot        = client.documentRoot,\n            proxyBounds         = Rectangle.from(drag.proxy, undefined, true),\n            // Check element under proxy top center, should get a column header (or a gap)\n            overElement         = documentRoot.elementFromPoint(proxyBounds.center.x, proxyBounds.y),\n            columnHeaderElement = overElement?.closest('.b-taskboard-column-header');\n\n        if (drag.invalid) {\n            drag.valid = false;\n        }\n\n        // If we are over the drop indicator or something not a column header, we do nothing\n        if (!overElement?.elementData?.dropIndicator && columnHeaderElement) {\n            const targetBounds = Rectangle.from(columnHeaderElement);\n\n            // Column that we are going to insert the dragged column before or after\n            let beforeColumn = client.resolveColumnRecord(columnHeaderElement);\n\n            // If beyond center, insert before next column\n            if (proxyBounds.center.x > targetBounds.center.x) {\n                beforeColumn = client.columns.getNext(beforeColumn);\n            }\n\n            this.insertDropIndicators(drag, beforeColumn);\n\n            // Only trigger if order will change\n            const shouldTrigger = drag.beforeColumn !== beforeColumn;\n\n            drag.beforeColumn = beforeColumn;\n\n            if (shouldTrigger) {\n                /**\n                 * Fires on the owning TaskBoard when a column is dragged, if the drag leads to a change compared to\n                 * the last columnDrag event.\n                 *\n                 * Returning `false` from a listener will flag the drag as invalid (by default turning the drop\n                 * indicator red)\n                 *\n                 * ```javascript\n                 * const taskBoard = new TaskBoard({\n                 *    listeners : {\n                 *        // Do not allow moving beyond last column\n                 *        columnDrag({ columnRecord, beforeColumn }) {\n                 *           return beforeColumn === null;\n                 *        }\n                 *    }\n                 * });\n                 * ```\n                 *\n                 * @event columnDrag\n                 * @on-owner\n                 * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                 * @param {TaskBoard.model.ColumnModel} columnRecord Column being dragged\n                 * @param {TaskBoard.model.ColumnModel} beforeColumn Insert before this column on drop, `null` if last\n                 */\n                const result = client.trigger('columnDrag', { drag, columnRecord : drag.columnRecord, beforeColumn });\n\n                this.updateValidity(drag, result !== false);\n            }\n        }\n    }\n\n    async dragDrop(drag) {\n        // Data part\n        const\n            { client }  = this.owner,\n            { columns } = client,\n            {\n                columnRecord,\n                beforeColumn,\n                elements,\n                dropIndicators,\n                proxy\n            }           = drag;\n\n        /**\n         * Fires on the owning TaskBoard when dropping a column, before the operation completes. Handles async\n         * listeners, returning `false` from one will abort the operation\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    listeners : {\n         *        async beforeColumnDrop({ columnRecord, beforeColumn }) {\n         *            // Show confirmation dialog\n         *            const result = await MessageDialog.confirm({\n         *                title   : 'Verify drop',\n         *                message : `Please confirm moving ${columnRecord.text} before ${beforeColumn.text}?`\n         *            });\n         *\n         *            // Returning false will abort the drop (if user pressed Cancel)\n         *            return result === MessageDialog.okButton;\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @event beforeColumnDrop\n         * @preventable\n         * @async\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.ColumnModel} columnRecord Dropped column\n         * @param {TaskBoard.model.ColumnModel} beforeColumn Dropped before this column\n         */\n        if (drag.invalid || await client.trigger('beforeColumnDrop', { drag, columnRecord, beforeColumn }) === false) {\n            drag.valid = false;\n        }\n        else {\n            drag.finalizer = new Promise(resolve => {\n                function commit() {\n                    // Remove proxy & dropIndicator\n                    proxy.remove();\n                    dropIndicators.forEach(dropIndicator => dropIndicator.remove());\n\n                    // Restore original elements\n                    elements.forEach(element => element.classList.remove('b-drag-original'));\n\n                    // Update data\n                    client.suspendDomTransition();\n                    beforeColumn !== undefined && columns.move(columnRecord, beforeColumn);\n                    client.resumeDomTransition();\n\n                    /**\n                     * Fires on the owning TaskBoard when a column is successfully dropped (after the drop transition\n                     * has finished)\n                     * @event columnDrop\n                     * @on-owner\n                     * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                     * @param {TaskBoard.model.ColumnModel} columnRecord Dropped column\n                     * @param {TaskBoard.model.ColumnModel} beforeColumn Dropped before this column (`null` if last)\n                     * @param {TaskBoard.model.SwimlaneModel} targetSwimlane Dropped in this swimlane (if used)\n                     */\n                    client.trigger('columnDrop', { drag, columnRecord, beforeColumn });\n\n                    /**\n                     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the\n                     * outcome of it (whether valid, invalid or aborted)\n                     *\n                     * @event columnDragEnd\n                     * @on-owner\n                     * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                     * @param {TaskBoard.model.ColumnModel} columnRecord Affected column\n                     */\n                    client.trigger('columnDragEnd', { drag, columnRecord, beforeColumn });\n\n                    client.resumeResponsiveness();\n\n                    resolve();\n                }\n\n                // UI part\n\n                // We are dropping, this cls by default has a transition\n                proxy.classList.add('b-dropping');\n\n                // Move proxy to drop location, allowing it to transition there\n                DomHelper.alignTo(\n                    proxy,\n                    Rectangle.from(dropIndicators[0], undefined, true)\n                );\n\n                // Update record after the transition, to prevent too early redraw (which would ruin the transition)\n                if (DomHelper.getPropertyTransitionDuration(proxy, 'transform')) {\n                    EventHelper.onTransitionEnd({\n                        element  : proxy,\n                        property : 'transform',\n                        handler  : commit,\n                        thisObj  : client\n                    });\n                }\n                // Or right away if no transition is used\n                else {\n                    commit();\n                }\n            });\n        }\n    }\n\n    dragLeave(drag) {\n        // Doing nothing feels ok for now\n    }\n\n    doAbort(drag) {\n        const\n            { client }                                        = this.owner,\n            { dropIndicators, proxy, columnRecord, elements } = drag;\n\n        if (proxy) {\n            function finalizeAbort() {\n                // Remove proxy & dropIndicator\n                proxy.remove();\n                dropIndicators.forEach(dropIndicator => dropIndicator.remove());\n\n                // Restore original elements\n                elements.forEach(element => element.classList.remove('b-drag-original'));\n\n                client.trigger('columnDragAbortFinalized');\n            }\n\n            // Emulate a drop on abort, to get transitions\n            proxy.classList.add('b-dropping');\n\n            // Move drop indicators to where column originated\n            dropIndicators.forEach((dropIndicator, i) => {\n                const original = drag.elements[i];\n\n                dropIndicator.classList.remove('b-invalid'); // Looks better if not invalid on return to origin\n\n                original.parentElement.insertBefore(dropIndicator, original);\n            });\n\n            // Move proxy to original location, allowing it to transition there\n            DomHelper.alignTo(\n                proxy,\n                Rectangle.from(dropIndicators[0], undefined, true)\n            );\n\n            // Finalize after transition\n            if (DomHelper.getPropertyTransitionDuration(proxy, 'transform')) {\n                EventHelper.onTransitionEnd({\n                    element  : proxy,\n                    property : 'transform',\n                    handler  : finalizeAbort,\n                    thisObj  : client // For timer cleanup\n                });\n            }\n            // Or right away if no transition is used\n            else {\n                finalizeAbort();\n            }\n        }\n\n        /**\n         * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)\n         *\n         * @event columnDragAbort\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.ColumnModel} columnRecord Dragged column\n         */\n        client.trigger('columnDragAbort', { drag, columnRecord });\n\n        if (drag.wasStarted) {\n            // Documented in dragDrop()\n            client.trigger('columnDragEnd', { drag, columnRecord });\n        }\n    }\n\n    dragEnd(drag) {\n        // Move back to original location when drag was aborted\n        if (!drag.valid || drag.aborted) {\n            this.doAbort(drag);\n        }\n    }\n}\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\n\n/**\n * @module TaskBoard/feature/ColumnHeaderMenu\n */\n\n/**\n * Adds a menu button (`···`) to column headers, clicking it displays a menu. Items are populated by other features\n * and/or application code.\n *\n * {@inlineexample TaskBoard/feature/ColumnHeaderMenu.js}\n *\n * ## Default items\n *\n * These are the default items provided by TaskBoard features:\n *\n * | Reference         | Weight | Feature                              | Description                   |\n * |-------------------|--------|--------------------------------------|-------------------------------|\n * | `addTask `        | 100    | *This feature*                       | Add a new task to this column |\n * | `moveColumnLeft`  | 200    | {@link TaskBoard.feature.ColumnDrag} | Move column one step left     |\n * | `moveColumnRight` | 300    | {@link TaskBoard.feature.ColumnDrag} | Move column one step right    |\n *\n * Default items in the menu can be changed or removed and new items can be added. This is handled using the\n * {@link #config-items} config of the feature.\n *\n * ## Add items\n *\n * Add menu items for all column headers by adding a key (used as menu item {@link Core/widget/Widget#config-ref}) with\n * a {@link Core/widget/MenuItem#configs config object for a menu item} as the value to the {@link #config-items} config:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         columnHeaderMenu : {\n *             items : {\n *                 flagTasks : {\n *                     text : 'Flag task',\n *                     icon : 'b-fa-fw b-fa-flag',\n *                     onItem({ columnRecord }) {\n *                         columnRecord.tasks.forEach(taskRecord => taskRecord.flagged = true);\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/ColumnHeaderMenuAdd.js}\n *\n * ## Remove items\n *\n * To remove default items, configure them as `null` in the {@link #config-items} config:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         columnHeaderMenu : {\n *             items : {\n *                 moveColumnLeft  : null,\n *                 moveColumnRight : null\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/ColumnHeaderMenuRemove.js}\n *\n * ## Customize items\n *\n * To customize default items, supply a new config object for them in the {@link #config-items} config. It will merge\n * with the default config object:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         columnHeaderMenu : {\n *             items : {\n *                 // Change the text of the \"Add new task\" item\n *                 addTask : {\n *                     text : 'New card'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/ColumnHeaderMenuCustomize.js}\n *\n * ## Manipulating items at runtime\n *\n * Manipulate items for all columns or specific columns at runtime by supplying a {@link #config-processItems} function:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         columnHeaderMenu : {\n *             // Process items before menu is shown\n *             processItems({ columnRecord, items }) {\n *                  // Push an extra item for the done column\n *                  if (columnRecord.id === 'done') {\n *                      items.archive = {\n *                          text : 'Archive',\n *                          icon : 'b-fa-fw b-fa-archive',\n *                          onItem({ columnRecord }) {\n *                              columnRecord.tasks.forEach(taskRecord => taskRecord.archived = true);\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show \"Add new task\" for the todo column\n *                  if (columnRecord.id === 'todo') {\n *                      items.addTask = null;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/ColumnHeaderMenuProcessItems.js}\n *\n * This feature is **enabled** by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys           | Action                 | Action description                                     |\n * |----------------|------------------------|--------------------------------------------------------|\n * | `Space`        | *showContextMenuByKey* | Shows context menu for currently focused column header |\n * | `Ctrl`+`Space` | *showContextMenuByKey* | Shows context menu for currently focused column header |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#TaskBoard/guides/customization/keymap.md).\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype columnHeaderMenu\n * @feature\n */\nexport default class ColumnHeaderMenu extends ContextMenuBase {\n\n    static $name = 'ColumnHeaderMenu';\n\n    static type = 'columnHeaderMenu';\n\n    static configurable = {\n        /**\n         * A function called before displaying the menu that allows manipulations of its items.\n         * Returning `false` from this function prevents the menu from being shown.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *   features         : {\n         *       columnHeaderMenu : {\n         *           processItems({ columnRecord, items }) {\n         *              // Push an extra item for the todo column\n         *              if (columnRecord.id === 'todo') {\n         *                  items.finishAll = {\n         *                      text : 'Finish all',\n         *                      icon : 'b-fa-fw b-fa-check'\n         *                      onItem({ columnRecord }) {\n         *                          columnRecord.tasks.forEach(taskRecord => taskRecord.status = 'done');\n         *                      }\n         *                  };\n         *               }\n         *           }\n         *       }\n         *   }\n         * });\n         * ```\n         *\n         * @param {Object} context An object with information about the menu being shown\n         * @param {TaskBoard.model.ColumnModel} context.columnRecord The column for which the menu will be shown\n         * @param {Object<String,MenuItemConfig>} context.items An object containing the {@link Core.widget.MenuItem menu item} configs keyed\n         * by their id\n         * @param {Event} context.event The DOM event object that triggered the show\n         * @config {Function}\n         * @preventable\n         */\n        processItems : null,\n\n        /**\n         * This is a preconfigured set of items used to create the default context menu.\n         *\n         * The `items` provided by this feature are listed in the intro section of this class. You can configure\n         * existing items by passing a configuration object to the keyed items.\n         *\n         * To remove existing items, set corresponding keys `null`:\n         *\n         * ```javascript\n         * const scheduler = new Scheduler({\n         *     features : {\n         *         columnHeaderMenu : {\n         *             items : {\n         *                 addTask : null\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * See the class description for more examples.\n         *\n         * @config {Object<string,MenuItemConfig|Boolean|null>} items\n         */\n        items : null,\n\n        menu : {\n            anchor : true\n        },\n\n        type : 'columnHeader',\n\n        triggerEvent : false\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>>} keyMap\n         */\n\n        /**\n         * @hideconfigs type, triggerEvent\n         */\n    };\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push(...['populateColumnHeaderMenu', 'populateColumnHeader', 'onColumnHeaderClick']);\n\n        return config;\n    }\n\n    //region Events\n\n    /**\n     * This event fires on the owning TaskBoard before the menu is shown for a column header.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event columnHeaderMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<string,MenuItemConfig>} items Menu item configs\n     * @param {TaskBoard.model.ColumnModel} columnRecord The column\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard after the context menu is shown for a column header.\n     * @event cellMenuShow\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<string,MenuItemConfig>} items Menu item configs\n     * @param {TaskBoard.model.ColumnModel} columnRecord The column\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard when an item is selected in the column header menu.\n     * @event cellMenuItem\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {TaskBoard.model.ColumnModel} columnRecord The column\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard when a check item is toggled in the column header menu.\n     * @event cellMenuToggleItem\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {TaskBoard.model.ColumnModel} columnRecord The column\n     * @param {Boolean} checked Checked or not\n     * @on-owner\n     */\n\n    //endregion\n\n    //region Type assertions\n\n    changeItems(items) {\n        ObjectHelper.assertObject(items, 'features.columnHeaderMenu.items');\n\n        return items;\n    }\n\n    changeProcessItems(fn) {\n        ObjectHelper.assertFunction(fn, 'features.columnHeaderMenu.processItems');\n\n        return fn;\n    }\n\n    //endregion\n\n    // Inject a \"button\" into column headers\n    populateColumnHeader({ columnHeaderConfig }) {\n        if (!this.disabled) {\n            columnHeaderConfig.children.padder.children.menu = {\n                tag   : 'button',\n                class : {\n                    'b-column-header-button'                : 1,\n                    'b-taskboard-column-header-menu-button' : 1,\n                    'b-fw-icon'                             : 1,\n                    'b-icon-menu-horizontal'                : 1\n                }\n            };\n        }\n    }\n\n    // Populate menu events with taskboard specifics\n    getDataFromEvent(event) {\n        return ObjectHelper.assign(super.getDataFromEvent(event), event.taskBoardData);\n    }\n\n    // Add default menu items\n    populateColumnHeaderMenu({ items, columnRecord }) {\n        const { client } = this;\n\n        if (!client.readOnly) {\n            items.addTask = {\n                text   : 'L{TaskBoard.addTask}',\n                icon   : 'b-fw-icon b-icon-add',\n                weight : 100,\n                onItem() {\n                    client.addTask(columnRecord);\n                }\n            };\n        }\n    }\n\n    // Detect \"button\" click\n    onColumnHeaderClick(args) {\n        const { event } = args;\n\n        if (event.target.matches('.b-column-header-button')) {\n            this.showContextMenu(event, { target : event.target, align : 't90-b90' });\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        !this.isConfiguring && this.client.recompose();\n    }\n\n    get showMenu() {\n        return true;\n    }\n}\n\n// Register this feature type with its Factory\nTaskBoardFeature.register(ColumnHeaderMenu.type, ColumnHeaderMenu);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport '../../Core/widget/Toolbar.js';\nimport '../../Core/widget/Menu.js';\nimport TaskBoardFeature from './TaskBoardFeature.js';\n\n/**\n * @module TaskBoard/feature/ColumnToolbars\n */\n\n/**\n * Adds toolbars to the top and/or bottom of each column. By default it adds a bottom toolbar containing a single button\n * for adding events to that column/swimlane:\n *\n * {@inlineexample TaskBoard/feature/ColumnToolbars.js}\n *\n * To add, remove or modify toolbar items for all columns, see {@link #config-topItems} and {@link #config-bottomItems}:\n *\n * {@inlineexample TaskBoard/feature/ColumnToolbarsAdd.js}\n *\n * To have per column/swimlane control over the items, see {@link #config-processItems}:\n *\n * {@inlineexample TaskBoard/feature/ColumnToolbarsProcess.js}\n *\n * In handlers for buttons etc, you can access which column/swimlane the action was taken in on the supplied `source`\n * param, using its `columnRecord` and `swimlaneRecord` properties:\n *\n * ```javascript\n * new TaskBoard({\n *    features : {\n *        columnToolbars : {\n *            topItems : {\n *                clearButton : {\n *                    icon    : 'b-fa-trash',\n *                    onClick({ source }) {\n *                        if (source.columnRecord) {\n *                            ...\n *                        }\n *                    }\n *                }\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype columnToolbars\n * @feature\n */\nexport default class ColumnToolbars extends TaskBoardFeature {\n\n    static $name = 'ColumnToolbars';\n\n    static type = 'columnToolbars';\n\n    static configurable = {\n        /**\n         * Items to add to the top toolbar, in object format.\n         *\n         *\n         * ```javascript\n         * new TaskBoard({\n         *    features : {\n         *        columnToolbars : {\n         *            topItems : {\n         *                clearButton : {\n         *                    icon    : 'b-fa-trash',\n         *                    onClick : ...\n         *                }\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {Object<String,ContainerItemConfig|Boolean|null>}\n         */\n        topItems : null,\n\n        /**\n         * Items to add to the bottom toolbar, in object format.\n         *\n         * To remove existing items, set corresponding keys to `null`.\n         *\n         * ```javascript\n         * new TaskBoard({\n         *    features : {\n         *        columnToolbars : {\n         *            bottomItems : {\n         *                clearButton : {\n         *                    icon    : 'b-fa-trash',\n         *                    onClick : ...\n         *                }\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {Object<String,ContainerItemConfig|Boolean|null>}\n         */\n        bottomItems : {\n            addTask : true\n        },\n\n        // Predefined items that can be used in topItems and/or bottomItems\n        // <remove-on-release>\n        // TODO: Document and make public?\n        // </remove-on-release>\n        namedItems : {\n            addTask : {\n                type              : 'button',\n                icon              : 'b-icon-add',\n                tooltip           : 'L{TaskBoard.addTask}',\n                ariaLabel         : 'L{TaskBoard.addTask}',\n                internalListeners : {\n                    click : 'onAddClick'\n                }\n            }\n        },\n\n        /**\n         * A function called before displaying the toolbar that allows manipulations of its items.\n         * Returning `false` from this function prevents the menu being shown.\n         *\n         * ```javascript\n         * features         : {\n         *    columnToolbars : {\n         *         processItems({ items, location, columnRecord, swimlaneRecord }) {\n         *             // Add or hide existing items here as needed\n         *             items.myAction = {\n         *                 text   : 'Cool action',\n         *                 icon   : 'b-fa-ban',\n         *                 onClick : () => console.log(`Clicked button for ${columnRecord.text}`)\n         *             };\n         *\n         *            if (columnRecord.id === 'done') {\n         *                items.addTask = false\n         *            }\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * @param {Object} context An object with information about the toolbar being shown\n         * @param {Object<String,ContainerItemConfig>} context.items An object containing the toolbar item configs keyed\n         * by ref\n         * @param {'top'|'bottom'} context.location Toolbar location, \"top\" or \"bottom\"\n         * @param {TaskBoard.model.ColumnModel} context.columnRecord Record representing toolbars column\n         * @param {TaskBoard.model.SwimlaneModel} context.swimlaneRecord Record representing toolbars swimlane\n         * @config {Function}\n         * @preventable\n         */\n        processItems : null\n    };\n\n    // Holds exising toolbars, keyed by location, column and swimlane\n    columnMap = new Map();\n\n    static pluginConfig = {\n        chain : ['populateColumn', 'onRemoveColumnElement', 'onRemoveSwimlaneElement']\n    };\n\n    doDestroy() {\n        for (const [, toolbar] of this.columnMap) {\n            toolbar.destroy();\n        }\n\n        super.doDestroy();\n    }\n\n    //region Type assertions\n\n    changeTopItems(items) {\n        ObjectHelper.assertObject(items, 'features.columnToolbars.topItems');\n\n        return items;\n    }\n\n    changeBottomItems(items) {\n        ObjectHelper.assertObject(items, 'features.columnToolbars.bottomItems');\n\n        return items;\n    }\n\n    changeProcessItems(fn) {\n        ObjectHelper.assertFunction(fn, 'features.columnToolbars.processItems');\n\n        return fn;\n    }\n\n    //endregion\n\n    //region Toolbars\n\n    // removeToolbar(location) {\n    //     const columnMap = this.columnMap;\n    //\n    //     for (const [key, toolbar] of columnMap) {\n    //         if (key.startsWith(location)) {\n    //             toolbar.destroy();\n    //             columnMap.delete(toolbar);\n    //         }\n    //     }\n    // }\n    //\n    // changeTopItems(items, old) {\n    //     if (old && !items) {\n    //         this.removeToolbar('top');\n    //     }\n    //\n    //     return items;\n    // }\n    //\n    // changeBottomItems(items, old) {\n    //     if (old && !items) {\n    //         this.removeToolbar('items');\n    //     }\n    //\n    //     return items;\n    // }\n\n    // Creates or retrieves a toolbar instance for the requested column/swimlane intersection\n    getToolbar(location, columnRecord, swimlaneRecord) {\n        const\n            me                                = this,\n            { columnMap, client, namedItems } = me,\n            items                             = me[`${location}Items`],\n            key                               = `${location}_._${columnRecord.domId}_._${swimlaneRecord?.domId ?? 'default'}`;\n\n        let toolbar = columnMap.get(key);\n\n        if (!toolbar) {\n            const clonedItems = {};\n\n            // items allows configuring out using falsy value, only iterate the truthy ones\n            ObjectHelper.getTruthyKeys(items).map(ref => {\n                const\n                    // Could match a named item, to either be used as is or use reconfigured\n                    namedItem = namedItems[ref],\n                    // Item config or a truthy value to include a named item as is\n                    item      = items[ref];\n\n                clonedItems[ref] = ObjectHelper.merge(\n                    // Default listeners + decorate with records\n                    {\n                        internalListeners : {\n                            click   : 'onClick',\n                            change  : 'onChange',\n                            thisObj : me\n                        },\n\n                        columnRecord,\n                        swimlaneRecord\n                    },\n                    // Merge with any matched named item\n                    namedItem,\n                    // And any supplied config\n                    item\n                );\n            });\n\n            // Allow client code to alter items before adding them to the toolbar\n            if (me.processItems?.({ items : clonedItems, location, columnRecord, swimlaneRecord }) === false) {\n                return null;\n            }\n\n            // Create toolbar using the processed items\n            toolbar = client.add({\n                type                      : 'toolbar',\n                cls                       : `b-taskboard-column-${location[0]}bar`,\n                overflow                  : null,\n                monitorResize             : false,\n                contentElMutationObserver : false,\n                items                     : clonedItems,\n                dataset                   : {\n                    role          : `${location}-toolbar`,\n                    domTransition : true\n                }\n            });\n\n            columnMap.set(key, toolbar);\n        }\n\n        return toolbar.element;\n    }\n\n    populateColumn({ columnConfig, columnRecord, swimlaneRecord }) {\n        const me = this;\n\n        if (!me.disabled) {\n            // Add top toolbar, if it has items\n            if (ObjectHelper.getTruthyKeys(me.topItems).length) {\n                DomHelper.merge(columnConfig, {\n                    children : {\n                        'tbar > body' : me.getToolbar('top', columnRecord, swimlaneRecord)\n                    }\n                });\n            }\n\n            // Add bottom toolbar, if it has items\n            if (ObjectHelper.getTruthyKeys(me.bottomItems).length) {\n                columnConfig.children.bbar = me.getToolbar('bottom', columnRecord, swimlaneRecord);\n            }\n        }\n    }\n\n    removeColumnToolbar(location, columnId, swimlaneId) {\n        const\n            { columnMap, client } = this,\n            key                   = `${location}_._${columnId}_._${swimlaneId}`,\n            toolbar               = columnMap.get(key);\n\n        if (toolbar) {\n            client.remove(toolbar);\n\n            // Toolbar gets removed during a compose, which leads to a race condition with syncOverflowVisibility.\n            // Postpone destroy til after compose to avoid this\n            client.setTimeout(() => toolbar.destroy(), 0);\n\n            columnMap.delete(key);\n        }\n    }\n\n    removeColumnToolbars(columnId, swimlaneId) {\n        this.removeColumnToolbar('top', columnId, swimlaneId);\n        this.removeColumnToolbar('bottom', columnId, swimlaneId);\n    }\n\n    onRemoveColumnElement({ columnId, swimlaneRecord }) {\n        this.removeColumnToolbars(columnId, swimlaneRecord.id ?? 'default');\n    }\n\n    onRemoveSwimlaneElement({ swimlaneId }) {\n        for (const column of this.client.columns) {\n            this.removeColumnToolbars(column.id, swimlaneId);\n        }\n    }\n\n    //endregion\n\n    //region Predefined items events\n\n    onAddClick({ source }) {\n        this.client.addTask(source.columnRecord, source.swimlaneRecord);\n    }\n\n    //endregion\n\n    //region Generic events\n\n    onChange({ source }) {\n        this.trigger('itemChange', {\n            item           : source,\n            columnRecord   : source.columnRecord,\n            swimlaneRecord : source.swimlaneRecord\n        });\n    }\n\n    onClick({ source }) {\n        this.trigger('itemClick', {\n            item           : source,\n            columnRecord   : source.columnRecord,\n            swimlaneRecord : source.swimlaneRecord\n        });\n    }\n\n    //endregion\n}\n\nColumnToolbars.initClass();\n","import Base from '../../../Core/Base.js';\nimport Factoryable from '../../../Core/mixin/Factoryable.js';\n\n/**\n * @module TaskBoard/view/item/TaskItem\n */\n\n/**\n * Config options for all TaskItems combined. See respective item classes for more information.\n * @typedef {Object} TaskItemOptions\n * @property {String} type Type of the item\n * @property {String} [field] Field to display in the item. Usually inferred from the key when supplying items\n * @property {String|Object} [style] Style definition in string or object form\n * @property {String} [cls] CSS class to add\n * @property {Number} [order] Flex order, can be used to re-order task items\n * @property {Boolean} [hidden] Specify `true` to hide the task item\n * @property {String|Object} [editor] Widget type or config to use as the editor for this item. Used in the inline task\n * editor. Set to `null` to not use an editor for this item\n * @property {String} [baseUrl] For `type : 'image'` - Url prepended to this items value\n * @property {Function} [template] For `type : 'template'` - Template function used to generate task content\n * @property {Number} [max] For `type : 'progress'` and `type : 'rating'` - Max value\n * @property {String} [textField] For `type : 'todoList'` - Name of a property on a todo item to display as its text\n * @property {String} [checkedField] For `type : 'todoList'` - Name of a property on a todo item to use for the checkbox\n * @property {String} [clsField] For `type : 'todoList'` - Name of a property on a todo item whose value will be added\n * as a CSS class to the todo item\n * @property {Number} [maxAvatars] For `type : 'resourceAvatars'` - Maximum avatars to display by default.\n * @property {Boolean} [overlap] For `type : 'resourceAvatars'` - Specify `true` to slightly overlap avatars for tasks\n * @property {String} [textProperty] For `type : 'tags'` - Property used to display the tag text\n * @property {String} [clsProperty] For `type : 'tags'` - Property used to add a CSS class to each tag\n * @property {String} [separator] For `type : 'tags'` - Property used to split a value string into tags\n */\n\n/**\n * Abstract base class for task items, lightweight \"widgets\" that can be added to tasks using the\n * {@link TaskBoard/view/TaskBoard#config-headerItems}, {@link TaskBoard/view/TaskBoard#config-bodyItems} and\n * {@link TaskBoard/view/TaskBoard#config-footerItems} configs.\n *\n * @abstract\n */\nexport default class TaskItem extends Base.mixin(Factoryable) {\n    static factoryable = {};\n\n    static configurable = {\n        /**\n         * Task field whose value item will act on (usually display it). Defaults to use the key in the items object.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    features : {\n         *        taskItems : {\n         *            items : {\n         *                // Will use \"prio\" as its field\n         *                prio  : { type : 'textitem' },\n         *                // Will use \"status\" as its field\n         *                state : { type : 'textitem', field : 'status' }\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {String} field\n         * @category Common\n         */\n\n        /**\n         * Style definition in string or object form.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    features : {\n         *        taskItems : {\n         *            items : {\n         *                prio  : { type : 'textitem', style : { color : 'red' } }\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {String|Object} style\n         * @category Common\n         */\n\n        /**\n         * Specify `true` to hide the task item.\n         *\n         * @config {Boolean} hidden\n         * @category Common\n         */\n\n        /**\n         * Flex order, can be used to re-order task items.\n         *\n         * @config {Number} order\n         * @default 1\n         * @category Common\n         */\n\n        /**\n         * CSS class to add.\n         *\n         * @config {String} cls\n         * @category Common\n         */\n\n        /**\n         * Widget type or config to use as the editor for this item. Used in the inline task editor.\n         * Set to `null` to not use an editor for this item.\n         *\n         * @config {String|Object} editor\n         * @default text\n         * @category Common\n         */\n    };\n\n    static defaultEditor = { type : 'text' };\n\n    static getEditorConfig({ config, item }) {\n        const editor = config.editor !== null && (config.editor || item.defaultEditor);\n\n        if (typeof editor === 'string') {\n            return {\n                type : editor\n            };\n        }\n\n        return editor;\n    }\n}\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport TaskItem from '../view/item/TaskItem.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\n\n/**\n * @module TaskBoard/feature/SimpleTaskEdit\n */\n\n/**\n * This feature allows inline editing of tasks. Double clicking an item starts editing it:\n *\n * {@inlineexample TaskBoard/feature/SimpleTaskEdit.js}\n *\n * Each {@link TaskBoard.view.item.TaskItem task item} can define an\n * {@link TaskBoard.view.item.TaskItem#config-editor}. To prevent an item from being edited inline, configure it with\n * `editor : null`:\n *\n * {@inlineexample TaskBoard/feature/SimpleTaskEditCustom.js}\n *\n * This feature is **disabled** by default.\n *\n * {@region Keyboard shortcuts}\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys            | Action         | Action description                                                                   |\n * |-----------------|----------------|--------------------------------------------------------------------------------------|\n * | `Enter`         | *editNext*     | In an editor this will accept the change and start editing the next item on that card or the first item on the next card. By default it adds a new task when pressed on the last item of the last card in a column. This behaviour is configurable using the {@link #config-addNewAtEnd} config. |\n * | `Escape`        | *cancel*       | Cancels editing and reverts changes for that item which is currently being edited    |\n * | `Shift`+`Enter` | *editPrevious* | In an editor this will accept the change and start editing the previous item on that card or the last item on the previous card |\n * | `Ctrl`+`Enter`  | *complete*     | Accepts the edit and closes the editor                                               |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#TaskBoard/guides/customization/keymap.md).\n * {@endregion}\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype simpleTaskEdit\n * @feature\n */\nexport default class SimpleTaskEdit extends TaskBoardFeature {\n\n    static $name = 'SimpleTaskEdit';\n\n    static type = 'simpleTaskEdit';\n\n    static configurable = {\n        /**\n         * Pressing `Enter` in last item on last task in a column adds a new task.\n         * @config {Boolean}\n         * @default\n         */\n        addNewAtEnd : true,\n\n        /**\n         * A configuration object for the {@link Core.widget.Editor} used by this feature. Useful when you want to\n         * validate the value being set by the end user (see {@link Core.widget.Editor#event-beforeComplete}).\n         *\n         * @config {EditorConfig}\n         */\n        editorConfig : {},\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            Enter         : 'editNext',\n            Escape        : 'cancel',\n            'Ctrl+Enter'  : 'complete',\n            'Shift+Enter' : 'editPrevious'\n        }\n    };\n\n    static pluginConfig = {\n        assign : ['editTask'],\n        before : ['onActivateTask']\n    };\n\n    //region Type assertions\n\n    changeAddNewAtEnd(addNewAtEnd) {\n        ObjectHelper.assertBoolean(addNewAtEnd, 'features.simpleTaskEdit.addNewAtEnd');\n\n        return addNewAtEnd;\n    }\n\n    //endregion\n\n    /**\n     * Starts inline editing of the supplied task, optionally for a specific item on its card.\n     * @on-owner\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record to edit\n     * @param {HTMLElement} [element] Card element or card item element to edit. Resolves element from the passed record\n     * if left out.\n     * @returns {Boolean} Returns `true` if editing started, `false` if it did not.\n     */\n    editTask(taskRecord, element) {\n        const\n            me        = this,\n            taskBoard = me.client;\n\n        // Get element from record if none supplied\n        if (!element) {\n            element = taskBoard.getTaskElement(taskRecord);\n        }\n\n        const\n            // Get a task item from the element, will yield first task item when given the card element\n            taskItem         = taskBoard.resolveTaskItem(element),\n            itemElement      = taskItem.element,\n            itemEditorConfig = TaskItem.getEditorConfig(taskItem);\n\n        // Allow disabling editing for an item using `editor : null`\n        if (!itemEditorConfig) {\n            return false;\n        }\n\n        /**\n         * Fires on the owning TaskBoard before displaying an inline editor. Returning `false` stops the editor from\n         * being shown.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    listeners : {\n         *        beforeSimpleTaskEdit({ taskRecord }) {\n         *            // Some condition for which editing should be blocked...\n         *            if (taskRecord.disallowed) {\n         *                return false;\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @event beforeSimpleTaskEdit\n         * @preventable\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source The task board\n         * @param {TaskBoard.feature.SimpleTaskEdit} simpleTaskEdit The simpleTaskEdit feature\n         * @param {TaskBoard.model.TaskModel} taskRecord The record about to be shown in the editor\n         * @param {String} field Field name being edited\n         */\n        // Give clients a shot at preventing editing\n        if (\n            me.disabled || taskRecord.readOnly ||\n            taskBoard.trigger('beforeSimpleTaskEdit', { simpleTaskEdit : me, taskRecord, field : taskItem.config.field }) === false\n        ) {\n            return true;\n        }\n\n        // Focus the card to ensure focus reverts to it when editor closes\n        element.focus();\n\n        const editor = me.editor = Editor.new({\n            owner        : taskBoard,\n            appendTo     : itemElement.parentNode,\n            scrollAction : 'realign',\n            cls          : 'b-simple-task-editor',\n            completeKey  : null,\n            cancelKey    : null,\n            inputField   : {\n                autoSelect : true,\n                name       : taskItem.config.field,\n                ...itemEditorConfig\n            },\n            align : {\n                align          : 'c-c',\n                allowTargetOut : false\n            },\n            internalListeners : {\n                complete   : 'onEditorComplete',\n                cancel     : 'onEditorCancel',\n                finishEdit : 'onEditorFinishEdit',\n                thisObj    : me\n            }\n        }, me.editorConfig);\n\n        // Store active element, to be able to navigate to next/prev later if requested\n        me.currentElement = itemElement;\n\n        // Add editing cls, will be cleared by recompose\n        itemElement.classList.add('b-editing');\n\n        // Match editor color to item color\n        const color = DomHelper.getStyleValue(itemElement, 'color');\n        editor.element.style.color = color;\n        editor.inputField.element.style.color = color;\n\n        // Don't want a recompose removing editor element\n        editor.element.retainElement = true;\n\n        // Scrolling card into view\n        taskBoard.getTaskElement(taskRecord).scrollIntoView({\n            block : 'nearest'\n        });\n\n        // And then item being edited. Two steps since first one won't do anything if card is already in view while item\n        // is not\n        itemElement.scrollIntoView({\n            block : 'nearest'\n        });\n\n        editor.startEdit({\n            target : taskItem.element,\n            record : taskRecord,\n            field  : taskItem.config.field\n        });\n\n        return true;\n    }\n\n    // Edit previous task item\n    async editPrevious(event) {\n        const\n            me                 = this,\n            { client, editor } = me,\n            taskRecord         = editor.record,\n            cardElement        = client.getTaskElement(taskRecord),\n            itemElements       = Array.from(cardElement.querySelectorAll('.b-taskboard-taskitem.b-editable')),\n            index              = itemElements.indexOf(me.currentElement) - 1;\n\n        if (await me.complete(event)) {\n            // More items on the card, edit prev item\n            if (index >= 0) {\n                me.editTask(taskRecord, itemElements[index]);\n            }\n            // No more items\n            else {\n                const prevTaskRecord = client.getPreviousTask(taskRecord, false);\n                // Edit last item of prev card\n                if (prevTaskRecord) {\n                    const\n                        prevCardElement  = client.getTaskElement(prevTaskRecord),\n                        prevItemElements = Array.from(prevCardElement.querySelectorAll('.b-taskboard-taskitem.b-editable'));\n\n                    me.editTask(prevTaskRecord, prevItemElements[prevItemElements.length - 1]);\n                }\n            }\n        }\n    }\n\n    // Edit next task item\n    async editNext(event) {\n        const\n            me                 = this,\n            { client, editor } = me,\n            taskRecord         = editor.record,\n            cardElement        = client.getTaskElement(taskRecord),\n            itemElements       = Array.from(cardElement.querySelectorAll('.b-taskboard-taskitem.b-editable')),\n            index              = itemElements.indexOf(me.currentElement) + 1;\n\n        if (await me.complete(event)) {\n            // More items on the card, edit next item\n            if (index < itemElements.length) {\n                me.editTask(taskRecord, itemElements[index]);\n            }\n            // No more items\n            else {\n                const nextTaskRecord = client.getNextTask(taskRecord, false);\n                // Edit next card\n                if (nextTaskRecord) {\n                    me.editTask(nextTaskRecord);\n                }\n                // Or add a new card\n                else if (me.addNewAtEnd) {\n                    client.addTask(client.getColumn(taskRecord), client.getSwimlane(taskRecord));\n                }\n            }\n        }\n    }\n\n    complete(event) {\n        return this.editor.completeEdit(null, event);\n    }\n\n    cancel(event) {\n        this.editor.cancelEdit(event);\n    }\n\n    // Start editing when activating task (enter/dblclick)\n    onActivateTask({ taskRecord, event }) {\n        if (this.editTask(taskRecord, event.target)) {\n            // Block other actions (TaskEdit)\n            event.preventDefault();\n        }\n    }\n\n    onEditorComplete({ source }) {\n        /**\n         * Fires on the owning TaskBoard when inline editing of a field has successfully finished.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    listeners : {\n         *        simpleTaskEditComplete({ taskRecord, field }) {\n         *            Toast.show(`Finished editing ${field} of ${taskRecord.name}`);\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @event simpleTaskEditComplete\n         * @preventable\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source The task board\n         * @param {TaskBoard.feature.SimpleTaskEdit} simpleTaskEdit The simpleTaskEdit feature\n         * @param {TaskBoard.model.TaskModel} taskRecord Record that was edited\n         * @param {String} field Field name being edited\n         */\n        this.client.trigger('simpleTaskEditComplete', { simpleTaskEdit : this, taskRecord : source.record, field : source.dataField  });\n    }\n\n    onEditorCancel({ source }) {\n        /**\n         * Fires on the owning TaskBoard when inline editing of a field is cancelled (by pressing ESC).\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    listeners : {\n         *        simpleTaskEditCancel({ taskRecord }) {\n         *            Toast.show(`Aborted editing of ${taskRecord.name}`);\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @event simpleTaskEditCancel\n         * @preventable\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source The task board\n         * @param {TaskBoard.feature.SimpleTaskEdit} simpleTaskEdit The simpleTaskEdit feature\n         * @param {TaskBoard.model.TaskModel} taskRecord Record that was edited\n         * @param {String} field Field name being edited\n         */\n        this.client.trigger('simpleTaskEditCancel', { simpleTaskEdit : this, taskRecord : source.record, field : source.dataField  });\n    }\n\n    onEditorFinishEdit() {\n        // Have to store editor before the timeout, might get replaced by new\n        const\n            me = this,\n            { editor } = me;\n\n        editor?.setTimeout(() => {\n            // Don't retain the element if we did not start editing something else\n            if (me.editor === editor) {\n                me.currentElement = null;\n                me.editor = null;\n            }\n\n            editor.destroy();\n        }, 0);\n    }\n\n    // All keyMap actions require that we are editing\n    isActionAvailable() {\n        return Boolean(this.editor);\n    }\n}\n\nSimpleTaskEdit.initClass();\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport Base from '../../Core/Base.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport Droppable from '../../Core/mixin/Droppable.js';\n\n/**\n * @module TaskBoard/feature/SwimlaneDrag\n */\n\n/**\n * This feature allows users to drag drop swimlanes on the TaskBoard changing their order (by grabbing their header).\n *\n * {@inlineexample TaskBoard/feature/SwimlaneDrag.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype swimlaneDrag\n * @feature\n */\nexport default class SwimlaneDrag extends TaskBoardFeature {\n    static $name = 'SwimlaneDrag';\n\n    static type = 'swimlaneDrag';\n\n    static pluginConfig = {\n        after : ['initialCompose']\n    };\n\n    initialCompose() {\n        const me     = this;\n        // Cannot use configurable since bodyElement is not available yet when feature is pulled in\n        me.draggable = SwimlaneZone.new({\n            dragRootElement : me.disabled ? null : me.client.bodyWrapElement,\n            dropRootElement : me.client.bodyWrapElement,\n            owner           : me\n        }, me.draggable);\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this.draggable) {\n            this.draggable.dragRootElement = disable ? null : this.client.bodyWrapElement;\n        }\n    }\n}\n\nSwimlaneDrag.initClass();\n\nclass SwimlaneZone extends Base.mixin(Draggable, Droppable) {\n    static get configurable() {\n        return {\n            dragSelector     : '.b-taskboard-swimlane-header, .b-taskboard-swimlane-header *',\n            dragItemSelector : '.b-taskboard-swimlane-header',\n\n            draggingItemCls : null,\n\n            dragProxy : {\n                type : 'default',\n\n                async open(drag) {\n                    const\n                        { owner }       = this,\n                        {\n                            itemElement,\n                            startEvent\n                        }               = drag,\n                        taskBoard       = owner.owner.client,\n                        swimlaneRecord  = taskBoard.resolveSwimlaneRecord(itemElement),\n                        swimlaneElement = taskBoard.getSwimlaneElement(swimlaneRecord),\n                        padding         = DomHelper.getStyleValue(\n                            swimlaneElement.syncIdMap.body,\n                            ['padding-left', 'padding-right']\n                        ),\n                        bounds          = Rectangle.from(swimlaneElement, owner.dragRootElement).deflate(\n                            0,\n                            parseFloat(padding['padding-right']),\n                            0,\n                            parseFloat(padding['padding-left'])\n                        ),\n                        // Offset from cursor\n                        proxyOffset     = EventHelper.getClientPoint(startEvent).getDelta(bounds),\n                        // Drag proxy, positioned over column being dragged\n                        proxy           = DomHelper.createElement({\n                            className : 'b-taskboard-swimlane-drag-proxy',\n                            parent    : owner.dragRootElement,\n                            style     : {\n                                // Using fixed top, only draggable horizontally\n                                top   : EventHelper.getClientPoint(startEvent).translate(0, proxyOffset[1]).y,\n                                // Offset from cursor to be positioned over original column\n                                left  : bounds.x,\n                                // Need a fixed height on the proxy, since columns width might be flexed etc\n                                width : bounds.width\n                            },\n                            // Don't want it being removed while dragging\n                            retainElement : true\n                        });\n\n                    // Things we want to access later on drag\n                    Object.assign(drag, {\n                        proxy,\n                        swimlaneRecord,\n                        swimlaneElement,\n                        proxyOffset,\n                        // Used to size dropIndicator\n                        bounds\n                    });\n\n                    // Clone all dragged column elements and put them in the proxy\n                    const swimlaneClone = swimlaneElement.cloneNode(true);\n\n                    proxy.appendChild(swimlaneClone);\n                },\n\n                dragMove({ proxy, event, proxyOffset }) {\n                    // Move along y-axis only\n                    const position = EventHelper.getClientPoint(event).translate(0, proxyOffset[1]);\n\n                    proxy.style.top = `${position.y}px`;\n                }\n            }\n        };\n    }\n\n    setupDragContext(event) {\n        const\n            result = super.setupDragContext(event),\n            { client } = this.owner;\n\n        result.scrollManager = client.scrollManager;\n        result.monitoringConfig = {\n            scrollables : [{\n                element   : client.bodyElement,\n                direction : 'vertical'\n            }]\n        };\n\n        return result;\n    }\n\n    dragStart(drag) {\n        // Trigger something...\n    }\n\n    dragEnter(drag) {\n        // Only accept swimlanes\n        if (!drag.itemElement.matches(this.dragItemSelector)) {\n            return false;\n        }\n\n        // Create drop indicators on first enter\n        if (!drag.dropIndicator) {\n            const { bounds } = drag;\n\n            // Need one indicator for each part of the column\n            drag.dropIndicator = DomHelper.createElement({\n                className   : 'b-taskboard-swimlane-drop-indicator',\n                elementData : {\n                    dropIndicator : true\n                },\n                // Use same size as dragged column had originally\n                style : {\n                    width  : bounds.width,\n                    height : bounds.height\n                }\n            });\n\n            this.insertDropIndicator(drag.dropIndicator, drag.swimlaneRecord);\n\n            drag.swimlaneElement.classList.add('b-drag-original');\n        }\n    }\n\n    insertDropIndicator(dropIndicator, beforeSwimlaneRecord) {\n        const { client } = this.owner;\n\n        client.bodyElement.insertBefore(\n            dropIndicator,\n            beforeSwimlaneRecord && client.getSwimlaneElement(beforeSwimlaneRecord)\n        );\n    }\n\n    async dragMove(drag) {\n        const\n            { client }       = this.owner,\n            { documentRoot } = client,\n            taskBoardBounds  = Rectangle.from(client.element, undefined, true),\n            proxyBounds      = Rectangle.from(drag.proxy, undefined, true),\n            // Check element under proxy left center, should get a swimlane (or a gap)\n            overElement      = proxyBounds.center.y > taskBoardBounds.bottom\n                ? documentRoot.elementFromPoint(proxyBounds.x, proxyBounds.y)\n                : documentRoot.elementFromPoint(proxyBounds.x, proxyBounds.center.y),\n            swimlaneElement  = overElement?.closest('.b-taskboard-swimlane');\n\n        // If we are over the drop indicator or something not a column header, we do nothing\n        if (!overElement?.elementData?.dropIndicator && swimlaneElement) {\n            const targetBounds = Rectangle.from(swimlaneElement, undefined, true);\n\n            // Column that we are going to insert the dragged column before or after\n            let beforeSwimlane = client.resolveSwimlaneRecord(swimlaneElement);\n\n            // If beyond center, insert before next column\n            if (proxyBounds.center.y > targetBounds.center.y) {\n                beforeSwimlane = client.swimlanes.getNext(beforeSwimlane);\n            }\n\n            this.insertDropIndicator(drag.dropIndicator, beforeSwimlane);\n\n            drag.beforeSwimlane = beforeSwimlane;\n        }\n    }\n\n    async dragDrop(drag) {\n        // Data part\n        const\n            { client }    = this.owner,\n            { swimlanes } = client,\n            {\n                swimlaneRecord,\n                beforeSwimlane,\n                swimlaneElement,\n                dropIndicator,\n                proxy\n            }             = drag;\n\n        function commit() {\n            // Remove proxy & dropIndicator\n            proxy.remove();\n            dropIndicator.remove();\n\n            // Restore original element\n            swimlaneElement.classList.remove('b-drag-original');\n\n            // Update data\n            beforeSwimlane !== undefined && swimlanes.move(swimlaneRecord, beforeSwimlane);\n\n            client.trigger('dropSwimlane', { beforeSwimlane, drag });\n        }\n\n        // UI part\n\n        // We are dropping, this cls by default has a transition\n        proxy.classList.add('b-dropping');\n\n        // Move proxy to drop location, allowing it to transition there\n        DomHelper.alignTo(\n            proxy,\n            Rectangle.from(dropIndicator, undefined, true)\n        );\n\n        // Update record after the transition, to prevent too early redraw (which would ruin the transition)\n        if (DomHelper.getPropertyTransitionDuration(proxy, 'transform')) {\n            EventHelper.onTransitionEnd({\n                element  : proxy,\n                property : 'transform',\n                handler  : commit,\n                thisObj  : client\n            });\n        }\n        // Or right away if no transition is used\n        else {\n            commit();\n        }\n    }\n\n    dragLeave(drag) {\n        // Doing nothing feels ok for now\n    }\n}\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport Base from '../../Core/Base.js';\nimport AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport Droppable from '../../Core/mixin/Droppable.js';\nimport Events from '../../Core/mixin/Events.js';\n\n/**\n * @module TaskBoard/feature/TaskDrag\n */\n\nconst\n    cardSelector = '.b-taskboard-card, .b-taskboard-card-drop-indicator',\n    // Index of the specified card/drop indicator (other drop indicators excluded)\n    indexOf      = (element, ignoreOriginal = false) => DomHelper\n        .children(element.parentElement, `.b-taskboard-card${ignoreOriginal ? ':not(.b-drag-original)' : ''}, .b-first-drop-indicator`)\n        .indexOf(element),\n    // Check if any drop indicator has moved in a way that will lead to task changes\n    hasChanged   = dropIndicators => dropIndicators.some((dropIndicator, i) => {\n        return (\n            // Moved to another parent is a change (another column or another swimlane)\n            dropIndicator.parentElement !== dropIndicator.elementData.initialParent ||\n            // Or if first drop indicator has changed index (the others follow it, no need to check)\n            (i === 0 && indexOf(dropIndicator, true) !== dropIndicator.elementData.initialIndex)\n        );\n    });\n\n/**\n * This feature allows cards on the TaskBoard to be dragged across swimlanes and columns but also vertically in the\n * same column to change the order:\n *\n * {@inlineexample TaskBoard/feature/TaskDrag.js}\n *\n * When a task is dropped, its {@link TaskBoard.view.TaskBoard#config-columnField},\n * {@link TaskBoard.view.TaskBoard#config-swimlaneField} and/or {@link TaskBoard.model.TaskModel#field-weight} fields\n * are updated to reflect the new location.\n *\n * ## Drag events\n *\n * The different stages of a drag operation trigger different events, in order of appearance:\n *\n * | Event                         | Description                                                                    |\n * |-------------------------------|--------------------------------------------------------------------------------|\n * | {@link #event-beforeTaskDrag} | Preventable event fired before a drag starts                                   |\n * | {@link #event-taskDragStart}  | Fired when dragging starts                                                     |\n * | {@link #event-taskDrag}       | Fired when movement during a drag will lead to changes                         |\n * | {@link #event-beforeTaskDrop} | Preventable event fired before finalizing a valid drop. Allows async listeners |\n * | {@link #event-taskDrop}       | Fired after finalizing a valid drop                                            |\n * | {@link #event-taskDragAbort}  | Fired when a drag is aborted (ESC, drop out of bounds or by a listener)        |\n * | {@link #event-taskDragEnd}    | Fired when a started drag ends, no matter the outcome                          |\n *\n * The {@link #event-beforeTaskDrop} is useful for example to request user confirmation for a drop:\n *\n * {@inlineexample TaskBoard/feature/TaskDragEvents.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype taskDrag\n * @feature\n */\nexport default class TaskDrag extends TaskBoardFeature {\n    static $name = 'TaskDrag';\n\n    static type = 'taskDrag';\n\n    static pluginConfig = {\n        after : ['initialCompose']\n    };\n\n    static configurable = {\n        /**\n         * Specify `true` to enable the old behavior of moving tasks in the store on drop.\n         *\n         * This behaviour was made opt in since it does not play well when sharing data with other components.\n         *\n         * <div class=\"note\">\n         * If you are sorting tasks by a field other than `weight` and want predictable results on drop, you should\n         * enable this config.\n         * </div>\n         *\n         * @config {Boolean}\n         * @default\n         */\n        reorderTaskRecords : false\n    };\n\n    initialCompose() {\n        const me = this;\n\n        // Cannot use configurable since bodyElement is not available yet when feature is pulled in\n        me.draggable = TaskZone.new({\n            dragRootElement : me.disabled ? null : me.client.bodyWrapElement,\n            dropRootElement : me.client.bodyWrapElement,\n            owner           : me,\n\n            internalListeners : {\n                beforeDragStart : 'onBeforeDragStart',\n                dragStart       : 'onDragStart',\n                thisObj         : me\n            }\n        }, me.draggable);\n    }\n\n    doDestroy() {\n        super.doDestroy();\n\n        this.draggable?.destroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this.draggable) {\n            this.draggable.dragRootElement = disable ? null : this.client.bodyWrapElement;\n        }\n    }\n\n    onBeforeDragStart({ drag, event }) {\n        /**\n         * Fires on the owning TaskBoard before task dragging starts. Return `false` to prevent the action\n         * @event beforeTaskDrag\n         * @preventable\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.TaskModel[]} taskRecords Tasks to be dragged\n         * @param {Event} domEvent The mouse event\n         */\n        return this.client.trigger('beforeTaskDrag', { drag, event, domEvent : event, taskRecords : drag.taskRecords });\n    }\n\n    onDragStart({ drag, event }) {\n        /**\n         * Fires on the owning TaskBoard when task dragging starts\n         * @event taskDragStart\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.TaskModel[]} taskRecords Tasks to be dragged\n         * @param {Event} domEvent The mouse event\n         */\n        return this.client.trigger('taskDragStart', { drag, event, domEvent : event, taskRecords : drag.taskRecords });\n    }\n}\n\nTaskDrag.initClass();\n\nclass TaskZone extends Base.mixin(Draggable, Droppable, Events) {\n    static get configurable() {\n        return {\n            dragSelector       : '.b-taskboard-card:not(.b-readonly)',\n            dragItemSelector   : '.b-taskboard-card:not(.b-readonly)',\n            // Accept drops on anything within the TaskBoard\n            dropTargetSelector : '.b-taskboardbase',\n\n            // We are going to allow dragging multiple cards, will need to add cls manually to all of them\n            draggingItemCls : null,\n\n            dragProxy : {\n                type : 'default',\n\n                async open(drag) {\n                    const\n                        {\n                            itemElement,\n                            startEvent\n                        }          = drag,\n                        taskBoard  = this.owner.owner.client,\n                        columnEl   = itemElement.closest('.b-taskboard-column'),\n                        taskRecord = taskBoard.resolveTaskRecord(itemElement),\n                        proxy      = drag.proxy = DomHelper.createElement({\n                            // Add column classes too to get exact same styles applied\n                            className     : 'b-taskboard-drag-proxy ' + columnEl.className,\n                            role          : 'presentation',\n                            // Don't want it being removed while dragging\n                            retainElement : true\n                        }),\n                        cardClones = [];\n\n                    let taskRecords;\n\n                    // If we have selected tasks, drag them only if drag starts from one of the selected\n                    if (taskBoard.selectedTasks.includes(taskRecord)) {\n                        taskRecords = taskBoard.selectedTasks.filter(t => !t.readOnly).sort((a, b) => a.parentIndex - b.parentIndex);\n                    }\n                    // Otherwise (no selection or dragging an unselected) only drag one\n                    else {\n                        taskRecords = [taskRecord];\n                    }\n\n                    const taskElements = taskRecords.map(r => taskBoard.getTaskElement(r));\n\n                    Object.assign(drag, {\n                        taskElements,\n                        // Store heights, cannot measure later when original tasks are hidden\n                        taskHeights : new Map(),\n                        // Offset from cursor, ignoring page scroll = client coords\n                        proxyOffset : EventHelper\n                            .getClientPoint(startEvent)\n                            .getDelta(Rectangle.from(itemElement, null, true))\n                    });\n\n                    // Clone all dragged cards and put them in the proxy\n                    taskElements.forEach(taskElement => {\n                        const\n                            { elementData } = taskElement,\n                            cardClone       = taskElement.cloneNode(true),\n                            bounds          = Rectangle.from(taskElement, itemElement);\n\n                        // Cards get their width from the column, need to apply the width to the proxy card\n                        cardClone.style.width = bounds.width + 'px';\n                        cardClone.style.height = bounds.height + 'px';\n                        drag.taskHeights.set(taskElement, bounds.height);\n\n                        // Position cards in the proxy to overlap their originals\n                        cardClone.style.left = bounds.x + 'px';\n                        cardClone.style.top = bounds.y + 'px';\n\n                        cardClone.taskElement = taskElement;\n                        cardClone.taskRecord = elementData.taskRecord;\n                        cardClone.originalColor = elementData.swimlaneRecord?.color || elementData.columnRecord.color;\n\n                        proxy.appendChild(cardClone);\n                        cardClones.push(cardClone);\n                    });\n\n                    // Hide original card after measuring it above (cannot be done in the same loop, others will get\n                    // wrong bounds)\n                    taskElements.forEach(taskElement => taskElement.classList.add('b-drag-original'));\n\n                    await AsyncHelper.animationFrame();\n\n                    // Now reposition the cards to their desired position within the proxy, transitioning them there\n                    cardClones.forEach((cardClone, i) => {\n                        if (i > 0) {\n                            cardClone.style.top = (30 + i * 20) + 'px';\n                            cardClone.style.left = (40 + i * 5) + 'px';\n                        }\n                        else {\n                            cardClone.style.top = 0;\n                            cardClone.style.left = 0;\n                        }\n                    });\n                },\n\n                dragMove({ proxy, event, proxyOffset }) {\n                    const\n                        { dragRootElement } = this.owner,\n                        // Parent coords relative to screen (client)\n                        parentBounds        = dragRootElement.getBoundingClientRect(),\n                        // Place proxy in client coords\n                        position            = EventHelper.getClientPoint(event).translate(\n                            proxyOffset[0] - parentBounds.left + dragRootElement.scrollLeft,\n                            proxyOffset[1] - parentBounds.top + dragRootElement.scrollTop\n                        );\n\n                    proxy.style.top = position.y + 'px';\n                    proxy.style.left = position.x + 'px';\n\n                    // Experimental, tilt proxy based on drag amount and direction\n\n                    // let delta = 0;\n                    //\n                    // if (proxy.lastClientX != null) {\n                    //     delta = event.clientX - proxy.lastClientX;\n                    // }\n                    //\n                    // proxy.lastClientX = event.clientX;\n                    //\n                    // proxy.style.transform = `rotate(${-delta / 10}deg)`;\n                    // proxy.style.transformOrigin = `${-proxyOffset[0]}px ${-proxyOffset[1]}px`;\n                }\n            }\n        };\n    }\n\n    configureListeners(drag) {\n        const listeners = super.configureListeners(drag);\n\n        // Listen to the events on the root element\n        listeners.element = this.owner.client.rootElement;\n\n        return listeners;\n    }\n\n    setupDragContext(event) {\n        const\n            result     = super.setupDragContext(event),\n            { client } = this.owner;\n\n        result.scrollManager = client.scrollManager;\n        result.monitoringConfig = {\n            scrollables : [\n                {\n                    element   : '.b-taskboard-column-body',\n                    direction : 'vertical'\n                },\n                {\n                    element   : client.bodyElement,\n                    direction : 'both'\n                }\n            ]\n        };\n\n        return result;\n    }\n\n    // Populate the drag context early, to have something to take decisions on in beforeDragStart listeners\n    startDrag(drag) {\n        const\n            { itemElement } = drag,\n            taskBoard       = this.owner.client,\n            taskRecord      = taskBoard.resolveTaskRecord(itemElement);\n\n        // If we have selected tasks, drag them only if drag starts from one of the selected\n        if (taskBoard.isSelected(taskRecord)) {\n            drag.taskRecords = taskBoard.selectedTasks.slice().sort((a, b) => a.parentIndex - b.parentIndex);\n        }\n        // Otherwise (no selection or dragging an unselected) only drag one\n        else {\n            drag.taskRecords = [taskRecord];\n        }\n\n        drag.initiatedFrom = taskRecord;\n\n        return super.startDrag(drag);\n    }\n\n    dragStart(drag) {\n        const\n            { client }  = this.owner,\n            // Insert dropIndicators next to task that drag was initiated on initially\n            nextSibling = drag.itemElement;\n\n        // Flag to determine if `taskDragEnd` should be triggered on later abort\n        drag.wasStarted = true;\n\n        // Initially positioned after task drag is initiated from\n        drag.position = 'after';\n        drag.targetTaskRecord = drag.initiatedFrom;\n\n        for (const taskRecord of drag.taskRecords) {\n            taskRecord.instanceMeta(client).dragging = true;\n        }\n\n        // Adding proxy here and not when it is created saves one layout\n        client.bodyWrapElement.appendChild(drag.proxy);\n\n        // Populate drop indicator with placeholders\n        drag.dropIndicators = drag.taskElements.map((taskElement, i) => {\n            return DomHelper.createElement({\n                className : {\n                    'b-taskboard-card-drop-indicator' : 1,\n                    'b-first-drop-indicator'          : i === 0\n                },\n                style : {\n                    height : drag.taskHeights.get(taskElement)\n                },\n                elementData : {\n                    dropIndicator : true,\n                    // To be able to detect if it has actually moved on drop\n                    initialParent : taskElement.parentElement,\n                    initialIndex  : indexOf(taskElement),\n                    // Tag along the taskElement, to be able to return the drop indicator to its position for\n                    // invalid drop targets\n                    taskElement\n                },\n                retainElement : true,\n                nextSibling\n            });\n        });\n\n        client.element.classList.add('b-dragging-task');\n    }\n\n    dragEnter(drag) {\n        // Only accept tasks\n        if (!drag.itemElement.matches(this.dragItemSelector)) {\n            return false;\n        }\n    }\n\n    // Finds the first visible direct child in a parent element\n    getFirstVisibleChild(parentElement) {\n        for (const element of parentElement.children) {\n            if (element.offsetParent) {\n                return element;\n            }\n        }\n    }\n\n    // Convenience shortcut to not have to pass custom card selector on each call\n    getCardAt(x, y) {\n        return this.owner.client.getCardAt(x, y, cardSelector);\n    }\n\n    updateValidity(drag, valid) {\n        drag.proxy.classList.toggle('b-invalid', !valid);\n        drag.dropIndicators.forEach(dropIndicator => dropIndicator.classList.toggle('b-invalid', !valid));\n        drag.invalid = !valid;\n    }\n\n    dragMove(drag) {\n        const\n            me                                   = this,\n            { client }                           = me.owner,\n            { event : domEvent, dropIndicators } = drag,\n            { clientX, clientY }                 = domEvent,\n            overElement                          = client.documentRoot.elementFromPoint(clientX, clientY),\n            columnElement                        = DomSync.getChild(overElement?.closest('.b-taskboard-column'), 'body.inner');\n\n        if (drag.invalid) {\n            drag.valid = false;\n        }\n\n        if (!overElement) {\n            return;\n        }\n\n        // Over something in a column or the column itself\n        if (columnElement) {\n            const\n                targetSwimlane = client.resolveSwimlaneRecord(overElement),\n                targetColumn   = client.resolveColumnRecord(overElement),\n                tasksPerRow    = targetColumn.tasksPerRow || targetSwimlane?.tasksPerRow || client.tasksPerRow;\n\n            let\n                cardElement   = overElement.closest(cardSelector),\n                // Should only trigger drag event when move actually affected something\n                shouldTrigger = targetSwimlane !== drag.targetSwimlane || targetColumn !== drag.targetColumn;\n\n            // Only resolve swimlane/column when over a column, that way target sticks even if mouse is moved outside\n            drag.targetSwimlane = targetSwimlane;\n            drag.targetColumn = targetColumn;\n\n            // Might be over gap between cards, check if there is card above or below the gap\n            if (!cardElement) {\n                const\n                    { cardGap } = client,\n                    columnRect  = Rectangle.from(columnElement),\n                    topCard     = me.getFirstVisibleChild(columnElement),\n                    top         = topCard?.getBoundingClientRect().top ?? null;\n\n                if (tasksPerRow === 1) {\n                    // Above top card, use it\n                    if (top !== null && clientY < top) {\n                        cardElement = topCard;\n                    }\n                    else {\n                        const\n                            centerX   = columnRect.center.x,\n                            // Check column center, one gap up\n                            cardAbove = me.getCardAt(centerX, clientY - cardGap),\n                            // And one gap down\n                            cardBelow = me.getCardAt(centerX, clientY + cardGap);\n\n                        // Pick one of them\n                        cardElement = cardAbove || cardBelow;\n                    }\n                }\n                else {\n                    // Determine which \"inner column\" mouse is over\n                    const\n                        columnContentWidth = client.getColumnWidth(drag.targetColumn),\n                        // Can calculate padding, avoids reading it from DOM\n                        columnPadding      = (columnRect.width - columnContentWidth) / 2,\n                        // Width of an \"inner column\", ignoring gap between cards which does not matter in this case.\n                        // An approximate center fits our purpose\n                        innerColumnWidth   = columnContentWidth / tasksPerRow,\n                        // \"Inner column\" index\n                        index              = Math.floor((clientX - columnRect.left) / innerColumnWidth),\n                        // That columns center\n                        centerX            = columnRect.left + columnPadding + innerColumnWidth * (index + 0.5);\n\n                    // Above top row, use card below us\n                    if (top !== null && clientY < top) {\n                        cardElement = me.getCardAt(centerX, top);\n                    }\n                    else {\n                        const\n                            centerX    = columnRect.center.x,\n                            // Check column center, one gap left\n                            cardBefore = me.getCardAt(centerX - cardGap, clientY),\n                            // And one gap right\n                            cardAfter  = me.getCardAt(centerX + cardGap, clientY);\n\n                        // Pick one of them\n                        cardElement = cardBefore || cardAfter;\n                    }\n                }\n            }\n\n            // If we are over the drop indicator, we do nothing\n            if (!cardElement?.elementData.dropIndicator) {\n                let insertBefore = false;\n\n                // If we found a card, we should either go above or below it\n                if (cardElement) {\n                    const\n                        cardRect         = Rectangle.from(cardElement),\n                        targetTaskRecord = client.resolveTaskRecord(cardElement);\n\n                    // Insert before\n                    if (\n                        // If above center with single task per row\n                        (tasksPerRow === 1 && clientY < cardRect.center.y) ||\n                        // Or left of center in multiple tasks per row\n                        (tasksPerRow > 1 && clientX < cardRect.center.x)\n                    ) {\n                        if (drag.position !== 'before') {\n                            shouldTrigger = true;\n                        }\n\n                        insertBefore = cardElement;\n                        drag.position = 'before';\n                    }\n                    // Insert after\n                    else {\n                        if (drag.position !== 'after') {\n                            shouldTrigger = true;\n                        }\n\n                        insertBefore = cardElement.nextElementSibling;\n                        drag.position = 'after';\n                    }\n\n                    if (targetTaskRecord !== drag.targetTaskRecord) {\n                        shouldTrigger = true;\n                    }\n\n                    drag.targetTaskRecord = targetTaskRecord;\n                }\n                // No card, either empty column or below cards. Either way we append the card to the column\n                else {\n                    if (drag.position !== 'last') {\n                        shouldTrigger = true;\n                    }\n\n                    drag.position = 'last';\n                    drag.targetTaskRecord = null;\n                }\n\n                if (!insertBefore?.elementData?.dropIndicator) {\n                    if (insertBefore === false) {\n                        dropIndicators.forEach(dropIndicator => {\n                            columnElement?.appendChild(dropIndicator);\n                        });\n                    }\n                    else {\n                        dropIndicators.forEach(dropIndicator => {\n                            (insertBefore?.parentElement || columnElement).insertBefore(dropIndicator, insertBefore);\n                        });\n                    }\n\n                    drag.lastCardElement = cardElement;\n                }\n            }\n\n            // Update dragged cards dataset/color cls in case it is used for styling (as we do in demos)\n            for (const card of drag.proxy.children) {\n\n                if (!card.taskRecord.eventColor) {\n                    const color = drag.targetSwimlane?.color || drag.targetColumn.color;\n\n                    if (card.originalColor) {\n                        card.classList.remove(`b-taskboard-color-${card.originalColor}`);\n                    }\n\n                    if (color) {\n                        card.originalColor = color;\n                        if (DomHelper.isNamedColor(color)) {\n                            card.classList.add(`b-taskboard-color-${color}`);\n                        }\n                        else {\n                            card.style.color = color;\n                        }\n                    }\n                }\n\n                if (drag.targetSwimlane) {\n                    card.dataset.lane = drag.targetSwimlane.id;\n                }\n\n                card.dataset.column = drag.targetColumn.id;\n            }\n\n            if (shouldTrigger) {\n                const\n                    { taskRecords, targetTaskRecord, position } = drag,\n                    /**\n                     * Fires on the owning TaskBoard when tasks are dragged, if the drag leads to any changes compared to\n                     * the last taskDrag event (moved to a new column or changed order within a column).\n                     *\n                     * Returning `false` from a listener will flag the drag as invalid (by default turning the drop\n                     * indicator red)\n                     *\n                     * @event taskDrag\n                     * @on-owner\n                     * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                     * @param {TaskBoard.model.TaskModel[]} taskRecords Dragged tasks\n                     * @param {TaskBoard.model.ColumnModel} targetColumn Currently over this column\n                     * @param {TaskBoard.model.SwimlaneModel} targetSwimlane Currently over this swimlane (if used)\n                     * @param {Event} domEvent The mouse event\n                     */\n                    result                                      = client.trigger(\n                        'taskDrag',\n                        { drag, taskRecords, targetSwimlane, targetColumn, targetTaskRecord, position, event : domEvent, domEvent }\n                    );\n\n                me.updateValidity(drag, result !== false);\n            }\n        }\n    }\n\n    async dragDrop(drag) {\n        const\n            me         = this,\n            { client } = me.owner,\n            {\n                dropIndicators,\n                taskRecords,\n                targetSwimlane,\n                targetColumn,\n                targetTaskRecord,\n                event : domEvent\n            }          = drag,\n            event      = { drag, domEvent, event : domEvent, taskRecords, targetSwimlane, targetColumn, targetTaskRecord },\n            // Check that drop will lead to changes for at least one dragged task\n            changed    = hasChanged(dropIndicators);\n\n        /**\n         * Fires on the owning TaskBoard when tasks are dropped, before the operation completes. Handles async\n         * listeners, returning `false` from one will abort the operation\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    listeners : {\n         *        async beforeTaskDrop({ taskRecords, targetColumn }) {\n         *            // Show confirmation dialog\n         *            const result = await MessageDialog.confirm({\n         *                title   : 'Verify drop',\n         *                message : `Please confirm moving ${taskRecords.map(t => `\"${t.name}\"`).join(', ')} to ${targetColumn.text}?`\n         *            });\n         *\n         *            // Returning false will abort the drop (if user pressed Cancel)\n         *            return result === MessageDialog.okButton;\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @event beforeTaskDrop\n         * @preventable\n         * @async\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.TaskModel[]} taskRecords Dropped tasks\n         * @param {TaskBoard.model.ColumnModel} targetColumn Dropped on this column\n         * @param {TaskBoard.model.SwimlaneModel} targetSwimlane Dropped in this swimlane (if used)\n         * @param {Event} domEvent The mouse event\n         */\n        if (!changed || !targetColumn || drag.invalid || await client.trigger('beforeTaskDrop', event) === false) {\n            drag.valid = false;\n        }\n        else {\n            drag.finalizer = new Promise(resolve => {\n                // Data part\n                const\n                    {\n                        columnField,\n                        swimlaneField\n                    }               = client,\n                    { taskStore }   = client.project,\n                    {\n                        proxy\n                    }               = drag,\n                    columnRecords   = targetColumn.tasks,\n                    swimlaneRecords = targetSwimlane\n                        ? columnRecords?.filter(task => task[swimlaneField] === targetSwimlane.id)\n                        : columnRecords,\n                    invalid         = !columnRecords;\n\n                let moveBefore;\n\n                if (!invalid) {\n                    // Dropped relative to another card?\n                    if (drag.targetTaskRecord) {\n                        // If before it, move to before it in store too\n                        if (drag.position === 'before') {\n                            moveBefore = targetTaskRecord;\n                        }\n                        // If after, move to before the next record\n                        else if (drag.position === 'after') {\n                            const index = swimlaneRecords.indexOf(targetTaskRecord);\n                            moveBefore = swimlaneRecords[index + 1] ?? null;\n                        }\n                    }\n                    // Dropped below all cards or in empty column, move to last in store which guarantees it is last in that column\n                    else if (swimlaneRecords.length) {\n                        moveBefore = null;\n                    }\n                }\n\n                function commit() {\n                    // Remove proxy & dropIndicators\n                    proxy.remove();\n\n                    dropIndicators.forEach(dropIndicator => {\n                        const { taskElement } = dropIndicator.elementData;\n                        // Move original element to the new destination\n                        dropIndicator.parentElement.insertBefore(taskElement, dropIndicator);\n                        // Make it available for syncing\n                        dropIndicator.parentElement.syncIdMap[taskElement.elementData.taskId] = taskElement;\n                        // And unflag it\n                        taskElement.classList.remove('b-drag-original');\n\n                        dropIndicator.remove();\n                    });\n\n                    client.suspendDomTransition();\n\n                    // Update data\n                    if (!invalid) {\n                        let newWeight;\n\n                        // Determine new weight\n                        if (moveBefore) {\n                            const\n                                // Successors, that might need to have their weight updated\n                                tasksBelow = swimlaneRecords.slice(swimlaneRecords.indexOf(moveBefore)),\n                                // Predecessor, we want to squeeze in after it weight-wise\n                                taskAbove = swimlaneRecords[swimlaneRecords.indexOf(moveBefore) - 1];\n\n                            let weightDiff;\n\n                            // We have a predecessor, put us between the card we \"replace\" and it to update as few\n                            // weights as possible\n                            if (taskAbove) {\n                                // Between tasks, down to 1 sized gaps\n                                weightDiff = Math.max(1, Math.round((moveBefore.weight - taskAbove.weight) / 2));\n                                newWeight = taskAbove.weight + weightDiff;\n                            }\n                            // First in column, put us between old first task and 0 in weight\n                            else {\n                                newWeight = Math.max(1, Math.round(moveBefore.weight / 2));\n                            }\n\n                            // Update weight for successors that have colliding weights.\n                            // New weight will be between current and next, to try and avoid having to change\n                            // multiple weights while also leaving gaps for future drops\n                            while (tasksBelow[0]?.weight === newWeight) {\n                                // Place halfway between this and next task\n                                weightDiff = tasksBelow[1]\n                                    ? Math.max(1, Math.round((tasksBelow[1].weight - newWeight) / 2))\n                                    : 50;\n                                newWeight = tasksBelow[0].weight = newWeight + weightDiff;\n                                tasksBelow.shift();\n                            }\n                        }\n                        // Last, add 100 to current lasts weight\n                        else {\n                            newWeight = swimlaneRecords.length\n                                ? swimlaneRecords[swimlaneRecords.length - 1].weight + 100\n                                : 100;\n                        }\n\n                        taskRecords.forEach(taskRecord => {\n                            const toSet = {\n                                [columnField] : targetColumn.id,\n                                weight        : newWeight\n                            };\n\n                            if (targetSwimlane) {\n                                toSet[swimlaneField] = targetSwimlane.id;\n                            }\n\n                            // Optionally reorder the store\n                            if (client.features.taskDrag.reorderTaskRecords && moveBefore !== undefined) {\n                                taskStore.move(taskRecord, moveBefore);\n                            }\n\n                            taskRecord.set(toSet);\n                        });\n\n                        // Reapply sorters if we are not reordering tasks and not overriding sort in the store on drop\n                        if (!client.features.taskDrag.reorderTaskRecords && !client.taskSorterFn) {\n                            client.project.taskStore.sort();\n                        }\n                    }\n\n                    client.resumeDomTransition();\n\n                    /**\n                     * Fires on the owning TaskBoard when tasks are successfully dropped (after the drop transition has\n                     * finished)\n                     * @event taskDrop\n                     * @on-owner\n                     * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                     * @param {TaskBoard.model.TaskModel[]} taskRecords Dropped tasks\n                     * @param {TaskBoard.model.ColumnModel} targetColumn Dropped on this column\n                     * @param {TaskBoard.model.SwimlaneModel} targetSwimlane Dropped in this swimlane (if used)\n                     * @param {Event} domEvent The mouse event\n                     */\n                    client.trigger('taskDrop', { drag, event : domEvent, taskRecords, targetSwimlane, targetColumn, moveBefore, domEvent });\n\n                    /**\n                     * Fires on the owning TaskBoard when a previously started drag operation ends, no matter the\n                     * outcome of it (whether valid, invalid or aborted)\n                     *\n                     * @event taskDragEnd\n                     * @on-owner\n                     * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n                     * @param {TaskBoard.model.TaskModel[]} taskRecords Affected tasks\n                     * @param {Event} domEvent The mouse event\n                     */\n                    client.trigger('taskDragEnd', { drag, taskRecords, domEvent });\n\n                    // Reading element here flushes the recompose\n                    client.element.classList.remove('b-dragging-task');\n\n                    // Reset flag after recompose to avoid flicker when virtualizing (to not first render outline)\n                    for (const taskRecord of taskRecords) {\n                        taskRecord.instanceMeta(client).dragging = false;\n                    }\n\n                    resolve();\n                }\n\n                // UI part\n\n                const cardClones = Array.from(proxy.children);\n\n                // Ugly \"hack\" to force the transforms used in the proxy to go away\n                proxy.classList.add('b-pre-dropping');\n                cardClones[0].offsetWidth;\n\n                // We are dropping, this cls by default has a transition\n                proxy.classList.add('b-dropping');\n\n                // Move proxy cards to drop locations, allowing them to transition there\n                cardClones.forEach((cardClone, i) => {\n                    const dropClone = dropIndicators[i];\n\n                    DomHelper.alignTo(\n                        cardClone,\n                        // Ignore page scroll when trying to align element in float root to element in taskboard\n                        Rectangle.from(dropClone, undefined, true)\n                    );\n                });\n\n                // Update record after the transition, to prevent too early redraw (which would ruin the transition)\n                if (DomHelper.getPropertyTransitionDuration(cardClones[0], 'transform')) {\n                    EventHelper.onTransitionEnd({\n                        element  : cardClones[0],\n                        property : 'transform',\n                        handler  : commit,\n                        thisObj  : client // For timer cleanup\n                    });\n                }\n                // Or right away if no transition is used\n                else {\n                    commit();\n                }\n            });\n        }\n    }\n\n    dragLeave(drag) {\n        // Move drop indicator to dragged cards origin, to indicate what will happen on invalid drop\n        drag.dropIndicators.forEach(dropIndicator => {\n            const { taskElement } = dropIndicator.elementData;\n            taskElement.parentElement.insertBefore(dropIndicator, taskElement);\n        });\n    }\n\n    doAbort(drag) {\n        const\n            { client }                             = this.owner,\n            { dropIndicators, proxy, taskRecords } = drag;\n\n        if (proxy) {\n            const cardClones = Array.from(proxy.children);\n\n            function finalizeAbort() {\n                // Remove proxy & dropIndicators\n                proxy.remove();\n\n                dropIndicators.forEach(dropIndicator => {\n                    dropIndicator.elementData.taskElement.classList.remove('b-drag-original');\n                    dropIndicator.remove();\n                });\n\n                client.element.classList.remove('b-dragging-task');\n\n                // Rest flag late to avoid flicker when virtualizing (to not first render outline)\n                for (const taskRecord of taskRecords) {\n                    taskRecord.instanceMeta(client).dragging = false;\n                }\n\n                client.trigger('taskDragAbortFinalized');\n            }\n\n            // Emulate drop to enable transitions\n            proxy.classList.add('b-dropping');\n\n            // Move drop indicators to where each task originated\n            dropIndicators.forEach(dropIndicator => {\n                const { taskElement } = dropIndicator.elementData;\n\n                dropIndicator.classList.remove('b-invalid'); // Looks better this way when returning to origin\n\n                taskElement.parentElement.insertBefore(dropIndicator, taskElement);\n            });\n\n            // Move proxy cards to original locations, allowing them to transition there\n            cardClones.forEach((cardClone, i) => {\n                DomHelper.alignTo(\n                    cardClone,\n                    // Ignore page scroll when trying to align element in float root to element in taskboard\n                    Rectangle.from(dropIndicators[i], undefined, true)\n                );\n            });\n\n            // Finalize after transition\n            if (DomHelper.getPropertyTransitionDuration(cardClones[0], 'transform')) {\n                EventHelper.onTransitionEnd({\n                    element  : cardClones[0],\n                    property : 'transform',\n                    handler  : finalizeAbort,\n                    thisObj  : client // For timer cleanup\n                });\n            }\n            // Or right away if no transition is used\n            else {\n                finalizeAbort();\n            }\n        }\n\n        /**\n         * Fires on the owning TaskBoard when a drag operation is aborted (invalid drop or aborted using ESC)\n         *\n         * @event taskDragAbort\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source Owning TaskBoard\n         * @param {TaskBoard.model.TaskModel[]} taskRecords Dragged tasks\n         */\n        client.trigger('taskDragAbort', { drag, taskRecords });\n\n        if (drag.wasStarted) {\n            // Documented in dragDrop()\n            client.trigger('taskDragEnd', { drag, taskRecords });\n        }\n    }\n\n    dragEnd(drag) {\n        // Move all cards back to their original location when drag was aborted\n        if (!drag.valid || drag.aborted) {\n            this.doAbort(drag);\n        }\n    }\n}\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport TaskBoardFeature from './TaskBoardFeature.js';\n\n/**\n * @module TaskBoard/feature/TaskDragSelect\n */\n\n/**\n * Enables users to click and drag to select cards on the TaskBoard (marquee selection).\n *\n * {@inlineexample TaskBoard/feature/TaskDragSelect.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype taskDragSelect\n * @feature\n */\nexport default class TaskDragSelect extends TaskBoardFeature {\n\n    static $name =  'TaskDragSelect';\n\n    static type = 'taskDragSelect';\n\n    static configurable = {\n        /**\n         * The amount of pixels to move pointer/mouse before it counts as a drag select operation.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    features : {\n         *        taskDragSelect : {\n         *            dragThreshold : 10\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {Number}\n         * @default\n         */\n        dragThreshold : 5\n    };\n\n    state = 'idle';\n\n    static pluginConfig = {\n        chain : ['onColumnMouseDown', 'onMouseMove']\n    };\n\n    //region Type assertions\n\n    changeDragThreshold(threshold) {\n        ObjectHelper.assertNumber(threshold, 'features.taskDragSelect.dragThreshold');\n\n        return threshold;\n    }\n\n    //endregion\n\n    initializeDragSelect(event) {\n        const\n            me         = this,\n            { client } = me;\n\n        me.bounds = Rectangle.from(client.bodyElement, /* ignorePageScroll = */ true);\n\n        me.element = DomHelper.createElement({\n            tag       : 'div',\n            className : 'b-dragselect-rect'\n        }, { returnAll : true })[0];\n\n        client.floatRoot.appendChild(me.element);\n        client.element.classList.add('b-dragselecting');\n\n        // Since the dragselect element is in the floatRoot, we want to use viewport-based coordinates, so we pass\n        // ignorePageScroll=true when calling Rectangle.from():\n        me.cardRectangles = Array.from(client.element.querySelectorAll('.b-taskboard-card')).map(el => ({\n            rectangle : Rectangle.from(el, /* ignorePageScroll = */ true),\n            record    : client.resolveTaskRecord(el)\n        }));\n\n        if (!event.ctrlKey) {\n            client.deselectAll();\n        }\n\n        // No key processing during drag selection\n        client.navigateable = false;\n\n        me.state = 'selecting';\n    }\n\n    // Select cards intersected by the selection marquee\n    updateSelection() {\n        const { cardRectangles, rectangle, client } = this;\n\n        for (let i = 0, len = cardRectangles.length; i < len; i++) {\n            const\n                cardData     = cardRectangles[i],\n                shouldSelect = rectangle.intersect(cardData.rectangle, true);\n\n            if (shouldSelect && !cardData.selected) {\n                cardData.selected = true;\n\n                client.selectTask(cardData.record, true);\n            }\n            else if (!shouldSelect && cardData.selected) {\n                cardData.selected = false;\n\n                client.deselectTask(cardData.record);\n            }\n        }\n    }\n\n    //region Listeners\n\n    onColumnMouseDown({ event }) {\n        const me = this;\n\n        if (!me.disabled && event.button === 0) {\n            me.state = 'considering';\n            me.startX = event.clientX;\n            me.startY = event.clientY;\n\n            me.mouseUpDetacher = EventHelper.on({\n                element : document,\n                mouseup : 'onMouseUp',\n                thisObj : me\n            });\n        }\n    }\n\n    onMouseMove({ event }) {\n        const\n            me                   = this,\n            { startX, startY }   = me,\n            { clientX, clientY } = event;\n\n        if (me.state === 'considering') {\n            const\n                deltaX = Math.abs(clientX - startX),\n                deltaY = Math.abs(clientY - startY);\n\n            if (deltaX > me.dragThreshold || deltaY > me.dragThreshold) {\n                me.initializeDragSelect(event);\n            }\n        }\n\n        if (me.state === 'selecting') {\n            const\n                { element, bounds } = me,\n                x                   = Math.max(clientX, bounds.left),\n                y                   = Math.max(clientY, bounds.top),\n                left                = Math.min(startX, x),\n                top                 = Math.min(startY, y),\n                width               = Math.abs(startX - x),\n                height              = Math.abs(startY - y),\n                rect                = new Rectangle(left, top, width, height).constrainTo(bounds);\n\n            DomHelper.setTranslateXY(element, rect.left, rect.top);\n            element.style.width  = rect.width + 'px';\n            element.style.height = rect.height + 'px';\n\n            me.rectangle = rect;\n\n            me.updateSelection();\n        }\n    }\n\n    onMouseUp() {\n        const\n            me                = this,\n            { client, state } = me;\n\n        // Cards are selected during mouse move, no need to change selection here\n\n        if (state === 'selecting') {\n            me.element?.remove();\n            client.element.classList.remove('b-dragselecting');\n\n            // Navigator will react to the 'click' event which clears selection, bypass this with a short timeout\n            client.setTimeout(() => client.navigateable = true, 100);\n        }\n\n        if (state === 'selecting' || state === 'considering') {\n            me.state = 'idle';\n            me.startX = me.startY = me.rectangle = me.bounds = null;\n        }\n\n        me.mouseUpDetacher?.();\n    }\n\n    //endregion\n}\n\nTaskDragSelect.initClass();\n","import Base from '../../../Core/Base.js';\nimport Widget from '../../../Core/widget/Widget.js';\n\n/**\n * @module TaskBoard/widget/mixin/TaskBoardLinked\n */\n\n/**\n * Mixin that simplifies linking a widget to a {@link TaskBoard.view.TaskBoard}.\n *\n * @mixin\n */\nexport default Target => class TaskBoardLinked extends (Target || Base) {\n\n    static $name = 'TaskBoardLinked';\n\n    static configurable = {\n        /**\n         * Auto detected when used within a TaskBoard. If you add the widget elsewhere, it will try to find an instance\n         * of TaskBoard on page. If that fails you have to supply this config to connect it to a TaskBoard manually.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({});\n         *\n         * const picker = new ColumnPickerButton({\n         *    taskBoard // Link it to the taskBoard instance created above\n         * });\n         * ```\n         *\n         * @config {TaskBoard.view.TaskBoard}\n         * @category Common\n         */\n        taskBoard : null\n    };\n\n    get taskBoard() {\n        return this._taskBoard || this.up(widget => widget.isTaskBoardBase) || Widget.query(widget => widget.isTaskBoardBase);\n    }\n\n    changeTaskBoard(taskBoard) {\n        if (taskBoard && !taskBoard.isTaskBoard) {\n            throw new Error(`The taskBoard config only accepts an instance of TaskBoard or a subclass thereof`);\n        }\n\n        return taskBoard;\n    }\n};\n","import DomHelper from '../../../Core/helper/DomHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport Combo from '../../../Core/widget/Combo.js';\nimport TaskBoardLinked from '../mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/base/ColorBoxCombo\n */\n\n/**\n * Abstract base class with functionality shared between {@link TaskBoard.widget.ColumnCombo} and\n * {@link TaskBoard.widget.SwimlaneCombo}.\n *\n * @extends Core/widget/Combo\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @abstract\n */\nexport default class ColorBoxCombo extends Combo.mixin(TaskBoardLinked) {\n    static $name = 'ColorBoxCombo';\n\n    static type = 'colorboxcombo';\n\n    static configurable = {\n        displayField      : 'text',\n        valueField        : 'id',\n        editable          : false,\n        showBoxForNoColor : false,\n        listItemTpl({ text, color }) {\n            let html = StringHelper.encodeHtml(text);\n\n            if (color) {\n                if (DomHelper.isNamedColor(color)) {\n                    html = `<div class=\"b-colorbox b-taskboard-color-${color}\"></div>` + html;\n                }\n                else {\n                    html = `<div class=\"b-colorbox\" style=\"color : ${color}\"></div>` + html;\n                }\n            }\n\n            return html;\n        },\n        picker : {\n            cls : 'b-colorbox-picker'\n        }\n    };\n\n    afterConstruct() {\n        if (!this.showBoxForNoColor && !this.value) {\n            this.element.classList.add('b-colorless');\n        }\n    }\n\n    syncInputFieldValue(...args) {\n        const\n            me        = this,\n            { color } = me.record || {};\n\n        let className = 'b-colorbox';\n\n        if (color) {\n            if (DomHelper.isNamedColor(color)) {\n                className += ` b-taskboard-color-${color}`;\n            }\n            else {\n                me.colorBox.style.color = color;\n            }\n        }\n\n        me.colorBox.className = className;\n\n        if (!me.showBoxForNoColor) {\n            me.element.classList.toggle('b-colorless', !color);\n        }\n\n        super.syncInputFieldValue(...args);\n    }\n\n    get innerElements() {\n        return [\n            {\n                reference : 'colorBox',\n                className : 'b-colorbox'\n            },\n            ...super.innerElements\n        ];\n    }\n}\n","import ColorBoxCombo from './base/ColorBoxCombo.js';\n\n/**\n * @module TaskBoard/widget/ColumnCombo\n */\n\n/**\n * A combo populated with the {@link TaskBoard.view.TaskBoard#property-columns} of a {@link TaskBoard.view.TaskBoard}.\n * If a column has a {@link TaskBoard.model.ColumnModel#field-color} defined, that color will be displayed in the combo\n * and its picker.\n *\n * Used in {@link TaskBoard.widget.TaskEditor} to pick which column a task belongs to (\"Status\" below):\n *\n * {@inlineexample TaskBoard/widget/ColumnCombo.js}\n *\n * @classtype columncombo\n * @extends TaskBoard/widget/base/ColorBoxCombo\n * @inputfield\n */\nexport default class ColumnCombo extends ColorBoxCombo {\n    static $name = 'ColumnCombo';\n\n    static type = 'columncombo';\n\n    changeStore() {\n        return this.taskBoard.columns.chain();\n    }\n}\n\nColumnCombo.initClass();\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Combo from '../../Core/widget/Combo.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module TaskBoard/widget/ResourcesCombo\n */\n\n/**\n * A combo populated with the resources of a {@link TaskBoard.view.TaskBoard taskboard´s}\n * {@link Scheduler.data.ResourceStore resource store}.\n *\n * Used in {@link TaskBoard.widget.TaskEditor} to assign resources to a task. Double-click a task to try it:\n *\n * {@inlineexample TaskBoard/widget/ResourcesCombo.js}\n *\n * @classtype resourcescombo\n * @extends Core/widget/Combo\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @inputfield\n */\nexport default class ResourcesCombo extends Combo.mixin(TaskBoardLinked) {\n    static $name = 'ResourcesCombo';\n\n    static type = 'resourcescombo';\n\n    static configurable = {\n        displayField : 'name',\n        valueField   : 'id',\n        multiSelect  : true,\n        editable     : false,\n\n        listItemTpl(resourceRecord) {\n            const { avatarRendering, taskBoard } = this.owner;\n\n            // <remove-on-release>\n            // TODO: Discuss with nige, improve list, switch to grid or just implement html string here?\n            // </remove-on-release>\n            return DomHelper.createElement(avatarRendering.getResourceAvatar({\n                resourceRecord,\n                initials : resourceRecord.initials,\n                color    : resourceRecord.color,\n                iconCls  : resourceRecord.iconCls,\n                imageUrl : resourceRecord.image === false ? null : (resourceRecord.imageUrl || ((taskBoard.resourceImagePath || '') + (resourceRecord.image || '')))\n            })).outerHTML + StringHelper.encodeHtml(resourceRecord.name);\n        },\n\n        picker : {\n            cls : 'b-resources-picker'\n        },\n\n        chipView : {\n            scrollable : null,\n\n            itemTpl(resourceRecord) {\n                const { avatarRendering, taskBoard } = this.owner;\n\n                // <remove-on-release>\n                // TODO: Discuss with nige, improve list, switch to grid or just implement html string here?\n                // </remove-on-release>\n                return DomHelper.createElement(avatarRendering.getResourceAvatar({\n                    resourceRecord,\n                    initials : resourceRecord.initials,\n                    color    : resourceRecord.color,\n                    iconCls  : resourceRecord.iconCls,\n                    imageUrl : resourceRecord.image === false ? null : (resourceRecord.imageUrl || ((taskBoard.resourceImagePath || '') + (resourceRecord.image || ''))),\n                    dataset  : {\n                        btip : StringHelper.encodeHtml(resourceRecord.name)\n                    }\n                })).outerHTML;\n            }\n        },\n\n        avatarRendering : {\n            value   : true,\n            $config : 'nullify'\n        }\n    };\n\n    get innerElements() {\n        // See if we have an uningested truthy multiSelect configuration, or we have already set it.\n        if (this.peekConfig('multiSelect') || this._multiSelect) {\n            return super.innerElements;\n        }\n\n        // Add element that we can render an avatar into when not using a chipview\n        return [\n            { reference : 'avatarContainer' },\n            this.inputElement\n        ];\n    }\n\n    syncInputFieldValue(...args) {\n        const me = this;\n\n        // No chipview when not multi selecting, render single avatar\n        if (!me.multiSelect) {\n            const resourceRecord = me.record;\n\n            if (resourceRecord) {\n                DomSync.sync({\n                    targetElement : me.avatarContainer,\n                    domConfig     : {\n                        className : 'b-resourcescombo-avatar-container',\n                        children  : [\n                            me.avatarRendering.getResourceAvatar({\n                                resourceRecord,\n                                initials : resourceRecord.initials,\n                                color    : resourceRecord.color,\n                                iconCls  : resourceRecord.iconCls,\n                                imageUrl : resourceRecord.image === false ? null : (resourceRecord.imageUrl || ((me.taskBoard.resourceImagePath || '') + (resourceRecord.image || ''))),\n                                dataset  : {\n                                    btip : StringHelper.encodeHtml(resourceRecord.name)\n                                }\n                            })\n                        ]\n                    }\n                });\n            }\n        }\n\n        super.syncInputFieldValue(...args);\n    }\n\n    changeStore() {\n        return this.taskBoard.project.resourceStore.chain();\n    }\n\n    changeAvatarRendering(value, old) {\n        old?.destroy();\n\n        if (value) {\n            return new AvatarRendering({\n                element : this.element\n            });\n        }\n    }\n}\n\nResourcesCombo.initClass();\n","import ColorBoxCombo from './base/ColorBoxCombo.js';\n\n/**\n * @module TaskBoard/widget/SwimlaneCombo\n */\n\n/**\n * A combo populated with the {@link TaskBoard.view.TaskBoard#property-swimlanes} of a {@link TaskBoard.view.TaskBoard}.\n * If a swimlane has a {@link TaskBoard.model.SwimlaneModel#field-color} defined, that color will be displayed in the\n * combo and its picker.\n *\n * Used in {@link TaskBoard.widget.TaskEditor} to pick which swimlane a task belongs to (\"Prio\" below):\n *\n * {@inlineexample TaskBoard/widget/ColumnCombo.js}\n *\n * @classtype swimlanecombo\n * @extends TaskBoard/widget/base/ColorBoxCombo\n * @inputfield\n */\nexport default class SwimlaneCombo extends ColorBoxCombo {\n    static $name = 'SwimlaneCombo';\n\n    static type = 'swimlanecombo';\n\n    changeStore() {\n        return this.taskBoard.swimlanes.chain();\n    }\n}\n\nSwimlaneCombo.initClass();\n","import ColorPicker from '../../Core/widget/ColorPicker.js';\n\n/**\n * @module TaskBoard/widget/TaskColorPicker\n */\n\n/**\n * A color picker that displays a list of available task colors which the user can select by using mouse or keyboard.\n * See {@link TaskBoard.model.TaskModel#field-eventColor} for default available colors.\n *\n * {@inlineexample TaskBoard/widget/TaskColorPicker.js}\n *\n * ```javascript\n * new TaskColorPicker({\n *    appendTo : 'container',\n *    width    : '10em',\n *    onColorSelected() {\n *        console.log(...arguments);\n *    }\n * });\n * ```\n *\n * @classType colorpicker\n *\n * @extends Core/widget/ColorPicker\n */\nexport default class TaskColorPicker extends ColorPicker {\n    static $name = 'TaskColorPicker';\n\n    static type = 'taskcolorpicker';\n\n    static configurable = {\n\n        // These are the colors available by default for TaskBoard\n        colorClasses : [\n            { color : 'red', text : 'Red' },\n            { color : 'pink', text : 'Pink' },\n            { color : 'purple', text : 'Purple' },\n            { color : 'deep-purple', text : 'Deep purple' },\n            { color : 'indigo', text : 'Indigo' },\n            { color : 'blue', text : 'Blue' },\n            { color : 'light-blue', text : 'Light blue' },\n            { color : 'cyan', text : 'Cyan' },\n            { color : 'teal', text : 'Teal' },\n            { color : 'green', text : 'Green' },\n            { color : 'light-green', text : 'Light green' },\n            { color : 'lime', text : 'Lime' },\n            { color : 'yellow', text : 'Yellow' },\n            { color : 'amber', text : 'Amber' },\n            { color : 'orange', text : 'Orange' },\n            { color : 'deep-orange', text : 'Deep orange' }\n        ],\n\n        colorClassPrefix : 'b-taskboard-background-color-',\n\n        /**\n         * @hideconfigs colors\n         */\n\n        colors : null\n    };\n}\n\nTaskColorPicker.initClass();\n","import ColorField from '../../Core/widget/ColorField.js';\nimport './TaskColorPicker.js';\n\n/**\n * @module TaskBoard/widget/TaskColorCombo\n */\n\n/**\n * A combo populated with predefined colors usable by a task, see {@link TaskBoard.model.TaskModel#field-eventColor}.\n *\n * Used in {@link TaskBoard.widget.TaskEditor} to pick a color for a task. Double click a task to try it:\n *\n * {@inlineexample TaskBoard/widget/TaskColorCombo.js}\n *\n * @classtype taskcolorcombo\n * @extends Core/widget/ColorField\n * @inputfield\n */\nexport default class TaskColorCombo extends ColorField {\n    static $name = 'TaskColorCombo';\n\n    static type = 'taskcolorcombo';\n\n    static configurable = {\n        picker : {\n            type : 'taskcolorpicker'\n        },\n        name      : 'eventColor',\n        clearable : true\n    };\n}\n\nTaskColorCombo.initClass();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport Popup from '../../Core/widget/Popup.js';\nimport '../../Core/widget/TextAreaField.js';\nimport '../../Core/widget/TextField.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\nimport './ColumnCombo.js';\nimport './ResourcesCombo.js';\nimport './SwimlaneCombo.js';\nimport './TaskColorCombo.js';\n\n/**\n * @module TaskBoard/widget/TaskEditor\n */\n\n/**\n * Popup used to edit tasks. Normally displayed using the {@link TaskBoard.feature.TaskEdit TaskEdit feature}.\n *\n * By default, the editor live updates the task being edited. If you prefer to use buttons to save/cancel the edit,\n * set {@link #config-autoUpdateRecord} to `false`.\n *\n * ## Items\n *\n * By default, it displays the following items:\n *\n * | Ref         | Type                                                   | Weight | Comment                                                                   |\n * |-------------|--------------------------------------------------------|--------|---------------------------------------------------------------------------|\n * | name        | {@link Core.widget.TextField text}                     | 100    | Task {@link TaskBoard.model.TaskModel#field-name}                         |\n * | description | {@link Core.widget.TextAreaField textarea}             | 200    | Task {@link TaskBoard.model.TaskModel#field-description}                  |\n * | resources   | {@link TaskBoard.widget.ResourcesCombo resourcescombo} | 300    | Assigned resources                                                        |\n * | color       | {@link TaskBoard.widget.TaskColorCombo taskcolorcombo} | 400    | Task {@link TaskBoard.model.TaskModel#field-eventColor}                   |\n * | column      | {@link TaskBoard.widget.ColumnCombo columncombo}       | 500    | Bound to configured {@link TaskBoard.view.TaskBoard#config-columnField}   |\n * | swimlane    | {@link TaskBoard.widget.SwimlaneCombo swimlanecombo}   | 600    | Bound to configured {@link TaskBoard.view.TaskBoard#config-swimlaneField} |\n *\n * If configured with `autoUpdateRecord: false` it also displays a bottom toolbar with the following items:\n *\n * | Ref          | Type                              | Weight | Comment          |\n * |--------------|-----------------------------------|--------|------------------|\n * | saveButton   | {@link Core.widget.Button button} | 100    | Save             |\n * | cancelButton | {@link Core.widget.Button button} | 200    | Cancel           |\n *\n * ## Customization\n *\n * Popup and its items can be customized through the feature (see {@link TaskBoard.feature.TaskEdit} fore more info):\n *\n * {@inlineexample TaskBoard/widget/TaskEditorCustomized.js}\n *\n * Or by subclassing and instructing the feature to display the new editor:\n *\n * {@inlineexample TaskBoard/widget/TaskEditorSubclassed.js}\n *\n * @classtype taskboardtaskeditor\n * @extends Core/widget/Popup\n */\nexport default class TaskEditor extends Popup.mixin(TaskBoardLinked) {\n    static $name = 'TaskEditor';\n\n    static type = 'taskboardtaskeditor';\n\n    static configurable = {\n\n        /**\n         * Center the editor in browser viewport space. Defaults to true for desktop browsers using a pointer device\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        centered : true,\n\n        /**\n         * Show an opaque mask below the editor when shown.\n         *\n         * Clicking the mask closes the editor.\n         *\n         * @config {Boolean}\n         * @default true\n         * @category Common\n         */\n        modal : { closeOnMaskTap : true },\n\n        /**\n         * Shows a tool used to close the editor in the header.\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        closable : true,\n\n        /**\n         * By default the editor automatically updates the edited task when a field is changed. Set this to `false`\n         * to show Save / Cancel buttons and take manual control of the updating.\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        autoUpdateRecord : true,\n\n        /**\n         * Update fields if the {@link #config-record} changes\n         * @config {Boolean}\n         */\n        autoUpdateFields : true,\n\n        /**\n         * True to save and close the editor if ENTER is pressed.\n         * (The save part only applies when configured with `autoUpdateRecord : false`)\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        saveAndCloseOnEnter : true,\n\n        draggable : {\n            handleSelector : '.b-panel-header'\n        },\n\n        autoShow : false,\n\n        anchor : true,\n\n        closeAction : 'destroy',\n\n        scrollAction : 'realign',\n\n        title : 'L{TaskBoard.editTask}',\n\n        defaults : {\n            labelWidth : '30%'\n        },\n\n        width : '30em',\n\n        items : {\n            name        : { type : 'text', label : 'L{TaskBoard.name}', weight : 100 },\n            description : { type : 'textarea', label : 'L{TaskBoard.description}', height : '5em', weight : 200 },\n            resources   : { type : 'resourcescombo', label : 'L{TaskBoard.resources}', weight : 300 },\n            color       : { type : 'taskcolorcombo', label : 'L{TaskBoard.color}', name : 'eventColor', weight : 400 },\n            column      : { type : 'columncombo', weight : 500 },\n            swimlane    : { type : 'swimlanecombo', weight : 600 }\n        },\n\n        bbar : {\n            hidden : true,\n            items  : {\n                saveButton   : { text : 'L{TaskBoard.save}', onClick : 'up.onSaveClick', weight : 100 },\n                cancelButton : { text : 'L{TaskBoard.cancel}', onClick : 'up.onCancelClick', weight : 200 }\n            }\n        },\n\n        // We want to maximize on phones and tablets\n        maximizeOnMobile : true\n    };\n\n    changeItems(items, old) {\n        const\n            { taskBoard }                   = this,\n            { column, swimlane, resources } = items;\n\n        if (taskBoard) {\n            // Hook column field up to correct record field\n            if (column) {\n                if (!column.name) {\n                    column.name = taskBoard.columnField;\n                }\n\n                if (!column.label) {\n                    column.label = StringHelper.capitalize(taskBoard.columnField);\n                }\n            }\n\n            if (swimlane) {\n                // Take the swimlane field out if not using swimlanes\n                if (!taskBoard.swimlaneField || !taskBoard.swimlanes) {\n                    items.swimlane = null;\n                }\n                // Otherwise hook it up with correct record field\n                else {\n                    if (!swimlane.name) {\n                        swimlane.name = taskBoard.swimlaneField;\n                    }\n\n                    if (!swimlane.label) {\n                        swimlane.label = StringHelper.capitalize(taskBoard.swimlaneField);\n                    }\n                }\n            }\n\n            // Remove resources field if there are no resources\n            if (!taskBoard.project.resourceStore.count) {\n                items.resources = null;\n            }\n\n            // Prevent multi selection if using single assignment mode\n            if (taskBoard.project.eventStore.usesSingleAssignment && resources) {\n                resources.multiSelect = false;\n            }\n        }\n        else {\n            items.column = items.swimlane = items.resources = null;\n        }\n\n        return super.changeItems(items, old);\n    }\n\n    processItemsObject(items, namedItems, result) {\n        // Use ref as name if not explicitly set\n        for (const ref in items) {\n            const item = items[ref];\n\n            if (item && !('name' in item)) {\n                item.name = ref;\n            }\n        }\n\n        return super.processItemsObject(items, namedItems, result);\n    }\n\n    updateAutoUpdateRecord(autoUpdate) {\n        this.bbar.hidden = autoUpdate;\n    }\n\n    updateRecord(record) {\n        super.updateRecord(record);\n\n        if (record) {\n            // Tag along task id, mainly for tests\n            this.element.dataset.taskId = record.id;\n        }\n    }\n\n    onSaveClick() {\n        const\n            me                       = this,\n            { record, owner }        = me,\n            { resources, ...values } = me.values;\n\n        if (me.isValid) {\n            /**\n             * Fires on the owning TaskBoard when user clicks `Save`, before changes are saved.\n             * Returning `false` from a listener prevents saving and keeps the editor open.\n             * @event beforeSave\n             * @on-owner\n             * @preventable\n             * @param {TaskBoard.view.TaskBoard} source The taskboard\n             * @param {TaskBoard.widget.TaskEditor} editor The editor\n             * @param {TaskBoard.model.TaskModel} record The task record\n             * @param {Object} values The task editor field values\n             */\n            if (owner?.trigger('beforeSave', { record, values : me.values, editor : me }) === false) {\n                return;\n            }\n\n            /**\n             * Fires on the owning TaskBoard when user clicks `Save`, after changes are saved.\n             * @event save\n             * @on-owner\n             * @param {TaskBoard.view.TaskBoard} source The taskboard\n             * @param {TaskBoard.widget.TaskEditor} editor The editor\n             * @param {TaskBoard.model.TaskModel} record The task record\n             * @param {Object} values The task editor field values\n             */\n            owner?.trigger('save', { record, values : me.values, editor : me });\n\n            // Close first to avoid focus restoring issues if the edit element gets removed by the operations below\n            me.close();\n\n            record.set(values);\n\n            if (resources) {\n                // Does not work when passed through set, handle it separately\n                record.resources = resources;\n            }\n        }\n    }\n\n    onCancelClick() {\n        const me = this;\n        /**\n         * Fires on the owning TaskBoard when user clicks 'Cancel'.\n         * Returning `false` from a listener prevents canceling and keeps the editor open.\n         * @event beforeCancel\n         * @preventable\n         * @param {TaskBoard.view.TaskBoard} source The taskboard\n         * @param {TaskBoard.widget.TaskEditor} editor The editor\n         */\n        if (me.owner?.trigger('beforeCancel', { editor : me }) === false) {\n            return;\n        }\n        /**\n         * Fires on the owning TaskBoard when user clicks 'Cancel', after the editor closed.\n         * @event cancel\n         * @preventable\n         * @param {TaskBoard.view.TaskBoard} source The taskboard\n         * @param {TaskBoard.widget.TaskEditor} editor The editor\n         */\n        me.owner?.trigger('cancel', { editor : me });\n\n        me.close();\n    }\n\n    onInternalKeyDown(event) {\n        const me = this;\n\n        if (me.saveAndCloseOnEnter && !me.readOnly && event.key === 'Enter') {\n            // Need to prevent this key events from being fired on whatever receives focus after the editor is hidden\n            event.preventDefault();\n\n            if (me.autoUpdateRecord) {\n                if (me.isValid) {\n                    // Blur to get a change event before closing, to be sure record is up to date\n                    event.target.blur();\n                    me.close();\n                }\n            }\n            else {\n                me.onSaveClick();\n            }\n        }\n\n        super.onInternalKeyDown(event);\n    }\n}\n\nTaskEditor.initClass();\n","import Widget from '../../Core/widget/Widget.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport TaskBoardFeature from './TaskBoardFeature.js';\nimport Scroller from '../../Core/helper/util/Scroller.js';\nimport '../widget/TaskEditor.js';\n// Ensure SlideToggle is present so that type : 'checkbox' can be switched out on mobile\nimport '../../Core/widget/SlideToggle.js';\n\n/**\n * @module TaskBoard/feature/TaskEdit\n */\n\n/**\n * This features allows the user to edit tasks in a popup editor that can either be shown centered on screen (the\n * default, double click a task to show the editor):\n *\n * {@inlineexample TaskBoard/feature/TaskEdit.js}\n *\n * Or anchored to a task:\n *\n * {@inlineexample TaskBoard/feature/TaskEditAnchored.js}\n *\n * ## Default items\n *\n * By default it displays the following items:\n *\n * | Ref           | Type                                                   | Weight | Comment                                                                   |\n * |---------------|--------------------------------------------------------|--------|---------------------------------------------------------------------------|\n * | `name`        | {@link Core.widget.TextField text}                     | 100    | Task {@link TaskBoard.model.TaskModel#field-name}                         |\n * | `description` | {@link Core.widget.TextAreaField textarea}             | 200    | Task {@link TaskBoard.model.TaskModel#field-description}                  |\n * | `resources`*  | {@link TaskBoard.widget.ResourcesCombo resourcescombo} | 300    | Assigned resources                                                        |\n * | `color`       | {@link TaskBoard.widget.TaskColorCombo taskcolorcombo} | 400    | Task {@link TaskBoard.model.TaskModel#field-eventColor}                   |\n * | `column`      | {@link TaskBoard.widget.ColumnCombo columncombo}       | 500    | Bound to configured {@link TaskBoard.view.TaskBoard#config-columnField}   |\n * | `swimlane`*   | {@link TaskBoard.widget.SwimlaneCombo swimlanecombo}   | 600    | Bound to configured {@link TaskBoard.view.TaskBoard#config-swimlaneField} |\n * <sup>*</sup> Only shown when using resources / swimlanes respectively\n *\n * You can modify or remove the default items and add new custom items to the editor either at config time by using the\n * {@link #config-items items config} or at runtime by using the {@link #config-processItems processItems config}.\n *\n * ## Customize when configuring\n *\n * The {@link #config-items items config} accepts an object keyed by item ref (as listed in the table above). This\n * object will be merged with default items and the end result will determine which items are shown and how they are\n * configured.\n *\n * ### To remove a default item\n *\n * Set a ref to `null` to remove the item from the editor:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    features : {\n *        taskEdit : {\n *            items : {\n *                // Remove the color field\n *                color : null\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/TaskEditRemove.js}\n *\n * ### To modify a default item\n *\n * Supply an object with the configs you want to change for a ref to modify the corresponding field:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    features : {\n *        taskEdit : {\n *            items : {\n *                // Change label of the description field and move it to the bottom\n *                description : {\n *                    label : 'Comment',\n *                    weight : 700\n *                }\n *            }\n *        }\n *    }\n * });\n * ```\n *\n *  {@inlineexample TaskBoard/feature/TaskEditModify.js}\n *\n * ### To add a custom item\n *\n * Supply a config object for the new item, using a ref that is not used by any default item:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    features : {\n *        taskEdit : {\n *            items : {\n *                // Change label of the description field and move it to the bottom\n *                deadline : {\n *                    type   : 'date',\n *                    label  : 'Deadline',\n *                    weight : 300,\n *                    name   : 'deadline' // Bound field. If it matches the ref (key) for the field, it can be left out\n *                }\n *            }\n *        }\n *    }\n * });\n * ```\n *\n *  {@inlineexample TaskBoard/feature/TaskEditAdd.js}\n *\n * ## Customize at runtime\n *\n * By supplying a function to {@link #config-processItems} you gain runtime control over which items are shown and how\n * they are configured:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    features : {\n *        taskEdit : {\n *            processItems({ taskRecord, items }) {\n *                // Hide description for tasks that are done\n *                if (taskRecord.status === 'done') {\n *                    items.description = null;\n *                }\n *\n *                // Modify the label for the name field\n *                items.name.label = 'Title';\n *\n *                // Add a custom item for high prio tasks\n *                if (taskRecord.prio === 'high') {\n *                    items.severity = { type : 'number', name : 'severity', label : 'Severity' }\n *                }\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * You can also use `processItems` to prevent the editor from being shown for certain tasks, by returning `false` from\n * the function.\n *\n * {@inlineexample TaskBoard/feature/TaskEditProcessItems.js}\n *\n * ## Customizing other aspects of the editor\n *\n * By supplying an {@link #config-editorConfig} you can customize other aspects of the editor, such as its size, how\n * it is anchored, its title etc.\n *\n * {@inlineexample TaskBoard/feature/TaskEditEditorConfig.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype taskEdit\n * @feature\n */\nexport default class TaskEdit extends TaskBoardFeature {\n    static $name = 'TaskEdit';\n\n    static type = 'taskEdit';\n\n    static configurable = {\n        /**\n         * Type of widget to use as the editor. Should point to a subclass of {@link TaskBoard.widget.TaskEditor} or\n         * a widget mimicking its API.\n         * @config {String}\n         * @default\n         * @category Customization\n         */\n        editorType : 'taskboardtaskeditor',\n\n        /**\n         * Config object merged with the default configuration of the editor (by default a\n         * {@link TaskBoard.widget.TaskEditor}).\n         *\n         * Can be used to configure any aspect of the editor:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     features : {\n         *         taskEdit : {\n         *             editorConfig : {\n         *                 modal    : false,\n         *                 centered : false\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         * To customize the items in the editor, using {@link #config-items} is preferable.\n         * @config {TaskEditorConfig}\n         * @category Customization\n         */\n        editorConfig : {},\n\n        /**\n         * Items definition passed on to the configured editor (by default a {@link TaskBoard.widget.TaskEditor}).\n         *\n         * Can be used to add new items or modify and remove predefined items. To remove, supply `null` as the value.\n         *\n         * @config {Object<String,ContainerItemConfig|Boolean|null>}\n         * @category Customization\n         */\n        items : {},\n\n        /**\n         * A function called before displaying the editor that allows manipulation of its items.\n         * Returning `false` from this function prevents the editor from being shown.\n         *\n         * ```javascript\n         * features         : {\n         *    taskEdit : {\n         *         processItems({ items, taskRecord, columnRecord, swimlaneRecord }) {\n         *             // Manipulate existing items here as needed\n         *             items.name.label = taskRecord.type === 'task' ? 'Task' : 'Issue';\n         *\n         *            // Remove column field when editing tasks that are done\n         *            if (columnRecord.id === 'done') {\n         *                items.column = false\n         *            }\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * @param {Object} context An object with information about the editor being shown\n         * @param {Object<String,ContainerItemConfig>} context.items An object containing the editor item configs keyed by ref\n         * @param {TaskBoard.model.TaskModel} context.taskRecord Record representing task being edited\n         * @param {TaskBoard.model.ColumnModel} context.columnRecord Record representing tasks column\n         * @param {TaskBoard.model.SwimlaneModel} context.swimlaneRecord Record representing tasks swimlane\n         * @config {Function}\n         * @preventable\n         */\n        processItems : null\n\n        // /**\n        //  * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `` or null to disable editing of existing events.\n        //  * @config {String}\n        //  * @default\n        //  * @category Editor\n        //  */\n        // triggerEvent : 'eventdblclick',\n\n        // /**\n        //  * Specify `true` to put the editor in read only mode.\n        //  * @config {Boolean}\n        //  * @default false\n        //  */\n        // readOnly : null,\n    };\n\n    editor = null;\n\n    static pluginConfig = {\n        assign : ['editTask'],\n        chain  : ['onActivateTask', 'populateTaskMenu']\n    };\n\n    doDestroy() {\n        this.editor?.destroy();\n    }\n\n    //region Type assertions\n\n    changeEditorConfig(editorConfig) {\n        ObjectHelper.assertObject(editorConfig, 'features.taskEdit.editorConfig');\n\n        return editorConfig;\n    }\n\n    changeEditorType(editorType) {\n        ObjectHelper.assertString(editorType, 'features.taskEdit.editorType');\n\n        return editorType;\n    }\n\n    changeItems(items) {\n        ObjectHelper.assertObject(items, 'features.taskEdit.items');\n\n        return items;\n    }\n\n    changeProcessItems(processItems) {\n        ObjectHelper.assertFunction(processItems, 'features.taskEdit.processItems');\n\n        return processItems;\n    }\n\n    //endregion\n\n    /**\n     * Edit the supplied task in the task editor.\n     *\n     * ```javascript\n     * taskBoard.editTask(taskStore.first);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel} taskRecord Task to edit\n     * @param {HTMLElement} [element] Optionally an element to align to, by default it tries to resolve one from the\n     * supplied task when the editor is configured to not be centered.\n     * @on-owner\n     * @category Common\n     */\n    async editTask(taskRecord, element = null) {\n        const\n            me             = this,\n            { client }     = me,\n            columnRecord   = client.getColumn(taskRecord),\n            swimlaneRecord = client.swimlaneField && client.swimlanes?.getById(taskRecord.getValue(client.swimlaneField));\n\n        if (me.disabled) {\n            return;\n        }\n\n        /**\n         * Fires on the owning TaskBoard before a task is displayed in an editor.\n         *\n         * Returning `false` or a promise that resolves to `false` stops the default editing UI from being shown.\n         *\n         * ```javascript\n         * taskBoard.on({\n         *     beforeTaskEdit({ taskRecord }) {\n         *         return await userCanEdit(taskRecord);\n         *     }\n         * }\n         * ```\n         *\n         * @event beforeTaskEdit\n         * @param {TaskBoard.view.TaskBoard} source The owning TaskBoard\n         * @param {TaskBoard.model.TaskModel} taskRecord The record about to be shown in the task editor\n         * @on-owner\n         * @preventable\n         * @async\n         */\n        if (await client.trigger('beforeTaskEdit', { taskRecord }) === false) {\n            return;\n        }\n\n        if (me.isEditing) {\n            me.cancelEdit();\n        }\n\n        // <remove-on-release>\n        // TODO: Ask Don about combinedItems\n        // </remove-on-release>\n        const\n            editorClass   = Widget.resolveType(me.editorType),\n            // Combine items defined on the feature with those defined on the editor\n            combinedItems = editorClass.mergeConfigs(editorClass.$meta.config.items, me.items),\n            // Allow user supplied fn to process the items, returning false will abort edit\n            processResult = me.processItems?.({ items : combinedItems, taskRecord, columnRecord, swimlaneRecord });\n\n        if (processResult === false) {\n            return;\n        }\n\n        const editor = me.editor = editorClass.new({\n            items    : combinedItems,\n            owner    : client,\n            readOnly : taskRecord.readOnly\n        }, me.editorConfig);\n\n        /**\n         * Fires on the owning TaskBoard when the editor for a task is available, but before it is populated with data\n         * and shown. Allows manipulating fields etc.\n         *\n         * ```javascript\n         * taskBoard.on({\n         *     beforeTaskEditShow({ taskRecord, editor }) {\n         *         editor.title = `Editing \"${taskRecord.name}\"`;\n         *     }\n         * }\n         * ```\n         *\n         * @event beforeTaskEditShow\n         * @on-owner\n         * @param {TaskBoard.view.TaskBoard} source The owning TaskBoard\n         * @param {TaskBoard.model.TaskModel} taskRecord The record about to be shown in the task editor\n         * @param {TaskBoard.widget.TaskEditor} editor The editor\n         */\n        client.trigger('beforeTaskEditShow', { taskRecord, editor });\n\n        editor.record = taskRecord;\n\n        if (editor.centered || !BrowserHelper.isHoverableDevice) {\n            editor.show();\n        }\n        else {\n            Scroller.scrollIntoView(element ?? client.getTaskElement(taskRecord));\n            editor.showBy(element ?? client.getTaskElement(taskRecord));\n        }\n\n        editor.isVisible && editor.ion({\n            hide    : me.onEditorHide,\n            thisObj : me\n        });\n    }\n\n    cancelEdit() {\n\n    }\n\n    onActivateTask({ taskRecord, event }) {\n        if (!event.defaultPrevented) {\n            this.editTask(taskRecord);\n        }\n    }\n\n    populateTaskMenu({ items, taskRecord }) {\n        if (!this.client.readOnly && !this.disabled) {\n            items.editTask = {\n                text     : 'L{TaskBoard.editTask}',\n                icon     : 'b-fw-icon b-icon-edit',\n                weight   : 100,\n                onItem   : () => this.editTask(taskRecord),\n                disabled : taskRecord.readOnly\n            };\n        }\n    }\n\n    onEditorHide() {\n        this.client.getTaskElement(this.editor.record)?.focus();\n    }\n}\n\nTaskEdit.initClass();\n","import TaskBoardFeature from './TaskBoardFeature.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ContextMenuBase from '../../Core/feature/base/ContextMenuBase.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module TaskBoard/feature/TaskMenu\n */\n\n/**\n * Displays a context menu for tasks. Items are populated by other features and/or application code.\n *\n * {@inlineexample TaskBoard/feature/TaskMenu.js}\n *\n * You can optionally also use a {@link TaskBoard/view/item/TaskMenuItem} button to display the menu.\n *\n * ## Default items\n *\n * These are the default items provided by TaskBoard features:\n *\n * | Reference    | Weight | Feature                            | Description                                      |\n * |--------------|--------|------------------------------------|--------------------------------------------------|\n * | `editTask`   | 100    | {@link TaskBoard.feature.TaskEdit} | Open task editor. Hidden when read-only          |\n * | `resources`  | 200    | *This feature*                     | Assign/unassign resources. Hidden when read-only |\n * | `column`     | 300    | *This feature*                     | Move to column. Hidden when read-only            |\n * | `swimlane`   | 400    | *This feature*                     | Move to swimlane. Hidden when read-only          |\n * | `removeTask` | 500    | *This feature*                     | Remove task. Hidden when read-only               |\n *\n * Default items in the menu can be changed or removed and new items can be added. This is handled using the\n * {@link #config-items} config of the feature.\n *\n * ## Add items\n *\n * Add menu items for all tasks by adding a key (used as menu item {@link Core/widget/Widget#config-ref}) with a\n * {@link Core/widget/MenuItem#configs config object for a menu item} as the value to the {@link #config-items} config:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 flagTask : {\n *                     text : 'Flag task',\n *                     icon : 'b-fa-fw b-fa-flag',\n *                     onItem({ taskRecord }) {\n *                         taskRecord.flagged = true;\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/TaskMenuAdd.js}\n *\n * ## Remove items\n *\n * To remove default items, configure them as `null` in the {@link #config-items} config:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 removeTask : null,\n *                 resources : null\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/TaskMenuRemove.js}\n *\n * ## Customize items\n *\n * To customize default items, supply a new config object for them in the {@link #config-items} config. It will merge\n * with the default config object:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 removeTask : {\n *                     text : 'Delete card'\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/TaskMenuCustomize.js}\n *\n * ## Manipulating items at runtime\n *\n * Manipulate items for all tasks or specific tasks at runtime by supplying a {@link #config-processItems} function:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     features : {\n *         taskMenu : {\n *             // Process items before menu is shown\n *             processItems({ taskRecord, items }) {\n *                  // Push an extra item for done tasks\n *                  if (taskRecord.status === 'done') {\n *                      items.archive = {\n *                          text : 'Archive',\n *                          icon : 'b-fa-fw b-fa-archive'\n *                          onItem({ taskRecord }) {\n *                              taskRecord.archived = true;\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for low prio tasks\n *                  if (taskRecord.prio === 'low') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/feature/TaskMenuProcessItems.js}\n *\n * This feature is **enabled** by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys           | Action                 | Action description                               |\n * |----------------|------------------------|--------------------------------------------------|\n * | `Space`        | *showContextMenuByKey* | Shows context menu for currently focused task    |\n * | `Ctrl`+`Space` | *showContextMenuByKey* | Shows context menu for currently focused task    |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#TaskBoard/guides/customization/keymap.md).\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype taskMenu\n * @feature\n */\nexport default class TaskMenu extends ContextMenuBase {\n\n    static $name = 'TaskMenu';\n\n    static type = 'taskMenu';\n\n    static configurable = {\n        /**\n         * A function called before displaying the menu that allows manipulations of its items.\n         * Returning `false` from this function prevents the menu from being shown.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *   features         : {\n         *       taskMenu : {\n         *           processItems({ taskRecord, items }) {\n         *              // Add a custom menu item for tasks with progress greater than 90\n         *              if (taskRecord.progress > 90) {\n         *                  items.close = {\n         *                      text : 'Close',\n         *                      icon : 'b-fa-fw b-fa-check',\n         *                      onItem({ taskRecord }) {\n         *                          taskRecord.done = true;\n         *                      }\n         *                  }\n         *              }\n         *           }\n         *       }\n         *   }\n         * });\n         * ```\n         *\n         * @param {Object} context An object with information about the menu being shown\n         * @param {TaskBoard.model.TaskModel} context.taskRecord The task for which the menu will be shown\n         * @param {Object<string,MenuItemConfig>} context.items An object containing the\n         * {@link Core.widget.MenuItem menu item} configs keyed by their id\n         * @param {Event} context.event The DOM event object that triggered the show\n         * @config {Function}\n         * @preventable\n         */\n        processItems : null,\n\n        /**\n         * This is a preconfigured set of items used to create the default context menu.\n         *\n         * The `items` provided by this feature are listed in the intro section of this class. You can configure\n         * existing items by passing a configuration object to the keyed items.\n         *\n         * To remove existing items, set corresponding keys to `null`:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     features : {\n         *         taskMenu : {\n         *             items : {\n         *                 editTask : null\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * See the feature config in the above example for details.\n         *\n         * @config {Object<string,MenuItemConfig|Boolean|null>} items\n         */\n        items : null,\n\n        type : 'task',\n\n        /**\n         * The mouse / touch gesture which should show this context menu (e.g. 'taskClick' or 'taskContextMenu').\n         * Set to `false` to never trigger it from UI.\n         * @default\n         * @config {String|Boolean}\n         */\n        triggerEvent : 'taskContextMenu',\n\n        /**\n         * Show avatars/initials in the resource picker menu\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     features : {\n         *         taskMenu : {\n         *             showAvatars : false\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         * @default true\n         */\n        showAvatars : {\n            value   : true,\n            $config : 'nullify'\n        },\n\n        menu : {\n            align  : 't90-b90',\n            anchor : true\n        }\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<string,string>} keyMap\n         */\n\n        /**\n         * @hideconfigs type\n         */\n    };\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateTaskMenu');\n\n        return config;\n    }\n\n    //region Type assertions\n\n    changeItems(items) {\n        ObjectHelper.assertObject(items, 'features.taskMenu.items');\n\n        return items;\n    }\n\n    changeProcessItems(processItems) {\n        ObjectHelper.assertFunction(processItems, 'features.taskMenu.processItems');\n\n        return processItems;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * This event fires on the owning TaskBoard before the context menu is shown for a task.\n     * Allows manipulation of the items to show in the same way as in the {@link #config-processItems}.\n     *\n     * Returning `false` from a listener prevents the menu from being shown.\n     *\n     * @event taskMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<string,MenuItemConfig>} items Menu item configs\n     * @param {TaskBoard.model.TaskModel} taskRecord The task\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard after the context menu is shown for a task.\n     * @event taskMenuShow\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Object<string,MenuItemConfig>} items Menu item configs\n     * @param {TaskBoard.model.TaskModel} taskRecord The task\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard when an item is selected in the task context menu.\n     * @event taskMenuItem\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {TaskBoard.model.TaskModel} taskRecord The task\n     * @on-owner\n     */\n\n    /**\n     * This event fires on the owning TaskBoard when a check item is toggled in the task context menu.\n     * @event taskMenuToggleItem\n     * @on-owner\n     * @param {TaskBoard.view.TaskBoard} source The grid\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Core.widget.MenuItem} item Selected menu item\n     * @param {TaskBoard.model.TaskModel} taskRecord The task\n     * @param {Boolean} checked Checked or not\n     * @on-owner\n     */\n\n    //endregion\n\n    updateTriggerEvent(triggerEvent) {\n        this.detachListeners('triggerEvent');\n        if (triggerEvent) {\n            this.client.ion({\n                name           : 'triggerEvent',\n                [triggerEvent] : 'onTriggerEvent',\n                thisObj        : this\n            });\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        !this.isConfiguring && this.client.recompose();\n    }\n\n    onTriggerEvent({ event }) {\n        this.internalShowContextMenu(event);\n    }\n\n    /**\n     * Show the context menu for a specific task, aligned to its card. Optionally aligned to an element in the card, using the supplied CSS selector.\n     *\n     * @param {TaskBoard.model.TaskModel} taskRecord Task to show the menu for\n     * @param {String} [selector] CSS selector, to align to a specific element in the task's card\n     */\n    showMenuFor(taskRecord, selector = '.b-taskboard-task-menu') {\n        const\n            targetElement = this.client.getTaskElement(taskRecord),\n            buttonElement = targetElement.querySelector(selector),\n            eventParams   = { taskRecord, columnRecord : this.client.getColumn(taskRecord), targetElement };\n\n        let alignSpec = null;\n\n        // <remove-on-release>\n        // TODO: Call something on the button instead?\n        // </remove-on-release>\n        if (buttonElement) {\n            eventParams.targetElement = buttonElement;\n            alignSpec = {\n                target : buttonElement\n            };\n        }\n\n        this.showContextMenu(eventParams, alignSpec);\n    }\n\n    showContextMenu(eventParams, ...args) {\n        if (!this.client.isSelected(eventParams.taskRecord)) {\n            this.client.selectTask(eventParams.taskRecord);\n        }\n\n        super.showContextMenu(eventParams, ...args);\n    }\n\n    getDataFromEvent(event) {\n        return ObjectHelper.assign(super.getDataFromEvent(event), event.taskBoardData);\n    }\n\n    populateTaskMenu({ items, taskRecord }) {\n        const { client, disabled } = this;\n\n        if (!client.readOnly && !disabled) {\n            const\n                { columnField, swimlaneField, selectedTasks } = client,\n                { resourceStore, eventStore }                 = client.project,\n                isSelected                                    = selectedTasks.includes(taskRecord);\n\n            items.column = {\n                text     : `L{TaskBoard.changeColumn} ${columnField}`,\n                icon     : 'b-fw-icon b-icon-move-left-right',\n                weight   : 300,\n                disabled : taskRecord.readOnly,\n                menu     : client.columns.map(col => ({\n                    ref         : col.id,\n                    text        : StringHelper.encodeHtml(col.text),\n                    cls         : 'b-column-menu-item',\n                    isColumn    : true,\n                    checked     : taskRecord.getValue(columnField) === col.id,\n                    // Close menu when task is moved to a new column, looks weird to keep it open\n                    closeParent : true\n                })),\n                onItem({ item }) {\n                    if (item.isColumn) {\n                        taskRecord.setValue(columnField, item.ref);\n\n                        item.parent.items.forEach(sibling => {\n                            if (sibling !== item) {\n                                sibling.checked = false;\n                            }\n                        });\n                    }\n                }\n            };\n\n            if (client.swimlanes?.count && swimlaneField) {\n                items.swimlane = {\n                    text     : StringHelper.xss`L{TaskBoard.changeSwimlane} ${swimlaneField}`,\n                    icon     : 'b-fw-icon b-icon-move-up-down',\n                    weight   : 400,\n                    disabled : taskRecord.readOnly,\n                    menu     : client.swimlanes.map(lane => ({\n                        ref         : lane.id,\n                        text        : StringHelper.encodeHtml(lane.text),\n                        isSwimlane  : true,\n                        checked     : taskRecord.getValue(swimlaneField) === lane.id,\n                        // Close menu when task is moved to a new swimlane, looks weird to keep it open\n                        closeParent : true\n                    })),\n                    onItem({ item }) {\n                        if (item.isSwimlane) {\n                            taskRecord.setValue(swimlaneField, item.ref);\n\n                            item.parent.items.forEach(sibling => {\n                                if (sibling !== item) {\n                                    sibling.checked = false;\n                                }\n                            });\n                        }\n                    }\n                };\n            }\n\n            if (resourceStore.count) {\n                items.resources = {\n                    text     : 'L{TaskBoard.resources}',\n                    icon     : 'b-fw-icon b-icon-user',\n                    weight   : 200,\n                    disabled : taskRecord.readOnly,\n                    menu     : resourceStore.map(resource => {\n                        const avatar = this.avatarRendering?.getResourceAvatar({\n                            resourceRecord : resource,\n                            initials       : resource.initials,\n                            color          : resource.color,\n                            iconCls        : resource.iconCls,\n                            imageUrl       : resource.imageUrl || ((client.resourceImagePath || '') + (resource.image || ''))\n                        });\n\n                        return {\n                            ref  : resource.id,\n                            cls  : 'b-resource-menu-item',\n                            text : avatar ? {\n                                className : 'b-resource-menu-item-inner',\n                                children  : [\n                                    avatar,\n                                    StringHelper.encodeHtml(resource.name)\n                                ]\n                            } : StringHelper.encodeHtml(resource.name),\n                            resource,\n                            checked     : taskRecord.resources.includes(resource),\n                            // Only allow single pick in single assignment mode\n                            toggleGroup : eventStore.usesSingleAssignment ? 'single' : null\n                        };\n                    }\n                    ),\n                    onItem({ item }) {\n                        if (item.resource) {\n                            taskRecord[item.checked ? 'assign' : 'unassign'](item.resource);\n                        }\n                    }\n                };\n            }\n\n            items.removeTask = {\n                text     : isSelected && selectedTasks.length > 1 ? 'L{TaskBoard.removeTasks}' : 'L{TaskBoard.removeTask}',\n                icon     : 'b-fw-icon b-icon-trash',\n                cls      : 'b-separator',\n                weight   : 500,\n                disabled : taskRecord.readOnly,\n                onItem   : () => client.removeTask(isSelected ? selectedTasks : taskRecord)\n            };\n        }\n    }\n\n    get showMenu() {\n        return true;\n    }\n\n    updateShowAvatars(value) {\n        this.avatarRendering?.destroy();\n\n        if (value) {\n            this.avatarRendering = new AvatarRendering({\n                element : this.client.element\n            });\n        }\n    }\n}\n\n// Register this feature type with its Factory\nTaskBoardFeature.register(TaskMenu.type, TaskMenu);\n","import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport TaskBoardFeature from './TaskBoardFeature.js';\n\n/**\n * @module TaskBoard/feature/TaskTooltip\n */\n\n/**\n * Displays a tooltip when hovering a task. By default the tooltip displays:\n *\n * * task name\n * * task column\n * * task swimlane (if using swimlanes)\n * * names of assigned resources (if any)\n *\n * {@inlineexample TaskBoard/feature/TaskTooltip.js}\n *\n * To customize the contents, supply your own {@link #config-template}:\n *\n * {@inlineexample TaskBoard/feature/TaskTooltipTemplate.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends TaskBoard/feature/TaskBoardFeature\n * @uninherit Core/Base\n * @uninherit Core/localization/Localizable\n * @classtype taskTooltip\n * @feature\n */\nexport default class TaskTooltip extends TaskBoardFeature {\n\n    static $name = 'TaskTooltip';\n\n    static type = 'taskTooltip';\n\n    static configurable = {\n        /**\n         * Tooltip config object used to override the defaults, see {@link Core.widget.Tooltip#configs} for available\n         * configs.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     features : {\n         *         taskTooltip : {\n         *             tooltip : {\n         *                 hoverDelay : 100,\n         *                 hideDelay  : 500\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {TooltipConfig}\n         */\n        tooltip : {\n            value : {},\n\n            // Lazy, pulled in on render to have element available\n            $config : ['lazy', 'nullify']\n        },\n\n        /**\n         * Function used to populate the tooltip, supply your own to override the default contents of the tooltip.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     features : {\n         *         taskTooltip : {\n         *             template({ taskRecord }) {\n         *                 return `<b>${taskRecord.name}</b>`\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @param {Object} tipData\n         * @param {TaskBoard.model.TaskModel} tipData.taskRecord Hovered task\n         * @param {TaskBoard.model.ColumnModel} tipData.columnRecord The task's column\n         * @param {TaskBoard.model.SwimlaneModel} tipData.swimlaneRecord The task's swimlane (if used)\n         * @returns {String|DomConfig} Return an HTML string or a DOM config object\n         * @config {Function}\n         */\n        template : null\n    };\n\n    static pluginConfig = {\n        chain : ['render']\n    };\n\n    //region Type assertions\n\n    changeTemplate(template) {\n        ObjectHelper.assertFunction(template, 'features.taskTooltip.template');\n\n        return template;\n    }\n\n    //endregion\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        if (this._tooltip) {\n            this.tooltip.disabled = disable;\n        }\n    }\n\n    changeTooltip(tooltip, oldTooltip) {\n        const\n            me         = this,\n            { client } = me;\n\n        ObjectHelper.assertObject(tooltip, 'features.taskTooltip.tooltip');\n\n        oldTooltip?.destroy();\n\n        if (tooltip) {\n\n            return new Tooltip(ObjectHelper.assign({\n                axisLock       : 'flexible',\n                cls            : 'b-taskboard-tooltip',\n                forSelector    : '.b-taskboardbase:not(.b-draghelper-active) .b-taskboard-card',\n                scrollAction   : 'realign',\n                forElement     : client.element,\n                showOnHover    : true,\n                hoverDelay     : 0,\n                hideDelay      : 100,\n                anchorToTarget : true,\n                allowOver      : Boolean(me.config.items || me.config.tools),\n                getHtml        : me.getTipHtml.bind(me),\n                disabled       : me.disabled,\n                textContent    : false\n            }, tooltip));\n        }\n    }\n\n    getTipHtml({ tip, activeTarget }) {\n        const\n            { client }     = this,\n            taskRecord     = client.resolveTaskRecord(activeTarget),\n            columnRecord   = client.resolveColumnRecord(activeTarget),\n            swimlaneRecord = client.resolveSwimlaneRecord(activeTarget);\n\n        if (this.template) {\n            return this.template({ tip, taskRecord, columnRecord, swimlaneRecord, activeTarget });\n        }\n\n        const children = [\n            {\n                class : 'b-taskboard-tooltip-title',\n                text  : taskRecord.name\n            },\n            {\n                class : 'b-taskboard-tooltip-label',\n                text  : StringHelper.capitalize(client.columnField)\n            },\n            {\n                class : 'b-taskboard-tooltip-value',\n                text  : columnRecord.text\n            }\n        ];\n\n        if (swimlaneRecord) {\n            children.push(\n                {\n                    class : 'b-taskboard-tooltip-label',\n                    text  : StringHelper.capitalize(client.swimlaneField)\n                },\n                {\n                    class : 'b-taskboard-tooltip-value',\n                    text  : swimlaneRecord.text\n                }\n            );\n        }\n\n        if (taskRecord.resources.length) {\n            children.push(\n                {\n                    class : 'b-taskboard-tooltip-label',\n                    text  : this.L('L{TaskBoard.resources}')\n                },\n                {\n                    class : 'b-taskboard-tooltip-value',\n                    text  : taskRecord.resources.map(resourceRecord => resourceRecord.name).join(', ')\n                }\n            );\n        }\n\n        return {\n            children\n        };\n    }\n\n    render() {\n        // Element is now available, pull in tooltip to have it correctly wired up\n        this.getConfig('tooltip');\n    }\n}\n\nTaskTooltip.initClass();\n","import Model from '../../Core/data/Model.js';\n\n/**\n * @module TaskBoard/model/ColumnModel\n */\n\n/**\n * Represents a single column on a TaskBoard.\n *\n * When creating a TaskBoard, you supply an initial set of columns. These columns are either defined as plain strings,\n * ColumnModel data objects or ColumnModel records (or a mix thereof). When using strings, the string will be used as is\n * as the column's id and capitalized as its text.\n *\n * ```javascript\n * const doneColumn = new ColumnModel({\n *     id   : 'done',\n *     text : 'Done'\n * });\n *\n * const taskBoard = new TaskBoard({\n *     columns : [\n *         // String, equal to passing { id : 'todo', text : 'Todo' }\n *         'todo',\n *         // Data object, in this case with a fixed width and not collapsible from the UI\n *         { id : 'doing', text : 'Doing', width : 200, collapsible : false }\n *         // Record, not commonly used since it is easier to supply the data object directly\n *         doneColumn\n *     ]\n * });\n * ```\n *\n * @extends Core/data/Model\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class ColumnModel extends Model {\n\n    static $name = 'ColumnModel';\n\n    static fields = [\n        /**\n         * This column's unique id, used to match a task to a column (which field on a task to match is specified using\n         * then {@link TaskBoard.view.TaskBoardBase#config-columnField} config on TaskBoard).\n         * @field {String|Number} id\n         */\n\n        /**\n         * Text displayed in the column header.\n         * @field {String} text\n         */\n        'text',\n\n        /**\n         * A tooltip string to show when hovering the column header\n         * @field {String} tooltip\n         */\n        'tooltip',\n\n        /**\n         * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS\n         * class to the column. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the column.\n         *\n         * By default it does not visually affect the UI, but it applies a color to the column that applications can\n         * leverage using `currentColor` to style it in the desired way.\n         *\n         * Using named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     columns : [\n         *         { id : 'todo', text : 'Todo', color : 'orange', tooltip : 'These are items to be done' }\n         *     ]\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-column b-taskboard-color-orange\">\n         * ```\n         *\n         * Which can the be used for example like:\n         *\n         * ```css\n         * .b-taskboard-column-header {\n         *     border-left : 5px solid currentColor; // where currentColor is the color defined by b-taskboard-color-orange\n         * }\n         * ```\n         *\n         * Using non-named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     columns : [\n         *         { id : 'todo', text : 'Todo', color : 'hsl(229deg 66% 42%)' }\n         *     ]\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-column\" style=\"color: hsl(229deg 66% 42%)\">\n         * ```\n         *\n         * Predefined named colors (actual color might vary by theme):\n         * <div class=\"b-colorbox b-inline b-taskboard-color-red\"></div>red,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-pink\"></div>pink,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-purple\"></div>purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-purple\"></div>deep-purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-indigo\"></div>indigo,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-blue\"></div>blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-blue\"></div>light-blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-cyan\"></div>cyan,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-teal\"></div>teal,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-green\"></div>green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-green\"></div>light-green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-lime\"></div>lime,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-yellow\"></div>yellow,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-amber\"></div>amber,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-orange\"></div>orange,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-orange\"></div>deep-orange\n         *\n         * @field {String} color\n         */\n        { name : 'color', type : 'string' },\n\n        /**\n         * Number of tasks per row to display in this column. Leave blank to use the setting from the\n         * {@link TaskBoard.view.TaskBoardBase#config-tasksPerRow} config on TaskBoard.\n         * @field {Number} tasksPerRow\n         */\n        'tasksPerRow',\n\n        /**\n         * Allow collapsing this column\n         * @field {Boolean} collapsible=true\n         */\n        { name : 'collapsible', type : 'boolean', defaultValue : true },\n\n        /**\n         * Collapsed (`true`) or expanded (`false`)\n         *\n         * To expand or collapse, use {@link #function-expand} and  {@link #function-collapse} functions.\n         *\n         * @field {Boolean} collapsed\n         * @readonly\n         */\n        { name : 'collapsed', type : 'boolean' },\n\n        /**\n         * Set to `true` to hide the column, `false` to show it again.\n         * @field {Boolean} hidden\n         */\n        { name : 'hidden', type : 'boolean' },\n\n        /**\n         * Column width in px.\n         * @field {Number} width\n         */\n        { name : 'width', type : 'number' },\n\n        /**\n         * Column flex, affects width.\n         * @field {Number} flex\n         */\n        { name : 'flex', type : 'number' },\n\n        /**\n         * Column min-width in px. To override the default min-width specified in CSS.\n         * @field {Number} minWidth\n         */\n        { name : 'minWidth', type : 'number' }\n\n    ];\n\n    /**\n     * Get the tasks in this column in visual order.\n     * @property {TaskBoard.model.TaskModel[]}\n     * @readonly\n     */\n    get tasks() {\n        return this.taskBoard.getColumnTasks(this, true);\n    }\n\n    get taskBoard() {\n        return this.firstStore.taskBoard;\n    }\n\n    /**\n     * Collapse this column.\n     *\n     * Uses a transition by default, await the call to be certain that it has finished.\n     *\n     * @category Expand/collapse\n     * @returns {Promise} A promise which is resolved when the column is collapsed\n     */\n    async collapse() {\n        return this.taskBoard.collapse(this);\n    }\n\n    /**\n     * Expand this column.\n     *\n     * Uses a transition by default, await the call to be certain that it has finished.\n     *\n     * @category Expand/collapse\n     * @returns {Promise} A promise which is resolved when the column is expanded\n     */\n    async expand() {\n        return this.taskBoard.expand(this);\n    }\n}\n","import EventModel from '../../Scheduler/model/EventModel.js';\n\n/**\n * @module TaskBoard/model/TaskModel\n */\n\n/**\n * Represents a single task on your TaskBoard, usually added to a {@link TaskBoard/store/TaskStore}.\n *\n * ## Customizing Task fields\n *\n * The TaskModel has a few predefined fields as seen under Fields below. If you want to add new fields or change\n * existing fields, you can do that by subclassing this class:\n *\n * ```javascript\n * class MyTask extends TaskModel {\n *\n *     static get fields() {\n *         return [\n *            // Add a new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     }\n *\n *     ...\n * }\n *\n * // Instances of your class now has getters / setters defined for your field\n * const task = new MyTask();\n * console.log(task.myField); // => 0\n * ```\n *\n * If you want to use other names for any predefined field in your data, you can reconfigure them as seen below:\n *\n * ```javascript\n * class MyTask extends TaskModel {\n *\n *     static get fields() {\n *         return [\n *            // Remap status -> state\n *            { name: 'status', dataSource : 'state' }\n *         ];\n *     }\n *\n *     ...\n * }\n * ```\n *\n * ## Configuring the Project to use a custom task model\n *\n * Here's how you configure the {@link TaskBoard/model/ProjectModel Project} to use a certain Model class:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     // Configure the project to use our custom task model and to load data remotely\n *     project : {\n *         taskModelClass : MyTask,\n *\n *         autoLoad  : true\n *         transport : {\n *             load : {\n *                 url : 'data/data.json'\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Read-only tasks\n *\n * A task can be flagged as read-only using the {@link #field-readOnly} field. This protects it from being edited in the\n * UI, but has no effect on the data layer.\n *\n * {@inlineexample TaskBoard/model/TaskModelReadOnly.js}\n *\n * Please refer to {@link Core/data/Model} for additional details.\n *\n * @extends Scheduler/model/EventModel\n */\nexport default class TaskModel extends EventModel {\n\n    static $name = 'TaskModel';\n\n    static fields = [\n        /**\n         * Task status, for example for linking to a column on the TaskBoard.\n         *\n         * @field {String} status\n         */\n        'status',\n\n        /**\n         * Task priority, for example for linking to a swimlane on the TaskBoard.\n         *\n         * @field {String|Number} prio\n         */\n        'prio',\n\n        /**\n         * Task description, by default shown in tasks body.\n         *\n         * @field {String} description\n         */\n        'description',\n\n        /**\n         * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS\n         * class to the tasks card. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the card.\n         *\n         * If no color is specified, any color defined on the {@link TaskBoard/model/ColumnModel#field-color column} or\n         * {@link TaskBoard/model/SwimlaneModel#field-color swimlane} will apply instead.\n         *\n         * By default it does not visually affect the UI, but it applies a color to the task that applications can\n         * leverage using `currentColor` to style it in the desired way.\n         *\n         * Using named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     project {\n         *         tasksData : [\n         *             { id : 1, name : 'Important task', eventColor : 'red' }\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-card b-taskboard-color-red\">\n         * ```\n         *\n         * Which can the be used for example like:\n         *\n         * ```css\n         * .b-taskboard-card {\n         *     // currentColor is the color defined by b-red\n         *     border-left : 5px solid currentColor;\n         * }\n         * ```\n         *\n         * Using non-named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     project {\n         *         tasksData : [\n         *             { id : 1, name : 'Important task', eventColor : '#ff0000' }\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-card\" style=\"color: #ff0000\">\n         * ```\n         *\n         * Predefined named colors (actual color might vary by theme):\n         * <div class=\"b-colorbox b-inline b-taskboard-color-red\"></div>red,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-pink\"></div>pink,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-purple\"></div>purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-purple\"></div>deep-purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-indigo\"></div>indigo,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-blue\"></div>blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-blue\"></div>light-blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-cyan\"></div>cyan,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-teal\"></div>teal,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-green\"></div>green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-green\"></div>light-green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-lime\"></div>lime,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-yellow\"></div>yellow,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-amber\"></div>amber,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-orange\"></div>orange,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-orange\"></div>deep-orange,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-gray\"></div>gray,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-gray\"></div>light-gray\n         *\n         * @field {'red'|'pink'|'purple'|'deep-purple'|'indigo'|'blue'|'light-blue'|'cyan'|'teal'|'green'|'light-green'|'lime'|'yellow'|'amber'|'orange'|'deep-orange'|'gray'|'light-gray'|String|null} eventColor\n         */\n        'eventColor',\n\n        /**\n         * Task weight, used by default to determine its index in a column. Higher weights are displayed further down.\n         *\n         * The weight is applied as a default sorter to the {@link TaskBoard/store/TaskStore}.\n         *\n         * When no weights are defined, task order is determined by store order.\n         *\n         * @field {Number} weight\n         */\n        { name : 'weight', type : 'number' },\n\n        /**\n         * Set to `true` to make the task read-only, preventing it from being edited in the UI.\n         *\n         * See the class description above for a live demo.\n         *\n         * @field {Boolean} readOnly\n         */\n        { name : 'readOnly', type : 'boolean' }\n    ];\n}\n","import EventStore from '../../Scheduler/data/EventStore.js';\nimport TaskModel from '../model/TaskModel.js';\n\n/**\n * @module TaskBoard/data/TaskStore\n */\n\n/**\n * Store that holds the tasks of a TaskBoard. By default configured to use {@link TaskBoard.model.TaskModel} for its\n * records.\n *\n * Loaded and handled as a part of a {@link TaskBoard.model.ProjectModel project}. For example using inline data:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     project : {\n *         // Data to load into the TaskStore\n *         tasksData : [\n *             { id : 1, name : 'Some task', status : 'todo', prio : 'low' }\n *         ]\n *     }\n * }\n * ```\n *\n * When loaded using the {@link Scheduler.data.mixin.ProjectCrudManager CrudManager} functionality of the project, it\n * is populated from the `'tasks'` property in the\n * response:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     project : {\n *         transport : {\n *             load : {\n *                 url : 'load.php'\n *             }\n *         },\n *\n *         autoLoad : true\n *     }\n * }\n * ```\n *\n * Expected response format to populate the TaskStore:\n *\n * ```json\n * {\n *     \"success\"     : true,\n *     \"tasks\"       : {\n *         \"rows\" : [\n *             {\n *                 \"id\"     : 1,\n *                 \"name\"   : \"Important task\",\n *                 \"status\" : \"todo\",\n *                 \"prio\"   : \"high\"\n *             },\n *             ...\n *         ]\n *     }\n * }\n * ```\n *\n * @extends Scheduler/data/EventStore\n */\nexport default class TaskStore extends EventStore {\n    static configurable = {\n\n        autoAssignWeight : true,\n\n        storeId : 'tasks',\n\n        /**\n         * Class used to represent records, defaults to {@link TaskBoard.model.TaskModel}\n         * @config {TaskBoard.model.TaskModel}\n         * @typings {typeof TaskModel}\n         * @category Common\n         */\n        modelClass : TaskModel,\n\n        /**\n         * Configure with `true` to also remove the event when removing the last assignment from the linked\n         * AssignmentStore.\n         *\n         * Defaults to `false` for TaskBoard since it is unexpected that a tasks disappears when unassigning the last\n         * resource from it.\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        removeUnassignedEvent : false,\n\n        /**\n         * Initial sorters, format is `[{ field: 'name', ascending: false }, ...]`.\n         *\n         * By default the TaskStore is sorted by `weight`, tasks with higher weights are displayed further down.\n         *\n         * @config {Sorter[]|String[]}\n         * @category Common\n         */\n        sorters : [\n            { field : 'weight', ascending : true }\n        ]\n    };\n\n    afterLoadData() {\n        const { records } = this;\n\n        if (this.autoAssignWeight && !records.some(r => r.weight != null)) {\n            for (let i = 0; i < records.length; i++) {\n                records[i].setData('weight', (i + 1) * 100);\n            }\n        }\n    }\n}\n","import SchedulerProjectModel from '../../Scheduler/model/ProjectModel.js';\nimport ProjectCrudManager from '../../Scheduler/data/mixin/ProjectCrudManager.js';\nimport TaskStore from '../store/TaskStore.js';\nimport TaskModel from './TaskModel.js';\n\n/**\n * @module TaskBoard/model/ProjectModel\n */\n\n/**\n * This class represents a global project of your TaskBoard - a central place for all data.\n *\n * It holds and links the stores usually used by TaskBoard:\n *\n * - {@link TaskBoard.store.TaskStore}\n * - {@link Scheduler.data.ResourceStore}\n * - {@link Scheduler.data.AssignmentStore}\n *\n * ## Loading remote data\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     project : {\n *         // Project configuration\n *     }\n * });\n * ```\n *\n * ## Loading inline data\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     project : {\n *         // Project configuration\n *     }\n * });\n * ```\n *\n * ## Getting modifications\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     project : {\n *         // Project configuration\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core.data.stm.StateTrackingManager StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\n * project store changes:\n *\n * ```javascript\n * // Turn on auto recording when you create your TaskBoard:\n * const taskBoard = new TaskBoard({\n *     project : {\n *         stm : {\n *             autoRecord : true\n *         }\n *     }\n * });\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * @extends Scheduler/model/ProjectModel\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n *\n * @typings Scheduler.model.ProjectModel -> Scheduler.model.SchedulerProjectModel\n */\nexport default class ProjectModel extends SchedulerProjectModel.mixin(ProjectCrudManager) {\n\n    static configurable = {\n        /**\n         * Get/set {@link #property-taskStore} data.\n         *\n         * Always returns an array of {@link TaskBoard.model.TaskModel} but also accepts an array of\n         * its configuration objects as input.\n         *\n         * @member {TaskBoard.model.TaskModel[]} tasks\n         * @accepts {TaskBoard.model.TaskModel[]|TaskModelConfig[]}\n         * @category Inline data\n         */\n\n        /**\n         * The initial data, to fill the {@link #property-taskStore} with. Should be an array of\n         * {@link TaskBoard.model.TaskModel} or its configuration objects.\n         *\n         * @config {TaskBoard.model.TaskModel[]|TaskModelConfig[]} tasks\n         * @category Inline data\n         */\n\n        /**\n         * The initial data, to fill the {@link #property-taskStore} with.\n         * Should be an array of {@link TaskBoard.model.TaskModel} instances or its configuration objects.\n         *\n         * @config {TaskBoard.model.TaskModel[]|TaskModelConfig[]} tasksData\n         * @category Legacy inline data\n         */\n\n        /**\n         * The {@link TaskBoard.store.TaskStore store} holding the tasks information.\n         *\n         * See also {@link TaskBoard.model.TaskModel}\n         *\n         * @member {TaskBoard.store.TaskStore} taskStore\n         * @category Models & Stores\n         */\n\n        /**\n         * An {@link TaskBoard.store.TaskStore} instance or a config object.\n         * @config {TaskStoreConfig|TaskBoard.store.TaskStore} taskStore\n         * @category Models & Stores\n         */\n\n        /**\n         * @hideconfigs timeRanges\n         *              timeRangeStore,\n         *              timeRangesData,\n         *              timeRangeStoreClass,\n         *              resourceTimeRanges,\n         *              resourceTimeRangeStore,\n         *              resourceTimeRangesData,\n         *              resourceTimeRangeStoreClass,\n         *              eventStoreClass,\n         *              eventModelClass\n         */\n\n        /**\n         * @hideproperties timeRangeStore,\n         *                 resourceTimeRangeStore\n         */\n\n        eventStoreClass : TaskStore,\n        eventModelClass : TaskModel,\n\n        /**\n         * The constructor to create a task store instance with.\n         * Should be a class, subclassing the {@link TaskBoard.store.TaskStore}.\n         * @config {TaskBoard.store.TaskStore}\n         * @typings {typeof TaskStore}\n         * @category Models & Stores\n         */\n        taskStoreClass : TaskStore,\n\n        /**\n         * The constructor of the task model class, to be used in the project.\n         * Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n         * property of the {@link #property-taskStore}.\n         * @config {TaskBoard.model.TaskModel}\n         * @typings {typeof TaskModel}\n         * @category Models & Stores\n         */\n        taskModelClass : TaskModel\n    };\n\n    construct(config) {\n        if (config.tasks) {\n            config.eventsData = config.tasks;\n        }\n\n        if (config.tasksData) {\n            config.eventsData = config.tasksData;\n        }\n\n        if (config.taskStore) {\n            config.eventStore = config.taskStore;\n        }\n\n        if (config.taskModelClass) {\n            config.eventModelClass = config.taskModelClass;\n        }\n\n        if (config.taskStoreClass) {\n            config.eventStoreClass = config.taskStoreClass;\n        }\n\n        super.construct(config);\n\n        const me = this;\n\n        me.addPrioritizedStore(me.assignmentStore);\n        me.addPrioritizedStore(me.resourceStore);\n        me.addPrioritizedStore(me.taskStore);\n    }\n\n    get taskStore() {\n        return this.eventStore;\n    }\n\n    set taskStore(store) {\n        this.eventStore = store;\n    }\n\n    get tasksData() {\n        return this.eventsData;\n    }\n\n    set tasksData(data) {\n        this.eventsData = data;\n    }\n\n    get tasks() {\n        return this.eventsData;\n    }\n\n    set tasks(data) {\n        this.eventsData = data;\n    }\n\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this project to json.\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     tasksData       : [...],\n     *     resourcesData   : [...],\n     *     assignmentsData : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // Result:\n     * {\n     *     taskData : [...],\n     *     resourcesData : [...],\n     *     assignmentsData : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        const\n            { taskStore, assignmentStore, resourceStore } = this,\n            result = {\n                tasksData : taskStore.toJSON()\n            };\n\n        if (assignmentStore?.count) {\n            result.assignmentsData = assignmentStore.toJSON();\n        }\n\n        if (resourceStore?.count) {\n            result.resourcesData = resourceStore.toJSON();\n        }\n\n        return result;\n    }\n}\n","import Model from '../../Core/data/Model.js';\n/**\n * @module TaskBoard/model/SwimlaneModel\n */\n\n/**\n * Represents a single swimlane on a TaskBoard.\n *\n * When creating a TaskBoard, you can optionally supply an initial set of swimlanes. These are either defined as plain\n * strings, SwimlaneModel data objects or SwimlaneModel records (or a mix thereof). When using strings, the string will\n * be used as is as the swimlane's id and capitalized as its text.\n *\n * ```javascript\n * const highPrio = new SwimlaneModel({\n *     id   : 'high',\n *     text : 'High prio'\n * });\n *\n * const taskBoard = new TaskBoard({\n *     swimlanes : [\n *         // String, equal to passing { id : 'low', text : 'Low' }\n *         'low',\n *         // Data object, in this case with a fixed height and not collapsible from the UI\n *         { id : 'medium', text : 'Medium', height : 200, collapsible : false }\n *         // Record, not commonly used since it is easier to supply the data object directly\n *         highPrio\n *     ]\n * });\n * ```\n *\n * @extends Core/data/Model\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class SwimlaneModel extends Model {\n\n    static $name = 'SwimlaneModel';\n\n    static fields = [\n        /**\n         * The swimlane's unique id, used to match a task to a swimlane (which field on a task to match is specified\n         * using then {@link TaskBoard.view.TaskBoardBase#config-swimlaneField} config on TaskBoard).\n         * @field {String|Number} id\n         */\n\n        /**\n         * Text displayed in the swimlane header.\n         * @field {String} text\n         */\n        { name : 'text', type : 'string' },\n\n        /**\n         * Color, named colors are applied as a `b-taskboard-color-{color}` (for example `b-taskboard-color-red`) CSS\n         * class to the swimlane. Colors specified as hex, `rgb()` etc. are applied as `style.color` to the swilane.\n         *\n         * By default it does not visually affect the UI, but it applies a color to the swimlane that applications can\n         * leverage using `currentColor` to style it in the desired way.\n         *\n         * Using named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     swimlanes : [\n         *         { id : 'high', text : 'High', color : 'red' }\n         *     ]\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-swimlane b-taskboard-color-red\">\n         * ```\n         *\n         * Which can the be used for example like:\n         *\n         * ```css\n         * .b-taskboard-swimlane-header {\n         *     border-left : 5px solid currentColor; // where currentColor is the color defined by b-red\n         * }\n         * ```\n         *\n         * Using non-named colors:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     swimlanes : [\n         *         { id : 'high', text : 'High', color : 'hsl(229deg 66% 42%)' }\n         *     ]\n         * });\n         * ```\n         *\n         * Will result in:\n         *\n         * ```html\n         * <div class=\"b-taskboard-swimlane\" style=\"color: hsl(229deg 66% 42%)\">\n         * ```\n         *\n         * Predefined named colors (actual color might vary by theme):\n         * <div class=\"b-colorbox b-inline b-taskboard-color-red\"></div>red,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-pink\"></div>pink,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-purple\"></div>purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-purple\"></div>deep-purple,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-indigo\"></div>indigo,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-blue\"></div>blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-blue\"></div>light-blue,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-cyan\"></div>cyan,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-teal\"></div>teal,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-green\"></div>green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-light-green\"></div>light-green,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-lime\"></div>lime,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-yellow\"></div>yellow,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-amber\"></div>amber,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-orange\"></div>orange,\n         * <div class=\"b-colorbox b-inline b-taskboard-color-deep-orange\"></div>deep-orange\n         *\n         * @field {String} color\n         */\n        { name : 'color', type : 'string' },\n\n        /**\n         * Allow collapsing this swimlane\n         * @field {Boolean} collapsible=true\n         */\n        { name : 'collapsible', type : 'boolean', defaultValue : true },\n\n        /**\n         * Collapsed (true) or expanded (False).\n         *\n         * To expand or collapse, use TaskBoards {@link TaskBoard.view.mixin.ExpandCollapse#function-expand} and\n         * {@link TaskBoard.view.mixin.ExpandCollapse#function-collapse} functions.\n         *\n         * @field {Boolean} collapsed\n         * @readonly\n         */\n        { name : 'collapsed', type : 'boolean' },\n\n        /**\n        * Set to `true` to hide the swimlane, `false` to show it again.\n        * @field {Boolean} hidden\n        */\n        { name : 'hidden', type : 'boolean' },\n\n        /**\n         * Swimlane height in px.\n         * @field {Number} height\n         */\n        { name : 'height', type : 'number' },\n\n        /**\n         * Swimlane flex, affects height.\n         * @field {Number} flex\n         */\n        { name : 'flex', type : 'number' },\n\n        /**\n         * Number of tasks per row to display in this swimlane. Leave blank to use the setting from the\n         * {@link TaskBoard.view.TaskBoardBase#config-tasksPerRow} config on TaskBoard.\n         * @field {Number} tasksPerRow\n         */\n        'tasksPerRow'\n    ];\n\n    get taskBoard() {\n        return this.firstStore.taskBoard;\n    }\n\n    /**\n     * Collapse this swimlane.\n     *\n     * Uses a transition by default, await the call to be certain that it has finished.\n     *\n     * @category Expand/collapse\n     * @returns {Promise} A promise which is resolved when the column is collapsed\n     */\n    async collapse() {\n        this.taskBoard.collapse(this);\n    }\n\n    /**\n     * Expand this swimlane.\n     *\n     * Uses a transition by default, await the call to be certain that it has finished.\n     *\n     * @category Expand/collapse\n     * @returns {Promise} A promise which is resolved when the column is expanded\n     */\n    async expand() {\n        return this.taskBoard.expand(this);\n    }\n\n    /**\n     * Get tasks in this swimlane.\n     * @property {TaskBoard.model.TaskModel[]}\n     * @readonly\n     */\n    get tasks() {\n        return [...(this.taskBoard.getSwimlaneTasks(this) || [])];\n    }\n}\n","import Base from '../../../Core/Base.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/ExpandCollapse\n */\n\n/**\n * Mixin that handles expanding and collapsing swimlanes and columns on the TaskBoard.\n *\n * {@inlineexample TaskBoard/view/mixin/ExpandCollapse.js}\n *\n * Users can expand and collapse using the UI. To do it programmatically, see:\n *\n * * {@link #function-collapse collapse()}\n * * {@link #function-expand expand()}\n * * {@link #function-toggleCollapse toggleCollapse()}\n *\n * Each of them accepts a column or a swimlane to expand/collapse. For example\n *\n * ```javascript\n * taskBoard.collapse(taskBoard.columns.todo);\n * taskBoard.expand(taskBoard.swimlanes.high);\n * ```\n *\n * For convenience, the functions are also callable directly on columns/swimlanes:\n *\n * ```javascript\n * taskBoard.columns.todo.expand();\n * taskBoard.swimlanes.high.collapse();\n * ```\n *\n * Expanding/collapsing is by default transitioned, `await` the calls to be certain that the UI is up to date:\n *\n * ```javascript\n * await taskBoard.collapse(taskBoard.columns.todo);\n * await taskBoard.columns.todo.expand();\n * ```\n *\n * @mixin\n */\nexport default Target => class ExpandCollapse extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'ExpandCollapse';\n\n    static configurable = {\n        /**\n         * Show an icon to expand/collapse columns and swimlanes in their headers.\n         *\n         * Programmatic expand/collapse works independently of this setting, it only affects the UI.\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        showCollapseInHeader : true,\n\n        /**\n         * Specify `true` to hide the column title instead of rotating it on collapse.\n         *\n         * Used by default with swimlanes, since the title will overlap the swimlane header otherwise.\n         *\n         * @config {Boolean}\n         * @default\n         * @category Misc\n         */\n        collapseTitle : false,\n\n        /**\n         * By default, a tooltip showing `Expand XX`/`Collapse XX` is shown when hovering the expand/collapse icon for\n         * a column or swimlane. To disable the tooltip, set this to `false`.\n         * @prp {Boolean}\n         * @default\n         * @category Misc\n         */\n        showCollapseTooltip : true\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeShowCollapseInHeader(showCollapseInHeader) {\n        ObjectHelper.assertBoolean(showCollapseInHeader, 'showCollapseInHeader');\n\n        return showCollapseInHeader;\n    }\n\n    //endregion\n\n    //region Toggling\n\n    /**\n     * Collapse a swimlane or column.\n     *\n     * Await the call to be certain that the collapse transition has ended.\n     *\n     * ```javascript\n     * await taskBoard.collapse(taskBoard.columns.first);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel|TaskBoard.model.ColumnModel} record Swimlane or column\n     * @category Expand & collapse\n     */\n    async collapse(record) {\n        return this.toggleCollapse(record, true);\n    }\n\n    /**\n     * Expand a swimlane or column.\n     *\n     * Await the call to be certain that the expand transition has ended.\n     *\n     * ```javascript\n     * await taskBoard.expand(taskBoard.columns.first);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel|TaskBoard.model.ColumnModel} record Swimlane or column\n     * @category Expand & collapse\n     */\n    async expand(record) {\n        return this.toggleCollapse(record, false);\n    }\n\n    /**\n     * Expand or collapse a swimlane or column.\n     *\n     * Await the call to be certain that the expand/collapse transition has ended.\n     *\n     * ```javascript\n     * // Toggle\n     * await taskBoard.toggleCollapse(taskBoard.columns.first);\n     * // Force collapse\n     * await taskBoard.toggleCollapse(taskBoard.columns.first, true);\n     * // Force expand\n     * await taskBoard.toggleCollapse(taskBoard.columns.first, false);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel|TaskBoard.model.ColumnModel} record Swimlane or column\n     * @param {Boolean} [collapse] Specify to force a certain state, leave out to toggle\n     * @category Expand & collapse\n     */\n    async toggleCollapse(record, collapse = !record.collapsed) {\n        if (record.isSwimlaneModel) {\n            await this.toggleSwimlaneCollapse(record, collapse);\n        }\n        else {\n            await this.toggleColumnCollapse(record, collapse);\n        }\n    }\n\n    async toggleSwimlaneCollapse(swimlaneRecord, collapse = !swimlaneRecord.collapsed) {\n        return new Promise(resolve => {\n            const\n                me              = this,\n                swimlaneElement = me.getSwimlaneElement(swimlaneRecord),\n                swimlaneBody    = DomSync.getChild(swimlaneElement, 'body');\n\n            // Set a height on collapse, to transition down from -> 0\n            if (collapse) {\n                swimlaneBody.style.height = `${swimlaneBody.getBoundingClientRect().height}px`;\n            }\n\n            EventHelper.onTransitionEnd({\n                element  : swimlaneBody,\n                property : 'height',\n                handler() {\n                    // Remove that height on expand, after it has transitioned from 0 to it\n                    if (!collapse) {\n                        swimlaneBody.style.height = '';\n                    }\n\n                    swimlaneElement.classList.remove(collapse ? 'b-collapsing' : 'b-expanding');\n\n                    // Make sure UI is up to date when promise is resolved\n                    me.recompose.flush();\n\n                    resolve();\n                },\n                thisObj : me\n            });\n\n            swimlaneElement.classList.add(collapse ? 'b-collapsing' : 'b-expanding');\n\n            me.suspendDomTransition();\n\n            // This will trigger the recompose\n            swimlaneRecord.collapsed = collapse;\n\n            me.resumeDomTransition();\n        });\n    }\n\n    async toggleColumnCollapse(columnRecord, collapse = !columnRecord.collapsed) {\n        return new Promise(resolve => {\n            const\n                me               = this,\n                { documentRoot } = me,\n                columnElements   = me.getColumnElements(columnRecord),\n                headerElement    = DomSync.getChild(me.bodyElement, `header.${columnRecord.domId}`),\n                // For columns that already has a width specified we won't need to measure and apply current width\n                hasFixedWidth    = columnRecord.width && !columnRecord.flex,\n                cardElements     = documentRoot.querySelectorAll(`.b-taskboard-card[data-column=\"${columnRecord.domId}\"]`),\n                cardWidth        = `${cardElements[0]?.getBoundingClientRect().width}px`,\n                columnWidth      = `${columnElements[0]?.getBoundingClientRect().width}px`;\n\n            // Fix card widths on collapse, to not have their contents reflow during the collapse\n            cardElements.forEach(card => {\n                if (collapse) {\n                    card.style.width = cardWidth;\n                }\n            });\n\n            columnElements.unshift(headerElement);\n\n            columnElements.forEach(element => {\n                // Set a width on collapse, to transition down from -> 0\n                if (collapse) {\n                    if (!hasFixedWidth) {\n                        element.style.width = columnWidth;\n                    }\n\n                    element.classList.add('b-collapsing');\n                }\n                // Add cls to keep flex away a bit longer on expand\n                else {\n                    element.classList.add('b-expanding');\n                }\n            });\n\n            EventHelper.onTransitionEnd({\n                element  : headerElement,\n                property : 'width',\n                handler() {\n                    // Unfix card widths when fully expanded again\n                    cardElements.forEach(card => {\n                        if (!collapse) {\n                            card.style.width = '';\n                        }\n                    });\n\n                    // Remove that width on expand, after it has transitioned from 0 to it\n                    columnElements.forEach(element => {\n                        if (!collapse) {\n                            // Restore width and flex from css\n                            if (!hasFixedWidth) {\n                                element.style.width = '';\n                            }\n                            element.classList.remove('b-expanding');\n                        }\n                        else {\n                            element.classList.remove('b-collapsing');\n                        }\n                    });\n\n                    // Make sure UI is up to date when promise is resolved\n                    me.recompose.flush();\n\n                    // Scroller is not aware of that expanding/collapsing might change overflow state, inform it...\n                    me.scrollable.syncOverflowState();\n\n                    resolve();\n                },\n                thisObj : me\n            });\n\n            // Force browser to reevaluate, for transition to trigger\n            headerElement.offsetWidth;\n\n            me.suspendDomTransition();\n            // This will trigger the recompose\n            columnRecord.collapsed = collapse;\n\n            me.resumeDomTransition();\n        });\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Inject expander icon + expand/collapsed state cls in column headers\n    populateColumnHeader(args) {\n        super.populateColumnHeader?.(args);\n\n        const\n            { showCollapseInHeader, collapseTitle, hasSwimlanes, showCollapseTooltip } = this,\n            { columnRecord, columnHeaderConfig }                                       = args,\n            { text, collapsed, collapsible }                                           = columnRecord;\n\n        DomHelper.merge(columnHeaderConfig, {\n            class : {\n                'b-collapsed'    : collapsed,\n                'b-rotate-title' : collapsed && !collapseTitle && !hasSwimlanes\n            },\n            children : {\n                padder : {\n                    children : {\n                        expander : showCollapseInHeader && collapsible && {\n                            tag   : 'button',\n                            class : {\n                                'b-taskboard-column-expander' : 1,\n                                'b-fw-icon'                   : 1,\n                                'b-icon-expand-column'        : 1\n                            },\n                            dataset : {\n                                btip : showCollapseTooltip\n                                    ? StringHelper.xss`${this.L(collapsed ? 'L{TaskBoard.expand}' : 'L{TaskBoard.collapse}', text)}`\n                                    : null\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Inject expand/collapsed state cls in columns\n    populateColumn(args) {\n        super.populateColumn?.(args);\n\n        const\n            { columnRecord, columnConfig } = args,\n            { collapsed }                  = columnRecord;\n\n        columnConfig.class['b-collapsed'] = collapsed;\n    }\n\n    // Inject expander icon + expand/collapsed state cls in swimlanes\n    populateSwimlane(args) {\n        super.populateColumn?.(args);\n\n        const { swimlaneRecord, swimlaneConfig } = args;\n\n        if (swimlaneRecord) {\n            const\n                { showCollapseInHeader, showCollapseTooltip } = this,\n                { text, collapsed, collapsible }              = swimlaneRecord;\n\n            DomHelper.merge(swimlaneConfig, {\n                class : {\n                    'b-collapsed'   : collapsed,\n                    'b-collapsible' : collapsible\n                },\n                children : {\n                    header : {\n                        children : {\n                            title : {\n                                children : {\n                                    // Before text\n                                    'expander > text' : showCollapseInHeader && collapsible && {\n                                        tag   : 'button',\n                                        class : {\n                                            'b-taskboard-swimlane-expander' : 1,\n                                            'b-icon'                        : 1,\n                                            'b-icon-expand-row'             : 1\n                                        },\n                                        dataset : {\n                                            btip : showCollapseTooltip\n                                                ? StringHelper.xss`${this.L(collapsed ? 'L{TaskBoard.expand}' : 'L{TaskBoard.collapse}', text)}`\n                                                : null\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    body : {\n                        [collapsed ? 'inert' : null] : true\n                    }\n                }\n            });\n        }\n    }\n\n    //endregion\n\n    //region Listeners\n\n    onColumnHeaderClick({ event, columnRecord }) {\n        if (event.target.matches('.b-taskboard-column-expander') || columnRecord.collapsed) {\n            this.toggleCollapse(columnRecord);\n        }\n    }\n\n    onColumnClick({ columnRecord }) {\n        if (columnRecord.collapsed) {\n            this.toggleCollapse(columnRecord);\n        }\n    }\n\n    onSwimlaneHeaderClick({ swimlaneRecord }) {\n        this.toggleCollapse(swimlaneRecord);\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/ResponsiveCards\n */\n\n/**\n * An object that describes a card size level.\n *\n * @typedef {Object} CardSize\n * @property {String} name Level name, applied to the columns element as CSS class `b-[name]-cards`\n * @property {Number} maxWidth Express in px. This level applies above the previous levels maxWidth and up to this value\n * @property {Number} maxAvatars Max number of resource avatars to render, when that feature is used\n * @property {Object<String,TaskItemOptions>} headerItems A config object for items in a card's header, merges with\n * {@link TaskBoard.view.TaskBoard#config-headerItems} to determine items for this card size\n * @property {Object<String,TaskItemOptions>} bodyItems A config object for items in a card's header, merges with\n * {@link TaskBoard.view.TaskBoard#config-bodyItems} to determine items for this card size\n * @property {Object<String,TaskItemOptions>} footerItems A config object for items in a card's header, merges with\n * {@link TaskBoard.view.TaskBoard#config-footerItems} to determine items for this card size\n */\n\n/**\n * Mixin that allows responsive card behaviours.\n *\n * {@inlineexample TaskBoard/view/mixin/ResponsiveCards.js}\n *\n * It monitors column sizes using a ResizeObserver. When a columns width changes, it calculates the width of the cards\n * in that column based on the columns width and the configured number of tasks per row (see\n * {@link TaskBoard.view.TaskBoard#config-tasksPerRow}).\n *\n * The card width is then used to pick a {@link #config-cardSizes}, which applies CSS and might also affect task items.\n *\n * By default the following levels are defined:\n *\n * | Width | Name   | Cls            | Avatars | Items                       |\n * |-------|--------|----------------|---------|-----------------------------|\n * | < 50  | micro  | b-micro-cards  | 1       | Only resource avatars shown |\n * | < 75  | tiny   | b-tiny-cards   | 1       |                             |\n * | < 175 | small  | b-small-cards  | 1       |                             |\n * | < 300 | medium | b-medium-cards | 3       |                             |\n * | > 300 | large  | b-large-cards  | 7       |                             |\n *\n * If for example cards in a column are above 50px and below 75px wide, that column will have the `b-tiny-cards` CSS\n * class applied to its element. Use it to style the cards in a suitable way for your application, perhaps by applying\n * a smaller font size, hiding images etc.\n *\n * @mixin\n */\nexport default Target => class ResponsiveCards extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'ResponsiveCards';\n\n    static configurable = {\n        /**\n         * An array of {@link CardSize} objects to use as responsive levels based on card widths.\n         *\n         * By default, the following levels are defined:\n         *\n         * | Width | Name   | Cls            | Avatars | Items                       |\n         * |-------|--------|----------------|---------|-----------------------------|\n         * | < 50  | micro  | b-micro-cards  | 1       | Only resource avatars shown |\n         * | < 75  | tiny   | b-tiny-cards   | 1       | Body text hidden            |\n         * | < 175 | small  | b-small-cards  | 2       | Body text hidden            |\n         * | < 300 | medium | b-medium-cards | 3       |                             |\n         * | > 300 | large  | b-large-cards  | 7       |                             |\n         *\n         * @config {CardSize}\n         * @category Common\n         */\n        cardSizes : [\n            {\n                maxWidth    : 50,\n                name        : 'micro',\n                maxAvatars  : 1,\n                headerItems : {\n                    text : null\n                },\n                bodyItems : {\n                    text : null\n                }\n            },\n            {\n                maxWidth   : 75,\n                name       : 'tiny',\n                maxAvatars : 1,\n                bodyItems  : {\n                    text : null\n                }\n            },\n            {\n                maxWidth   : 175,\n                name       : 'small',\n                maxAvatars : 2,\n                bodyItems  : {\n                    text : null\n                }\n            },\n            { maxWidth : 250, name : 'medium', maxAvatars : 3 },\n            { name : 'large', maxAvatars : 7 }\n        ],\n\n        resizeObserver : {\n            value   : true,\n            $config : ['nullify']\n        }\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeCardSizes(cardSizes) {\n        ObjectHelper.assertArray(cardSizes, 'cardSizes');\n\n        return cardSizes;\n    }\n\n    //endregion\n\n    //region Suspend/resume responsiveness\n\n    responsivenessSuspended = 0;\n\n    suspendResponsiveness() {\n        this.responsivenessSuspended++;\n    }\n\n    resumeResponsiveness() {\n        this.responsivenessSuspended--;\n    }\n\n    //endregion\n\n    //region Calculate card size\n\n    // Get a card size entity, very similar to a responsive level in Grid\n    getCardSize(columnRecord, swimlaneRecord) {\n        const\n            me            = this,\n            { cardSizes } = me,\n            perRow        = me.getTasksPerRow(columnRecord, swimlaneRecord),\n            columnWidth   = me.getColumnWidth(columnRecord),\n            // Three cards on a row shares the column width with 2 gaps.\n            // Column padding is not measured and thus not part of calc\n            // |               |\n            // | █ gap █ gap █ |\n            // |               |\n            cardWidth     = (columnWidth - me.cardGap * (perRow - 1)) / perRow;\n\n        // <remove-on-release>\n        // TODO: Cache until next resize\n        // </remove-on-release>\n\n        return cardSizes?.find(size => cardWidth < size.maxWidth) || cardSizes?.[cardSizes.length - 1];\n    }\n\n    // Get the last reported width for a column, set by the ResizeObserver\n    getColumnWidth(columnRecord) {\n        return columnRecord.instanceMeta(this).width;\n    }\n\n    // Number of tasks per row to render for the requested column / swimlane intersection.\n    // Prio order is columns config, swimlanes config and lastly taskboards config\n    getTasksPerRow(columnRecord, swimlaneRecord) {\n        return columnRecord.tasksPerRow || swimlaneRecord?.tasksPerRow || this.tasksPerRow;\n    }\n\n    //endregion\n\n    //region ResizeObserver\n\n    // ResizeObserver callback for column size changes\n    onChildResize(entries) {\n        const me = this;\n\n        if (me.recompose.suspended || me.responsivenessSuspended) {\n            return;\n        }\n\n        // If any columns width changed enough for it to change card size level (medium -> large etc) we need to\n        // recompose to allow UI to react\n        let shouldRecompose = false;\n\n        for (const entry of entries) {\n            const { target, contentRect } = entry;\n\n            // Only care about width\n            if (target.observedWidth !== contentRect.width) {\n                const\n                    columnRecord   = me.resolveColumnRecord(target),\n                    // We are observing the headers, but need to calculate card size per column / swimlane intersection\n                    columnElements = columnRecord && me.columns.includes(columnRecord) && me.getColumnElements(columnRecord);\n\n                // Bail out when collapsing or hiding the column or if we did not get any record, which can happen\n                // during recompose when switching column set\n                if (!columnRecord || columnRecord.collapsed || columnRecord.hidden || !columnElements) {\n                    return;\n                }\n\n                // Cache width on element and column record (for easy lookup later)\n                columnRecord.instanceMeta(me).width = target.observedWidth = contentRect.width;\n\n                for (const columnElement of columnElements) {\n                    const\n                        swimlaneRecord = me.resolveSwimlaneRecord(columnElement),\n                        cardSize       = me.getCardSize(columnRecord, swimlaneRecord);\n\n                    // Was the size change enough to take us to a new card size level?\n                    if (cardSize && columnElement.elementData.cardSize !== cardSize.name) {\n                        shouldRecompose = true;\n                    }\n                }\n            }\n        }\n\n        if (shouldRecompose) {\n            me.recompose.now();\n            me.scrollable.syncOverflowState();\n        }\n    }\n\n    // ResizeObserver used to monitor column size, observing set up in domSyncCallback\n    changeResizeObserver(observer, oldObserver) {\n        oldObserver?.disconnect();\n\n        // Resize observer could be set to null for FireFox testing\n        return this.isDestroying || !ResizeObserver ? null : new ResizeObserver(this.onChildResize.bind(this));\n    }\n\n    //endregion\n\n    //region Rendering\n\n    populateColumn(args) {\n        super.populateColumn?.(args);\n\n        const\n            { columnRecord, swimlaneRecord, columnConfig } = args,\n            // Tag cardSize along with args, to be reachable from renderer\n            cardSize = args.cardSize                       = this.getCardSize(columnRecord, swimlaneRecord);\n\n        if (cardSize) {\n            columnConfig.class[`b-${cardSize.name}-cards`] = cardSize;\n            columnConfig.elementData.cardSize = cardSize.name;\n        }\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport Store from '../../../Core/data/Store.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ColumnModel from '../../model/ColumnModel.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardColumns\n */\n\nconst transitionChangeActions = {\n    remove : 1,\n    move   : 1,\n    update : 1,\n    filter : 1\n};\n\n/**\n * Mixin that handles columns for the TaskBoard.\n *\n * @mixin\n */\nexport default Target => class TaskBoardColumns extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardColumns';\n\n    static configurable = {\n        /**\n         * Store containing the TaskBoard columns.\n         *\n         * @member {Core.data.Store} columns\n         * @category Common\n         */\n        /**\n         * Store containing the TaskBoard columns. A tasks {@link #config-columnField} is matched against the `id` of a\n         * column to determine in which column it is displayed.\n         *\n         * Accepts an array of column records/objects/strings, a store instance, a store id or a store config object\n         * used to create a new store.\n         *\n         * When supplying an array, a store configured with {Core.data.mixin.StoreProxy#config-objectify} is\n         * automatically created. Using that config allows for a nicer interaction syntax with the columns:\n         *\n         * ```javascript\n         * // Without objectify:\n         * taskBoard.columns.getById('done').text = 'Finished';\n         *\n         * // With objectify:\n         * taskBoard.columns.done.text = 'Finished';\n         * ```\n         *\n         * When supplying strings, the raw string will be used as the columns `id` and a capitalized version of it is\n         * used as the columns text:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *    columns : [\n         *        'doing',\n         *        'done'\n         *    ]\n         * });\n         * ```\n         *\n         * Is equivalent to:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *    columns : [\n         *        { id : 'doing', text : 'Doing' },\n         *        { id : 'done', text : 'Done' }\n         *    ]\n         * });\n         * ```\n         *\n         * @config {TaskBoard.model.ColumnModel[]|ColumnModelConfig[]|String[]|Core.data.Store|String|StoreConfig}\n         * @category Common\n         */\n        columns : {},\n\n        /**\n         * Set to `true` to auto generate columns when {@link #config-columns} is undefined.\n         *\n         * A column will be created for each distinct value of {@link #config-columnField} on the tasks. The columns\n         * will be sorted in alphabetical order. The following snippet will yield two columns, Q1 and Q2:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    columnField : 'quarter',\n         *\n         *    autoGenerateColumns : true,\n         *\n         *    project : {\n         *        tasksData : [\n         *            { id : 1, name : 'Inform tenants', quarter : 'Q1' },\n         *            { id : 2, name : 'Renovate roofs', quarter : 'Q2' }\n         *        ]\n         *    }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         * @category Advanced\n         */\n        autoGenerateColumns : false,\n\n        /**\n         * Field on a task record used to determine which column the task belongs to.\n         *\n         * ```javascript\n         * taskBoard.columnField = 'category';\n         * ```\n         *\n         * @member {String} columnField\n         * @category Common\n         */\n        /**\n         * Field on a task record used to determine which column the task belongs to.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    columnField : 'status',\n         *\n         *    columns : [\n         *        'todo',\n         *        'done'\n         *    ],\n         *\n         *    project : {\n         *        tasksData : [\n         *            // Linked using the status field, to the done column\n         *            { id : 1, name : 'Fun task', status : 'done' }\n         *        ]\n         *    }\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category Common\n         */\n        columnField : null\n    };\n\n    static properties = {\n        shouldAutoGenerateColumns : false\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeAutoGenerateColumns(autoGenerateColumns) {\n        ObjectHelper.assertBoolean(autoGenerateColumns, 'autoGenerateColumns');\n\n        return autoGenerateColumns;\n    }\n\n    changeColumnField(columnField) {\n        ObjectHelper.assertString(columnField, 'columnField');\n\n        return columnField;\n    }\n\n    //endregion\n\n    //region Config - columnField\n\n    updateColumnField(field, old) {\n        if (old) {\n            const { storage } = this.project.taskStore;\n\n            if (old !== this.swimlaneField) {\n                storage.removeIndex(old);\n            }\n            storage.addIndex({ property : field, unique : false });\n        }\n\n        this.shouldAutoGenerateColumns = field && this.autoGenerateColumns;\n    }\n\n    //endregion\n\n    //region Config - columns\n\n    changeColumns(columns) {\n        return Store.from(columns, { objectify : true, modelClass : ColumnModel }, column => {\n            if (typeof column === 'string') {\n                return { id : column, text : StringHelper.capitalize(column) };\n            }\n\n            return column;\n        });\n    }\n\n    updateColumns(columns) {\n        this.detachListeners('columns');\n\n        if (columns) {\n            // Link to us to be able to retrieve tasks in visual order\n            // $store is the store instance of an objectified store\n            (columns.$store || columns).taskBoard = this;\n\n            columns.ion({\n                change  : 'onColumnsChange',\n                refresh : 'onColumnsChange',\n                thisObj : this\n            });\n        }\n    }\n\n    get columns() {\n        const\n            me            = this,\n            { taskStore } = me.project;\n\n        // If there are no columns defined but we have a column field configured and we have tasks loaded, generate\n        // columns from the tasks\n        if (me.shouldAutoGenerateColumns && taskStore.count) {\n            me.columns = taskStore.getDistinctValues(me.columnField).sort();\n            me.shouldAutoGenerateColumns = false;\n        }\n\n        return me._columns;\n    }\n\n    onColumnsChange({ action }) {\n        // CRUD invalidates column/swimlane intersection index\n        if (action === 'add' || action === 'remove' || action === 'removeAll' || action === 'update') {\n            this.project.taskStore.storage.invalidateIndices();\n        }\n\n        if (transitionChangeActions[action]) {\n            const options = {};\n\n            if (action === 'update' || action === 'remove') {\n                options.addTransition = { width : 1, opacity : 1 };\n                options.removeTransition = { width : 1, opacity : 1 };\n            }\n\n            this.recomposeWithDomTransition(options);\n        }\n        else {\n            this.recompose();\n        }\n    }\n\n    //endregion\n\n    //region Data\n\n    // <remove-on-release>\n    // TODO: Move to datalayer\n    // </remove-on-release>\n    getColumnTasks(columnRecord, inVisualOrder = false) {\n        const\n            me            = this,\n            { taskStore } = me.project,\n            set           = taskStore.storage.findItem(me.columnField, columnRecord.id),\n            tasks         = set ? [...set] : [];\n\n        if (inVisualOrder && set) {\n            if (me.swimlanes) {\n                const\n                    { swimlaneField } = me,\n                    swimlanes         = me.swimlanes.map(r => r.id);\n\n                tasks.sort((a, b) => {\n                    // First sort by swimlane\n                    const swimlaneDelta = swimlanes.indexOf(a[swimlaneField]) - swimlanes.indexOf(b[swimlaneField]);\n\n                    if (swimlaneDelta !== 0) {\n                        return swimlaneDelta;\n                    }\n\n                    // And within a swimlane sort by weight order\n                    if (a.weight != null || b.weight != null) {\n                        return a.weight - b.weight;\n                    }\n\n                    // Fall back to store order\n                    return taskStore.indexOf(a) - taskStore.indexOf(b);\n                });\n\n                // Only include tasks for available swimlanes, if used\n                if (swimlanes.length && swimlaneField) {\n                    return tasks.filter(task => swimlanes.includes(task[swimlaneField]));\n                }\n            }\n            else {\n                // Sort by weight within column\n                tasks.sort((a, b) => a.weight - b.weight);\n            }\n        }\n\n        return tasks;\n    }\n\n    getColumn(taskRecord) {\n        return this.columns.getById(taskRecord.getValue(this.columnField));\n    }\n\n    // Next task in the same column as supplied task\n    getNextTask(taskRecord, wrap = true) {\n        const\n            columnRecord = this.getColumn(taskRecord),\n            columnTasks  = columnRecord.tasks;\n\n        let nextTaskIndex = columnTasks.indexOf(taskRecord) + 1;\n\n        if (nextTaskIndex === columnTasks.length) {\n            if (wrap) {\n                nextTaskIndex = 0;\n            }\n            else {\n                return null;\n            }\n        }\n\n        return columnTasks[nextTaskIndex];\n    }\n\n    // Prev task in the same column as supplied task\n    getPreviousTask(taskRecord, wrap = true) {\n        const\n            columnRecord = this.getColumn(taskRecord),\n            columnTasks  = columnRecord.tasks;\n\n        let prevTaskIndex = columnTasks.indexOf(taskRecord) - 1;\n\n        if (prevTaskIndex < 0) {\n            if (wrap) {\n                prevTaskIndex = columnTasks.length - 1;\n            }\n            else {\n                return null;\n            }\n        }\n\n        return columnTasks[prevTaskIndex];\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardDom\n */\n\n/**\n * Mixin that handles resolving elements from records and vice versa.\n *\n * ```javascript\n * // Resolve task record from an element\n * const task = taskBoard.resolveTaskRecord(someElement);\n *\n * // Get tasks element\n * const element = taskBoard.getTaskElement(taskBoard.taskStore.first);\n * ```\n *\n * @mixin\n */\nexport default Target => class TaskBoardDom extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardDom';\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Resolve record from element\n\n    /**\n     * Retrieves a task record corresponding to the supplied element. Has to be a `.b-taskboard-card` element or\n     * descendant thereof.\n     *\n     * ```javascript\n     * const taskRecord = taskBoard.resolveTaskRecord(taskElement);\n     * ```\n     *\n     * @param {HTMLElement} element\n     * @returns {TaskBoard.model.TaskModel}\n     * @category DOM\n     */\n    resolveTaskRecord(element) {\n        element = element.closest('.b-taskboard-card');\n        // If element is a drop indicator, it wont have elementData\n        return element && this.project.taskStore.getById(element.elementData?.taskId);\n    }\n\n    /**\n     * Retrieves a column record resolved from the supplied element. Has to be a `.b-taskboard-column` element or\n     * descendant thereof (such as a card).\n     *\n     * ```javascript\n     * const columnRecord = taskBoard.resolveColumnRecord(taskElement);\n     * ```\n     *\n     * @param {HTMLElement} element\n     * @returns {TaskBoard.model.ColumnModel}\n     * @category DOM\n     */\n    resolveColumnRecord(element) {\n        element = element.closest('.b-taskboard-column, .b-taskboard-column-header');\n        // Headers are b-taskboard-column but without elementData, for now\n        return element && this.columns.getById(element.elementData?.columnId);\n    }\n\n    /**\n     * Retrieves a swimlane record resolved from the supplied element. Has to be a `.b-taskboard-swimlane` element or\n     * descendant thereof.\n     *\n     * ```javascript\n     * const swimlaneRecord = taskBoard.resolveSwimlaneRecord(taskElement);\n     * ```\n     *\n     * @param {HTMLElement} element\n     * @returns {TaskBoard.model.SwimlaneModel}\n     * @category DOM\n     */\n    resolveSwimlaneRecord(element) {\n        element = element.closest('.b-taskboard-swimlane');\n        return element && this.swimlanes?.getById(element.elementData.laneId);\n    }\n\n    //endregion\n\n    //region Get element from record\n\n    /**\n     * Retrieves the task element (card) corresponding to the supplied task record.\n     *\n     * ```javascript\n     * const cardElement = taskBoard.getTaskElement(taskRecord);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel} taskRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getTaskElement(taskRecord) {\n        const taskColumnElement = this.getTaskColumnElement(taskRecord);\n        return taskColumnElement && DomSync.getChild(taskColumnElement, `body.inner.${taskRecord.domId}`);\n    }\n\n    /**\n     * Retrieves the element for the column that holds the supplied task record.\n     *\n     * ```javascript\n     * const columnElement = taskBoard.getColumnElement(taskRecord);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel} taskRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getTaskColumnElement(taskRecord) {\n        const columnRecord = this.columns.getById(taskRecord.getValue(this.columnField));\n        return columnRecord && DomSync.getChild(this.getTaskSwimlaneElement(taskRecord), `body.${columnRecord.domId}`);\n    }\n\n    /**\n     * Retrieves the element for the swimlane that holds the supplied task record.\n     *\n     * ```javascript\n     * const swimlaneElement = taskBoard.getTaskSwimlaneElement(taskRecord);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel} taskRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getTaskSwimlaneElement(taskRecord) {\n        // When not using swimlanes, we still create one called 'default'\n        const laneId = this.swimlanes?.count\n            ? this.swimlanes.getById(taskRecord.getValue(this.swimlaneField))?.domId\n            : 'default';\n\n        return DomSync.getChild(this.bodyElement, laneId);\n    }\n\n    /**\n     * Retrieves the element for the supplied swimlane.\n     *\n     * ```javascript\n     * const swimlaneElement = taskBoard.getSwimlaneElement(taskBoard.swimlanes.first);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getSwimlaneElement(swimlaneRecord) {\n        // Get a swimlane element, does not query DOM and is thus cheap\n        return DomSync.getChild(this.bodyElement, swimlaneRecord.domId);\n    }\n\n    /**\n     * Retrieves the element for the supplied swimlane / column intersection.\n     *\n     * ```javascript\n     * const element = taskBoard.getSwimlaneColumnElement(taskBoard.swimlanes.first, taskBoard.columns.last);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord\n     * @param {TaskBoard.model.ColumnModel} columnRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getSwimlaneColumnElement(swimlaneRecord, columnRecord) {\n        // Called with a swimlaneRecord (public API)\n        if (swimlaneRecord) {\n            // Get the column element for specified column / swimlane intersection, does not query DOM and is thus cheap\n            return DomSync.getChild(this.getSwimlaneElement(swimlaneRecord), `body.${columnRecord.domId}`);\n        }\n        // Called without, happens internally when not using swimlanes - to have simpler code paths\n        else {\n            return this.getColumnElement(columnRecord);\n        }\n    }\n\n    /**\n     * Retrieves the element for the supplied column.\n     *\n     * Only applicable when not using swimlanes. If you are using swimlanes, see {@link #function-getColumnElements}.\n     *\n     * @param {TaskBoard.model.ColumnModel} columnRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getColumnElement(columnRecord) {\n        return this.getColumnElements(columnRecord)?.[0];\n    }\n\n    /**\n     * Retrieves the elements for the supplied column. When using swimlanes, a column has one element per swimlane.\n     *\n     * @param {TaskBoard.model.ColumnModel} columnRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getColumnElements(columnRecord) {\n        // A column can span multiple swimlanes, it will have one element per swimlane.\n        // If we have multiple swimlanes, iterate them and retrieve column elements.\n        // This approach avoids querying DOM and is thus cheap\n        if (this.swimlanes?.count) {\n            return this.swimlanes.reduce((result, lane) => {\n                if (!lane.hidden) {\n                    result.push(this.getSwimlaneColumnElement(lane, columnRecord));\n                }\n                return result;\n            }, []);\n        }\n\n        // No swimlanes, still return as array for consistency\n        return [this.getSwimlaneColumnElement({ domId : 'default' }, columnRecord)];\n    }\n\n    /**\n     * Retrieves the header element for the supplied column.\n     *\n     * @param {TaskBoard.model.ColumnModel} columnRecord\n     * @returns {HTMLElement}\n     * @category DOM\n     */\n    getColumnHeaderElement(columnRecord) {\n        return DomSync.getChild(this.bodyElement, `header.${columnRecord.domId}`);\n    }\n\n    //endregion\n\n    //region Position based\n\n    /**\n     * Get the card element at (x, y)\n     * @param {Number} x\n     * @param {Number} y\n     * @param {String} cardSelector\n     * @returns {HTMLElement}\n     * @internal\n     */\n    getCardAt(x, y, cardSelector = '.b-taskboard-card') {\n        return this.documentRoot.elementFromPoint(x, y)?.closest(cardSelector);\n    }\n\n    //endregion\n\n    //region Cached measurements\n\n    // <remove-on-release>\n    // TODO: Reset on CSS var change somehow? Or perhaps not likely to be needed\n    // </remove-on-release>\n\n    cacheCSSVar(name, defaultValue) {\n        const me = this;\n\n        let size = me[`_${name}`];\n\n        if (size == null) {\n            const value = me.css[name];\n\n            size  = DomHelper.measureSize(value || defaultValue, me.element);\n\n            if (value) {\n                me[`_${name}`] = size;\n            }\n        }\n\n        return size;\n    }\n\n    // Cached card gap\n    get cardGap() {\n        return this.cacheCSSVar('cardGap', '1em');\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardDomEvents\n */\n\n/**\n * Mixin that handles dom events (click etc) for the TaskBoard and its columns and cards.\n *\n * {@inlineexample TaskBoard/view/mixin/TaskBoardDomEvents.js}\n *\n * Snippet showing two ways to add listeners:\n *\n * ```javascript\n * // Listener defined as part of config\n * const taskBoard = new TaskBoard({\n *     listeners : {\n *        taskClick({ taskRecord }) {\n *            Toast.show(`Clicked on ${taskRecord.name}`);\n *        }\n *     }\n * });\n *\n * // Listener added at runtime\n * taskBoard.on('taskDblClick', ({ taskRecord }) => { ... });\n * ```\n *\n * @mixin\n */\nexport default Target => class TaskBoardDomEvents extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardDomEvents';\n\n    static configurable = {\n        /**\n         * The name of the event that should activate a task and trigger editing (if an editing feature is active).\n         * Available options are: 'taskClick', 'taskDblClick' or null (disable)\n         * @default\n         * @config {'taskClick'|'taskDblClick'|null}\n         * @category Advanced\n         */\n        activateTaskEvent : 'taskDblClick',\n\n        domEvents : {\n            click       : 'click',\n            dblclick    : 'dblClick',\n            mouseup     : 'mouseUp',\n            mousedown   : 'mouseDown',\n            mousemove   : 'mouseMove',\n            mouseover   : 'mouseOver',\n            mouseout    : 'mouseOut',\n            keydown     : 'keyDown',\n            contextmenu : 'contextMenu'\n        },\n\n        domListeners : {}\n    };\n\n    #hoveredCardElement = null;\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggered when a card is clicked.\n     *\n     * ```javascript\n     * taskBoard.on('taskClick', ({ taskRecord }) => {\n     *    Toast.show(`Clicked on ${taskRecord.name}`);\n     * });\n     * ```\n     *\n     * @event taskClick\n     * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {TaskBoard.model.ColumnModel} columnRecord Column record for the tasks column\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord Swimlane record for the tasks swimlane (if used)\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a card is double clicked\n     *\n     * ```javascript\n     * taskBoard.on('taskDblClick', ({ taskRecord }) => {\n     *    Toast.show(`Double clicked on ${taskRecord.name}`);\n     * });\n     * ```\n     *\n     * @event taskDblClick\n     * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {TaskBoard.model.ColumnModel} columnRecord Column record for the tasks column\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord Swimlane record for the tasks swimlane (if used)\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse enters a card\n     *\n     * ```javascript\n     * taskBoard.on('taskMouseEnter', ({ taskRecord }) => {\n     *    Toast.show(`Mouse entered ${taskRecord.name}`);\n     * });\n     * ```\n     *\n     * @event taskMouseEnter\n     * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {TaskBoard.model.ColumnModel} columnRecord Column record for the tasks column\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord Swimlane record for the tasks swimlane (if used)\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when the mouse leaves a card\n     *\n     * ```javascript\n     * taskBoard.on('taskMouseLeave', ({ taskRecord }) => {\n     *    Toast.show(`Mouse left ${taskRecord.name}`);\n     * });\n     * ```\n     *\n     * @event taskMouseLeave\n     * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {TaskBoard.model.ColumnModel} columnRecord Column record for the tasks column\n     * @param {TaskBoard.model.SwimlaneModel} swimlaneRecord Swimlane record for the tasks swimlane (if used)\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a task is \"activated\" by pressing `Enter` or double clicking it.\n     *\n     * By default this leads to the task editor being shown.\n     *\n     * ```javascript\n     * taskBoard.on('activateTask', ({ taskRecord }) => {\n     *    Toast.show(`Activated ${taskRecord.name}`);\n     * });\n     * ```\n     *\n     * @event activateTask\n     * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a task is rendered.\n     *\n     * This happens on initial render, when a task is added or when the task element is updated.\n     *\n     * Listening to this event allows you to manipulate the tasks element directly after it has been updated. Please\n     * note that we strongly recommend using a `taskRenderer` to manipulate the DomConfig used to update the task for\n     * most scenarios.\n     *\n     * If you listen for this event and manipulate the element in some way, you should also listen for\n     * `removeTaskElement` and revert/clean up the changes there.\n     *\n     * @event renderTask\n     * @param {TaskBoard.view.TaskBoard} source TaskBoard instance\n     * @param {TaskBoard.model.TaskModel} taskRecord Task being rendered\n     * @param {Boolean} isRefresh `true` if the element was updated, `false` if it was added\n     * @param {HTMLElement} element Tasks element\n     */\n\n    /**\n     * Triggered when all tasks in the task board are rendered\n     * @event renderTasks\n     * @param {TaskBoard.view.TaskBoard} source TaskBoard instance\n     * @param {TaskBoard.model.TaskModel[]} taskRecords Tasks being rendered\n     */\n\n    /**\n     * Triggered when a tasks element is removed.\n     *\n     * This happens when a task is removed or when it is move to another swimlane / column (in which case a `renderTask`\n     * event is triggered for the new element).\n     *\n     * If you used listener for `renderTask` to alter the element of tasks, you should also listen for this event to\n     * clean that modification up.\n     *\n     * @event removeTaskElement\n     * @param {TaskBoard.view.TaskBoard} source TaskBoard instance\n     * @param {String|Number} taskId Id of the task (not the record itself since it might be removed)\n     * @param {HTMLElement} element Tasks element\n     */\n\n    //endregion\n\n    //region Triggering\n\n    // Sets the domListeners up, all relayed to triggerDomEvent()\n    changeDomListeners(domListeners) {\n        if (domListeners) {\n            for (const eventName in this.domEvents) {\n                domListeners[eventName] = 'triggerDomEvent';\n            }\n        }\n\n        return domListeners;\n    }\n\n    // Resolve records from the passed event\n    resolveEvent(event) {\n        const\n            { target }     = event,\n            taskRecord     = this.resolveTaskRecord(target),\n            columnRecord   = this.resolveColumnRecord(target),\n            swimlaneRecord = this.resolveSwimlaneRecord(target);\n\n        return { taskRecord, columnRecord, swimlaneRecord, event };\n    }\n\n    // \"Re-trigger\" a dom event as one of ours, populated with records and prefixed with either 'task'  or 'column'\n    // depending on event target\n    triggerDomEvent(event) {\n        const\n            me         = this,\n            args       = me.resolveEvent(event),\n            name       = me.domEvents[event.type],\n            { target } = event;\n\n        // Bail out for fields on a card, or if we are scrolling (_element to not trigger a recompose)\n        if (me.isScrolling || target.closest('.b-widget') !== me._element) {\n            return;\n        }\n\n        // Decorate the event for easy access later\n        event.taskBoardData = args;\n\n        let result;\n\n        // Trigger taskDblClick or columnDblClick, depending on what was resolved\n        if (args.taskRecord) {\n            const eventName = `task${StringHelper.capitalize(name)}`;\n\n            result = me.trigger(eventName, args);\n\n            if (eventName === me.activateTaskEvent && !event.defaultPrevented) {\n                me.trigger('activateTask', { taskRecord : args.taskRecord, event });\n            }\n        }\n        else if (args.columnRecord) {\n            if (target.closest('.b-taskboard-column-header')) {\n                result = me.trigger(`columnHeader${StringHelper.capitalize(name)}`, args);\n            }\n            else {\n                result = me.trigger(`column${StringHelper.capitalize(name)}`, args);\n            }\n        }\n        else if (args.swimlaneRecord) {\n            if (target.closest('.b-taskboard-swimlane-header')) {\n                result = me.trigger(`swimlaneHeader${StringHelper.capitalize(name)}`, args);\n            }\n            else {\n                result = me.trigger(`swimlane${StringHelper.capitalize(name)}`, args);\n            }\n        }\n\n        // Allow returning false from taskClick, onTaskClick etc. to prevent triggering 'click'\n        if (result === false) {\n            return;\n        }\n\n        me.trigger(name, args);\n\n        // Conjure up mouseEnter and mouseLeave events from mouseOver/mouseOut\n        if ((name === 'mouseOver' || name === 'mouseOut') && args.taskRecord) {\n            const cardElement = target.closest('.b-taskboard-card');\n\n            if (name === 'mouseOver' && cardElement !== me.#hoveredCardElement) {\n                me.#hoveredCardElement = cardElement;\n\n                me.trigger('taskMouseEnter', args);\n            }\n\n            if (name === 'mouseOut' && !cardElement.contains(event.relatedTarget)) {\n                me.#hoveredCardElement = null;\n\n                me.trigger('taskMouseLeave', args);\n            }\n        }\n    }\n\n    // Called as DomSync syncs elements\n    domSyncCallback({ action, domConfig, lastDomConfig, targetElement : element, syncId }) {\n        const\n            me              = this,\n            { elementType } = domConfig?.elementData ?? {},\n            isRefresh       = action === 'reuseOwnElement';\n\n        // Safeguard against other non dom synced elements being cleaned up\n        if (domConfig) {\n            // Card element synced\n            if (elementType === 'task') {\n                const\n                    { taskId } = domConfig.elementData,\n                    taskRecord = me.project.taskStore.getById(taskId);\n\n                if (action === 'newElement') {\n                    me.cardIntersectionObserver?.observe(element);\n                }\n\n                if (action === 'newElement' || action === 'reuseOwnElement') {\n                    (!me.isVirtualized || taskRecord.instanceMeta(me).intersects) && me.trigger('renderTask', { taskRecord, element, isRefresh });\n                }\n                else if (action === 'removeElement') {\n                    me.cardIntersectionObserver?.unobserve(element);\n                    me.trigger('removeTaskElement', { taskId, element });\n                }\n            }\n\n            // Column\n            else if (elementType === 'column') {\n                const\n                    { columnId, laneId } = domConfig.elementData,\n                    columnRecord         = me.columns.getById(columnId),\n                    swimlaneRecord       = laneId != null && me.swimlanes?.getById(laneId);\n\n                if (action === 'newElement' || action === 'reuseOwnElement') {\n                    me.trigger('renderColumn', { columnRecord, swimlaneRecord, element, isRefresh });\n                }\n                else if (action === 'removeElement') {\n                    me.trigger('removeColumnElement', { columnId, swimlaneRecord, element });\n                }\n            }\n\n            // Swimlane\n            else if (elementType === 'swimlane') {\n                const\n                    { laneId }     = domConfig.elementData,\n                    swimlaneRecord = laneId != null && laneId !== 'default' && me.swimlanes?.getById(laneId);\n\n                // Using swimlanes is optional\n                if (laneId !== 'default') {\n                    if (action === 'newElement' || action === 'reuseOwnElement') {\n                        me.trigger('renderSwimlane', { swimlaneRecord, element, isRefresh });\n                    }\n                    else if (action === 'removeElement') {\n                        me.trigger('removeSwimlaneElement', { swimlaneId : laneId, element });\n                    }\n                }\n            }\n\n            // Column header padder, for resize monitoring\n            else if (domConfig.class?.['b-taskboard-column-header-padder'] && me.resizeObserver) {\n                if (action === 'newElement') {\n                    if (!element.isResizeObserved) {\n                        me.resizeObserver.observe(element);\n                        element.isResizeObserved = true;\n                    }\n                }\n\n                if (action === 'removeElement') {\n                    if (element.isResizeObserved) {\n                        me.resizeObserver.unobserve(element);\n                        delete element.isResizeObserved;\n                    }\n                }\n            }\n\n        }\n    }\n\n    //endregion\n\n    //region Chainable handlers\n\n    onClick() {}\n\n    onMouseMove() {}\n\n    onMouseUp() {}\n\n    onTaskMouseDown() {}\n\n    onTaskClick() {}\n\n    onTaskDblClick() {}\n\n    onTaskContextMenu() {}\n\n    onColumnMouseDown() {}\n\n    onColumnHeaderClick(...args) {\n        super.onColumnHeaderClick(...args);\n    }\n\n    onSwimlaneHeaderClick(...args) {\n        super.onSwimlaneHeaderClick(...args);\n    }\n\n    onActivateTask() {}\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport Scroller from '../../../Core/helper/util/Scroller.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardScroll\n */\n\n/**\n * Mixin that handles scrolling to tasks, columns and swimlanes.\n *\n * {@inlineexample TaskBoard/view/mixin/TaskBoardScroll.js}\n *\n * @mixin\n */\nexport default Target => class TaskBoardScroll extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardScroll';\n\n    static configurable = {\n        /**\n         * Default scroll options, see the options for {@link Core.helper.util.Scroller#function-scrollIntoView}\n         *\n         * Defaults to:\n         *\n         * ```javascript\n         * scrollOptions : {\n         *     animate   : true,\n         *     block     : 'nearest',\n         *     highlight : true\n         * }\n         * ```\n         *\n         * Can be overridden per call for all scroll functions.\n         *\n         * @config {ScrollOptions}\n         * @category Advanced\n         */\n        scrollOptions : {\n            animate   : true,\n            block     : 'nearest',\n            highlight : true\n        },\n\n        testConfig : {\n            scrollOptions : {\n                animate : false,\n                block   : 'nearest'\n            }\n        }\n    };\n\n    get widgetClass() {}\n\n    static delayable = {\n        onScrollEnd : VersionHelper.isTestEnv ? 300 : 100\n    };\n\n    //endregion\n\n    //region Scroll tracking\n\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            const me = this;\n\n            EventHelper.on({\n                element : me.element,\n                scroll() {\n                    me.isScrolling = true;\n                    me.onScrollEnd();\n                },\n                capture : true,\n                thisObj : me\n            });\n        }\n    }\n\n    onScrollEnd() {\n        this.isScrolling = false;\n\n        if (this.recomposeOnScrollEnd) {\n            this.recompose();\n            this.recomposeOnScrollEnd = false;\n        }\n    }\n\n    //endregion\n\n    //region Type assertions\n\n    changeScrollOptions(scrollOptions) {\n        ObjectHelper.assertObject(scrollOptions, 'scrollOptions');\n\n        return scrollOptions;\n    }\n\n    //endregion\n\n    //region Scroll to\n\n    /**\n     * Scroll specified swimlane into view.\n     *\n     * ```javascript\n     * taskBoard.scrollToSwimlane('high');\n     * taskBoard.scrollToSwimlane(taskBoard.swimlanes.last);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel|Number|String} swimlaneOrId Swimlane or its id\n     * @param {ScrollOptions} [options] Scroll options, see {@link #config-scrollOptions}\n     * @category Scrolling\n     */\n    async scrollToSwimlane(swimlaneOrId, options = this.scrollOptions) {\n        const\n            swimlane        = this.swimlanes.getById(swimlaneOrId),\n            swimlaneElement = swimlane && this.getSwimlaneElement(swimlane);\n\n        if (swimlaneElement) {\n            options = ObjectHelper.assign({\n                x       : false,\n                animate : options?.animate || options?.behavior === 'smooth'\n            }, options);\n\n            // <remove-on-release>\n            // TODO: Own a scroller not bound to a specific element to not have to pass rtl on each call?\n            // </remove-on-release>\n            return Scroller.scrollIntoView(swimlaneElement, options, this.rtl);\n        }\n    }\n\n    /**\n     * Scroll specified column into view.\n     *\n     * ```javascript\n     * taskBoard.scrollToColumn('backlog');\n     * taskBoard.scrollToColumn(taskBoard.columns.first);\n     * ```\n     *\n     * @param {TaskBoard.model.ColumnModel|Number|String} columnOrId Column or its id\n     * @param {ScrollOptions} [options] Scroll options, see {@link #config-scrollOptions}\n     * @category Scrolling\n     */\n    async scrollToColumn(columnOrId, options = this.scrollOptions) {\n        const\n            column        = this.columns.getById(columnOrId),\n            columnElement = column && this.getColumnHeaderElement(column);\n\n        if (columnElement) {\n            // Only scroll in the X axis.\n            options = ObjectHelper.assign({\n                animate : options?.animate || options?.behavior === 'smooth',\n                y       : false\n            }, options);\n            return Scroller.scrollIntoView(columnElement, options, this.rtl);\n        }\n    }\n\n    /**\n     * Scroll to the intersection between specified swimlane and column.\n     *\n     * ```javascript\n     * taskBoard.scrollToIntersection('high', 'done');\n     * taskBoard.scrollToIntersection(taskBoard.swimlanes.low, taskBoard.columns.todo);\n     * ```\n     *\n     * @param {TaskBoard.model.SwimlaneModel|Number|String} swimlaneOrId Swimlane or its id\n     * @param {TaskBoard.model.ColumnModel|Number|String} columnOrId Column or its id\n     * @param {ScrollOptions} [options] Scroll options, see {@link #config-scrollOptions}\n     * @category Scrolling\n     */\n    async scrollToIntersection(swimlaneOrId, columnOrId, options = this.scrollOptions) {\n        const\n            swimlane = this.swimlanes.getById(swimlaneOrId),\n            column   = this.columns.getById(columnOrId),\n            target   = swimlane && column && this.getSwimlaneColumnElement(swimlane, column);\n\n        if (target) {\n            options = ObjectHelper.assign({\n                animate    : options?.animate || options?.behavior === 'smooth',\n                edgeOffset : 10\n            }, options);\n            return Scroller.scrollIntoView(target, options, this.rtl);\n        }\n    }\n\n    /**\n     * Scroll the specified task into view.\n     *\n     * ```javascript\n     * taskBoard.scrollToTask(10);\n     * taskBoard.scrollToTask(taskStore.first);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel|Number|String} taskOrId\n     * @param {ScrollOptions} [options] Scroll options, see {@link #config-scrollOptions}\n     * @category Scrolling\n     */\n    async scrollToTask(taskOrId, options = this.scrollOptions) {\n        const\n            me          = this,\n            taskRecord  = me.project.taskStore.getById(taskOrId),\n            taskElement = taskRecord && me.getTaskElement(taskRecord);\n\n        if (taskElement) {\n            const edgeOffset = { start : 10, end : 10, top : 10, bottom : 10 };\n\n            // Make sure we don't end up under column or swimlane headers when using sticky headers\n            if (me.stickyHeaders) {\n                if (me.hasSwimlanes) {\n                    edgeOffset.top += me.getTaskSwimlaneElement(taskRecord).syncIdMap.header.offsetHeight;\n                }\n\n                edgeOffset.top += me.bodyElement.syncIdMap.header.offsetHeight;\n            }\n\n            if (me.isVirtualized && !me.getTaskHeight) {\n                // Rely on native scrolling for cards at an unknown position, due to unknown heights of cards above it.\n                // Native scrolling is able to somewhat compensate for changing heights during the scroll (seems to\n                // always scroll it slightly intersecting the view, no matter which settings)\n                taskElement.scrollIntoView();\n\n                // Wait until the task is rendered\n                await new Promise((resolve, reject) => {\n                    const detach = me.ion({\n                        renderTask({ taskRecord : renderedTaskRecord }) {\n                            if (renderedTaskRecord === taskRecord) {\n                                detach();\n                                resolve();\n                            }\n                        },\n                        expires : {\n                            delay : 200,\n                            alt   : reject\n                        }\n                    });\n                });\n            }\n\n            options = ObjectHelper.assign({\n                animate : options?.animate || options?.behavior === 'smooth',\n                edgeOffset\n            }, options);\n            return Scroller.scrollIntoView(taskElement, options, me.rtl);\n        }\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ProjectModel from '../../model/ProjectModel.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardStores\n */\n\n/**\n * Mixin that handles TaskBoards stores, managed by a {@link TaskBoard.model.ProjectModel project}.\n *\n * @mixin\n */\nexport default Target => class TaskBoardStores extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardStores';\n\n    static configurable = {\n        projectModelClass : ProjectModel,\n\n        /**\n         * The {@link TaskBoard.model.ProjectModel} instance, containing the data visualized by the TaskBoard.\n         * @member {TaskBoard.model.ProjectModel} project\n         * @accepts {TaskBoard.model.ProjectModel|ProjectModelConfig} project\n         * @category Common\n         */\n        /**\n         * A {@link TaskBoard.model.ProjectModel#configs project config object} or an instance that holds all stores and\n         * data used by the TaskBoard.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     project : {\n         *         // Use a custom task model\n         *         taskModelClass : MyTaskModel,\n         *\n         *         // Supply inline data\n         *         tasksData : [\n         *             { id : 1, name: 'Task 1', ... },\n         *             ...\n         *         ]\n         * });\n         * ```\n         *\n         * Project has built in crud manager functionality to handle syncing with a backend:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     project : {\n         *         transport : {\n         *             load : {\n         *                 url : 'data/data.json'\n         *             }\n         *     },\n         *     autoLoad : true\n         * });\n         *\n         * Also has built in state tracking manager functionality to handle undo/redo:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     stm : {\n         *         autoRecord : true,\n         *         disabled   : false\n         *     }\n         * });\n         *\n         * @config {TaskBoard.model.ProjectModel|ProjectModelConfig}\n         * @category Data\n         */\n        project : {},\n\n        /**\n         * Inline {@link Scheduler.model.AssignmentModel assignments}, will be loaded into an internally created\n         * {@link Scheduler.data.AssignmentStore}  as a part of a {@link TaskBoard.model.ProjectModel project}.\n         * @prp {Scheduler.model.AssignmentModel[]|Object[]} assignments\n         * @category Data\n         */\n        assignments : null,\n\n        /**\n         * Inline {@link Scheduler.model.ResourceModel resources}, will be loaded into an internally created\n         * {@link Scheduler.data.ResourceStore} as a part of a {@link TaskBoard.model.ProjectModel project}.\n         * @prp {Scheduler.model.ResourceModel[]|Object[]} resources\n         * @category Data\n         */\n        resources : null,\n\n        /**\n         * Inline {@link TaskBoard.model.TaskModel tasks}, will be loaded into an internally created\n         * {@link TaskBoard.store.TaskStore} as a part of a {@link TaskBoard.model.ProjectModel project}.\n         * @prp {TaskBoard.model.TaskModel[]|Object[]} tasks\n         * @category Data\n         */\n        tasks : null,\n\n        /**\n         * Default values to apply to task records created by task boards features (such as the column header menu and\n         * the column toolbar)\n         *\n         * @config {TaskModelConfig}\n         * @category Data\n         */\n        newTaskDefaults : {},\n\n        loadMaskDefaults : {\n            useTransition : true,\n            showDelay     : 100\n        },\n\n        /**\n         * TaskBoard does not use a sync mask by default. If you want one, see\n         * {@link Core.mixin.LoadMaskable#config-syncMask} for configuration options.\n         *\n         * @config {String|Object|null}\n         * @default null\n         * @category Masking\n         */\n        syncMask : null\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //#region Inline data\n\n    get assignments() {\n        return this.project.assignmentStore.records;\n    }\n\n    updateAssignments(records) {\n        this.project.assignmentStore.data = records;\n    }\n\n    get resources() {\n        return this.project.resourceStore.records;\n    }\n\n    updateResources(records) {\n        this.project.resourceStore.data = records;\n    }\n\n    get tasks() {\n        return this.project.taskStore.records;\n    }\n\n    updateTasks(records) {\n        this.project.taskStore.data = records;\n    }\n\n    //#endregion\n\n    //region Type assertions\n\n    changeNewTaskDefaults(newTaskDefaults) {\n        ObjectHelper.assertObject(newTaskDefaults, 'newTaskDefaults');\n\n        return newTaskDefaults;\n    }\n\n    //endregion\n\n    //region Project\n\n    changeProject(project) {\n        if (project && !project.isModel) {\n            project = this.projectModelClass.new(project);\n        }\n\n        this.attachToProject(project);\n\n        return project;\n    }\n\n    attachToProject(project) {\n        const me = this;\n\n        // Enable masking with CrudManagerView\n        me.bindCrudManager(project);\n\n        if (project) {\n            const { taskStore } = project;\n\n            // Set up indices for the configured columnField & optional swimlaneField, for faster lookups\n            if (taskStore) {\n                const { storage } = taskStore;\n\n                storage.addIndex({ property : me.columnField, unique : false });\n\n                if (me.swimlaneField) {\n                    storage.addIndex({ property : me.swimlaneField, unique : false });\n                }\n\n                // For quicker lookup of tasks in a swimlane/column intersection\n                Reflect.defineProperty(taskStore.$master.modelClass.prototype, 'columnSwimlaneIntersection', {\n                    get() {\n                        return this.buildIndexKey({\n                            [me.columnField]   : this[me.columnField],\n                            [me.swimlaneField] : this[me.swimlaneField]\n                        });\n                    }\n                });\n\n                taskStore.$master.modelClass.prototype.buildIndexKey = function(data) {\n                    return `${data[me.columnField]}-/-${(me.swimlanes?.count && data[me.swimlaneField]) || 'default'}`;\n                };\n\n                storage.addIndex({ property : 'columnSwimlaneIntersection', unique : false, dependentOn : { [me.swimlaneField] : true, [me.columnField] : true } });\n            }\n\n            // Setup store listeners, mostly just recompose\n            me.attachToProjectStore(project.taskStore, {\n                change          : 'onTaskStoreChange',\n                changePreCommit : 'onTaskStoreEarlyChange',\n                refresh         : 'onTaskStoreRefresh'\n            });\n            me.attachToProjectStore(project.assignmentStore);\n            me.attachToProjectStore(project.resourceStore);\n        }\n    }\n\n    // Most store changes leads to a recompose, with exception of some TaskStore changes that are transitioned\n    attachToProjectStore(store, listenersConfig = {}) {\n        this.detachListeners(store.$name);\n\n        store?.ion({\n            name    : store.$name,\n            change  : 'recompose',\n            refresh : 'recompose',\n            thisObj : this,\n\n            ...listenersConfig\n        });\n    }\n\n    //endregion\n\n    //region Listeners\n\n    onTaskStoreEarlyChange({ action }) {\n        if (action === 'add') {\n            this.recomposeWithDomTransition({\n                addTransition : {\n                    height  : 1,\n                    opacity : 1\n                }\n            });\n        }\n    }\n\n    onTaskStoreChange({ action, changes }) {\n        const { columnField, swimlaneField } = this;\n\n        // Task removal and column/swimlane changes are transitioned\n        if (\n            action === 'remove' ||\n            action === 'filter' ||\n            (action === 'update' && (changes[columnField] || (swimlaneField && changes[swimlaneField])))\n        ) {\n            this.recomposeWithDomTransition({\n                removeTransition : {\n                    height  : 1,\n                    opacity : 1\n                }\n            });\n        }\n        else {\n            this.recompose();\n        }\n    }\n\n    onTaskStoreRefresh({ action }) {\n        if (action === 'sort') {\n            // Ignore sort if we override it anyway\n            !this.taskSorterFn && this.recomposeWithDomTransition();\n        }\n        else {\n            this.recompose();\n        }\n    }\n\n    //endregion\n\n    //region Utility\n\n    /**\n     * Add a new task to the specified column / swimlane intersection (swimlane is optional), scroll it into view and\n     * start editing it (if an editing feature is enabled).\n     *\n     * By default the task is created using the data defined in the {@link #config-newTaskDefaults} combined with values\n     * for the `columnField`, the `swimlaneField` and a generated `weight` to place it last. To override these or to\n     * supply your own values for any field, pass the `taskData` argument.\n     *\n     * If project is configured to auto sync changes to backend, the sync request will be awaited before editing starts.\n     *\n     * @param {TaskBoard.model.ColumnModel} columnRecord Column to add the task to\n     * @param {TaskBoard.model.ColumnModel} [swimlaneRecord] Swimlane to add the task to\n     * @param {Object} [taskData] Data for the new task\n     * @category Common\n     */\n    async addTask(columnRecord, swimlaneRecord = null, taskData = {}) {\n        const\n            me         = this,\n            {\n                swimlaneField,\n                swimlanes,\n                project\n            }          = me,\n            columnBody = me.getColumnElement(columnRecord).syncIdMap.body,\n            lastCard   = columnBody.lastElementChild,\n            data       = {\n                [me.columnField] : columnRecord.id,\n                name             : me.L('L{TaskBoard.newTaskName}'),\n                weight           : (project.taskStore.max('weight') ?? 0) + 100,\n                ...me.newTaskDefaults,\n                ...taskData\n            };\n\n        let suspended = false;\n\n        if (swimlaneField) {\n            if (swimlaneRecord) {\n                data[swimlaneField] = swimlaneRecord.id;\n            }\n            else if (swimlanes?.count) {\n                data[swimlaneField] = swimlanes.first.id;\n            }\n        }\n\n        // If add is likely to cause a scroll, opt out of add transition and only animated the scroll\n        if (lastCard && lastCard.offsetTop + lastCard.offsetHeight > columnBody.clientHeight - 100) {\n            me.suspendDomTransition();\n            suspended = true;\n        }\n\n        const\n            // A sync will be scheduled on the add below if using autoSync, catch that\n            synced       = project.autoSync && project.await('sync', false),\n            [taskRecord] = project.taskStore.add(data);\n\n        // To have new tasks element available when trying to scroll to it\n        me.recompose.now();\n\n        // Await transition used when adding tasks, to be certain task is at correct pos\n        if (me.useDomTransition && !me.domTransitionSuspended) {\n            await me.await('transitionedRecompose', false);\n        }\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Await scroll to make sure inline editing works as expected\n        await me.scrollToTask(taskRecord, ObjectHelper.assign({}, me.scrollOptions, { highlight : false, block : 'nearest' }));\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Await any autoSync that we caught above\n        if (synced) {\n            await synced;\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            // Sync likely assigned a new id, make sure we are using that in DOM right away\n            me.recompose.now();\n        }\n\n        suspended && me.resumeDomTransition();\n\n        if (me.features.simpleTaskEdit) {\n            me.editTask(taskRecord);\n        }\n\n        return taskRecord;\n    }\n\n    /**\n     * Removes one or more tasks from the linked task store (and thus the TaskBoard).\n     *\n     * First fires a `'beforeTaskRemove'` event, which is preventable and async. Return `false` or a promise that\n     * resolves to `false` from a listener to prevent the operation.\n     *\n     * ```javascript\n     * taskBoard.on({\n     *     async beforeRemoveTask() {\n     *         const result = await askForConfirmation();\n     *         return result;\n     *     }\n     * });\n     *\n     * taskBoard.remove(myTask);\n     * ```\n     *\n     * @param {TaskBoard.model.TaskModel|TaskBoard.model.TaskModel[]} taskRecord A single task or an array thereof to\n     * remove from the task store.\n     * @returns {Boolean} Returns `true` if the tasks were removed, `false` if the operation was prevented.\n     * @category Common\n     */\n    async removeTask(taskRecord) {\n        const taskRecords = ArrayHelper.asArray(taskRecord);\n\n        /**\n         * Triggered when one or more tasks are to be removed by a call to `removeTask()`.\n         *\n         * The UI routes through `removeTask()` (currently only the task menu offers task removal), this event can be\n         * used to add a confirmation flow or similar to those actions.\n         *\n         * Return `false` or a promise that resolves to `false` in a listener to prevent removal.\n         *\n         * ```javascript\n         * taskBoard.on({\n         *     async beforeRemoveTask() {\n         *         const result = await askForConfirmation();\n         *         return result;\n         *     }\n         * });\n         * ```\n         *\n         * @event beforeTaskRemove\n         * @param {TaskBoard.view.TaskBoard} source This TaskBoard\n         * @param {TaskBoard.model.TaskModel[]} taskRecords Task records to be removed\n         * @preventable\n         * @async\n         */\n        if (await this.trigger('beforeTaskRemove', { taskRecords }) !== false) {\n            this.project.taskStore.remove(taskRecords);\n            return true;\n        }\n\n        return false;\n    }\n\n    //endregion\n};\n","import Base from '../../../Core/Base.js';\nimport Store from '../../../Core/data/Store.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport SwimlaneModel from '../../model/SwimlaneModel.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardSwimlanes\n */\n\n/**\n * Mixin that handles swimlanes for the TaskBoard.\n *\n * @mixin\n */\nexport default Target => class TaskBoardSwimlanes extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardSwimlanes';\n\n    static configurable = {\n        /**\n         * Store containing the TaskBoard swimlanes.\n         *\n         * @member {Core.data.Store} swimlanes\n         * @category Common\n         */\n        /**\n         * Store containing the TaskBoard swimlanes. A tasks {@link #config-swimlaneField} is matched against the `id`\n         * of a swimlane to determine in which swimlane it is displayed.\n         *\n         * Accepts an array of swimlane records/objects, a store instance, a store id or a store config object used to\n         * create a new store.\n         *\n         * When supplying an array, a store configured with {@link Core.data.mixin.StoreProxy#config-objectify} is\n         * automatically created. Using that config allows for a nicer interaction syntax with the swimlanes:\n         *\n         * ```javascript\n         * // Without objectify:\n         * taskBoard.swimlanes.getById('highprio').text = 'Important!';\n         *\n         * // With objectify:\n         * taskBoard.swimlanes.done.text = 'Finished';\n         * ```\n         *\n         * When supplying strings, the raw string will be used as the swimlanes `id` and a capitalized version of it is\n         * used as the swimlanes text:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *    swimlanes : [\n         *        'high',\n         *        'low'\n         *    ]\n         * });\n         * ```\n         *\n         * Is equivalent to:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *    swimlanes : [\n         *        { id : 'high', text : 'High' },\n         *        { id : 'low', text : 'Low' }\n         *    ]\n         * });\n         * ```\n         *\n         * @config {TaskBoard.model.SwimlaneModel[]|SwimlaneModelConfig[]|Core.data.Store|String|StoreConfig}\n         * @category Common\n         */\n        swimlanes : {},\n\n        /**\n         * Set to `true` to auto generate swimlanes when {@link #config-swimlanes} is undefined.\n         *\n         * A swimlane will be created for each distinct value of {@link #config-swimlaneField} on the tasks. The\n         * swimlanes will be sorted in alphabetical order. The following snippet will yield two swimlanes, Q1 and Q2:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    swimlaneField : 'quarter',\n         *\n         *    autoGenerateSwimlanes : true,\n         *\n         *    project : {\n         *        tasksData : [\n         *            { id : 1, name : 'Inform tenants', quarter : 'Q1' },\n         *            { id : 2, name : 'Renovate roofs', quarter : 'Q2' }\n         *        ]\n         *    }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         * @category Advanced\n         */\n        autoGenerateSwimlanes : false,\n\n        /**\n         * Field on a task record used to determine which swimlane the task belongs to.\n         *\n         * ```javascript\n         * taskBoard.swimlaneField = 'category';\n         * ```\n         *\n         * @member {String} swimlaneField\n         * @category Common\n         */\n        /**\n         * Field on a task record used to determine which swimlane the task belongs to.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    // Use the \"prio\" field of tasks to determie which swimlane a task belongs to\n         *    swimlaneField : 'prio',\n         *\n         *    swimlanes : [\n         *        'high',\n         *        'low'\n         *    ],\n         *\n         *    project : {\n         *        tasksData : [\n         *            // Linked using the prio field, to the high swimlane\n         *            { id : 1, name : 'Fun task', prio : 'high' }\n         *        ]\n         *    }\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category Common\n         */\n        swimlaneField : null\n    };\n\n    static properties = {\n        shouldAutoGenerateSwimlanes : false\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeAutoGenerateSwimlanes(autoGenerateSwimlanes) {\n        ObjectHelper.assertBoolean(autoGenerateSwimlanes, 'autoGenerateSwimlanes');\n\n        return autoGenerateSwimlanes;\n    }\n\n    changeSwimlaneField(swimlaneField) {\n        ObjectHelper.assertString(swimlaneField, 'swimlaneField');\n\n        return swimlaneField;\n    }\n\n    //endregion\n\n    //region Config - swimlaneField\n\n    updateSwimlaneField(field, old) {\n        if (old) {\n            const { storage } = this.project.taskStore;\n\n            if (old !== this.columnField) {\n                storage.removeIndex(old);\n            }\n            storage.addIndex({ property : field, unique : false });\n        }\n\n        this.shouldAutoGenerateSwimlanes = field && this.autoGenerateSwimlanes;\n    }\n\n    //endregion\n\n    //region Config - swimlanes\n\n    changeSwimlanes(swimlanes) {\n        return Store.from(swimlanes, { objectify : true, modelClass : SwimlaneModel }, lane => {\n            if (typeof lane === 'string') {\n                return { id : lane, text : StringHelper.capitalize(lane) };\n            }\n\n            return lane;\n        });\n    }\n\n    updateSwimlanes(swimlanes) {\n        this.detachListeners('swimlanes');\n\n        if (swimlanes) {\n            // Link to us to be able to retrieve tasks in visual order\n            // $store is the store instance of an objectified store\n            (swimlanes.$store || swimlanes).taskBoard = this;\n\n            swimlanes.ion({\n                change  : 'onSwimlanesChange',\n                refresh : 'onSwimlanesChange',\n                thisObj : this\n            });\n        }\n    }\n\n    get swimlanes() {\n        const\n            me            = this,\n            { taskStore } = me.project;\n\n        // If there are no swimlanes defined but we have a swimlane field configured and we have tasks loaded, generate\n        // swimlanes from the tasks\n        if (me.shouldAutoGenerateSwimlanes && taskStore.count) {\n            me.swimlanes = taskStore.getDistinctValues(me.swimlaneField).sort();\n            me.shouldAutoGenerateSwimlanes = false;\n        }\n\n        return me._swimlanes;\n    }\n\n    onSwimlanesChange({ action }) {\n        // CRUD invalidates column/swimlane intersection index\n        if (action === 'add' || action === 'remove' || action === 'removeAll' || action === 'update') {\n            this.project.taskStore.storage.invalidateIndices();\n        }\n\n        if (action === 'remove' ||  action === 'update' || action === 'filter') {\n            const options = {};\n\n            if (action === 'update') {\n                options.addTransition = { height : 1, opacity : 1 };\n                options.removeTransition = { height : 1, opacity : 1 };\n            }\n\n            this.recomposeWithDomTransition(options);\n            return;\n        }\n\n        this.recompose();\n    }\n\n    //endregion\n\n    //region Data\n\n    get hasSwimlanes() {\n        return Boolean(this.swimlaneField && this.swimlanes?.count);\n    }\n\n    getSwimlaneTasks(swimlaneRecord) {\n        return this.project.taskStore.storage.findItem(this.swimlaneField, swimlaneRecord.id);\n    }\n\n    getSwimlane(taskRecord) {\n        return this.swimlaneField && this.swimlanes?.getById(taskRecord.getValue(this.swimlaneField));\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskBoardVirtualization\n */\n\n/**\n * Mixin that handles partial virtualization for the TaskBoard.\n * See class docs for {@link TaskBoard/view/TaskBoard} for more information.\n *\n * @mixin\n */\nexport default Target => class TaskBoardVirtualization extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskBoardVirtualization';\n\n    static configurable = {\n        /**\n         * The function is called for each task as part of the render loop, and is expected to return the height in\n         * pixels for the task. Using this function is only recommended when using partial virtualized rendering, see\n         * the {@link #config-virtualize} setting.\n         *\n         * How the height is determined is up to the application, it could for example return a fixed value:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *     getTaskHeight() {\n         *         return 150;\n         *     }\n         * }\n         * ```\n         *\n         * Or get the height from data:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *     getTaskHeight({ taskRecord }) {\n         *         return taskRecord.myTaskHeight;\n         *     }\n         * }\n         * ```\n         *\n         * Or use some custom application logic:\n         *\n         * ```javascript\n         * taskBoard = new TaskBoard({\n         *     getTaskHeight({ taskRecord }) {\n         *         if (taskRecord.isCollapsed) {\n         *             return 20;\n         *         }\n         *\n         *         return taskRecord.myTaskHeight;\n         *     }\n         * }\n         * ```\n         *\n         * @prp {Function}\n         * @param {Object} data\n         * @param {TaskBoard.model.TaskModel} data.taskRecord The task record\n         * @return {Number} The height of the task in pixels\n         * @category Advanced\n         */\n        getTaskHeight : null,\n\n        /**\n         * By turning on this setting you enable partial virtualized rendering for the board, which reduces initial\n         * rendering time and makes interaction less sluggish when using thousands of tasks. The tradeoff is that\n         * scrolling in most cases will be slower.\n         *\n         * For a nice UX, it is strongly recommended to also implement a {@link #config-getTaskHeight} function. Without\n         * it, the height of tasks out of view will be unknown and the behaviour when scrolling will be less than ideal.\n         *\n         * <div class=\"note\">Note that for normal datasets (depending on machine, but roughly <1000 tasks) performance\n         * might be better without partial virtualized rendering, since it adds some overhead.</div>\n         *\n         * <div class=\"note\">Also note that as part of the optimizations for partial virtualized rendering, the inner\n         * element in columns that contain cards is absolutely positioned. This leads to column not being able to\n         * automatically shrink wrap the cards, you will have to set a height on the swimlane (or task board if not\n         * using swimlanes) to size things correctly.</div>\n         *\n         * @prp {Boolean}\n         */\n        virtualize : {\n            value   : null,\n            $config : 'nullify'\n        },\n\n        /**\n         * Whether to draw cards on scroll, or only when scrolling ends.\n         *\n         * Only applies when using partial virtualized rendering (see {@link #config-getTaskHeight}).\n         *\n         * Setting this to `false` will boost scroll performance, but cards scrolled into view will be empty outlines\n         * until scrolling ends.\n         *\n         * @prp {Boolean}\n         */\n        drawOnScroll : true\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions and changers/updaters\n\n    changeVirtualize(virtualize) {\n        ObjectHelper.assertBoolean(virtualize, 'virtualize');\n\n        return virtualize;\n    }\n\n    updateVirtualize(virtualize) {\n        const me = this;\n\n        me.cardIntersectionObserver?.disconnect();\n        me.cardIntersectionObserver = null;\n\n        if (virtualize) {\n            // Observes cards coming into / out of view.\n            // Elements to observe are added from TaskBoardDomEvents#domSyncCallback\n            me.cardIntersectionObserver = new IntersectionObserver(entries => {\n                for (const entry of entries) {\n                    me.onCardIntersection(entry.target, entry.isIntersecting, entry);\n                }\n            });\n        }\n\n        // Allow toggling at runtime (mainly for bigdataset demo)\n        if (!this.isConfiguring && !this.isDestroying) {\n            this.refreshVirtualizedCards();\n        }\n    }\n\n    refreshVirtualizedCards() {\n        const me = this;\n\n        me.recompose.now();\n\n        if (me.cardIntersectionObserver) {\n            for (const taskElement of me.element.querySelectorAll('.b-taskboard-card')) {\n                me.cardIntersectionObserver.observe(taskElement);\n            }\n        }\n    }\n\n    changeGetTaskHeight(getTaskHeight) {\n        getTaskHeight && ObjectHelper.assertFunction(getTaskHeight, 'getTaskHeight');\n\n        return getTaskHeight;\n    }\n\n    updateGetTaskHeight(fn) {\n        // Allow toggling at runtime (mainly for bigdataset demo)\n        if (!this.isConfiguring && !this.isDestroying) {\n            this.refreshVirtualizedCards();\n        }\n    }\n\n    //endregion\n\n    compose(domConfig) {\n        domConfig.class['b-virtualized'] = this.isVirtualized;\n\n        return super.compose(domConfig);\n    }\n\n    get isVirtualized() {\n        return Boolean(this.cardIntersectionObserver);\n    }\n\n    // Flag cards as in view or out of view when their elements are intersecting the viewport (or not anymore)\n    onCardIntersection(cardElement, isIntersecting, entry) {\n        const\n            me              = this,\n            { taskRecord }  = cardElement.elementData,\n            instanceMeta    = taskRecord.instanceMeta(me),\n            wasIntersecting = instanceMeta.intersects;\n\n        if (wasIntersecting !== isIntersecting) {\n            instanceMeta.intersects = isIntersecting;\n            if (!isIntersecting && wasIntersecting) {\n                instanceMeta.lastHeight = entry.boundingClientRect.height;\n            }\n            // Recompose affected column right away if not scrolling, or if configured to draw on scroll\n            if (!me.isScrolling || me.drawOnScroll) {\n                me.queueColumnRecompose(me.getColumn(taskRecord), me.getSwimlane(taskRecord));\n            }\n\n            // Always do a full recompose when scrolling ends, to have all lastDomConfigs up to date\n            if (me.isScrolling) {\n                me.recomposeOnScrollEnd = true;\n            }\n        }\n    }\n\n    //region Rendering\n\n    // Creates a DOM config for the outline of a single card\n    renderCardOutline(taskRecord, columnRecord, swimlaneRecord) {\n        const\n            me                    = this,\n            { id, domId, weight } = taskRecord;\n\n        return {\n            id    : `${me.id}-card-${domId}`,\n            class : {\n                'b-taskboard-card' : true,\n                'b-out-of-view'    : true\n            },\n            tabIndex : 0,\n            dataset  : {\n                task          : domId,\n                column        : columnRecord.id,\n                lane          : swimlaneRecord?.id,\n                weight,\n                domTransition : true\n            },\n            elementData : {\n                elementType : 'task',\n                taskId      : id,\n                taskRecord,\n                columnRecord,\n                swimlaneRecord\n            },\n            style : {\n                height : me.getTaskHeight?.(taskRecord) || taskRecord.instanceMeta(me).lastHeight\n            }\n        };\n    }\n\n    // Overrides renderCard in TaskBoardBase, rendering outlines for cards out of view\n    renderCard(taskRecord, columnRecord, swimlaneRecord) {\n        const\n            { isVirtualized } = this,\n            meta              = taskRecord.instanceMeta(this);\n\n        // Render outlines for cards out of view when using virtualization\n        if (isVirtualized && !meta.dragging && !meta.intersects && !this.isSelected(taskRecord)) {\n            return this.renderCardOutline(taskRecord, columnRecord, swimlaneRecord);\n        }\n    }\n\n    //endregion\n};\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/TextItem\n */\n\n/**\n * Item that displays the value of the configured {@link #config-field} in a XSS safe way.\n *\n * {@inlineexample TaskBoard/view/item/TextItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType text\n */\nexport default class TextItem extends TaskItem {\n    static $name = 'TextItem';\n\n    static type = 'text';\n\n    static render({ domConfig, value, taskRecord, config }) {\n        // Special handling when bound to id\n        if (config.field === 'id' && taskRecord.hasGeneratedId) {\n            domConfig.class['b-generated-id'] = 1;\n            domConfig.text = '✻';\n        }\n        else {\n            domConfig.text = taskRecord.getFieldDefinition(config.field).print(value);\n        }\n    }\n}\n\nTextItem.initClass();\n","import TaskItem from './TaskItem.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport AvatarRendering from '../../../Core/widget/util/AvatarRendering.js';\n\n/**\n * @module TaskBoard/view/item/ResourceAvatarsItem\n */\n\n/**\n * Item displaying avatars or initials for a tasks assigned resources.\n *\n * {@inlineexample TaskBoard/view/item/ResourceAvatarsItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType resourceAvatars\n */\nexport default class ResourceAvatarsItem extends TaskItem {\n    static $name = 'ResourceAvatarsItem';\n\n    static type = 'resourceAvatars';\n\n    /**\n     * Maximum avatars to display by default. The last avatar will render an overflow indicator if the task has more\n     * resources assigned.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *     headerItems : {\n     *         resources : {\n     *             type       : 'resourceAvatars',\n     *             maxAvatars : 5\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * Overridden by card size based settings, see {@link TaskBoard.view.mixin.ResponsiveCards}.\n     *\n     * @config {Number} maxAvatars\n     * @default 7\n     * @category Common\n     */\n\n    /**\n     * Specify `true` to slightly overlap avatars for tasks that have multiple resources assigned. By default, they are\n     * displayed side by side.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *     headerItems : {\n     *         resources : {\n     *             overlap : true\n     *         }\n     *     }\n     * });\n     * ```\n     *\n     * @config {Boolean} overlap\n     */\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * Defaults to use a {@link TaskBoard.widget.ResourcesCombo}.\n     *\n     * @config {String|Object} editor\n     * @default resourcescombo\n     * @category Common\n     */\n    static defaultEditor = { type : 'resourcescombo', pickerWidth : '13em' };\n\n    static render({ taskBoard, domConfig, config, taskRecord, cardSize }) {\n        const\n            maxAvatars            = cardSize?.maxAvatars ?? config.maxAvatars ?? 7,\n            { resourceImagePath } = taskBoard,\n            { resources }         = taskRecord,\n            hasOverflow           = resources.length > maxAvatars,\n            overflowCount         = resources.length - maxAvatars + 1,\n            lastResource          = resources[maxAvatars];\n\n        let { avatarRendering } = taskBoard;\n\n        if (!avatarRendering) {\n            avatarRendering = taskBoard.avatarRendering = new AvatarRendering({\n                element     : taskBoard.element,\n                colorPrefix : 'b-taskboard-background-color-'\n            });\n        }\n\n        if (!taskBoard.project.resourceStore.count) {\n            return false;\n        }\n\n        ObjectHelper.merge(domConfig, {\n            class : {\n                'b-overlap' : config.overlap\n            },\n            children : [\n                // \"Normal\" avatars\n                ...resources\n                    // Want a stable order for resource to not move around on changes\n                    .sort((a, b) => a.name.localeCompare(b.name))\n                    .slice(0, maxAvatars - (hasOverflow ? 1 : 0)) // -1 for the overflow indicator\n                    .map((resource, i) => ({\n                        class : {\n                            'b-taskboard-resource-avatar-wrap' : 1\n                        },\n                        dataset : {\n                            resourceId : resource.id\n                        },\n                        children : [\n                            avatarRendering.getResourceAvatar({\n                                resourceRecord : resource,\n                                imageUrl       : resource.image === false ? null : (resource.imageUrl || resource.image && ((resourceImagePath || '') + resource.image)),\n                                initials       : resource.initials,\n                                color          : resource.eventColor,\n                                dataset        : {\n                                    btip : StringHelper.encodeHtml(resource.name)\n                                }\n                            })\n                        ]\n                    })),\n                // Overflow indicating avatar\n                hasOverflow && {\n                    class : {\n                        'b-taskboard-resource-avatar-overflow' : 1\n                    },\n                    dataset : {\n                        resourceId : '$overflow',\n                        btip       : resources.slice(-overflowCount).map(r => StringHelper.encodeHtml(r.name)).join(', '),\n                        count      : overflowCount\n                    },\n                    children : [\n                        avatarRendering.getResourceAvatar({\n                            resourceRecord : lastResource,\n                            imageUrl       : lastResource.image === false ? null : (lastResource.imageUrl || lastResource.image && (resourceImagePath + lastResource.image)),\n                            initials       : lastResource.initials\n                        })\n                    ]\n                }\n            ],\n            syncOptions : {\n                syncIdField : 'resourceId'\n            }\n        });\n    }\n\n    static onClick({ source : taskBoard, taskRecord, event }) {\n        const element = event.target.closest('.b-resource-avatar, .b-taskboard-resource-avatar-overflow');\n\n        if (element) {\n            if (element.matches('.b-resource-avatar')) {\n                const resourceRecord = taskBoard.project.resourceStore.getById(element.dataset.resourceId);\n                taskBoard.trigger('resourceAvatarClick', { resourceRecord, taskRecord, element, event });\n            }\n            else {\n                taskBoard.trigger('resourceAvatarOverflowClick', { taskRecord, element, event });\n            }\n\n            return false;\n        }\n    }\n}\n\nResourceAvatarsItem.initClass();\n","import Base from '../../../Core/Base.js';\nimport TaskItem from '../item/TaskItem.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n\n// Items used by default\nimport '../item/TextItem.js';\nimport '../item/ResourceAvatarsItem.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskItems\n */\n\nconst\n    fieldLess        = {\n        resourceAvatars : 1,\n        separator       : 1,\n        taskMenu        : 1\n    },\n    taskItemSelector = '.b-taskboard-taskitem',\n    afterRe          = /\\s*<\\s*/,\n    beforeRe         = /\\s*>\\s*/;\n\n/**\n * Mixin that allows adding multiple predefined items (sort of like task widgets) to tasks:\n *\n * {@inlineexample TaskBoard/view/mixin/TaskItems.js}\n *\n * You can pick from the following item types:\n *\n * * {@link TaskBoard/view/item/ImageItem image}\n * * {@link TaskBoard/view/item/ProgressItem progress}\n * * {@link TaskBoard/view/item/RatingItem rating}\n * * {@link TaskBoard/view/item/ResourceAvatarsItem resourceAvatars}\n * * {@link TaskBoard/view/item/SeparatorItem separator}\n * * {@link TaskBoard/view/item/TagsItem tags}\n * * {@link TaskBoard/view/item/TemplateItem template}\n * * {@link TaskBoard/view/item/TextItem text}\n * * {@link TaskBoard/view/item/TodoListItem todoList}\n *\n * All of which are included in this demo:\n *\n * {@inlineexample TaskBoard/view/mixin/TaskItemsAll.js}\n *\n * ## Configuring which items to use\n *\n * Task cards are divided into three sections, header, body and footer. Each section can hold items. The following items\n * are defined by default:\n *\n * | Section     | Key             | Type                                                            | Bound to           |\n * |-------------|-----------------|-----------------------------------------------------------------|--------------------|\n * | headerItems | text            | {@link TaskBoard/view/item/TextItem text}                       | name               |\n * | bodyItems   | text            | {@link TaskBoard/view/item/TextItem text}                       | description        |\n * | footerItems | resourceAvatars | {@link TaskBoard/view/item/ResourceAvatarsItem resourceAvatars} | assigned resources |\n *\n * Add items to tasks by supplying the {@link #config-bodyItems bodyItems config} (the other sections work the same):\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     bodyItems : {\n *         // Will use \"prio\" as its field\n *         prio  : { type : 'text' },\n *         // Will use \"status\" as its field\n *         state : { type : 'text', field : 'status' }\n *     }\n * });\n * ```\n *\n * The items you supply are merged with the predefined items (as listed in the table above).\n *\n * The only always required config for new items is `type`, which determines what kind of task item to use. Which other\n * configs you can use depends on the item type.\n *\n * By default the key in the `items` object will be used to link the item to a field on a task. You can override the\n * default by using the `field` config.\n *\n * To rearrange items, specify the {@link TaskBoard/view/item/TaskItem#config-order} config of each item. Applied as\n * flex order.\n *\n * You can also add items to a tasks header and footer, using {@link #config-headerItems} and\n * {@link #config-footerItems}.\n *\n * ## Manipulating items per task\n *\n * You can manipulate which items are shown for a task by supplying a {@link #config-processItems} function. It will be\n * called during rendering for each task and in it you can manipulate the passed `bodyItems` object. Set a property of\n * it to `null` to remove that item for that task:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     bodyItems : {\n *         progress  : { type : 'progress' }\n *     },\n *\n *     processItems({ taskRecord, bodyItems }) {\n *         if (taskRecord.status === 'done') {\n *             bodyItems.progress = null;\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample TaskBoard/view/mixin/TaskItemsProcessItems.js}\n *\n * @mixin\n */\nexport default Target => class TaskItems extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskItems';\n\n    static configurable = {\n        /**\n         * Items in card header.\n         *\n         * As an object keyed by field names, values are {@link TaskBoard/view/item/TaskItem#configs TaskItem configs}.\n         *\n         * Reassigning this property merges the supplied object with the configured items:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    headerItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         *\n         * taskBoard.headerItems = {\n         *     status : { hidden : true },\n         *     tags   : { type : 'tags' }\n         * };\n         *\n         * // Results in:\n         * //\n         * // headerItems = {\n         * //     status : { type : 'text', hidden: true }\n         * //     tags   : { type : 'tags' }\n         * // }\n         * }\n         * ```\n         *\n         * @member {Object<String,TaskItemOptions>} headerItems\n         * @category Task content\n         */\n\n        /**\n         * Items to add to each card's header.\n         *\n         * Supplied keys are used to bind to a field on the {@link TaskBoard/model/TaskModel task record}, supplied\n         * values are used to configure the {@link TaskBoard/view/item/TaskItem#configs items}.\n         *\n         * You are always required to supply a `type`, see the docs for each item type for more information on available\n         * configs.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    headerItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         * ```\n         *\n         * For more information, see the {@link #class-description class description} above.\n         *\n         * @config {Object<String,TaskItemOptions>}\n         * @category Task content\n         */\n        headerItems : {\n            value : {\n                text : { type : 'text', field : 'name' }\n            },\n\n            $config : {\n                merge : 'items'\n            }\n        },\n\n        /**\n         * Items to add to each card's body.\n         *\n         * As an object keyed by field names, values are {@link TaskBoard/view/item/TaskItem#configs TaskItem configs}.\n         *\n         * Reassigning this property merges the supplied object with the configured items:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    bodyItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         *\n         * taskBoard.bodyItems = {\n         *     status : { hidden : true },\n         *     tags   : { type : 'tags' }\n         * };\n         *\n         * // Results in:\n         * //\n         * // bodyItems = {\n         * //     status : { type : 'text', hidden: true }\n         * //     tags   : { type : 'tags' }\n         * // }\n         * }\n         * ```\n         *\n         * @member {Object<String,TaskItemOptions>} bodyItems\n         * @category Task content\n         */\n\n        /**\n         * Items to add to each card's body.\n         *\n         * Supplied keys are used to bind to a field on the {@link TaskBoard/model/TaskModel task record}, supplied\n         * values are used to configure the {@link TaskBoard/view/item/TaskItem#configs items}.\n         *\n         * You are always required to supply a `type`, see the docs for each item type for more information on available\n         * configs.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    bodyItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         * ```\n         *\n         * For more information, see the {@link #class-description class description} above.\n         *\n         * @config {Object<String,TaskItemOptions>}\n         * @category Task content\n         */\n        bodyItems : {\n            value : {\n                text : { type : 'text', field : 'description' }\n            },\n\n            $config : {\n                merge : 'items'\n            }\n        },\n\n        /**\n         * Items in card footer.\n         *\n         * As an object keyed by field names, values are {@link TaskBoard/view/item/TaskItem#configs TaskItem configs}.\n         *\n         * Reassigning this property merges the supplied object with the configured items:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    footerItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         *\n         * taskBoard.footerItems = {\n         *     status : { hidden : true },\n         *     tags   : { type : 'tags' }\n         * };\n         *\n         * // Results in:\n         * //\n         * // footerItems = {\n         * //     status : { type : 'text', hidden: true }\n         * //     tags   : { type : 'tags' }\n         * // }\n         * }\n         * ```\n         *\n         * @member {Object<String,TaskItemOptions>} footerItems\n         * @category Task content\n         */\n\n        /**\n         * Items to add to each card's footer.\n         *\n         * Supplied keys are used to bind to a field on the {@link TaskBoard/model/TaskModel task record}, supplied\n         * values are used to configure the {@link TaskBoard/view/item/TaskItem#configs items}.\n         *\n         * You are always required to supply a `type`, see the docs for each item type for more information on available\n         * configs.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    footerItems : {\n         *        status : { type : 'text' }\n         *    }\n         * });\n         * ```\n         *\n         * For more information, see the {@link #class-description class description} above.\n         *\n         * @config {Object<String,TaskItemOptions>}\n         * @category Task content\n         */\n        footerItems : {\n            value : {\n                resourceAvatars : { type : 'resourceAvatars', field : 'resources' }\n            },\n\n            $config : {\n                merge : 'items'\n            }\n        },\n\n        /**\n         * A function called on each render before adding items to a tasks card, allowing runtime manipulation of them.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     processItems({ bodyItems, taskRecord }) {\n         *        // Remove the progress item for done tasks\n         *        if (taskRecord.status === 'done') {\n         *            bodyItems.progress = null;\n         *        }\n         *     }\n         * });\n         * ```\n         *\n         * NOTE: The function is only intended for manipulating the passed items, you should not update the passed\n         * `taskRecord` in it since updating records triggers another round of rendering.\n         *\n         * @param {Object} context\n         * @param {Object<String,TaskItemOptions>} context.headerItems Item config objects for the task header, keyed by ref\n         * @param {Object<String,TaskItemOptions>} context.bodyItems Item config objects for the task body, keyed by ref\n         * @param {Object<String,TaskItemOptions>} context.footerItems Item config objects for the task footer, keyed by ref\n         * @param {TaskBoard.model.TaskModel} context.taskRecord Record representing task to be rendered\n         * @config {Function}\n         * @category Task content\n         */\n        processItems : null\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeProcessItems(processItems) {\n        ObjectHelper.assertFunction(processItems, 'processItems');\n\n        return processItems;\n    }\n\n    //endregion\n\n    // region Configuring items\n\n    // <remove-on-release>\n    // TODO: Discuss with Don. Cant the merge on the config be active always?\n    // </remove-on-release>\n    mergeItems(items, old) {\n        if (old && items) {\n            items = ObjectHelper.mergeItems(old, items);\n        }\n\n        return items;\n    }\n\n    // Needed to allow reconfiguring on the fly (for responsive)\n    changeHeaderItems(items, old) {\n        ObjectHelper.assertObject(items, 'headerItems');\n\n        return this.mergeItems(items, old);\n    }\n\n    // Needed to allow reconfiguring on the fly (for responsive)\n    changeBodyItems(items, old) {\n        ObjectHelper.assertObject(items, 'bodyItems');\n\n        return this.mergeItems(items, old);\n    }\n\n    // Needed to allow reconfiguring on the fly (for responsive)\n    changeFooterItems(items, old) {\n        ObjectHelper.assertObject(items, 'footerItems');\n\n        return this.mergeItems(items, old);\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Render items to header, body or footer of the supplied task\n    renderItems(taskRecord, items, target, cardSize) {\n        for (const key in items) {\n            const config = items[key];\n            if (config && !config.hidden) {\n                // Defaults to use the key as the field, but allows overriding it using the field config\n                if (!('field' in config)) {\n                    if (key.includes('>')) {\n                        [config.field] = key.split(beforeRe);\n                    }\n                    else if (key.includes('<')) {\n                        [, config.field] = key.split(afterRe);\n                    }\n                    else {\n                        config.field = key;\n                    }\n                }\n\n                const\n                    { field } = config,\n                    value     = taskRecord.getValue(field);\n\n                // Most fields render nothing if they have no value, some are excluded from that logic (separator etc)\n                if (value != null || fieldLess[config.type]) {\n                    const\n                        // TaskItem implements factoryable, we are not using instances but rather static items to avoid\n                        // creating one instance per card. Thus we only use the lookup functionality of factoryable\n                        item      = TaskItem.resolveType(config.type),\n                        typeCls   = `b-taskboard-${StringHelper.hyphenate(config.type)}`,\n                        // Base DomConfig, shared by all task items\n                        domConfig = {\n                            class : {\n                                'b-taskboard-taskitem' : 1,\n                                [typeCls]              : 1,\n                                [config.cls]           : config.cls,\n                                'b-editable'           : !taskRecord.readOnly && item.getEditorConfig({ config, item })\n                            },\n                            dataset : {\n                                role : `item-${field}`,\n                                field,\n                                ref  : key\n                            },\n                            elementData : {\n                                item,\n                                taskRecord,\n                                config\n                            },\n                            style : {\n                                order : config.order,\n                                style : config.style\n                            }\n                        },\n                        // Call items (static) renderer, further populating the DomConfig from above\n                        result    = item.render({ taskBoard : this, domConfig, value, config, taskRecord, cardSize });\n\n                    // Returning false from an items renderer prevents it from being shown\n                    if (result !== false) {\n                        target.children[key] = domConfig;\n                    }\n                }\n            }\n        }\n    }\n\n    // Hook into card rendering\n    populateCard(args) {\n        super.populateCard?.(args);\n\n        const\n            me                                   = this,\n            { processItems }                     = me,\n            { taskRecord, cardConfig, cardSize } = args,\n            {\n                headerItems : sizeHeaderItems,\n                bodyItems   : sizeBodyItems,\n                footerItems : sizeFooterItems\n            }                                    = cardSize || {},\n            { header, body, footer }             = cardConfig.children;\n\n        let { headerItems, bodyItems, footerItems } = me;\n\n        // Items are shared between all cards, clone before processing to only affect the set for this card\n        if (sizeHeaderItems || processItems) {\n            headerItems = ObjectHelper.clone(headerItems);\n        }\n\n        if (sizeBodyItems || processItems) {\n            bodyItems = ObjectHelper.clone(bodyItems);\n        }\n\n        if (sizeFooterItems || processItems) {\n            footerItems = ObjectHelper.clone(footerItems);\n        }\n\n        // Apply any card size specific items\n        sizeHeaderItems && ObjectHelper.merge(headerItems, sizeHeaderItems);\n        sizeBodyItems && ObjectHelper.merge(bodyItems, sizeBodyItems);\n        sizeFooterItems && ObjectHelper.merge(footerItems, sizeFooterItems);\n\n        // Allow app a shot at processing the items before they are shown. Can be used to add or remove items and\n        // manipulate configs\n        processItems?.({ headerItems, bodyItems, footerItems, taskRecord, cardSize });\n\n        // Render items into card header, body and footer\n        me.renderItems(taskRecord, headerItems, header, cardSize);\n        me.renderItems(taskRecord, bodyItems, body, cardSize);\n        me.renderItems(taskRecord, footerItems, footer, cardSize);\n    }\n\n    //endregion\n\n    //region Listeners\n\n    resolveTaskItem(element) {\n        // First look up, if inside an item. Then looks down, in case given a card or similar\n        const taskItemElement = element.closest(taskItemSelector) || element.querySelector(`:scope > * > ${taskItemSelector}, :scope > ${taskItemSelector}`);\n\n        if (taskItemElement) {\n            return {\n                ...taskItemElement.elementData,\n                element : taskItemElement\n            };\n        }\n\n        return null;\n    }\n\n    // Relay clicks to items\n    onTaskClick(args) {\n        const taskItem = this.resolveTaskItem(args.event.target);\n\n        if (taskItem) {\n            const { config, item  } = taskItem;\n\n            item.onClick?.({\n                config,\n                ...args\n            });\n        }\n\n        super.onTaskClick(args);\n    }\n\n    // Relay double clicks to items\n    onTaskDblClick(args) {\n        const taskItem = this.resolveTaskItem(args.event.target);\n\n        if (taskItem) {\n            const { config, item  } = taskItem;\n\n            item.onDblClick?.({\n                config,\n                ...args\n            });\n        }\n\n        super.onTaskDblClick(args);\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskNavigation\n */\n\nconst navigationActions = ['navigateDown', 'navigateLeft', 'navigateUp', 'navigateRight', 'activate'];\n\n/**\n * Mixin that handles keyboard navigation for the TaskBoard.\n *\n * See {@link TaskBoard.view.TaskBoard#keyboard-shortcuts} for information on keyboard navigation.\n *\n * @mixin\n */\nexport default Target => class TaskNavigation extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskNavigation';\n\n    static configurable = {\n        // Documented on TaskBoard\n        keyMap : {\n            ArrowDown  : 'navigateDown',\n            ArrowLeft  : 'navigateLeft',\n            ArrowUp    : 'navigateUp',\n            ArrowRight : 'navigateRight',\n            Enter      : 'activate'\n        },\n\n        navigateable : true,\n\n        /**\n         * Configure with `true` to change the default behaviour of keyboard navigation from moving focus to selecting\n         * tasks:\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *     selectOnNavigation : true\n         * });\n         * ```\n         *\n         * @config {Boolean|String}\n         * @default\n         * @category Selection\n         */\n        selectOnNavigation : false\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Utility\n\n    getTaskNear(x, y) {\n        const\n            { documentRoot } = this,\n            gap              = DomHelper.measureSize(\n                this.css.cardGap || '1em',\n                this.bodyElement.querySelector('.b-taskboard-swimlane-body .b-taskboard-column')\n            );\n\n        let task = documentRoot.elementFromPoint(x, y)?.closest('.b-taskboard-card');\n\n        // Nothing there, might have hit a gap, look up\n        if (!task) {\n            task = documentRoot.elementFromPoint(x, y - gap)?.closest('.b-taskboard-card');\n        }\n\n        // Still nothing, look down\n        if (!task) {\n            task = documentRoot.elementFromPoint(x, y + gap)?.closest('.b-taskboard-card');\n        }\n\n        return task;\n    }\n\n    //endregion\n\n    //region Navigation\n\n    focusAndOptionallySelect(taskElement, forceSelect) {\n        if (taskElement) {\n            const\n                me                   = this,\n                currentlyFocusedTask = me.resolveTaskRecord(document.activeElement);\n\n            // If a task is focused but not selected and we navigate away from it holding SPACE we want that task to\n            // become selected in addition to the newly focused task\n            if (forceSelect && currentlyFocusedTask && !me.isSelected(currentlyFocusedTask)) {\n                me.selectTask(currentlyFocusedTask, true);\n            }\n\n            // When configured with `selectOnNavigation : true` we should move the selection. If user holds SHIFT we\n            // should always extend it\n            if (me.selectOnNavigation || forceSelect) {\n                const taskToFocus = me.resolveTaskRecord(taskElement);\n                // Newly focused task is not selected, always select it (optionally extending the selection)\n                if (!me.isSelected(taskToFocus)) {\n                    me.selectTask(taskToFocus, forceSelect);\n                }\n                // Newly focused task already selected, deselect current if SHIFT is pressed (to allow extending and\n                // shrinking selection holding SHIFT)\n                else if (forceSelect) {\n                    me.deselectTask(currentlyFocusedTask);\n                }\n            }\n\n            // Always move focus\n            taskElement.focus();\n        }\n    }\n\n    // To task at same Y in next column\n    navigateNext(keyEvent, select) {\n        const\n            me                                           = this,\n            { taskRecord, swimlaneRecord, columnRecord } = keyEvent.taskBoardData,\n            taskElement                                  = me.getTaskElement(taskRecord);\n\n        let\n            found = null,\n            nextColumnRecord = columnRecord;\n\n        do {\n            nextColumnRecord = me.columns.getNext(nextColumnRecord, true);\n\n            if (!nextColumnRecord.hidden) {\n                const\n                    nextColumnElement = me.getSwimlaneColumnElement(swimlaneRecord, nextColumnRecord),\n                    x                 = Rectangle.from(nextColumnElement, null, true).center.x,\n                    y                 = Rectangle.from(taskElement, null, true).center.y;\n\n                found = me.getTaskNear(x, y);\n            }\n        }\n        while (!found && nextColumnRecord !== columnRecord);\n\n        me.focusAndOptionallySelect(found, select);\n    }\n\n    // To task at same Y in prev column\n    navigatePrev(keyEvent, select) {\n        const\n            me                                           = this,\n            { taskRecord, swimlaneRecord, columnRecord } = keyEvent.taskBoardData,\n            taskElement                                  = me.getTaskElement(taskRecord);\n\n        let\n            found = null,\n            prevColumnRecord = columnRecord;\n\n        do {\n            prevColumnRecord = me.columns.getPrev(prevColumnRecord, true);\n\n            if (!prevColumnRecord.hidden) {\n                const\n                    prevColumnElement = me.getSwimlaneColumnElement(swimlaneRecord, prevColumnRecord),\n                    x                 = Rectangle.from(prevColumnElement, null, true).center.x,\n                    y                 = Rectangle.from(taskElement, null, true).center.y;\n\n                found = me.getTaskNear(x, y);\n            }\n        }\n        while (!found && prevColumnRecord !== columnRecord);\n\n        me.focusAndOptionallySelect(found, select);\n    }\n\n    // Right navigates to next column for LTR and previous for RTL\n    navigateRight(event, select = false) {\n        this['navigate' + (this.rtl ? 'Prev' : 'Next')](event, select);\n    }\n\n    // Left navigates to previous column for LTR and next for RTL\n    navigateLeft(event, select = false) {\n        this['navigate' + (this.rtl ? 'Next' : 'Prev')](event, select);\n    }\n\n    // Find next task in same column (might be in next swimlane)\n    navigateDown(keyEvent, select = false) {\n        const\n            { taskRecord } = keyEvent.taskBoardData,\n            nextTask       = this.getNextTask(taskRecord, true);\n\n        this.focusAndOptionallySelect(this.getTaskElement(nextTask), select);\n    }\n\n    // Find prev task in same column (might be in prev swimlane)\n    navigateUp(keyEvent, select = false) {\n        const\n            { taskRecord } = keyEvent.taskBoardData,\n            prevTask       = this.getPreviousTask(taskRecord, true);\n\n        this.focusAndOptionallySelect(this.getTaskElement(prevTask), select);\n    }\n\n    // Activate (show editor)\n    activate(event) {\n        const { taskRecord } = this.resolveEvent(event);\n        // Only care about ENTER on a task\n        taskRecord && this.trigger('activateTask', { taskRecord, event });\n    }\n\n    isActionAvailable({ action, event }) {\n        const taskBoardData = this.resolveEvent(event);\n\n        event.taskBoardData = taskBoardData;\n\n        // Block activating if a task item has focus (eg. a button in the card)\n        if (action === 'activate' && taskBoardData.taskRecord && event.target !== this.getTaskElement(taskBoardData.taskRecord)) {\n            return false;\n        }\n\n        return Boolean((this.navigateable || !navigationActions.includes(action)) && taskBoardData?.taskRecord);\n    }\n\n    //endregion\n\n};\n","import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module TaskBoard/view/mixin/TaskSelection\n */\n\n/**\n * Mixin that handles card selection for the TaskBoard.\n *\n * By default tasks can be selected using mouse clicks and the keyboard. To enable marquee selection, see\n * {@link TaskBoard.feature.TaskDragSelect}.\n *\n * ## Mouse selection\n *\n * Select and deselect cards using the mouse, using a modifier key to do multi selection:\n *\n * * Click on a card to focus and select it, deselecting any previously selected card.\n * * `CMD`/`CTRL` + click on a card to add or remove it from the selection.\n *\n * See {@link TaskBoard.view.TaskBoard#keyboard-shortcuts} for more information on selecting cards using the keyboard.\n *\n * @mixin\n */\nexport default Target => class TaskSelection extends (Target || Base) {\n\n    //region Config\n\n    static $name = 'TaskSelection';\n\n    static configurable = {\n        /**\n         * Selected tasks.\n         * @prp {TaskBoard.model.TaskModel[]} selectedTasks\n         * @category Common\n         */\n        selectedTasks : [],\n\n        /**\n         * A template method (empty by default) allowing you to control if a task can be selected or not.\n         *\n         * ```javascript\n         * new TaskBoard({\n         *     isTaskSelectable(taskRecord) {\n         *         return taskRecord.status !== 'done';\n         *     }\n         * })\n         * ```\n         *\n         * @param {TaskBoard.model.TaskModel} taskRecord The task record\n         * @returns {Boolean} `true` if the task can be selected, otherwise `false`\n         * @prp {Function}\n         * @category Selection\n         */\n        isTaskSelectable : null,\n\n        keyMap : {\n            ' '                : 'keyboardSelect',\n            'Ctrl+ '           : 'keyboardToggleSelect',\n            'Shift+ArrowDown'  : 'selectDown',\n            'Shift+ArrowLeft'  : 'selectLeft',\n            'Shift+ArrowUp'    : 'selectUp',\n            'Shift+ArrowRight' : 'selectRight'\n        }\n    };\n\n    get widgetClass() {}\n\n    //endregion\n\n    //region Type assertions\n\n    changeSelectedTasks(selectedTasks) {\n        ObjectHelper.assertArray(selectedTasks, 'selectedTasks');\n\n        return selectedTasks.filter(task => this.isTaskSelectable?.(task) !== false);\n    }\n\n    //endregion\n\n    //region Programmatic selection\n\n    toggleTaskSelection(taskRecord, add = false, forceSelect = null) {\n        const me = this;\n\n        // Toggle\n        if (forceSelect == null) {\n            if (me.isSelected(taskRecord)) {\n                // Clicked on a selected task without modifier key, select only it\n                if (!add) {\n                    me.selectTask(taskRecord, add);\n                }\n                // Using modifier key, deselect instead\n                else {\n                    me.deselectTask(taskRecord);\n                }\n            }\n            else {\n                me.selectTask(taskRecord, add);\n            }\n        }\n        // Force select\n        else if (forceSelect) {\n            me.selectTask(taskRecord, add);\n        }\n        // Force deselect\n        else {\n            me.deselectTask(taskRecord);\n        }\n    }\n\n    /**\n     * Select the supplied task, deselecting any previously selected by default.\n     * @param {TaskBoard.model.TaskModel} taskRecord Task to select\n     * @param {Boolean} [add] Specify `true` to add to selection instead of replacing it\n     * @category Selection\n     */\n    selectTask(taskRecord, add = false) {\n        const\n            { selectedTasks } = this,\n            event             = {\n                action : 'select',\n                select : [taskRecord]\n            };\n\n        // Abort if not selectable\n        if (this.isTaskSelectable?.(taskRecord) === false) {\n            return;\n        }\n\n        if (!add) {\n            event.deselect = selectedTasks.slice();\n            selectedTasks.length = 0;\n        }\n\n        ArrayHelper.include(selectedTasks, taskRecord);\n\n        this.triggerSelectionChange(event);\n\n        this.recompose();\n    }\n\n    /**\n     * Deselect the supplied task.\n     * @param {TaskBoard.model.TaskModel} taskRecord\n     * @category Selection\n     */\n    deselectTask(taskRecord) {\n        ArrayHelper.remove(this.selectedTasks, taskRecord);\n\n        this.triggerSelectionChange({\n            action   : 'deselect',\n            deselect : [taskRecord]\n        });\n\n        this.recompose();\n    }\n\n    /**\n     * Deselect all tasks.\n     * @category Selection\n     */\n    deselectAll() {\n        const { selectedTasks } = this;\n\n        if (selectedTasks.length) {\n            const deselect = selectedTasks.slice();\n\n            selectedTasks.length = 0;\n\n            this.triggerSelectionChange({\n                action : 'deselect',\n                deselect\n            });\n\n            this.recompose();\n        }\n    }\n\n    /**\n     * Check if the supplied task is selected or not\n     * @param {TaskBoard.model.TaskModel} taskRecord\n     * @returns {Boolean} Returns `true` if it is selected, `false` if not\n     * @category Selection\n     */\n    isSelected(taskRecord) {\n        return this.selectedTasks.includes(taskRecord);\n    }\n\n    triggerSelectionChange(event) {\n        /**\n         * Triggered when task selection changes.\n         *\n         * @event selectionChange\n         * @param {TaskBoard.view.TaskBoard} source TaskBoard instance\n         * @param {'select'|'deselect'} action Either 'select' or 'deselect', depending on operation\n         * @param {TaskBoard.model.TaskModel[]} selection All currently selected tasks\n         * @param {TaskBoard.model.TaskModel[]} select Tasks selected by the operation\n         * @param {TaskBoard.model.TaskModel[]} deselect Tasks deselected by the operation\n         */\n        this.trigger('selectionChange', Object.assign({\n            selection : this.selectedTasks,\n            select    : [],\n            deselect  : []\n        }, event));\n    }\n\n    //endregion\n\n    //region Listeners\n\n    onTaskClick(bryntumEvent) {\n        super.onTaskClick(bryntumEvent);\n\n        const { event, taskRecord } = bryntumEvent;\n\n        if (!event.defaultPrevented) {\n            this.toggleTaskSelection(taskRecord, event.ctrlKey);\n        }\n    }\n\n    keyboardSelect(keyEvent) {\n        if (!DomHelper.isEditable(keyEvent.target)) {\n            const { taskRecord } = this.resolveEvent(keyEvent);\n            if (taskRecord) {\n                this.toggleTaskSelection(taskRecord, false);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    keyboardToggleSelect(keyEvent) {\n        const { taskRecord } = this.resolveEvent(keyEvent);\n        if (taskRecord) {\n            this.toggleTaskSelection(taskRecord, true);\n        }\n    }\n\n    onClick(event) {\n        super.onClick(event);\n\n        if (!event.taskRecord && this.navigateable) {\n            this.deselectAll();\n        }\n    }\n\n    selectUp(event) {\n        this.navigateUp(event, true);\n    }\n\n    selectDown(event) {\n        this.navigateDown(event, true);\n    }\n\n    selectLeft(event) {\n        this.navigateLeft(event, true);\n    }\n\n    selectRight(event) {\n        this.navigateRight(event, true);\n    }\n\n    //endregion\n\n    //region Rendering\n\n    populateCard(args) {\n        super.populateCard?.(args);\n\n        const { taskRecord, cardConfig } = args;\n\n        cardConfig.class['b-selected'] = this.isSelected(taskRecord);\n    }\n\n    populateBody(args) {\n        super.populateBody?.(args);\n\n        const { bodyConfig } = args;\n\n        bodyConfig.class['b-has-selection'] = Boolean(this.selectedTasks.length);\n    }\n\n    //endregion\n\n};\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/ImageItem\n */\n\n/**\n * Item displaying an image.\n *\n * Loaded from the configured {@link #config-field}, optionally prepended with a {@link #config-baseUrl}.\n *\n * {@inlineexample TaskBoard/view/item/ImageItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType image\n */\nexport default class ImageItem extends TaskItem {\n    static $name = 'ImageItem';\n\n    static type = 'image';\n\n    /**\n     * Url prepended to this items value.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *        picture : { type : 'image', baseUrl : 'images/' }\n     *    },\n     *\n     *    project : {\n     *        tasksData : [\n     *            { id : 1, name : 'Task #1', picture : 'photo.jpg' },\n     *            { id : 2, name : 'Task #2', picture : 'image.jpg' }\n     *        ]\n     *    }\n     * });\n     *\n     * // Card for task #1 will render image \"images/photo.jpg\"\n     * // Card for task #2 will render image \"images/image.jpg\"\n     * ```\n     *\n     * @config {String} baseUrl\n     * @category Common\n     */\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * ImageItems are un-editable by default.\n     *\n     * @config {String|Object} editor\n     * @default null\n     * @category Common\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig, value, config }) {\n        // Skip drawing when `image === false` or not assigned\n        if (value) {\n            Object.assign(domConfig, {\n                tag       : 'img',\n                src       : (config.baseUrl || '') + value,\n                draggable : false\n            });\n        }\n    }\n}\n\nImageItem.initClass();\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/ProgressItem\n */\n\n/**\n * Item displaying a progress bar.\n *\n * Progress is determined by the value of the configured {@link #config-field}. A max value (defaults to 100) can be\n * configured using the {@link #config-max} config.\n *\n * {@inlineexample TaskBoard/view/item/ProgressItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType progress\n */\nexport default class ProgressItem extends TaskItem {\n    static $name = 'ProgressItem';\n\n    static type = 'progress';\n\n    static configurable = {\n        /**\n         * Max value, at which the bar is full.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    bodyItems : {\n         *        progress : { type : 'progress', max : 10 }\n         *    },\n         *\n         *    project : {\n         *        tasksData : [\n         *            { id : 1, name : 'Task #1', progress : 9 }\n         *        ]\n         *    }\n         * });\n         *\n         * // Task #1 bar is 9/10 filled\n         * ```\n         *\n         * @config {Number} max\n         * @default 100\n         * @category Common\n         */\n    };\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * ProgressItems are un-editable by default.\n     *\n     * @config {String|Object} editor\n     * @default null\n     * @category Common\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig, value, config }) {\n        const percent = Math.round(100 * value / (config.max || 100)) + '%';\n\n        domConfig.children = [\n            {\n                class   : 'b-taskboard-progress-outline',\n                dataset : {\n                    percent\n                },\n                children : [\n                    {\n                        class : 'b-taskboard-progress-progress',\n                        style : {\n                            width : percent\n                        },\n                        dataset : {\n                            percent\n                        }\n                    }\n                ]\n            }\n        ];\n\n        domConfig.dataset.percent = domConfig.dataset.btip = percent;\n    }\n}\n\nProgressItem.initClass();\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/RatingItem\n */\n\n/**\n * Item displaying a star rating.\n *\n * Rating is determined by the value of the configured {@link #config-field}. A max rating can be configured using the\n * {@link #config-max} config.\n *\n * {@inlineexample TaskBoard/view/item/RatingItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType rating\n */\nexport default class RatingItem extends TaskItem {\n    static $name = 'RatingItem';\n\n    static type = 'rating';\n\n    /**\n     * Max rating.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *       grade : { type : 'ratingitem', max : 5 }\n     *    },\n     *\n     *    project : {\n     *        tasksData : [\n     *            { id : 1, name : 'Task #1', grade : 3 }\n     *        ]\n     *    }\n     * });\n     *\n     * // Card for task #1 will render 3 full stars and 2 faded,\n     * // for a total of 5 stars\n     * ```\n     *\n     * @config {Number} max\n     * @category Common\n     */\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * RatingItems are un-editable by default.\n     *\n     * @config {String|Object} editor\n     * @default null\n     * @category Common\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig, value, config }) {\n        const { max = value } = config;\n\n        domConfig.children = [];\n\n        for (let i = 0; i < max; i++) {\n            domConfig.children.push({\n                tag   : 'i',\n                class : {\n                    'b-icon b-icon-star' : 1,\n                    'b-filled'           : i < value\n                }\n            });\n        }\n    }\n}\n\nRatingItem.initClass();\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/SeparatorItem\n */\n\n/**\n * Item displaying a horizontal divider.\n *\n * {@inlineexample TaskBoard/view/item/SeparatorItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType separator\n */\nexport default class SeparatorItem extends TaskItem {\n    static $name = 'SeparatorItem';\n\n    static type = 'separator';\n\n    /**\n     * @hideconfigs editor\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig }) {\n        domConfig.tag = 'hr';\n    }\n}\n\nSeparatorItem.initClass();\n","import Combo from '../../Core/widget/Combo.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/TagCombo\n */\n\n/**\n * A combo for picking tags. Works well to edit fields displayed by a {@link TaskBoard/view/item/TagsItem}, if data\n * uses strings to represent tags:\n *\n * {@inlineexample TaskBoard/widget/TagCombo.js}\n *\n * Consumes and outputs and array of strings, or if configured with a {@link #config-separator} a single string.\n *\n * If not seeded with any items/store, it tries to extract tags from the task store by collecting distinct values for\n * the field it is linked to (by {@link #config-name}).\n *\n * @classtype tagcombo\n * @extends Core/widget/Combo\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @inputfield\n */\nexport default class TagCombo extends Combo.mixin(TaskBoardLinked) {\n    static $name = 'TagCombo';\n\n    static type = 'tagcombo';\n\n    static configurable = {\n        multiSelect : true,\n        editable    : false,\n\n        /**\n         * Separator used to split a string into tags. Required if data format uses a single string to represent tags.\n         * @config {String}\n         * @default\n         */\n        separator : ',',\n\n        picker : {\n            cls : 'b-tag-picker'\n        },\n\n        chipView : {\n            closable : false\n        }\n    };\n\n    afterConfigure() {\n        const me = this;\n\n        // Populate with tags from the task store\n        if (!me.store?.count && me.taskBoard && me.name) {\n            const\n                { name, separator } = me,\n                tags                = [];\n\n            me.taskBoard.project.taskStore.forEach(task => {\n                const taskTags = task[name];\n                if (taskTags) {\n                    if (typeof taskTags === 'string') {\n                        tags.push(...taskTags.split(separator));\n                    }\n                    else {\n                        tags.push(...taskTags);\n                    }\n                }\n            });\n\n            me.items = [...new Set(tags)].sort();\n        }\n    }\n\n    changeValue(value, old) {\n        this.$expectsString = false;\n\n        if (this.separator && typeof value === 'string') {\n            value = value.split(this.separator);\n            this.$expectsString = true;\n        }\n\n        super.changeValue(value, old);\n    }\n\n    get value() {\n        const value = super.value;\n\n        if (this.$expectsString) {\n            return value.join(this.separator);\n        }\n\n        return value;\n    }\n\n    set value(value) {\n        super.value = value;\n    }\n}\n\nTagCombo.initClass();\n","import TaskItem from './TaskItem.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\nimport '../../widget/TagCombo.js';\n\n/**\n * @module TaskBoard/view/item/TagsItem\n */\n\n/**\n * Item displaying tags, either from string split into tags, an array of strings or by plucking a value from an array of\n * objects.\n *\n * Using a string, split into tags using the configured {@link #config-separator}:\n *\n * {@inlineexample TaskBoard/view/item/TagsItem.js}\n *\n * Using an array of strings, each entry is turned into a tag:\n *\n * {@inlineexample TaskBoard/view/item/TagsItemStringArray.js}\n *\n * Using an array of objects, gives you the most control over the tags. Requires configuring a\n * {@link #config-textProperty} and optionally a {@link #config-clsProperty}:\n *\n * {@inlineexample TaskBoard/view/item/TagsItemObjectArray.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType tags\n */\nexport default class TagsItem extends TaskItem {\n    static $name = 'TagsItem';\n\n    static type = 'tags';\n\n    /**\n     * Property used to determine the text for the tag. It is plucked from an array of objects that is used as the value\n     * for this item.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *       tags : { type : 'TagsItem', textProperty : 'title' }\n     *    },\n     *\n     *    project : {\n     *        tasksData : [{\n     *            id : 1,\n     *            name : 'Issue #1',\n     *            tags : [\n     *                { title : 'bug', color : 'orange' },\n     *                { title : 'important', color : 'red' }\n     *            ]\n     *        }]\n     *    }\n     * });\n     *\n     * // Card for Issue #1 will render 2 tags, 'bug' and 'important'\n     * ```\n     *\n     * @config {String} textProperty\n     * @category Common\n     */\n\n    /**\n     * Property used to add a CSS class to each tag. It is plucked from an array of objects that is used as the value\n     * for this item.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *       tags : { type : 'TagsItem', clsProperty : 'color' }\n     *    },\n     *\n     *    project : {\n     *        tasksData : [{\n     *            id : 1,\n     *            name : 'Issue #1',\n     *            tags : [\n     *                { title : 'bug', color : 'orange' },\n     *                { title : 'important', color : 'red' }\n     *            ]\n     *        }]\n     *    }\n     * });\n     *\n     * // Card for Issue #1 will render 2 tags, one with cls 'orange' and one with cls 'red'\n     * ```\n     *\n     * @config {String} clsProperty\n     * @category Common\n     */\n\n    /**\n     * Property used to split a value string into tags.\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *       tags : { type : 'TagsItem', separator : ';' }\n     *    },\n     *\n     *    project : {\n     *        tasksData : [{\n     *            id : 1,\n     *            name : 'Issue #1',\n     *            tags : 'bug;important'\n     *        }]\n     *    }\n     * });\n     *\n     * // Card for Issue #1 will render 2 tags, 'bug' and 'important'\n     * ```\n     *\n     * @config {String} separator\n     * @default ,\n     * @category Common\n     */\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * Defaults to use a {@link TaskBoard.widget.TagCombo}.\n     *\n     * @config {String|Object} editor\n     * @default tagcombo\n     * @category Common\n     */\n    static defaultEditor = { type : 'tagcombo', pickerWidth : '10em' };\n\n    static render({ domConfig, value, config }) {\n        let tags;\n\n        if (value) {\n            if (typeof value === 'string') {\n                tags = value.split(config.separator || ',').map(str => ({ text : str }));\n            }\n            else if (Array.isArray(value)) {\n                tags = value.map(entry => {\n                    if (typeof entry === 'string') {\n                        return { text : entry };\n                    }\n                    else {\n                        return {\n                            text : config.textProperty && entry[config.textProperty],\n                            cls  : config.clsProperty && entry[config.clsProperty]\n                        };\n                    }\n                });\n            }\n\n            if (tags) {\n                domConfig.children = tags.map(tag => {\n                    const cls = ('cls' in tag) ? tag.cls : DomHelper.makeValidId(tag.text, '-').toLowerCase();\n                    return {\n                        class : {\n                            'b-taskboard-tags-tag' : 1,\n                            [cls]                  : Boolean(cls)\n                        },\n                        text : tag.text\n                    };\n                });\n            }\n        }\n    }\n}\n\nTagsItem.initClass();\n","import ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/TemplateItem\n */\n\n/**\n * Item displaying content generated by a template function, see {@link #config-template}\n *\n * {@inlineexample TaskBoard/view/item/TemplateItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType template\n */\nexport default class TemplateItem extends TaskItem {\n    static $name = 'TemplateItem';\n\n    static type = 'template';\n\n    /**\n     * Template function used to generate task content.\n     *\n     * Return an HTML string or a DomConfig object from the function:\n     *\n     * ```javascript\n     * const taskBoard = new TaskBoard({\n     *    bodyItems : {\n     *        prio : {\n     *          type     : 'template',\n     *          template : ({ taskRecord }) => `<i class=\"b-fa b-fa-tarffic-light\"></i> ${taskRecord.prio}`\n     *        }\n     *    }\n     * });\n     * ```\n     *\n     * @config {Function} template\n     * @param {TaskBoard.model.TaskModel} taskRecord Task record\n     * @param {TemplateItemConfig} config Item config\n     * @param {Object} value Value of the configured field\n     * @returns {String|DomConfig|DomConfig[]} HTML string, DomConfig or DomConfig array\n     * @category Common\n     */\n\n    /**\n     * Widget type or config to use as the editor for this item. Used in the inline task editor.\n     *\n     * TemplateItems are un-editable by default.\n     *\n     * @config {String|Object} editor\n     * @default null\n     * @category Common\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig, value, config, taskRecord }) {\n        const html = config.template({ taskRecord, config, value });\n\n        if (typeof html === 'string') {\n            domConfig.html = html;\n        }\n        else if (ObjectHelper.isObject(html)) {\n            ObjectHelper.merge(domConfig, html);\n        }\n        else if (Array.isArray(html)) {\n            domConfig.children = html;\n        }\n    }\n}\n\nTemplateItem.initClass();\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/TodoListItem\n */\n\n/**\n * Item displaying a list of todo items with associated checkboxes. It allows users to toggle the checkbox for each item\n * on the card to indicate if that item is completed or not. By adding a {@link TaskBoard/widget/TodoListField} to the\n * task editor users can also add, edit and remove todo items.\n *\n * {@inlineexample TaskBoard/view/item/TodoListItem.js}\n *\n * It consumes an array of objects representing todo items. For this item to work as indented, that array has to be\n * supplied by a task field using `type : 'array'`. It is also important to configure the {@link #config-textField} and\n * {@link #config-checkedField} to match properties of the objects in that array. This snippet illustrates a possible\n * setup:\n *\n * ```javascript\n * // Custom task model with a todo field of array type\n * class MyTask extends TaskModel {\n *     static fields = [\n *        { name : 'todo', type : 'array' }\n *     ];\n * }\n *\n * const taskBoard = new TaskBoard({\n *    project : {\n *        // Use the custom task model defined above\n *        taskModelClass : MyTask,\n *\n *        tasksData : [\n *            {\n *              id : 1,\n *              name : 'Order software',\n *              // The custom field, accepts an array\n *              todo : [\n *                  { title : 'Sketchup Pro', done : false },\n *                  { title : 'AutoCAD LT', done : true },\n *                  { title : 'Inventor', done : false }\n *              ]\n *            }\n *        ]\n *    },\n *\n *    bodyItems : {\n *        todo : {\n *            // Add a todo list item to card body\n *            type         : 'todoList',\n *            // Map text to the \"title\" field\n *            textField    : 'text',\n *            // Map checkbox to the \"done\" field\n *            checkedField : 'done'\n *        }\n *    }\n * });\n * ```\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType todoList\n */\nexport default class TodoListItem extends TaskItem {\n    static $name = 'TodoListItem';\n\n    static type = 'todoList';\n\n    /**\n     * Name of a property on a todo item to display as its text.\n     *\n     * @config {String} textField\n     * @category Common\n     * @default text\n     */\n\n    /**\n     * Name of a property on a todo item to use for the checkbox. The property is expected to be a boolean.\n     *\n     * @config {String} checkedField\n     * @category Common\n     * @default checked\n     */\n\n    /**\n     * Name of a property on a todo item whose value will be added as a CSS class to the todo item.\n     *\n     * @config {String} clsField\n     * @category Common\n     * @default cls\n     */\n\n    // private for now:\n    // checkedIcon\n    // uncheckedIcon\n\n    /**\n     * @hideconfigs editor\n     */\n\n    static defaultEditor = null;\n\n    static render({ domConfig, value, config, taskRecord }) {\n        if (value) {\n            const {\n                textField = 'text',\n                checkedField = 'checked',\n                clsField = 'cls',\n                checkedIcon = 'b-icon b-icon-checked',\n                uncheckedIcon = 'b-icon b-icon-unchecked'\n            } = config;\n\n            if (this.firstRender !== false) {\n                const dataField = taskRecord.getFieldDefinition(config.field);\n                if (!dataField.isArrayDataField) {\n                    throw new Error('TodoListItem has to be mapped to a field with `type : \"array\"`');\n                }\n\n            }\n\n            domConfig.children = value.map((todo, index) => ({\n                class : {\n                    'b-taskboard-todolist-todo' : 1,\n                    [todo[clsField]]            : todo[clsField],\n                    'b-checked'                 : todo[checkedField]\n                },\n                children : {\n                    icon : {\n                        tag   : 'i',\n                        class : todo[checkedField] ? checkedIcon : uncheckedIcon\n                    },\n                    text : {\n                        tag  : 'span',\n                        text : todo[textField]\n                    }\n                },\n                elementData : {\n                    index\n                }\n            }));\n\n            this.firstRender = false;\n        }\n    }\n\n    static onClick({ source : taskBoard, taskRecord, event, config }) {\n        const element = event.target.closest('.b-taskboard-todolist-todo');\n\n        if (element && !taskRecord.readOnly) {\n            const\n                { checkedField = 'checked', field } = config,\n                { index }                           = element.elementData,\n                // array fields has to be assigned a new array to detect a change, hence the slice\n                clone                               = taskRecord.getValue(field).slice(),\n                todo                                = clone[index];\n\n            // Toggle the mapped fields value\n            todo[checkedField] = !todo[checkedField];\n\n            // Assign the cloned array to the task record\n            taskRecord.setValue(field, clone);\n\n            taskBoard.trigger('todoToggle', { taskRecord, todo, checked : todo[checkedField], element, event });\n\n            // Don't want the click to select the task, feels a bit awkward when it does\n            event.preventDefault();\n        }\n    }\n\n    // Prevent editor from opening when dbl clicking a todo item\n    static onDblClick({ event }) {\n        event.preventDefault();\n    }\n\n}\n\nTodoListItem.initClass();\n","import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../Core/localization/En.js';\n\nconst locale = {\n\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n\n    GridBase : {\n        loadFailedMessage : 'Data loading failed!',\n        syncFailedMessage : 'Data synchronization failed!'\n    },\n\n    CrudManagerView : {\n        serverResponseLabel : 'Server response:'\n    },\n\n    TaskBoard : {\n        column           : 'column',\n        columns          : 'columns',\n        Columns          : 'Columns',\n        swimlane         : 'swimlane',\n        swimlanes        : 'swimlanes',\n        Swimlanes        : 'Swimlanes',\n        task             : 'task',\n        tasks            : 'tasks',\n        addTask          : 'Add L{TaskBoard.task}',\n        cancel           : 'Cancel',\n        changeColumn     : 'Change L{TaskBoard.column}',\n        changeSwimlane   : 'Change L{TaskBoard.swimlane}',\n        collapse         : text => `Collapse ${text}`,\n        color            : 'Color',\n        description      : 'Description',\n        editTask         : 'Edit L{TaskBoard.task}',\n        expand           : text => `Expand ${text}`,\n        filterColumns    : 'Filter L{TaskBoard.columns}',\n        filterSwimlanes  : 'Filter L{TaskBoard.swimlanes}',\n        filterTasks      : 'Filter L{TaskBoard.tasks}',\n        moveColumnLeft   : 'Move L{TaskBoard.column} left',\n        moveColumnRight  : 'Move L{TaskBoard.column} right',\n        name             : 'Name',\n        newTaskName      : 'New L{TaskBoard.task}',\n        removeTask       : 'Remove L{TaskBoard.task}',\n        removeTasks      : 'Remove L{TaskBoard.tasks}',\n        resources        : 'Resources',\n        save             : 'Save',\n        scrollToColumn   : 'Scroll to L{TaskBoard.column}',\n        scrollToSwimlane : 'Scroll to L{TaskBoard.swimlane}',\n        zoom             : 'Zoom'\n    },\n\n    TodoListField : {\n        add     : 'Add',\n        newTodo : 'New todo'\n    },\n\n    UndoRedo : {\n        UndoLastAction : 'Undo',\n        RedoLastAction : 'Redo'\n    }\n};\n\nexport default LocaleHelper.publishLocale(locale);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport Featureable from '../../Core/mixin/Featureable.js';\nimport Pluggable from '../../Core/mixin/Pluggable.js';\nimport State from '../../Core/mixin/State.js';\nimport ScrollManager from '../../Core/util/ScrollManager.js';\nimport Responsive from '../../Core/widget/mixin/Responsive.js';\nimport Styleable from '../../Core/widget/mixin/Styleable.js';\nimport Panel from '../../Core/widget/Panel.js';\n\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\n\nimport TaskBoardFeature from '../feature/TaskBoardFeature.js';\nimport ExpandCollapse from './mixin/ExpandCollapse.js';\nimport ResponsiveCards from './mixin/ResponsiveCards.js';\nimport TaskBoardColumns from './mixin/TaskBoardColumns.js';\nimport TaskBoardDom from './mixin/TaskBoardDom.js';\nimport TaskBoardDomEvents from './mixin/TaskBoardDomEvents.js';\nimport TaskBoardScroll from './mixin/TaskBoardScroll.js';\nimport TaskBoardStores from './mixin/TaskBoardStores.js';\nimport TaskBoardSwimlanes from './mixin/TaskBoardSwimlanes.js';\nimport TaskBoardVirtualization from './mixin/TaskBoardVirtualization.js';\nimport TaskItems from './mixin/TaskItems.js';\nimport TaskNavigation from './mixin/TaskNavigation.js';\n\nimport TaskSelection from './mixin/TaskSelection.js';\nimport '../localization/En.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module TaskBoard/view/TaskBoardBase\n */\n\nconst weightSorter = (a, b) => a.weight - b.weight;\n\n/**\n * A thin base class for {@link TaskBoard.view.TaskBoard}. Does not include any features by default, allowing smaller\n * custom-built bundles if used in place of {@link TaskBoard.view.TaskBoard}.\n *\n * **NOTE:** In most scenarios you probably want to use TaskBoard instead of TaskBoardBase.\n *\n * @extends Core/widget/Panel\n *\n * @mixes Core/mixin/Pluggable\n * @mixes Core/mixin/State\n * @mixes Core/widget/mixin/Responsive\n * @mixes Core/widget/mixin/Styleable\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes TaskBoard/view/mixin/ExpandCollapse\n * @mixes TaskBoard/view/mixin/ResponsiveCards\n * @mixes TaskBoard/view/mixin/TaskBoardColumns\n * @mixes TaskBoard/view/mixin/TaskBoardDom\n * @mixes TaskBoard/view/mixin/TaskBoardDomEvents\n * @mixes TaskBoard/view/mixin/TaskBoardScroll\n * @mixes TaskBoard/view/mixin/TaskBoardStores\n * @mixes TaskBoard/view/mixin/TaskBoardSwimlanes\n * @mixes TaskBoard/view/mixin/TaskBoardVirtualization\n * @mixes TaskBoard/view/mixin/TaskItems\n * @mixes TaskBoard/view/mixin/TaskNavigation\n * @mixes TaskBoard/view/mixin/TaskSelection\n *\n * @features TaskBoard/feature/ColumnDrag\n * @features TaskBoard/feature/ColumnHeaderMenu\n * @features TaskBoard/feature/ColumnToolbars\n * @features TaskBoard/feature/SimpleTaskEdit\n * @features TaskBoard/feature/SwimlaneDrag\n * @features TaskBoard/feature/TaskDrag\n * @features TaskBoard/feature/TaskDragSelect\n * @features TaskBoard/feature/TaskEdit\n * @features TaskBoard/feature/TaskMenu\n * @features TaskBoard/feature/TaskTooltip\n * @widget\n */\nexport default class TaskBoardBase extends Panel.mixin(\n    Pluggable,\n    State,\n    Featureable,\n    Styleable,\n    CrudManagerView,\n    ExpandCollapse,\n    Responsive,\n    ResponsiveCards,\n    TaskBoardColumns,\n    TaskBoardDom,\n    TaskBoardDomEvents,\n    TaskBoardScroll,\n    TaskBoardStores,\n    TaskBoardSwimlanes,\n    TaskBoardVirtualization,\n    TaskItems,\n    TaskNavigation,\n    TaskSelection\n) {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{TaskBoard.task}',\n        'L{TaskBoard.tasks}',\n        'L{TaskBoard.column}',\n        'L{TaskBoard.columns}',\n        'L{TaskBoard.swimlane}',\n        'L{TaskBoard.swimlanes}'\n    ];\n    // endregion\n    // </debug>\n\n    //region Config\n\n    static $name = 'TaskBoardBase';\n    static type = 'taskboardbase';\n\n    static featureable = {\n        factory : TaskBoardFeature\n    };\n\n    static configurable = {\n        /** @hideconfigs autoUpdateRecord, defaultFocus, trapFocus, showTooltipWhenDisabled */\n        /** @hideproperties firstItem, lastItem, cellInfo, visibleChildCount */\n        /** @hidefunctions getAt */\n\n        layout : 'vbox',\n\n        /**\n         * An object containing Feature configuration objects (or `true` if no configuration is required)\n         * keyed by the Feature class name in all lowercase.\n         * @config {Object}\n         * @category Common\n         */\n        features : true,\n\n        /**\n         * An empty function by default, but provided so that you can override it. This function is called each time\n         * a task is rendered into the task board. It allows you to manipulate the DOM config object used for the card\n         * before it is synced to DOM, thus giving you control over styling and contents.\n         *\n         * NOTE: The function is intended for formatting, you should not update records in it since updating records\n         * triggers another round of rendering.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    taskRenderer({ taskRecord, cardConfig }) {\n         *        // Add an icon to all tasks header\n         *        cardConfig.children.header.children.icon = {\n         *            tag   : 'i',\n         *            class : 'b-fa b-fa-beer'\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * For more information, see the [Customize task contents guide](#TaskBoard/guides/customization/taskcontents.md).\n         *\n         * @config {Function}\n         * @param {Object} detail An object containing the information needed to render a task.\n         * @param {TaskBoard.model.TaskModel} detail.taskRecord The task record.\n         * @param {TaskBoard.model.ColumnModel} detail.columnRecord The column the task will be displayed in.\n         * @param {TaskBoard.model.SwimlaneModel} detail.swimlaneRecord The swimlane the task will be displayed in.\n         * @param {DomConfig} detail.cardConfig DOM config object for the cards element\n         * @category Task content\n         */\n        taskRenderer : null,\n\n        /**\n         * An empty function by default, but provided so that you can override it. This function is called each time\n         * a swimlane is rendered into the task board. It allows you to manipulate the DOM config object used for the\n         * swimlane before it is synced to DOM, thus giving you control over styling and contents.\n         *\n         * ```javascript\n         * const taskBoard = new TaskBoard({\n         *    swimlaneRenderer({ swimlaneRecord, swimlaneConfig }) {\n         *        // Add an icon to all swimlane headers\n         *        swimlaneConfig.children.header.children.icon = {\n         *            tag   : 'i',\n         *            class : 'b-fa b-fa-dog'\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {Function}\n         * @param {Object} detail An object containing the information needed to render a swimlane.\n         * @param {TaskBoard.model.SwimlaneModel} detail.swimlaneRecord The swimlane.\n         * @param {DomConfig} detail.swimlaneConfig DOM config object for the swimlane\n         * @category Advanced\n         */\n        swimlaneRenderer : null,\n\n        /**\n         * Controls how many cards are rendered to a row in each column. Can be controlled on a per column basis by\n         * setting {@link TaskBoard.model.ColumnModel#field-tasksPerRow}\n         *\n         * ```javascript\n         * new TaskBoard({\n         *   tasksPerRow : 3\n         * });\n         * ```\n         *\n         * @config {Number}\n         * @category Common\n         */\n        tasksPerRow : 1,\n\n        /**\n         * Setting this will cause cards to expand to share the available width if there are fewer than\n         * {@link #config-tasksPerRow}.\n         *\n         * By default, the {@link #config-tasksPerRow} always applies, and if it is 3, then a single\n         * card in a column will be 33% of the available width.\n         *\n         * To have fewer cards than the {@link #config-tasksPerRow} evenly share available column width,\n         * configure this as `true`;\n         * @prp {Boolean}\n         * @category Common\n         */\n        stretchCards : null,\n\n        /**\n         * Show task count for a column in its header, appended after the title\n         *\n         * ```javascript\n         * new TaskBoard({\n         *   showCountInHeader : false\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        showCountInHeader : true,\n\n        /**\n         * Makes column and swimlane headers sticky\n         *\n         * ```javascript\n         * new TaskBoard({\n         *   stickyHeaders : true\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         * @default\n         * @category Common\n         */\n        stickyHeaders : false,\n\n        /**\n         * Experimental, animate actions that cannot be animated using CSS transitions. Currently includes:\n         * * Programmatically moving tasks\n         * * Moving tasks using the task editor\n         * * Adding tasks\n         * * Removing tasks\n         * * Sorting tasks\n         * * Hiding/showing/filtering columns\n         * * Hiding/showing/filtering swimlanes\n         *\n         * ```javascript\n         * new TaskBoard({\n         *   useDomTransition : true\n         * });\n         * ```\n         * **NOTE**: This flag is not supported for Lightning Web Components\n         * @config {Boolean}\n         * @category Experimental\n         */\n        useDomTransition : false,\n\n        /**\n         * Path to load resource images from. Used by the for example the resource picker in the task editor and by the\n         * ResourceAvatars task item. Set this to display miniature images for each resource using their `image` field.\n         *\n         * **NOTE**: The path should end with a `/`:\n         *\n         * ```javascript\n         * new TaskBoard({\n         *   resourceImagePath : 'images/resources/'\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category Common\n         */\n        resourceImagePath : null,\n\n        /**\n         * CSS variable prefix, appended to the keys used in {@link #config-css}.\n         *\n         * Normally you do not need to change this value.\n         *\n         * @default\n         * @config {String}\n         * @category CSS\n         */\n        cssVarPrefix : 'taskboard',\n\n        /**\n         * Configuration values for the {@link Core.util.ScrollManager} class. It is used to manage column/body\n         * scrolling during task, column or swimlane drag.\n         * ```javascript\n         * new TaskBoard({\n         *     scrollManager : {\n         *         zoneWidth   : 100, // increase zone size\n         *         scrollSpeed : 3    // and scroll speed\n         *     }\n         * })\n         * ```\n         * @config {ScrollManagerConfig}\n         * @category Scrolling\n         */\n        scrollManager : {\n            value : {},\n\n            $config : ['nullify', 'lazy']\n        },\n\n        /**\n         * Allows sorting tasks in the UI independent of how they are sorted in the task store.\n         *\n         * Specify `true` to force sorting tasks by {@link TaskBoard/model/TaskModel#field-weight}.\n         *\n         * Supply a [sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n         * function to force a custom sort order.\n         *\n         * This is likely something you will want to use if combining TaskBoard with other products, sharing the\n         * project. Without this, sorting tasks in for example Gantt will also rearrange the cards on the board.\n         *\n         * As described above it accepts either a boolean or a Function, but it always returns a sorter function.\n         *\n         * @member {Function} taskSorterFn\n         * @accepts {Boolean|Function}\n         * @category Advanced\n         */\n        /**\n         * Allows sorting tasks in the UI independent of how they are sorted in the task store.\n         *\n         * Specify `true` to force sorting tasks by {@link TaskBoard/model/TaskModel#field-weight}.\n         *\n         * Supply a [sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n         * function to force a custom sort order.\n         *\n         * This is likely something you will want to use if combining TaskBoard with other products, sharing the\n         * project. Without this, sorting tasks in for example Gantt will also rearrange the cards on the board.\n         *\n         * @config {Boolean|Function}\n         * @category Advanced\n         */\n        taskSorterFn : null,\n\n        /**\n         * See {@link TaskBoard.view.TaskBoard#keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>} keyMap\n         * @category Common\n         */\n\n        contentElMutationObserver : false,\n\n        textContent : false,\n\n        // We can scroll in both axes.\n        // Scrollable also syncs the b-horizontal-overflow and b-vertical-overflow classes\n        // to allow styles to depend upon overflow state.\n        scrollable : true\n    };\n\n    isInitiallyComposed    = false;\n    domTransitionSuspended = 0;\n    columnRecomposeQueue   = new Map();\n\n    static delayable = {\n        recomposeColumns : 'raf'\n    };\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    onPaint(...args) {\n        if (this.onPaintOverride()) {\n            return;\n        }\n        super.onPaint(...args);\n    }\n\n    //endregion\n\n    //region Type assertions and changers/updaters\n\n    changeResourceImagePath(resourceImagePath) {\n        ObjectHelper.assertString(resourceImagePath, 'resourceImagePath');\n\n        return resourceImagePath;\n    }\n\n    changeUseDomTransition(useDomTransition) {\n        ObjectHelper.assertBoolean(useDomTransition, 'useDomTransition');\n\n        return useDomTransition;\n    }\n\n    changeStickyHeaders(stickyHeaders) {\n        ObjectHelper.assertBoolean(stickyHeaders, 'stickyHeaders');\n\n        return stickyHeaders;\n    }\n\n    changeScrollManager(scrollManager, oldScrollManager) {\n        oldScrollManager?.destroy();\n\n        if (scrollManager) {\n            return ScrollManager.new({\n                element : this.element,\n                owner   : this\n            }, scrollManager);\n        }\n\n        return null;\n    }\n\n    changeShowCountInHeader(showCountInHeader) {\n        ObjectHelper.assertBoolean(showCountInHeader, 'showCountInHeader');\n\n        return showCountInHeader;\n    }\n\n    changeTasksPerRow(tasksPerRow) {\n        ObjectHelper.assertNumber(tasksPerRow, 'tasksPerRow');\n\n        return tasksPerRow;\n    }\n\n    changeSwimlaneRenderer(swimlaneRenderer) {\n        ObjectHelper.assertFunction(swimlaneRenderer, 'swimlaneRenderer');\n\n        return swimlaneRenderer;\n    }\n\n    changeTaskRenderer(taskRenderer) {\n        ObjectHelper.assertFunction(taskRenderer, 'taskRenderer');\n\n        return taskRenderer;\n    }\n\n    changeTaskSorterFn(fn) {\n        if (fn === true) {\n            return weightSorter;\n        }\n\n        fn && ObjectHelper.assertFunction(fn, 'taskSorterFn');\n\n        return fn;\n    }\n\n    //endregion\n\n    //region Recompose columns\n\n    // Queue a column for recomposition on next frame\n    queueColumnRecompose(columnRecord, swimlaneRecord) {\n        this.columnRecomposeQueue.set(`${columnRecord.id}.-.${swimlaneRecord?.id}`, { columnRecord, swimlaneRecord });\n        this.recomposeColumns();\n    }\n\n    // RAF function to recompose all queued columns\n    recomposeColumns() {\n        for (const [, { columnRecord, swimlaneRecord }] of this.columnRecomposeQueue) {\n            this.recomposeColumn(columnRecord, swimlaneRecord);\n        }\n        this.columnRecomposeQueue.clear();\n    }\n\n    // Recompose a single column / swimlane intersection\n    recomposeColumn(columnRecord, swimlaneRecord) {\n        const\n            element   = this.getSwimlaneColumnElement(swimlaneRecord, columnRecord),\n            domConfig = DomHelper.normalizeChildren(this.renderColumn(swimlaneRecord, columnRecord));\n\n        domConfig.onlyChildren = true;\n\n        DomSync.sync({\n            targetElement : element,\n            domConfig,\n            callback      : this.domSyncCallback,\n            syncOptions   : {\n                syncIdField      : 'column',\n                releaseThreshold : 0\n            }\n        });\n    }\n\n    //endregion\n\n    //region Render\n\n    // Creates a DOM config for a single card, calling any configured taskRenderer() in the process\n    renderCard(taskRecord, columnRecord, swimlaneRecord) {\n        // Allow mixins to fully control card rendering (used by TaskBoardVirtualization)\n        const overriddenCard = super.renderCard(taskRecord, columnRecord, swimlaneRecord);\n        if (overriddenCard) {\n            return overriddenCard;\n        }\n\n        const\n            me                                = this,\n            { id, domId, eventColor, weight } = taskRecord,\n            color                             = eventColor || swimlaneRecord?.color || columnRecord.color,\n            namedColor                        = DomHelper.isNamedColor(color) ? color : null,\n            cardSize                          = me.getCardSize(columnRecord, swimlaneRecord),\n            cardConfig                        = {\n                id    : `${me.id}-card-${domId}`,\n                class : {\n                    'b-taskboard-card'                  : true,\n                    [`b-taskboard-color-${namedColor}`] : namedColor,\n                    'b-readonly'                        : taskRecord.readOnly,\n                    ...taskRecord.cls\n                },\n                tabIndex : 0,\n                dataset  : {\n                    task          : domId,\n                    column        : columnRecord.id,\n                    lane          : swimlaneRecord?.id,\n                    weight,\n                    domTransition : true\n                },\n                style : {\n                    color  : namedColor ? null : color,\n                    height : me.getTaskHeight?.(taskRecord) ?? null\n                },\n                elementData : {\n                    elementType : 'task',\n                    taskId      : id,\n                    taskRecord,\n                    columnRecord,\n                    swimlaneRecord\n                },\n                children : {\n                    header : {\n                        tag   : 'header',\n                        class : {\n                            'b-taskboard-card-header' : 1\n                        },\n                        children    : {},\n                        syncOptions : {\n                            syncIdField : 'role'\n                        }\n                    },\n                    body : {\n                        tag   : 'section',\n                        class : {\n                            'b-taskboard-card-body' : 1\n                        },\n                        children    : {},\n                        syncOptions : {\n                            syncIdField : 'role'\n                        }\n                    },\n                    footer : {\n                        tag   : 'footer',\n                        class : {\n                            'b-taskboard-card-footer' : 1\n                        },\n                        children    : {},\n                        syncOptions : {\n                            syncIdField : 'role'\n                        }\n                    }\n                }\n            },\n            { children }             = cardConfig,\n            { header, body, footer } = children;\n\n        // Chained by features\n        me.populateCard({\n            taskRecord,\n            columnRecord,\n            swimlaneRecord,\n            cardConfig,\n            cardSize\n        });\n\n        // Supplied by app\n        me.taskRenderer?.({\n            taskRecord,\n            columnRecord,\n            swimlaneRecord,\n            cardConfig,\n            cardSize\n        });\n\n        // <remove-on-release>\n        // TODO: headerRenderer, bodyRenderer, footerRenderer?\n        // </remove-on-release>\n\n        // Remove unused parts of the card\n        if (header.html == null && header.text == null && (!header.children || Object.keys(header.children).length === 0)) {\n            children.header = null;\n        }\n\n        if (body.html == null && body.text == null && (!body.children || Object.keys(body.children).length === 0)) {\n            children.body = null;\n        }\n\n        if (footer.html == null && footer.text == null && (!footer.children || Object.keys(footer.children).length === 0)) {\n            children.footer = null;\n        }\n\n        return cardConfig;\n    }\n\n    renderColumnHeader(columnRecord) {\n        const\n            me                 = this,\n            { text, id, domId, width, flex, minWidth, color, tooltip } = columnRecord,\n            namedColor         = DomHelper.isNamedColor(color) ? color : null,\n            columnHeaderConfig = {\n                id    : `${me.id}-column-header-${domId}`,\n                class : {\n                    'b-taskboard-column-header'         : 1,\n                    'b-fixed-width'                     : width && !flex,\n                    [`b-taskboard-color-${namedColor}`] : namedColor,\n                    'b-last'                            : columnRecord === this.columns.last\n                },\n                style : {\n                    color : namedColor ? null : color,\n                    width,\n                    flex,\n                    minWidth\n                },\n                children : {\n                    padder : {\n                        class : {\n                            'b-taskboard-column-header-padder' : 1\n                        },\n                        children : {\n                            title : {\n                                class : {\n                                    'b-taskboard-column-title' : 1\n                                },\n                                dataset : {\n                                    btip : tooltip\n                                },\n                                children : [\n                                    {\n                                        tag   : 'span',\n                                        class : 'b-column-title-text',\n                                        text\n                                    },\n                                    me.showCountInHeader && {\n                                        tag   : 'span',\n                                        class : {\n                                            'b-taskboard-column-count' : 1\n                                        },\n                                        html : `(${me.getColumnTasks(columnRecord)?.length ?? 0})`\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                },\n                dataset : {\n                    column        : domId,\n                    domTransition : true\n                },\n                elementData : {\n                    elementType : 'columnHeader',\n                    columnId    : id\n                }\n            };\n\n        Tooltip.showOverflow = true;\n\n        // Chained by features\n        me.populateColumnHeader({\n            columnRecord,\n            columnHeaderConfig\n        });\n\n        // Supplied by app\n        me.columnHeaderRenderer?.({\n            columnRecord,\n            columnHeaderConfig\n        });\n\n        return columnHeaderConfig;\n    }\n\n    renderColumn(swimlaneRecord, columnRecord) {\n        const\n            me            = this,\n            {\n                taskSorterFn,\n                stretchCards,\n                columnField,\n                swimlaneField\n            }             = me,\n            {\n                width,\n                flex,\n                id,\n                domId,\n                minWidth,\n                color\n            }             = columnRecord,\n            { taskStore } = me.project,\n            // Tasks in this column / swimlane intersection. Fetched using an index for better performance, except when\n            // using a tree store, since only the expended tasks are indexed then (only those are in storage)\n            tasks         = taskStore.isTree\n                ? taskStore.query(r =>\n                    r[columnField] === id &&\n                    (!swimlaneField || !swimlaneRecord || r[swimlaneField] === swimlaneRecord.id) // Might have no lanes\n                )\n                : Array.from(taskStore.storage.findItem(\n                    'columnSwimlaneIntersection',\n                    `${columnRecord.id}-/-${swimlaneRecord?.id ?? 'default'}`\n                ) || []),\n            perRow       = me.getTasksPerRow(columnRecord, swimlaneRecord),\n            elementId    = `${me.id}-column-${swimlaneRecord?.domId ?? 'default'}-${domId}`,\n            namedColor   = DomHelper.isNamedColor(color) ? color : null,\n            columnConfig = {\n                id    : elementId,\n                class : {\n                    'b-taskboard-column'                                 : 1,\n                    'b-fixed-width'                                      : width && !flex,\n                    [`b-${perRow}-task${perRow > 1 ? 's' : ''}-per-row`] : 1,\n                    'b-inline'                                           : perRow > 1,\n                    [`b-taskboard-color-${namedColor}`]                  : namedColor,\n                    'b-last'                                             : columnRecord === this.columns.last\n                },\n                style : {\n                    color : namedColor ? null : color,\n                    width,\n                    flex,\n                    minWidth\n                },\n                dataset : {\n                    column        : domId,\n                    lane          : swimlaneRecord?.id,\n                    domTransition : true\n                },\n                elementData : {\n                    elementType : 'column',\n                    columnId    : id,\n                    laneId      : swimlaneRecord?.id\n                },\n                // Cards\n                children : {\n                    body : {\n                        id    : `${elementId}-body`,\n                        class : {\n                            'b-taskboard-column-body' : 1\n                        },\n                        dataset : {\n                            role          : 'body',\n                            domTransition : true\n                        },\n                        children : [\n                            {\n                                class : {\n                                    'b-taskboard-column-body-inner' : 1\n                                },\n                                style : {\n                                    'grid-template-columns' : `repeat(${stretchCards ? Math.min(perRow, tasks.length) : perRow}, 1fr)`\n                                },\n                                dataset : {\n                                    role          : 'inner',\n                                    domTransition : true\n                                },\n                                children : (() => {\n                                    // Optionally force sort order\n                                    if (taskSorterFn) {\n                                        tasks.sort(taskSorterFn);\n                                    }\n                                    // Otherwise match store order, Set is unordered\n                                    else {\n                                        tasks.sort((a, b) => taskStore.indexOf(a) - taskStore.indexOf(b));\n                                    }\n\n                                    return tasks.map(taskRecord => me.renderCard(taskRecord, columnRecord, swimlaneRecord));\n                                })(),\n                                syncOptions : {\n                                    syncIdField      : 'task',\n                                    releaseThreshold : me.isVirtualized ? 1000 : 0\n                                }\n                            }\n                        ],\n                        syncOptions : {\n                            syncIdField : 'role'\n                        }\n                    }\n                },\n                syncOptions : {\n                    syncIdField : 'role'\n                }\n            };\n\n        // Chained by features\n        me.populateColumn({\n            columnRecord,\n            swimlaneRecord,\n            columnConfig\n        });\n\n        // Supplied by app\n        me.columnRenderer?.({\n            columnRecord,\n            swimlaneRecord,\n            columnConfig\n        });\n\n        return columnConfig;\n    }\n\n    renderSwimlane(swimlaneRecord) {\n        const\n            me                             = this,\n            { showCountInHeader, columns } = me,\n            {\n                id = 'default',\n                domId = 'default',\n                text,\n                height,\n                flex,\n                color\n            }                              = swimlaneRecord || {},\n            elementId                      = `${me.id}-swimlane-${domId}`,\n            namedColor                     = DomHelper.isNamedColor(color) ? color : null,\n            swimlaneConfig                 = {\n                id    : elementId,\n                class : {\n                    'b-taskboard-swimlane'              : 1,\n                    'b-fixed-height'                    : height && !flex,\n                    'b-last'                            : !swimlaneRecord || swimlaneRecord === me.swimlanes.last,\n                    [`b-taskboard-color-${namedColor}`] : namedColor\n                },\n                style : {\n                    color : namedColor ? null : color,\n                    height,\n                    flex\n                },\n                dataset : {\n                    lane          : domId,\n                    domTransition : true\n                },\n                elementData : {\n                    elementType : 'swimlane',\n                    laneId      : id\n                },\n                children : {\n                    // If a lane is defined, it has a header\n                    header : swimlaneRecord && {\n                        id    : `${elementId}-header`,\n                        tag   : 'header',\n                        class : {\n                            'b-taskboard-swimlane-header' : 1\n                        },\n                        dataset : {\n                            role          : 'header',\n                            domTransition : 'preserve-padding'\n                        },\n                        children : {\n                            title : {\n                                class : {\n                                    'b-taskboard-swimlane-title' : 1\n                                },\n                                children : {\n                                    text,\n                                    count : showCountInHeader && {\n                                        tag   : 'span',\n                                        class : {\n                                            'b-taskboard-swimlane-count' : 1\n                                        },\n                                        text : `(${me.getSwimlaneTasks(swimlaneRecord)?.size ?? 0})`\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    // Lane or no lane, there is always a body to contain columns\n                    body : {\n                        id    : `${elementId}-body`,\n                        class : {\n                            'b-taskboard-swimlane-body' : 1\n                        },\n                        dataset : {\n                            role          : 'body',\n                            domTransition : true\n                        },\n                        // Columns within the lane\n                        children : columns.map(column =>\n                            !column.hidden && me.renderColumn(swimlaneRecord, column)\n                        ),\n                        syncOptions : {\n                            syncIdField      : 'column',\n                            releaseThreshold : 0\n                        }\n                    }\n                },\n                syncOptions : {\n                    syncIdField : 'role'\n                }\n            };\n\n        me.populateSwimlane({\n            swimlaneRecord,\n            swimlaneConfig\n        });\n\n        // Supplied by app\n        me.swimlaneRenderer?.({\n            swimlaneRecord,\n            swimlaneConfig\n        });\n\n        return swimlaneConfig;\n    }\n\n    // Creates a DOM config for the entire TaskBoard, rendered to panels body\n    get bodyConfig() {\n        const\n            me = this,\n            // <remove-on-release>\n            // TODO: Ask Don about a better way\n            // </remove-on-release>\n            // Pull in configs that affect rendering, even if not used here to prime them\n            {\n                /* eslint-disable no-unused-vars */\n                stickyHeaders,\n                showCountInHeader,\n                columns,\n                columnField,\n                swimlaneField,\n                tasksPerRow,\n                headerItems,\n                bodyItems,\n                footerItems,\n                selectedTasks,\n                showCollapseInHeader,\n                showCollapseTooltip,\n                taskSorterFn,\n                stretchCards\n                /* eslint-enable no-unused-vars */\n            }  = me;\n\n        // On first compose, supply a minimal body to have element ready when features inject their contents on next\n        // compose. Allows us to avoid using hacks to pull features in early\n        if (!me.rendered) {\n            // Queue up another recompose after the minimal bootstrap, to render columns while loading\n            me.setTimeout(() => me.recompose(), 0);\n\n            return {\n                // Required by panel, it expects a bodyElement reference\n                reference : 'bodyElement',\n                // Listeners are only set up on first sync, has to go here (not internalListeners no purpose, these are\n                // EventHelper listeners)\n                // eslint-disable-next-line bryntum/no-listeners-in-lib\n                listeners : ObjectHelper.assign({ thisObj : me }, me.domListeners)\n            };\n        }\n\n        // We get here on second compose, features are now pulled in and we have an outer element ready\n        const bodyConfig = {\n            // Save some processing by not cloning the config, it is regenerated on every compose anyway\n            skipClone : true,\n            reference : 'bodyElement',\n            class     : {\n                'b-taskboard-body' : 1,\n                'b-sticky-headers' : stickyHeaders\n            },\n            children : [\n                // Column headers\n                {\n                    tag   : 'header',\n                    id    : `${me.id}-column-headers`,\n                    class : {\n                        'b-taskboard-column-headers' : 1\n                    },\n                    children : columns.map(column => !column.hidden && me.renderColumnHeader(column)),\n                    dataset  : {\n                        lane          : 'header',\n                        domTransition : true\n                    },\n                    syncOptions : {\n                        syncIdField : 'column'\n                    }\n                }\n            ],\n            syncOptions : {\n                syncIdField      : 'lane',\n                releaseThreshold : 0,\n                ignoreRefs       : 'children' // References in \"children\" should not be hoisted to the panel\n            }\n        };\n\n        let { swimlanes } = me;\n\n        // There is always a swimlane\n        if (!swimlanes?.count) {\n            swimlanes = [null];\n        }\n\n        // Swimlanes\n        for (const lane of swimlanes) {\n            if (!lane?.hidden) {\n                bodyConfig.children.push(me.renderSwimlane(lane));\n            }\n        }\n\n        me.populateBody({\n            bodyConfig\n        });\n\n        me.isComposed = true;\n\n        return bodyConfig;\n    }\n\n    // For chaining, to decorate dom config\n    populateCard(args) {\n        super.populateCard?.(args);\n    }\n\n    populateColumn(args) {\n        super.populateColumn?.(args);\n    }\n\n    populateColumnHeader(args) {\n        super.populateColumnHeader?.(args);\n    }\n\n    populateSwimlane(args) {\n        super.populateSwimlane?.(args);\n    }\n\n    populateBody(args) {\n        super.populateBody?.(args);\n    }\n\n    afterRecompose() {\n        super.afterRecompose();\n\n        const me = this;\n\n        if (!me.isInitiallyComposed && me.isComposed) {\n            me.isInitiallyComposed = true;\n            me.initialCompose();\n        }\n\n        if (me.project.taskStore.count > 0) {\n            me.trigger('renderTasks', { taskRecords : me.project.taskStore.allRecords });\n        }\n\n        me.transitionRecompose = null;\n    }\n\n    // For chaining, replaces render() since we don't do full compose on render\n    initialCompose() {\n        this.trigger('initialCompose');\n    }\n\n    // For chaining, to react to element changes\n    onRenderColumn() {}\n\n    onRemoveColumnElement() {}\n\n    onRenderSwimlane() {}\n\n    onRemoveSwimlaneElement() {}\n\n    //endregion\n\n    //region Transition - experimental\n\n    // Prevent dom transitions until resumed\n    suspendDomTransition() {\n        this.domTransitionSuspended++;\n    }\n\n    // Resume dom transitions\n    resumeDomTransition() {\n        this.domTransitionSuspended--;\n    }\n\n    // Recompose transitioning dom\n    recomposeWithDomTransition(options) {\n        const me = this;\n\n        if (me.useDomTransition && !me.domTransitionSuspended) {\n            me.transitionRecompose = {\n                selector : '[data-dom-transition]',\n                duration : 300,\n                element  : me._bodyElement, // _ needed to not flush recompose if we are dirty\n                ...options\n            };\n        }\n\n        // Transitioned recompose takes a bit of time, if we are requested to recompose again while it is ongoing,\n        // we queue up another recompose to run after the transition is done\n        if (me.recompose.suspended) {\n            me._recomposeQueued = true;\n        }\n        else {\n            me.recompose();\n        }\n    }\n\n    resumeRecompose() {\n        super.resumeRecompose();\n\n        // Kick of another recompose if needed, see comment in recomposeWithDomTransition() above\n        if (this._recomposeQueued) {\n            this._recomposeQueued = null;\n            this.recompose();\n        }\n    }\n\n    //endregion\n\n    //region Extract configs\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs for the task board, with special handling for columns\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        if (result.columns) {\n            delete result.columns.modelClass;\n        }\n\n        return result;\n    }\n\n    //endregion\n\n    // Expected by CrudManagerView\n    refresh() {\n        this.recompose();\n    }\n}\n\nTaskBoardBase.initClass();\nVersionHelper.setVersion('taskboard', '5.5.0');\n","import TaskItem from './TaskItem.js';\n\n/**\n * @module TaskBoard/view/item/TaskMenuItem\n */\n\n/**\n * Item that adds a `···` button hooked up to display the {@link TaskBoard/feature/TaskMenu} on click.\n *\n * Requires the {@link TaskBoard/feature/TaskMenu} to work as intended.\n *\n * {@inlineexample TaskBoard/view/item/TaskMenuItem.js}\n *\n * @extends TaskBoard/view/item/TaskItem\n * @classType taskMenu\n */\nexport default class TaskMenuItem extends TaskItem {\n    static $name = 'TaskMenuItem';\n\n    static type = 'taskMenu';\n\n    /**\n     * @hideconfigs editor\n     */\n\n    static defaultEditor = null;\n\n    static render({ taskBoard, domConfig }) {\n        if (!taskBoard.features.taskMenu || taskBoard.features.taskMenu.disabled) {\n            return false;\n        }\n\n        domConfig.tag = 'button';\n        domConfig.class['b-icon b-icon-menu-horizontal'] = 1;\n    }\n\n    static onClick({ source : taskBoard, event }) {\n        taskBoard.features.taskMenu?.showContextMenu(event, { target : event.target });\n    }\n}\n\nTaskMenuItem.initClass();\n","import TaskBoardBase from './TaskBoardBase.js';\n\nimport '../feature/ColumnHeaderMenu.js';\nimport '../feature/ColumnToolbars.js';\nimport '../feature/TaskDrag.js';\nimport '../feature/TaskDragSelect.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/TaskMenu.js';\n\nimport './item/ImageItem.js';\nimport './item/ProgressItem.js';\nimport './item/RatingItem.js';\nimport './item/ResourceAvatarsItem.js';\nimport './item/SeparatorItem.js';\nimport './item/TagsItem.js';\nimport './item/TaskMenuItem.js';\nimport './item/TemplateItem.js';\nimport './item/TodoListItem.js';\n\n/**\n * @module TaskBoard/view/TaskBoard\n */\n\n/**\n * A kanban board widget that allows you to visualize and mange tasks.\n *\n * {@inlineexample TaskBoard/view/TaskBoardBasic.js}\n *\n * ## Datalayer\n *\n * TaskBoards datalayer is based on Schedulers. It consumes a {@link TaskBoard.model.ProjectModel project} that holds\n * stores that in turn holds records. The stores used by default are:\n *\n * * {@link TaskBoard.store.TaskStore} - Store holding tasks, which are instances of {@link TaskBoard.model.TaskModel}\n * * {@link Scheduler.store.ResourceStore} - Holds resources, see {@link Scheduler.model.ResourceModel}\n * * {@link Scheduler.store.AssignmentStore} - Holds assignments, links between resources and tasks, see {@link Scheduler.model.AssignmentModel}\n *\n * Data can be supplied inline or loaded using the projects {@link Scheduler.data.mixin.ProjectCrudManager CrudManager}\n * capabilities. Example using inline data:\n *\n * {@frameworktabs}\n * {@js}\n *\n * ```javascript\n * new TaskBoard({\n *     project : {\n *         tasksData : [\n *             { id : 1, name : 'Try TaskBoard' }\n *         ]\n *     }\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const project = useRef();\n *\n *     const [tasks] = useState([\n *          { id : 1, name : 'Try TaskBoard' }\n *     ]);\n *\n *     return (\n *         <>\n *             <BryntumProjectModel ref={project} tasks={tasks} />\n *             <BryntumTaskBoard project={project} />\n *         </>\n *     )\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n * ```html\n * <bryntum-project-model ref=\"project\" :tasks=\"tasks\" />\n * <bryntum-task-board :project=\"project\" />\n * ```\n *\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *         tasks : reactive([\n *             { id : 1, name : 'Try TaskBoard' }\n *         ])\n *      };\n *    }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n *\n * ```html\n * <bryntum-project-model #project [tasks]=\"tasks\"></bryntum-project-model>\n * <bryntum-task-board [project]=\"project\"></bryntum-task-board>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *     tasks = [\n *         { id : 1, name : 'Try TaskBoard' }\n *     ]\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * And using CrudManager to load remote data:\n *\n * {@frameworktabs}\n * {@js}\n *\n * ```javascript\n * new TaskBoard({\n *     project : {\n *         loadUrl : 'data/load.php',\n *         autoLoad : true\n *     }\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const project = useRef();\n *\n *     return (\n *         <>\n *             <BryntumProjectModel ref={project} loadUrl=\"data/load.php\" />\n *             <BryntumTaskBoard project={project} />\n *         </>\n *     )\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n * ```html\n * <bryntum-project-model ref=\"project\" :load-url=\"loadUrl\" />\n * <bryntum-task-board :project=\"project\" />\n * ```\n *\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *         loadUrl : 'data/load.php'\n *      };\n *    }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n *\n * ```html\n * <bryntum-project-model #project [loadUrl]=\"loadUrl\"></bryntum-project-model>\n * <bryntum-task-board [project]=\"project\"></bryntum-task-board>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *     loadUrl = 'data/load.php'\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * ## Columns\n *\n * The tasks are displayed in columns. Which column a task belongs to is determined by the tasks value for the\n * configured {@link #config-columnField}. Columns can be defined as strings or as {@link TaskBoard.model.ColumnModel}\n * data objects, supplied to the {@link #config-columns columns config}. This snippet illustrates it:\n *\n * {@frameworktabs}\n * {@js}\n *\n * ```javascript\n * new TaskBoard({\n *     // The status field of tasks will be used to link a task to a column\n *     columnField : 'status',\n *\n *     // Columns as strings or objects\n *     columns : [\n *         'todo', // Will be displayed as Todo\n *         { id : 'done', text : 'Done!' }\n *     ],\n *\n *     // TaskBoard data\n *     project : {\n *         tasksData : [\n *             // Since we use the \"status\" field to determine column,\n *             // this task will belong to the \"done\" column\n *             { id : 1, name : 'Create mockup', status : 'done' },\n *             // And this one to \"todo\"\n *             { id : 2, name : 'Write docs', status : 'todo' }\n *         ]\n *     }\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const project = useRef();\n *\n *     // TaskBoard data\n *     const [tasks] = useState([\n *         // Since we use the \"status\" field to determine column,\n *         // this task will belong to the \"done\" column\n *         { id : 1, name : 'Create mockup', status : 'done' },\n *        // And this one to \"todo\"\n *        { id : 2, name : 'Write docs', status : 'todo' }\n *     ]);\n *\n *     // Columns as strings or objects\n *     const columns = [\n *        'todo', // Will be displayed as Todo\n *         { id : 'done', text : 'Done!' }\n *     ];\n *\n *     // The status field of tasks will be used to link a task to a column\n *     const columnField = 'status';\n *\n *     return (\n *         <>\n *             <BryntumProjectModel ref={project} tasks={tasks} />\n *             <BryntumTaskBoard\n *                 project={project}\n *                 columns={columns}\n *                 columnField={columnField}\n *                 />\n *         </>\n *     )\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n * ```html\n * <bryntum-project-model ref=\"project\" :tasks=\"tasks\" />\n * <bryntum-task-board\n *     :project=\"project\"\n *     :columns=\"columns\"\n *     :columnField=\"columnField\"\n *     />\n * ```\n *\n * ```javascript\n * export default {\n *     setup() {\n *         return {\n *             // TaskBoard data\n *             tasks : reactive([\n *                 // Since we use the \"status\" field to determine column,\n *                 // this task will belong to the \"done\" column\n *                 { id : 1, name : 'Create mockup', status : 'done' },\n *                 // And this one to \"todo\"\n *                 { id : 2, name : 'Write docs', status : 'todo' }\n *             ]),\n *\n *             // Columns as strings or objects\n *             columns : [\n *                 'todo', // Will be displayed as Todo\n *                 { id : 'done', text : 'Done!' }\n *             ],\n *\n *             // The status field of tasks will be used to link a task to a column\n *             columnField : 'status'\n *         };\n *     }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n *\n * ```html\n * <bryntum-project-model #project [tasks]=\"tasks\"></bryntum-project-model>\n * <bryntum-task-board\n *     [project]=\"project\"\n *     [columns]=\"columns\"\n *     [columnField]=\"columnField\"\n *     >\n * </bryntum-task-board>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *     // TaskBoard data\n *     tasks = reactive([\n *         // Since we use the \"status\" field to determine column,\n *         // this task will belong to the \"done\" column\n *         { id : 1, name : 'Create mockup', status : 'done' },\n *         // And this one to \"todo\"\n *         { id : 2, name : 'Write docs', status : 'todo' }\n *     ])\n *\n *     // Columns as strings or objects\n *     columns = [\n *         'todo', // Will be displayed as Todo\n *         { id : 'done', text : 'Done!' }\n *     ]\n *\n *     // The status field of tasks will be used to link a task to a column\n *     columnField = 'status'\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * The supplied columns are loaded into an internal store, named {@link #property-columns}. You can use it at runtime\n * to access, add, remove and filter columns.\n *\n * ## Swimlanes\n *\n * The TaskBoard can optionally be divided into horizontal swimlanes.\n *\n * {@inlineexample TaskBoard/view/TaskBoardSwimlanes.js}\n *\n * They are defined and populated in a very similar manner to columns:\n *\n * {@frameworktabs}\n * {@js}\n *\n * ```javascript\n * new TaskBoard({\n *     // The prio field of tasks will be used to link a task to a swimlane\n *     swimlaneField : 'prio',\n *\n *     // Swimlanes as strings or objects\n *     swimlanes : [\n *         'low', // Will be displayed as Low\n *         { id : 'high', text : 'High!' }\n *     ],\n *\n *     // TaskBoard data\n *     project : {\n *         tasksData : [\n *             // Since we use the \"prio\" field to determine swimlane,\n *             // this task will belong to the \"high\" lane\n *             { id : 1, name : 'Create mockup', status : 'done', prio : 'high' },\n *\n *             // And this one to \"low\"\n *             { id : 2, name : 'Write docs', status : 'todo', prio : 'low' }\n *         ]\n *     }\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const project = useRef();\n *\n *     // TaskBoard data\n *     const [tasks] = useState([\n *         // Since we use the \"prio\" field to determine swimlane,\n *         // this task will belong to the \"high\" lane\n *         { id : 1, name : 'Create mockup', status : 'done', prio : 'high' },\n *\n *         // And this one to \"low\"\n *         { id : 2, name : 'Write docs', status : 'todo', prio : 'low' }\n *     ]);\n *\n *     // Swimlanes as strings or objects\n *     const swimlanes = [\n *        'low', // Will be displayed as Low\n *         { id : 'high', text : 'High!' }\n *     ];\n *\n *     // The prio field of tasks will be used to link a task to a swimlane\n *     const swimlaneField = 'prio';\n *\n *     return (\n *         <>\n *             <BryntumProjectModel ref={project} tasks={tasks} />\n *             <BryntumTaskBoard\n *                 project={project}\n *                 swimlanes={swimlanes}\n *                 swimlaneField={swimlaneField}\n *                 />\n *         </>\n *     )\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n * ```html\n * <bryntum-project-model ref=\"project\" :tasks=\"tasks\" />\n * <bryntum-task-board\n *     :project=\"project\"\n *     :swimlanes=\"swimlanes\"\n *     :swimlaneField=\"swimlaneField\"\n *     />\n * ```\n *\n * ```javascript\n * export default {\n *     setup() {\n *         return {\n *             // TaskBoard data\n *             tasks : reactive([\n *                 // Since we use the \"prio\" field to determine swimlane,\n *                 // this task will belong to the \"high\" lane\n *                 { id : 1, name : 'Create mockup', status : 'done', prio : 'high' },\n *\n *                 // And this one to \"low\"\n *                 { id : 2, name : 'Write docs', status : 'todo', prio : 'low' }\n *             ]),\n *\n *             // Swimlanes as strings or objects\n *             swimlane : [\n *                 'low', // Will be displayed as Low\n *                 { id : 'high', text : 'High!' }\n *             ],\n *\n *             // The prio field of tasks will be used to link a task to a swimlane\n *             swimlanenField : 'prio'\n *         };\n *     }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n *\n * ```html\n * <bryntum-project-model #project [tasks]=\"tasks\"></bryntum-project-model>\n * <bryntum-task-board\n *     [project]=\"project\"\n *     [swimlanes]=\"swimlanes\"\n *     [swimlaneField]=\"swimlaneField\"\n *     >\n * </bryntum-task-board>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *     // TaskBoard data\n *     tasks = [\n *         // Since we use the \"prio\" field to determine swimlane,\n *         // this task will belong to the \"high\" lane\n *         { id : 1, name : 'Create mockup', status : 'done', prio : 'high' },\n *\n *         // And this one to \"low\"\n *         { id : 2, name : 'Write docs', status : 'todo', prio : 'low' }\n *     ]\n *\n *     // Swimlanes as strings or objects\n *     swimlanes = [\n *         'low', // Will be displayed as Low\n *         { id : 'high', text : 'High!' }\n *     ]\n *\n *     // The prio field of tasks will be used to link a task to a swimlane\n *     swimlaneField = 'prio'\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * ## Task order\n *\n * The order of tasks in a column is determined by their order in the task store. By default the store is sorted by\n * {@link TaskBoard/model/TaskModel#field-weight}. Changing store sorting will rearrange the tasks:\n *\n * ```javascript\n * // Rearrange tasks by name\n * taskBoard.project.taskStore.sort('name');\n * ```\n *\n * When loading tasks that has no weights specified a generated weight (index * 100) will be silently assigned.\n *\n * Dragging and dropping tasks changes their weight and resorts the store. Note that if you want to sort by something\n * other than weight and still want a task to stay where it is dropped you will have to opt out of the default\n * behaviour by configuring {@link TaskBoard/feature/TaskDrag#config-reorderTaskRecords} as `true`.\n *\n * If you programmatically change a weight you have to manually sort the store for the task to move:\n *\n * ```javascript\n * // Programmatic change of weight requires resorting manually\n * taskBoard.project.taskStore.first.weight = 1000;\n * taskBoard.project.taskStore.sort();\n * ```\n *\n * ## Sharing a project\n *\n * When consuming a project from a different product (for example Gantt), you will likely want the cards on the board\n * to have a stable order no matter how data is sorted in the other product. This can be achieved by configuring a\n * {@link #config-taskSorterFn}, which is then applied on the UI layer to resort tasks before rendering their cards.\n * You can use it to enforce sorting by weight:\n *\n * ```javascript\n * // Shortcut to always enforce sorting by weight\n * const taskBoard = new TaskBoard({\n *    taskSorterFn : true\n * });\n * ```\n *\n * Or supply a custom [Array sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)\n * function:\n *\n * ```javascript\n * // Custom sorting fn\n * const taskBoard = new TaskBoard({\n *    taskSorterFn(a, b) {\n *        return a.name.localeCompare(b.name);\n *    }\n * });\n * ```\n *\n * <div class=\"note\">\n * When consuming a non-TaskBoard project no weights will be assigned by default, make sure your data has weights if\n * you want stable task ordering.\n * </div>\n *\n * ## Customizing task content\n *\n * Task contents can be easily customized using {@link TaskBoard/view/mixin/TaskItems task items}, lightweight\n * \"widgets\" that can be added to a tasks header, body and footer.\n *\n * For more control over what gets rendered into a task, you can supply a {@link #config-taskRenderer} function. It is\n * called prior to updating the DOM for each task, allowing you to directly manipulate what ends up there.\n *\n * For more information see:\n *\n * * [Styling guide](#TaskBoard/guides/customization/styling.md)\n * * [Customize task contents guide](#TaskBoard/guides/customization/taskcontents.md)\n *\n * ## Large data sets\n *\n * Having a large number of cards rendered to DOM simultaneously can lead to poor performance. To address this issue,\n * TaskBoard supports partial virtualized rendering. This means that only the cards that are visible in the viewport\n * are fully rendered, cards outside the viewport are only outlined.\n *\n * When enabled, the board displays faster and is more responsive with big data sets, but it also means that scrolling\n * is more costly since cards coming into view has to be rendered. And since it is not fully virtualized, the board will\n * still be slow with very large data sets.\n *\n * <div class=\"note\">A Kanban board is best suited for using with a smaller set of tasks (hundreds rather than\n * thousands). Before enabling partial virtualized rendering we strongly recommend you consider restructuring the\n * application. Could it for example filter the tasks based on user, project or similar to work on a subset?</div>\n *\n * To enable partial virtualized rendering, the height of all tasks must be known. To communicate this to the TaskBoard,\n * implement a {@link #config-getTaskHeight getTaskHeight()} function. See its documentation for more information and\n * snippets.\n *\n * <div class=\"note\">Note that as part of the optimizations for partial virtualized rendering, the inner element in\n * columns that contain cards is absolutely positioned. This leads to column not being able to automatically shrink wrap\n * the cards, you will have to set a height on the swimlane (or task board if not using swimlanes) to size things\n * correctly.</div>\n *\n * {@region Keyboard shortcuts}\n * TaskBoard has the following default keyboard shortcuts:\n * <div class=\"compact\">\n *\n * | Keys                 | Action                 | Action description                                                         |\n * |----------------------|------------------------|----------------------------------------------------------------------------|\n * | `ArrowDown`          | *navigateDown*         | Moves focus to task below currently focused element                        |\n * | `ArrowLeft`          | *navigateLeft*         | Moves focus to task to the left of currently focused element               |\n * | `ArrowUp`            | *navigateUp*           | Moves focus to task above currently focused element                        |\n * | `ArrowRight`         | *navigateRight*        | Moves focus to task to the right of currently focused element              |\n * | `Enter`              | *activate*             | Show the Task Editor for currently focused task                            |\n * | `Space`              | *keyboardSelect*       | This selects or deselects the focused card (deselecting all others)        |\n * | `Ctrl`+`Space`       | *keyboardToggleSelect* | This selects or deselects the focused card, preserving any other selection |\n * | `Shift`+`ArrowDown`  | *selectDown*           | Hold `Shift` when keyboard navigating to extend selection                  |\n * | `Shift`+`ArrowLeft`  | *selectLeft*           | Hold `Shift` when keyboard navigating to extend selection                  |\n * | `Shift`+`ArrowUp`    | *selectUp*             | Hold `Shift` when keyboard navigating to extend selection                  |\n * | `Shift`+`ArrowRight` | *selectRight*          | Hold `Shift` when keyboard navigating to extend selection                  |\n *\n * </div>\n *\n * <div class=\"note\" style=\"font-size:0.9em\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * If you prefer for selection to always move with the arrow keys, see\n * {@link TaskBoard.view.mixin.TaskNavigation#config-selectOnNavigation}.\n *\n * The following TaskBoard features has their own keyboard shortcuts. Follow the links for details.\n * * {@link TaskBoard.feature.ColumnHeaderMenu#keyboard-shortcuts ColumnHeaderMenu}\n * * {@link TaskBoard.feature.SimpleTaskEdit#keyboard-shortcuts SimpleTaskEdit}\n * * {@link TaskBoard.feature.TaskMenu#keyboard-shortcuts TaskMenu}\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#TaskBoard/guides/customization/keymap.md).\n * {@endregion}\n *\n * ## Find out more\n *\n * * {@link TaskBoard.view.mixin.ExpandCollapse Expanding and collapsing columns and swimlanes}\n * * {@link TaskBoard.view.mixin.ResponsiveCards Responsive behaviour for cards}\n * * {@link TaskBoard.view.mixin.TaskBoardDom Resolving elements <-> records}\n * * {@link TaskBoard.view.mixin.TaskBoardDomEvents Handling card events}\n * * {@link TaskBoard.view.mixin.TaskBoardScroll Scrolling to tasks, columns and swimlanes}\n * * {@link TaskBoard.view.mixin.TaskItems Add content to task cards}\n * * {@link TaskBoard.view.mixin.TaskNavigation Keyboard navigation}\n * * {@link TaskBoard.view.mixin.TaskSelection Selection tasks using mouse and keyboard}\n *\n * @extends TaskBoard/view/TaskBoardBase\n *\n * @classType taskboard\n * @widget\n */\nexport default class TaskBoard extends TaskBoardBase {\n    static $name = 'TaskBoard';\n    static type = 'taskboard';\n\n    static configurable = {\n        //region Hidden members\n\n        /**\n         * @hideconfigs crudManager, crudManagerClass, contentElementCls, htmlCls, defaults, hideWhenEmpty, itemCls, items, layout, layoutStyle, lazyItems, namedItems, textContent, content, html, defaultBindProperty, monitorResize, ripple, tooltip, tag, textAlign, preventTooltipOnTouch\n         */\n\n        /**\n         * @hideproperties $name, isSettingValues, isValid, items, layout, record, values, content, contentElement, focusElement, html, overflowElement, layoutStyle, tooltip, scrollable\n         */\n\n        /**\n         * @hidefunctions attachTooltip, isOfTypeName, mixin, optionalL, callback, resolveCallback, add, getWidgetById, insert, processWidgetConfig, remove, removeAll, construct, doDestroy, updateLocalization, compose, eachAncestor, eachWidget, query, queryAll, L\n         */\n\n        /**\n         * @event beforeSetRecord\n         * @hide\n         */\n\n        //endregion\n\n        features : {\n            columnHeaderMenu : true,\n            columnToolbars   : true,\n            taskDrag         : true,\n            taskDragSelect   : true,\n            taskEdit         : true,\n            taskMenu         : true\n        }\n    };\n}\n\nTaskBoard.initClass();\n","import FilterField from '../../Core/widget/FilterField.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/ColumnFilterField\n */\n\n/**\n * A field that filters the columns of a linked {@link TaskBoard.view.TaskBoard} when typing into it.\n *\n * {@inlineexample TaskBoard/widget/ColumnFilterField.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'columnfilterfield' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new ColumnFilterField({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype columnfilterfield\n * @extends Core/widget/FilterField\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class ColumnFilterField extends FilterField.mixin(TaskBoardLinked) {\n    static $name = 'ColumnFilterField';\n\n    static type = 'columnfilterfield';\n\n    static configurable = {\n\n        /**\n         * @hideconfigs store, filterFunction\n         */\n\n        store : 'this.taskBoard.columns',\n\n        /**\n         * The ColumnModel field name to filter by, defaults to `'text'`.\n         * @config {String}\n         * @default\n         * @category Common\n         */\n        field : 'text',\n\n        /**\n         * Label, defaults to a localized version of `'Filter columns'`.\n         *\n         * Content is determined by the `TaskBoard.filterColumns` key in the applied locale.\n         *\n         * @config {String}\n         * @category Label\n         */\n        label : 'L{TaskBoard.filterColumns}',\n\n        width : '20em',\n\n        triggers : {\n            filter : {\n                cls   : 'b-icon b-icon-filter',\n                align : 'start'\n            }\n        }\n    };\n}\n\nColumnFilterField.initClass();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport Button from '../../Core/widget/Button.js';\nimport '../../Core/widget/Menu.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/ColumnPickerButton\n */\n\n/**\n * A button with a menu allowing the user to toggle which columns are shown on the {@link TaskBoard.view.TaskBoard}.\n *\n * {@inlineexample TaskBoard/widget/ColumnPickerButton.js}\n *\n * Click to display a menu populated with the columns held in {@link TaskBoard.view.TaskBoard#property-columns}.\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'columnpickerbutton' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new ColumnPickerButton({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype columnpickerbutton\n * @extends Core/widget/Button\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class ColumnPickerButton extends Button.mixin(TaskBoardLinked) {\n    static $name = 'ColumnPickerButton';\n\n    static type = 'columnpickerbutton';\n\n    static configurable = {\n        text        : 'L{TaskBoard.Columns}',\n        icon        : 'b-icon-picker',\n        pressedIcon : 'b-icon-picker-rotated',\n        iconAlign   : 'end',\n        menuIcon    : null,\n        // items null needed to not be considered an object holding menu items\n        menu        : { items : null }\n    };\n\n    onToggleColumn({ item }) {\n        item.column.hidden = !item.checked;\n    }\n\n    // Populate menu before each show to make sure it is up to date\n    onMenuBeforeShow(info) {\n        super.onMenuBeforeShow(info);\n\n        info.source.items = this.taskBoard.columns.map(column => ({\n            ref     : column.id,\n            text    : StringHelper.encodeHtml(column.text),\n            checked : !column.hidden,\n            column,\n            onItem  : 'up.onToggleColumn'\n        }));\n    }\n}\n\nColumnPickerButton.initClass();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport Button from '../../Core/widget/Button.js';\nimport '../../Core/widget/Menu.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/ColumnScrollButton\n */\n\n/**\n * A button with a menu allowing the user to pick a column to scroll to.\n *\n * {@inlineexample TaskBoard/widget/ColumnScrollButton.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'columnscrollbutton' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new ColumnScrollButton({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype columnScrollButton\n * @extends Core/widget/Button\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class ColumnScrollButton extends Button.mixin(TaskBoardLinked) {\n    static $name = 'ColumnScrollButton';\n\n    static type = 'columnscrollbutton';\n\n    static configurable = {\n        text        : 'L{TaskBoard.scrollToColumn}',\n        icon        : 'b-icon-picker',\n        pressedIcon : 'b-icon-picker-rotated',\n        iconAlign   : 'end',\n        menuIcon    : null,\n        menu        : []\n    };\n\n    onClickColumn({ item }) {\n        this.setTimeout(() => this.taskBoard?.scrollToColumn(item.column), 100);\n    }\n\n    changeMenu(menu) {\n        // Nullified on destroy\n        if (menu) {\n            menu = this.taskBoard.columns.map(column => ({\n                ref    : column.id,\n                text   : StringHelper.encodeHtml(column.text),\n                column,\n                onItem : 'up.onClickColumn'\n            }));\n        }\n\n        return super.changeMenu(menu);\n    }\n}\n\nColumnScrollButton.initClass();\n","import SchedulerProjectCombo from '../../Scheduler/widget/ProjectCombo.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/ProjectCombo\n */\n\n/**\n * Combo that allows picking a dataset to use for a {@link TaskBoard.model.ProjectModel}. Each item holds a title and\n * a load url to reconfigure the project with.\n *\n * {@inlineexample TaskBoard/widget/ProjectCombo.js}\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         {\n *             type : 'taskboardprojectcombo',\n *             items : [\n *                 { title : 'Important project', url : 'data/load.php?id=1' },\n *                 { title : 'Another project', url : 'data/load.php?id=2' }\n *             ]\n *         }\n *     ],\n *\n *     project : {\n *         transport : {\n *             load : {\n *                 url : 'data/load.php?id=1'\n *             }\n *         },\n *\n *         autoLoad : true\n *     }\n * });\n * ```\n *\n * @extends Scheduler/widget/ProjectCombo\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @classType taskboardprojectcombo\n * @widget\n *\n * @typings Scheduler.widget.ProjectCombo -> Scheduler.widget.SchedulerProjectCombo\n */\nexport default class ProjectCombo extends SchedulerProjectCombo.mixin(TaskBoardLinked) {\n    static $name = 'ProjectCombo';\n    static type = 'taskboardprojectcombo';\n\n    static configurable = {\n        /**\n         * Project to reconfigure when picking an item. Resolved automatically if a TaskBoard is configured or detected.\n         * @config {TaskBoard.model.ProjectModel}\n         * @category Common\n         */\n        project : null\n    };\n\n    updateTaskBoard(taskBoard) {\n        if (taskBoard) {\n            this.project = taskBoard.project;\n        }\n    }\n\n    afterConfigure() {\n        // Force linking to project if TaskBoard is auto detected\n        if (!this._taskBoard) {\n            this.updateTaskBoard(this.taskBoard);\n        }\n    }\n}\n\n// Register this widget type with its Factory\nProjectCombo.initClass();\n","import FilterField from '../../Core/widget/FilterField.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/SwimlaneFilterField\n */\n\n/**\n * A field that filters the swimlanes of a linked {@link TaskBoard.view.TaskBoard} when typing into it.\n *\n * {@inlineexample TaskBoard/widget/SwimlaneFilterField.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'swimlanefilterfield' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new SwimlaneFilterField({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype swimlanefilterfield\n * @extends Core/widget/FilterField\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class SwimlaneFilterField extends FilterField.mixin(TaskBoardLinked) {\n    static $name = 'SwimlaneFilterField';\n\n    static type = 'swimlanefilterfield';\n\n    static configurable = {\n        store : 'this.taskBoard.swimlanes',\n\n        field : 'text',\n\n        label : 'L{TaskBoard.filterSwimlanes}',\n\n        width : '20em',\n\n        triggers : {\n            filter : {\n                cls   : 'b-icon b-icon-filter',\n                align : 'start'\n            }\n        }\n    };\n}\n\nSwimlaneFilterField.initClass();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport Button from '../../Core/widget/Button.js';\nimport '../../Core/widget/Menu.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/SwimlanePickerButton\n */\n\n/**\n * A button with a menu allowing the user to toggle which swimlanes are shown on the {@link TaskBoard.view.TaskBoard}.\n *\n * {@inlineexample TaskBoard/widget/SwimlanePickerButton.js}\n *\n * Click to display a menu populated with the swimlanes held in {@link TaskBoard.view.TaskBoard#property-swimlanes}.\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'swimlanepickerbutton' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new SwimlanePickerButton({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype swimlanepickerbutton\n * @extends Core/widget/Button\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class SwimlanePickerButton extends Button.mixin(TaskBoardLinked) {\n    static $name = 'SwimlanePickerButton';\n\n    static type = 'swimlanepickerbutton';\n\n    static configurable = {\n        text        : 'L{TaskBoard.Swimlanes}',\n        icon        : 'b-icon-picker',\n        pressedIcon : 'b-icon-picker-rotated',\n        iconAlign   : 'end',\n        menuIcon    : null,\n        // items null needed to not be considered an object holding menu items\n        menu        : { items : null }\n    };\n\n    onToggleSwimlane({ item }) {\n        item.swimlane.hidden = !item.checked;\n    }\n\n    // Populate menu before each show to make sure it is up to date\n    onMenuBeforeShow(info) {\n        super.onMenuBeforeShow(info);\n\n        info.source.items = this.taskBoard.swimlanes.map(swimlane => ({\n            ref     : swimlane.id,\n            text    : StringHelper.encodeHtml(swimlane.text),\n            checked : !swimlane.hidden,\n            swimlane,\n            onItem  : 'up.onToggleSwimlane'\n        }));\n    }\n}\n\nSwimlanePickerButton.initClass();\n","import StringHelper from '../../Core/helper/StringHelper.js';\nimport Button from '../../Core/widget/Button.js';\nimport '../../Core/widget/Menu.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/SwimlaneScrollButton\n */\n\n/**\n * A button with a menu allowing the user to pick a swimlane to scroll to.\n *\n * {@inlineexample TaskBoard/widget/SwimlaneScrollButton.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'swimlanescrollbutton' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new SwimlaneScrollButton({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype swimlaneScrollButton\n * @extends Core/widget/Button\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class SwimlaneScrollButton extends Button.mixin(TaskBoardLinked) {\n    static $name = 'SwimlaneScrollButton';\n\n    static type = 'swimlanescrollbutton';\n\n    static configurable = {\n        text        : 'L{TaskBoard.scrollToSwimlane}',\n        icon        : 'b-icon-picker',\n        pressedIcon : 'b-icon-picker-rotated',\n        iconAlign   : 'end',\n        menuIcon    : null,\n        menu        : []\n    };\n\n    onClickSwimlane({ item }) {\n        this.setTimeout(() => this.taskBoard?.scrollToSwimlane(item.swimlane), 100);\n    }\n\n    changeMenu(menu) {\n        // Nullified on destroy\n        if (menu) {\n            menu = this.taskBoard.swimlanes.map(swimlane => ({\n                ref    : swimlane.id,\n                text   : StringHelper.encodeHtml(swimlane.text),\n                swimlane,\n                onItem : 'up.onClickSwimlane'\n            }));\n        }\n\n        return super.changeMenu(menu);\n    }\n}\n\nSwimlaneScrollButton.initClass();\n","import FilterField from '../../Core/widget/FilterField.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/TaskFilterField\n */\n\n/**\n * A field that filters the tasks of a linked {@link TaskBoard.view.TaskBoard} when typing into it.\n *\n * {@inlineexample TaskBoard/widget/TaskFilterField.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'taskfilterfield' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new TaskFilterField({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype taskfilterfield\n * @extends Core/widget/FilterField\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class TaskFilterField extends FilterField.mixin(TaskBoardLinked) {\n    static $name = 'TaskFilterField';\n\n    static type = 'taskfilterfield';\n\n    static configurable = {\n        store : 'this.taskBoard.project.taskStore',\n\n        field : 'name',\n\n        label : 'L{TaskBoard.filterTasks}',\n\n        width : '20em',\n\n        triggers : {\n            filter : {\n                cls   : 'b-icon b-icon-filter',\n                align : 'start'\n            }\n        }\n    };\n}\n\nTaskFilterField.initClass();\n","import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport Field from '../../Core/widget/Field.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport '../../Core/widget/List.js';\nimport '../../Core/widget/Button.js';\n\n/**\n * @module TaskBoard/widget/TodoListField\n */\n\n/**\n * A field that displays, and also lets users edit, a list of todo items. Each item has a checkbox to mark if the item\n * is completed or not and a button to edit its text/remove it. Designed to be used in the task editor, to work in\n * tandem with the {@link TaskBoard.view.item.TodoListItem}.\n *\n * {@inlineexample TaskBoard/widget/TodoListField.js}\n *\n * To hook it up, add it to the task editors items and link it to a field on your task model declared with\n * `type : 'array'`. The fields data is expected to be an array of objects. Configure {@link #config-textField} and\n * {@link #config-checkedField} to match the names used by the objects in your array.\n *\n * This snippet illustrates basic usage:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *    features : {\n *        taskEdit : {\n *            items : {\n *                todo : {\n *                    type         : 'todolist',\n *                    label        : 'Todo',\n *                    field        : 'todo',\n *                    // \"title\" property will be used as the todo item text\n *                    textField    : 'title',\n *                    // \"done\" property will drive the checkbox\n *                    checkedField : 'done'\n *                }\n *            }\n *        }\n *    },\n *\n *    project : {\n *        taskStore : {\n *            fields : [ { name : 'todo', type : 'array' } ]\n *        }\n *\n *        tasksData : [\n *            {\n *                id   : 1,\n *                name : 'Important task',\n *                todo : [\n *                    { title : 'Fix this', done : true },\n *                    { title : 'Fix that', done : false }\n *                ]\n *            }\n *        ]\n *    }\n * });\n * ```\n *\n * @classtype todolistfield\n * @extends Core/widget/Field\n * @inputfield\n */\nexport default class TodoListField extends Field {\n    static $name = 'TodoListField';\n    static type = 'todolistfield';\n    static alias = 'todolist';\n\n    static configurable = {\n        /**\n         * Name of a property on a todo item to display as its text.\n         *\n         * @config {String}\n         * @category Common\n         * @default\n         */\n        textField : 'text',\n\n        /**\n         * Name of a property on a todo item to use for the checkbox. The property is expected to be a boolean.\n         *\n         * @config {String}\n         * @category Common\n         * @default\n         */\n        checkedField : 'checked',\n\n        /**\n         * Configure as `false` to hide the per item edit button and the add item button. Users can still check/uncheck\n         * items.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        editableItems : true,\n\n        list : {\n            type : 'list',\n\n            multiSelect : true,\n\n            store : {\n                fields : []\n            },\n\n            itemIconTpl() {\n                return `<i class=\"b-todo-checkbox b-icon\"></i>`;\n            }\n        },\n\n        addButton : {\n            type : 'button',\n            cls  : 'b-todo-add',\n            icon : 'b-icon-add',\n            text : 'L{TodoListField.add}'\n        },\n\n        role : null\n    };\n\n    compose() {\n        const { editableItems } = this;\n\n        return {\n            class : {\n                'b-editable' : editableItems\n            }\n        };\n    }\n\n    changeList(list) {\n        return Widget.create(ObjectHelper.assign({\n            // List does not support remapping out of the box\n            itemTpl : record => StringHelper.xss`<div class=\"b-todo-text\">${record.getValue(this.textField)}</div><i class='b-todo-edit b-icon b-icon-edit' data-noselect></i>`\n        }, list));\n    }\n\n    updateList(list) {\n        // Detect click on edit icon\n        list.ion({\n            item    : 'onItemClick',\n            thisObj : this\n        });\n\n        // Detect check/uncheck\n        list.selected.ion({\n            change  : 'onSelectionChange',\n            thisObj : this\n        });\n    }\n\n    changeAddButton(button) {\n        const result = Widget.create(button);\n\n        this.ariaElement = result.element;\n\n        return result;\n    }\n\n    updateAddButton(button) {\n        button.ion({\n            click   : 'onAddClick',\n            thisObj : this\n        });\n    }\n\n    get childItems() {\n        return [this.list, this.addButton];\n    }\n\n    get inputElement() {\n        return this.list.element;\n    }\n\n    get innerElements() {\n        return super.innerElements.concat(this.addButton.element);\n    }\n\n    changeValue(value) {\n        value = value || [];\n\n        let autoUpdate = false;\n\n        // Auto update original array if we are used in an auto updating container\n        this.eachAncestor(a => {\n            if (a.autoUpdateRecord) {\n                autoUpdate = true;\n                return false;\n            }\n        });\n\n        // Original value (or a clone thereof if we are not live updating) is kept up to date on later modifications\n        this.originalValue = autoUpdate ? value : ObjectHelper.clone(value);\n\n        if (value) {\n            // Clone original value as our value, to not pollute the original value\n            value = ObjectHelper.clone(value);\n\n            value.forEach((v, i) => {\n                // id required by list\n                v.id = i + 1;\n                // map back to original value\n                v.originalIndex = i;\n            });\n        }\n\n        return value;\n    }\n\n    updateValue(value) {\n        if (value) {\n            const me = this;\n\n            // Populate the list with our value clone\n            me.list.items = value;\n\n            // Selection is used to check/uncheck items. Set flag to prevent updating original at this stage\n            me.isSettingValue = true;\n            me.list.selected.values = value.filter(v => v[me.checkedField]);\n            me.isSettingValue = false;\n        }\n    }\n\n    get value() {\n        // Always return a new array, required to flag array data field as modified / for UI to update\n        return this.originalValue.slice();\n    }\n\n    set value(value) {\n        super.value = value;\n    }\n\n    // Cant be invalid currently\n    get isValid() {\n        return true;\n    }\n\n    // Edit a todo item, using overlaid editor\n    editItem(record, element) {\n        const\n            me     = this,\n            // Always creating a new editor, destroyed when editing finishes\n            editor = new Editor({\n                appendTo   : me.element,\n                owner      : me,\n                cls        : 'b-todo-editor',\n                inputField : {\n                    type     : 'text',\n                    triggers : {\n                        remove : {\n                            cls : 'b-todo-remove b-icon-trash',\n                            handler() {\n                                me.removeItem(record);\n                                editor.cancelEdit();\n                            }\n                        }\n                    }\n                },\n                // Above modal\n                style             : 'z-index : 20000',\n                internalListeners : {\n                    complete({ value }) {\n                        me.originalValue[record.originalIndex][me.textField] = value;\n                        me.triggerFieldChange({ value : me.value, userAction : true });\n                    },\n                    finishEdit() {\n                        editor.destroy();\n                    },\n                    thisObj : me\n                }\n            });\n\n        // Start editing using configured field mapping\n        editor.startEdit({\n            target : element,\n            record,\n            field  : me.textField\n        });\n    }\n\n    // Remove a todo item, updating both the list and the original value\n    removeItem(record) {\n        const\n            me                = this,\n            { originalIndex } = record;\n\n        // Move following items up one notch to match position in originalValue after the splice below\n        me.list.store.forEach(r => {\n            if (r.parentIndex > record.parentIndex) {\n                r.originalIndex--;\n            }\n        });\n\n        me.list.store.remove(record);\n\n        me.originalValue.splice(originalIndex, 1);\n\n        me.triggerFieldChange({ value : me.value, userAction : true });\n    }\n\n    // Lists selection model is used to check/uncheck todo items. React on changes here\n    onSelectionChange() {\n        const\n            me       = this,\n            { list } = me;\n\n        if (!me.isSettingValue) {\n            me.originalValue.forEach((v, i) => {\n                const listRecord = list.store.getAt(i);\n                // Selection might change as a reaction to an item being removed = no listRecord\n                if (listRecord) {\n                    v[me.checkedField] = list.selected.includes(listRecord);\n                }\n            });\n\n            me.triggerFieldChange({ value : me.value, userAction : true });\n        }\n    }\n\n    // Clicked on a list item, react if it is on the edit icon\n    onItemClick({ record, event }) {\n        if (event.target.matches('.b-todo-edit')) {\n            this.editItem(record, event.target.closest('.b-list-item'));\n        }\n    }\n\n    // Clicked the add button, add to original value and then plug it back in to not have to care about syncing it with\n    // lists store\n    onAddClick() {\n        const me = this;\n\n        me.originalValue.push({\n            [me.textField]    : me.L('L{newTodo}'),\n            [me.checkedField] : false\n        });\n\n        me.value = me.originalValue;\n\n        me.triggerFieldChange({ value : me.value, userAction : true });\n    }\n}\n\nTodoListField.initClass();\n","import UndoRedoBase from '../../Core/widget/base/UndoRedoBase.js';\nimport '../../Core/widget/Combo.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/UndoRedo\n */\n\n/**\n * A widget encapsulating undo/redo functionality for the {@link TaskBoard.model.ProjectModel project} of a TaskBoard.\n *\n * To make use of this, the project must be configured with a\n * {@link Scheduler.model.mixin.ProjectModelMixin#config-stm State Tracking Manager}.\n *\n * If inserted into a TaskBoard (such as into a `tbar`, or `bbar`), the project of the that TaskBoard will be used.\n *\n * If this widget is to be used \"standalone\" (rendered into the DOM outside of a TaskBoard), this must be configured\n * with a reference the TaskBoard.\n *\n * There are three child widgets encapsulated which may be referenced through the {@link Core.widget.Container#property-widgetMap}:\n *\n * - `undoBtn` - The button which operates the undo operation\n * - `transactionsCombo` - A combobox into which is pushed the list of transactions,\n * - `redoBtn` - The button which operates the redo operation\n *\n * The transactionsCombo may be configured away if only the buttons are required:\n *\n * ```javascript\n * {\n *     type      : 'undoredo',\n *     items     : {\n *         transactionsCombo : null\n *     }\n * }\n * ```\n *\n * The example below illustrated how to embed an `undoredo` widget in the top toolbar of a TaskBoard:\n *\n * {@inlineexample TaskBoard/widget/UndoRedo.js}\n *\n * @extends Core/widget/base/UndoRedoBase\n * @classType taskboardundoredo\n * @demo TaskBoard/undo-redo\n * @widget\n */\nexport default class UndoRedo extends UndoRedoBase.mixin(TaskBoardLinked) {\n\n    static $name = 'UndoRedo';\n\n    static type = 'taskboardundoredo';\n\n    construct() {\n        super.construct(...arguments);\n\n        this.stm = this.taskBoard.project.stm;\n    }\n}\n\nUndoRedo.initClass();\n","import Slider from '../../Core/widget/Slider.js';\nimport TaskBoardLinked from './mixin/TaskBoardLinked.js';\n\n/**\n * @module TaskBoard/widget/ZoomSlider\n */\n\n/**\n * A slider that controls the {@link TaskBoard/view/TaskBoardBase#config-tasksPerRow} config of TaskBoard.\n *\n * {@inlineexample TaskBoard/widget/ZoomSlider.js}\n *\n * When used within a TaskBoard, it connects to it automatically:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({\n *     tbar : [\n *         { type : 'zoomslider' }\n *     ]\n * });\n * ```\n *\n * When used outside of a TaskBoard, it will query globally to find one but if there are multiple on page it might have\n * to be linked to one manually (see {@link TaskBoard/widget/mixin/TaskBoardLinked#config-taskBoard}:\n *\n * ```javascript\n * const taskBoard = new TaskBoard({});\n *\n * const picker = new ZoomSlider({\n *    taskBoard // Link it to the taskBoard instance created above\n * });\n * ```\n *\n * @classtype zoomslider\n * @extends Core/widget/Slider\n * @mixes TaskBoard/widget/mixin/TaskBoardLinked\n * @widget\n */\nexport default class ZoomSlider extends Slider.mixin(TaskBoardLinked) {\n    static $name = 'ZoomSlider';\n\n    static type = 'zoomslider';\n\n    static configurable = {\n        text : 'L{TaskBoard.zoom}',\n\n        max   : 10,\n        min   : 1,\n        // Override default to avoid hitting updater, value set in afterConstruct\n        value : null,\n\n        showValue : false\n    };\n\n    calculateValue(input) {\n        return this.max - input + 1;\n    }\n\n    afterConstruct() {\n        this.value = this.calculateValue(this.taskBoard.tasksPerRow);\n    }\n\n    onInput({ value }) {\n        this.taskBoard.tasksPerRow = this.calculateValue(value);\n    }\n\n    updateValue(value) {\n        super.updateValue(value);\n\n        this.onInput({ value });\n    }\n\n    getTooltipHtml(value) {\n        const tasksPerRow = this.calculateValue(value);\n\n        return `${tasksPerRow} card${tasksPerRow === 1 ? '' : 's'} per row`;\n    }\n}\n\nZoomSlider.initClass();\n","// feature\nexport { default as ColumnDrag } from '../lib/TaskBoard/feature/ColumnDrag.js';\nexport { default as ColumnHeaderMenu } from '../lib/TaskBoard/feature/ColumnHeaderMenu.js';\nexport { default as ColumnToolbars } from '../lib/TaskBoard/feature/ColumnToolbars.js';\nexport { default as SimpleTaskEdit } from '../lib/TaskBoard/feature/SimpleTaskEdit.js';\nexport { default as SwimlaneDrag } from '../lib/TaskBoard/feature/SwimlaneDrag.js';\nexport { default as TaskBoardFeature } from '../lib/TaskBoard/feature/TaskBoardFeature.js';\nexport { default as TaskDrag } from '../lib/TaskBoard/feature/TaskDrag.js';\nexport { default as TaskDragSelect } from '../lib/TaskBoard/feature/TaskDragSelect.js';\nexport { default as TaskEdit } from '../lib/TaskBoard/feature/TaskEdit.js';\nexport { default as TaskMenu } from '../lib/TaskBoard/feature/TaskMenu.js';\nexport { default as TaskTooltip } from '../lib/TaskBoard/feature/TaskTooltip.js';\n\n// model\nexport { default as ColumnModel } from '../lib/TaskBoard/model/ColumnModel.js';\nexport { default as ProjectModel } from '../lib/TaskBoard/model/ProjectModel.js';\nexport { default as SwimlaneModel } from '../lib/TaskBoard/model/SwimlaneModel.js';\nexport { default as TaskModel } from '../lib/TaskBoard/model/TaskModel.js';\n\n// store\nexport { default as TaskStore } from '../lib/TaskBoard/store/TaskStore.js';\n\n// view/mixins\nexport { default as ExpandCollapse } from '../lib/TaskBoard/view/mixin/ExpandCollapse.js';\nexport { default as ResponsiveCards } from '../lib/TaskBoard/view/mixin/ResponsiveCards.js';\nexport { default as TaskBoardColumns } from '../lib/TaskBoard/view/mixin/TaskBoardColumns.js';\nexport { default as TaskBoardDom } from '../lib/TaskBoard/view/mixin/TaskBoardDom.js';\nexport { default as TaskBoardDomEvents } from '../lib/TaskBoard/view/mixin/TaskBoardDomEvents.js';\nexport { default as TaskBoardScroll } from '../lib/TaskBoard/view/mixin/TaskBoardScroll.js';\nexport { default as TaskBoardStores } from '../lib/TaskBoard/view/mixin/TaskBoardStores.js';\nexport { default as TaskBoardSwimlanes } from '../lib/TaskBoard/view/mixin/TaskBoardSwimlanes.js';\nexport { default as TaskBoardVirtualization } from '../lib/TaskBoard/view/mixin/TaskBoardVirtualization.js';\nexport { default as TaskItems } from '../lib/TaskBoard/view/mixin/TaskItems.js';\nexport { default as TaskNavigation } from '../lib/TaskBoard/view/mixin/TaskNavigation.js';\nexport { default as TaskSelection } from '../lib/TaskBoard/view/mixin/TaskSelection.js';\n\n// view/items\nexport { default as ImageItem } from '../lib/TaskBoard/view/item/ImageItem.js';\nexport { default as ProgressItem } from '../lib/TaskBoard/view/item/ProgressItem.js';\nexport { default as RatingItem } from '../lib/TaskBoard/view/item/RatingItem.js';\nexport { default as ResourceAvatarsItem } from '../lib/TaskBoard/view/item/ResourceAvatarsItem.js';\nexport { default as SeparatorItem } from '../lib/TaskBoard/view/item/SeparatorItem.js';\nexport { default as TagsItem } from '../lib/TaskBoard/view/item/TagsItem.js';\nexport { default as TaskItem } from '../lib/TaskBoard/view/item/TaskItem.js';\nexport { default as TemplateItem } from '../lib/TaskBoard/view/item/TemplateItem.js';\nexport { default as TextItem } from '../lib/TaskBoard/view/item/TextItem.js';\nexport { default as TodoListItem } from '../lib/TaskBoard/view/item/TodoListItem.js';\n\n// view\nexport { default as TaskBoard } from '../lib/TaskBoard/view/TaskBoard.js';\nexport { default as TaskBoardBase } from '../lib/TaskBoard/view/TaskBoardBase.js';\n\n// widget base\nexport { default as ColorBoxCombo } from '../lib/TaskBoard/widget/base/ColorBoxCombo.js';\n\n// widget mixin\nexport { default as TaskBoardLinked } from '../lib/TaskBoard/widget/mixin/TaskBoardLinked.js';\n\nexport { default as ColumnCombo } from '../lib/TaskBoard/widget/ColumnCombo.js';\nexport { default as ColumnFilterField } from '../lib/TaskBoard/widget/ColumnFilterField.js';\nexport { default as ColumnPickerButton } from '../lib/TaskBoard/widget/ColumnPickerButton.js';\nexport { default as ColumnScrollButton } from '../lib/TaskBoard/widget/ColumnScrollButton.js';\nexport { default as ProjectCombo } from '../lib/TaskBoard/widget/ProjectCombo.js';\nexport { default as ResourcesCombo } from '../lib/TaskBoard/widget/ResourcesCombo.js';\nexport { default as SwimlaneCombo } from '../lib/TaskBoard/widget/SwimlaneCombo.js';\nexport { default as SwimlaneFilterField } from '../lib/TaskBoard/widget/SwimlaneFilterField.js';\nexport { default as SwimlanePickerButton } from '../lib/TaskBoard/widget/SwimlanePickerButton.js';\nexport { default as SwimlaneScrollButton } from '../lib/TaskBoard/widget/SwimlaneScrollButton.js';\nexport { default as TagCombo } from '../lib/TaskBoard/widget/TagCombo.js';\nexport { default as TaskColorPicker } from '../lib/TaskBoard/widget/TaskColorPicker.js';\nexport { default as TaskColorCombo } from '../lib/TaskBoard/widget/TaskColorCombo.js';\nexport { default as TaskEditor } from '../lib/TaskBoard/widget/TaskEditor.js';\nexport { default as TaskFilterField } from '../lib/TaskBoard/widget/TaskFilterField.js';\nexport { default as TodoListField } from '../lib/TaskBoard/widget/TodoListField.js';\nexport { default as UndoRedo } from '../lib/TaskBoard/widget/UndoRedo.js';\nexport { default as ZoomSlider } from '../lib/TaskBoard/widget/ZoomSlider.js';\n"],"names":["TaskBoardFeature","InstancePlugin","mixin","Factoryable","factoryable","configurable","onConfigChange","args","isConfiguring","isDestroying","client","recompose","_$name","ColumnDrag","$name","type","pluginConfig","after","initialCompose","me","draggable","ColumnZone","new","dragRootElement","disabled","bodyWrapElement","dropRootElement","owner","internalListeners","beforeDragStart","dragStart","thisObj","doDestroy","_this$draggable","destroy","doDisable","disable","movePrev","columnRecord","columns","move","getPrev","moveNext","beforeIndex","Math","min","indexOf","count","getAt","populateColumnHeaderMenu","items","rtl","readOnly","moveColumnLeft","text","icon","weight","onItem","moveColumnRight","onBeforeDragStart","drag","event","trigger","onDragStart","initClass","Base","Draggable","Droppable","Events","dragSelector","dragItemSelector","draggingItemCls","dragProxy","open","itemElement","startEvent","taskBoard","headerBounds","Rectangle","from","proxyOffset","EventHelper","getClientPoint","getDelta","proxy","DomHelper","createElement","className","parent","style","top","y","left","translate","x","width","getBoundingClientRect","retainElement","elements","getColumnElements","Object","assign","forEach","element","i","columnClone","cloneNode","bounds","originalWidth","originalHeight","height","matches","swimlane","closest","header","DomSync","getChild","body","swimlaneClone","headerClone","bodyClone","length","paddingBottom","getStyleValue","parentElement","parseFloat","flex","appendChild","classList","add","dragMove","position","setupDragContext","result","scrollManager","monitoringConfig","scrollables","bodyElement","direction","startDrag","resolveColumnRecord","suspendResponsiveness","wasStarted","dragEnter","dropIndicators","map","elementData","dropIndicator","insertDropIndicators","beforeColumnRecord","insertAt","headerContainer","actualHeaders","children","ArrayHelper","remove","insertBefore","_client$swimlanes","swimlaneRecord","swimlanes","domId","swimlaneBody","getSwimlaneElement","actualColumns","updateValidity","valid","toggle","invalid","_overElement$elementD","documentRoot","proxyBounds","undefined","overElement","elementFromPoint","center","columnHeaderElement","targetBounds","beforeColumn","getNext","shouldTrigger","dragDrop","finalizer","Promise","resolve","commit","suspendDomTransition","resumeDomTransition","resumeResponsiveness","alignTo","getPropertyTransitionDuration","onTransitionEnd","property","handler","dragLeave","doAbort","finalizeAbort","original","dragEnd","aborted","ColumnHeaderMenu","ContextMenuBase","processItems","menu","anchor","triggerEvent","config","chain","push","changeItems","ObjectHelper","assertObject","changeProcessItems","fn","assertFunction","populateColumnHeader","columnHeaderConfig","padder","tag","class","getDataFromEvent","taskBoardData","addTask","onColumnHeaderClick","target","showContextMenu","align","showMenu","register","ColumnToolbars","topItems","bottomItems","namedItems","tooltip","ariaLabel","click","columnMap","Map","toolbar","changeTopItems","changeBottomItems","getToolbar","location","key","get","_me$processItems","clonedItems","getTruthyKeys","ref","namedItem","item","merge","change","call","cls","overflow","monitorResize","contentElMutationObserver","dataset","role","domTransition","set","populateColumn","columnConfig","bbar","removeColumnToolbar","columnId","swimlaneId","setTimeout","delete","removeColumnToolbars","onRemoveColumnElement","id","onRemoveSwimlaneElement","column","onAddClick","source","onChange","onClick","TaskItem","defaultEditor","getEditorConfig","editor","SimpleTaskEdit","addNewAtEnd","editorConfig","keyMap","Enter","Escape","before","changeAddNewAtEnd","assertBoolean","editTask","taskRecord","getTaskElement","taskItem","resolveTaskItem","itemEditorConfig","simpleTaskEdit","field","focus","Editor","appendTo","parentNode","scrollAction","completeKey","cancelKey","inputField","autoSelect","name","allowTargetOut","complete","cancel","finishEdit","currentElement","color","scrollIntoView","block","startEdit","record","editPrevious","cardElement","itemElements","Array","querySelectorAll","index","prevTaskRecord","getPreviousTask","prevCardElement","prevItemElements","editNext","nextTaskRecord","getNextTask","getColumn","getSwimlane","completeEdit","cancelEdit","onActivateTask","preventDefault","onEditorComplete","dataField","onEditorCancel","onEditorFinishEdit","isActionAvailable","Boolean","SwimlaneDrag","SwimlaneZone","resolveSwimlaneRecord","swimlaneElement","padding","syncIdMap","deflate","insertDropIndicator","beforeSwimlaneRecord","taskBoardBounds","bottom","beforeSwimlane","cardSelector","ignoreOriginal","hasChanged","some","initialParent","initialIndex","TaskDrag","reorderTaskRecords","TaskZone","domEvent","taskRecords","dropTargetSelector","columnEl","resolveTaskRecord","cardClones","selectedTasks","includes","filter","t","sort","a","b","parentIndex","taskElements","r","taskHeights","taskElement","_elementData$swimlane","cardClone","originalColor","AsyncHelper","animationFrame","parentBounds","scrollLeft","scrollTop","configureListeners","listeners","rootElement","isSelected","slice","initiatedFrom","nextSibling","targetTaskRecord","instanceMeta","dragging","getFirstVisibleChild","offsetParent","getCardAt","clientX","clientY","columnElement","_cardElement","targetSwimlane","targetColumn","tasksPerRow","cardGap","columnRect","topCard","centerX","cardAbove","cardBelow","columnContentWidth","getColumnWidth","columnPadding","innerColumnWidth","floor","cardBefore","cardAfter","_insertBefore","_insertBefore$element","cardRect","nextElementSibling","_insertBefore2","lastCardElement","card","eventColor","_drag$targetSwimlane","isNamedColor","lane","changed","columnField","swimlaneField","taskStore","project","columnRecords","tasks","swimlaneRecords","task","moveBefore","taskId","newWeight","tasksBelow","taskAbove","weightDiff","max","round","_tasksBelow$","shift","toSet","features","taskDrag","taskSorterFn","offsetWidth","dropClone","TaskDragSelect","dragThreshold","state","changeDragThreshold","threshold","assertNumber","initializeDragSelect","returnAll","floatRoot","cardRectangles","el","rectangle","ctrlKey","deselectAll","navigateable","updateSelection","len","cardData","shouldSelect","intersect","selected","selectTask","deselectTask","onColumnMouseDown","button","startX","startY","mouseUpDetacher","on","document","mouseup","onMouseMove","deltaX","abs","deltaY","rect","constrainTo","setTranslateXY","onMouseUp","_me$mouseUpDetacher","_me$element","Target","TaskBoardLinked","_taskBoard","up","widget","isTaskBoardBase","Widget","query","changeTaskBoard","isTaskBoard","Error","ColorBoxCombo","Combo","displayField","valueField","editable","showBoxForNoColor","listItemTpl","html","StringHelper","encodeHtml","picker","afterConstruct","value","syncInputFieldValue","colorBox","innerElements","reference","ColumnCombo","changeStore","ResourcesCombo","multiSelect","resourceRecord","avatarRendering","getResourceAvatar","initials","iconCls","imageUrl","image","resourceImagePath","outerHTML","chipView","scrollable","itemTpl","btip","$config","peekConfig","_multiSelect","inputElement","sync","targetElement","avatarContainer","domConfig","resourceStore","changeAvatarRendering","old","AvatarRendering","SwimlaneCombo","TaskColorPicker","ColorPicker","colorClasses","colorClassPrefix","colors","TaskColorCombo","ColorField","clearable","TaskEditor","Popup","centered","modal","closeOnMaskTap","closable","autoUpdateRecord","autoUpdateFields","saveAndCloseOnEnter","handleSelector","autoShow","closeAction","title","defaults","labelWidth","label","description","resources","hidden","saveButton","cancelButton","maximizeOnMobile","capitalize","eventStore","usesSingleAssignment","processItemsObject","updateAutoUpdateRecord","autoUpdate","updateRecord","onSaveClick","values","isValid","close","onCancelClick","_me$owner","_me$owner2","onInternalKeyDown","blur","TaskEdit","editorType","_this$editor","changeEditorConfig","changeEditorType","assertString","getById","getValue","isEditing","editorClass","resolveType","combinedItems","mergeConfigs","$meta","processResult","BrowserHelper","isHoverableDevice","show","Scroller","showBy","isVisible","ion","hide","onEditorHide","defaultPrevented","populateTaskMenu","_this$client$getTaskE","TaskMenu","showAvatars","updateTriggerEvent","detachListeners","onTriggerEvent","internalShowContextMenu","showMenuFor","selector","buttonElement","querySelector","eventParams","alignSpec","col","isColumn","checked","closeParent","setValue","sibling","xss","isSwimlane","resource","_this$avatarRendering","avatar","toggleGroup","removeTask","updateShowAvatars","_this$avatarRendering2","TaskTooltip","template","changeTemplate","_tooltip","changeTooltip","oldTooltip","Tooltip","axisLock","forSelector","forElement","showOnHover","hoverDelay","hideDelay","anchorToTarget","allowOver","tools","getHtml","getTipHtml","bind","textContent","tip","activeTarget","L","join","render","getConfig","ColumnModel","Model","fields","defaultValue","getColumnTasks","firstStore","collapse","expand","TaskModel","EventModel","TaskStore","EventStore","autoAssignWeight","storeId","modelClass","removeUnassignedEvent","sorters","ascending","afterLoadData","records","setData","ProjectModel","SchedulerProjectModel","ProjectCrudManager","eventStoreClass","eventModelClass","taskStoreClass","taskModelClass","construct","eventsData","tasksData","addPrioritizedStore","assignmentStore","store","data","toJSON","assignmentsData","resourcesData","SwimlaneModel","getSwimlaneTasks","ExpandCollapse","showCollapseInHeader","collapseTitle","showCollapseTooltip","widgetClass","changeShowCollapseInHeader","toggleCollapse","collapsed","isSwimlaneModel","toggleSwimlaneCollapse","toggleColumnCollapse","flush","_cardElements$","_columnElements$","columnElements","headerElement","hasFixedWidth","cardElements","cardWidth","columnWidth","unshift","syncOverflowState","_super$populateColumn","hasSwimlanes","collapsible","expander","_super$populateColumn2","populateSwimlane","_super$populateColumn3","swimlaneConfig","onColumnClick","onSwimlaneHeaderClick","ResponsiveCards","cardSizes","maxWidth","maxAvatars","headerItems","bodyItems","resizeObserver","changeCardSizes","assertArray","responsivenessSuspended","getCardSize","perRow","getTasksPerRow","find","size","onChildResize","entries","suspended","shouldRecompose","entry","contentRect","observedWidth","cardSize","now","changeResizeObserver","observer","oldObserver","disconnect","ResizeObserver","transitionChangeActions","update","TaskBoardColumns","autoGenerateColumns","properties","shouldAutoGenerateColumns","changeAutoGenerateColumns","changeColumnField","updateColumnField","storage","removeIndex","addIndex","unique","changeColumns","Store","objectify","updateColumns","$store","refresh","getDistinctValues","_columns","onColumnsChange","action","invalidateIndices","options","addTransition","opacity","removeTransition","recomposeWithDomTransition","inVisualOrder","findItem","swimlaneDelta","wrap","columnTasks","nextTaskIndex","prevTaskIndex","TaskBoardDom","_element$elementData","_element$elementData2","_this$swimlanes","laneId","taskColumnElement","getTaskColumnElement","getTaskSwimlaneElement","_this$swimlanes2","_this$swimlanes$getBy","getSwimlaneColumnElement","getColumnElement","_this$getColumnElemen","_this$swimlanes3","reduce","getColumnHeaderElement","_this$documentRoot$el","cacheCSSVar","css","measureSize","TaskBoardDomEvents","activateTaskEvent","domEvents","dblclick","mousedown","mousemove","mouseover","mouseout","keydown","contextmenu","domListeners","changeDomListeners","eventName","resolveEvent","triggerDomEvent","isScrolling","_element","contains","relatedTarget","domSyncCallback","lastDomConfig","syncId","elementType","isRefresh","_domConfig$class","_me$cardIntersectionO","cardIntersectionObserver","observe","isVirtualized","intersects","_me$cardIntersectionO2","unobserve","_me$swimlanes","_me$swimlanes2","isResizeObserved","onTaskMouseDown","onTaskClick","onTaskDblClick","onTaskContextMenu","TaskBoardScroll","scrollOptions","animate","highlight","testConfig","delayable","onScrollEnd","VersionHelper","isTestEnv","onPaint","firstPaint","scroll","capture","recomposeOnScrollEnd","changeScrollOptions","scrollToSwimlane","swimlaneOrId","_options","_options2","behavior","scrollToColumn","columnOrId","_options3","_options4","scrollToIntersection","_options5","_options6","edgeOffset","scrollToTask","taskOrId","_options7","_options8","start","end","stickyHeaders","offsetHeight","getTaskHeight","reject","detach","renderTask","renderedTaskRecord","expires","delay","alt","TaskBoardStores","projectModelClass","assignments","newTaskDefaults","loadMaskDefaults","useTransition","showDelay","syncMask","updateAssignments","updateResources","updateTasks","changeNewTaskDefaults","changeProject","isModel","attachToProject","bindCrudManager","Reflect","defineProperty","$master","prototype","buildIndexKey","dependentOn","attachToProjectStore","changePreCommit","listenersConfig","onTaskStoreEarlyChange","onTaskStoreChange","changes","onTaskStoreRefresh","taskData","columnBody","lastCard","lastElementChild","first","offsetTop","clientHeight","synced","autoSync","await","useDomTransition","domTransitionSuspended","isDestroyed","asArray","TaskBoardSwimlanes","autoGenerateSwimlanes","shouldAutoGenerateSwimlanes","changeAutoGenerateSwimlanes","changeSwimlaneField","updateSwimlaneField","changeSwimlanes","updateSwimlanes","_swimlanes","onSwimlanesChange","TaskBoardVirtualization","virtualize","drawOnScroll","changeVirtualize","updateVirtualize","IntersectionObserver","onCardIntersection","isIntersecting","refreshVirtualizedCards","changeGetTaskHeight","updateGetTaskHeight","compose","wasIntersecting","lastHeight","boundingClientRect","queueColumnRecompose","renderCardOutline","_me$getTaskHeight","tabIndex","renderCard","meta","TextItem","hasGeneratedId","getFieldDefinition","print","ResourceAvatarsItem","pickerWidth","hasOverflow","overflowCount","lastResource","colorPrefix","overlap","localeCompare","resourceId","syncOptions","syncIdField","fieldLess","resourceAvatars","separator","taskMenu","taskItemSelector","afterRe","beforeRe","TaskItems","footerItems","mergeItems","changeHeaderItems","changeBodyItems","changeFooterItems","renderItems","split","typeCls","hyphenate","order","populateCard","_super$populateCard","cardConfig","sizeHeaderItems","sizeBodyItems","sizeFooterItems","footer","clone","taskItemElement","_item$onClick","_item$onDblClick","onDblClick","navigationActions","TaskNavigation","ArrowDown","ArrowLeft","ArrowUp","ArrowRight","selectOnNavigation","getTaskNear","_documentRoot$element","gap","_documentRoot$element2","_documentRoot$element3","focusAndOptionallySelect","forceSelect","currentlyFocusedTask","activeElement","taskToFocus","navigateNext","keyEvent","select","found","nextColumnRecord","nextColumnElement","navigatePrev","prevColumnRecord","prevColumnElement","navigateRight","navigateLeft","navigateDown","nextTask","navigateUp","prevTask","activate","TaskSelection","isTaskSelectable","changeSelectedTasks","_this$isTaskSelectabl","toggleTaskSelection","_this$isTaskSelectabl2","deselect","include","triggerSelectionChange","selection","bryntumEvent","keyboardSelect","isEditable","keyboardToggleSelect","selectUp","selectDown","selectLeft","selectRight","populateBody","_super$populateBody","bodyConfig","ImageItem","src","baseUrl","ProgressItem","percent","RatingItem","SeparatorItem","TagCombo","afterConfigure","_me$store","tags","taskTags","Set","changeValue","$expectsString","TagsItem","str","isArray","textProperty","clsProperty","makeValidId","toLowerCase","TemplateItem","isObject","TodoListItem","textField","checkedField","clsField","checkedIcon","uncheckedIcon","firstRender","isArrayDataField","todo","locale","localeName","localeDesc","localeCode","GridBase","loadFailedMessage","syncFailedMessage","CrudManagerView","serverResponseLabel","TaskBoard","Columns","Swimlanes","changeColumn","changeSwimlane","filterColumns","filterSwimlanes","filterTasks","newTaskName","removeTasks","save","zoom","TodoListField","newTodo","UndoRedo","UndoLastAction","RedoLastAction","LocaleHelper","publishLocale","weightSorter","TaskBoardBase","Panel","Pluggable","State","Featureable","Styleable","Responsive","featureable","factory","layout","taskRenderer","swimlaneRenderer","stretchCards","showCountInHeader","cssVarPrefix","isInitiallyComposed","columnRecomposeQueue","recomposeColumns","onPaintOverride","changeResourceImagePath","changeUseDomTransition","changeStickyHeaders","changeScrollManager","oldScrollManager","ScrollManager","changeShowCountInHeader","changeTasksPerRow","changeSwimlaneRenderer","changeTaskRenderer","changeTaskSorterFn","recomposeColumn","clear","normalizeChildren","renderColumn","onlyChildren","callback","releaseThreshold","_me$taskRenderer","overriddenCard","namedColor","keys","renderColumnHeader","_me$getColumnTasks","_me$columnHeaderRende","minWidth","last","showOverflow","columnHeaderRenderer","_me$columnRenderer","isTree","elementId","columnRenderer","renderSwimlane","_me$getSwimlaneTasks","_me$swimlaneRenderer","rendered","skipClone","ignoreRefs","isComposed","_super$populateSwimla","afterRecompose","allRecords","transitionRecompose","onRenderColumn","onRenderSwimlane","duration","_bodyElement","_recomposeQueued","resumeRecompose","getCurrentConfig","setVersion","TaskMenuItem","_taskBoard$features$t","columnHeaderMenu","columnToolbars","taskDragSelect","taskEdit","ColumnFilterField","FilterField","triggers","ColumnPickerButton","Button","pressedIcon","iconAlign","menuIcon","onToggleColumn","onMenuBeforeShow","info","ColumnScrollButton","onClickColumn","_this$taskBoard","changeMenu","ProjectCombo","SchedulerProjectCombo","updateTaskBoard","SwimlaneFilterField","SwimlanePickerButton","onToggleSwimlane","SwimlaneScrollButton","onClickSwimlane","TaskFilterField","Field","alias","editableItems","list","itemIconTpl","addButton","changeList","create","updateList","changeAddButton","ariaElement","updateAddButton","childItems","concat","eachAncestor","originalValue","v","originalIndex","updateValue","isSettingValue","editItem","removeItem","triggerFieldChange","userAction","splice","onSelectionChange","listRecord","onItemClick","UndoRedoBase","arguments","stm","ZoomSlider","Slider","showValue","calculateValue","input","onInput","getTooltipHtml","HOSTS","ONE_DAY","EXPIRING_CLASSES","host","test","href","initialized","initExpiryHelper","baseClass","ExpiryHelper","__foo","product","productName","version","getVersion","callHomeDelay","blockUrl","queryString","Product","verifyUrl","blocked","lastVersionCheck","trialKey","versionCheckKey","console","log","cacheTrialStartTime","isExpired","readyState","onTrialExpired","addEventListener","updateBlockedStatus","timeString","getLocalStorageItem","time","Number","isNaN","trialStartTime","Date","setLocalStorageItem","_window$bryntum","_window$bryntum$this$","window","bryntum","expired","saveVersionCheckKey","url","encodeURIComponent","logUrl","license","img","Image","onload","naturalWidth","blockTrial","onerror","rootEl","expirationShown","warn","Toast","timeout","removeEachSelector","forEachSelector","fromElement","maskExpiredWidget","removeLocalStorageItem","mask","cover","setWaterMark","darkColor","lightColor","_DomHelper$themeInfo","_DomHelper$themeInfo$","thumb","themeInfo","endsWith","svgString","backgroundImage","btoa","watermarkTaskBoardBase","taskboard","setWatermark","Override","apply","_overridden","GlobalEvents","ignoreDomainRe","websiteUrls","products","frameworks","prod","framework","flat","match","newScript","dataLayer","gtag","head"],"mappings":"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O,QAAQ,CAAC5B,gBAAgB,CAACxL,IAAI,EAAEwL,gBAAgB,CAAC,CAAA;AAClEA,gBAAgB,CAAC3L,MAAM,GAAG,kBAAkB;;ACzU5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMwN,cAAc,SAASpO,gBAAgB,CAAC;EACzD,OAAOc,KAAK,GAAG,gBAAgB,CAAA;EAC/B,OAAOC,IAAI,GAAG,gBAAgB,CAAA;AAC9B,EAAA,OAAOV,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQgO,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,WAAW,EAAG;AACVT,MAAAA,OAAO,EAAG,IAAA;KACb;AACD;AACAU,IAAAA,UAAU,EAAG;AACTV,MAAAA,OAAO,EAAG;AACN9M,QAAAA,IAAI,EAAgB,QAAQ;AAC5BwC,QAAAA,IAAI,EAAgB,YAAY;AAChCiL,QAAAA,OAAO,EAAa,sBAAsB;AAC1CC,QAAAA,SAAS,EAAW,sBAAsB;AAC1C7M,QAAAA,iBAAiB,EAAG;AAChB8M,UAAAA,KAAK,EAAG,YAAA;AACZ,SAAA;AACJ,OAAA;KACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQjC,IAAAA,YAAY,EAAG,IAAA;G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;MACvB7O,YAAY,EAAK6O,MAAM,CAAC7O,YAAY;MACpCwH,cAAc,EAAGqH,MAAM,CAACrH,cAAAA;AAC5B,KAAC,CAAC,CAAA;AACN,GAAA;AACAuH,EAAAA,OAAOA,CAAC;AAAEF,IAAAA,MAAAA;AAAO,GAAC,EAAE;AAChB,IAAA,IAAI,CAACrN,OAAO,CAAC,WAAW,EAAE;AACtB2L,MAAAA,IAAI,EAAa0B,MAAM;MACvB7O,YAAY,EAAK6O,MAAM,CAAC7O,YAAY;MACpCwH,cAAc,EAAGqH,MAAM,CAACrH,cAAAA;AAC5B,KAAC,CAAC,CAAA;AACN,GAAA;AACA;AACJ,CAAA;;AACAsE,cAAc,CAACpK,SAAS,EAAE,CAAA;AAC1BoK,cAAc,CAACxN,MAAM,GAAG,gBAAgB;;AChUxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM0Q,QAAQ,SAASrN,IAAI,CAAC/D,KAAK,CAACC,WAAW,CAAC,CAAC;EAC1D,OAAOC,WAAW,GAAG,EAAE,CAAA;AACvB,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;GACK,CAAA;AACD,EAAA,OAAOkR,aAAa,GAAG;AAAExQ,IAAAA,IAAI,EAAG,MAAA;GAAQ,CAAA;AACxC,EAAA,OAAOyQ,eAAeA,CAAC;IAAE3E,MAAM;AAAE4C,IAAAA,IAAAA;AAAK,GAAC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C3D,GAAA;AACJ,CAAA;AACAkT,QAAQ,CAAC7hB,SAAS,EAAE,CAAA;AACpB6hB,QAAQ,CAACjle,MAAM4mB,QAAQ,SAAShb,eAAe,CAAC;EAClD,OAAO1L,KAAK,GAAG,UAAU,CAAA;EACzB,OAAOC,IAAI,GAAG,UAAU,CAAA;AACxB,EAAA,OAAOV,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQoM,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQvJ,IAAAA,KAAK,EAAG,IAAI;AACZnC,IAAAA,IAAI,EAAG,MAAM;AACb;AACR;AACA;AACA;AACA;AACA;AACQ6L,IAAAA,YAAY,EAAG,iBAAiB;AAChC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ6a,IAAAA,WAAW,EAAG;AACV7G,MAAAA,KAAK,EAAK,IAAI;AACdsB,MAAAA,OAAO,EAAG,SAAA;KACb;AACDxV,IAAAA,IAAI,EAAG;AACHuB,MAAAA,KAAK,EAAI,SAAS;AAClBtB,MAAAA,MAAM,EAAG,IAAA;AACb,KAAA;AACA;AACR;AACA;AACA;AACQ;AACR;AACA;GACK,CAAA;;EACD,WAAW3L,YAAYA,GAAG;AACtB,IAAA,MAAM6L,MAAM,GAAG,KAAK,CAAC7L,YAAY,CAAA;AACjC6L,IAAAA,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,kBAAkB,CAAC,CAAA;AACrC,IAAA,OAAOF,MAAM,CAAA;AACjB,GAAA;AACA;EACAG,WAAWA,CAAC9J,KAAK,EAAE;AACf+J,IAAAA,YAAY,CAACC,YAAY,CAAChK,KAAK,EAAE,yBAAyB,CAAC,CAAA;AAC3D,IAAA,OAAOA,KAAK,CAAA;AAChB,GAAA;EACAiK,kBAAkBA,CAACV,YAAY,EAAE;AAC7BQ,IAAAA,YAAY,CAACI,cAAc,CAACZ,YAAY,EAAE,gCAAgC,CAAC,CAAA;AAC3E,IAAA,OAAOA,YAAY,CAAA;AACvB,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;EACAib,kBAAkBA,CAAC9a,YAAY,EAAE;AAC7B,IAAA,IAAI,CAAC+a,eAAe,CAAC,cAAc,CAAC,CAAA;AACpC,IAAA,IAAI/a,YAAY,EAAE;AACd,MAAA,IAAI,CAAClM,MAAM,CAACwmB,GAAG,CAAC;AACZ9T,QAAAA,IAAI,EAAa,cAAc;QAC/B,CAACxG,YAAY,GAAI,gBAAgB;AACjC7K,QAAAA,OAAO,EAAU,IAAA;AACrB,OAAC,CAAC,CAAA;AACN,KAAA;AACJ,GAAA;EACAI,SAASA,CAACC,OAAO,EAAE;AACf,IAAA,KAAK,CAACD,SAAS,CAACC,OAAO,CAAC,CAAA;IACxB,CAAC,IAAI,CAAC5B,aAAa,IAAI,IAAI,CAACE,MAAM,CAACC,SAAS,EAAE,CAAA;AAClD,GAAA;AACAinB,EAAAA,cAAcA,CAAC;AAAE/jB,IAAAA,KAAAA;AAAM,GAAC,EAAE;AACtB,IAAA,IAAI,CAACgkB,uBAAuB,CAAChkB,KAAK,CAAC,CAAA;AACvC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACIikB,EAAAA,WAAWA,CAAC1V,UAAU,EAAE2V,QAAQ,GAAG,wBAAwB,EAAE;IACzD,MACIxF,aAAa,GAAG,IAAI,CAAC7hB,MAAM,CAAC2R,cAAc,CAACD,UAAU,CAAC;AACtD4V,MAAAA,aAAa,GAAGzF,aAAa,CAAC0F,aAAa,CAACF,QAAQ,CAAC;AACrDG,MAAAA,WAAW,GAAK;QAAE9V,UAAU;QAAE9P,YAAY,EAAG,IAAI,CAAC5B,MAAM,CAACkU,SAAS,CAACxC,UAAU,CAAC;AAAEmQ,QAAAA,aAAAA;OAAe,CAAA;IACnG,IAAI4F,SAAS,GAAG,IAAI,CAAA;AACpB,IAAA,IAAIH,aAAa,EAAE;MACfE,WAAW,CAAC3F,aAAa,GAAGyF,aAAa,CAAA;AACzCG,MAAAA,SAAS,GAAG;AACRpa,QAAAA,MAAM,EAAGia,aAAAA;OACZ,CAAA;AACL,KAAA;AACA,IAAA,IAAI,CAACha,eAAe,CAACka,WAAW,EAAEC,SAAS,CAAC,CAAA;AAChD,GAAA;AACAna,EAAAA,eAAeA,CAACka,WAAW,EAAE,GAAG3nB,IAAI,EAAE;IAClC,IAAI,CAAC,IAAI,CAACG,MAAM,CAACgY,UAAU,CAACwP,WAAW,CAAC9V,UAAU,CAAC,EAAE;MACjD,IAAI,CAAC1R,MAAM,CAACud,UAAU,CAACiK,WAAW,CAAC9V,UAAU,CAAC,CAAA;AAClD,KAAA;AACA,IAAA,KAAK,CAACpE,eAAe,CAACka,WAAW,EAAE,GAAG3nB,IAAI,CAAC,CAAA;AAC/C,GAAA;EACAoN,gBAAgBA,CAAC9J,KAAK,EAAE;AACpB,IAAA,OAAOoJ,YAAY,CAAC5G,MAAM,CAAC,KAAK,CAACsH,gBAAgB,CAAC9J,KAAK,CAAC,EAAEA,KAAK,CAAC+J,aAAa,CAAC,CAAA;AAClF,GAAA;AACA0Z,EAAAA,gBAAgBA,CAAC;IAAEpkB,KAAK;AAAEkP,IAAAA,UAAAA;AAAW,GAAC,EAAE;IACpC,MAAM;MAAE1R,MAAM;AAAEc,MAAAA,QAAAA;AAAS,KAAC,GAAG,IAAI,CAAA;AACjC,IAAA,IAAI,CAACd,MAAM,CAAC0C,QAAQ,IAAI,CAAC5B,QAAQ,EAAE;AAAA,MAAA,IAAAqI,iBAAA,CAAA;MAC/B,MACI;UAAEuR,WAAW;UAAEC,aAAa;AAAElE,UAAAA,aAAAA;AAAc,SAAC,GAAGzW,MAAM;AACtD,QAAA;UAAEgiB,aAAa;AAAEoC,UAAAA,UAAAA;SAAY,GAAmBpkB,MAAM,CAAC6a,OAAO;AAC9D7C,QAAAA,UAAU,GAAsCvB,aAAa,CAACC,QAAQ,CAAChF,UAAU,CAAC,CAAA;MACtFlP,KAAK,CAAC+N,MAAM,GAAG;QACX3N,IAAI,EAAQ,CAA4B8X,0BAAAA,EAAAA,WAAY,CAAC,CAAA;AACrD7X,QAAAA,IAAI,EAAO,kCAAkC;AAC7CC,QAAAA,MAAM,EAAK,GAAG;QACdhC,QAAQ,EAAG4Q,UAAU,CAAChP,QAAQ;QAC9BsJ,IAAI,EAAOhM,MAAM,CAAC6B,OAAO,CAAC0G,GAAG,CAACmf,GAAG,KAAK;UAClC7Y,GAAG,EAAW6Y,GAAG,CAACrX,EAAE;UACpBzN,IAAI,EAAUkd,YAAY,CAACC,UAAU,CAAC2H,GAAG,CAAC9kB,IAAI,CAAC;AAC/CuM,UAAAA,GAAG,EAAW,oBAAoB;AAClCwY,UAAAA,QAAQ,EAAM,IAAI;UAClBC,OAAO,EAAOlW,UAAU,CAACgU,QAAQ,CAAChL,WAAW,CAAC,KAAKgN,GAAG,CAACrX,EAAE;AACzD;AACAwX,UAAAA,WAAW,EAAG,IAAA;AAClB,SAAC,CAAC,CAAC;AACH9kB,QAAAA,MAAMA,CAAC;AAAEgM,UAAAA,IAAAA;AAAK,SAAC,EAAE;UACb,IAAIA,IAAI,CAAC4Y,QAAQ,EAAE;YACfjW,UAAU,CAACoW,QAAQ,CAACpN,WAAW,EAAE3L,IAAI,CAACF,GAAG,CAAC,CAAA;YAC1CE,IAAI,CAACjK,MAAM,CAACtC,KAAK,CAACoD,OAAO,CAACmiB,OAAO,IAAI;cACjC,IAAIA,OAAO,KAAKhZ,IAAI,EAAE;gBAClBgZ,OAAO,CAACH,OAAO,GAAG,KAAK,CAAA;AAC3B,eAAA;AACJ,aAAC,CAAC,CAAA;AACN,WAAA;AACJ,SAAA;OACH,CAAA;AACD,MAAA,IAAI,CAAAze,iBAAA,GAAAnJ,MAAM,CAACqJ,SAAS,MAAA,IAAA,IAAAF,iBAAA,KAAA,KAAA,CAAA,IAAhBA,iBAAA,CAAkB9G,KAAK,IAAIsY,aAAa,EAAE;QAC1CnY,KAAK,CAAC8D,QAAQ,GAAG;AACb1D,UAAAA,IAAI,EAAOkd,YAAY,CAACkI,GAAI,CAAA,4BAAA,EAA8BrN,aAAc,CAAC,CAAA;AACzE9X,UAAAA,IAAI,EAAO,+BAA+B;AAC1CC,UAAAA,MAAM,EAAK,GAAG;UACdhC,QAAQ,EAAG4Q,UAAU,CAAChP,QAAQ;UAC9BsJ,IAAI,EAAOhM,MAAM,CAACqJ,SAAS,CAACd,GAAG,CAACiS,IAAI,KAAK;YACrC3L,GAAG,EAAW2L,IAAI,CAACnK,EAAE;YACrBzN,IAAI,EAAUkd,YAAY,CAACC,UAAU,CAACvF,IAAI,CAAC5X,IAAI,CAAC;AAChDqlB,YAAAA,UAAU,EAAI,IAAI;YAClBL,OAAO,EAAOlW,UAAU,CAACgU,QAAQ,CAAC/K,aAAa,CAAC,KAAKH,IAAI,CAACnK,EAAE;AAC5D;AACAwX,YAAAA,WAAW,EAAG,IAAA;AAClB,WAAC,CAAC,CAAC;AACH9kB,UAAAA,MAAMA,CAAC;AAAEgM,YAAAA,IAAAA;AAAK,WAAC,EAAE;YACb,IAAIA,IAAI,CAACkZ,UAAU,EAAE;cACjBvW,UAAU,CAACoW,QAAQ,CAACnN,aAAa,EAAE5L,IAAI,CAACF,GAAG,CAAC,CAAA;cAC5CE,IAAI,CAACjK,MAAM,CAACtC,KAAK,CAACoD,OAAO,CAACmiB,OAAO,IAAI;gBACjC,IAAIA,OAAO,KAAKhZ,IAAI,EAAE;kBAClBgZ,OAAO,CAACH,OAAO,GAAG,KAAK,CAAA;AAC3B,iBAAA;AACJ,eAAC,CAAC,CAAA;AACN,aAAA;AACJ,WAAA;SACH,CAAA;AACL,OAAA;MACA,IAAI5F,aAAa,CAAC3f,KAAK,EAAE;QACrBG,KAAK,CAACshB,SAAS,GAAG;AACdlhB,UAAAA,IAAI,EAAO,wBAAwB;AACnCC,UAAAA,IAAI,EAAO,uBAAuB;AAClCC,UAAAA,MAAM,EAAK,GAAG;UACdhC,QAAQ,EAAG4Q,UAAU,CAAChP,QAAQ;AAC9BsJ,UAAAA,IAAI,EAAOgW,aAAa,CAACzZ,GAAG,CAAC2f,QAAQ,IAAI;AAAA,YAAA,IAAAC,qBAAA,CAAA;AACrC,YAAA,MAAMC,MAAM,GAAA,CAAAD,qBAAA,GAAG,IAAI,CAACvH,eAAe,MAAA,IAAA,IAAAuH,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,qBAAA,CAAsBtH,iBAAiB,CAAC;AACnDF,cAAAA,cAAc,EAAGuH,QAAQ;cACzBpH,QAAQ,EAASoH,QAAQ,CAACpH,QAAQ;cAClC9N,KAAK,EAAYkV,QAAQ,CAAClV,KAAK;cAC/B+N,OAAO,EAAUmH,QAAQ,CAACnH,OAAO;AACjCC,cAAAA,QAAQ,EAASkH,QAAQ,CAAClH,QAAQ,IAAK,CAAChhB,MAAM,CAACkhB,iBAAiB,IAAI,EAAE,KAAKgH,QAAQ,CAACjH,KAAK,IAAI,EAAE,CAAA;AACnG,aAAC,CAAC,CAAA;YACF,OAAO;cACHpS,GAAG,EAAIqZ,QAAQ,CAAC7X,EAAE;AAClBlB,cAAAA,GAAG,EAAI,sBAAsB;cAC7BvM,IAAI,EAAGwlB,MAAM,GAAG;AACZvjB,gBAAAA,SAAS,EAAG,4BAA4B;gBACxCkE,QAAQ,EAAI,CACRqf,MAAM,EACNtI,YAAY,CAACC,UAAU,CAACmI,QAAQ,CAACxV,IAAI,CAAC,CAAA;eAE7C,GAAGoN,YAAY,CAACC,UAAU,CAACmI,QAAQ,CAACxV,IAAI,CAAC;cAC1CwV,QAAQ;cACRN,OAAO,EAAOlW,UAAU,CAACoS,SAAS,CAACpN,QAAQ,CAACwR,QAAQ,CAAC;AACrD;AACAG,cAAAA,WAAW,EAAGjE,UAAU,CAACC,oBAAoB,GAAG,QAAQ,GAAG,IAAA;aAC9D,CAAA;AACL,WACA,CAAC;AACDthB,UAAAA,MAAMA,CAAC;AAAEgM,YAAAA,IAAAA;AAAK,WAAC,EAAE;YACb,IAAIA,IAAI,CAACmZ,QAAQ,EAAE;AACfxW,cAAAA,UAAU,CAAC3C,IAAI,CAAC6Y,OAAO,GAAG,QAAQ,GAAG,UAAU,CAAC,CAAC7Y,IAAI,CAACmZ,QAAQ,CAAC,CAAA;AACnE,aAAA;AACJ,WAAA;SACH,CAAA;AACL,OAAA;MACA1lB,KAAK,CAAC8lB,UAAU,GAAG;QACf1lB,IAAI,EAAOoV,UAAU,IAAIvB,aAAa,CAAC1P,MAAM,GAAG,CAAC,GAAG,0BAA0B,GAAG,yBAAyB;AAC1GlE,QAAAA,IAAI,EAAO,wBAAwB;AACnCsM,QAAAA,GAAG,EAAQ,aAAa;AACxBrM,QAAAA,MAAM,EAAK,GAAG;QACdhC,QAAQ,EAAG4Q,UAAU,CAAChP,QAAQ;QAC9BK,MAAM,EAAKA,MAAM/C,MAAM,CAACsoB,UAAU,CAACtQ,UAAU,GAAGvB,aAAa,GAAG/E,UAAU,CAAA;OAC7E,CAAA;AACL,KAAA;AACJ,GAAA;EACA,IAAIlE,QAAQA,GAAG;AACX,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;EACA+a,iBAAiBA,CAACrI,KAAK,EAAE;AAAA,IAAA,IAAAsI,sBAAA,CAAA;IACrB,CAAAA,sBAAA,GAAI,IAAA,CAAC5H,eAAe,MAAA,IAAA,IAAA4H,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,sBAAA,CAAsBhnB,OAAO,EAAE,CAAA;AAC/B,IAAA,IAAI0e,KAAK,EAAE;AACP,MAAA,IAAI,CAACU,eAAe,GAAG,IAAIuB,eAAe,CAAC;AACvCtc,QAAAA,OAAO,EAAG,IAAI,CAAC7F,MAAM,CAAC6F,OAAAA;AAC1B,OAAC,CAAC,CAAA;AACN,KAAA;AACJ,GAAA;AACJ,CAAA;AACA;AACAvG,gBAAgB,CAACmO,QAAQ,CAACqZ,QAAQ,CAACzmB,IAAI,EAAEymB,QAAQ,CAAC,CAAA;AAClDA,QAAQ,CAAC5mB,MAAM,GAAG,UAAU;;AC9d5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMuoB,WAAW,SAASnpB,gBAAgB,CAAC;EACtD,OAAOc,KAAK,GAAG,aAAa,CAAA;EAC5B,OAAOC,IAAI,GAAG,aAAa,CAAA;AAC3B,EAAA,OAAOV,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQmO,IAAAA,OAAO,EAAG;MACNoS,KAAK,EAAG,EAAE;AACV;AACAsB,MAAAA,OAAO,EAAG,CAAC,MAAM,EAAE,SAAS,CAAA;KAC/B;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQkH,IAAAA,QAAQ,EAAG,IAAA;GACd,CAAA;AACD,EAAA,OAAOpoB,YAAY,GAAG;IAClB8L,KAAK,EAAG,CAAC,QAAQ,CAAA;GACpB,CAAA;AACD;EACAuc,cAAcA,CAACD,QAAQ,EAAE;AACrBnc,IAAAA,YAAY,CAACI,cAAc,CAAC+b,QAAQ,EAAE,+BAA+B,CAAC,CAAA;AACtE,IAAA,OAAOA,QAAQ,CAAA;AACnB,GAAA;AACA;EACAjnB,SAASA,CAACC,OAAO,EAAE;AACf,IAAA,KAAK,CAACD,SAAS,CAACC,OAAO,CAAC,CAAA;IACxB,IAAI,IAAI,CAACknB,QAAQ,EAAE;AACf,MAAA,IAAI,CAAC9a,OAAO,CAAChN,QAAQ,GAAGY,OAAO,CAAA;AACnC,KAAA;AACJ,GAAA;AACAmnB,EAAAA,aAAaA,CAAC/a,OAAO,EAAEgb,UAAU,EAAE;IAC/B,MACIroB,EAAE,GAAW,IAAI;AACjB,MAAA;AAAET,QAAAA,MAAAA;AAAO,OAAC,GAAGS,EAAE,CAAA;AACnB8L,IAAAA,YAAY,CAACC,YAAY,CAACsB,OAAO,EAAE,8BAA8B,CAAC,CAAA;AAClEgb,IAAAA,UAAU,aAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,UAAU,CAAEtnB,OAAO,EAAE,CAAA;AACrB,IAAA,IAAIsM,OAAO,EAAE;AACT,MAAA,OAAO,IAAIib,OAAO,CAACxc,YAAY,CAAC5G,MAAM,CAAC;AACnCqjB,QAAAA,QAAQ,EAAS,UAAU;AAC3B7Z,QAAAA,GAAG,EAAc,qBAAqB;AACtC8Z,QAAAA,WAAW,EAAM,8DAA8D;AAC/E5W,QAAAA,YAAY,EAAK,SAAS;QAC1B6W,UAAU,EAAOlpB,MAAM,CAAC6F,OAAO;AAC/BsjB,QAAAA,WAAW,EAAM,IAAI;AACrBC,QAAAA,UAAU,EAAO,CAAC;AAClBC,QAAAA,SAAS,EAAQ,GAAG;AACpBC,QAAAA,cAAc,EAAG,IAAI;AACrBC,QAAAA,SAAS,EAAQ1U,OAAO,CAACpU,EAAE,CAAC0L,MAAM,CAAC3J,KAAK,IAAI/B,EAAE,CAAC0L,MAAM,CAACqd,KAAK,CAAC;QAC5DC,OAAO,EAAUhpB,EAAE,CAACipB,UAAU,CAACC,IAAI,CAAClpB,EAAE,CAAC;QACvCK,QAAQ,EAASL,EAAE,CAACK,QAAQ;AAC5B8oB,QAAAA,WAAW,EAAM,KAAA;OACpB,EAAE9b,OAAO,CAAC,CAAC,CAAA;AAChB,KAAA;AACJ,GAAA;AACA4b,EAAAA,UAAUA,CAAC;IAAEG,GAAG;AAAEC,IAAAA,YAAAA;AAAa,GAAC,EAAE;IAC9B,MACI;AAAE9pB,QAAAA,MAAAA;AAAO,OAAC,GAAO,IAAI;AACrB0R,MAAAA,UAAU,GAAO1R,MAAM,CAACuW,iBAAiB,CAACuT,YAAY,CAAC;AACvDloB,MAAAA,YAAY,GAAK5B,MAAM,CAACkI,mBAAmB,CAAC4hB,YAAY,CAAC;AACzD1gB,MAAAA,cAAc,GAAGpJ,MAAM,CAACgV,qBAAqB,CAAC8U,YAAY,CAAC,CAAA;IAC/D,IAAI,IAAI,CAACpB,QAAQ,EAAE;MACf,OAAO,IAAI,CAACA,QAAQ,CAAC;QAAEmB,GAAG;QAAEnY,UAAU;QAAE9P,YAAY;QAAEwH,cAAc;AAAE0gB,QAAAA,YAAAA;AAAa,OAAC,CAAC,CAAA;AACzF,KAAA;IACA,MAAM/gB,QAAQ,GAAG,CACb;AACIiE,MAAAA,KAAK,EAAG,2BAA2B;MACnCpK,IAAI,EAAI8O,UAAU,CAACgB,IAAAA;AACvB,KAAC,EACD;AACI1F,MAAAA,KAAK,EAAG,2BAA2B;AACnCpK,MAAAA,IAAI,EAAIkd,YAAY,CAACqE,UAAU,CAACnkB,MAAM,CAAC0a,WAAW,CAAA;AACtD,KAAC,EACD;AACI1N,MAAAA,KAAK,EAAG,2BAA2B;MACnCpK,IAAI,EAAIhB,YAAY,CAACgB,IAAAA;AACzB,KAAC,CACJ,CAAA;AACD,IAAA,IAAIwG,cAAc,EAAE;MAChBL,QAAQ,CAACsD,IAAI,CACT;AACIW,QAAAA,KAAK,EAAG,2BAA2B;AACnCpK,QAAAA,IAAI,EAAIkd,YAAY,CAACqE,UAAU,CAACnkB,MAAM,CAAC2a,aAAa,CAAA;AACxD,OAAC,EACD;AACI3N,QAAAA,KAAK,EAAG,2BAA2B;QACnCpK,IAAI,EAAIwG,cAAc,CAACxG,IAAAA;AAC3B,OACJ,CAAC,CAAA;AACL,KAAA;AACA,IAAA,IAAI8O,UAAU,CAACoS,SAAS,CAAC/c,MAAM,EAAE;MAC7BgC,QAAQ,CAACsD,IAAI,CACT;AACIW,QAAAA,KAAK,EAAG,2BAA2B;AACnCpK,QAAAA,IAAI,EAAI,IAAI,CAACmnB,CAAC,CAAC,wBAAwB,CAAA;AAC3C,OAAC,EACD;AACI/c,QAAAA,KAAK,EAAG,2BAA2B;AACnCpK,QAAAA,IAAI,EAAI8O,UAAU,CAACoS,SAAS,CAACvb,GAAG,CAACoY,cAAc,IAAIA,cAAc,CAACjO,IAAI,CAAC,CAACsX,IAAI,CAAC,IAAI,CAAA;AACrF,OACJ,CAAC,CAAA;AACL,KAAA;IACA,OAAO;AACHjhB,MAAAA,QAAAA;KACH,CAAA;AACL,GAAA;AACAkhB,EAAAA,MAAMA,GAAG;AACL;AACA,IAAA,IAAI,CAACC,SAAS,CAAC,SAAS,CAAC,CAAA;AAC7B,GAAA;AACJ,CAAA;AACAzB,WAAW,CAACnlB,SAAS,EAAE,CAAA;AACvBmlB,WAAW,CAACvoB,MAAM,GAAG,aAAa;;AChLlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMiqB,WAAW,SAASC,KAAK,CAAC;EAC3C,OAAOhqB,KAAK,GAAG,aAAa,CAAA;AAC5B,EAAA,OAAOiqB,MAAM,GAAG;AACZ;AACR;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;EACQ,MAAM;AACN;AACR;AACA;AACA;EACQ,SAAS;AACT;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAE3X,IAAAA,IAAI,EAAG,OAAO;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AACnC;AACR;AACA;AACA;AACA;EACQ,aAAa;AACb;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,aAAa;AAAErS,IAAAA,IAAI,EAAG,SAAS;AAAEiqB,IAAAA,YAAY,EAAG,IAAA;GAAM;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAE5X,IAAAA,IAAI,EAAG,WAAW;AAAErS,IAAAA,IAAI,EAAG,SAAA;GAAW;AACxC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,QAAQ;AAAErS,IAAAA,IAAI,EAAG,SAAA;GAAW;AACrC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,OAAO;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AACnC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,MAAM;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AAClC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,UAAU;AAAErS,IAAAA,IAAI,EAAG,QAAA;AAAS,GAAC,CACzC,CAAA;AACD;AACJ;AACA;AACA;AACA;EACI,IAAI0a,KAAKA,GAAG;IACR,OAAO,IAAI,CAAC7W,SAAS,CAACqmB,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;AACpD,GAAA;EACA,IAAIrmB,SAASA,GAAG;AACZ,IAAA,OAAO,IAAI,CAACsmB,UAAU,CAACtmB,SAAS,CAAA;AACpC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMumB,QAAQA,GAAG;AACb,IAAA,OAAO,IAAI,CAACvmB,SAAS,CAACumB,QAAQ,CAAC,IAAI,CAAC,CAAA;AACxC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,MAAMA,GAAG;AACX,IAAA,OAAO,IAAI,CAACxmB,SAAS,CAACwmB,MAAM,CAAC,IAAI,CAAC,CAAA;AACtC,GAAA;AACJ,CAAA;AACAP,WAAW,CAACjqB,MAAM,GAAG,aAAa;;AChMlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMyqB,SAAS,SAASC,UAAU,CAAC;EAC9C,OAAOxqB,KAAK,GAAG,WAAW,CAAA;AAC1B,EAAA,OAAOiqB,MAAM,GAAG;AACZ;AACR;AACA;AACA;AACA;EACQ,QAAQ;AACR;AACR;AACA;AACA;AACA;EACQ,MAAM;AACN;AACR;AACA;AACA;AACA;EACQ,aAAa;AACb;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACQ,YAAY;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAE3X,IAAAA,IAAI,EAAG,QAAQ;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AACpC;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,UAAU;AAAErS,IAAAA,IAAI,EAAG,SAAA;AAAU,GAAC,CAC1C,CAAA;AACL,CAAA;AACAsqB,SAAS,CAACzqB,MAAM,GAAG,WAAW;;AClM9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM2qB,SAAS,SAASC,UAAU,CAAC;AAC9C,EAAA,OAAOnrB,YAAY,GAAG;AAClBorB,IAAAA,gBAAgB,EAAG,IAAI;AACvBC,IAAAA,OAAO,EAAG,OAAO;AACjB;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAGN,SAAS;AACtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQO,IAAAA,qBAAqB,EAAG,KAAK;AAC7B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,OAAO,EAAG,CACN;AAAEnZ,MAAAA,KAAK,EAAG,QAAQ;AAAEoZ,MAAAA,SAAS,EAAG,IAAA;KAAM,CAAA;GAE7C,CAAA;AACDC,EAAAA,aAAaA,GAAG;IACZ,MAAM;AAAEC,MAAAA,OAAAA;AAAQ,KAAC,GAAG,IAAI,CAAA;AACxB,IAAA,IAAI,IAAI,CAACP,gBAAgB,IAAI,CAACO,OAAO,CAACzV,IAAI,CAACqB,CAAC,IAAIA,CAAC,CAACpU,MAAM,IAAI,IAAI,CAAC,EAAE;AAC/D,MAAA,KAAK,IAAIgD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwlB,OAAO,CAACvkB,MAAM,EAAEjB,CAAC,EAAE,EAAE;AACrCwlB,QAAAA,OAAO,CAACxlB,CAAC,CAAC,CAACylB,OAAO,CAAC,QAAQ,EAAE,CAACzlB,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAA;AAC/C,OAAA;AACJ,KAAA;AACJ,GAAA;AACJ,CAAA;AACA+kB,SAAS,CAAC3qB,MAAM,GAAG,WAAW;;ACrG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMsrB,YAAY,SAASC,cAAqB,CAACjsB,KAAK,CAACksB,kBAAkB,CAAC,CAAC;AACtF,EAAA,OAAO/rB,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACQgsB,IAAAA,eAAe,EAAGd,SAAS;AAC3Be,IAAAA,eAAe,EAAGjB,SAAS;AAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACQkB,IAAAA,cAAc,EAAGhB,SAAS;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQiB,IAAAA,cAAc,EAAGnB,SAAAA;GACpB,CAAA;EACDoB,SAASA,CA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,OAAO;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AACnC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,aAAa;AAAErS,IAAAA,IAAI,EAAG,SAAS;AAAEiqB,IAAAA,YAAY,EAAG,IAAA;GAAM;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAE5X,IAAAA,IAAI,EAAG,WAAW;AAAErS,IAAAA,IAAI,EAAG,SAAA;GAAW;AACxC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,QAAQ;AAAErS,IAAAA,IAAI,EAAG,SAAA;GAAW;AACrC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,QAAQ;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AACpC;AACR;AACA;AACA;AACQ,EAAA;AAAEqS,IAAAA,IAAI,EAAG,MAAM;AAAErS,IAAAA,IAAI,EAAG,QAAA;GAAU;AAClC;AACR;AACA;AACA;AACA;AACQ,EAAA,aAAa,CAChB,CAAA;EACD,IAAI6D,SAASA,GAAG;AACZ,IAAA,OAAO,IAAI,CAACsmB,UAAU,CAACtmB,SAAS,CAAA;AACpC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMumB,QAAQA,GAAG;AACb,IAAA,IAAI,CAACvmB,SAAS,CAACumB,QAAQ,CAAC,IAAI,CAAC,CAAA;AACjC,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,MAAMA,GAAG;AACX,IAAA,OAAO,IAAI,CAACxmB,SAAS,CAACwmB,MAAM,CAAC,IAAI,CAAC,CAAA;AACtC,GAAA;AACA;AACJ;AACA;AACA;AACA;EACI,IAAI3P,KAAKA,GAAG;AACR,IAAA,OAAO,CAAC,IAAI,IAAI,CAAC7W,SAAS,CAACwoB,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;AAC7D,GAAA;AACJ,CAAA;AACAD,aAAa,CAACvsB,MAAM,GAAG,eAAe;;AClLtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAeye,CAAAA,MAAM,IAAI,MAAMgO,cAAc,UAAUhO,MAAM,IAAIpb,IAAI,EAAE;AACnE;EACA,OAAOnD,KAAK,GAAG,gBAAgB,CAAA;AAC/B,EAAA,OAAOT,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQitB,IAAAA,oBAAoB,EAAG,IAAI;AAC3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,aAAa,EAAG,KAAK;AACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,mBAAmB,EAAG,IAAA;GACzB,CAAA;EACD,IAAIC,WAAWA,GAAG,EAAC;AACnB;AACA;EACAC,0BAA0BA,CAACJ,oBAAoB,EAAE;AAC7CrgB,IAAAA,YAAY,CAACiF,aAAa,CAACob,oBAAoB,EAAE,sBAAsB,CAAC,CAAA;AACxE,IAAA,OAAOA,oBAAoB,CAAA;AAC/B,GAAA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMnC,QAAQA,CAACrX,MAAM,EAAE;AACnB,IAAA,OAAO,IAAI,CAAC6Z,cAAc,CAAC7Z,MAAM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C;AACR;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ3Q,OAAO,EAAG,EAAE;AACZ;AACR;AACA;AACA;AACA;AACA;AACQwe,IAAAA,WAAW,EAAG,IAAI;AAClB;AACR;AACA;AACA;AACA;AACA;AACQvV,IAAAA,SAAS,EAAG,IAAI;AAChB;AACR;AACA;AACA;AACA;AACA;AACQ/I,IAAAA,KAAK,EAAG,IAAI;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;IACQue,eAAe,EAAG,EAAE;AACpBC,IAAAA,gBAAgB,EAAG;AACfC,MAAAA,aAAa,EAAG,IAAI;AACpBC,MAAAA,SAAS,EAAO,GAAA;KACnB;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,IAAA;GACd,CAAA;EACD,IAAI3M,WAAWA,GAAG,EAAC;AACnB;AACA;EACA,IAAIsM,WAAWA,GAAG;AACd,IAAA,OAAO,IAAI,CAACxe,OAAO,CAACsR,eAAe,CAACb,OAAO,CAAA;AAC/C,GAAA;EACAqO,iBAAiBA,CAACrO,OAAO,EAAE;AACvB,IAAA,IAAI,CAACzQ,OAAO,CAACsR,eAAe,CAACE,IAAI,GAAGf,OAAO,CAAA;AAC/C,GAAA;EACA,IAAIxH,SAASA,GAAG;AACZ,IAAA,OAAO,IAAI,CAACjJ,OAAO,CAACmH,aAAa,CAACsJ,OAAO,CAAA;AAC7C,GAAA;EACAsO,eAAeA,CAACtO,OAAO,EAAE;AACrB,IAAA,IAAI,CAACzQ,OAAO,CAACmH,aAAa,CAACqK,IAAI,GAAGf,OAAO,CAAA;AAC7C,GAAA;EACA,IAAIvQ,KAAKA,GAAG;AACR,IAAA,OAAO,IAAI,CAACF,OAAO,CAACD,SAAS,CAAC0Q,OAAO,CAAA;AACzC,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IAAA,IAAIvK,EAAE,CAACob,QAAQ,CAAC9J,cAAc,EAAE;AAC5BtR,MAAAA,EAAE,CAACgR,QAAQ,CAACC,UAAU,CAAC,CAAA;AAC3B,KAAA;AACA,IAAA,OAAOA,UAAU,CAAA;AACrB,GAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAM4W,UAAUA,CAAC5W,UAAU,EAAE;AACzB,IAAA,MAAM0E,WAAW,GAAGpN,WAAW,CAAC6yB,OAAO,CAACnqB,UAAU,CAAC,CAAA;AACnD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,IAAA,IAAI,OAAM,IAAI,CAACtO,OAAO,CAAC,kBAAkB,EAAE;AAAEgT,MAAAA,WAAAA;KAAa,CAAC,MAAK,KAAK,EAAE;MACnE,IAAI,CAACyE,OAAO,CAACD,SAAS,CAAC3R,MAAM,CAACmN,WAAW,CAAC,CAAA;AAC1C,MAAA,OAAO,IAAI,CAAA;AACf,KAAA;AACA,IAAA,OAAO,KAAK,CAAA;AAChB,GAAA;AACA;AACJ,CAAC;;AC7WD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAeuI,CAAAA,MAAM,IAAI,MAAMmd,kBAAkB,UAAUnd,MAAM,IAAIpb,IAAI,EAAE;AACvE;EACA,OAAOnD,KAAK,GAAG,oBAAoB,CAAA;AACnC,EAAA,OAAOT,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ0J,SAAS,EAAG,EAAE;AACd;AACR;AACA;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BAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAdA,gBAAA,CAAgB3N,OAAO,CAAC/T,UAAU,CAACgU,QAAQ,CAAC,IAAI,CAAC/K,aAAa,CAAC,CAAC,CAAA,CAAA;AACjG,GAAA;AACA;AACJ,CAAC;;ACzND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAAegE,CAAAA,MAAM,IAAI,MAAM6d,uBAAuB,UAAU7d,MAAM,IAAIpb,IAAI,EAAE;AAC5E;EACA,OAAOnD,KAAK,GAAG,yBAAyB,CAAA;AACxC,EAAA,OAAOT,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQg5B,IAAAA,aAAa,EAAG,IAAI;AACpB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ8D,IAAAA,UAAU,EAAG;AACTvc,MAAAA,KAAK,EAAK,IAAI;AACdsB,MAAAA,OAAO,EAAG,SAAA;KACb;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQkb,IAAAA,YAAY,EAAG,IAAA;GAClB,CAAA;EACD,IAAI3P,WAAWA,GAAG,EAAC;AACnB;AACA;EACA4P,gBAAgBA,CAACF,UAAU,EAAE;AACzBlwB,IAAAA,YAAY,CAACiF,aAAa,CAACirB,UAAU,EAAE,YAAY,CAAC,CAAA;AACpD,IAAA,OAAOA,UAAU,CAAA;AACrB,GAAA;EACAG,gBAAgBA,CAACH,UAAU,EAAE;AAAA,IAAA,IAAAhH,qBAAA,CAAA;IACzB,MAAMh1B,EAAE,GAAG,IAAI,CAAA;AACf,IAAA,CAAAg1B,qBAAA,GAAAh1B,EAAE,CAACi1B,wBAAwB,MAAA,IAAA,IAAAD,qBAAA,KAAA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AAA;GACrB;AACDC,EAAAA,gBAAgB,GAAG,uBAAuB;AAC1CC,EAAAA,OAAO,GAAY,SAAS;AAC5BC,EAAAA,QAAQ,GAAW,SAAS,CAAA;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAevgB,CAAAA,MAAM,IAAI,MAAMwgB,SAAS,UAAUxgB,MAAM,IAAIpb,IAAI,EAAE;AAC9D;EACA,OAAOnD,KAAK,GAAG,WAAW,CAAA;AAC1B,EAAA,OAAOT,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQovB,IAAAA,WAAW,EAAG;AACV7O,MAAAA,KAAK,EAAG;AACJtd,QAAAA,IAAI,EAAG;AAAEvC,UAAAA,IAAI,EAAG,MAAM;AAAE2R,UAAAA,KAAK,EAAG,MAAA;AAAO,SAAA;OAC1C;AACDwP,MAAAA,OAAO,EAAG;AACNxS,QAAAA,KAAK,EAAG,OAAA;AACZ,OAAA;KACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQggB,IAAAA,SAAS,EAAG;AACR9O,MAAAA,KAAK,EAAG;AACJtd,QAAAA,IAAI,EAAG;AAAEvC,UAAAA,IAAI,EAAG,MAAM;AAAE2R,UAAAA,KAAK,EAAG,aAAA;AAAc,SAAA;OACjD;AACDwP,MAAAA,OAAO,EAAG;AACNxS,QAAAA,KAAK,EAAG,OAAA;AACZ,OAAA;KACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQowB,IAAAA,WAAW,EAAG;AACVlf,MAAAA,KAAK,EAAG;AACJ2e,QAAAA,eAAe,EAAG;AAAEx+B,UAAAA,IAAI,EAAG,iBAAiB;AAAE2R,UAAAA,KAAK,EAAG,WAAA;AAAY,SAAA;OACrE;AACDwP,MAAAA,OAAO,EAAG;AACNxS,QAAAA,KAAK,EAAG,OAAA;AACZ,OAAA;KACH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQjD,IAAAA,YAAY,EAAG,IAAA;GAClB,CAAA;EACD,IAAIghB,WAAWA,GAAG,EAAC;AACnB;AACA;EACAtgB,kBAAkBA,CAACV,YAAY,EAAE;AAC7BQ,IAAAA,YAAY,CAACI,cAAc,CAACZ,YAAY,EAAE,cAAc,CAAC,CAAA;AACzD,IAAA,OAAOA,YAAY,CAA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Cwf,KAAK,CAAC,IAAI,CAACZ,SAAS,CAAC,CAAA;MACnC,IAAI,CAACgG,cAAc,GAAG,IAAI,CAAA;AAC9B,KAAA;AACA,IAAA,KAAK,CAACD,WAAW,CAAC3kB,KAAK,EAAEgC,GAAG,CAAC,CAAA;AACjC,GAAA;EACA,IAAIhC,KAAKA,GAAG;AACR,IAAA,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK,CAAA;IACzB,IAAI,IAAI,CAAC4kB,cAAc,EAAE;AACrB,MAAA,OAAO5kB,KAAK,CAAC8J,IAAI,CAAC,IAAI,CAAC8U,SAAS,CAAC,CAAA;AACrC,KAAA;AACA,IAAA,OAAO5e,KAAK,CAAA;AAChB,GAAA;EACA,IAAIA,KAAKA,CAACA,KAAK,EAAE;IACb,KAAK,CAACA,KAAK,GAAGA,KAAK,CAAA;AACvB,GAAA;AACJ,CAAA;AACAqkB,QAAQ,CAACjhC,SAAS,EAAE,CAAA;AACpBihC,QAAQ,CAACrkC,MAAM,GAAG,UAAU;;AC9E5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM6kC,QAAQ,SAASn0B,QAAQ,CAAC;EAC3C,OAAOxQ,KAAK,GAAG,UAAU,CAAA;EACzB,OAAOC,IAAI,GAAG,MAAM,CAAA;AACpB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA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,KAAK,EACLC,WAAW,EACXC,SAAS,EACT3B,eAAe,EACf7Z,cAAc,EACdyb,UAAU,EACVzZ,eAAe,EACf+B,gBAAgB,EAChBkC,YAAY,EACZoB,kBAAkB,EAClBuC,eAAe,EACf4C,eAAe,EACf2C,kBAAkB,EAClBU,uBAAuB,EACvB2C,SAAS,EACTwB,cAAc,EACdgC,aACJ,CAAC,CAAC;AACE;EACA,OAAOviC,KAAK,GAAG,eAAe,CAAA;EAC9B,OAAOC,IAAI,GAAG,eAAe,CAAA;AAC7B,EAAA,OAAOgoC,WAAW,GAAG;AACjBC,IAAAA,OAAO,EAAGhpC,gBAAAA;GACb,CAAA;AACD,EAAA,OAAOK,YAAY,GAAG;AAClB;AACA;AACA;AACA4oC,IAAAA,MAAM,EAAG,MAAM;AACf;AACR;AACA;AACA;AACA;AACA;AACQ1sB,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ2sB,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,gBAAgB,EAAG,IAAI;AACvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQzvB,IAAAA,WAAW,EAAG,CAAC;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ0vB,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,iBAAiB,EAAG,IAAI;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQlQ,IAAAA,aAAa,EAAG,KAAK;AACrB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQiD,IAAAA,gBAAgB,EAAG,KAAK;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQxa,IAAAA,iBAAiB,EAAG,IAAI;AACxB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ0nB,IAAAA,YAAY,EAAG,WAAW;AAC1B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQhhC,IAAAA,aAAa,EAAG;MACZsY,KAAK,EAAG,EAAE;AACVsB,MAAAA,OAAO,EAAG,CAAC,SAAS,EAAE,MAAM,CAAA;KAC/B;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQzF,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACQzM,IAAAA,yBAAyB,EAAG,KAAK;AACjCsa,IAAAA,WAAW,EAAG,KAAK;AACnB;AACA;AACA;AACAvI,IAAAA,UAAU,EAAG,IAAA;GAChB,CAAA;AACDwnB,EAAAA,mBAAmB,GAAM,KAAK,CAAA;AAC9BlN,EAAAA,sBAAsB,GAAG,CAAC,CAAA;AAC1BmN,EAAAA,oBAAoB,GAAK,IAAI56B,GAAG,EAAE,CAAA;AAClC,EAAA,OAAO0oB,SAAS,GAAG;AACfmS,IAAAA,gBAAgB,EAAG,KAAA;GACtB,CAAA;AACD;AACA;AACAC,EAAAA,eAAeA,GAAG;AACd;AACA;AAAA,GAAA;EAEJhS,OAAOA,CAAC,GAAGn3B,IAAI,EAAE;AACb,IAAA,IAAI,IAAI,CAACmpC,eAAe,EAAE,EAAE;AACxB,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,KAAK,CAAChS,OAAO,CAAC,GAAGn3B,IAAI,CAAC,CAAA;AAC1B,GAA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A;AACL,CAAA;AACA2H,SAAS,CAACpjC,SAAS,EAAE,CAAA;AACrBojC,SAAS,CAACxmC,MAAM,GAAG,WAAW;;ACtoB9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMysC,iBAAiB,SAASC,WAAW,CAACptC,KAAK,CAACof,eAAe,CAAC,CAAC;EAC9E,OAAOxe,KAAK,GAAG,mBAAmB,CAAA;EAClC,OAAOC,IAAI,GAAG,mBAAmB,CAAA;AACjC,EAAA,OAAOV,YAAY,GAAG;AAClB;AACR;AACA;AACQysB,IAAAA,KAAK,EAAG,wBAAwB;AAChC;AACR;AACA;AACA;AACA;AACA;AACQpa,IAAAA,KAAK,EAAG,MAAM;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ4R,IAAAA,KAAK,EAAG,4BAA4B;AACpCve,IAAAA,KAAK,EAAG,MAAM;AACdwnC,IAAAA,QAAQ,EAAG;AACPl2B,MAAAA,MAAM,EAAG;AACLxH,QAAAA,GAAG,EAAK,sBAAsB;AAC9B5B,QAAAA,KAAK,EAAG,OAAA;AACZ,OAAA;AACJ,KAAA;GACH,CAAA;AACL,CAAA;AACAo/B,iBAAiB,CAACrpC,SAAS,EAAE,CAAA;AAC7BqpC,iBAAiB,CAACzsC,MAAM,GAAG,mBAAmB;;AClE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM4sC,kBAAkB,SAASC,MAAM,CAACvtC,KAAK,CAACof,eAAe,CAAC,CAAC;EAC1E,OAAOxe,KAAK,GAAG,oBAAoB,CAAA;EACnC,OAAOC,IAAI,GAAG,oBAAoB,CAAA;AAClC,EAAA,OAAOV,YAAY,GAAG;AACl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AAC;QAC/C0D,QAAQ;AACRvD,QAAAA,MAAM,EAAG,oBAAA;AACb,OAAC,CAAC,CAAC,CAAA;AACP,KAAA;AACA,IAAA,OAAO,KAAK,CAAC0qC,UAAU,CAACzhC,IAAI,CAAC,CAAA;AACjC,GAAA;AACJ,CAAA;AACAgiC,oBAAoB,CAAC1qC,SAAS,EAAE,CAAA;AAChC0qC,oBAAoB,CAAC9tC,MAAM,GAAG,sBAAsB;;AChEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMguC,eAAe,SAAStB,WAAW,CAACptC,KAAK,CAACof,eAAe,CAAC,CAAC;EAC5E,OAAOxe,KAAK,GAAG,iBAAiB,CAAA;EAChC,OAAOC,IAAI,GAAG,iBAAiB,CAAA;AAC/B,EAAA,OAAOV,YAAY,GAAG;AAClBysB,IAAAA,KAAK,EAAG,kCAAkC;AAC1Cpa,IAAAA,KAAK,EAAG,MAAM;AACd4R,IAAAA,KAAK,EAAG,0BAA0B;AAClCve,IAAAA,KAAK,EAAG,MAAM;AACdwnC,IAAAA,QAAQ,EAAG;AACPl2B,MAAAA,MAAM,EAAG;AACLxH,QAAAA,GAAG,EAAK,sBAAsB;AAC9B5B,QAAAA,KAAK,EAAG,OAAA;AACZ,OAAA;AACJ,KAAA;GACH,CAAA;AACL,CAAA;AACA2gC,eAAe,CAAC5qC,SAAS,EAAE,CAAA;AAC3B4qC,eAAe,CAAChuC,MAAM,GAAG,iBAAiB;;AC9C1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"}