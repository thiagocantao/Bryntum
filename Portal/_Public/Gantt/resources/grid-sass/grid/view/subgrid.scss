@import '../../variables';

//region Row & cell

.b-grid-row {
    display        : flex;
    flex-direction : row;
    align-items    : stretch;
    position       : absolute;

    .b-grid-subgrid & {
        min-width : 100%;
    }

    left           : 0;
    overflow       : hidden;
    border-bottom  : 1px solid $grid-cell-border-color;
    // default row height, will be read during initial render, but after that rows set height in style
    height         : $grid-row-height;

    // Blink-only right now. Layouts triggered inside the row won't cause document layout.
    // Must be "layout", not "strict", otherwise the cell won't "stretch" the row.
    contain        : layout;

    // In case of abort in drag from grid scenario
    &.b-aborting {
        transition : background-color 0.2s, transform 0.3s;
    }

    .b-rtl & {
        left  : auto;
        right : 0;
    }

    &.b-selected {
        background-color : $grid-row-selected-background-color;

        .b-grid-cell.b-checkbox-selection {
            background-color : $checkbox-selection-selected-background;
        }
    }

    &.b-removing {
        left           : -100%;
        transition     : left .4s, right .4s;
        // Should not trigger and mouse events on a row being removed
        pointer-events : none;
        // Above merged cells
        z-index        : 2;

        .b-rtl & {
            left  : auto;
            right : -100%;
        }
    }

    // TimeRanges for example use `cls: '.b-fa .b-fa-xx'` to apply an icon. If that range is used as a row of a grid,
    // the b-fa rule will mess up the row
    &.b-fa {
        // Make row display correctly
        display : flex;

        // Ditch icon
        &::before {
            content : none;
        }
    }
}

.b-grid-refreshing .b-grid-row {
    transition : none;
}

.b-grid-row:not(.b-selected) {
    .b-grid-cell.b-selected {
        background-color : $grid-row-selected-cell-background-color;

        &.b-hover {
            background-color : $grid-focus-row-selected-cell-background-color;
        }

        &.b-checkbox-selection {
            background-color : $checkbox-selection-selected-background;
        }
    }
}

.b-grid-cell {
    position          : relative;
    display           : flex;
    align-items       : center;
    color             : $grid-cell-color;
    font-weight       : $grid-cell-font-weight;
    padding           : 0 .5em;
    overflow          : hidden;
    white-space       : nowrap;
    flex-shrink       : 0;
    text-overflow     : ellipsis;
    border-inline-end : 1px solid $grid-cell-border-color;
    transform-style   : flat;
    width             : 0; // flex trick to get small widths correct

    // Blink-only right now. Layouts triggered inside the cell won't cause document layout.
    contain           : strict;

    &:last-child {
        border-inline-end-color : transparent;
    }

    > i:not(:last-child) {
        margin-inline-end : .5em;
    }

    .b-show-dirty & {
        &.b-cell-dirty:before {
            content          : " ";
            position         : absolute;
            top              : -.35em;
            left             : -.35em;
            background-color : red;
            width            : 0.7em;
            height           : 0.7em;
            transform        : rotateZ(45deg);

            .b-rtl & {
                left  : auto;
                right : -.35em;
            }
        }
    }

    &.b-checkbox-selection {
        background-color : $checkbox-selection-background;
    }

    &:focus, &:focus-within {
        transition : none !important;
        outline    : none;
    }

    &.b-auto-height {
        white-space : normal;
    }

    &.b-measuring-auto-height {
        contain    : paint style layout; // Replaces strict, cannot use size since we want it to grow
        align-self : baseline;

        .b-firefox & {
            contain : paint layout; // FF does not allow style
        }
    }
}

// Only show focus outline when accessing grid cell with keyboard
body.b-using-keyboard,
.b-outer.b-using-keyboard,
{
    .b-grid-cell, .b-grid-header {
        &:focus, &:focus-within {
            outline        : $grid-cell-focused-outline-width $grid-cell-focused-outline-style $grid-cell-focused-outline-color;
            outline-offset : -$grid-cell-focused-outline-width;
        }
    }
}

.b-readonly > .b-grid-cell {
    color : $grid-cell-readonly-color;
}


// TODO: Remove usage of left and right for alignment.
// Use start and end to be LTR/RTL neutral.
.b-grid-cell-align-right, .b-grid-cell-align-end {
    justify-content : flex-end;
}

.b-grid-cell-align-center {
    justify-content : center;
}

//endregion

.b-grid-subgrid {
    &.b-grid-subgrid-collapsed {
        width     : $grid-region-collapsed-width;
        min-width : $grid-region-collapsed-width !important;
    }

    overscroll-behavior : contain auto;
    position            : relative;

    //endregion

    //region Expand & collapse

    &.b-grid-subgrid-animate-collapse {
        transition : width .15s;
    }

    //endregion
}

// Default to disabling scroll while playing demos, otherwise it is to easy for users to interfere
.b-playing-demo .b-grid-subgrid {
    overflow : hidden !important;
}

.b-grid-header-scroller.b-grid-subgrid-animate-collapse {
    transition : width .15s;
}

// NOTE: cannot use :hover since a row can be broken up between multiple subgrids and each need to be highlighted
// (and also :hover gives some visual artifacts when scroll reusing elements)
.b-gridbase:not(.b-moving-splitter) .b-grid-subgrid:not(.b-timeaxissubgrid) .b-grid-row:not(.b-group-row) {

    &.b-hover {
        background-color : $grid-row-hover-background-color;

        &.b-selected {
            background-color : $grid-row-selected-background-color;
        }

        // Highlight row and cell on hover
        .b-grid-cell {
            background-color : $grid-cell-hover-background-color;

            &.b-focused {
                background-color : $grid-cell-row-hover-background-color;
            }

            &.b-checkbox-selection {
                background-color : $checkbox-selection-hover-background;
            }
        }
    }

    .b-grid-cell.b-hover {
        background-color : $grid-cell-hover-background-color;

        &.b-selected {
            background-color : $grid-focus-row-selected-cell-background-color;
        }

        &.b-checkbox-selection {
            background-color : $checkbox-selection-hover-background;
        }
    }
}
